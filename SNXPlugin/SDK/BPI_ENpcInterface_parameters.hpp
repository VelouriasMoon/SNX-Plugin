#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ENpcInterface

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "EBattlePhase_em8210_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "EBattleVoice_em8200_structs.hpp"
#include "Enum_BattleType_em8000_structs.hpp"
#include "FRegisterShotData_structs.hpp"
#include "EBulletType_structs.hpp"
#include "ST_em8220_CableInfo_structs.hpp"
#include "Enum_BattleType_em8010_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "ETelepoMoveType_em8200_structs.hpp"


namespace SDK::Params
{

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetBarrierComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_GetBarrierComponent final
{
public:
	class UBP_EnemyBarrierComponent_C*            Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetBarrierComponent) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_GetBarrierComponent");
static_assert(sizeof(BPI_ENpcInterface_C_GetBarrierComponent) == 0x000008, "Wrong size on BPI_ENpcInterface_C_GetBarrierComponent");
static_assert(offsetof(BPI_ENpcInterface_C_GetBarrierComponent, Component) == 0x000000, "Member 'BPI_ENpcInterface_C_GetBarrierComponent::Component' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_GetEnpcComponent final
{
public:
	class UBP_ENpcComponent_C*                    Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetEnpcComponent) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_GetEnpcComponent");
static_assert(sizeof(BPI_ENpcInterface_C_GetEnpcComponent) == 0x000008, "Wrong size on BPI_ENpcInterface_C_GetEnpcComponent");
static_assert(offsetof(BPI_ENpcInterface_C_GetEnpcComponent, Component) == 0x000000, "Member 'BPI_ENpcInterface_C_GetEnpcComponent::Component' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcSequencerComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_GetEnpcSequencerComponent final
{
public:
	class UBP_ENPCSequencerComponent_C*           Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetEnpcSequencerComponent) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_GetEnpcSequencerComponent");
static_assert(sizeof(BPI_ENpcInterface_C_GetEnpcSequencerComponent) == 0x000008, "Wrong size on BPI_ENpcInterface_C_GetEnpcSequencerComponent");
static_assert(offsetof(BPI_ENpcInterface_C_GetEnpcSequencerComponent, Component) == 0x000000, "Member 'BPI_ENpcInterface_C_GetEnpcSequencerComponent::Component' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetPartner
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_GetPartner final
{
public:
	class AActor*                                 PartnerActor;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_GetPartner) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8000_GetPartner");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_GetPartner) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8000_GetPartner");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_GetPartner, PartnerActor) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_GetPartner::PartnerActor' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_BulletAttackEnd
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_BulletAttackEnd final
{
public:
	EBulletType                                   BulletType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_BulletAttackEnd) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_BulletAttackEnd");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_BulletAttackEnd) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_BulletAttackEnd");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_BulletAttackEnd, BulletType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_BulletAttackEnd::BulletType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_BulletAttackEnd, bEnd) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_BulletAttackEnd::bEnd' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartTelepoMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StartTelepoMove final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StartTelepoMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StartTelepoMove");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StartTelepoMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_StartTelepoMove");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartTelepoMove, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StartTelepoMove::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EndTelepoMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EndTelepoMove final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EndTelepoMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EndTelepoMove");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EndTelepoMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_EndTelepoMove");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EndTelepoMove, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EndTelepoMove::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CalcTelepoMoveLocation
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation final
{
public:
	ETelepoMoveType_em8200                        TelepoType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B3E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TelepoMoveLocation;                                // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation, TelepoType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation::TelepoType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation, TelepoMoveLocation) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_CalcTelepoMoveLocation::TelepoMoveLocation' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetTelepoMoveLocation
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation final
{
public:
	struct FVector                                OutputTelepoMoveLocation;                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation, OutputTelepoMoveLocation) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_GetTelepoMoveLocation::OutputTelepoMoveLocation' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetTelepoMoveLocation
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation final
{
public:
	struct FVector                                InputTelepoMoveLocation;                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation, InputTelepoMoveLocation) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation::InputTelepoMoveLocation' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation, Dummy) == 0x00000C, "Member 'BPI_ENpcInterface_C_Em8200_SetTelepoMoveLocation::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorPlayMontage
// 0x0018 (0x0018 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B3F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage) == 0x000018, "Wrong size on BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage, Montage) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage, Dummy) == 0x000010, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorPlayMontage::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorUpdate
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_CopyActorUpdate final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSec;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextState;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_CopyActorUpdate) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_CopyActorUpdate");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_CopyActorUpdate) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8200_CopyActorUpdate");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorUpdate, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorUpdate::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorUpdate, DeltaSec) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorUpdate::DeltaSec' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorUpdate, NextState) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorUpdate::NextState' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorUpdate, bEnd) == 0x00000C, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorUpdate::bEnd' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UpdateMoveAssultAttack
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack final
{
public:
	int32                                         NewParam;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewParam1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewParam2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack, NewParam) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack::NewParam' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack, NewParam1) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack::NewParam1' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack, NewParam2) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_UpdateMoveAssultAttack::NewParam2' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorActive
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8200_CopyActorActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B40[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_CopyActorActive) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_CopyActorActive");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_CopyActorActive) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8200_CopyActorActive");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorActive, bActive) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorActive::bActive' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorActive, Param_Index) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorActive::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorActive, Dummy) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorActive::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetCopyActorAssultTotalTime
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime, TotalTime) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_GetCopyActorAssultTotalTime::TotalTime' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetCopyActorActive
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_GetCopyActorActive final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_GetCopyActorActive) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_GetCopyActorActive");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_GetCopyActorActive) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_GetCopyActorActive");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetCopyActorActive, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_GetCopyActorActive::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetCopyActorActive, bActive) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_GetCopyActorActive::bActive' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetCopyActorLocation
// 0x0014 (0x0014 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetCopyActorLocation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetCopyActorLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetCopyActorLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetCopyActorLocation) == 0x000014, "Wrong size on BPI_ENpcInterface_C_Em8200_SetCopyActorLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCopyActorLocation, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetCopyActorLocation::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCopyActorLocation, NewLocation) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_SetCopyActorLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCopyActorLocation, Dummy) == 0x000010, "Member 'BPI_ENpcInterface_C_Em8200_SetCopyActorLocation::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetCopyActorRotation
// 0x0014 (0x0014 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetCopyActorRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetCopyActorRotation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetCopyActorRotation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetCopyActorRotation) == 0x000014, "Wrong size on BPI_ENpcInterface_C_Em8200_SetCopyActorRotation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCopyActorRotation, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetCopyActorRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCopyActorRotation, NewRotation) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_SetCopyActorRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCopyActorRotation, Dummy) == 0x000010, "Member 'BPI_ENpcInterface_C_Em8200_SetCopyActorRotation::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetTargetableCopyActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B41[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   RSBattleCharacter;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor, RSBattleCharacter) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_GetTargetableCopyActor::RSBattleCharacter' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StoreHomingElecStartEnd
// 0x001C (0x001C - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd) == 0x00001C, "Wrong size on BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd, StartLocation) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd::StartLocation' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd, EndLocation) == 0x00000C, "Member 'BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd::EndLocation' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd, Dummy) == 0x000018, "Member 'BPI_ENpcInterface_C_Em8200_StoreHomingElecStartEnd::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StartSeeThrough final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StartSeeThrough) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StartSeeThrough");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StartSeeThrough) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_StartSeeThrough");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartSeeThrough, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StartSeeThrough::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsSpStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_IsSpStart final
{
public:
	bool                                          bSpStart;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsSpStart) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsSpStart");
static_assert(sizeof(BPI_ENpcInterface_C_IsSpStart) == 0x000001, "Wrong size on BPI_ENpcInterface_C_IsSpStart");
static_assert(offsetof(BPI_ENpcInterface_C_IsSpStart, bSpStart) == 0x000000, "Member 'BPI_ENpcInterface_C_IsSpStart::bSpStart' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.SetSpStart
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_SetSpStart final
{
public:
	bool                                          bSpStart;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_SetSpStart) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_SetSpStart");
static_assert(sizeof(BPI_ENpcInterface_C_SetSpStart) == 0x000002, "Wrong size on BPI_ENpcInterface_C_SetSpStart");
static_assert(offsetof(BPI_ENpcInterface_C_SetSpStart, bSpStart) == 0x000000, "Member 'BPI_ENpcInterface_C_SetSpStart::bSpStart' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_SetSpStart, Dummy) == 0x000001, "Member 'BPI_ENpcInterface_C_SetSpStart::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_PillarIceExtendTime
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_PillarIceExtendTime final
{
public:
	float                                         ExtendTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_PillarIceExtendTime) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_PillarIceExtendTime");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_PillarIceExtendTime) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_PillarIceExtendTime");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_PillarIceExtendTime, ExtendTime) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_PillarIceExtendTime::ExtendTime' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_PillarIceExtendTime, Dummy) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_PillarIceExtendTime::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetSpShockWaveLocation
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation, Location) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation::Location' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation, Dummy) == 0x00000C, "Member 'BPI_ENpcInterface_C_Em8200_SetSpShockWaveLocation::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_ApplyCommonBranch
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8210_ApplyCommonBranch final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8210_ApplyCommonBranch) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8210_ApplyCommonBranch");
static_assert(sizeof(BPI_ENpcInterface_C_Em8210_ApplyCommonBranch) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8210_ApplyCommonBranch");
static_assert(offsetof(BPI_ENpcInterface_C_Em8210_ApplyCommonBranch, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8210_ApplyCommonBranch::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_IsAttackDriveMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_IsAttackDriveMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_IsAttackDriveMode) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_IsAttackDriveMode");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_IsAttackDriveMode) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_IsAttackDriveMode");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_IsAttackDriveMode, bEnable) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_IsAttackDriveMode::bEnable' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_IsAttackBrainField
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_IsAttackBrainField final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_IsAttackBrainField) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_IsAttackBrainField");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_IsAttackBrainField) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_IsAttackBrainField");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_IsAttackBrainField, bEnable) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_IsAttackBrainField::bEnable' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_FireBomb
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_FireBomb final
{
public:
	class AActor*                                 Parent;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHard;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_FireBomb) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8000_FireBomb");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_FireBomb) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8000_FireBomb");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_FireBomb, Parent) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_FireBomb::Parent' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_FireBomb, bHard) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8000_FireBomb::bHard' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_FireBomb, Dummy) == 0x000009, "Member 'BPI_ENpcInterface_C_Em8000_FireBomb::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetBattleProcess
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_SetBattleProcess final
{
public:
	int32                                         Process;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_SetBattleProcess) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8000_SetBattleProcess");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_SetBattleProcess) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8000_SetBattleProcess");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetBattleProcess, Process) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_SetBattleProcess::Process' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetBattleProcess, Dummy) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8000_SetBattleProcess::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.CheckAbleInterceptInReactionChance
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance final
{
public:
	bool                                          bAbleIntercept;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance");
static_assert(sizeof(BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance) == 0x000001, "Wrong size on BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance");
static_assert(offsetof(BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance, bAbleIntercept) == 0x000000, "Member 'BPI_ENpcInterface_C_CheckAbleInterceptInReactionChance::bAbleIntercept' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_SetAutoAimRate
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_SetAutoAimRate final
{
public:
	float                                         NewRate;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_SetAutoAimRate) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8010_SetAutoAimRate");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_SetAutoAimRate) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8010_SetAutoAimRate");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_SetAutoAimRate, NewRate) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_SetAutoAimRate::NewRate' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_SetAutoAimRate, Dummy) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8010_SetAutoAimRate::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Ch0500_StartSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Ch0500_StartSeeThrough final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Ch0500_StartSeeThrough) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Ch0500_StartSeeThrough");
static_assert(sizeof(BPI_ENpcInterface_C_Ch0500_StartSeeThrough) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Ch0500_StartSeeThrough");
static_assert(offsetof(BPI_ENpcInterface_C_Ch0500_StartSeeThrough, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Ch0500_StartSeeThrough::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetTriggerLocation
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_SetTriggerLocation final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_SetTriggerLocation) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_SetTriggerLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_SetTriggerLocation) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_SetTriggerLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetTriggerLocation, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_SetTriggerLocation::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.SetStealthReactionInterval
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_SetStealthReactionInterval final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_SetStealthReactionInterval) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_SetStealthReactionInterval");
static_assert(sizeof(BPI_ENpcInterface_C_SetStealthReactionInterval) == 0x000001, "Wrong size on BPI_ENpcInterface_C_SetStealthReactionInterval");
static_assert(offsetof(BPI_ENpcInterface_C_SetStealthReactionInterval, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_SetStealthReactionInterval::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_SelectChakramCombo
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_SelectChakramCombo final
{
public:
	class FString                                 ComboType;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_SelectChakramCombo) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Np1100_SelectChakramCombo");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_SelectChakramCombo) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Np1100_SelectChakramCombo");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_SelectChakramCombo, ComboType) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_SelectChakramCombo::ComboType' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_GetChakramComboList
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_GetChakramComboList final
{
public:
	TArray<uint8>                                 ChakramComboList;                                  // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_GetChakramComboList) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Np1100_GetChakramComboList");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_GetChakramComboList) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Np1100_GetChakramComboList");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_GetChakramComboList, ChakramComboList) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_GetChakramComboList::ChakramComboList' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Ch0900_CreateCopy
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Ch0900_CreateCopy final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Ch0900_CreateCopy) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Ch0900_CreateCopy");
static_assert(sizeof(BPI_ENpcInterface_C_Ch0900_CreateCopy) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Ch0900_CreateCopy");
static_assert(offsetof(BPI_ENpcInterface_C_Ch0900_CreateCopy, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Ch0900_CreateCopy::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_StartHidden
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_StartHidden final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_StartHidden) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_StartHidden");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_StartHidden) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_StartHidden");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_StartHidden, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_StartHidden::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_EndHidden
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_EndHidden final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_EndHidden) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_EndHidden");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_EndHidden) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_EndHidden");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_EndHidden, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_EndHidden::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_SetBattlePhase
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_SetBattlePhase final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_SetBattlePhase) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Np1100_SetBattlePhase");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_SetBattlePhase) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Np1100_SetBattlePhase");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_SetBattlePhase, Phase) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_SetBattlePhase::Phase' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_SetBattlePhase, Dummy) == 0x000004, "Member 'BPI_ENpcInterface_C_Np1100_SetBattlePhase::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetChangeEm8010Process
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process, Value) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process::Value' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process, Dummy) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8000_SetChangeEm8010Process::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetChangeEm8010Process
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process final
{
public:
	int32                                         Process;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process) == 0x000004, "Wrong size on BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process, Process) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_GetChangeEm8010Process::Process' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ExecChangeEm8010
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_ExecChangeEm8010 final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_ExecChangeEm8010) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_ExecChangeEm8010");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_ExecChangeEm8010) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_ExecChangeEm8010");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ExecChangeEm8010, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_ExecChangeEm8010::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_SetThrowCount
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_SetThrowCount final
{
public:
	bool                                          bAdd;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_SetThrowCount) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_SetThrowCount");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_SetThrowCount) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Np1100_SetThrowCount");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_SetThrowCount, bAdd) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_SetThrowCount::bAdd' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_SetThrowCount, Dummy) == 0x000001, "Member 'BPI_ENpcInterface_C_Np1100_SetThrowCount::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.ForceFinishMetamorphosis
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_ForceFinishMetamorphosis final
{
public:
	bool                                          bBrainFieldCancel;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_ForceFinishMetamorphosis) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_ForceFinishMetamorphosis");
static_assert(sizeof(BPI_ENpcInterface_C_ForceFinishMetamorphosis) == 0x000002, "Wrong size on BPI_ENpcInterface_C_ForceFinishMetamorphosis");
static_assert(offsetof(BPI_ENpcInterface_C_ForceFinishMetamorphosis, bBrainFieldCancel) == 0x000000, "Member 'BPI_ENpcInterface_C_ForceFinishMetamorphosis::bBrainFieldCancel' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_ForceFinishMetamorphosis, Dummy) == 0x000001, "Member 'BPI_ENpcInterface_C_ForceFinishMetamorphosis::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_UseAttack_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_UseAttack_BrainTalk::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_UseSpTrigger_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_UseSpTrigger_BrainTalk::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UseAttackEnd_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_UseAttackEnd_BrainTalk::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100UseAfterSpAttack_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk, NewParam) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100UseAfterSpAttack_BrainTalk::NewParam' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_StartSpTriggerMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_StartSpTriggerMove final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_StartSpTriggerMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_StartSpTriggerMove");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_StartSpTriggerMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_StartSpTriggerMove");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_StartSpTriggerMove, NewParam) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_StartSpTriggerMove::NewParam' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_EndSpTriggerMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_EndSpTriggerMove final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_EndSpTriggerMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_EndSpTriggerMove");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_EndSpTriggerMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_EndSpTriggerMove");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_EndSpTriggerMove, NewParam) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_EndSpTriggerMove::NewParam' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetBattlePhase
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetBattlePhase final
{
public:
	EBattlePhase_em8210                           BattlePhase;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetBattlePhase) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetBattlePhase");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetBattlePhase) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_SetBattlePhase");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetBattlePhase, BattlePhase) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetBattlePhase::BattlePhase' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetBattlePhase, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_SetBattlePhase::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_GetBattlePhase final
{
public:
	EBattlePhase_em8210                           BattlePhase;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_GetBattlePhase) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_GetBattlePhase");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_GetBattlePhase) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_GetBattlePhase");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_GetBattlePhase, BattlePhase) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_GetBattlePhase::BattlePhase' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CanPlayExtraSasCutin
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin final
{
public:
	ESASCutinExtraID                              CutinID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlay;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin, CutinID) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin::CutinID' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin, CanPlay) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_CanPlayExtraSasCutin::CanPlay' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetCanPlayExtraSasCutin
// 0x0003 (0x0003 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin final
{
public:
	bool                                          bCanPlay;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESASCutinExtraID                              CutinID;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin) == 0x000003, "Wrong size on BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin, bCanPlay) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin::bCanPlay' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin, CutinID) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin::CutinID' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin, Return) == 0x000002, "Member 'BPI_ENpcInterface_C_Em8200_SetCanPlayExtraSasCutin::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.PassedStartBrainFieldStartHp
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_PassedStartBrainFieldStartHp final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_PassedStartBrainFieldStartHp) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_PassedStartBrainFieldStartHp");
static_assert(sizeof(BPI_ENpcInterface_C_PassedStartBrainFieldStartHp) == 0x000001, "Wrong size on BPI_ENpcInterface_C_PassedStartBrainFieldStartHp");
static_assert(offsetof(BPI_ENpcInterface_C_PassedStartBrainFieldStartHp, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_PassedStartBrainFieldStartHp::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartDodgeMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StartDodgeMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StartDodgeMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StartDodgeMove");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StartDodgeMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_StartDodgeMove");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartDodgeMove, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StartDodgeMove::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_CanStartDodgeMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8210_CanStartDodgeMove final
{
public:
	bool                                          CanStart;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8210_CanStartDodgeMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8210_CanStartDodgeMove");
static_assert(sizeof(BPI_ENpcInterface_C_Em8210_CanStartDodgeMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8210_CanStartDodgeMove");
static_assert(offsetof(BPI_ENpcInterface_C_Em8210_CanStartDodgeMove, CanStart) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8210_CanStartDodgeMove::CanStart' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_EndDodgeMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8210_EndDodgeMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8210_EndDodgeMove) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8210_EndDodgeMove");
static_assert(sizeof(BPI_ENpcInterface_C_Em8210_EndDodgeMove) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8210_EndDodgeMove");
static_assert(offsetof(BPI_ENpcInterface_C_Em8210_EndDodgeMove, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8210_EndDodgeMove::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableDodgeJust
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EnableDodgeJust final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EnableDodgeJust) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EnableDodgeJust");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EnableDodgeJust) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_EnableDodgeJust");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableDodgeJust, bEnable) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EnableDodgeJust::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableDodgeJust, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_EnableDodgeJust::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsEnableDodgeJust
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust, bEnable) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_IsEnableDodgeJust::bEnable' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.EnpcBulletAttackEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_EnpcBulletAttackEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_EnpcBulletAttackEnd) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_EnpcBulletAttackEnd");
static_assert(sizeof(BPI_ENpcInterface_C_EnpcBulletAttackEnd) == 0x000001, "Wrong size on BPI_ENpcInterface_C_EnpcBulletAttackEnd");
static_assert(offsetof(BPI_ENpcInterface_C_EnpcBulletAttackEnd, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_EnpcBulletAttackEnd::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_SetFakeUniqueName
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8010_SetFakeUniqueName final
{
public:
	class FName                                   FakeName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_SetFakeUniqueName) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8010_SetFakeUniqueName");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_SetFakeUniqueName) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8010_SetFakeUniqueName");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_SetFakeUniqueName, FakeName) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_SetFakeUniqueName::FakeName' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_SetFakeUniqueName, bDummy) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8010_SetFakeUniqueName::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetFakeUniqueName
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8000_SetFakeUniqueName final
{
public:
	class FName                                   FakeName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_SetFakeUniqueName) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8000_SetFakeUniqueName");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_SetFakeUniqueName) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8000_SetFakeUniqueName");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetFakeUniqueName, FakeName) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_SetFakeUniqueName::FakeName' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetFakeUniqueName, bDummy) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8000_SetFakeUniqueName::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Is Unique Enpc Type
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Is_Unique_Enpc_Type final
{
public:
	bool                                          IsUnique;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Is_Unique_Enpc_Type) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Is_Unique_Enpc_Type");
static_assert(sizeof(BPI_ENpcInterface_C_Is_Unique_Enpc_Type) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Is_Unique_Enpc_Type");
static_assert(offsetof(BPI_ENpcInterface_C_Is_Unique_Enpc_Type, IsUnique) == 0x000000, "Member 'BPI_ENpcInterface_C_Is_Unique_Enpc_Type::IsUnique' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_AttachMask
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_AttachMask final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_AttachMask) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_AttachMask");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_AttachMask) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_AttachMask");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_AttachMask, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_AttachMask::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetLastPhaseHpRate
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetLastPhaseHpRate::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_StartSpAfterVoice
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Np1100_StartSpAfterVoice final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Np1100_StartSpAfterVoice) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Np1100_StartSpAfterVoice");
static_assert(sizeof(BPI_ENpcInterface_C_Np1100_StartSpAfterVoice) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Np1100_StartSpAfterVoice");
static_assert(offsetof(BPI_ENpcInterface_C_Np1100_StartSpAfterVoice, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Np1100_StartSpAfterVoice::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcDyingHpRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_GetEnpcDyingHpRate final
{
public:
	float                                         EnpcDyingHpRate;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetEnpcDyingHpRate) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_GetEnpcDyingHpRate");
static_assert(sizeof(BPI_ENpcInterface_C_GetEnpcDyingHpRate) == 0x000004, "Wrong size on BPI_ENpcInterface_C_GetEnpcDyingHpRate");
static_assert(offsetof(BPI_ENpcInterface_C_GetEnpcDyingHpRate, EnpcDyingHpRate) == 0x000000, "Member 'BPI_ENpcInterface_C_GetEnpcDyingHpRate::EnpcDyingHpRate' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_PlayBattleVoice
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_PlayBattleVoice final
{
public:
	EBattleVoice_em8200                           EBattleVoiceType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_PlayBattleVoice) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_PlayBattleVoice");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_PlayBattleVoice) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_PlayBattleVoice");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_PlayBattleVoice, EBattleVoiceType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_PlayBattleVoice::EBattleVoiceType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_PlayBattleVoice, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_PlayBattleVoice::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_SetExecRush
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_SetExecRush final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_SetExecRush) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_SetExecRush");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_SetExecRush) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8010_SetExecRush");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_SetExecRush, bExec) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_SetExecRush::bExec' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_SetExecRush, bDummy) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8010_SetExecRush::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SuicideInformOwner
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SuicideInformOwner final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SuicideInformOwner) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SuicideInformOwner");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SuicideInformOwner) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_SuicideInformOwner");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SuicideInformOwner, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SuicideInformOwner::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_NotifyDead
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_NotifyDead final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_NotifyDead) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_NotifyDead");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_NotifyDead) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_NotifyDead");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_NotifyDead, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_NotifyDead::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_HomingElecEnd_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_HomingElecEnd_BrainTalk::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetWaitEventParty
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetWaitEventParty final
{
public:
	bool                                          InWait;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetWaitEventParty) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetWaitEventParty");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetWaitEventParty) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_SetWaitEventParty");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetWaitEventParty, InWait) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetWaitEventParty::InWait' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetWaitEventParty, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_SetWaitEventParty::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_SetAction final
{
public:
	EPlayerAIBattleThinkType                      AiType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_SetAction) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_SetAction");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_SetAction) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8000_SetAction");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetAction, AiType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_SetAction::AiType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_SetAction, Dummy) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8000_SetAction::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UpdateDodgeJust
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_UpdateDodgeJust final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJust) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_UpdateDodgeJust");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJust) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_UpdateDodgeJust");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJust, DeltaSec) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_UpdateDodgeJust::DeltaSec' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJust, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_UpdateDodgeJust::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_StartAppearEffect
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8290_StartAppearEffect final
{
public:
	bool                                          InAppear;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8290_StartAppearEffect) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8290_StartAppearEffect");
static_assert(sizeof(BPI_ENpcInterface_C_Em8290_StartAppearEffect) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8290_StartAppearEffect");
static_assert(offsetof(BPI_ENpcInterface_C_Em8290_StartAppearEffect, InAppear) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8290_StartAppearEffect::InAppear' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8290_StartAppearEffect, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8290_StartAppearEffect::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_SetSafeDestroy
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8290_SetSafeDestroy final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8290_SetSafeDestroy) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8290_SetSafeDestroy");
static_assert(sizeof(BPI_ENpcInterface_C_Em8290_SetSafeDestroy) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8290_SetSafeDestroy");
static_assert(offsetof(BPI_ENpcInterface_C_Em8290_SetSafeDestroy, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8290_SetSafeDestroy::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_StartDisappear
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8290_StartDisappear final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8290_StartDisappear) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8290_StartDisappear");
static_assert(sizeof(BPI_ENpcInterface_C_Em8290_StartDisappear) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8290_StartDisappear");
static_assert(offsetof(BPI_ENpcInterface_C_Em8290_StartDisappear, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8290_StartDisappear::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Ch0900_ForceCopyDead
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Ch0900_ForceCopyDead final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Ch0900_ForceCopyDead) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Ch0900_ForceCopyDead");
static_assert(sizeof(BPI_ENpcInterface_C_Ch0900_ForceCopyDead) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Ch0900_ForceCopyDead");
static_assert(offsetof(BPI_ENpcInterface_C_Ch0900_ForceCopyDead, Dummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Ch0900_ForceCopyDead::Dummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartDodgeJustFlash
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash final
{
public:
	float                                         FlashIntervalTime;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash, FlashIntervalTime) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash::FlashIntervalTime' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_StartDodgeJustFlash::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UpdateDodgeJustFlash
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash, DeltaSec) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash::DeltaSec' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_UpdateDodgeJustFlash::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EndDodgeJustFlash
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EndDodgeJustFlash::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetMaskVisibility
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetMaskVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetMaskVisibility) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetMaskVisibility");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetMaskVisibility) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_SetMaskVisibility");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetMaskVisibility, NewVisibility) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetMaskVisibility::NewVisibility' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetMaskVisibility, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_SetMaskVisibility::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableTargetableCopyActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_EnableTargetableCopyActor::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetEyeMaterial
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_SetEyeMaterial final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_SetEyeMaterial) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_SetEyeMaterial");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_SetEyeMaterial) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_SetEyeMaterial");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetEyeMaterial, On) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_SetEyeMaterial::On' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_SetEyeMaterial, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_SetEyeMaterial::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_1stAttack
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_1stAttack final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_1stAttack) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_1stAttack");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_1stAttack) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_1stAttack");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_1stAttack, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_1stAttack::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsTemporaryDriveMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_IsTemporaryDriveMode final
{
public:
	bool                                          IsTempDrive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsTemporaryDriveMode) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsTemporaryDriveMode");
static_assert(sizeof(BPI_ENpcInterface_C_IsTemporaryDriveMode) == 0x000001, "Wrong size on BPI_ENpcInterface_C_IsTemporaryDriveMode");
static_assert(offsetof(BPI_ENpcInterface_C_IsTemporaryDriveMode, IsTempDrive) == 0x000000, "Member 'BPI_ENpcInterface_C_IsTemporaryDriveMode::IsTempDrive' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_StartFinishMetamorphosis
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_StartFinishMetamorphosis::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsUniqueCondition_OpenBrainField
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField");
static_assert(sizeof(BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField) == 0x000001, "Wrong size on BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField");
static_assert(offsetof(BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField, bOK) == 0x000000, "Member 'BPI_ENpcInterface_C_IsUniqueCondition_OpenBrainField::bOK' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_EndUniqueNoDead
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8210_EndUniqueNoDead final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8210_EndUniqueNoDead) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8210_EndUniqueNoDead");
static_assert(sizeof(BPI_ENpcInterface_C_Em8210_EndUniqueNoDead) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8210_EndUniqueNoDead");
static_assert(offsetof(BPI_ENpcInterface_C_Em8210_EndUniqueNoDead, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8210_EndUniqueNoDead::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsRegisterTelepoMoveLocation
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation final
{
public:
	bool                                          IsRegister;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation, IsRegister) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_IsRegisterTelepoMoveLocation::IsRegister' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsUniqueCondition_Drive
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_IsUniqueCondition_Drive final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsUniqueCondition_Drive) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsUniqueCondition_Drive");
static_assert(sizeof(BPI_ENpcInterface_C_IsUniqueCondition_Drive) == 0x000001, "Wrong size on BPI_ENpcInterface_C_IsUniqueCondition_Drive");
static_assert(offsetof(BPI_ENpcInterface_C_IsUniqueCondition_Drive, bOK) == 0x000000, "Member 'BPI_ENpcInterface_C_IsUniqueCondition_Drive::bOK' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsAttachMask
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_IsAttachMask final
{
public:
	bool                                          bAttach;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_IsAttachMask) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_IsAttachMask");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_IsAttachMask) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_IsAttachMask");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_IsAttachMask, bAttach) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_IsAttachMask::bAttach' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsMaskVisible
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_IsMaskVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_IsMaskVisible) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_IsMaskVisible");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_IsMaskVisible) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_IsMaskVisible");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_IsMaskVisible, IsVisible) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_IsMaskVisible::IsVisible' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorWarmUp
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_CopyActorWarmUp final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_CopyActorWarmUp) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_CopyActorWarmUp");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_CopyActorWarmUp) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_CopyActorWarmUp");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_CopyActorWarmUp, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_CopyActorWarmUp::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartSpPsychic
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StartSpPsychic final
{
public:
	int32                                         StartPsychicType;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shot;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StartSpPsychic) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StartSpPsychic");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StartSpPsychic) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8200_StartSpPsychic");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartSpPsychic, StartPsychicType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StartSpPsychic::StartPsychicType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartSpPsychic, Shot) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_StartSpPsychic::Shot' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartSpPsychic, Return) == 0x000005, "Member 'BPI_ENpcInterface_C_Em8200_StartSpPsychic::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableAimCopyActor
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EnableAimCopyActor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EnableAimCopyActor) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EnableAimCopyActor");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EnableAimCopyActor) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_EnableAimCopyActor");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableAimCopyActor, bEnable) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EnableAimCopyActor::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableAimCopyActor, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_EnableAimCopyActor::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartAimCopyActor
// 0x0018 (0x0018 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_StartAimCopyActor final
{
public:
	float                                         AimSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAimAngle;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InternalLock;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ToCamera;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B42[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_StartAimCopyActor");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor) == 0x000018, "Wrong size on BPI_ENpcInterface_C_Em8200_StartAimCopyActor");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor, AimSpeed) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_StartAimCopyActor::AimSpeed' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor, MaxAimAngle) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_StartAimCopyActor::MaxAimAngle' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor, InternalLock) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_StartAimCopyActor::InternalLock' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor, ToCamera) == 0x000009, "Member 'BPI_ENpcInterface_C_Em8200_StartAimCopyActor::ToCamera' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor, SocketName) == 0x00000C, "Member 'BPI_ENpcInterface_C_Em8200_StartAimCopyActor::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_StartAimCopyActor, Return) == 0x000014, "Member 'BPI_ENpcInterface_C_Em8200_StartAimCopyActor::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_TriggerSequenceAfter
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter final
{
public:
	bool                                          bAfter;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter, bAfter) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter::bAfter' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8200_TriggerSequenceAfter::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.StartDamageMove
// 0x0014 (0x0014 - 0x0000)
struct BPI_ENpcInterface_C_StartDamageMove final
{
public:
	struct FVector                                DamageDir;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadMove;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Duumy;                                             // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_StartDamageMove) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_StartDamageMove");
static_assert(sizeof(BPI_ENpcInterface_C_StartDamageMove) == 0x000014, "Wrong size on BPI_ENpcInterface_C_StartDamageMove");
static_assert(offsetof(BPI_ENpcInterface_C_StartDamageMove, DamageDir) == 0x000000, "Member 'BPI_ENpcInterface_C_StartDamageMove::DamageDir' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_StartDamageMove, Power) == 0x00000C, "Member 'BPI_ENpcInterface_C_StartDamageMove::Power' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_StartDamageMove, DeadMove) == 0x000010, "Member 'BPI_ENpcInterface_C_StartDamageMove::DeadMove' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_StartDamageMove, Duumy) == 0x000011, "Member 'BPI_ENpcInterface_C_StartDamageMove::Duumy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableIntenceVoice
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EnableIntenceVoice final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EnableIntenceVoice) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EnableIntenceVoice");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EnableIntenceVoice) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8200_EnableIntenceVoice");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EnableIntenceVoice, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EnableIntenceVoice::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetShockwaveEffectArray
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray final
{
public:
	TArray<class URSParticleSystemComponentBase*> EffectArray;                                       // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray, EffectArray) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_GetShockwaveEffectArray::EffectArray' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Clear
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Clear::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_SetElem
// 0x0018 (0x0018 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B43[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem) == 0x000018, "Wrong size on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem, Particle) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem::Particle' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem, bDummy) == 0x000010, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_SetElem::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Get
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B44[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get, Param_Index) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get, Particle) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Get::Particle' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Add
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add, Particle) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add::Particle' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add, Param_Index) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Add::Param_Index' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Deactivate
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_ShockwaveEffect_Deactivate::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_PermitBrainField
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_PermitBrainField final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_PermitBrainField) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_PermitBrainField");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_PermitBrainField) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_PermitBrainField");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_PermitBrainField, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_PermitBrainField::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_GetMetamorphosisParent
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent, ParentActor) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_GetMetamorphosisParent::ParentActor' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcOutlineAppendMesh
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh final
{
public:
	TArray<class UMeshComponent*>                 MeshComps;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh");
static_assert(sizeof(BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh) == 0x000010, "Wrong size on BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh");
static_assert(offsetof(BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh, MeshComps) == 0x000000, "Member 'BPI_ENpcInterface_C_GetEnpcOutlineAppendMesh::MeshComps' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.OnStartSequencer
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_OnStartSequencer final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_OnStartSequencer) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_OnStartSequencer");
static_assert(sizeof(BPI_ENpcInterface_C_OnStartSequencer) == 0x000004, "Wrong size on BPI_ENpcInterface_C_OnStartSequencer");
static_assert(offsetof(BPI_ENpcInterface_C_OnStartSequencer, IndexIn) == 0x000000, "Member 'BPI_ENpcInterface_C_OnStartSequencer::IndexIn' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_ExecAttack
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8290_ExecAttack final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8290_ExecAttack) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8290_ExecAttack");
static_assert(sizeof(BPI_ENpcInterface_C_Em8290_ExecAttack) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8290_ExecAttack");
static_assert(offsetof(BPI_ENpcInterface_C_Em8290_ExecAttack, bDummy) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8290_ExecAttack::bDummy' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_GetBattlePhase
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_GetBattlePhase final
{
public:
	int32                                         BattlePhase;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_GetBattlePhase) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_GetBattlePhase");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_GetBattlePhase) == 0x000004, "Wrong size on BPI_ENpcInterface_C_Em8220_GetBattlePhase");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_GetBattlePhase, BattlePhase) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_GetBattlePhase::BattlePhase' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_SetBattlePhase
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_SetBattlePhase final
{
public:
	int32                                         BattlePhase;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_SetBattlePhase) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_SetBattlePhase");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_SetBattlePhase) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8220_SetBattlePhase");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetBattlePhase, BattlePhase) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_SetBattlePhase::BattlePhase' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetBattlePhase, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_SetBattlePhase::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_BeginDispAttackCable
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8220_BeginDispAttackCable final
{
public:
	int32                                         CableIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeginTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_BeginDispAttackCable) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_BeginDispAttackCable");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_BeginDispAttackCable) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8220_BeginDispAttackCable");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BeginDispAttackCable, CableIndex) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_BeginDispAttackCable::CableIndex' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BeginDispAttackCable, BeginTime) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_BeginDispAttackCable::BeginTime' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BeginDispAttackCable, Return) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8220_BeginDispAttackCable::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_EndDispAttackCable
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8220_EndDispAttackCable final
{
public:
	int32                                         CableIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_EndDispAttackCable) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_EndDispAttackCable");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_EndDispAttackCable) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8220_EndDispAttackCable");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndDispAttackCable, CableIndex) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_EndDispAttackCable::CableIndex' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndDispAttackCable, EndTime) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_EndDispAttackCable::EndTime' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndDispAttackCable, Return) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8220_EndDispAttackCable::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_PlayAttackCableAnim
// 0x0090 (0x0090 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim final
{
public:
	struct FST_em8220_CableInfo                   CableInfo;                                         // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim) == 0x000010, "Wrong alignment on BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim) == 0x000090, "Wrong size on BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim, CableInfo) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim::CableInfo' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim, Return) == 0x000080, "Member 'BPI_ENpcInterface_C_Em8220_PlayAttackCableAnim::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_EndAttackCableAnim
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_EndAttackCableAnim final
{
public:
	int32                                         CableIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_EndAttackCableAnim) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_EndAttackCableAnim");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_EndAttackCableAnim) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8220_EndAttackCableAnim");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndAttackCableAnim, CableIndex) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_EndAttackCableAnim::CableIndex' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndAttackCableAnim, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_EndAttackCableAnim::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EndAllAttackCable
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8200_EndAllAttackCable final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B45[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8200_EndAllAttackCable) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8200_EndAllAttackCable");
static_assert(sizeof(BPI_ENpcInterface_C_Em8200_EndAllAttackCable) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8200_EndAllAttackCable");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EndAllAttackCable, bForce) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8200_EndAllAttackCable::bForce' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EndAllAttackCable, EndTime) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8200_EndAllAttackCable::EndTime' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8200_EndAllAttackCable, Return) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8200_EndAllAttackCable::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_BeginCablePiller
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_BeginCablePiller final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_BeginCablePiller) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_BeginCablePiller");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_BeginCablePiller) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8220_BeginCablePiller");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BeginCablePiller, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_BeginCablePiller::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_GetCablePillerLocationList
// 0x0018 (0x0018 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList final
{
public:
	class AActor*                                 IgnoreActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LocationList;                                      // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList) == 0x000018, "Wrong size on BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList, IgnoreActor) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList::IgnoreActor' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList, LocationList) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8220_GetCablePillerLocationList::LocationList' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_BeginNextCableSpike
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_BeginNextCableSpike final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_BeginNextCableSpike) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_BeginNextCableSpike");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_BeginNextCableSpike) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8220_BeginNextCableSpike");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BeginNextCableSpike, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_BeginNextCableSpike::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_BulletAttackHit
// 0x0018 (0x0018 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_BulletAttackHit final
{
public:
	EBulletType                                   BulletType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B46[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_BulletAttackHit) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_BulletAttackHit");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_BulletAttackHit) == 0x000018, "Wrong size on BPI_ENpcInterface_C_Em8220_BulletAttackHit");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BulletAttackHit, BulletType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_BulletAttackHit::BulletType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BulletAttackHit, HitActor) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8220_BulletAttackHit::HitActor' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_BulletAttackHit, Return) == 0x000010, "Member 'BPI_ENpcInterface_C_Em8220_BulletAttackHit::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_SetCableSpikeStartEffectTime
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime final
{
public:
	float                                         StartEffectTime;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime, StartEffectTime) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime::StartEffectTime' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_SetCableSpikeStartEffectTime::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_GetCableSpikeStartEffectTime
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime final
{
public:
	float                                         StartEffectTime;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime) == 0x000004, "Wrong size on BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime, StartEffectTime) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_GetCableSpikeStartEffectTime::StartEffectTime' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.EnterDownEnpc
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_EnterDownEnpc final
{
public:
	EPlayerDownType                               DownType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_EnterDownEnpc) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_EnterDownEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_EnterDownEnpc) == 0x000002, "Wrong size on BPI_ENpcInterface_C_EnterDownEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_EnterDownEnpc, DownType) == 0x000000, "Member 'BPI_ENpcInterface_C_EnterDownEnpc::DownType' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_EnterDownEnpc, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_EnterDownEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.EntryBrainCrashAccessEnpc
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc) == 0x000001, "Wrong size on BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_EntryBrainCrashAccessEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_SetHighSpdLocation
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_SetHighSpdLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_SetHighSpdLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_SetHighSpdLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_SetHighSpdLocation) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8220_SetHighSpdLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetHighSpdLocation, InLocation) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_SetHighSpdLocation::InLocation' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetHighSpdLocation, Return) == 0x00000C, "Member 'BPI_ENpcInterface_C_Em8220_SetHighSpdLocation::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_GetHighSpdLocation
// 0x000C (0x000C - 0x0000)
struct BPI_ENpcInterface_C_Em8220_GetHighSpdLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_GetHighSpdLocation) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_GetHighSpdLocation");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_GetHighSpdLocation) == 0x00000C, "Wrong size on BPI_ENpcInterface_C_Em8220_GetHighSpdLocation");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_GetHighSpdLocation, OutLocation) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_GetHighSpdLocation::OutLocation' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_SetHighSpdDistance
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_SetHighSpdDistance final
{
public:
	float                                         HighSpdDistance;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_SetHighSpdDistance) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_SetHighSpdDistance");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_SetHighSpdDistance) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8220_SetHighSpdDistance");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetHighSpdDistance, HighSpdDistance) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_SetHighSpdDistance::HighSpdDistance' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetHighSpdDistance, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_SetHighSpdDistance::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_GetHighSpdDistance
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_GetHighSpdDistance final
{
public:
	float                                         HighSpdDistance;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_GetHighSpdDistance) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_GetHighSpdDistance");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_GetHighSpdDistance) == 0x000004, "Wrong size on BPI_ENpcInterface_C_Em8220_GetHighSpdDistance");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_GetHighSpdDistance, HighSpdDistance) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_GetHighSpdDistance::HighSpdDistance' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_RegisterShotData
// 0x00F0 (0x00F0 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_RegisterShotData final
{
public:
	struct FFRegisterShotData                     RegisterShotData;                                  // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_RegisterShotData) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_RegisterShotData");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_RegisterShotData) == 0x0000F0, "Wrong size on BPI_ENpcInterface_C_Em8220_RegisterShotData");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_RegisterShotData, RegisterShotData) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_RegisterShotData::RegisterShotData' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_RegisterShotData, Return) == 0x0000E8, "Member 'BPI_ENpcInterface_C_Em8220_RegisterShotData::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_UnregisterAllShotData
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_UnregisterAllShotData final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_UnregisterAllShotData) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_UnregisterAllShotData");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_UnregisterAllShotData) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8220_UnregisterAllShotData");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_UnregisterAllShotData, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_UnregisterAllShotData::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_UpdateShotData
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_UpdateShotData final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_UpdateShotData) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8220_UpdateShotData");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_UpdateShotData) == 0x000008, "Wrong size on BPI_ENpcInterface_C_Em8220_UpdateShotData");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_UpdateShotData, DeltaSec) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_UpdateShotData::DeltaSec' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_UpdateShotData, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_Em8220_UpdateShotData::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_ChangeAccelerator
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_ChangeAccelerator final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_ChangeAccelerator) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_ChangeAccelerator");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_ChangeAccelerator) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8220_ChangeAccelerator");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_ChangeAccelerator, bStart) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_ChangeAccelerator::bStart' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_ChangeAccelerator, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8220_ChangeAccelerator::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_StartSpCount
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_StartSpCount final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_StartSpCount) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_StartSpCount");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_StartSpCount) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8220_StartSpCount");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_StartSpCount, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_StartSpCount::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_StartCopyActorSpTimer
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer final
{
public:
	class ARSCharacterBase*                       InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer, InActor) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer::InActor' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer, Return) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8220_StartCopyActorSpTimer::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_EndCopyActorSpTimer
// 0x0010 (0x0010 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer final
{
public:
	class ARSCharacterBase*                       InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer) == 0x000010, "Wrong size on BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer, InActor) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer::InActor' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer, Return) == 0x000008, "Member 'BPI_ENpcInterface_C_Em8220_EndCopyActorSpTimer::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.PreStartSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_PreStartSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_PreStartSequencerEnpc) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_PreStartSequencerEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_PreStartSequencerEnpc) == 0x000008, "Wrong size on BPI_ENpcInterface_C_PreStartSequencerEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_PreStartSequencerEnpc, IndexIn) == 0x000000, "Member 'BPI_ENpcInterface_C_PreStartSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_PreStartSequencerEnpc, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_PreStartSequencerEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.FinishedSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_FinishedSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_FinishedSequencerEnpc) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_FinishedSequencerEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_FinishedSequencerEnpc) == 0x000008, "Wrong size on BPI_ENpcInterface_C_FinishedSequencerEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_FinishedSequencerEnpc, IndexIn) == 0x000000, "Member 'BPI_ENpcInterface_C_FinishedSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_FinishedSequencerEnpc, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_FinishedSequencerEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.PostStartSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_PostStartSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_PostStartSequencerEnpc) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_PostStartSequencerEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_PostStartSequencerEnpc) == 0x000008, "Wrong size on BPI_ENpcInterface_C_PostStartSequencerEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_PostStartSequencerEnpc, IndexIn) == 0x000000, "Member 'BPI_ENpcInterface_C_PostStartSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_PostStartSequencerEnpc, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_PostStartSequencerEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetSequenceActorEnpc
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_GetSequenceActorEnpc final
{
public:
	class AActor*                                 SequenceActorEnpc;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetSequenceActorEnpc) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_GetSequenceActorEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_GetSequenceActorEnpc) == 0x000008, "Wrong size on BPI_ENpcInterface_C_GetSequenceActorEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_GetSequenceActorEnpc, SequenceActorEnpc) == 0x000000, "Member 'BPI_ENpcInterface_C_GetSequenceActorEnpc::SequenceActorEnpc' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.StartSpSequenceEnpc
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_StartSpSequenceEnpc final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_StartSpSequenceEnpc) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_StartSpSequenceEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_StartSpSequenceEnpc) == 0x000001, "Wrong size on BPI_ENpcInterface_C_StartSpSequenceEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_StartSpSequenceEnpc, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_StartSpSequenceEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_SetVisibleSpTimer
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer) == 0x000002, "Wrong size on BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer, bVisible) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer::bVisible' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer, Return) == 0x000001, "Member 'BPI_ENpcInterface_C_Em8220_SetVisibleSpTimer::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_CalcAttackCollisionInfo
// 0x0288 (0x0288 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo final
{
public:
	struct FHCAttackCollisionInfo                 CollisionInfo;                                     // 0x0000(0x0280)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0280(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo) == 0x000288, "Wrong size on BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo, CollisionInfo) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo::CollisionInfo' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo, Return) == 0x000280, "Member 'BPI_ENpcInterface_C_Em8220_CalcAttackCollisionInfo::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_StoreCollisionInfo
// 0x00F8 (0x00F8 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_StoreCollisionInfo final
{
public:
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_StoreCollisionInfo) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_Em8220_StoreCollisionInfo");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_StoreCollisionInfo) == 0x0000F8, "Wrong size on BPI_ENpcInterface_C_Em8220_StoreCollisionInfo");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_StoreCollisionInfo, SkillInfo) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_StoreCollisionInfo::SkillInfo' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_StoreCollisionInfo, Return) == 0x0000F0, "Member 'BPI_ENpcInterface_C_Em8220_StoreCollisionInfo::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_RestoreCollisionInfo
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_RestoreCollisionInfo::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.PostFinishedSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_PostFinishedSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_PostFinishedSequencerEnpc) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_PostFinishedSequencerEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_PostFinishedSequencerEnpc) == 0x000008, "Wrong size on BPI_ENpcInterface_C_PostFinishedSequencerEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_PostFinishedSequencerEnpc, IndexIn) == 0x000000, "Member 'BPI_ENpcInterface_C_PostFinishedSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_PostFinishedSequencerEnpc, Return) == 0x000004, "Member 'BPI_ENpcInterface_C_PostFinishedSequencerEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.OnSpawnStartEnpc
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_OnSpawnStartEnpc final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_OnSpawnStartEnpc) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_OnSpawnStartEnpc");
static_assert(sizeof(BPI_ENpcInterface_C_OnSpawnStartEnpc) == 0x000001, "Wrong size on BPI_ENpcInterface_C_OnSpawnStartEnpc");
static_assert(offsetof(BPI_ENpcInterface_C_OnSpawnStartEnpc, Return) == 0x000000, "Member 'BPI_ENpcInterface_C_OnSpawnStartEnpc::Return' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetENpcParam
// 0x0008 (0x0008 - 0x0000)
struct BPI_ENpcInterface_C_GetENpcParam final
{
public:
	class UBP_ENpc_ParamBase_C*                   Param;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_GetENpcParam) == 0x000008, "Wrong alignment on BPI_ENpcInterface_C_GetENpcParam");
static_assert(sizeof(BPI_ENpcInterface_C_GetENpcParam) == 0x000008, "Wrong size on BPI_ENpcInterface_C_GetENpcParam");
static_assert(offsetof(BPI_ENpcInterface_C_GetENpcParam, Param) == 0x000000, "Member 'BPI_ENpcInterface_C_GetENpcParam::Param' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetBattleType
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_GetBattleType final
{
public:
	Enum_BattleType_em8000                        BattleType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_GetBattleType) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8000_GetBattleType");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_GetBattleType) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8000_GetBattleType");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_GetBattleType, BattleType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_GetBattleType::BattleType' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsActiveEnpcSAS
// 0x0002 (0x0002 - 0x0000)
struct BPI_ENpcInterface_C_IsActiveEnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsActiveEnpcSAS) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsActiveEnpcSAS");
static_assert(sizeof(BPI_ENpcInterface_C_IsActiveEnpcSAS) == 0x000002, "Wrong size on BPI_ENpcInterface_C_IsActiveEnpcSAS");
static_assert(offsetof(BPI_ENpcInterface_C_IsActiveEnpcSAS, Kind) == 0x000000, "Member 'BPI_ENpcInterface_C_IsActiveEnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(BPI_ENpcInterface_C_IsActiveEnpcSAS, bActive) == 0x000001, "Member 'BPI_ENpcInterface_C_IsActiveEnpcSAS::bActive' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_IsHomingEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8210_IsHomingEnd final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8210_IsHomingEnd) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8210_IsHomingEnd");
static_assert(sizeof(BPI_ENpcInterface_C_Em8210_IsHomingEnd) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8210_IsHomingEnd");
static_assert(offsetof(BPI_ENpcInterface_C_Em8210_IsHomingEnd, bEnd) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8210_IsHomingEnd::bEnd' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetBattleProcess
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_Em8000_GetBattleProcess final
{
public:
	int32                                         CurProcess;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8000_GetBattleProcess) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8000_GetBattleProcess");
static_assert(sizeof(BPI_ENpcInterface_C_Em8000_GetBattleProcess) == 0x000004, "Wrong size on BPI_ENpcInterface_C_Em8000_GetBattleProcess");
static_assert(offsetof(BPI_ENpcInterface_C_Em8000_GetBattleProcess, CurProcess) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8000_GetBattleProcess::CurProcess' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_GetBattleType
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_GetBattleType final
{
public:
	Enum_BattleType_em8010                        BattleType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_GetBattleType) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_GetBattleType");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_GetBattleType) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8010_GetBattleType");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_GetBattleType, BattleType) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_GetBattleType::BattleType' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsNotRequirementPartner
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_IsNotRequirementPartner final
{
public:
	bool                                          bNotRequirement;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsNotRequirementPartner) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsNotRequirementPartner");
static_assert(sizeof(BPI_ENpcInterface_C_IsNotRequirementPartner) == 0x000001, "Wrong size on BPI_ENpcInterface_C_IsNotRequirementPartner");
static_assert(offsetof(BPI_ENpcInterface_C_IsNotRequirementPartner, bNotRequirement) == 0x000000, "Member 'BPI_ENpcInterface_C_IsNotRequirementPartner::bNotRequirement' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsIgnoreForceFinishMetamorphosis
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis");
static_assert(sizeof(BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis) == 0x000001, "Wrong size on BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis");
static_assert(offsetof(BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis, bIgnore) == 0x000000, "Member 'BPI_ENpcInterface_C_IsIgnoreForceFinishMetamorphosis::bIgnore' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamophosis_BaseChara
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara final
{
public:
	bool                                          bIsMetamorphosis;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara, bIsMetamorphosis) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_IsMetamophosis_BaseChara::bIsMetamorphosis' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamophosis_ChangeChara
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara final
{
public:
	bool                                          bIsMetamorphosis;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara, bIsMetamorphosis) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_IsMetamophosis_ChangeChara::bIsMetamorphosis' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamorphosis_Disappear
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear final
{
public:
	bool                                          bDisappear;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear, bDisappear) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Disappear::bDisappear' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamorphosis_Appear
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear final
{
public:
	bool                                          bAppear;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear, bAppear) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_IsMetamorphosis_Appear::bAppear' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_GetParameterTableAttackScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale) == 0x000004, "Wrong alignment on BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale");
static_assert(sizeof(BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale) == 0x000004, "Wrong size on BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale");
static_assert(offsetof(BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale, Scale) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8010_GetParameterTableAttackScale::Scale' has a wrong offset!");

// Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8220_IsSpFieldOpen
// 0x0001 (0x0001 - 0x0000)
struct BPI_ENpcInterface_C_Em8220_IsSpFieldOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ENpcInterface_C_Em8220_IsSpFieldOpen) == 0x000001, "Wrong alignment on BPI_ENpcInterface_C_Em8220_IsSpFieldOpen");
static_assert(sizeof(BPI_ENpcInterface_C_Em8220_IsSpFieldOpen) == 0x000001, "Wrong size on BPI_ENpcInterface_C_Em8220_IsSpFieldOpen");
static_assert(offsetof(BPI_ENpcInterface_C_Em8220_IsSpFieldOpen, bOpen) == 0x000000, "Member 'BPI_ENpcInterface_C_Em8220_IsSpFieldOpen::bOpen' has a wrong offset!");

}

