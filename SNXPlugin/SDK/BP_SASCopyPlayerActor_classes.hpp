#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SASCopyPlayerActor

#include "Basic.hpp"

#include "ESASCopyStatus_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "ESASCopyAttachType_structs.hpp"
#include "ECharaExecuteNotifyKind_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SASCopyPlayerActor.BP_SASCopyPlayerActor_C
// 0x0158 (0x0388 - 0x0230)
class ABP_SASCopyPlayerActor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent;                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTickManageComponent*                   TickManage;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttackEmitter_C*                    BP_AttackEmitter;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitCheckReceiverComponent*             HitCheckReceiver;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTeamComponent*                         Team;                                              // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WeaponManageComponent_C*            BP_WeaponManageComponent;                          // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCopyPlayerAnimInstance*                CopyAnimBP;                                        // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             GameTimer;                                         // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESASCopyStatus                                Status;                                            // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyOnParticle;                                   // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D53[0x2];                                     // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         COPY_PARTICLE_TIME_RATE;                           // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D54[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        AppearParticle;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UParticleSystem*                        DisappearParticle;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class AActor*>                         AttackHitActorList;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class UParticleSystem*, class URSParticleSystemComponentBase*> SpawnParticleMap;                                  // 0x02C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameTimer                             DirTimer;                                          // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DirAngle;                                          // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PARAM_ATTACK_RATE;                                 // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraDither;                                      // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCopyAttachType                            AttachLocationType;                                // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D55[0x3];                                     // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevLocation;                                      // 0x032C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultRelativeZ;                                  // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDelayCancel;                                      // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D56[0x3];                                     // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystem*>                ReserveParticleList;                               // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           ReserveParticleAttachPoint;                        // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           ReserveParticleParameterName;                      // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  ReserveParticleUseActorParameter;                  // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bSpawnReserveParticle;                             // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D57[0x3];                                     // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackupPhotoModeLod;                                // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SASCopyPlayerActor(int32 EntryPoint);
	void RegisterEffectInterface(class URSParticleSystemComponentBase* Particle);
	void RegisterInterruptTelepoEffectInterface(class URSParticleSystemComponentBase* Particle);
	void DelayTickEnd();
	void BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void AreaChangeFadeOut();
	void SetCounter();
	void SetCounterWait(bool Wait_on_in);
	void IsBadStausMetalMode();
	void UnregisterNpcDriveForNexusDrive(EPlayerID PlayerId);
	void UnregisterDelayDriveEnd(EPlayerID PlayerId);
	void RegisterNpcDriveForNexusDrive(EPlayerID PlayerId);
	void RegisterDelayDriveEnd(EPlayerID PlayerId);
	void NexusDriveAttackHitRecovery(const struct FHCHitResult& HitResult, bool bCopyPlayer);
	void Setting(class ARSBattlePlayer_C* OriginalPlayer, class UClass* AnimBP, ESASCopyAttachType AttachType);
	void CopyOn(float Time, bool bWithSubWeapon);
	void CopyOff(float Time);
	void Update();
	void SetVisibility(bool bVisibility, bool bWithSubWeapon);
	void SetCopyMaterialValue(float Rate);
	void PlayMontage(class UAnimMontage* Montage, float PlayRate, class FName SectionName);
	void StopMontage();
	void PrevCheckOnAttackActorHit(const struct FHCHitResult& HCHitResult, bool* bOK);
	void SpawnParticle(class UParticleSystem* Particle, class FName AttachPointName, bool bUseActorParameter, class FName ParameterName);
	void StopParticle(class UParticleSystem* Particle);
	void StopParticleAll();
	void SetAimRotate(const struct FRotator& Rotator);
	void SetDir(float Angle, float Time);
	void UpdateDir();
	void GetCopyStatus(ESASCopyStatus* Param_Status);
	void SetAttachLocationType(ESASCopyAttachType InType);
	void UpdateLocation(bool bLerp);
	void GetSASCodeActorList(TArray<class ABP_CableBase_C*>* CodeList);
	void GetBrainCodeActorList(TArray<class ABP_CableBase_C*>* CodeList);
	void GetWeaponList(TArray<class ABP_WeaponBase_C*>* WeaponList);
	void SetCostume(class USkeletalMesh* Costume);
	void CopyMeshFitGround(float InterpSpeed, float AngleLimit, bool bEndFit);
	void CancelCopyMeshFitGround();
	bool OverwriteAttackCollisionInfo(struct FHCCollisionCommonInfo& RefCommonInfo, struct FHCSkillCommonInfo& RefSkill);
	struct FCharactersParameterTable GetCharactersParameterTableInterface();
	float CalcFinalDamageByDefence(float Damage, class AActor* AttackActor);
	float CalcFinalDamageByAttack(float Damage, class AActor* DefenseActor, const struct FHCSkillCommonInfo& SkillInfo);
	bool CalcDefence(float& RefPhysicsDefence, float& RefObjDefence, float& RefFlameDefence, float& RefElectricPhysics);
	bool CalcDamageByDefence(float& RefPhysicsDamage, float& RefObjDamage, float& RefFlameDamage, float& RefElectricDamage, float& RefCriticalDamageRate, class AActor* AttackActor);
	bool CalcDamageByAttack(float& RefPhysicsDamage, float& RefObjDamage, float& RefFlameDamage, float& RefElectricDamage, float& RefCriticalDamageRate, class AActor* DefenseActor);
	float CalcCritical(float Critical, class AActor* DefenseActor, bool bAssassinAttack);
	bool CalcAccumulationByDefence(float& RefWince, float& RefKnockback, float& RefDown, float& RefLaunch, float& RefFlame, float& RefElectric, float& RefFlooded, float& RefOil, float& RefConfusion, float& RefCrashScale, float& RefCrashCapCheckRate, class AActor* AttackActor);
	bool CalcAccumulationByAttack(float& RefWince, float& RefKnockback, float& RefDown, float& RefLaunch, float& RefFlame, float& RefElectric, float& RefFlooded, float& RefOil, float& RefConfusion, float& RefCrashScale, float& RefCrashCapCheckRate, class AActor* DefenseActor, EHCSkillAttackType AttackType, bool bCopyActor, const struct FHCSkillCommonInfo& SkillInfo);
	bool IsPsychicFieldDamageRateToBoss();
	float GetMaxDamageRateLimit();
	float GetMaxCrashScaleLimit();
	bool IsIgnoreCritical();
	void EndSASChance(bool* Dammy);
	void StartSASChance(float Time, bool* Dammy);
	void CancelMeshFitGround(bool* bDummy);
	void GetMeshFitGroundCheckLocation(struct FVector* Location, float* CheckHeight);
	void MeshFitGround(float InterpSpeed, float AngleLimit, bool bEndFit, bool* bDummy);
	void SetAccelerating(bool Accelerating, bool* Dammy);
	void GetAccelerating(bool* Accelerating);
	void GetLockOnTargetInterface(class AActor** TargetActor);
	void SetNotifyAttackData(const struct FFNotifyAttackData& Data, bool* Dummy);
	void GetActorStartPoint(struct FVector* StartLocation);
	void StartVisionFog(bool* Dummy);
	void IsCounterSuccess(bool* Success);
	void SetCharacterVisibility(bool bVisibility, bool* bDummy);
	void SetHitStopInterface(EHCRestictedHitStopType HitStopType, bool bCritical, bool* bDummy);
	void UpdateCameraDither(float DeltaSeconds, bool UseDither, float* Param_CameraDither);
	void SetCameraDither(float SetDitherValue, bool* Dummy);
	void SetUseCameraDither(bool bUse, bool* bDummy);
	void IsCounterWait(bool* bWait);
	void RequestDie(bool* bDummy);
	void EndVisionFog(bool* Dummy);
	void EnableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, float ReactionSRate, float ReactionLRate, float DownRate, float CrashRate, bool bAcceptAll, bool* Return);
	void DisableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, bool* Return);
	void SpawnSequencerEffectInterface(class FName ClaimantName, class UParticleSystem* Template, const struct FTransform& Transform, class FName AttachName, bool* Return);
	void EndSequencerEffectInterface(class FName ClaimantName, bool* Return);
	void UpdateSequencerEffectInterface(float DeltaSec, bool* Return);
	void IsInScreen(bool* InScreen);
	void Get_Event_Bind_Mesh_Component(TArray<class UStaticMeshComponent*>* MeshComponent);
	void RegisterBrainFieldNormalTransform(const struct FTransform& InNormalTransform, bool* Return);
	void CheckNoDamagePopUpFromAttacker(bool* bNoPopUp);
	void GetGroupIDInterface(bool* bSuccess, int32* GroupID, int32* SubGroupID);
	void StopMovementImmediately(bool* bDummy);
	void GetPsychicObjectThrowParameter(bool* Apply, float* Directshot_throw_speed, float* Directshot_homing_speed, float* Combo_throw_speed, float* Combo_homing_speed, float* brainfield_throw_speed, float* brainfield_homing_speed, float* Intercept_throw_speed, float* Intercept_homing_speed);
	void GetCharacterSkillTableWithReplace(class UDataTable*& OrgTable, class FName SkillName, struct FHCSkillCommonInfo* SkillCommonInfo);
	void ReserveCrashVisionShockWave(float EffectDelayTime, bool* bDummy);
	void SetIgnoreVisionSimulatorScore(bool bIgnore, bool* bDummy);
	void GetProxyMesh(class UMeshComponent** Mesh);
	void GetProxyRequestedPlayer(class ARSBattlePlayer_C** Player);
	bool IsPlayerCopy();
	bool IsExistPlayerCopy();
	void GetPlayerWeaponManage(class UBP_WeaponManageComponent_C** WeaponManage);
	EFHitEffectPriority GetHitEffectPriorityInterface();
	void CheckExecuteAnimNotifyCharacterKind(ECharaExecuteNotifyKind Kind, bool* bExecute);
	bool IsObstacleHitCheckToActor(class AActor* PTarget);
	bool IsObstacleHitCheck(class UPrimitiveComponent* PPrimitive, class AActor* PAttacker, const struct FVector& EndPosition);
	bool IsIgnoreHitCheck(class UPrimitiveComponent* PPrimitive, const struct FVector& HitPosition);
	bool IsIgnoreAccelerator(EHCSkillExtraType Type);
	bool IsCheckFriendlyFire(class AActor* HitActor);
	class AActor* GetHitCheckIgnoredActor();
	void AttachmentVisibilityOffOnHead(bool bOff, bool* bDummy);
	void DestroyAttachmentMeshComponent(class USceneComponent* DestroyMeshComponent, bool* bDummy);
	void EquipAttachmentInterface(EPlayerAttachment Param_Index, int32 AttachmentItemID, EPlayerID EquipPlayerID, int32 EquipMeshIndex, bool* bDummy);
	void GetAttachedCharacterMesh(EPlayerID EquipPlayerID, int32 EquipMeshIndex, class USkeletalMeshComponent** Mesh);
	void AttachmentVisibilityOffOnBackBody(bool bVisibility, float FadeTime, bool* bDummy);
	bool IsRegisterNpcDriveForNexusDrive(EPlayerID PlayerId);
	bool IsRegisterActiveSasKindAny();
	bool IsActiveNexusDriveSas(E_SASKindNative Kind);
	bool IsActiveNexusDriveAny();
	bool GetNexusDriveTelepoDamageRateForJewelPool(float* OutCrashRate, float* OutWinceRate, float* OutKnockbackRate, float* OutDownRate, const struct FHCSkillCommonInfo& InSkill);
	bool GetNexusDriveTelepoAttackRate(float* OutDamageRate, float* OutCrashRate, float* OutWinceRate, float* OutKnockbackRate, float* OutDownRate, const struct FHCSkillCommonInfo& InSkill);
	bool GetNexusDriveStealth_AttackParam(float* OutCrashRate, float* OutKnockback, float* OutDown);
	bool GetNexusDrivePsychic_PsychicFieldDown(float* OutDown);
	float GetNexusDriveMetal_DamageRate();
	bool GetNexusDriveCombinationVisionCost(float* OutCost, E_SASKindNative SasKind);
	float GetNexusDriveAccelerator_DamageRate();
	bool SetPhotoModeDither(float Value);
	bool EndPhotoMode();
	bool BeginPhotoMode();
	class USkeletalMeshComponent* GetPhotoModeSkeletalMesh();
	class FName GetPhotoModeDitherDataName();
	bool IsPhotoModeManualOverlap();
	class UCapsuleComponent* GetPhotoModeManualOverlapCapsule();
	bool PhotoModeTick();

	void IsCopyVisible(bool* bVisible) const;
	void GetNotifyAttackData(struct FFNotifyAttackData* Data) const;
	void GetWeakTargetComponent(class USceneComponent** WeakComponent) const;
	void GetWeakUIPoint(int32 Param_Index, struct FVector* Point) const;
	void GetTopTargetPoint(struct FVector* Point) const;
	void GetWeakTargetPoint(const struct FVector& AttackerPos, struct FVector* Point) const;
	void IsMetalMode(bool* bMetal) const;
	void IsEnemy(bool* bEnemy) const;
	void IsPlayer(bool* bPlayer) const;
	void GetTeam(ETeamKind* Param_Team) const;
	void IsForceCritical(bool* bResult) const;
	void CanTakeBrainField(bool* CanTake) const;
	void IsHitWeak_ChangeDefaultEffect(bool* ChangeDefault) const;
	void IsEnableSlashEffect(struct FHCHitResult& HitResult, bool* bEnable) const;
	void IsBrainCrashAccessInterface(bool* bAccess) const;
	void GetAutoAimRate(float* Rate) const;
	void GetCharacterLV(int32* LV) const;
	void IsEnableReactionCoefficient(bool* bEnable, float* ReactionSRate, float* ReactionLRate, float* DownRate, float* CrashRate, bool* bAcceptAll) const;
	void IsAttackerMainPlayer(bool* bMainPlayer) const;
	void GetCharacterReplaceSkillTable(class UDataTable* Original, class UDataTable** SkillTable) const;
	bool IsOnGround(bool bIncludeObject) const;
	bool IsDisableDamageHit() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SASCopyPlayerActor_C">();
	}
	static class ABP_SASCopyPlayerActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SASCopyPlayerActor_C>();
	}
};
static_assert(alignof(ABP_SASCopyPlayerActor_C) == 0x000008, "Wrong alignment on ABP_SASCopyPlayerActor_C");
static_assert(sizeof(ABP_SASCopyPlayerActor_C) == 0x000388, "Wrong size on ABP_SASCopyPlayerActor_C");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, UberGraphFrame) == 0x000230, "Member 'ABP_SASCopyPlayerActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, BP_AttachmentManageComponent) == 0x000238, "Member 'ABP_SASCopyPlayerActor_C::BP_AttachmentManageComponent' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, TickManage) == 0x000240, "Member 'ABP_SASCopyPlayerActor_C::TickManage' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, BP_AttackEmitter) == 0x000248, "Member 'ABP_SASCopyPlayerActor_C::BP_AttackEmitter' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, HitCheckReceiver) == 0x000250, "Member 'ABP_SASCopyPlayerActor_C::HitCheckReceiver' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, Team) == 0x000258, "Member 'ABP_SASCopyPlayerActor_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, BP_WeaponManageComponent) == 0x000260, "Member 'ABP_SASCopyPlayerActor_C::BP_WeaponManageComponent' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, SkeletalMesh) == 0x000268, "Member 'ABP_SASCopyPlayerActor_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_SASCopyPlayerActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, OwnerPlayer) == 0x000278, "Member 'ABP_SASCopyPlayerActor_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, CopyAnimBP) == 0x000280, "Member 'ABP_SASCopyPlayerActor_C::CopyAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, GameTimer) == 0x000288, "Member 'ABP_SASCopyPlayerActor_C::GameTimer' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, Status) == 0x000294, "Member 'ABP_SASCopyPlayerActor_C::Status' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, bCopyOnParticle) == 0x000295, "Member 'ABP_SASCopyPlayerActor_C::bCopyOnParticle' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, COPY_PARTICLE_TIME_RATE) == 0x000298, "Member 'ABP_SASCopyPlayerActor_C::COPY_PARTICLE_TIME_RATE' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, AppearParticle) == 0x0002A0, "Member 'ABP_SASCopyPlayerActor_C::AppearParticle' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, DisappearParticle) == 0x0002A8, "Member 'ABP_SASCopyPlayerActor_C::DisappearParticle' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, AttackHitActorList) == 0x0002B0, "Member 'ABP_SASCopyPlayerActor_C::AttackHitActorList' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, SpawnParticleMap) == 0x0002C0, "Member 'ABP_SASCopyPlayerActor_C::SpawnParticleMap' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, DirTimer) == 0x000310, "Member 'ABP_SASCopyPlayerActor_C::DirTimer' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, DirAngle) == 0x00031C, "Member 'ABP_SASCopyPlayerActor_C::DirAngle' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, PARAM_ATTACK_RATE) == 0x000320, "Member 'ABP_SASCopyPlayerActor_C::PARAM_ATTACK_RATE' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, CameraDither) == 0x000324, "Member 'ABP_SASCopyPlayerActor_C::CameraDither' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, AttachLocationType) == 0x000328, "Member 'ABP_SASCopyPlayerActor_C::AttachLocationType' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, PrevLocation) == 0x00032C, "Member 'ABP_SASCopyPlayerActor_C::PrevLocation' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, DefaultRelativeZ) == 0x000338, "Member 'ABP_SASCopyPlayerActor_C::DefaultRelativeZ' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, bDelayCancel) == 0x00033C, "Member 'ABP_SASCopyPlayerActor_C::bDelayCancel' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, ReserveParticleList) == 0x000340, "Member 'ABP_SASCopyPlayerActor_C::ReserveParticleList' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, ReserveParticleAttachPoint) == 0x000350, "Member 'ABP_SASCopyPlayerActor_C::ReserveParticleAttachPoint' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, ReserveParticleParameterName) == 0x000360, "Member 'ABP_SASCopyPlayerActor_C::ReserveParticleParameterName' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, ReserveParticleUseActorParameter) == 0x000370, "Member 'ABP_SASCopyPlayerActor_C::ReserveParticleUseActorParameter' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, bSpawnReserveParticle) == 0x000380, "Member 'ABP_SASCopyPlayerActor_C::bSpawnReserveParticle' has a wrong offset!");
static_assert(offsetof(ABP_SASCopyPlayerActor_C, BackupPhotoModeLod) == 0x000384, "Member 'ABP_SASCopyPlayerActor_C::BackupPhotoModeLod' has a wrong offset!");

}

