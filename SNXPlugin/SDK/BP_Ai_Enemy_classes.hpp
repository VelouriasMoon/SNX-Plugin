#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ai_Enemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Enum_EnemyRange_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Ai_Enemy.BP_Ai_Enemy_C
// 0x0060 (0x0180 - 0x0120)
class UBP_Ai_Enemy_C final : public UEnemyAiComponentBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0120(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattleEnemy_C*                       Enemy;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Action;                                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range_Work;                                        // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoRange_Work;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle_Work;                                        // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoAngle_Work;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionSelectSkipTime;                              // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReserveAction;                                     // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EA4[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReserveValue00;                                    // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReserveValue01;                                    // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionValue00;                                     // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionValue01;                                     // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetActionWinceCounter;                           // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSetActionKnockBackCounter;                       // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EA5[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_BaseSeconds;                                     // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 IdleMoveAction;                                    // 0x0168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsUseControlTickEnable;                            // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMove;                                       // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBossBattleBegineAction;                           // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         EnumBossBattleBegineAction;                        // 0x017B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFade;                                            // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Ai_Enemy(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void IsRandomCheck(float Value, bool* Ret);
	void IsTimerCheck(float Value, bool* Ret);
	void IsIdleMove(bool* Ret);
	void IsDamage(bool* Ret);
	void IsHpPercentDown(float Percent, bool* Return, bool* Error);
	void GetAiData(uint8 Enum, bool ThroughNotFound, EEnemyThinkActionType* ThinkActionType, float* Probability, float* Range, float* NoRange, float* Angle, float* NoAngle, float* HP, TArray<uint8>* UniqueConditions);
	void SetAction(uint8 Enum);
	void GetAiDataDistance(uint8 Enum, bool NotAngle, bool NotHeight, bool* Return);
	void GetAiDataDistanceAngleCheck(uint8 Enum, bool NotHeight, bool* Return);
	void IsEvent(bool* Ret);
	void SelectAction();
	void MoveAction(bool* Return);
	void NotMoveAction(bool* Return);
	void IsAiAction(uint8 Enum, bool NotHeight, bool NotProbability, bool* Return);
	void SelectParamAction(TArray<uint8>& ActionEnums, bool NotHeight, uint8* Param_Action);
	void IsTimerOK(uint8 Enum, bool* Result);
	void SelectRangeAction(bool NotHeight, uint8* SelectAction);
	void SetReserveAction(uint8 Param_Action, float Param00, float Param01, bool* Dummy);
	void ResetReserveAction();
	void SetActionFromReserved(bool* Dummy);
	void ResetAction(bool* Dummy);
	void WinceCounterAction(uint8 Enum, bool* IsSet);
	void KnockBackCounterAction(uint8 Enum, bool* IsSet);
	void IsPreConditionOK(const struct FAiParamEnemy& AiParam, bool* bOK);
	void SetIdleMoveAction();
	void CheckIdleMoveAction(uint8 Param_Action, bool* IsIdleMoveAction);
	float GetAiTimer_FromNative(uint8 ActionEnym);
	void BossBattleBeginAction(bool* Success);
	void OnStartFade();
	void OnEndFade();

	void IsReservedAction(bool* Reserved) const;
	void IsUniqueConditionCheck(TArray<uint8>& Conditions, bool* bResult) const;
	void GetActionTime(uint8 CurAction, float* Seconds) const;
	void IsPossibleAttack(bool IgnoreOutofScreen, bool IgnoreRestrictAttackOther, bool* bPossible) const;
	void IsCommonAreaOK(EEnemyThinkActionType ActionType, bool* bOK) const;
	void IsAttackingOtherEnemy(class ARSBattlePlayer_C* TargetPlayer, bool* bAttacking) const;
	void GetAiDataTable(uint8 Enum, bool ThroughNotFound, struct FAiParamEnemy* DataTable) const;
	void IsPossibleMove(bool IgnoreOutofScreen, bool IgnoreRestrictAttackOther, bool* bPossible) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Ai_Enemy_C">();
	}
	static class UBP_Ai_Enemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Ai_Enemy_C>();
	}
};
static_assert(alignof(UBP_Ai_Enemy_C) == 0x000008, "Wrong alignment on UBP_Ai_Enemy_C");
static_assert(sizeof(UBP_Ai_Enemy_C) == 0x000180, "Wrong size on UBP_Ai_Enemy_C");
static_assert(offsetof(UBP_Ai_Enemy_C, UberGraphFrame) == 0x000120, "Member 'UBP_Ai_Enemy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, Enemy) == 0x000128, "Member 'UBP_Ai_Enemy_C::Enemy' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, Action) == 0x000130, "Member 'UBP_Ai_Enemy_C::Action' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, Range_Work) == 0x000138, "Member 'UBP_Ai_Enemy_C::Range_Work' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, NoRange_Work) == 0x00013C, "Member 'UBP_Ai_Enemy_C::NoRange_Work' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, Angle_Work) == 0x000140, "Member 'UBP_Ai_Enemy_C::Angle_Work' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, NoAngle_Work) == 0x000144, "Member 'UBP_Ai_Enemy_C::NoAngle_Work' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, ActionSelectSkipTime) == 0x000148, "Member 'UBP_Ai_Enemy_C::ActionSelectSkipTime' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, ReserveAction) == 0x00014C, "Member 'UBP_Ai_Enemy_C::ReserveAction' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, ReserveValue00) == 0x000150, "Member 'UBP_Ai_Enemy_C::ReserveValue00' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, ReserveValue01) == 0x000154, "Member 'UBP_Ai_Enemy_C::ReserveValue01' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, ActionValue00) == 0x000158, "Member 'UBP_Ai_Enemy_C::ActionValue00' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, ActionValue01) == 0x00015C, "Member 'UBP_Ai_Enemy_C::ActionValue01' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, IsSetActionWinceCounter) == 0x000160, "Member 'UBP_Ai_Enemy_C::IsSetActionWinceCounter' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, IsSetActionKnockBackCounter) == 0x000161, "Member 'UBP_Ai_Enemy_C::IsSetActionKnockBackCounter' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, L_BaseSeconds) == 0x000164, "Member 'UBP_Ai_Enemy_C::L_BaseSeconds' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, IdleMoveAction) == 0x000168, "Member 'UBP_Ai_Enemy_C::IdleMoveAction' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, IsUseControlTickEnable) == 0x000178, "Member 'UBP_Ai_Enemy_C::IsUseControlTickEnable' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, bIgnoreMove) == 0x000179, "Member 'UBP_Ai_Enemy_C::bIgnoreMove' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, bBossBattleBegineAction) == 0x00017A, "Member 'UBP_Ai_Enemy_C::bBossBattleBegineAction' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, EnumBossBattleBegineAction) == 0x00017B, "Member 'UBP_Ai_Enemy_C::EnumBossBattleBegineAction' has a wrong offset!");
static_assert(offsetof(UBP_Ai_Enemy_C, IsFade) == 0x00017C, "Member 'UBP_Ai_Enemy_C::IsFade' has a wrong offset!");

}

