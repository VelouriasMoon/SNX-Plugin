#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlyEnemyPawnBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlyEnemyPawnBase.BP_FlyEnemyPawnBase_C
// 0x0030 (0x02C0 - 0x0290)
class ABP_FlyEnemyPawnBase_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFloatingPawnMovement*                  FloatingPawnMovement;                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleFlyEnemy_C*                   EnemyOwner;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAiMove;                                          // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AA[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AiMoveFailSec;                                     // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxSpeed;                                   // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FlyEnemyPawnBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Set_Actor_All_Tick_Enabled(bool bEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlyEnemyPawnBase_C">();
	}
	static class ABP_FlyEnemyPawnBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlyEnemyPawnBase_C>();
	}
};
static_assert(alignof(ABP_FlyEnemyPawnBase_C) == 0x000008, "Wrong alignment on ABP_FlyEnemyPawnBase_C");
static_assert(sizeof(ABP_FlyEnemyPawnBase_C) == 0x0002C0, "Wrong size on ABP_FlyEnemyPawnBase_C");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, UberGraphFrame) == 0x000290, "Member 'ABP_FlyEnemyPawnBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, FloatingPawnMovement) == 0x000298, "Member 'ABP_FlyEnemyPawnBase_C::FloatingPawnMovement' has a wrong offset!");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_FlyEnemyPawnBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, EnemyOwner) == 0x0002A8, "Member 'ABP_FlyEnemyPawnBase_C::EnemyOwner' has a wrong offset!");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, IsAiMove) == 0x0002B0, "Member 'ABP_FlyEnemyPawnBase_C::IsAiMove' has a wrong offset!");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, AiMoveFailSec) == 0x0002B4, "Member 'ABP_FlyEnemyPawnBase_C::AiMoveFailSec' has a wrong offset!");
static_assert(offsetof(ABP_FlyEnemyPawnBase_C, DefaultMaxSpeed) == 0x0002B8, "Member 'ABP_FlyEnemyPawnBase_C::DefaultMaxSpeed' has a wrong offset!");

}

