#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventPPStream

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_EventTypeSwitchBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventPPStream.BP_EventPPStream_C
// 0x0068 (0x02D8 - 0x0270)
class ABP_EventPPStream_C final : public ABP_EventTypeSwitchBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EventPPStream_C;                 // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Rate;                                              // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveCenterX;                                // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveScaleTop;                               // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveScaleBottom;                            // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveCenterY;                                // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveScaleLeft;                              // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveScaleRight;                             // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveScaleX;                                 // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveScaleY;                                 // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Rotate;                                            // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveOffsetX;                                // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PerspectiveOffsetY;                                // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         VisibleLineArea;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         GradationLineArea;                                 // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EmissivePower;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431B[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LevelSequencerActor;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ALevelSequenceActor*>            LevelSequenceActors;                               // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsPlayPP;                                          // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_EventPPStream(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void _________0();
	void OnPlay();
	void BeginPlayStaticCutScene();
	void UpdateStaticCutScene();
	void EndPlayStaticCutScene();
	void BeginPlayDynamicCutScene();
	void UpdateDynamicCutScene();
	void EndPlayDynamicCutScene();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventPPStream_C">();
	}
	static class ABP_EventPPStream_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventPPStream_C>();
	}
};
static_assert(alignof(ABP_EventPPStream_C) == 0x000008, "Wrong alignment on ABP_EventPPStream_C");
static_assert(sizeof(ABP_EventPPStream_C) == 0x0002D8, "Wrong size on ABP_EventPPStream_C");
static_assert(offsetof(ABP_EventPPStream_C, UberGraphFrame_BP_EventPPStream_C) == 0x000270, "Member 'ABP_EventPPStream_C::UberGraphFrame_BP_EventPPStream_C' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, Rate) == 0x000278, "Member 'ABP_EventPPStream_C::Rate' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveCenterX) == 0x00027C, "Member 'ABP_EventPPStream_C::PerspectiveCenterX' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveScaleTop) == 0x000280, "Member 'ABP_EventPPStream_C::PerspectiveScaleTop' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveScaleBottom) == 0x000284, "Member 'ABP_EventPPStream_C::PerspectiveScaleBottom' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveCenterY) == 0x000288, "Member 'ABP_EventPPStream_C::PerspectiveCenterY' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveScaleLeft) == 0x00028C, "Member 'ABP_EventPPStream_C::PerspectiveScaleLeft' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveScaleRight) == 0x000290, "Member 'ABP_EventPPStream_C::PerspectiveScaleRight' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveScaleX) == 0x000294, "Member 'ABP_EventPPStream_C::PerspectiveScaleX' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveScaleY) == 0x000298, "Member 'ABP_EventPPStream_C::PerspectiveScaleY' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, Rotate) == 0x00029C, "Member 'ABP_EventPPStream_C::Rotate' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveOffsetX) == 0x0002A0, "Member 'ABP_EventPPStream_C::PerspectiveOffsetX' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, PerspectiveOffsetY) == 0x0002A4, "Member 'ABP_EventPPStream_C::PerspectiveOffsetY' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, VisibleLineArea) == 0x0002A8, "Member 'ABP_EventPPStream_C::VisibleLineArea' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, GradationLineArea) == 0x0002AC, "Member 'ABP_EventPPStream_C::GradationLineArea' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, EmissivePower) == 0x0002B0, "Member 'ABP_EventPPStream_C::EmissivePower' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, LevelSequencerActor) == 0x0002B8, "Member 'ABP_EventPPStream_C::LevelSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, LevelSequenceActors) == 0x0002C0, "Member 'ABP_EventPPStream_C::LevelSequenceActors' has a wrong offset!");
static_assert(offsetof(ABP_EventPPStream_C, IsPlayPP) == 0x0002D0, "Member 'ABP_EventPPStream_C::IsPlayPP' has a wrong offset!");

}

