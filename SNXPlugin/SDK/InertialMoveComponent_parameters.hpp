#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InertialMoveComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function InertialMoveComponent.InertialMoveComponent_C.Initialize
// 0x0010 (0x0010 - 0x0000)
struct InertialMoveComponent_C_Initialize final
{
public:
	float                                         Speed_max;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Accel;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Decel;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InertialMoveComponent_C_Initialize) == 0x000004, "Wrong alignment on InertialMoveComponent_C_Initialize");
static_assert(sizeof(InertialMoveComponent_C_Initialize) == 0x000010, "Wrong size on InertialMoveComponent_C_Initialize");
static_assert(offsetof(InertialMoveComponent_C_Initialize, Speed_max) == 0x000000, "Member 'InertialMoveComponent_C_Initialize::Speed_max' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_Initialize, Accel) == 0x000004, "Member 'InertialMoveComponent_C_Initialize::Accel' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_Initialize, Decel) == 0x000008, "Member 'InertialMoveComponent_C_Initialize::Decel' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_Initialize, Range) == 0x00000C, "Member 'InertialMoveComponent_C_Initialize::Range' has a wrong offset!");

// Function InertialMoveComponent.InertialMoveComponent_C.SetOwner
// 0x0008 (0x0008 - 0x0000)
struct InertialMoveComponent_C_SetOwner final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InertialMoveComponent_C_SetOwner) == 0x000008, "Wrong alignment on InertialMoveComponent_C_SetOwner");
static_assert(sizeof(InertialMoveComponent_C_SetOwner) == 0x000008, "Wrong size on InertialMoveComponent_C_SetOwner");
static_assert(offsetof(InertialMoveComponent_C_SetOwner, Owner) == 0x000000, "Member 'InertialMoveComponent_C_SetOwner::Owner' has a wrong offset!");

// Function InertialMoveComponent.InertialMoveComponent_C.CalcMoveVector
// 0x0200 (0x0200 - 0x0000)
struct InertialMoveComponent_C_CalcMoveVector final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_second;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceFinish;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5398[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Move_vector;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBounce;                                           // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bFinish;                                           // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5399[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ResultVector;                                      // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaAccel;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDistHrz;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDist;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetPos;                                         // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539A[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539B[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539C[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539D[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_3;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539E[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539F[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_4;                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53A0[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_3;                     // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_4;                     // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_5;                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53A1[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_5;                     // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_6;                     // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_7;                     // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_5;            // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_3;      // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53A2[0x2];                                     // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InertialMoveComponent_C_CalcMoveVector) == 0x000004, "Wrong alignment on InertialMoveComponent_C_CalcMoveVector");
static_assert(sizeof(InertialMoveComponent_C_CalcMoveVector) == 0x000200, "Wrong size on InertialMoveComponent_C_CalcMoveVector");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, Target) == 0x000000, "Member 'InertialMoveComponent_C_CalcMoveVector::Target' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, Origin) == 0x00000C, "Member 'InertialMoveComponent_C_CalcMoveVector::Origin' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, Delta_second) == 0x000018, "Member 'InertialMoveComponent_C_CalcMoveVector::Delta_second' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, bForceFinish) == 0x00001C, "Member 'InertialMoveComponent_C_CalcMoveVector::bForceFinish' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, Move_vector) == 0x000020, "Member 'InertialMoveComponent_C_CalcMoveVector::Move_vector' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, bBounce) == 0x00002C, "Member 'InertialMoveComponent_C_CalcMoveVector::bBounce' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, bFinish) == 0x00002D, "Member 'InertialMoveComponent_C_CalcMoveVector::bFinish' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, ResultVector) == 0x000030, "Member 'InertialMoveComponent_C_CalcMoveVector::ResultVector' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, DeltaAccel) == 0x00003C, "Member 'InertialMoveComponent_C_CalcMoveVector::DeltaAccel' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, TargetDistHrz) == 0x000040, "Member 'InertialMoveComponent_C_CalcMoveVector::TargetDistHrz' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, TargetDist) == 0x000044, "Member 'InertialMoveComponent_C_CalcMoveVector::TargetDist' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, TargetOffset) == 0x000048, "Member 'InertialMoveComponent_C_CalcMoveVector::TargetOffset' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, TargetPos) == 0x000054, "Member 'InertialMoveComponent_C_CalcMoveVector::TargetPos' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000061, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VEase_ReturnValue) == 0x000064, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VEase_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000070, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Add_FloatFloat_ReturnValue) == 0x000074, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_FClamp_ReturnValue) == 0x000078, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue) == 0x00007C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000088, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x000094, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000098, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Ease_ReturnValue) == 0x0000A8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000B4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_FClamp_ReturnValue_1) == 0x0000B8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_BooleanAND_ReturnValue) == 0x0000BD, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VSize_ReturnValue) == 0x0000C0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_BreakVector_X) == 0x0000C4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_BreakVector_Y) == 0x0000C8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_BreakVector_Z) == 0x0000CC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_1) == 0x0000DC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VSize_ReturnValue_1) == 0x0000E8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VSize_ReturnValue_2) == 0x0000EC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VSize_ReturnValue_3) == 0x0000FC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VSize_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_2) == 0x000100, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00010C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000118, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00011C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000120, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000124, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_BooleanOR_ReturnValue) == 0x000128, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_FClamp_ReturnValue_2) == 0x00012C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000130, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x00013C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VSize_ReturnValue_4) == 0x000140, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VSize_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000144, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_3) == 0x000148, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000154, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_4) == 0x000160, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x00016C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000178, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_VSize_ReturnValue_5) == 0x000184, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_VSize_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x000188, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000194, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000198, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_5) == 0x00019C, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x0001A8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001B4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0001B8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001BC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001C0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x0001C4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_6) == 0x0001C8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_FClamp_ReturnValue_3) == 0x0001D4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001D8, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_DegAcos_ReturnValue) == 0x0001DC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Normal_ReturnValue_7) == 0x0001E0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Normal_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Abs_ReturnValue) == 0x0001EC, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Less_FloatFloat_ReturnValue_5) == 0x0001F0, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Less_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_EqualEqual_FloatFloat_ReturnValue_3) == 0x0001F1, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_EqualEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_CalcMoveVector, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x0001F4, "Member 'InertialMoveComponent_C_CalcMoveVector::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");

// Function InertialMoveComponent.InertialMoveComponent_C.initRandParam
// 0x0010 (0x0010 - 0x0000)
struct InertialMoveComponent_C_InitRandParam final
{
public:
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InertialMoveComponent_C_InitRandParam) == 0x000004, "Wrong alignment on InertialMoveComponent_C_InitRandParam");
static_assert(sizeof(InertialMoveComponent_C_InitRandParam) == 0x000010, "Wrong size on InertialMoveComponent_C_InitRandParam");
static_assert(offsetof(InertialMoveComponent_C_InitRandParam, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'InertialMoveComponent_C_InitRandParam::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_InitRandParam, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000004, "Member 'InertialMoveComponent_C_InitRandParam::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_InitRandParam, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000008, "Member 'InertialMoveComponent_C_InitRandParam::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InertialMoveComponent_C_InitRandParam, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x00000C, "Member 'InertialMoveComponent_C_InitRandParam::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");

}

