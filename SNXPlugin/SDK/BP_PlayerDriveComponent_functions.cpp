#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerDriveComponent

#include "Basic.hpp"

#include "BP_PlayerDriveComponent_classes.hpp"
#include "BP_PlayerDriveComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ED_PlayStart__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::ED_PlayStart__DelegateSignature(class AActor* User, bool bPlayStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ED_PlayStart__DelegateSignature");

	Params::BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature Parms{};

	Parms.User = User;
	Parms.bPlayStart = bPlayStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ED_PlayFinish__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::ED_PlayFinish__DelegateSignature(class AActor* User, bool bPlayStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ED_PlayFinish__DelegateSignature");

	Params::BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature Parms{};

	Parms.User = User;
	Parms.bPlayStart = bPlayStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ExecuteUbergraph_BP_PlayerDriveComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ExecuteUbergraph_BP_PlayerDriveComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ExecuteUbergraph_BP_PlayerDriveComponent");

	Params::BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.UnbindSimpleDirectionTick
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::UnbindSimpleDirectionTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "UnbindSimpleDirectionTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BindSimpleDirectionTick
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::BindSimpleDirectionTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BindSimpleDirectionTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.UnbindDriveReadyTick
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::UnbindDriveReadyTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "UnbindDriveReadyTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BindDriveReadyTick
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::BindDriveReadyTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BindDriveReadyTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ReceiveEndPlay");

	Params::BP_PlayerDriveComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ReceiveTick");

	Params::BP_PlayerDriveComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.PlayStartSequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HighDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::PlayStartSequence(bool HighDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "PlayStartSequence");

	Params::BP_PlayerDriveComponent_C_PlayStartSequence Parms{};

	Parms.HighDamage = HighDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.Finalize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::Finalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "Finalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedInitialize
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ProtectedInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedFinalize
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ProtectedFinalize(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedFinalize");

	Params::BP_PlayerDriveComponent_C_ProtectedFinalize Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.LoadAsset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               UserPlayerID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MainPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::LoadAsset(EPlayerID UserPlayerID, bool MainPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "LoadAsset");

	Params::BP_PlayerDriveComponent_C_LoadAsset Parms{};

	Parms.UserPlayerID = UserPlayerID;
	Parms.MainPlayer = MainPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedGetLoadSequencerAsset
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Param_PlayerId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class ULevelSequence>>StartLevelSequences                                    (Parm, OutParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class ULevelSequence>>EndLevelSequences                                      (Parm, OutParm, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ProtectedGetLoadSequencerAsset(EPlayerID Param_PlayerId, TArray<TSoftObjectPtr<class ULevelSequence>>* StartLevelSequences, TArray<TSoftObjectPtr<class ULevelSequence>>* EndLevelSequences)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedGetLoadSequencerAsset");

	Params::BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset Parms{};

	Parms.Param_PlayerId = Param_PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	if (StartLevelSequences != nullptr)
		*StartLevelSequences = std::move(Parms.StartLevelSequences);

	if (EndLevelSequences != nullptr)
		*EndLevelSequences = std::move(Parms.EndLevelSequences);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedBindingSequence
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ProtectedBindingSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedBindingSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedOnFinishSequencer
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ProtectedOnFinishSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedOnFinishSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedPlaySequencer
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ProtectedPlaySequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedPlaySequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqStartInputPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::EventSeqStartInputPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EventSeqStartInputPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqDamageEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::EventSeqDamageEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EventSeqDamageEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqSetVisibleUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::EventSeqSetVisibleUI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EventSeqSetVisibleUI");

	Params::BP_PlayerDriveComponent_C_EventSeqSetVisibleUI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedSetSequenceActorEvent
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SetEnemy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsStart                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::ProtectedSetSequenceActorEvent(bool SetPlayer, bool SetEnemy, bool IsStart, bool IsDynamic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedSetSequenceActorEvent");

	Params::BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent Parms{};

	Parms.SetPlayer = SetPlayer;
	Parms.SetEnemy = SetEnemy;
	Parms.IsStart = IsStart;
	Parms.IsDynamic = IsDynamic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdate
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ProtectedUpdate(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedUpdate");

	Params::BP_PlayerDriveComponent_C_ProtectedUpdate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.PlayEndSequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoSequence                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::PlayEndSequence(bool bNoSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "PlayEndSequence");

	Params::BP_PlayerDriveComponent_C_PlayEndSequence Parms{};

	Parms.bNoSequence = bNoSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqPlayerOpenSwitch
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::EventSeqPlayerOpenSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EventSeqPlayerOpenSwitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ResetSequence
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ResetSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ResetSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqSetDriveMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableDrive                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::EventSeqSetDriveMaterial(bool EnableDrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EventSeqSetDriveMaterial");

	Params::BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial Parms{};

	Parms.EnableDrive = EnableDrive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedGetSequencerAsset
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStart                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ULevelSequence*                   LevelSequence                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ProtectedGetSequencerAsset(bool IsStart, bool* Valid, class ULevelSequence** LevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedGetSequencerAsset");

	Params::BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset Parms{};

	Parms.IsStart = IsStart;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (LevelSequence != nullptr)
		*LevelSequence = Parms.LevelSequence;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdateSequenceParameter
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ProtectedUpdateSequenceParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedUpdateSequenceParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetupSequencePPM
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::SetupSequencePPM(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "SetupSequencePPM");

	Params::BP_PlayerDriveComponent_C_SetupSequencePPM Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdatePostProcess
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ProtectedUpdatePostProcess(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedUpdatePostProcess");

	Params::BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsActivePostProcess
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsActive                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::IsActivePostProcess(bool* Param_IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsActivePostProcess");

	Params::BP_PlayerDriveComponent_C_IsActivePostProcess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsActive != nullptr)
		*Param_IsActive = Parms.Param_IsActive;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ClearPostProcess
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::ClearPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ClearPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.TickDriveReady
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::TickDriveReady(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "TickDriveReady");

	Params::BP_PlayerDriveComponent_C_TickDriveReady Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReadyDrive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAfterBrainCrash                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bManual                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::ReadyDrive(bool bAfterBrainCrash, bool bManual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ReadyDrive");

	Params::BP_PlayerDriveComponent_C_ReadyDrive Parms{};

	Parms.bAfterBrainCrash = bAfterBrainCrash;
	Parms.bManual = bManual;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.CancelReadyDrive
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::CancelReadyDrive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "CancelReadyDrive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.OnDriveEnd
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInterruption                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLocationChange                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::OnDriveEnd(bool bInterruption, bool bLocationChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "OnDriveEnd");

	Params::BP_PlayerDriveComponent_C_OnDriveEnd Parms{};

	Parms.bInterruption = bInterruption;
	Parms.bLocationChange = bLocationChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirectionFlash
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::BeginSimpleDirectionFlash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BeginSimpleDirectionFlash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EndSimpleDirectionFlash
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::EndSimpleDirectionFlash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EndSimpleDirectionFlash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EndSimpleDirection
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::EndSimpleDirection(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EndSimpleDirection");

	Params::BP_PlayerDriveComponent_C_EndSimpleDirection Parms{};

	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.TickSimpleDirection
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::TickSimpleDirection(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "TickSimpleDirection");

	Params::BP_PlayerDriveComponent_C_TickSimpleDirection Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSkipDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::BeginSimpleDirection(bool IsSkipDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BeginSimpleDirection");

	Params::BP_PlayerDriveComponent_C_BeginSimpleDirection Parms{};

	Parms.IsSkipDirection = IsSkipDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirectionCamera
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::BeginSimpleDirectionCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BeginSimpleDirectionCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EndSimpleDirectionCamera
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::EndSimpleDirectionCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EndSimpleDirectionCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetSimpleDirectionHood
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::SetSimpleDirectionHood()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "SetSimpleDirectionHood");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.DriveImpactAttack
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::DriveImpactAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "DriveImpactAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirectionSlow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::BeginSimpleDirectionSlow(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BeginSimpleDirectionSlow");

	Params::BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EndSimpleDirectionSlow
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::EndSimpleDirectionSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "EndSimpleDirectionSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.NotifyChangePlayerAction
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::NotifyChangePlayerAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "NotifyChangePlayerAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.DriveBeginFinalCheck
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::DriveBeginFinalCheck(bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "DriveBeginFinalCheck");

	Params::BP_PlayerDriveComponent_C_DriveBeginFinalCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetBrainFieldDrive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDrive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::SetBrainFieldDrive(bool bDrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "SetBrainFieldDrive");

	Params::BP_PlayerDriveComponent_C_SetBrainFieldDrive Parms{};

	Parms.bDrive = bDrive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.PlayDriveVoice
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Param_PlayerId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::PlayDriveVoice(EPlayerID Param_PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "PlayDriveVoice");

	Params::BP_PlayerDriveComponent_C_PlayDriveVoice Parms{};

	Parms.Param_PlayerId = Param_PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.UpdateDrivePlane
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EffectLength                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::UpdateDrivePlane(float EffectLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "UpdateDrivePlane");

	Params::BP_PlayerDriveComponent_C_UpdateDrivePlane Parms{};

	Parms.EffectLength = EffectLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.Shutdown DrivePlane
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::Shutdown_DrivePlane()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "Shutdown DrivePlane");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginDriveNoDirection
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerDriveComponent_C::BeginDriveNoDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "BeginDriveNoDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetBattling
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Battliing                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::SetBattling(bool Battliing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "SetBattling");

	Params::BP_PlayerDriveComponent_C_SetBattling Parms{};

	Parms.Battliing = Battliing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdateBattling
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerDriveComponent_C::ProtectedUpdateBattling(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "ProtectedUpdateBattling");

	Params::BP_PlayerDriveComponent_C_ProtectedUpdateBattling Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsSimpleDirectionTiming
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSImpleDirection                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::IsSimpleDirectionTiming(bool* bSImpleDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsSimpleDirectionTiming");

	Params::BP_PlayerDriveComponent_C_IsSimpleDirectionTiming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSImpleDirection != nullptr)
		*bSImpleDirection = Parms.bSImpleDirection;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsDebugInfiniteDrive
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerDriveComponent_C::IsDebugInfiniteDrive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsDebugInfiniteDrive");

	Params::BP_PlayerDriveComponent_C_IsDebugInfiniteDrive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsDebugAlwaysDrive
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerDriveComponent_C::IsDebugAlwaysDrive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsDebugAlwaysDrive");

	Params::BP_PlayerDriveComponent_C_IsDebugAlwaysDrive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsPlayingSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsPlaying                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::IsPlayingSequence(bool* IsPlaying) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsPlayingSequence");

	Params::BP_PlayerDriveComponent_C_IsPlayingSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaying != nullptr)
		*IsPlaying = Parms.IsPlaying;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsInitialize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsInitialized                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::IsInitialize(bool* IsInitialized) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsInitialize");

	Params::BP_PlayerDriveComponent_C_IsInitialize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInitialized != nullptr)
		*IsInitialized = Parms.IsInitialized;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsDriveReadyAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bInManual                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::IsDriveReadyAble(bool bInManual, bool* bOK) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsDriveReadyAble");

	Params::BP_PlayerDriveComponent_C_IsDriveReadyAble Parms{};

	Parms.bInManual = bInManual;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsPlaySimpleDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bPlay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerDriveComponent_C::IsPlaySimpleDirection(bool* bPlay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerDriveComponent_C", "IsPlaySimpleDirection");

	Params::BP_PlayerDriveComponent_C_IsPlaySimpleDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPlay != nullptr)
		*bPlay = Parms.bPlay;
}

}

