#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerSequencerComponent

#include "Basic.hpp"

#include "CharactersSequencerData_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerSequencerIndex_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_SequencerComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C
// 0x0110 (0x0370 - 0x0260)
class UBP_PlayerSequencerComponent_C final : public UBP_SequencerComponent_C
{
public:
	uint8                                         Pad_8453[0x5];                                     // 0x0253(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerSequencerComponent_C;      // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FCharactersSequencerData               SequencerDataIntercept;                            // 0x0260(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               PsyObjIntercept;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSequencerIndex                         PlayerSequencerIndex;                              // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8454[0xF];                                     // 0x0301(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MotionTransform;                                   // 0x0310(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ClaimantString;                                    // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         InterceptTimeDilation;                             // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x035C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerSequencerComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Initialize(bool* Dummy);
	void Update(bool* Dummy);
	void Finalize(bool* Dummy);
	void StartSequnecer(int32 Index_in, bool* Dummy);
	void EndSequencer(int32 Param_SequencerIndex, bool* Dummy);
	void StartSequencerIntercept(class AActor* Psy_obj_actor_in);
	void GetRootActorBindingID(struct FMovieSceneObjectBindingID* binding_id);
	struct FTransform CalcFinalTransform(const struct FTransform& InMotaionTransform);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerSequencerComponent_C">();
	}
	static class UBP_PlayerSequencerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerSequencerComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerSequencerComponent_C) == 0x000010, "Wrong alignment on UBP_PlayerSequencerComponent_C");
static_assert(sizeof(UBP_PlayerSequencerComponent_C) == 0x000370, "Wrong size on UBP_PlayerSequencerComponent_C");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, UberGraphFrame_BP_PlayerSequencerComponent_C) == 0x000258, "Member 'UBP_PlayerSequencerComponent_C::UberGraphFrame_BP_PlayerSequencerComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, SequencerDataIntercept) == 0x000260, "Member 'UBP_PlayerSequencerComponent_C::SequencerDataIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, PsyObjIntercept) == 0x0002F8, "Member 'UBP_PlayerSequencerComponent_C::PsyObjIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, PlayerSequencerIndex) == 0x000300, "Member 'UBP_PlayerSequencerComponent_C::PlayerSequencerIndex' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, MotionTransform) == 0x000310, "Member 'UBP_PlayerSequencerComponent_C::MotionTransform' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, OwnerPlayer) == 0x000340, "Member 'UBP_PlayerSequencerComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, ClaimantString) == 0x000348, "Member 'UBP_PlayerSequencerComponent_C::ClaimantString' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, InterceptTimeDilation) == 0x000358, "Member 'UBP_PlayerSequencerComponent_C::InterceptTimeDilation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerSequencerComponent_C, ClaimantName) == 0x00035C, "Member 'UBP_PlayerSequencerComponent_C::ClaimantName' has a wrong offset!");

}

