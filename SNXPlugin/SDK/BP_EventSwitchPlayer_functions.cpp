#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventSwitchPlayer

#include "Basic.hpp"

#include "BP_EventSwitchPlayer_classes.hpp"
#include "BP_EventSwitchPlayer_parameters.hpp"


namespace SDK
{

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.ExecuteUbergraph_BP_EventSwitchPlayer
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventSwitchPlayer_C::ExecuteUbergraph_BP_EventSwitchPlayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "ExecuteUbergraph_BP_EventSwitchPlayer");

	Params::BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.ResetMesh
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventSwitchPlayer_C::ResetMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "ResetMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventSwitchPlayer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "ReceiveTick");

	Params::BP_EventSwitchPlayer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_EventSwitchPlayer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventSwitchPlayer_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.Initialize
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventSwitchPlayer_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.UpdateSimulate
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventSwitchPlayer_C::UpdateSimulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "UpdateSimulate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.GetPreviewPlayerID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventSwitchPlayer_C::GetPreviewPlayerID(EPlayerID* PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "GetPreviewPlayerID");

	Params::BP_EventSwitchPlayer_C_GetPreviewPlayerID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerId != nullptr)
		*PlayerId = Parms.PlayerId;
}


// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.LoadAsset
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   AssetList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          Object                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventSwitchPlayer_C::LoadAsset(TArray<TSoftObjectPtr<class UObject>>& AssetList, EPlayerID PlayerId, bool* IsValid, class UObject** Object) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSwitchPlayer_C", "LoadAsset");

	Params::BP_EventSwitchPlayer_C_LoadAsset Parms{};

	Parms.AssetList = std::move(AssetList);
	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	AssetList = std::move(Parms.AssetList);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (Object != nullptr)
		*Object = Parms.Object;
}

}

