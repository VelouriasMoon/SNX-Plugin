#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InertialMoveComponent

#include "Basic.hpp"

#include "InertialMoveComponent_classes.hpp"
#include "InertialMoveComponent_parameters.hpp"


namespace SDK
{

// Function InertialMoveComponent.InertialMoveComponent_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed_max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Accel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInertialMoveComponent_C::Initialize(float Speed_max, float Accel, float Decel, float Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InertialMoveComponent_C", "Initialize");

	Params::InertialMoveComponent_C_Initialize Parms{};

	Parms.Speed_max = Speed_max;
	Parms.Accel = Accel;
	Parms.Decel = Decel;
	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InertialMoveComponent.InertialMoveComponent_C.SetOwner
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInertialMoveComponent_C::SetOwner(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InertialMoveComponent_C", "SetOwner");

	Params::InertialMoveComponent_C_SetOwner Parms{};

	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InertialMoveComponent.InertialMoveComponent_C.CalcMoveVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delta_second                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForceFinish                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Move_vector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBounce                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFinish                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInertialMoveComponent_C::CalcMoveVector(const struct FVector& Target, const struct FVector& Origin, float Delta_second, bool bForceFinish, struct FVector* Move_vector, bool* bBounce, bool* bFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InertialMoveComponent_C", "CalcMoveVector");

	Params::InertialMoveComponent_C_CalcMoveVector Parms{};

	Parms.Target = std::move(Target);
	Parms.Origin = std::move(Origin);
	Parms.Delta_second = Delta_second;
	Parms.bForceFinish = bForceFinish;

	UObject::ProcessEvent(Func, &Parms);

	if (Move_vector != nullptr)
		*Move_vector = std::move(Parms.Move_vector);

	if (bBounce != nullptr)
		*bBounce = Parms.bBounce;

	if (bFinish != nullptr)
		*bFinish = Parms.bFinish;
}


// Function InertialMoveComponent.InertialMoveComponent_C.initParam
// (Public, BlueprintCallable, BlueprintEvent)

void UInertialMoveComponent_C::InitParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InertialMoveComponent_C", "initParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InertialMoveComponent.InertialMoveComponent_C.initRandParam
// (Public, BlueprintCallable, BlueprintEvent)

void UInertialMoveComponent_C::InitRandParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InertialMoveComponent_C", "initRandParam");

	UObject::ProcessEvent(Func, nullptr);
}

}

