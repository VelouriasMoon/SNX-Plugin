#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapGimmickManager

#include "Basic.hpp"

#include "S_MapGimmickScenerioFlag_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.ExecuteUbergraph_BP_MapGimmickManager
// 0x0004 (0x0004 - 0x0000)
struct BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager) == 0x000004, "Wrong alignment on BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager");
static_assert(sizeof(BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager) == 0x000004, "Wrong size on BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager");
static_assert(offsetof(BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager, EntryPoint) == 0x000000, "Member 'BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager::EntryPoint' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.AddMapGimmickUseTime
// 0x0010 (0x0010 - 0x0000)
struct BP_MapGimmickManager_C_AddMapGimmickUseTime final
{
public:
	class AMapGimmickObject*                      Gimmick;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapGimmickManager_C_AddMapGimmickUseTime) == 0x000008, "Wrong alignment on BP_MapGimmickManager_C_AddMapGimmickUseTime");
static_assert(sizeof(BP_MapGimmickManager_C_AddMapGimmickUseTime) == 0x000010, "Wrong size on BP_MapGimmickManager_C_AddMapGimmickUseTime");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTime, Gimmick) == 0x000000, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTime::Gimmick' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTime, ReturnValue) == 0x000008, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTime, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.AddMapGimmickUseTimeByType
// 0x0030 (0x0030 - 0x0000)
struct BP_MapGimmickManager_C_AddMapGimmickUseTimeByType final
{
public:
	EMapGimmickType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8694[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapGimmickManager_C_AddMapGimmickUseTimeByType) == 0x000008, "Wrong alignment on BP_MapGimmickManager_C_AddMapGimmickUseTimeByType");
static_assert(sizeof(BP_MapGimmickManager_C_AddMapGimmickUseTimeByType) == 0x000030, "Wrong size on BP_MapGimmickManager_C_AddMapGimmickUseTimeByType");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTimeByType, Type) == 0x000000, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTimeByType::Type' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTimeByType, CallFunc_GetUserParamManager_UserParamManager) == 0x000008, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTimeByType::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTimeByType, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000010, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTimeByType::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_AddMapGimmickUseTimeByType, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_MapGimmickManager_C_AddMapGimmickUseTimeByType::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.CheckUsedGimmickType
// 0x000C (0x000C - 0x0000)
struct BP_MapGimmickManager_C_CheckUsedGimmickType final
{
public:
	EMapGimmickType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8695[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMapGimmickUseTime_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapGimmickManager_C_CheckUsedGimmickType) == 0x000004, "Wrong alignment on BP_MapGimmickManager_C_CheckUsedGimmickType");
static_assert(sizeof(BP_MapGimmickManager_C_CheckUsedGimmickType) == 0x00000C, "Wrong size on BP_MapGimmickManager_C_CheckUsedGimmickType");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickType, Type) == 0x000000, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickType::Type' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickType, Used) == 0x000001, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickType::Used' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickType, CallFunc_GetMapGimmickUseTime_ReturnValue) == 0x000004, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickType::CallFunc_GetMapGimmickUseTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickType, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.CheckUsedGimmickAnyTypes
// 0x0030 (0x0030 - 0x0000)
struct BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes final
{
public:
	TArray<EMapGimmickType>                       Type;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Used;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8696[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUsedGimmickType_Used;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8697[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8698[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes) == 0x000008, "Wrong alignment on BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes");
static_assert(sizeof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes) == 0x000030, "Wrong size on BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, Type) == 0x000000, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::Type' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, Used) == 0x000010, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::Used' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, CallFunc_CheckUsedGimmickType_Used) == 0x000020, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::CallFunc_CheckUsedGimmickType_Used' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.CheckInYuitoScenario
// 0x0001 (0x0001 - 0x0000)
struct BP_MapGimmickManager_C_CheckInYuitoScenario final
{
public:
	bool                                          IsYuitoScenario;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapGimmickManager_C_CheckInYuitoScenario) == 0x000001, "Wrong alignment on BP_MapGimmickManager_C_CheckInYuitoScenario");
static_assert(sizeof(BP_MapGimmickManager_C_CheckInYuitoScenario) == 0x000001, "Wrong size on BP_MapGimmickManager_C_CheckInYuitoScenario");
static_assert(offsetof(BP_MapGimmickManager_C_CheckInYuitoScenario, IsYuitoScenario) == 0x000000, "Member 'BP_MapGimmickManager_C_CheckInYuitoScenario::IsYuitoScenario' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.ResetMapGimmickUseTimesAll
// 0x0030 (0x0030 - 0x0000)
struct BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll final
{
public:
	class ABP_SceneManager_C*                     L_sceneManager;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8699[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869A[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll) == 0x000008, "Wrong alignment on BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll");
static_assert(sizeof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll) == 0x000030, "Wrong size on BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, L_sceneManager) == 0x000000, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::L_sceneManager' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, CallFunc_GetSceneManager_SceneManager) == 0x000010, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'BP_MapGimmickManager_C_ResetMapGimmickUseTimesAll::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.InitializeMapGimmickUse
// 0x0040 (0x0040 - 0x0000)
struct BP_MapGimmickManager_C_InitializeMapGimmickUse final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_869C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FS_MapGimmickScenerioFlag              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869D[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapGimmickManager_C_InitializeMapGimmickUse) == 0x000008, "Wrong alignment on BP_MapGimmickManager_C_InitializeMapGimmickUse");
static_assert(sizeof(BP_MapGimmickManager_C_InitializeMapGimmickUse) == 0x000040, "Wrong size on BP_MapGimmickManager_C_InitializeMapGimmickUse");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000018, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000030, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapGimmickManager_C_InitializeMapGimmickUse, CallFunc_Array_AddUnique_ReturnValue) == 0x000038, "Member 'BP_MapGimmickManager_C_InitializeMapGimmickUse::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

}

