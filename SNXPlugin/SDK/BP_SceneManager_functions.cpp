#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SceneManager

#include "Basic.hpp"

#include "BP_SceneManager_classes.hpp"
#include "BP_SceneManager_parameters.hpp"


namespace SDK
{

// Function BP_SceneManager.BP_SceneManager_C.OnFinishWaitAreaVisible__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::OnFinishWaitAreaVisible__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "OnFinishWaitAreaVisible__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.ExecuteUbergraph_BP_SceneManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::ExecuteUbergraph_BP_SceneManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "ExecuteUbergraph_BP_SceneManager");

	Params::BP_SceneManager_C_ExecuteUbergraph_BP_SceneManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.RequestChangeSceneBattleSimulator
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BattleSimulatorRowName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::RequestChangeSceneBattleSimulator(class FName BattleSimulatorRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "RequestChangeSceneBattleSimulator");

	Params::BP_SceneManager_C_RequestChangeSceneBattleSimulator Parms{};

	Parms.BattleSimulatorRowName = BattleSimulatorRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.CallFuncFromCode_UpdateAllTownPeopleState
// (Event, Public, BlueprintEvent)

void ABP_SceneManager_C::CallFuncFromCode_UpdateAllTownPeopleState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "CallFuncFromCode_UpdateAllTownPeopleState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.Event_ReVisibleNaviLevel
// (BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::Event_ReVisibleNaviLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "Event_ReVisibleNaviLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.SetAreaSoundSetting
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::SetAreaSoundSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "SetAreaSoundSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "ReceiveTick");

	Params::BP_SceneManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SceneManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.Debug Set Current Status
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneManagerStatus                    Param_CurrentStatus                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::Debug_Set_Current_Status(E_SceneManagerStatus Param_CurrentStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "Debug Set Current Status");

	Params::BP_SceneManager_C_Debug_Set_Current_Status Parms{};

	Parms.Param_CurrentStatus = Param_CurrentStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.InitBoot
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::InitBoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "InitBoot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.ChangeSceneManagerStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneManagerStatus                    Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::ChangeSceneManagerStatus(E_SceneManagerStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "ChangeSceneManagerStatus");

	Params::BP_SceneManager_C_ChangeSceneManagerStatus Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.TickWaitAreaLoading
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickWaitAreaLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickWaitAreaLoading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickWaitAreaVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickWaitAreaVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickWaitAreaVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickSceneStarting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickSceneStarting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickSceneStarting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickInScene
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickInScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickInScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickInitialize
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickWaitFadeOut
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickWaitFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickWaitFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.SetAreaSoundSetting_
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::SetAreaSoundSetting_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "SetAreaSoundSetting_");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickStartFade
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickStartFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickStartFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickStartNoFade
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickStartNoFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickStartNoFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.InitOnStartFade
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::InitOnStartFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "InitOnStartFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.InitBeforeLoadLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::InitBeforeLoadLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "InitBeforeLoadLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.GetNextAreaInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AreaName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             PortalName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetNextAreaInfo(int32 LocationId, int32 AreaId, int32 PortalID, class FName* AreaName, class FName* PortalName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetNextAreaInfo");

	Params::BP_SceneManager_C_GetNextAreaInfo Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.PortalID = PortalID;

	UObject::ProcessEvent(Func, &Parms);

	if (AreaName != nullptr)
		*AreaName = Parms.AreaName;

	if (PortalName != nullptr)
		*PortalName = Parms.PortalName;
}


// Function BP_SceneManager.BP_SceneManager_C.InitBoot_
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::InitBoot_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "InitBoot_");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.RequestChapterJump
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ChapterName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::RequestChapterJump(class FName ChapterName, bool Debug, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "RequestChapterJump");

	Params::BP_SceneManager_C_RequestChapterJump Parms{};

	Parms.ChapterName = ChapterName;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_SceneManager.BP_SceneManager_C.GetChapterInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_ScenarioJump                  Info                                                   (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::GetChapterInfo(class FName RowName, struct FS_ScenarioJump* Info, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetChapterInfo");

	Params::BP_SceneManager_C_GetChapterInfo Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_SceneManager.BP_SceneManager_C.RequestChangeSceneImmediate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     SceneArgs                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    NoFade                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ELoadingScreenType                      Param_LoadingScreenType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_LoadingScreenParam                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSaveDataLoadFlow                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::RequestChangeSceneImmediate(int32 LocationId, int32 AreaId, int32 VariationID, int32 PortalID, TArray<class FName>& SceneArgs, bool NoFade, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam, bool IsSaveDataLoadFlow, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "RequestChangeSceneImmediate");

	Params::BP_SceneManager_C_RequestChangeSceneImmediate Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;
	Parms.PortalID = PortalID;
	Parms.SceneArgs = std::move(SceneArgs);
	Parms.NoFade = NoFade;
	Parms.Param_LoadingScreenType = Param_LoadingScreenType;
	Parms.Param_LoadingScreenParam = Param_LoadingScreenParam;
	Parms.IsSaveDataLoadFlow = IsSaveDataLoadFlow;

	UObject::ProcessEvent(Func, &Parms);

	SceneArgs = std::move(Parms.SceneArgs);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_SceneManager.BP_SceneManager_C.SetCurrentArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Variation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Portal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UpdateBeforeID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::SetCurrentArea(int32 Location, int32 Area, int32 Variation, int32 Portal, bool UpdateBeforeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "SetCurrentArea");

	Params::BP_SceneManager_C_SetCurrentArea Parms{};

	Parms.Location = Location;
	Parms.Area = Area;
	Parms.Variation = Variation;
	Parms.Portal = Portal;
	Parms.UpdateBeforeID = UpdateBeforeID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.CurrentAreaName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AreaName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::CurrentAreaName(class FName* AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "CurrentAreaName");

	Params::BP_SceneManager_C_CurrentAreaName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AreaName != nullptr)
		*AreaName = Parms.AreaName;
}


// Function BP_SceneManager.BP_SceneManager_C.RequestChangeSceneImmediateByName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaInfoName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     SceneArgs                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    NoFade                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ELoadingScreenType                      Param_LoadingScreenType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_LoadingScreenParam                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::RequestChangeSceneImmediateByName(class FName AreaInfoName, int32 PortalID, TArray<class FName>& SceneArgs, bool NoFade, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "RequestChangeSceneImmediateByName");

	Params::BP_SceneManager_C_RequestChangeSceneImmediateByName Parms{};

	Parms.AreaInfoName = AreaInfoName;
	Parms.PortalID = PortalID;
	Parms.SceneArgs = std::move(SceneArgs);
	Parms.NoFade = NoFade;
	Parms.Param_LoadingScreenType = Param_LoadingScreenType;
	Parms.Param_LoadingScreenParam = Param_LoadingScreenParam;

	UObject::ProcessEvent(Func, &Parms);

	SceneArgs = std::move(Parms.SceneArgs);
}


// Function BP_SceneManager.BP_SceneManager_C.Tick Wait Event Asset Load
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::Tick_Wait_Event_Asset_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "Tick Wait Event Asset Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.DeleteAllWalkingNPC
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::DeleteAllWalkingNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "DeleteAllWalkingNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.RequestChangeScene
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     SceneArgs                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    NoFade                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ELoadingScreenType                      Param_LoadingScreenType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_LoadingScreenParam                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAutoSaveEnable                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             BattleSimulatorLevelInfosName                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::RequestChangeScene(int32 LocationId, int32 AreaId, int32 PortalID, const TArray<class FName>& SceneArgs, bool NoFade, bool* Error, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam, bool IsAutoSaveEnable, class FName BattleSimulatorLevelInfosName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "RequestChangeScene");

	Params::BP_SceneManager_C_RequestChangeScene Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.PortalID = PortalID;
	Parms.SceneArgs = std::move(SceneArgs);
	Parms.NoFade = NoFade;
	Parms.Param_LoadingScreenType = Param_LoadingScreenType;
	Parms.Param_LoadingScreenParam = Param_LoadingScreenParam;
	Parms.IsAutoSaveEnable = IsAutoSaveEnable;
	Parms.BattleSimulatorLevelInfosName = BattleSimulatorLevelInfosName;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_SceneManager.BP_SceneManager_C.IsStatusInScene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInScene                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsStatusInScene(bool* IsInScene)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsStatusInScene");

	Params::BP_SceneManager_C_IsStatusInScene Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInScene != nullptr)
		*IsInScene = Parms.IsInScene;
}


// Function BP_SceneManager.BP_SceneManager_C.UpdateAllTownPeopleState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::UpdateAllTownPeopleState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "UpdateAllTownPeopleState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.IsWaitLoadScene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWaitLoad                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsWaitLoadScene(bool* IsWaitLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsWaitLoadScene");

	Params::BP_SceneManager_C_IsWaitLoadScene Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsWaitLoad != nullptr)
		*IsWaitLoad = Parms.IsWaitLoad;
}


// Function BP_SceneManager.BP_SceneManager_C.SelectLoadingUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELoadingScreenType                      Param_LoadingScreenType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_LoadingScreenParam                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::SelectLoadingUI(int32 LocationId, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "SelectLoadingUI");

	Params::BP_SceneManager_C_SelectLoadingUI Parms{};

	Parms.LocationId = LocationId;
	Parms.Param_LoadingScreenType = Param_LoadingScreenType;
	Parms.Param_LoadingScreenParam = Param_LoadingScreenParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.GetCurrentLocationAndArea
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetCurrentLocationAndArea(int32* LocationId, int32* AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetCurrentLocationAndArea");

	Params::BP_SceneManager_C_GetCurrentLocationAndArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;

	if (AreaId != nullptr)
		*AreaId = Parms.AreaId;
}


// Function BP_SceneManager.BP_SceneManager_C.Tick Wait Unload Dynamic Levels
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::Tick_Wait_Unload_Dynamic_Levels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "Tick Wait Unload Dynamic Levels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.GetPreviousLocationAndArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetPreviousLocationAndArea(int32* LocationId, int32* AreaId, int32* PortalID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetPreviousLocationAndArea");

	Params::BP_SceneManager_C_GetPreviousLocationAndArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;

	if (AreaId != nullptr)
		*AreaId = Parms.AreaId;

	if (PortalID != nullptr)
		*PortalID = Parms.PortalID;
}


// Function BP_SceneManager.BP_SceneManager_C.GetStartPortalName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PortalName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetStartPortalName(class FName* PortalName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetStartPortalName");

	Params::BP_SceneManager_C_GetStartPortalName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PortalName != nullptr)
		*PortalName = Parms.PortalName;
}


// Function BP_SceneManager.BP_SceneManager_C.GetBeforeLocationAndArea
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetBeforeLocationAndArea(int32* LocationId, int32* AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetBeforeLocationAndArea");

	Params::BP_SceneManager_C_GetBeforeLocationAndArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;

	if (AreaId != nullptr)
		*AreaId = Parms.AreaId;
}


// Function BP_SceneManager.BP_SceneManager_C.MovePlayerAtNewArea
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::MovePlayerAtNewArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "MovePlayerAtNewArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.TickWaitAreaLBPortalLevelLoading
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickWaitAreaLBPortalLevelLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickWaitAreaLBPortalLevelLoading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.GetPortalTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationNo                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaNo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             PortalName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::GetPortalTransform(int32 LocationNo, int32 AreaNo, class FName PortalName, struct FTransform* Transform, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetPortalTransform");

	Params::BP_SceneManager_C_GetPortalTransform Parms{};

	Parms.LocationNo = LocationNo;
	Parms.AreaNo = AreaNo;
	Parms.PortalName = PortalName;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_SceneManager.BP_SceneManager_C.TickWaitAreaLBPortalLevelVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::TickWaitAreaLBPortalLevelVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "TickWaitAreaLBPortalLevelVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.CheckPlayerInEventTrigger
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEvent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::CheckPlayerInEventTrigger(bool* InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "CheckPlayerInEventTrigger");

	Params::BP_SceneManager_C_CheckPlayerInEventTrigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InEvent != nullptr)
		*InEvent = Parms.InEvent;
}


// Function BP_SceneManager.BP_SceneManager_C.GetDebugStartedScenarioJumpRowName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ScenerioJumpRowName                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetDebugStartedScenarioJumpRowName(class FName* ScenerioJumpRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetDebugStartedScenarioJumpRowName");

	Params::BP_SceneManager_C_GetDebugStartedScenarioJumpRowName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ScenerioJumpRowName != nullptr)
		*ScenerioJumpRowName = Parms.ScenerioJumpRowName;
}


// Function BP_SceneManager.BP_SceneManager_C.SetDebugStartedScenarioJumpRowName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ScenerioJumpRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::SetDebugStartedScenarioJumpRowName(class FName ScenerioJumpRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "SetDebugStartedScenarioJumpRowName");

	Params::BP_SceneManager_C_SetDebugStartedScenarioJumpRowName Parms{};

	Parms.ScenerioJumpRowName = ScenerioJumpRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.IsDebugAlphaROMScenerio
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAlphaScenerio                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsDebugAlphaROMScenerio(bool* bAlphaScenerio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsDebugAlphaROMScenerio");

	Params::BP_SceneManager_C_IsDebugAlphaROMScenerio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAlphaScenerio != nullptr)
		*bAlphaScenerio = Parms.bAlphaScenerio;
}


// Function BP_SceneManager.BP_SceneManager_C.SetLastPlayerSpawnInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PortalName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       LastSpawnTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::SetLastPlayerSpawnInfo(class FName PortalName, const struct FTransform& LastSpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "SetLastPlayerSpawnInfo");

	Params::BP_SceneManager_C_SetLastPlayerSpawnInfo Parms{};

	Parms.PortalName = PortalName;
	Parms.LastSpawnTransform = std::move(LastSpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.EventManagerStart
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableTick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SceneManager_C::EventManagerStart(bool EnableTick, bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "EventManagerStart");

	Params::BP_SceneManager_C_EventManagerStart Parms{};

	Parms.EnableTick = EnableTick;
	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.EventManagerEnd
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestoreEnableTick                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RestoreVisibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SceneManager_C::EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "EventManagerEnd");

	Params::BP_SceneManager_C_EventManagerEnd Parms{};

	Parms.RestoreEnableTick = RestoreEnableTick;
	Parms.RestoreVisibility = RestoreVisibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.InitializeAjito
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::InitializeAjito()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "InitializeAjito");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.IsLocationAjito
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InAjito                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsLocationAjito(bool* InAjito)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsLocationAjito");

	Params::BP_SceneManager_C_IsLocationAjito Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InAjito != nullptr)
		*InAjito = Parms.InAjito;
}


// Function BP_SceneManager.BP_SceneManager_C.UpdateLiftFloorAtLoad
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::UpdateLiftFloorAtLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "UpdateLiftFloorAtLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.MoveLiftFloorForce
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Floor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::MoveLiftFloorForce(int32 Floor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "MoveLiftFloorForce");

	Params::BP_SceneManager_C_MoveLiftFloorForce Parms{};

	Parms.Floor = Floor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.IsLocationRestaurant
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InAjito                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsLocationRestaurant(bool* InAjito)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsLocationRestaurant");

	Params::BP_SceneManager_C_IsLocationRestaurant Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InAjito != nullptr)
		*InAjito = Parms.InAjito;
}


// Function BP_SceneManager.BP_SceneManager_C.OnEndGameMenu
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SceneManager_C::OnEndGameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "OnEndGameMenu");

	Params::BP_SceneManager_C_OnEndGameMenu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.IsAcceptRequest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsAccept                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsAcceptRequest(bool* IsAccept)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsAcceptRequest");

	Params::BP_SceneManager_C_IsAcceptRequest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAccept != nullptr)
		*IsAccept = Parms.IsAccept;
}


// Function BP_SceneManager.BP_SceneManager_C.StartLoadingChara_Local
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHUDMainGame_C*                   Param_HUDManager                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::StartLoadingChara_Local(class AHUDMainGame_C*& Param_HUDManager, int32 NextLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "StartLoadingChara_Local");

	Params::BP_SceneManager_C_StartLoadingChara_Local Parms{};

	Parms.Param_HUDManager = Param_HUDManager;
	Parms.NextLocation = NextLocation;

	UObject::ProcessEvent(Func, &Parms);

	Param_HUDManager = Parms.Param_HUDManager;
}


// Function BP_SceneManager.BP_SceneManager_C.Debug Set Current Status Internal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneManagerStatus                    Param_CurrentStatus                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::Debug_Set_Current_Status_Internal(E_SceneManagerStatus Param_CurrentStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "Debug Set Current Status Internal");

	Params::BP_SceneManager_C_Debug_Set_Current_Status_Internal Parms{};

	Parms.Param_CurrentStatus = Param_CurrentStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SceneManager.BP_SceneManager_C.GetBeforeLocationName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName ABP_SceneManager_C::GetBeforeLocationName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetBeforeLocationName");

	Params::BP_SceneManager_C_GetBeforeLocationName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.GetCurrentLocationInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetCurrentLocationInfo(int32* LocationId, int32* AreaId, int32* VariationID, int32* PortalID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetCurrentLocationInfo");

	Params::BP_SceneManager_C_GetCurrentLocationInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;

	if (AreaId != nullptr)
		*AreaId = Parms.AreaId;

	if (VariationID != nullptr)
		*VariationID = Parms.VariationID;

	if (PortalID != nullptr)
		*PortalID = Parms.PortalID;
}


// Function BP_SceneManager.BP_SceneManager_C.GetCurrentLocationName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName ABP_SceneManager_C::GetCurrentLocationName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetCurrentLocationName");

	Params::BP_SceneManager_C_GetCurrentLocationName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SceneManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsNeedFrameWait");

	Params::BP_SceneManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.ResetGimmickScenarioFlag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::ResetGimmickScenarioFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "ResetGimmickScenarioFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.Is Coat Moat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Need                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::Is_Coat_Moat(bool* Need)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "Is Coat Moat");

	Params::BP_SceneManager_C_Is_Coat_Moat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Need != nullptr)
		*Need = Parms.Need;
}


// Function BP_SceneManager.BP_SceneManager_C.BeforeAreaName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AreaName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::BeforeAreaName(class FName* AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "BeforeAreaName");

	Params::BP_SceneManager_C_BeforeAreaName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AreaName != nullptr)
		*AreaName = Parms.AreaName;
}


// Function BP_SceneManager.BP_SceneManager_C.IsLastDungeon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    LastDungeon                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsLastDungeon(bool* LastDungeon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsLastDungeon");

	Params::BP_SceneManager_C_IsLastDungeon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LastDungeon != nullptr)
		*LastDungeon = Parms.LastDungeon;
}


// Function BP_SceneManager.BP_SceneManager_C.InitBattleSimulatorRetry
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SceneManager_C::InitBattleSimulatorRetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "InitBattleSimulatorRetry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SceneManager.BP_SceneManager_C.IRequestChangeSceneImmediate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     SceneArgs                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    NoFade                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ELoadingScreenType                      Param_LoadingScreenType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_LoadingScreenParam                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSaveDataLoadFlow                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IRequestChangeSceneImmediate(int32 LocationId, int32 AreaId, int32 VariationID, int32 PortalID, const TArray<class FName>& SceneArgs, const bool NoFade, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam, bool IsSaveDataLoadFlow, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IRequestChangeSceneImmediate");

	Params::BP_SceneManager_C_IRequestChangeSceneImmediate Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;
	Parms.PortalID = PortalID;
	Parms.SceneArgs = std::move(SceneArgs);
	Parms.NoFade = NoFade;
	Parms.Param_LoadingScreenType = Param_LoadingScreenType;
	Parms.Param_LoadingScreenParam = Param_LoadingScreenParam;
	Parms.IsSaveDataLoadFlow = IsSaveDataLoadFlow;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_SceneManager.BP_SceneManager_C.GetCurrentStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneManagerStatus                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_SceneManagerStatus ABP_SceneManager_C::GetCurrentStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetCurrentStatus");

	Params::BP_SceneManager_C_GetCurrentStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.GetCurrentLocationID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SceneManager_C::GetCurrentLocationID(int32* LocationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "GetCurrentLocationID");

	Params::BP_SceneManager_C_GetCurrentLocationID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;
}


// Function BP_SceneManager.BP_SceneManager_C.IsChangeLocation_Internal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SceneManager_C::IsChangeLocation_Internal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsChangeLocation_Internal");

	Params::BP_SceneManager_C_IsChangeLocation_Internal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SceneManager.BP_SceneManager_C.IsInitialized
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Initialized                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SceneManager_C::IsInitialized(bool* Initialized) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsInitialized");

	Params::BP_SceneManager_C_IsInitialized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Initialized != nullptr)
		*Initialized = Parms.Initialized;
}


// Function BP_SceneManager.BP_SceneManager_C.IsChangeLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SceneManager_C::IsChangeLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SceneManager_C", "IsChangeLocation");

	Params::BP_SceneManager_C_IsChangeLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

