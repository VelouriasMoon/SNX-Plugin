#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPPlayerManagerInterface

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "AcceleratorParam_structs.hpp"


namespace SDK::Params
{

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.AddSkill
// 0x0002 (0x0002 - 0x0000)
struct BPPlayerManagerInterface_C_AddSkill final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  Skill_id_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPPlayerManagerInterface_C_AddSkill) == 0x000001, "Wrong alignment on BPPlayerManagerInterface_C_AddSkill");
static_assert(sizeof(BPPlayerManagerInterface_C_AddSkill) == 0x000002, "Wrong size on BPPlayerManagerInterface_C_AddSkill");
static_assert(offsetof(BPPlayerManagerInterface_C_AddSkill, Player_id_in) == 0x000000, "Member 'BPPlayerManagerInterface_C_AddSkill::Player_id_in' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_AddSkill, Skill_id_in) == 0x000001, "Member 'BPPlayerManagerInterface_C_AddSkill::Skill_id_in' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.ResetSkill
// 0x0001 (0x0001 - 0x0000)
struct BPPlayerManagerInterface_C_ResetSkill final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPPlayerManagerInterface_C_ResetSkill) == 0x000001, "Wrong alignment on BPPlayerManagerInterface_C_ResetSkill");
static_assert(sizeof(BPPlayerManagerInterface_C_ResetSkill) == 0x000001, "Wrong size on BPPlayerManagerInterface_C_ResetSkill");
static_assert(offsetof(BPPlayerManagerInterface_C_ResetSkill, Player_id_in) == 0x000000, "Member 'BPPlayerManagerInterface_C_ResetSkill::Player_id_in' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.IPresetAddPartyMember
// 0x000C (0x000C - 0x0000)
struct BPPlayerManagerInterface_C_IPresetAddPartyMember final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCheckBattleMemberMain;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPPlayerManagerInterface_C_IPresetAddPartyMember) == 0x000004, "Wrong alignment on BPPlayerManagerInterface_C_IPresetAddPartyMember");
static_assert(sizeof(BPPlayerManagerInterface_C_IPresetAddPartyMember) == 0x00000C, "Wrong size on BPPlayerManagerInterface_C_IPresetAddPartyMember");
static_assert(offsetof(BPPlayerManagerInterface_C_IPresetAddPartyMember, PresetName) == 0x000000, "Member 'BPPlayerManagerInterface_C_IPresetAddPartyMember::PresetName' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_IPresetAddPartyMember, IsCheckBattleMemberMain) == 0x000008, "Member 'BPPlayerManagerInterface_C_IPresetAddPartyMember::IsCheckBattleMemberMain' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.Set Assist Count
// 0x000C (0x000C - 0x0000)
struct BPPlayerManagerInterface_C_Set_Assist_Count final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BadStatus;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Revive;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPPlayerManagerInterface_C_Set_Assist_Count) == 0x000004, "Wrong alignment on BPPlayerManagerInterface_C_Set_Assist_Count");
static_assert(sizeof(BPPlayerManagerInterface_C_Set_Assist_Count) == 0x00000C, "Wrong size on BPPlayerManagerInterface_C_Set_Assist_Count");
static_assert(offsetof(BPPlayerManagerInterface_C_Set_Assist_Count, HP) == 0x000000, "Member 'BPPlayerManagerInterface_C_Set_Assist_Count::HP' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_Set_Assist_Count, BadStatus) == 0x000004, "Member 'BPPlayerManagerInterface_C_Set_Assist_Count::BadStatus' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_Set_Assist_Count, Revive) == 0x000008, "Member 'BPPlayerManagerInterface_C_Set_Assist_Count::Revive' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetCommandAccelerator
// 0x0010 (0x0010 - 0x0000)
struct BPPlayerManagerInterface_C_GetCommandAccelerator final
{
public:
	struct FAcceleratorParam                      Command;                                           // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnable;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPPlayerManagerInterface_C_GetCommandAccelerator) == 0x000004, "Wrong alignment on BPPlayerManagerInterface_C_GetCommandAccelerator");
static_assert(sizeof(BPPlayerManagerInterface_C_GetCommandAccelerator) == 0x000010, "Wrong size on BPPlayerManagerInterface_C_GetCommandAccelerator");
static_assert(offsetof(BPPlayerManagerInterface_C_GetCommandAccelerator, Command) == 0x000000, "Member 'BPPlayerManagerInterface_C_GetCommandAccelerator::Command' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_GetCommandAccelerator, IsEnable) == 0x00000C, "Member 'BPPlayerManagerInterface_C_GetCommandAccelerator::IsEnable' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetPlayerWeaponActorList
// 0x0020 (0x0020 - 0x0000)
struct BPPlayerManagerInterface_C_GetPlayerWeaponActorList final
{
public:
	class AActor*                                 OwnerPlayer;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGetPlayerWeaponType                          Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         WeaponList;                                        // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPPlayerManagerInterface_C_GetPlayerWeaponActorList) == 0x000008, "Wrong alignment on BPPlayerManagerInterface_C_GetPlayerWeaponActorList");
static_assert(sizeof(BPPlayerManagerInterface_C_GetPlayerWeaponActorList) == 0x000020, "Wrong size on BPPlayerManagerInterface_C_GetPlayerWeaponActorList");
static_assert(offsetof(BPPlayerManagerInterface_C_GetPlayerWeaponActorList, OwnerPlayer) == 0x000000, "Member 'BPPlayerManagerInterface_C_GetPlayerWeaponActorList::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_GetPlayerWeaponActorList, Type) == 0x000008, "Member 'BPPlayerManagerInterface_C_GetPlayerWeaponActorList::Type' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_GetPlayerWeaponActorList, WeaponList) == 0x000010, "Member 'BPPlayerManagerInterface_C_GetPlayerWeaponActorList::WeaponList' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetMainPlayerCostumeID
// 0x0004 (0x0004 - 0x0000)
struct BPPlayerManagerInterface_C_GetMainPlayerCostumeID final
{
public:
	int32                                         CostumeId;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPPlayerManagerInterface_C_GetMainPlayerCostumeID) == 0x000004, "Wrong alignment on BPPlayerManagerInterface_C_GetMainPlayerCostumeID");
static_assert(sizeof(BPPlayerManagerInterface_C_GetMainPlayerCostumeID) == 0x000004, "Wrong size on BPPlayerManagerInterface_C_GetMainPlayerCostumeID");
static_assert(offsetof(BPPlayerManagerInterface_C_GetMainPlayerCostumeID, CostumeId) == 0x000000, "Member 'BPPlayerManagerInterface_C_GetMainPlayerCostumeID::CostumeId' has a wrong offset!");

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetCameraPitchMaxAngle
// 0x0008 (0x0008 - 0x0000)
struct BPPlayerManagerInterface_C_GetCameraPitchMaxAngle final
{
public:
	float                                         MaxLowAngle;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxUpAngle;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPPlayerManagerInterface_C_GetCameraPitchMaxAngle) == 0x000004, "Wrong alignment on BPPlayerManagerInterface_C_GetCameraPitchMaxAngle");
static_assert(sizeof(BPPlayerManagerInterface_C_GetCameraPitchMaxAngle) == 0x000008, "Wrong size on BPPlayerManagerInterface_C_GetCameraPitchMaxAngle");
static_assert(offsetof(BPPlayerManagerInterface_C_GetCameraPitchMaxAngle, MaxLowAngle) == 0x000000, "Member 'BPPlayerManagerInterface_C_GetCameraPitchMaxAngle::MaxLowAngle' has a wrong offset!");
static_assert(offsetof(BPPlayerManagerInterface_C_GetCameraPitchMaxAngle, MaxUpAngle) == 0x000004, "Member 'BPPlayerManagerInterface_C_GetCameraPitchMaxAngle::MaxUpAngle' has a wrong offset!");

}

