#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PsychicObjectBasic

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "PsychicObjectAttackType_structs.hpp"
#include "FSASFireParam_structs.hpp"
#include "PsyObjType_structs.hpp"
#include "CascadeExtensionPlugin_structs.hpp"
#include "FSASCommand_structs.hpp"
#include "Engine_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "FSASPsychicParam_structs.hpp"
#include "FSASElectricParam_structs.hpp"
#include "FSASCopyParam_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "FSASSeeThroughParam_structs.hpp"
#include "FSASMetalParam_structs.hpp"
#include "FSASTelepoParam_structs.hpp"
#include "FSASStealthParam_structs.hpp"


namespace SDK::Params
{

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.ExecuteUbergraph_BP_PsychicObjectBasic
// 0x03E8 (0x03E8 - 0x0000)
struct BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_11;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8849[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_13;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASFireParam                         K2Node_Event_param_10;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_12;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_7;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASElectricParam                     K2Node_Event_param_9;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_11;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_6;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_8;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884C[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_10;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_5;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      K2Node_Event_Parameter_1;                          // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_9;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram_1;                          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_884D[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      K2Node_Event_Parameter;                            // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_8;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_4;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram;                            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASMetalParam                        K2Node_Event_param_7;                              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884E[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_7;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASMetalParam                        K2Node_Event_param_6;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884F[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_6;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_3;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_5;                              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8850[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_5;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_4;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8851[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_4;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_2;                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_3;                              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8852[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_3;                              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_2;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8853[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_2;                              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_1;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param_1;                              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8854[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_1;                              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param;                                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8855[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner;                                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime;                           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_return;                            // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASFireParam                         K2Node_Event_param_12;                             // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8856[0x6];                                     // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_14;                             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASElectricParam                     K2Node_Event_param_13;                             // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8857[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_15;                             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Initialize_return;                        // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugDisplay_return;                      // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8858[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result;                 // 0x0120(0x01C0)(ContainsInstancedReference)
	bool                                          K2Node_Event_isActive;                             // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_On_Hit_Attack_return;                     // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPsychicObjectActiveC_ReturnValue;      // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckRepeatHitAttackActor_bOK;            // 0x02E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8859[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x02E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x02F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_885A[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0328(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FFSASPsychicParam                      K2Node_Event_param_14;                             // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_885B[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_16;                             // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_8;                         // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASPsychicParam                      K2Node_Event_param_15;                             // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_885C[0x3];                                     // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_17;                             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_flag_in;                              // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_is_mesh_only;                         // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_885D[0x6];                                     // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic");
static_assert(sizeof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic) == 0x0003E8, "Wrong size on BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, EntryPoint) == 0x000000, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_11) == 0x000004, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_11' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_13) == 0x000008, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_13' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_10) == 0x000010, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_10' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_12) == 0x000018, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_12' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_7) == 0x000020, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_7' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_9) == 0x000024, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_9' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_11) == 0x000028, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_11' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_6) == 0x000030, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_8) == 0x000034, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_8' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_10) == 0x000038, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_10' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_5) == 0x000040, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Parameter_1) == 0x000044, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Parameter_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_9) == 0x000050, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_9' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_bHologram_1) == 0x000058, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_bHologram_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Parameter) == 0x00005C, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Parameter' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_8) == 0x000068, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_8' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_4) == 0x000070, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_bHologram) == 0x000074, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_bHologram' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_7) == 0x000075, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_7' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_7) == 0x000078, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_7' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_6) == 0x000080, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_6) == 0x000088, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_3) == 0x000090, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_5) == 0x000094, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_5) == 0x000098, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_4) == 0x0000A0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_4) == 0x0000A8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_2) == 0x0000B0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_3) == 0x0000B4, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_3) == 0x0000B8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_2) == 0x0000C0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_2) == 0x0000C8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_1) == 0x0000D0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_1) == 0x0000D4, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_1) == 0x0000D8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param) == 0x0000E0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner) == 0x0000E8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime) == 0x0000F0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_DeltaSeconds) == 0x0000F4, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_Update_return) == 0x0000F8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_Update_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_12) == 0x0000F9, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_12' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_14) == 0x000100, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_14' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_13) == 0x000108, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_13' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_15) == 0x000110, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_15' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_Initialize_return) == 0x000118, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_Initialize_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_DebugDisplay_return) == 0x000119, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_DebugDisplay_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_ComponentBoundEvent_Result) == 0x000120, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_ComponentBoundEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_isActive) == 0x0002E0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_isActive' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_On_Hit_Attack_return) == 0x0002E1, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_On_Hit_Attack_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_SetPsychicObjectActiveC_ReturnValue) == 0x0002E2, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_SetPsychicObjectActiveC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_CheckRepeatHitAttackActor_bOK) == 0x0002E3, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_CheckRepeatHitAttackActor_bOK' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_EndPlayReason) == 0x0002E4, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_MyComp) == 0x0002E8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Other) == 0x0002F0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_OtherComp) == 0x0002F8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_bSelfMoved) == 0x000300, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_HitLocation) == 0x000304, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_HitNormal) == 0x000310, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_NormalImpulse) == 0x00031C, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Hit) == 0x000328, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_14) == 0x0003B0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_14' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_16) == 0x0003B8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_16' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_RemainTime_8) == 0x0003C0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_RemainTime_8' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_param_15) == 0x0003C4, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_param_15' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_Owner_17) == 0x0003C8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_Owner_17' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_flag_in) == 0x0003D0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, K2Node_Event_is_mesh_only) == 0x0003D1, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::K2Node_Event_is_mesh_only' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x0003D8, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_SetVisibilityPsyObj_return) == 0x0003E0, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic, CallFunc_IsValid_ReturnValue) == 0x0003E1, "Member 'BP_PsychicObjectBasic_C_ExecuteUbergraph_BP_PsychicObjectBasic::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicObjectVisibility
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicObjectVisibility final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_mesh_only;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicObjectVisibility) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicObjectVisibility");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicObjectVisibility) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicObjectVisibility");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectVisibility, Flag_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectVisibility::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectVisibility, Is_mesh_only) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectVisibility::Is_mesh_only' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.ReceiveHit
// 0x00C8 (0x00C8 - 0x0000)
struct BP_PsychicObjectBasic_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_885E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PsychicObjectBasic_C_ReceiveHit) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_ReceiveHit");
static_assert(sizeof(BP_PsychicObjectBasic_C_ReceiveHit) == 0x0000C8, "Wrong size on BP_PsychicObjectBasic_C_ReceiveHit");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, MyComp) == 0x000000, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, Other) == 0x000008, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, OtherComp) == 0x000010, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, HitLocation) == 0x00001C, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, HitNormal) == 0x000028, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveHit, Hit) == 0x000040, "Member 'BP_PsychicObjectBasic_C_ReceiveHit::Hit' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_ReceiveEndPlay");
static_assert(sizeof(BP_PsychicObjectBasic_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_ReceiveEndPlay");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PsychicObjectBasic_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicObjectActive
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicObjectActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicObjectActive) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicObjectActive");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicObjectActive) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicObjectActive");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectActive, IsActive) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectActive::IsActive' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature");
static_assert(sizeof(BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature");
static_assert(offsetof(BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'BP_PsychicObjectBasic_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_ReceiveTick");
static_assert(sizeof(BP_PsychicObjectBasic_C_ReceiveTick) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_ReceiveTick");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PsychicObjectBasic_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnStealthEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnStealthEnd final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_885F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnStealthEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnStealthEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnStealthEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnStealthEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnStealthEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnStealthEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnStealthEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnStealthEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnStealthEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnStealthEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnStealthStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnStealthStart final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8860[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnStealthStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnStealthStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnStealthStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnStealthStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnStealthStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnStealthStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnStealthStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnStealthStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnTelepoEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnTelepoEnd final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8861[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnTelepoEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnTelepoEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnTelepoEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnTelepoEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnTelepoEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnTelepoEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnTelepoEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnTelepoEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnTelepoEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnTelepoEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnTelepoStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnTelepoStart final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8862[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnTelepoStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnTelepoStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnTelepoStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnTelepoStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnTelepoStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnTelepoStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnTelepoStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnTelepoStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnSeeThroughEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnSeeThroughEnd final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8863[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnSeeThroughEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnSeeThroughEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnSeeThroughEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnSeeThroughEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnSeeThroughEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnSeeThroughEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnSeeThroughEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnSeeThroughEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnSeeThroughEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnSeeThroughEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnSeeThroughStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnSeeThroughStart final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8864[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnSeeThroughStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnSeeThroughStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnSeeThroughStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnSeeThroughStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnSeeThroughStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnSeeThroughStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnSeeThroughStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnSeeThroughStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnMetalEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnMetalEnd final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8865[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnMetalEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnMetalEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnMetalEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnMetalEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnMetalEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnMetalEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnMetalEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnMetalEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnMetalEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnMetalEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnMetalStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnMetalStart final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8866[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnMetalStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnMetalStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnMetalStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnMetalStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnMetalStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnMetalStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnMetalStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnMetalStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnAcceleratorEnd
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicObjectBasic_C_OnAcceleratorEnd final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8867[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnAcceleratorEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnAcceleratorEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnAcceleratorEnd) == 0x000020, "Wrong size on BP_PsychicObjectBasic_C_OnAcceleratorEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorEnd, Parameter) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorEnd::Parameter' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorEnd, Param_Owner) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorEnd, RemainTime) == 0x000018, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorEnd::RemainTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorEnd, bHologram) == 0x00001C, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorEnd::bHologram' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnAcceleratorStart
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicObjectBasic_C_OnAcceleratorStart final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8868[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnAcceleratorStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnAcceleratorStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnAcceleratorStart) == 0x000020, "Wrong size on BP_PsychicObjectBasic_C_OnAcceleratorStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorStart, Parameter) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorStart::Parameter' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorStart, Param_Owner) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorStart::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnAcceleratorStart, bHologram) == 0x000018, "Member 'BP_PsychicObjectBasic_C_OnAcceleratorStart::bHologram' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnCopyEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnCopyEnd final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8869[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnCopyEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnCopyEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnCopyEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnCopyEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnCopyEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnCopyEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnCopyEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnCopyEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnCopyEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnCopyEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnElectricEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnElectricEnd final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_886A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnElectricEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnElectricEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnElectricEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnElectricEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnElectricEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnElectricEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnElectricEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnElectricEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnElectricEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnElectricEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnFireEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnFireEnd final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_886B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnFireEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnFireEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnFireEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnFireEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnFireEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnFireEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnFireEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnFireEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnFireEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnFireEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnCopyStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnCopyStart final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_886C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnCopyStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnCopyStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnCopyStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnCopyStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnCopyStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnCopyStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnCopyStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnCopyStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnFireStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnFireStart final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_886D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnFireStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnFireStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnFireStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnFireStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnFireStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnFireStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnFireStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnFireStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnElectricStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnElectricStart final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_886E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnElectricStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnElectricStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnElectricStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnElectricStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnElectricStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnElectricStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnElectricStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnElectricStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnPsychicEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_OnPsychicEnd final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_886F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnPsychicEnd) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnPsychicEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnPsychicEnd) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_OnPsychicEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnPsychicEnd, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnPsychicEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnPsychicEnd, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnPsychicEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnPsychicEnd, RemainTime) == 0x000010, "Member 'BP_PsychicObjectBasic_C_OnPsychicEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.OnPsychicStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_OnPsychicStart final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8870[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_OnPsychicStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_OnPsychicStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_OnPsychicStart) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_OnPsychicStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnPsychicStart, Param) == 0x000000, "Member 'BP_PsychicObjectBasic_C_OnPsychicStart::Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_OnPsychicStart, Param_Owner) == 0x000008, "Member 'BP_PsychicObjectBasic_C_OnPsychicStart::Param_Owner' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.UserConstructionScript
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicObjectBasic_C_UserConstructionScript final
{
public:
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0000(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_PsychicObjectBasic_C_UserConstructionScript");
static_assert(sizeof(BP_PsychicObjectBasic_C_UserConstructionScript) == 0x000030, "Wrong size on BP_PsychicObjectBasic_C_UserConstructionScript");
static_assert(offsetof(BP_PsychicObjectBasic_C_UserConstructionScript, CallFunc_GetTransform_ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_UserConstructionScript::CallFunc_GetTransform_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.Initialize
// 0x0038 (0x0038 - 0x0000)
struct BP_PsychicObjectBasic_C_Initialize final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8871[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_LeftChop_ReturnValue;                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_Initialize) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_Initialize");
static_assert(sizeof(BP_PsychicObjectBasic_C_Initialize) == 0x000038, "Wrong size on BP_PsychicObjectBasic_C_Initialize");
static_assert(offsetof(BP_PsychicObjectBasic_C_Initialize, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_Initialize::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_Initialize, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_Initialize::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_Initialize, CallFunc_GetClassDisplayName_ReturnValue) == 0x000010, "Member 'BP_PsychicObjectBasic_C_Initialize::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_Initialize, CallFunc_LeftChop_ReturnValue) == 0x000020, "Member 'BP_PsychicObjectBasic_C_Initialize::CallFunc_LeftChop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_Initialize, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'BP_PsychicObjectBasic_C_Initialize::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.Update
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_Update final
{
public:
	float                                         Delta_second_in;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_Update) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_Update");
static_assert(sizeof(BP_PsychicObjectBasic_C_Update) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_Update");
static_assert(offsetof(BP_PsychicObjectBasic_C_Update, Delta_second_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_Update::Delta_second_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_Update, Return) == 0x000004, "Member 'BP_PsychicObjectBasic_C_Update::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.DebugDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_DebugDisplay final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_DebugDisplay) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_DebugDisplay");
static_assert(sizeof(BP_PsychicObjectBasic_C_DebugDisplay) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_DebugDisplay");
static_assert(offsetof(BP_PsychicObjectBasic_C_DebugDisplay, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_DebugDisplay::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_DebugDisplay, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_DebugDisplay::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.On Hit Attack
// 0x0280 (0x0280 - 0x0000)
struct BP_PsychicObjectBasic_C_On_Hit_Attack final
{
public:
	struct FHCHitResult                           Hit_result_in;                                     // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8872[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ENPC_BarrierBase_C*                 K2Node_DynamicCast_AsBP_ENPC_Barrier_Base;         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8873[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHit_return;                            // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8874[0x6];                                     // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character_1;         // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8875[0x2];                                     // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x01F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PsychicObjectBasic_C_On_Hit_Attack) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_On_Hit_Attack");
static_assert(sizeof(BP_PsychicObjectBasic_C_On_Hit_Attack) == 0x000280, "Wrong size on BP_PsychicObjectBasic_C_On_Hit_Attack");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, Hit_result_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::Hit_result_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, Return) == 0x0001C0, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, K2Node_DynamicCast_AsBP_ENPC_Barrier_Base) == 0x0001C8, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::K2Node_DynamicCast_AsBP_ENPC_Barrier_Base' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, K2Node_DynamicCast_bSuccess) == 0x0001D0, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, K2Node_DynamicCast_AsRSBattle_Character) == 0x0001D8, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, K2Node_DynamicCast_bSuccess_1) == 0x0001E0, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, CallFunc_SetHit_return) == 0x0001E1, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::CallFunc_SetHit_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, K2Node_DynamicCast_AsRSBattle_Character_1) == 0x0001E8, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::K2Node_DynamicCast_AsRSBattle_Character_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, K2Node_DynamicCast_bSuccess_2) == 0x0001F0, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, CallFunc_OnAttackActorHit_Dummy) == 0x0001F1, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_On_Hit_Attack, CallFunc_MakeHitResult_ReturnValue) == 0x0001F4, "Member 'BP_PsychicObjectBasic_C_On_Hit_Attack::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetActivePsyObjOld
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicObjectBasic_C_SetActivePsyObjOld final
{
public:
	bool                                          bActive_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8876[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetActivePsyObj_return;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetActivePsyObjOld) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetActivePsyObjOld");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetActivePsyObjOld) == 0x000030, "Wrong size on BP_PsychicObjectBasic_C_SetActivePsyObjOld");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetActivePsyObjOld, bActive_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetActivePsyObjOld::bActive_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetActivePsyObjOld, Return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetActivePsyObjOld::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetActivePsyObjOld, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetActivePsyObjOld::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetActivePsyObjOld, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_SetActivePsyObjOld::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetActivePsyObjOld, CallFunc_SetActivePsyObj_return) == 0x000028, "Member 'BP_PsychicObjectBasic_C_SetActivePsyObjOld::CallFunc_SetActivePsyObj_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetThrow
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetThrow final
{
public:
	class AActor*                                 Target_in;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_throw_in;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Psychic_combo_in;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanThrow_return;                          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetThrow) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetThrow");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetThrow) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetThrow");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetThrow, Target_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetThrow::Target_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetThrow, Force_throw_in) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetThrow::Force_throw_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetThrow, Psychic_combo_in) == 0x000009, "Member 'BP_PsychicObjectBasic_C_SetThrow::Psychic_combo_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetThrow, Return) == 0x00000A, "Member 'BP_PsychicObjectBasic_C_SetThrow::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetThrow, CallFunc_CanThrow_return) == 0x00000B, "Member 'BP_PsychicObjectBasic_C_SetThrow::CallFunc_CanThrow_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CanPsychicAction
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_CanPsychicAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPsyAction_return;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CanPsychicAction) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_CanPsychicAction");
static_assert(sizeof(BP_PsychicObjectBasic_C_CanPsychicAction) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_CanPsychicAction");
static_assert(offsetof(BP_PsychicObjectBasic_C_CanPsychicAction, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CanPsychicAction::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CanPsychicAction, CallFunc_CanPsyAction_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_CanPsychicAction::CallFunc_CanPsyAction_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicAction
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicAction final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Psychic_combo_in;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPsychicAction_rwmove;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicAction) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicAction");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicAction) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicAction");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicAction, Target_actor_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicAction::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicAction, Psychic_combo_in) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetPsychicAction::Psychic_combo_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicAction, Return) == 0x000009, "Member 'BP_PsychicObjectBasic_C_SetPsychicAction::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicAction, CallFunc_SetPsychicAction_rwmove) == 0x00000A, "Member 'BP_PsychicObjectBasic_C_SetPsychicAction::CallFunc_SetPsychicAction_rwmove' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.RequestPsychicCombo
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_RequestPsychicCombo final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestPsychicCombo_return;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_RequestPsychicCombo) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_RequestPsychicCombo");
static_assert(sizeof(BP_PsychicObjectBasic_C_RequestPsychicCombo) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_RequestPsychicCombo");
static_assert(offsetof(BP_PsychicObjectBasic_C_RequestPsychicCombo, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_RequestPsychicCombo::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_RequestPsychicCombo, CallFunc_RequestPsychicCombo_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_RequestPsychicCombo::CallFunc_RequestPsychicCombo_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetGrab
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_SetGrab final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8877[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grab_index_in;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetGrab) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetGrab");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetGrab) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_SetGrab");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetGrab, Flag_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetGrab::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetGrab, Grab_owner_in) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetGrab::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetGrab, Grab_index_in) == 0x000010, "Member 'BP_PsychicObjectBasic_C_SetGrab::Grab_index_in' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CheckGrabIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_CheckGrabIndex final
{
public:
	int32                                         Grab_index_in;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckGrabIndex_return;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CheckGrabIndex) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_CheckGrabIndex");
static_assert(sizeof(BP_PsychicObjectBasic_C_CheckGrabIndex) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_CheckGrabIndex");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckGrabIndex, Grab_index_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CheckGrabIndex::Grab_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckGrabIndex, Return) == 0x000004, "Member 'BP_PsychicObjectBasic_C_CheckGrabIndex::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckGrabIndex, CallFunc_CheckGrabIndex_return) == 0x000005, "Member 'BP_PsychicObjectBasic_C_CheckGrabIndex::CallFunc_CheckGrabIndex_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.ReloadGrab
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_ReloadGrab final
{
public:
	int32                                         Grab_index_in;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCombo;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_ReloadGrab) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_ReloadGrab");
static_assert(sizeof(BP_PsychicObjectBasic_C_ReloadGrab) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_ReloadGrab");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReloadGrab, Grab_index_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_ReloadGrab::Grab_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ReloadGrab, bCombo) == 0x000004, "Member 'BP_PsychicObjectBasic_C_ReloadGrab::bCombo' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetDestroy
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicObjectBasic_C_SetDestroy final
{
public:
	bool                                          Force_in;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDestroyMain_return;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetDestroy) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetDestroy");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetDestroy) == 0x000003, "Wrong size on BP_PsychicObjectBasic_C_SetDestroy");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDestroy, Force_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetDestroy::Force_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDestroy, Return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetDestroy::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDestroy, CallFunc_SetDestroyMain_return) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetDestroy::CallFunc_SetDestroyMain_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.DestroyPsyObj
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_DestroyPsyObj final
{
public:
	bool                                          CallFunc_SetPsychicObjectActiveC_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_DestroyPsyObj) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_DestroyPsyObj");
static_assert(sizeof(BP_PsychicObjectBasic_C_DestroyPsyObj) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_DestroyPsyObj");
static_assert(offsetof(BP_PsychicObjectBasic_C_DestroyPsyObj, CallFunc_SetPsychicObjectActiveC_ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_DestroyPsyObj::CallFunc_SetPsychicObjectActiveC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_DestroyPsyObj, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_DestroyPsyObj::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetAnimationLength
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_GetAnimationLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationLength_length;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetAnimationLength) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetAnimationLength");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetAnimationLength) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_GetAnimationLength");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAnimationLength, Length) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetAnimationLength::Length' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAnimationLength, CallFunc_GetAnimationLength_length) == 0x000004, "Member 'BP_PsychicObjectBasic_C_GetAnimationLength::CallFunc_GetAnimationLength_length' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.isGrab
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsGrab final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsGrab) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsGrab");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsGrab) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsGrab");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsGrab, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsGrab::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CheckAttackType
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicObjectBasic_C_CheckAttackType final
{
public:
	PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAttackType_return;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CheckAttackType) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_CheckAttackType");
static_assert(sizeof(BP_PsychicObjectBasic_C_CheckAttackType) == 0x000003, "Wrong size on BP_PsychicObjectBasic_C_CheckAttackType");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckAttackType, Attack_type_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CheckAttackType::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckAttackType, Return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_CheckAttackType::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckAttackType, CallFunc_CheckAttackType_return) == 0x000002, "Member 'BP_PsychicObjectBasic_C_CheckAttackType::CallFunc_CheckAttackType_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetAttackCollision
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_GetAttackCollision final
{
public:
	bool                                          Throw_in;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8878[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Attack_collision;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetAttackCollision_attack_collision;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetAttackCollision) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetAttackCollision");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetAttackCollision) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_GetAttackCollision");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackCollision, Throw_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetAttackCollision::Throw_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackCollision, Attack_collision) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetAttackCollision::Attack_collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackCollision, CallFunc_GetAttackCollision_attack_collision) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetAttackCollision::CallFunc_GetAttackCollision_attack_collision' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetVisibilityPsyObj
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_SetVisibilityPsyObj final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Mesh_only;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetVisibilityPsyObj) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetVisibilityPsyObj");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetVisibilityPsyObj) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_SetVisibilityPsyObj");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetVisibilityPsyObj, Flag_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetVisibilityPsyObj::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetVisibilityPsyObj, Mesh_only) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetVisibilityPsyObj::Mesh_only' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetVisibilityPsyObj, Return) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetVisibilityPsyObj::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetVisibilityPsyObj, CallFunc_SetVisibilityPsyObj_return) == 0x000003, "Member 'BP_PsychicObjectBasic_C_SetVisibilityPsyObj::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetCollisionPsyObj
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_SetCollisionPsyObj final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_capsule_in;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCollisionPsyObj_return;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetCollisionPsyObj) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetCollisionPsyObj");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetCollisionPsyObj) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_SetCollisionPsyObj");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetCollisionPsyObj, Flag_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetCollisionPsyObj::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetCollisionPsyObj, Is_capsule_in) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetCollisionPsyObj::Is_capsule_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetCollisionPsyObj, Return) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetCollisionPsyObj::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetCollisionPsyObj, CallFunc_SetCollisionPsyObj_return) == 0x000003, "Member 'BP_PsychicObjectBasic_C_SetCollisionPsyObj::CallFunc_SetCollisionPsyObj_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.isBrainCapture
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsBrainCapture final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isBrainCapture_return;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsBrainCapture) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsBrainCapture");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsBrainCapture) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsBrainCapture");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsBrainCapture, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsBrainCapture::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsBrainCapture, CallFunc_isBrainCapture_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsBrainCapture::CallFunc_isBrainCapture_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsUnique
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsUnique final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsUnique) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsUnique");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsUnique) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsUnique");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsUnique, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsUnique::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CallbackHitEnemy
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_CallbackHitEnemy final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CallbackHitEnemy) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_CallbackHitEnemy");
static_assert(sizeof(BP_PsychicObjectBasic_C_CallbackHitEnemy) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_CallbackHitEnemy");
static_assert(offsetof(BP_PsychicObjectBasic_C_CallbackHitEnemy, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CallbackHitEnemy::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.isPsychicActiveOld
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsPsychicActiveOld final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isPsychicActive_return;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsPsychicActiveOld) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsPsychicActiveOld");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsPsychicActiveOld) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsPsychicActiveOld");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicActiveOld, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsPsychicActiveOld::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicActiveOld, CallFunc_isPsychicActive_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsPsychicActiveOld::CallFunc_isPsychicActive_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetTickEnable
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicObjectBasic_C_SetTickEnable final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isFadeFinish_return;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isFadeProcessing_flag;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetTickEnable) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetTickEnable");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetTickEnable) == 0x000003, "Wrong size on BP_PsychicObjectBasic_C_SetTickEnable");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetTickEnable, Flag_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetTickEnable::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetTickEnable, CallFunc_isFadeFinish_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetTickEnable::CallFunc_isFadeFinish_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetTickEnable, CallFunc_isFadeProcessing_flag) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetTickEnable::CallFunc_isFadeProcessing_flag' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetCameraShakeData
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicObjectBasic_C_GetCameraShakeData final
{
public:
	class UClass*                                 Camera_shake_class;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8879[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetCameraShakeData_CameraShakeType;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraShakeData_CameraShakeScale;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetCameraShakeData) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetCameraShakeData");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetCameraShakeData) == 0x000020, "Wrong size on BP_PsychicObjectBasic_C_GetCameraShakeData");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetCameraShakeData, Camera_shake_class) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetCameraShakeData::Camera_shake_class' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetCameraShakeData, Scale) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetCameraShakeData::Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetCameraShakeData, CallFunc_GetCameraShakeData_CameraShakeType) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetCameraShakeData::CallFunc_GetCameraShakeData_CameraShakeType' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetCameraShakeData, CallFunc_GetCameraShakeData_CameraShakeScale) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetCameraShakeData::CallFunc_GetCameraShakeData_CameraShakeScale' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetAttackDirection
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicObjectBasic_C_GetAttackDirection final
{
public:
	bool                                          Is_swing_direction;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_887A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Attack_direction;                                  // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAttackdirection_return;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_887B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAttackdirection_direction;             // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetAttackDirection) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetAttackDirection");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetAttackDirection) == 0x000020, "Wrong size on BP_PsychicObjectBasic_C_GetAttackDirection");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackDirection, Is_swing_direction) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetAttackDirection::Is_swing_direction' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackDirection, Return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_GetAttackDirection::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackDirection, Attack_direction) == 0x000004, "Member 'BP_PsychicObjectBasic_C_GetAttackDirection::Attack_direction' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackDirection, CallFunc_GetAttackdirection_return) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetAttackDirection::CallFunc_GetAttackdirection_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetAttackDirection, CallFunc_GetAttackdirection_direction) == 0x000014, "Member 'BP_PsychicObjectBasic_C_GetAttackDirection::CallFunc_GetAttackdirection_direction' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CheckPsychicObjectType
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_CheckPsychicObjectType final
{
public:
	EPsyObjType                                   Psychic_object_type_in;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CheckPsychicObjectType) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_CheckPsychicObjectType");
static_assert(sizeof(BP_PsychicObjectBasic_C_CheckPsychicObjectType) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_CheckPsychicObjectType");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectType, Psychic_object_type_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectType::Psychic_object_type_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectType, Return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectType::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetGrabIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_GetGrabIndex final
{
public:
	int32                                         Grab_index;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetGrabIndex) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetGrabIndex");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetGrabIndex) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_GetGrabIndex");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetGrabIndex, Grab_index) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetGrabIndex::Grab_index' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetBrainIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_GetBrainIndex final
{
public:
	int32                                         brain_index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetBrainIndex) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetBrainIndex");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetBrainIndex) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_GetBrainIndex");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetBrainIndex, brain_index) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetBrainIndex::brain_index' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetRequestIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_GetRequestIndex final
{
public:
	int32                                         Request_index;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetRequestIndex) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetRequestIndex");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetRequestIndex) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_GetRequestIndex");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetRequestIndex, Request_index) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetRequestIndex::Request_index' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.isBrainFieldSpawn
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsBrainFieldSpawn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsBrainFieldSpawn) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsBrainFieldSpawn");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsBrainFieldSpawn) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsBrainFieldSpawn");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsBrainFieldSpawn, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsBrainFieldSpawn::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetBrainSwingIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_GetBrainSwingIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetBrainSwingIndex) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetBrainSwingIndex");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetBrainSwingIndex) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_GetBrainSwingIndex");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetBrainSwingIndex, Param_Index) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetBrainSwingIndex::Param_Index' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.Finalize
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_Finalize final
{
public:
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_Finalize) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_Finalize");
static_assert(sizeof(BP_PsychicObjectBasic_C_Finalize) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_Finalize");
static_assert(offsetof(BP_PsychicObjectBasic_C_Finalize, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000000, "Member 'BP_PsychicObjectBasic_C_Finalize::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_Finalize, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_Finalize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CheckRepeatHitAttackActor
// 0x01E0 (0x01E0 - 0x0000)
struct BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bOK;                                               // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_887C[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor");
static_assert(sizeof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor) == 0x0001E0, "Wrong size on BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor, HitResult) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor::HitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor, bOK) == 0x0001C0, "Member 'BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor::bOK' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor, HitActor) == 0x0001C8, "Member 'BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor::HitActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor, CallFunc_Array_Add_ReturnValue) == 0x0001D0, "Member 'BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor, CallFunc_Array_Find_ReturnValue) == 0x0001D4, "Member 'BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001D8, "Member 'BP_PsychicObjectBasic_C_CheckRepeatHitAttackActor::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsTickOn
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsTickOn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTickOn_return;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsTickOn) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsTickOn");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsTickOn) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsTickOn");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsTickOn, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsTickOn::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsTickOn, CallFunc_IsTickOn_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsTickOn::CallFunc_IsTickOn_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetEnemyPsychicObjectActive
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive final
{
public:
	bool                                          Active_in;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_887D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Obj_pos_in;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive, Active_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive::Active_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive, Obj_pos_in) == 0x000004, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectActive::Obj_pos_in' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetEnemyPsychicObjectThrow
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Throw_speed_in;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Homing_speed_in;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow, Target_actor_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow, Throw_speed_in) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow::Throw_speed_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow, Homing_speed_in) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectThrow::Homing_speed_in' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CheckPsychicObjectID
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_CheckPsychicObjectID final
{
public:
	TArray<BattlePrototype::EPsychicObjectID>     Check_list_in;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPsychicObjectID_return;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CheckPsychicObjectID) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_CheckPsychicObjectID");
static_assert(sizeof(BP_PsychicObjectBasic_C_CheckPsychicObjectID) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_CheckPsychicObjectID");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectID, Check_list_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectID::Check_list_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectID, Return) == 0x000010, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectID::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectID, CallFunc_CheckPsychicObjectID_return) == 0x000011, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectID::CallFunc_CheckPsychicObjectID_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectID
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectID final
{
public:
	BattlePrototype::EPsychicObjectID             Psychic_object_id;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectID             CallFunc_GetPsychicObjectID_psychic_object_id;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectID) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectID");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectID) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectID");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectID, Psychic_object_id) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectID::Psychic_object_id' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectID, CallFunc_GetPsychicObjectID_psychic_object_id) == 0x000001, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectID::CallFunc_GetPsychicObjectID_psychic_object_id' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicActiveOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicActiveOld final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicActiveOld) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicActiveOld");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicActiveOld) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicActiveOld");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicActiveOld, Flag_in) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicActiveOld::Flag_in' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectState
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectState final
{
public:
	EPsychicObjectState                           Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_return;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectState) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectState");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectState) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectState");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectState, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectState::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectState, CallFunc_GetPsychicObjectState_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectState::CallFunc_GetPsychicObjectState_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetDebrisEffectBase
// 0x0038 (0x0038 - 0x0000)
struct BP_PsychicObjectBasic_C_GetDebrisEffectBase final
{
public:
	class UMeshComponent*                         TargetMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_887E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideIndex;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_887F[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetDebrisEffectBase) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetDebrisEffectBase");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetDebrisEffectBase) == 0x000038, "Wrong size on BP_PsychicObjectBasic_C_GetDebrisEffectBase");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, TargetMesh) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::TargetMesh' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, Particle) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::Particle' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, OverrideMaterial) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, OverrideIndex) == 0x00001C, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::OverrideIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, CallFunc_GetMaterial_ReturnValue) == 0x000020, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, CallFunc_GetNumMaterials_ReturnValue) == 0x000028, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectBase, CallFunc_SelectInt_ReturnValue) == 0x000030, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectBase::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetDebrisEffectParameter
// 0x0058 (0x0058 - 0x0000)
struct BP_PsychicObjectBasic_C_SetDebrisEffectParameter final
{
public:
	bool                                          InUseDebris;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8880[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         InDebrisParticle;                                  // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          InUseDebrisOverrideMaterial;                       // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8881[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InDebrisOverideMaterialIndex;                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8882[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetDebrisEffectParameter");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter) == 0x000058, "Wrong size on BP_PsychicObjectBasic_C_SetDebrisEffectParameter");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, InUseDebris) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::InUseDebris' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, InDebrisParticle) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::InDebrisParticle' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, InUseDebrisOverrideMaterial) == 0x000030, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::InUseDebrisOverrideMaterial' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, InDebrisOverideMaterialIndex) == 0x000034, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::InDebrisOverideMaterialIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000038, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, CallFunc_LoadSoftObject_ReturnValue) == 0x000040, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, K2Node_DynamicCast_AsParticle_System) == 0x000048, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDebrisEffectParameter, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PsychicObjectBasic_C_SetDebrisEffectParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetDebrisEffect
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_GetDebrisEffect final
{
public:
	EEffectObjectDebrisType                       Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8883[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetDebrisEffect) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetDebrisEffect");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetDebrisEffect) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_GetDebrisEffect");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffect, Type) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffect::Type' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffect, OverrideMaterial) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffect::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffect, ReturnValue) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffect::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetDebrisEffectData
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicObjectBasic_C_GetDebrisEffectData final
{
public:
	class UParticleSystem*                        ParticleTemplate;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8884[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CallFunc_GetDebrisEffectBase_Particle;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetDebrisEffectBase_OverrideMaterial;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDebrisEffectBase_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetDebrisEffectData) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetDebrisEffectData");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetDebrisEffectData) == 0x000030, "Wrong size on BP_PsychicObjectBasic_C_GetDebrisEffectData");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectData, ParticleTemplate) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectData::ParticleTemplate' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectData, OverrideMaterial) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectData::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectData, ReturnValue) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectData::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectData, CallFunc_GetDebrisEffectBase_Particle) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectData::CallFunc_GetDebrisEffectBase_Particle' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectData, CallFunc_GetDebrisEffectBase_OverrideMaterial) == 0x000020, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectData::CallFunc_GetDebrisEffectBase_OverrideMaterial' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDebrisEffectData, CallFunc_GetDebrisEffectBase_ReturnValue) == 0x000028, "Member 'BP_PsychicObjectBasic_C_GetDebrisEffectData::CallFunc_GetDebrisEffectBase_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUniqueObjectPlayerMontage
// 0x0048 (0x0048 - 0x0000)
struct BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage final
{
public:
	EPsychicObjectUniqueMontageIndex              MontageIndex;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLeft;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMaleHero;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8885[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_male;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8886[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LMontage;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8887[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetUniqueObjectPlayerMontage_Montage;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage) == 0x000048, "Wrong size on BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, MontageIndex) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::MontageIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, bLeft) == 0x000001, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::bLeft' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, bMaleHero) == 0x000002, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::bMaleHero' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, L_male) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::L_male' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, LMontage) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::LMontage' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, CallFunc_GetUniqueObjectPlayerMontage_Montage) == 0x000028, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::CallFunc_GetUniqueObjectPlayerMontage_Montage' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, CallFunc_GetPlayerID_self_CastInput) == 0x000030, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, CallFunc_GetPlayerID_ReturnValue) == 0x000040, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectPlayerMontage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUniqueObjectAttackParameter
// 0x02C8 (0x02C8 - 0x0000)
struct BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter final
{
public:
	struct FHCCollisionCommonInfo                 OutCommonInto;                                     // 0x0000(0x0070)(Parm, OutParm)
	struct FHCSkillCommonInfo                     OutSkillInfo;                                      // 0x0070(0x00F0)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbResult;                                          // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8888[0x5];                                     // 0x0163(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionCommonInfo                 CallFunc_GetAttackParameter_CommonInfo;            // 0x0168(0x0070)()
	struct FHCSkillCommonInfo                     CallFunc_GetAttackParameter_SkillInfo;             // 0x01D8(0x00F0)()
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter) == 0x0002C8, "Wrong size on BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, OutCommonInto) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::OutCommonInto' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, OutSkillInfo) == 0x000070, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::OutSkillInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, ReturnValue) == 0x000160, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, LbResult) == 0x000161, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::LbResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, CallFunc_IsValid_ReturnValue) == 0x000162, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, CallFunc_GetAttackParameter_CommonInfo) == 0x000168, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::CallFunc_GetAttackParameter_CommonInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter, CallFunc_GetAttackParameter_SkillInfo) == 0x0001D8, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectAttackParameter::CallFunc_GetAttackParameter_SkillInfo' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetEnemyPsychicObjectInfo
// 0x0160 (0x0160 - 0x0000)
struct BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo final
{
public:
	struct FHCCollisionCommonInfo                 In_common_info;                                    // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FHCSkillCommonInfo                     In_skill_info;                                     // 0x0070(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo) == 0x000160, "Wrong size on BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo, In_common_info) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo::In_common_info' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo, In_skill_info) == 0x000070, "Member 'BP_PsychicObjectBasic_C_SetEnemyPsychicObjectInfo::In_skill_info' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsCopyPsychicObject
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsCopyPsychicObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCopyPsychicObject_return;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsCopyPsychicObject) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsCopyPsychicObject");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsCopyPsychicObject) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsCopyPsychicObject");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsCopyPsychicObject, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsCopyPsychicObject::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsCopyPsychicObject, CallFunc_IsCopyPsychicObject_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsCopyPsychicObject::CallFunc_IsCopyPsychicObject_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.InitializeCopyPsychicObject
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_InitializeCopyPsychicObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_InitializeCopyPsychicObject) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_InitializeCopyPsychicObject");
static_assert(sizeof(BP_PsychicObjectBasic_C_InitializeCopyPsychicObject) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_InitializeCopyPsychicObject");
static_assert(offsetof(BP_PsychicObjectBasic_C_InitializeCopyPsychicObject, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_InitializeCopyPsychicObject::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.RequestEndUniqueObjectState
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_RequestEndUniqueObjectState final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_RequestEndUniqueObjectState) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_RequestEndUniqueObjectState");
static_assert(sizeof(BP_PsychicObjectBasic_C_RequestEndUniqueObjectState) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_RequestEndUniqueObjectState");
static_assert(offsetof(BP_PsychicObjectBasic_C_RequestEndUniqueObjectState, PActor) == 0x000000, "Member 'BP_PsychicObjectBasic_C_RequestEndUniqueObjectState::PActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_RequestEndUniqueObjectState, ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_RequestEndUniqueObjectState::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_RequestEndUniqueObjectState, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_PsychicObjectBasic_C_RequestEndUniqueObjectState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUnqObjCamTargetPos
// 0x001C (0x001C - 0x0000)
struct BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUnqObjCamTargetPos_pos;                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos) == 0x00001C, "Wrong size on BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos, CallFunc_GetUnqObjCamTargetPos_pos) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos::CallFunc_GetUnqObjCamTargetPos_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetUnqObjCamTargetPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetEffectFocus
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_SetEffectFocus final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetEffectFocus) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetEffectFocus");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetEffectFocus) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_SetEffectFocus");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEffectFocus, Flag) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetEffectFocus::Flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetEffectFocus, ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetEffectFocus::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUniqueObjectCameraLookAtPos
// 0x002C (0x002C - 0x0000)
struct BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos final
{
public:
	float                                         LookAtRate;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLookAtPos_pos;                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8889[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUniqueObjectCameraLookAtPos_pos;       // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos) == 0x00002C, "Wrong size on BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos, LookAtRate) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos::LookAtRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos, ReturnValue) == 0x000004, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos, CallFunc_GetCameraLookAtPos_pos) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos::CallFunc_GetCameraLookAtPos_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos, CallFunc_GetUniqueObjectCameraLookAtPos_pos) == 0x000020, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraLookAtPos::CallFunc_GetUniqueObjectCameraLookAtPos_pos' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUnqObjMoveVelocity
// 0x001C (0x001C - 0x0000)
struct BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveVelocity_velocityOut;              // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity) == 0x00001C, "Wrong size on BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity, CallFunc_GetMoveVelocity_velocityOut) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity::CallFunc_GetMoveVelocity_velocityOut' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetUnqObjMoveVelocity::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUniqueObjectCameraOwnerRotation
// 0x001C (0x001C - 0x0000)
struct BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetUniqueObjectCameraOwnerRotation_rotation; // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation) == 0x00001C, "Wrong size on BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation, CallFunc_GetUniqueObjectCameraOwnerRotation_rotation) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation::CallFunc_GetUniqueObjectCameraOwnerRotation_rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCameraOwnerRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectSize
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectSize final
{
public:
	EPsychicObjectSizeType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectSize) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectSize");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectSize) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectSize");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectSize, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectSize::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.PrevInitialize
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicObjectBasic_C_PrevInitialize final
{
public:
	class UClass*                                 CallFunc_LoadSoftClassActor_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Psychic_Object_Destructible_Basic; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSwingTypeC_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_888A[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UniqueObjectComponentBase_C*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_PrevInitialize) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_PrevInitialize");
static_assert(sizeof(BP_PsychicObjectBasic_C_PrevInitialize) == 0x000020, "Wrong size on BP_PsychicObjectBasic_C_PrevInitialize");
static_assert(offsetof(BP_PsychicObjectBasic_C_PrevInitialize, CallFunc_LoadSoftClassActor_ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_PrevInitialize::CallFunc_LoadSoftClassActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_PrevInitialize, K2Node_ClassDynamicCast_AsBP_Psychic_Object_Destructible_Basic) == 0x000008, "Member 'BP_PsychicObjectBasic_C_PrevInitialize::K2Node_ClassDynamicCast_AsBP_Psychic_Object_Destructible_Basic' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_PrevInitialize, K2Node_ClassDynamicCast_bSuccess) == 0x000010, "Member 'BP_PsychicObjectBasic_C_PrevInitialize::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_PrevInitialize, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000011, "Member 'BP_PsychicObjectBasic_C_PrevInitialize::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_PrevInitialize, CallFunc_SetSwingTypeC_ReturnValue) == 0x000012, "Member 'BP_PsychicObjectBasic_C_PrevInitialize::CallFunc_SetSwingTypeC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_PrevInitialize, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_PrevInitialize::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicObjectTickC
// 0x000C (0x000C - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicObjectTickC final
{
public:
	class FName                                   RefName;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flag;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPsychicObjectTickC_ReturnValue;        // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicObjectTickC");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC) == 0x00000C, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicObjectTickC");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC, RefName) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectTickC::RefName' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC, Flag) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectTickC::Flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC, ReturnValue) == 0x000009, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectTickC::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC, L_return) == 0x00000A, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectTickC::L_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectTickC, CallFunc_SetPsychicObjectTickC_ReturnValue) == 0x00000B, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectTickC::CallFunc_SetPsychicObjectTickC_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicObjectActiveC
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicObjectActiveC final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPsychicObjectActiveC_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActivePsyObj_return;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicObjectActiveC) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicObjectActiveC");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicObjectActiveC) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicObjectActiveC");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectActiveC, Flag) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectActiveC::Flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectActiveC, ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectActiveC::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectActiveC, CallFunc_SetPsychicObjectActiveC_ReturnValue) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectActiveC::CallFunc_SetPsychicObjectActiveC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectActiveC, CallFunc_SetActivePsyObj_return) == 0x000003, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectActiveC::CallFunc_SetActivePsyObj_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsEnemyPsychicObjectOccupied
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied final
{
public:
	bool                                          Occupied;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicObjectActiveC_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPsychicObjectOccupiedMain_occupied; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied) == 0x000003, "Wrong size on BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied, Occupied) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied::Occupied' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied, CallFunc_IsPsychicObjectActiveC_ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied::CallFunc_IsPsychicObjectActiveC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied, CallFunc_IsEnemyPsychicObjectOccupiedMain_occupied) == 0x000002, "Member 'BP_PsychicObjectBasic_C_IsEnemyPsychicObjectOccupied::CallFunc_IsEnemyPsychicObjectOccupiedMain_occupied' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetCameraLookAtPos
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_GetCameraLookAtPos final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLookAtPos_pos;                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetCameraLookAtPos) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetCameraLookAtPos");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetCameraLookAtPos) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_GetCameraLookAtPos");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetCameraLookAtPos, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetCameraLookAtPos::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetCameraLookAtPos, CallFunc_GetCameraLookAtPos_pos) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_GetCameraLookAtPos::CallFunc_GetCameraLookAtPos_pos' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPlayerCameraViewTarget
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_888B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget, BlendTime) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget, BlendFunc) == 0x000004, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget::BlendFunc' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget, BlendExp) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget::BlendExp' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget, ReturnValue) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraViewTarget::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPlayerCameraRotation
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPlayerCameraRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPlayerCameraRotation) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetPlayerCameraRotation");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPlayerCameraRotation) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetPlayerCameraRotation");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraRotation, Rot) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraRotation::Rot' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraRotation, ReturnValue) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraRotation::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPlayerCameraMode
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPlayerCameraMode final
{
public:
	EPlayerCameraMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPlayerCameraMode) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetPlayerCameraMode");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPlayerCameraMode) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_SetPlayerCameraMode");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraMode, Mode) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraMode::Mode' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraMode, ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraMode::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPlayerCameraLocation
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPlayerCameraLocation final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPlayerCameraLocation) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetPlayerCameraLocation");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPlayerCameraLocation) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetPlayerCameraLocation");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraLocation, Pos) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraLocation::Pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraLocation, ReturnValue) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraLocation::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPlayerCameraFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView, FOV) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView::FOV' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView, ReturnValue) == 0x000004, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraFieldOfView::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPlayerCameraDirection
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPlayerCameraDirection final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPlayerCameraDirection) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SetPlayerCameraDirection");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPlayerCameraDirection) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetPlayerCameraDirection");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraDirection, Pos) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraDirection::Pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPlayerCameraDirection, ReturnValue) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_SetPlayerCameraDirection::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPlayerCameraRotation
// 0x000C (0x000C - 0x0000)
struct BP_PsychicObjectBasic_C_GetPlayerCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPlayerCameraRotation) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetPlayerCameraRotation");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPlayerCameraRotation) == 0x00000C, "Wrong size on BP_PsychicObjectBasic_C_GetPlayerCameraRotation");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPlayerCameraRotation, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPlayerCameraRotation::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPlayerCameraMode
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPlayerCameraMode final
{
public:
	EPlayerCameraMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPlayerCameraMode) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_GetPlayerCameraMode");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPlayerCameraMode) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_GetPlayerCameraMode");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPlayerCameraMode, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPlayerCameraMode::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPlayerCameraLocation
// 0x000C (0x000C - 0x0000)
struct BP_PsychicObjectBasic_C_GetPlayerCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPlayerCameraLocation) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetPlayerCameraLocation");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPlayerCameraLocation) == 0x00000C, "Wrong size on BP_PsychicObjectBasic_C_GetPlayerCameraLocation");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPlayerCameraLocation, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPlayerCameraLocation::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPlayerCameraFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPlayerCameraFieldOfView::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPlayerCameraDirection
// 0x000C (0x000C - 0x0000)
struct BP_PsychicObjectBasic_C_GetPlayerCameraDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPlayerCameraDirection) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetPlayerCameraDirection");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPlayerCameraDirection) == 0x00000C, "Wrong size on BP_PsychicObjectBasic_C_GetPlayerCameraDirection");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPlayerCameraDirection, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPlayerCameraDirection::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicObjectFellOutOfWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld final
{
public:
	const class UDamageType*                      PDmgType;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld, PDmgType) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld::PDmgType' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld, ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectFellOutOfWorld::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.CheckPsychicObjectStillInWorld
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld final
{
public:
	float                                         KillZ;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPsychicObjectStillInWorld_ReturnValue; // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckStillInWorld_return;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld");
static_assert(sizeof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld, KillZ) == 0x000000, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld::KillZ' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld, ReturnValue) == 0x000004, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld, CallFunc_CheckPsychicObjectStillInWorld_ReturnValue) == 0x000005, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld::CallFunc_CheckPsychicObjectStillInWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld, CallFunc_CheckStillInWorld_return) == 0x000006, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld::CallFunc_CheckStillInWorld_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'BP_PsychicObjectBasic_C_CheckPsychicObjectStillInWorld::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetDuelPoleType
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_SetDuelPoleType final
{
public:
	bool                                          bDuelType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDuelType_return;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetDuelPoleType) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetDuelPoleType");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetDuelPoleType) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_SetDuelPoleType");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDuelPoleType, bDuelType) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetDuelPoleType::bDuelType' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDuelPoleType, ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetDuelPoleType::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDuelPoleType, CallFunc_SetDuelType_return) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetDuelPoleType::CallFunc_SetDuelType_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDuelPoleType, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_PsychicObjectBasic_C_SetDuelPoleType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.ResetRepeatHitAttackActor
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor");
static_assert(sizeof(BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor) == 0x000010, "Wrong size on BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor");
static_assert(offsetof(BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor, HitActor) == 0x000000, "Member 'BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor::HitActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_ResetRepeatHitAttackActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsFloatObjectC
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsFloatObjectC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsFloatObjectC) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsFloatObjectC");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsFloatObjectC) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsFloatObjectC");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsFloatObjectC, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsFloatObjectC::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetDistanceDestroyC
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicObjectBasic_C_SetDistanceDestroyC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDistanceDestroyC_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPsyObjDistanceDestroy_return;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetDistanceDestroyC) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetDistanceDestroyC");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetDistanceDestroyC) == 0x000003, "Wrong size on BP_PsychicObjectBasic_C_SetDistanceDestroyC");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDistanceDestroyC, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetDistanceDestroyC::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDistanceDestroyC, CallFunc_SetDistanceDestroyC_ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetDistanceDestroyC::CallFunc_SetDistanceDestroyC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetDistanceDestroyC, CallFunc_SetPsyObjDistanceDestroy_return) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetDistanceDestroyC::CallFunc_SetPsyObjDistanceDestroy_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SetPsychicObjectEventC
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_SetPsychicObjectEventC final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTick;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bVisibility;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SetPsychicObjectEventC) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_SetPsychicObjectEventC");
static_assert(sizeof(BP_PsychicObjectBasic_C_SetPsychicObjectEventC) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_SetPsychicObjectEventC");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectEventC, bStart) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectEventC::bStart' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectEventC, bTick) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectEventC::bTick' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectEventC, bVisibility) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectEventC::bVisibility' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SetPsychicObjectEventC, ReturnValue) == 0x000003, "Member 'BP_PsychicObjectBasic_C_SetPsychicObjectEventC::ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsPsychicObject
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsPsychicObject final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsPsychicObject) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsPsychicObject");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsPsychicObject) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsPsychicObject");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicObject, bResult) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsPsychicObject::bResult' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsPsychicObjectActive
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsPsychicObjectActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicObjectActiveC_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsPsychicObjectActive) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsPsychicObjectActive");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsPsychicObjectActive) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsPsychicObjectActive");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicObjectActive, IsActive) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsPsychicObjectActive::IsActive' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicObjectActive, CallFunc_IsPsychicObjectActiveC_ReturnValue) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsPsychicObjectActive::CallFunc_IsPsychicObjectActiveC_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectType
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectType final
{
public:
	EPsyObjType                                   Psychic_object_type;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectType) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectType");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectType) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectType");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectType, Psychic_object_type) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectType::Psychic_object_type' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectWeightGaugePos
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos final
{
public:
	struct FVector                                Weight_gauge_pos;                                  // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWeightGaugePos_gauge_pos;              // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos, Weight_gauge_pos) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos::Weight_gauge_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos, CallFunc_GetWeightGaugePos_gauge_pos) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectWeightGaugePos::CallFunc_GetWeightGaugePos_gauge_pos' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectCentrePos
// 0x0028 (0x0028 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos final
{
public:
	struct FVector                                Centre_pos;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos) == 0x000028, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos, Centre_pos) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos::Centre_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectCentrePos::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetPsychicObjectVhsParam
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam final
{
public:
	class UCurveVector*                           ParamCurve;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           ColorCurve;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VhsSeconds;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam, ParamCurve) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam::ParamCurve' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam, ColorCurve) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam::ColorCurve' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam, VhsSeconds) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetPsychicObjectVhsParam::VhsSeconds' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SAS_CommonEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicObjectBasic_C_SAS_CommonEnd final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCancelSASCost;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_888C[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainTime;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SAS_CommonEnd) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_SAS_CommonEnd");
static_assert(sizeof(BP_PsychicObjectBasic_C_SAS_CommonEnd) == 0x000008, "Wrong size on BP_PsychicObjectBasic_C_SAS_CommonEnd");
static_assert(offsetof(BP_PsychicObjectBasic_C_SAS_CommonEnd, SAS_Kind) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SAS_CommonEnd::SAS_Kind' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SAS_CommonEnd, bCancelSASCost) == 0x000001, "Member 'BP_PsychicObjectBasic_C_SAS_CommonEnd::bCancelSASCost' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SAS_CommonEnd, bDummy) == 0x000002, "Member 'BP_PsychicObjectBasic_C_SAS_CommonEnd::bDummy' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SAS_CommonEnd, RemainTime) == 0x000004, "Member 'BP_PsychicObjectBasic_C_SAS_CommonEnd::RemainTime' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.SAS_CommonStart
// 0x0038 (0x0038 - 0x0000)
struct BP_PsychicObjectBasic_C_SAS_CommonStart final
{
public:
	struct FFSASCommand                           SAS_Command;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_SAS_CommonStart) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_SAS_CommonStart");
static_assert(sizeof(BP_PsychicObjectBasic_C_SAS_CommonStart) == 0x000038, "Wrong size on BP_PsychicObjectBasic_C_SAS_CommonStart");
static_assert(offsetof(BP_PsychicObjectBasic_C_SAS_CommonStart, SAS_Command) == 0x000000, "Member 'BP_PsychicObjectBasic_C_SAS_CommonStart::SAS_Command' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_SAS_CommonStart, Dummy) == 0x000030, "Member 'BP_PsychicObjectBasic_C_SAS_CommonStart::Dummy' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.InterceptAttack
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_InterceptAttack final
{
public:
	class ARSBattleCharacter_C*                   Intercepter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   NewTarget;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_InterceptAttack) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_InterceptAttack");
static_assert(sizeof(BP_PsychicObjectBasic_C_InterceptAttack) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_InterceptAttack");
static_assert(offsetof(BP_PsychicObjectBasic_C_InterceptAttack, Intercepter) == 0x000000, "Member 'BP_PsychicObjectBasic_C_InterceptAttack::Intercepter' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_InterceptAttack, NewTarget) == 0x000008, "Member 'BP_PsychicObjectBasic_C_InterceptAttack::NewTarget' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_InterceptAttack, bDummy) == 0x000010, "Member 'BP_PsychicObjectBasic_C_InterceptAttack::bDummy' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.InterceptReserve
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_InterceptReserve final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_InterceptReserve) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_InterceptReserve");
static_assert(sizeof(BP_PsychicObjectBasic_C_InterceptReserve) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_InterceptReserve");
static_assert(offsetof(BP_PsychicObjectBasic_C_InterceptReserve, bDummy) == 0x000000, "Member 'BP_PsychicObjectBasic_C_InterceptReserve::bDummy' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.InterceptCancel
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_InterceptCancel final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_InterceptCancel) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_InterceptCancel");
static_assert(sizeof(BP_PsychicObjectBasic_C_InterceptCancel) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_InterceptCancel");
static_assert(offsetof(BP_PsychicObjectBasic_C_InterceptCancel, bDummy) == 0x000000, "Member 'BP_PsychicObjectBasic_C_InterceptCancel::bDummy' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsInterceptFail
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsInterceptFail final
{
public:
	bool                                          bFail;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInterceptFail_bFail;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsInterceptFail) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsInterceptFail");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsInterceptFail) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsInterceptFail");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsInterceptFail, bFail) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsInterceptFail::bFail' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsInterceptFail, CallFunc_IsInterceptFail_bFail) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsInterceptFail::CallFunc_IsInterceptFail_bFail' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetDamageCameraShakeData
// 0x0028 (0x0028 - 0x0000)
struct BP_PsychicObjectBasic_C_GetDamageCameraShakeData final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_888D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CameraShakeClass;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_888E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetCameraShakeData_CameraShakeType;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraShakeData_CameraShakeScale;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetDamageCameraShakeData");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData) == 0x000028, "Wrong size on BP_PsychicObjectBasic_C_GetDamageCameraShakeData");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData, bEnable) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetDamageCameraShakeData::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData, CameraShakeClass) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetDamageCameraShakeData::CameraShakeClass' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData, Scale) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetDamageCameraShakeData::Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData, CallFunc_GetCameraShakeData_CameraShakeType) == 0x000018, "Member 'BP_PsychicObjectBasic_C_GetDamageCameraShakeData::CallFunc_GetCameraShakeData_CameraShakeType' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDamageCameraShakeData, CallFunc_GetCameraShakeData_CameraShakeScale) == 0x000020, "Member 'BP_PsychicObjectBasic_C_GetDamageCameraShakeData::CallFunc_GetCameraShakeData_CameraShakeScale' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetHitEffectPriorityInterface
// 0x0006 (0x0006 - 0x0000)
struct BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface final
{
public:
	EFHitEffectPriority                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFHitEffectPriority                           Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFHitEffectPriority                           Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueObject_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFHitEffectPriority                           K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface) == 0x000006, "Wrong size on BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface, Temp_bool_Variable) == 0x000001, "Member 'BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface, Temp_byte_Variable) == 0x000002, "Member 'BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface, Temp_byte_Variable_1) == 0x000003, "Member 'BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface, CallFunc_IsUniqueObject_ReturnValue) == 0x000004, "Member 'BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface::CallFunc_IsUniqueObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface, K2Node_Select_Default) == 0x000005, "Member 'BP_PsychicObjectBasic_C_GetHitEffectPriorityInterface::K2Node_Select_Default' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.isPsychicCombo
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsPsychicCombo final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsPsychicCombo) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsPsychicCombo");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsPsychicCombo) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsPsychicCombo");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicCombo, Return) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsPsychicCombo::Return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetTriangleData
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicObjectBasic_C_GetTriangleData final
{
public:
	struct FMeshTriangleData                      Triangle_data;                                     // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetTriangleData) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetTriangleData");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetTriangleData) == 0x000020, "Wrong size on BP_PsychicObjectBasic_C_GetTriangleData");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetTriangleData, Triangle_data) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetTriangleData::Triangle_data' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsPsychicComboAttack
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsPsychicComboAttack final
{
public:
	bool                                          bComboAttack;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isPsychicCombo_return;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsPsychicComboAttack) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsPsychicComboAttack");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsPsychicComboAttack) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsPsychicComboAttack");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicComboAttack, bComboAttack) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsPsychicComboAttack::bComboAttack' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsPsychicComboAttack, CallFunc_isPsychicCombo_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsPsychicComboAttack::CallFunc_isPsychicCombo_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetUniqueObjectCaptureMontage
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBack;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeft;                                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseBlend;                                         // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_888F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           StartMontage;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CancelMontage;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage) == 0x000018, "Wrong size on BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage, PlayerId) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage, bBack) == 0x000001, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage::bBack' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage, bLeft) == 0x000002, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage::bLeft' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage, bUseBlend) == 0x000003, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage::bUseBlend' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage, StartMontage) == 0x000008, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage::StartMontage' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage, CancelMontage) == 0x000010, "Member 'BP_PsychicObjectBasic_C_GetUniqueObjectCaptureMontage::CancelMontage' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsKarenUniqueObject
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsKarenUniqueObject final
{
public:
	bool                                          bKaren;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsKarenUniqueObject) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsKarenUniqueObject");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsKarenUniqueObject) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsKarenUniqueObject");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsKarenUniqueObject, bKaren) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsKarenUniqueObject::bKaren' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsAccelerating
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicObjectBasic_C_IsAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsAccelerating) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsAccelerating");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsAccelerating) == 0x000001, "Wrong size on BP_PsychicObjectBasic_C_IsAccelerating");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsAccelerating, Accelerating) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsAccelerating::Accelerating' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.IsAcceleratorValid
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicObjectBasic_C_IsAcceleratorValid final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAcceleratorValid_return;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicObjectBasic_C_IsAcceleratorValid) == 0x000001, "Wrong alignment on BP_PsychicObjectBasic_C_IsAcceleratorValid");
static_assert(sizeof(BP_PsychicObjectBasic_C_IsAcceleratorValid) == 0x000002, "Wrong size on BP_PsychicObjectBasic_C_IsAcceleratorValid");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsAcceleratorValid, Valid) == 0x000000, "Member 'BP_PsychicObjectBasic_C_IsAcceleratorValid::Valid' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_IsAcceleratorValid, CallFunc_IsAcceleratorValid_return) == 0x000001, "Member 'BP_PsychicObjectBasic_C_IsAcceleratorValid::CallFunc_IsAcceleratorValid_return' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetMeshTriangleData
// 0x0040 (0x0040 - 0x0000)
struct BP_PsychicObjectBasic_C_GetMeshTriangleData final
{
public:
	struct FMeshTriangleData                      ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm)
	struct FMeshTriangleData                      CallFunc_GetTriangleData_triangle_data;            // 0x0020(0x0020)()
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetMeshTriangleData) == 0x000008, "Wrong alignment on BP_PsychicObjectBasic_C_GetMeshTriangleData");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetMeshTriangleData) == 0x000040, "Wrong size on BP_PsychicObjectBasic_C_GetMeshTriangleData");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetMeshTriangleData, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetMeshTriangleData::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetMeshTriangleData, CallFunc_GetTriangleData_triangle_data) == 0x000020, "Member 'BP_PsychicObjectBasic_C_GetMeshTriangleData::CallFunc_GetTriangleData_triangle_data' has a wrong offset!");

// Function BP_PsychicObjectBasic.BP_PsychicObjectBasic_C.GetDataRevision
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicObjectBasic_C_GetDataRevision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicObjectBasic_C_GetDataRevision) == 0x000004, "Wrong alignment on BP_PsychicObjectBasic_C_GetDataRevision");
static_assert(sizeof(BP_PsychicObjectBasic_C_GetDataRevision) == 0x000004, "Wrong size on BP_PsychicObjectBasic_C_GetDataRevision");
static_assert(offsetof(BP_PsychicObjectBasic_C_GetDataRevision, ReturnValue) == 0x000000, "Member 'BP_PsychicObjectBasic_C_GetDataRevision::ReturnValue' has a wrong offset!");

}

