#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SASRecastGauge

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SASRecastGauge.BP_SASRecastGauge_C
// 0x0080 (0x0140 - 0x00C0)
class UBP_SASRecastGauge_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UDataTable*>                     SASDataTable;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<E_SASKind>                             SasKind;                                           // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FGameTimer>                     RecastTimer;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SASSetIndex;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C8[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameTimer>                     DelayTimer;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Param_DelayRecastTime;                             // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C9[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PauseClaimantList;                                 // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Param_RecastRateSASSttack1;                        // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_RecastRateSASSttack2;                        // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_RecastRateSASSttack3;                        // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_RecastRateSASSttack4;                        // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SASRecastGauge(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void BeginRecastGauge(E_SASButton SASButton, float RemainTime, bool bDelayRecast);
	void SetSas(E_SASButton Button, E_SASKind Kind, bool bCheckValidSet);
	void ClearGauge(E_SASButton button_kind_in);
	void UpdateTimer(float Delta, bool* bAllOver);
	void ClearGaugeAll();
	void ChangeSASSet(int32 Param_Index);
	void NextSASSset();
	void GetButtonRight(E_SASButton* Button);
	void GetButtonUp(E_SASButton* Button);
	void GetButtonDown(E_SASButton* Button);
	void AddPercentRecastGauge(E_SASButton ButtonKindIn, float RecastPecent);
	void OnBeginSAS(E_SASButton ButtonKindIn);
	void SetPauseRecastGauge(bool bPause, class FName ClaimantName);
	void GetButtonFromSAS(E_SASKind Kind, bool* bFind, E_SASButton* Button);
	void IsValidSet(int32 SetIndex, bool* bValid);
	void AddPercentRecastGaugeAll(float RecastPecent);
	void AddPercentRecastGaugeFromKind(E_SASKind SasKindIn, float RecastPecent);

	void IsCanUse(E_SASButton Button, bool* Param_IsCanUse) const;
	void GetCurrentGaugeRate(E_SASButton SASButton, float* SASGaugeRate) const;
	void GetSASFromButton(E_SASButton Button, E_SASKind* Kind) const;
	void IsValidSAS(E_SASButton Button, bool* bValid) const;
	void GetButtonLeft(E_SASButton* Button) const;
	void GetSASSetIndex(int32* Param_SASSetIndex) const;
	void GetCurrentGaugeRateFromSAS(E_SASKind Kind, float* SASGaugeRate) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SASRecastGauge_C">();
	}
	static class UBP_SASRecastGauge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SASRecastGauge_C>();
	}
};
static_assert(alignof(UBP_SASRecastGauge_C) == 0x000008, "Wrong alignment on UBP_SASRecastGauge_C");
static_assert(sizeof(UBP_SASRecastGauge_C) == 0x000140, "Wrong size on UBP_SASRecastGauge_C");
static_assert(offsetof(UBP_SASRecastGauge_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_SASRecastGauge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, SASDataTable) == 0x0000C8, "Member 'UBP_SASRecastGauge_C::SASDataTable' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, SasKind) == 0x0000D8, "Member 'UBP_SASRecastGauge_C::SasKind' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, RecastTimer) == 0x0000E8, "Member 'UBP_SASRecastGauge_C::RecastTimer' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, OwnerPlayer) == 0x0000F8, "Member 'UBP_SASRecastGauge_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, SASSetIndex) == 0x000100, "Member 'UBP_SASRecastGauge_C::SASSetIndex' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, DelayTimer) == 0x000108, "Member 'UBP_SASRecastGauge_C::DelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, Param_DelayRecastTime) == 0x000118, "Member 'UBP_SASRecastGauge_C::Param_DelayRecastTime' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, PauseClaimantList) == 0x000120, "Member 'UBP_SASRecastGauge_C::PauseClaimantList' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, Param_RecastRateSASSttack1) == 0x000130, "Member 'UBP_SASRecastGauge_C::Param_RecastRateSASSttack1' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, Param_RecastRateSASSttack2) == 0x000134, "Member 'UBP_SASRecastGauge_C::Param_RecastRateSASSttack2' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, Param_RecastRateSASSttack3) == 0x000138, "Member 'UBP_SASRecastGauge_C::Param_RecastRateSASSttack3' has a wrong offset!");
static_assert(offsetof(UBP_SASRecastGauge_C, Param_RecastRateSASSttack4) == 0x00013C, "Member 'UBP_SASRecastGauge_C::Param_RecastRateSASSttack4' has a wrong offset!");

}

