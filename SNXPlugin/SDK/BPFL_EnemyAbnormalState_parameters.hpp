#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_EnemyAbnormalState

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BPFL_EnemyAbnormalState.BPFL_EnemyAbnormalState_C.SetBadStateMaterial
// 0x0050 (0x0050 - 0x0000)
struct BPFL_EnemyAbnormalState_C_SetBadStateMaterial final
{
public:
	struct FEnemyStateDataCell                    SetState;                                          // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_EnemyAbnormalState_C_SetBadStateMaterial) == 0x000008, "Wrong alignment on BPFL_EnemyAbnormalState_C_SetBadStateMaterial");
static_assert(sizeof(BPFL_EnemyAbnormalState_C_SetBadStateMaterial) == 0x000050, "Wrong size on BPFL_EnemyAbnormalState_C_SetBadStateMaterial");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_SetBadStateMaterial, SetState) == 0x000000, "Member 'BPFL_EnemyAbnormalState_C_SetBadStateMaterial::SetState' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_SetBadStateMaterial, Mesh) == 0x000030, "Member 'BPFL_EnemyAbnormalState_C_SetBadStateMaterial::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_SetBadStateMaterial, __WorldContext) == 0x000038, "Member 'BPFL_EnemyAbnormalState_C_SetBadStateMaterial::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_SetBadStateMaterial, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BPFL_EnemyAbnormalState_C_SetBadStateMaterial::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPFL_EnemyAbnormalState.BPFL_EnemyAbnormalState_C.LoadEnemyBadState
// 0x0130 (0x0130 - 0x0000)
struct BPFL_EnemyAbnormalState_C_LoadEnemyBadState final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EHCSkillAttribute, struct FEnemyStateDataCell> RCells;                                            // 0x0008(0x0050)(Parm, OutParm)
	EHCSkillAttribute                             RowAttribute;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4737[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4738[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RowNames;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TMap<EHCSkillAttribute, struct FEnemyStateDataCell> RCellsTemp;                                        // 0x0078(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4739[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyStateDataCell                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E8(0x0030)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_473A[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0120(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState) == 0x000008, "Wrong alignment on BPFL_EnemyAbnormalState_C_LoadEnemyBadState");
static_assert(sizeof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState) == 0x000130, "Wrong size on BPFL_EnemyAbnormalState_C_LoadEnemyBadState");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, __WorldContext) == 0x000000, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, RCells) == 0x000008, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::RCells' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, RowAttribute) == 0x000058, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::RowAttribute' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, RowName) == 0x00005C, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::RowName' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, RowNames) == 0x000068, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::RowNames' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, RCellsTemp) == 0x000078, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::RCellsTemp' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, Temp_int_Array_Index_Variable) == 0x0000C8, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, Temp_int_Loop_Counter_Variable) == 0x0000CC, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_Array_Get_Item) == 0x0000D4, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_Array_Length_ReturnValue) == 0x0000DC, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E8, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000118, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_LoadEnemyBadState, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000120, "Member 'BPFL_EnemyAbnormalState_C_LoadEnemyBadState::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");

// Function BPFL_EnemyAbnormalState.BPFL_EnemyAbnormalState_C.BadStateMaterialUseSwitch
// 0x0020 (0x0020 - 0x0000)
struct BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_473B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SetParam;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch) == 0x000008, "Wrong alignment on BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch");
static_assert(sizeof(BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch) == 0x000020, "Wrong size on BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch, Use) == 0x000000, "Member 'BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch::Use' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch, Mesh) == 0x000008, "Member 'BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch, __WorldContext) == 0x000010, "Member 'BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch, SetParam) == 0x000018, "Member 'BPFL_EnemyAbnormalState_C_BadStateMaterialUseSwitch::SetParam' has a wrong offset!");

// Function BPFL_EnemyAbnormalState.BPFL_EnemyAbnormalState_C.UpdateBadStateStart
// 0x0038 (0x0038 - 0x0000)
struct BPFL_EnemyAbnormalState_C_UpdateBadStateStart final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            StartCurve;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveTime;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_473C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarting;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_473D[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_473E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart) == 0x000008, "Wrong alignment on BPFL_EnemyAbnormalState_C_UpdateBadStateStart");
static_assert(sizeof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart) == 0x000038, "Wrong size on BPFL_EnemyAbnormalState_C_UpdateBadStateStart");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, Mesh) == 0x000000, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, StartCurve) == 0x000008, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::StartCurve' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CurveTime) == 0x000010, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CurveTime' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, __WorldContext) == 0x000018, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, IsStarting) == 0x000020, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::IsStarting' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CallFunc_GetFloatValue_ReturnValue) == 0x000024, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CallFunc_GetTimeRange_MinTime) == 0x00002C, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CallFunc_GetTimeRange_MaxTime) == 0x000030, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BPFL_EnemyAbnormalState_C_UpdateBadStateStart, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BPFL_EnemyAbnormalState_C_UpdateBadStateStart::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

