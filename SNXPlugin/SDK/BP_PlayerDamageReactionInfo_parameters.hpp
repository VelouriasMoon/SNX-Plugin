#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerDamageReactionInfo

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EEnpcMetamorphosisiFinishType_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.ExecuteUbergraph_BP_PlayerDamageReactionInfo
// 0x0320 (0x0320 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8522[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_CustomEvent_HitResult;                      // 0x0018(0x01C0)(ContainsInstancedReference)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8523[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x01F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8524[0x6];                                     // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8525[0x2];                                     // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCrashResistanceMax_ReturnValue;        // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EntryBrainCrashAccess_Dummy;              // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8526[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0220(0x0068)()
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_IsBrainCrashAccessInterface_self_CastInput; // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessInterface_bAccess;      // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8527[0x5];                                     // 0x029B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8528[0x6];                                     // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  CallFunc_Ch0900_ForceCopyDead_self_CastInput;      // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Ch0900_ForceCopyDead_Dummy;               // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8529[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852A[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  K2Node_DynamicCast_AsBPI_ENpc_Interface;           // 0x02E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EntryBrainCrashAccessEnpc_Return;         // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852B[0x2];                                     // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitStopPlaying_isPlaying;               // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852C[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0308(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo) == 0x000320, "Wrong size on BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, EntryPoint) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, Temp_bool_Has_Been_Initd_Variable) == 0x000006, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, Temp_bool_Has_Been_Initd_Variable_1) == 0x000007, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_CustomEvent_HitResult) == 0x000018, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_CustomEvent_HitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_DynamicCast_AsRSBattle_Player) == 0x0001D8, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetEnemyManager_Manager) == 0x0001E8, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0001F0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_DynamicCast_bSuccess_1) == 0x000200, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsValid_ReturnValue) == 0x000201, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetEnpcComp_ReturnComp) == 0x000208, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsValid_ReturnValue_1) == 0x000210, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsValid_ReturnValue_2) == 0x000211, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetCrashResistanceMax_ReturnValue) == 0x000214, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetCrashResistanceMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_EntryBrainCrashAccess_Dummy) == 0x000218, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_EntryBrainCrashAccess_Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetParameterBasic_ReturnValue) == 0x000220, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsBrainCrashAccessInterface_self_CastInput) == 0x000288, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsBrainCrashAccessInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsBrainCrashAccessInterface_bAccess) == 0x000298, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsBrainCrashAccessInterface_bAccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000299, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsValid_ReturnValue_3) == 0x00029A, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetPlayerID_self_CastInput) == 0x0002A0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetPlayerID_ReturnValue) == 0x0002B0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002B1, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_Ch0900_ForceCopyDead_self_CastInput) == 0x0002B8, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_Ch0900_ForceCopyDead_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_Ch0900_ForceCopyDead_Dummy) == 0x0002C8, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_Ch0900_ForceCopyDead_Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetPlayerManager_PlayerManager) == 0x0002D0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, Temp_bool_IsClosed_Variable_1) == 0x0002D8, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_DynamicCast_AsBPI_ENpc_Interface) == 0x0002E0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_DynamicCast_AsBPI_ENpc_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_DynamicCast_bSuccess_2) == 0x0002F0, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_EntryBrainCrashAccessEnpc_Return) == 0x0002F1, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_EntryBrainCrashAccessEnpc_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_CustomEvent_DeltaSeconds) == 0x0002F4, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetBattleManager_BattleManager) == 0x0002F8, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsValid_ReturnValue_4) == 0x000300, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_IsHitStopPlaying_isPlaying) == 0x000301, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_IsHitStopPlaying_isPlaying' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000304, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, K2Node_CreateDelegate_OutputDelegate) == 0x000308, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000318, "Member 'BP_PlayerDamageReactionInfo_C_ExecuteUbergraph_BP_PlayerDamageReactionInfo::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.EnpcBrainCrashWaitTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick) == 0x000004, "Wrong alignment on BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick) == 0x000004, "Wrong size on BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_EnpcBrainCrashWaitTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.BrainCrashAccess
// 0x01C0 (0x01C0 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_BrainCrashAccess final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_BrainCrashAccess");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess) == 0x0001C0, "Wrong size on BP_PlayerDamageReactionInfo_C_BrainCrashAccess");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess, HitResult) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_BrainCrashAccess::HitResult' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerDamageReactionInfo_C_ReceiveTick");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerDamageReactionInfo_C_ReceiveTick");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.UpdateDamageReaction
// 0x0468 (0x0468 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_UpdateDamageReaction final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	EEnpcMetamorphosisiFinishType                 LFinishType;                                       // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbIgnoreSuperArmor;                                // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbJustDodgeDown;                                   // 0x01C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbTrigger;                                         // 0x01C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCheckWince;                                      // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbForceLaunch;                                     // 0x01C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbNoAddDamage;                                     // 0x01C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbLaunchTrigger;                                   // 0x01C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbForceReactionL;                                  // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbBlowTrigger;                                     // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbForceBlow;                                       // 0x01CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbNoReaction;                                      // 0x01CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         LBadStateFlag;                                     // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbReactionChance;                                  // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852D[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    LEnpcComp;                                         // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbBlow;                                            // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbBadStatusElectric;                               // 0x01E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbFixReaction;                                     // 0x01E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852E[0x1];                                     // 0x01E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRightDot;                                         // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbRight;                                           // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbLeft;                                            // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852F[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraTypeArray;                                   // 0x01F0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LbFront;                                           // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8530[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              LBasic;                                            // 0x0208(0x0068)(Edit, BlueprintVisible)
	struct FCharactersParameterTable              LTable;                                            // 0x0270(0x01F8)(Edit, BlueprintVisible)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_UpdateDamageReaction");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction) == 0x000468, "Wrong size on BP_PlayerDamageReactionInfo_C_UpdateDamageReaction");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, HitResult) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::HitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LFinishType) == 0x0001C0, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LFinishType' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbIgnoreSuperArmor) == 0x0001C1, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbIgnoreSuperArmor' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbJustDodgeDown) == 0x0001C2, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbJustDodgeDown' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbTrigger) == 0x0001C3, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbTrigger' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbCheckWince) == 0x0001C4, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbCheckWince' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbForceLaunch) == 0x0001C5, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbForceLaunch' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbNoAddDamage) == 0x0001C6, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbNoAddDamage' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbLaunchTrigger) == 0x0001C7, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbLaunchTrigger' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbForceReactionL) == 0x0001C8, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbForceReactionL' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbBlowTrigger) == 0x0001C9, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbBlowTrigger' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbForceBlow) == 0x0001CA, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbForceBlow' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbNoReaction) == 0x0001CB, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbNoReaction' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LBadStateFlag) == 0x0001CC, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LBadStateFlag' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbReactionChance) == 0x0001D0, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbReactionChance' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LEnpcComp) == 0x0001D8, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LEnpcComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbBlow) == 0x0001E0, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbBlow' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbBadStatusElectric) == 0x0001E1, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbBadStatusElectric' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbFixReaction) == 0x0001E2, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbFixReaction' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LRightDot) == 0x0001E4, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LRightDot' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbRight) == 0x0001E8, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbRight' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbLeft) == 0x0001E9, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbLeft' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LExtraTypeArray) == 0x0001F0, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LExtraTypeArray' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LbFront) == 0x000200, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LbFront' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LBasic) == 0x000208, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LBasic' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_UpdateDamageReaction, LTable) == 0x000270, "Member 'BP_PlayerDamageReactionInfo_C_UpdateDamageReaction::LTable' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.SetBrainFieldWarning
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning final
{
public:
	bool                                          bTimeUp;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning) == 0x000005, "Wrong size on BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning, bTimeUp) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning::bTimeUp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning, Temp_bool_Variable) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning, Temp_byte_Variable) == 0x000002, "Member 'BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning, Temp_byte_Variable_1) == 0x000003, "Member 'BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning, K2Node_Select_Default) == 0x000004, "Member 'BP_PlayerDamageReactionInfo_C_SetBrainFieldWarning::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.SetDeadDamage
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_SetDeadDamage final
{
public:
	bool                                          bBrainFieldTimeUp;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_SetDeadDamage) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_SetDeadDamage");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_SetDeadDamage) == 0x000005, "Wrong size on BP_PlayerDamageReactionInfo_C_SetDeadDamage");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetDeadDamage, bBrainFieldTimeUp) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_SetDeadDamage::bBrainFieldTimeUp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetDeadDamage, Temp_bool_Variable) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_SetDeadDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetDeadDamage, Temp_byte_Variable) == 0x000002, "Member 'BP_PlayerDamageReactionInfo_C_SetDeadDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetDeadDamage, Temp_byte_Variable_1) == 0x000003, "Member 'BP_PlayerDamageReactionInfo_C_SetDeadDamage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetDeadDamage, K2Node_Select_Default) == 0x000004, "Member 'BP_PlayerDamageReactionInfo_C_SetDeadDamage::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.SetDamageReaction
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_SetDamageReaction final
{
public:
	EPlayerDamageKind                             Param_DamageKind;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_SetDamageReaction) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_SetDamageReaction");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_SetDamageReaction) == 0x000001, "Wrong size on BP_PlayerDamageReactionInfo_C_SetDamageReaction");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_SetDamageReaction, Param_DamageKind) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_SetDamageReaction::Param_DamageKind' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.CheckFinishMetamorphosis_BPImplement
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement final
{
public:
	class UPlayerENpcBaseComponent*               ENpcComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             InDamageKind;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFront;                                            // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EEnpcMetamorphosisiFinishType                 LFinishType;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReactionChanceCPP_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecMetamorphosis_bExec;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishCancelAction_bDummy;                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement) == 0x000018, "Wrong size on BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, ENpcComp) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::ENpcComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, InDamageKind) == 0x000008, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::InDamageKind' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, bFront) == 0x000009, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::bFront' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, ReturnValue) == 0x00000A, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, LFinishType) == 0x00000B, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::LFinishType' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, CallFunc_IsReactionChanceCPP_ReturnValue) == 0x00000D, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::CallFunc_IsReactionChanceCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, CallFunc_IsExecMetamorphosis_bExec) == 0x00000E, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::CallFunc_IsExecMetamorphosis_bExec' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, CallFunc_FinishCancelAction_bDummy) == 0x00000F, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::CallFunc_FinishCancelAction_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerDamageReactionInfo_C_CheckFinishMetamorphosis_BPImplement::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.StartEnemyAddDamageShake_BPImplement
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement final
{
public:
	bool                                          bTriggerAttack;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement) == 0x000003, "Wrong size on BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement, bTriggerAttack) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement::bTriggerAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement, ReturnValue) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_PlayerDamageReactionInfo_C_StartEnemyAddDamageShake_BPImplement::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.BrainCrashAccess_CallFromCPP
// 0x01C8 (0x01C8 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP) == 0x0001C8, "Wrong size on BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP, HitResult) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP::HitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP, ReturnValue) == 0x0001C0, "Member 'BP_PlayerDamageReactionInfo_C_BrainCrashAccess_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.StartEnpcDamageMove_BPImplement
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement final
{
public:
	struct FVector                                Param_DamageDir;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadMove;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8531[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  CallFunc_StartDamageMove_self_CastInput;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartDamageMove_Duumy;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement) == 0x000030, "Wrong size on BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement, Param_DamageDir) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement::Param_DamageDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement, Power) == 0x00000C, "Member 'BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement::Power' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement, DeadMove) == 0x000010, "Member 'BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement::DeadMove' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement, ReturnValue) == 0x000011, "Member 'BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement, CallFunc_StartDamageMove_self_CastInput) == 0x000018, "Member 'BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement::CallFunc_StartDamageMove_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement, CallFunc_StartDamageMove_Duumy) == 0x000028, "Member 'BP_PlayerDamageReactionInfo_C_StartEnpcDamageMove_BPImplement::CallFunc_StartDamageMove_Duumy' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.GetDamageReaction
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_GetDamageReaction final
{
public:
	EPlayerDamageKind                             ReactionType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_GetDamageReaction) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_GetDamageReaction");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_GetDamageReaction) == 0x000001, "Wrong size on BP_PlayerDamageReactionInfo_C_GetDamageReaction");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_GetDamageReaction, ReactionType) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_GetDamageReaction::ReactionType' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.IsExistDamage
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_IsExistDamage final
{
public:
	bool                                          bExist;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_IsExistDamage) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_IsExistDamage");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_IsExistDamage) == 0x000002, "Wrong size on BP_PlayerDamageReactionInfo_C_IsExistDamage");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsExistDamage, bExist) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_IsExistDamage::bExist' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsExistDamage, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_IsExistDamage::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.IsBlow
// 0x001F (0x001F - 0x0000)
struct BP_PlayerDamageReactionInfo_C_IsBlow final
{
public:
	bool                                          bBlow;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_IsBlow) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_IsBlow");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_IsBlow) == 0x00001F, "Wrong size on BP_PlayerDamageReactionInfo_C_IsBlow");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, bBlow) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::bBlow' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_byte_Variable) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable) == 0x000002, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_1) == 0x000003, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_2) == 0x000004, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_3) == 0x000005, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_4) == 0x000006, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_5) == 0x000007, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_6) == 0x000008, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_7) == 0x000009, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_8) == 0x00000A, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_9) == 0x00000B, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_10) == 0x00000C, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_11) == 0x00000D, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_12) == 0x00000E, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_13) == 0x00000F, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_14) == 0x000010, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_15) == 0x000011, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_16) == 0x000012, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_17) == 0x000013, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_18) == 0x000014, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_19) == 0x000015, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_20) == 0x000016, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_21) == 0x000017, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_22) == 0x000018, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_23) == 0x000019, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_24) == 0x00001A, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_25) == 0x00001B, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_26) == 0x00001C, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, Temp_bool_Variable_27) == 0x00001D, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsBlow, K2Node_Select_Default) == 0x00001E, "Member 'BP_PlayerDamageReactionInfo_C_IsBlow::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.IsAddDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_IsAddDamage final
{
public:
	bool                                          Param_bAddDamage;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_IsAddDamage) == 0x000001, "Wrong alignment on BP_PlayerDamageReactionInfo_C_IsAddDamage");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_IsAddDamage) == 0x000001, "Wrong size on BP_PlayerDamageReactionInfo_C_IsAddDamage");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAddDamage, Param_bAddDamage) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_IsAddDamage::Param_bAddDamage' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.CheckReaction
// 0x0228 (0x0228 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_CheckReaction final
{
public:
	bool                                          InReactionChance;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InForceBlow;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InForceReactionL;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InLaunchAttack;                                    // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InForceLaunch;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InJustDodgeDown;                                   // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InCheckWInce;                                      // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8532[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InWinceAccumulation;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InWinceResistance;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InKnockBackAccumulation;                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InKnockBackResistance;                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDownAccumulation;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDownResistance;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InDamageDir;                                       // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InBadStateFlag;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InFloatingAngle;                                   // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InPsychicObjectUniqueReaction;                     // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Damage;                                            // 0x003D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbRight;                                           // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbLeft;                                            // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LRightDot;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbFront;                                           // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8533[0x1];                                     // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_3;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8534[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_3;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_4;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8535[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_4;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8536[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_1;                              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8537[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_2;                              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAerialDamage_bAerial;                   // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_3;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8538[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             Temp_byte_Variable_4;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8539[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_853A[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_853B[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_853C[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput_1;           // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_5;                              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             Temp_byte_Variable_6;                              // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_853D[0x5];                                     // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsDead_self_CastInput;                    // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_853E[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_IsBrainCrashAccessInterface_self_CastInput; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessInterface_bAccess;      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_853F[0x5];                                     // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsBadStatusElectric_self_CastInput;       // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_7;                              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             K2Node_Select_Default;                             // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BitFlagCheck_ReturnValue;                 // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BitFlagCheck_ReturnValue_1;               // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BitFlagCheck_ReturnValue_2;               // 0x014F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput_2;           // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BitFlagCheck_ReturnValue_3;               // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_8;                              // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             K2Node_Select_Default_1;                           // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default_2;                           // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             Temp_byte_Variable_9;                              // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default_3;                           // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BitFlagCheck_ReturnValue_4;               // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8540[0x1];                                     // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             K2Node_Select_Default_4;                           // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             Temp_byte_Variable_10;                             // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default_5;                           // 0x017F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default_6;                           // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8541[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_4;    // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8542[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue_1;        // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_2;           // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_3;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8543[0x3];                                     // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput_3;           // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_3;             // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8544[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_2;           // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_5;    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8545[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_11;                             // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result_2;                  // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8546[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsSpecialDown_self_CastInput;             // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpecialDown_IsSpDown;                   // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8547[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsSpecialDown_SpDownWince;                // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_6;    // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             K2Node_Select_Default_7;                           // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8548[0x5];                                     // 0x01FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_2;            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput_4;           // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_4;             // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_12;                             // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8549[0x1];                                     // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_3;           // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_7;    // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable_13;                             // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             K2Node_Select_Default_8;                           // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             K2Node_Select_Default_9;                           // 0x0225(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_CheckReaction) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_CheckReaction");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_CheckReaction) == 0x000228, "Wrong size on BP_PlayerDamageReactionInfo_C_CheckReaction");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InReactionChance) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InReactionChance' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InForceBlow) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InForceBlow' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InForceReactionL) == 0x000002, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InForceReactionL' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InLaunchAttack) == 0x000003, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InLaunchAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InForceLaunch) == 0x000004, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InForceLaunch' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InJustDodgeDown) == 0x000005, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InJustDodgeDown' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InCheckWInce) == 0x000006, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InCheckWInce' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InWinceAccumulation) == 0x000008, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InWinceAccumulation' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InWinceResistance) == 0x00000C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InWinceResistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InKnockBackAccumulation) == 0x000010, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InKnockBackAccumulation' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InKnockBackResistance) == 0x000014, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InKnockBackResistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InDownAccumulation) == 0x000018, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InDownAccumulation' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InDownResistance) == 0x00001C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InDownResistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InDamageDir) == 0x000020, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InDamageDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InBadStateFlag) == 0x00002C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InBadStateFlag' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InFloatingAngle) == 0x000030, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InFloatingAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, InPsychicObjectUniqueReaction) == 0x00003C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::InPsychicObjectUniqueReaction' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Damage) == 0x00003D, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Damage' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, LbRight) == 0x00003E, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::LbRight' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, LbLeft) == 0x00003F, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::LbLeft' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, LRightDot) == 0x000040, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::LRightDot' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, LbFront) == 0x000044, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::LbFront' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralByte_ReturnValue) == 0x000045, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000046, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000048, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00004C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000050, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralByte_ReturnValue_3) == 0x000051, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000054, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Conv_ByteToInt_ReturnValue_3) == 0x000058, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Conv_ByteToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralByte_ReturnValue_4) == 0x00005C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Conv_ByteToInt_ReturnValue_4) == 0x000060, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Conv_ByteToInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetPlayerPawn_ReturnValue) == 0x000068, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000070, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000071, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsActionStatus_Result) == 0x000072, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable) == 0x000073, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable) == 0x000074, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_1) == 0x000075, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000076, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000077, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000078, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000079, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_1) == 0x00007A, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanOR_ReturnValue) == 0x00007B, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000080, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanOR_ReturnValue_1) == 0x000088, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanOR_ReturnValue_2) == 0x000089, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x00008A, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanAND_ReturnValue) == 0x00008B, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_2) == 0x00008C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsActionStatus_Result_1) == 0x00008D, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_2) == 0x00008E, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00008F, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000090, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000091, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x000092, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsAerialDamage_bAerial) == 0x000093, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsAerialDamage_bAerial' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanOR_ReturnValue_3) == 0x000094, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanOR_ReturnValue_4) == 0x000095, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanOR_ReturnValue_5) == 0x000096, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BooleanAND_ReturnValue_1) == 0x000097, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_3) == 0x000098, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_4) == 0x0000A0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetActorRightVector_ReturnValue) == 0x0000A4, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000B0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000BC, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000C4, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_self_CastInput) == 0x0000C8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000D8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_3) == 0x0000D9, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BreakRotator_Roll) == 0x0000DC, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BreakRotator_Pitch) == 0x0000E0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BreakRotator_Yaw) == 0x0000E4, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000E8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000E9, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_self_CastInput_1) == 0x0000F0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000100, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_5) == 0x000101, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_6) == 0x000102, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsDead_self_CastInput) == 0x000108, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsDead_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsDead_bDead) == 0x000118, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsBrainCrashAccessInterface_self_CastInput) == 0x000120, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsBrainCrashAccessInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsBrainCrashAccessInterface_bAccess) == 0x000130, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsBrainCrashAccessInterface_bAccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Not_PreBool_ReturnValue) == 0x000131, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_4) == 0x000132, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsBadStatusElectric_self_CastInput) == 0x000138, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsBadStatusElectric_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000148, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_7) == 0x000149, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_5) == 0x00014A, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default) == 0x00014B, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BitFlagCheck_ReturnValue) == 0x00014C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BitFlagCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BitFlagCheck_ReturnValue_1) == 0x00014D, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BitFlagCheck_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_6) == 0x00014E, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BitFlagCheck_ReturnValue_2) == 0x00014F, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BitFlagCheck_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_self_CastInput_2) == 0x000150, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x000160, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BitFlagCheck_ReturnValue_3) == 0x000161, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BitFlagCheck_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_8) == 0x000162, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000163, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000164, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetDebuggingManager_Manager) == 0x000168, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsValid_ReturnValue) == 0x000170, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_1) == 0x000171, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_2) == 0x000172, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_9) == 0x000173, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_3) == 0x000174, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000175, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_BitFlagCheck_ReturnValue_4) == 0x000176, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_BitFlagCheck_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x000178, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_7) == 0x00017C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_4) == 0x00017D, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_10) == 0x00017E, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_5) == 0x00017F, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_6) == 0x000180, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000184, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x000188, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_4) == 0x000189, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetActorRightVector_ReturnValue_1) == 0x00018C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetActorRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000198, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Dot_VectorVector_ReturnValue_2) == 0x0001A4, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Dot_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Dot_VectorVector_ReturnValue_3) == 0x0001A8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Dot_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0001AC, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_self_CastInput_3) == 0x0001B0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer_3) == 0x0001C0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralFloat_ReturnValue_2) == 0x0001C4, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_5) == 0x0001C8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetDebuggingManager_Manager_1) == 0x0001D0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsValid_ReturnValue_1) == 0x0001D8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_11) == 0x0001D9, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsActionStatus_Result_2) == 0x0001DA, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsActionStatus_Result_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsSpecialDown_self_CastInput) == 0x0001E0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsSpecialDown_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsSpecialDown_IsSpDown) == 0x0001F0, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsSpecialDown_IsSpDown' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsSpecialDown_SpDownWince) == 0x0001F4, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsSpecialDown_SpDownWince' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_8) == 0x0001F8, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_6) == 0x0001F9, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_7) == 0x0001FA, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GetDebuggingManager_Manager_2) == 0x000200, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GetDebuggingManager_Manager_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_self_CastInput_4) == 0x000208, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer_4) == 0x000218, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_IsValid_ReturnValue_2) == 0x000219, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_12) == 0x00021A, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_MakeLiteralFloat_ReturnValue_3) == 0x00021C, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_MakeLiteralFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_bool_Variable_9) == 0x000220, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_7) == 0x000221, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, Temp_byte_Variable_13) == 0x000222, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_8) == 0x000223, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000224, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_CheckReaction, K2Node_Select_Default_9) == 0x000225, "Member 'BP_PlayerDamageReactionInfo_C_CheckReaction::K2Node_Select_Default_9' has a wrong offset!");

// Function BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C.IsAerialDamage
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerDamageReactionInfo_C_IsAerialDamage final
{
public:
	bool                                          bAerial;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbAerial;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_854A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_854B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0028(0x0040)(ConstParm)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_854C[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDamageReactionInfo_C_IsAerialDamage) == 0x000008, "Wrong alignment on BP_PlayerDamageReactionInfo_C_IsAerialDamage");
static_assert(sizeof(BP_PlayerDamageReactionInfo_C_IsAerialDamage) == 0x000080, "Wrong size on BP_PlayerDamageReactionInfo_C_IsAerialDamage");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, bAerial) == 0x000000, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::bAerial' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, LbAerial) == 0x000001, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::LbAerial' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000010, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_BreakVector_X) == 0x000014, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_BreakVector_Z) == 0x00001C, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_GetAsyncResult_ReturnValue) == 0x000028, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_BreakVector_X_1) == 0x000068, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_BreakVector_Y_1) == 0x00006C, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000074, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000078, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDamageReactionInfo_C_IsAerialDamage, CallFunc_Less_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_PlayerDamageReactionInfo_C_IsAerialDamage::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

}

