#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlefieldManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattlefieldManager.BP_BattlefieldManager_C
// 0x0060 (0x0370 - 0x0310)
class ABP_BattlefieldManager_C final : public ABattlefieldManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class ABP_RushEventTriggerBox_C*> BFGroup_Map;                                       // 0x0320(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_BattlefieldManager(int32 EntryPoint);
	void SetEnableEnemyOutField(bool Enable, int32 BFGroupID);
	void ReceiveBeginPlay();
	void OnHpDownEvent_Event_0(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo);
	void GroupBattleStartDispatcher_Event_0(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void OnDeadDispatcher_Event_0(int32 GroupID, int32 SubGroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void BindEvents();
	void UpdateBattlefield(float DeltaSeconds);
	void UpdateInit(float DeltaSeconds);
	void UpdateStart(float DeltaSeconds);
	void UpdateExec(float DeltaSeconds);
	void UpdateEnd(float DeltaSeconds);
	void OnEnemyDead(int32 GroupID, int32 SubGroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void OnFoundBattlefieldStart(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void OnHpDownEvent(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo);
	void InitializeAtAreaStart();
	void UpdateFenceList();
	bool ResetFenceRandomSeed();
	bool OnLoad_SaveData();
	bool OnSave_SaveData();
	bool InitializeAtStartBattlefield(const struct FBattlefieldInfo& CurrentBFInfo);
	void CheckBattlefieldEventStart(const struct FBattlefieldInfo& BFInfo);
	void CheckBattlefieldEventStartOne(int32 GroupID, int32 SubGroupID, int32 TutorialGroupID, int32 TutorialSubGroupID, class UClass* Param_MakeEventActorClass);
	void ResetAllBFInfoStatus(bool IsLocationChange);
	bool IsAnyFenceEnabled();
	bool IsExistBattlefieldEnemies(int32 BFGroupID, int32 SubGroupID, int32* FirstSubGroup);
	bool IsExistBattlefieldEnemiesStrictly(int32 BFGroupID, int32 SubGroupID);
	void Setting_Enemy_BFGroup();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattlefieldManager_C">();
	}
	static class ABP_BattlefieldManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattlefieldManager_C>();
	}
};
static_assert(alignof(ABP_BattlefieldManager_C) == 0x000008, "Wrong alignment on ABP_BattlefieldManager_C");
static_assert(sizeof(ABP_BattlefieldManager_C) == 0x000370, "Wrong size on ABP_BattlefieldManager_C");
static_assert(offsetof(ABP_BattlefieldManager_C, UberGraphFrame) == 0x000310, "Member 'ABP_BattlefieldManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattlefieldManager_C, DefaultSceneRoot) == 0x000318, "Member 'ABP_BattlefieldManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattlefieldManager_C, BFGroup_Map) == 0x000320, "Member 'ABP_BattlefieldManager_C::BFGroup_Map' has a wrong offset!");

}

