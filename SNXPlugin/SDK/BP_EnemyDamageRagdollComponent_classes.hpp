#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyDamageRagdollComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyDamageRagdollComponent.BP_EnemyDamageRagdollComponent_C
// 0x0060 (0x0120 - 0x00C0)
class UBP_EnemyDamageRagdollComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsRagdoll;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B02[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendWeight;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PhysicsBoneName;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           PhysicsInvalidBoneName;                            // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   ImpulseBoneName;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulsePower;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeScale;                                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   OwnerCharacter;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurveData;                                         // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateTimer;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInvalidRagdoll;                                  // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B03[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PhysicsEnableBoneName;                             // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EnemyDamageRagdollComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void StartRagdoll(const struct FVector& HitDir);
	void UpdateRagdoll(float DeltaSec);
	void EndRagdoll();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyDamageRagdollComponent_C">();
	}
	static class UBP_EnemyDamageRagdollComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyDamageRagdollComponent_C>();
	}
};
static_assert(alignof(UBP_EnemyDamageRagdollComponent_C) == 0x000008, "Wrong alignment on UBP_EnemyDamageRagdollComponent_C");
static_assert(sizeof(UBP_EnemyDamageRagdollComponent_C) == 0x000120, "Wrong size on UBP_EnemyDamageRagdollComponent_C");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_EnemyDamageRagdollComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, IsRagdoll) == 0x0000C8, "Member 'UBP_EnemyDamageRagdollComponent_C::IsRagdoll' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, BlendWeight) == 0x0000CC, "Member 'UBP_EnemyDamageRagdollComponent_C::BlendWeight' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, PhysicsBoneName) == 0x0000D0, "Member 'UBP_EnemyDamageRagdollComponent_C::PhysicsBoneName' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, PhysicsInvalidBoneName) == 0x0000D8, "Member 'UBP_EnemyDamageRagdollComponent_C::PhysicsInvalidBoneName' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, ImpulseBoneName) == 0x0000E8, "Member 'UBP_EnemyDamageRagdollComponent_C::ImpulseBoneName' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, ImpulsePower) == 0x0000F0, "Member 'UBP_EnemyDamageRagdollComponent_C::ImpulsePower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, TimeScale) == 0x0000F4, "Member 'UBP_EnemyDamageRagdollComponent_C::TimeScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, OwnerCharacter) == 0x0000F8, "Member 'UBP_EnemyDamageRagdollComponent_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, CurveData) == 0x000100, "Member 'UBP_EnemyDamageRagdollComponent_C::CurveData' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, UpdateTimer) == 0x000108, "Member 'UBP_EnemyDamageRagdollComponent_C::UpdateTimer' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, IsInvalidRagdoll) == 0x00010C, "Member 'UBP_EnemyDamageRagdollComponent_C::IsInvalidRagdoll' has a wrong offset!");
static_assert(offsetof(UBP_EnemyDamageRagdollComponent_C, PhysicsEnableBoneName) == 0x000110, "Member 'UBP_EnemyDamageRagdollComponent_C::PhysicsEnableBoneName' has a wrong offset!");

}

