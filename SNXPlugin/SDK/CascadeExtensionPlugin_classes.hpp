#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CascadeExtensionPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CascadeExtensionPlugin_structs.hpp"


namespace SDK
{

// Class CascadeExtensionPlugin.AbstractParticleModule
// 0x0030 (0x0060 - 0x0030)
class UAbstractParticleModule : public UParticleModule
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0030(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         StartDelay;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDuration;                                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopAfter;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCD[0x4];                                      // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbstractParticleModule">();
	}
	static class UAbstractParticleModule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbstractParticleModule>();
	}
};
static_assert(alignof(UAbstractParticleModule) == 0x000008, "Wrong alignment on UAbstractParticleModule");
static_assert(sizeof(UAbstractParticleModule) == 0x000060, "Wrong size on UAbstractParticleModule");
static_assert(offsetof(UAbstractParticleModule, RandomSeedInfo) == 0x000030, "Member 'UAbstractParticleModule::RandomSeedInfo' has a wrong offset!");
static_assert(offsetof(UAbstractParticleModule, StartDelay) == 0x000050, "Member 'UAbstractParticleModule::StartDelay' has a wrong offset!");
static_assert(offsetof(UAbstractParticleModule, MaxDuration) == 0x000054, "Member 'UAbstractParticleModule::MaxDuration' has a wrong offset!");
static_assert(offsetof(UAbstractParticleModule, LoopAfter) == 0x000058, "Member 'UAbstractParticleModule::LoopAfter' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleColorTexture
// 0x0050 (0x00B0 - 0x0060)
class UParticleModuleColorTexture final : public UAbstractParticleModule
{
public:
	class UTexture2D*                             ColorIndexTexture;                                 // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UpdateWithTick;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CCE[0x3];                                      // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   MapBounds;                                         // 0x006C(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	ESpaceAxis                                    ParticleAxisToTextureX;                            // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESpaceAxis                                    ParticleAxisToTextureY;                            // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CCF[0x2];                                      // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseTextureAlpha;                                   // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD0[0x1F];                                     // 0x0091(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleColorTexture">();
	}
	static class UParticleModuleColorTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleColorTexture>();
	}
};
static_assert(alignof(UParticleModuleColorTexture) == 0x000008, "Wrong alignment on UParticleModuleColorTexture");
static_assert(sizeof(UParticleModuleColorTexture) == 0x0000B0, "Wrong size on UParticleModuleColorTexture");
static_assert(offsetof(UParticleModuleColorTexture, ColorIndexTexture) == 0x000060, "Member 'UParticleModuleColorTexture::ColorIndexTexture' has a wrong offset!");
static_assert(offsetof(UParticleModuleColorTexture, UpdateWithTick) == 0x000068, "Member 'UParticleModuleColorTexture::UpdateWithTick' has a wrong offset!");
static_assert(offsetof(UParticleModuleColorTexture, MapBounds) == 0x00006C, "Member 'UParticleModuleColorTexture::MapBounds' has a wrong offset!");
static_assert(offsetof(UParticleModuleColorTexture, ParticleAxisToTextureX) == 0x000088, "Member 'UParticleModuleColorTexture::ParticleAxisToTextureX' has a wrong offset!");
static_assert(offsetof(UParticleModuleColorTexture, ParticleAxisToTextureY) == 0x000089, "Member 'UParticleModuleColorTexture::ParticleAxisToTextureY' has a wrong offset!");
static_assert(offsetof(UParticleModuleColorTexture, Intensity) == 0x00008C, "Member 'UParticleModuleColorTexture::Intensity' has a wrong offset!");
static_assert(offsetof(UParticleModuleColorTexture, UseTextureAlpha) == 0x000090, "Member 'UParticleModuleColorTexture::UseTextureAlpha' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleCustomData
// 0x0010 (0x0070 - 0x0060)
class UParticleModuleCustomData final : public UAbstractParticleModule
{
public:
	class FName                                   DataProviderParameterName;                         // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UpdatedSpawnedParticles;                           // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UpdatedTickedParticles;                            // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseLocationFromProvider;                           // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseVelocityFromProvider;                           // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseSizeFromProvider;                               // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseColorFromProvider;                              // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseRotationFromProvider;                           // 0x006E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UseRotationRateFromProvider;                       // 0x006F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleCustomData">();
	}
	static class UParticleModuleCustomData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleCustomData>();
	}
};
static_assert(alignof(UParticleModuleCustomData) == 0x000008, "Wrong alignment on UParticleModuleCustomData");
static_assert(sizeof(UParticleModuleCustomData) == 0x000070, "Wrong size on UParticleModuleCustomData");
static_assert(offsetof(UParticleModuleCustomData, DataProviderParameterName) == 0x000060, "Member 'UParticleModuleCustomData::DataProviderParameterName' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UpdatedSpawnedParticles) == 0x000068, "Member 'UParticleModuleCustomData::UpdatedSpawnedParticles' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UpdatedTickedParticles) == 0x000069, "Member 'UParticleModuleCustomData::UpdatedTickedParticles' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UseLocationFromProvider) == 0x00006A, "Member 'UParticleModuleCustomData::UseLocationFromProvider' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UseVelocityFromProvider) == 0x00006B, "Member 'UParticleModuleCustomData::UseVelocityFromProvider' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UseSizeFromProvider) == 0x00006C, "Member 'UParticleModuleCustomData::UseSizeFromProvider' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UseColorFromProvider) == 0x00006D, "Member 'UParticleModuleCustomData::UseColorFromProvider' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UseRotationFromProvider) == 0x00006E, "Member 'UParticleModuleCustomData::UseRotationFromProvider' has a wrong offset!");
static_assert(offsetof(UParticleModuleCustomData, UseRotationRateFromProvider) == 0x00006F, "Member 'UParticleModuleCustomData::UseRotationRateFromProvider' has a wrong offset!");

// Class CascadeExtensionPlugin.ForcePointDataProvider
// 0x0000 (0x0028 - 0x0028)
class IForcePointDataProvider final : public IInterface
{
public:
	struct FForcePoints GetForcePoints() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ForcePointDataProvider">();
	}
	static class IForcePointDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IForcePointDataProvider>();
	}
};
static_assert(alignof(IForcePointDataProvider) == 0x000008, "Wrong alignment on IForcePointDataProvider");
static_assert(sizeof(IForcePointDataProvider) == 0x000028, "Wrong size on IForcePointDataProvider");

// Class CascadeExtensionPlugin.MeshDataProvider
// 0x0000 (0x0028 - 0x0028)
class IMeshDataProvider final : public IInterface
{
public:
	int32 GetDataRevision() const;
	struct FMeshTriangleData GetMeshTriangleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshDataProvider">();
	}
	static class IMeshDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMeshDataProvider>();
	}
};
static_assert(alignof(IMeshDataProvider) == 0x000008, "Wrong alignment on IMeshDataProvider");
static_assert(sizeof(IMeshDataProvider) == 0x000028, "Wrong size on IMeshDataProvider");

// Class CascadeExtensionPlugin.RSMeshDataProviderFL
// 0x0000 (0x0028 - 0x0028)
class URSMeshDataProviderFL final : public UBlueprintFunctionLibrary
{
public:
	static void GetStaticMeshProviderTriangleData(struct FMeshTriangleData& OutTriangleData, class UStaticMesh* StaticMesh, int32 LodIndex, int32 SectionIndex, const struct FVector& Scale3D);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RSMeshDataProviderFL">();
	}
	static class URSMeshDataProviderFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<URSMeshDataProviderFL>();
	}
};
static_assert(alignof(URSMeshDataProviderFL) == 0x000008, "Wrong alignment on URSMeshDataProviderFL");
static_assert(sizeof(URSMeshDataProviderFL) == 0x000028, "Wrong size on URSMeshDataProviderFL");

// Class CascadeExtensionPlugin.ParticleDataProvider
// 0x0000 (0x0028 - 0x0028)
class IParticleDataProvider final : public IInterface
{
public:
	struct FParticleProperties SpawnParticle(const struct FParticleProperties& CurrentParticleProperties) const;
	struct FParticleProperties UpdateParticle(const struct FParticleProperties& CurrentParticleProperties) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleDataProvider">();
	}
	static class IParticleDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IParticleDataProvider>();
	}
};
static_assert(alignof(IParticleDataProvider) == 0x000008, "Wrong alignment on IParticleDataProvider");
static_assert(sizeof(IParticleDataProvider) == 0x000028, "Wrong size on IParticleDataProvider");

// Class CascadeExtensionPlugin.ParticleDecalComponent
// 0x0020 (0x0260 - 0x0240)
class UParticleDecalComponent final : public UDecalComponent
{
public:
	int32                                         ModuleID;                                          // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeftUntilDestruction;                          // 0x0244(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseScale;                                         // 0x0248(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD2[0xC];                                      // 0x0254(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleDecalComponent">();
	}
	static class UParticleDecalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleDecalComponent>();
	}
};
static_assert(alignof(UParticleDecalComponent) == 0x000010, "Wrong alignment on UParticleDecalComponent");
static_assert(sizeof(UParticleDecalComponent) == 0x000260, "Wrong size on UParticleDecalComponent");
static_assert(offsetof(UParticleDecalComponent, ModuleID) == 0x000240, "Member 'UParticleDecalComponent::ModuleID' has a wrong offset!");
static_assert(offsetof(UParticleDecalComponent, TimeLeftUntilDestruction) == 0x000244, "Member 'UParticleDecalComponent::TimeLeftUntilDestruction' has a wrong offset!");
static_assert(offsetof(UParticleDecalComponent, BaseScale) == 0x000248, "Member 'UParticleDecalComponent::BaseScale' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleDecalComponent
// 0x00C0 (0x0120 - 0x0060)
class UParticleModuleDecalComponent final : public UAbstractParticleModule
{
public:
	TArray<class UMaterialInterface*>             DecalMaterials;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRawDistributionVector                 DecalScale;                                        // 0x0070(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          ScaleWithParticleSize;                             // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD3[0x7];                                      // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 DecalRotation;                                     // 0x00C0(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          RotateToParticleVelocity;                          // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD4[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortOrder;                                         // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          OptimizeDecalComponentUsage;                       // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD5[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialColorParameter;                            // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD6[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleDecalComponent">();
	}
	static class UParticleModuleDecalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleDecalComponent>();
	}
};
static_assert(alignof(UParticleModuleDecalComponent) == 0x000008, "Wrong alignment on UParticleModuleDecalComponent");
static_assert(sizeof(UParticleModuleDecalComponent) == 0x000120, "Wrong size on UParticleModuleDecalComponent");
static_assert(offsetof(UParticleModuleDecalComponent, DecalMaterials) == 0x000060, "Member 'UParticleModuleDecalComponent::DecalMaterials' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, DecalScale) == 0x000070, "Member 'UParticleModuleDecalComponent::DecalScale' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, ScaleWithParticleSize) == 0x0000B8, "Member 'UParticleModuleDecalComponent::ScaleWithParticleSize' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, DecalRotation) == 0x0000C0, "Member 'UParticleModuleDecalComponent::DecalRotation' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, RotateToParticleVelocity) == 0x000108, "Member 'UParticleModuleDecalComponent::RotateToParticleVelocity' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, SortOrder) == 0x00010C, "Member 'UParticleModuleDecalComponent::SortOrder' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, OptimizeDecalComponentUsage) == 0x000110, "Member 'UParticleModuleDecalComponent::OptimizeDecalComponentUsage' has a wrong offset!");
static_assert(offsetof(UParticleModuleDecalComponent, MaterialColorParameter) == 0x000114, "Member 'UParticleModuleDecalComponent::MaterialColorParameter' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleForcePoints
// 0x0028 (0x0088 - 0x0060)
class UParticleModuleForcePoints final : public UAbstractParticleModule
{
public:
	float                                         Intensity;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD7[0x4];                                      // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Points;                                            // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDistanceWeight                               SeparationDistanceWeight;                          // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD8[0x3];                                      // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceScale;                                     // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DynamicForcePointProviderName;                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleForcePoints">();
	}
	static class UParticleModuleForcePoints* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleForcePoints>();
	}
};
static_assert(alignof(UParticleModuleForcePoints) == 0x000008, "Wrong alignment on UParticleModuleForcePoints");
static_assert(sizeof(UParticleModuleForcePoints) == 0x000088, "Wrong size on UParticleModuleForcePoints");
static_assert(offsetof(UParticleModuleForcePoints, Intensity) == 0x000060, "Member 'UParticleModuleForcePoints::Intensity' has a wrong offset!");
static_assert(offsetof(UParticleModuleForcePoints, Points) == 0x000068, "Member 'UParticleModuleForcePoints::Points' has a wrong offset!");
static_assert(offsetof(UParticleModuleForcePoints, SeparationDistanceWeight) == 0x000078, "Member 'UParticleModuleForcePoints::SeparationDistanceWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleForcePoints, DistanceScale) == 0x00007C, "Member 'UParticleModuleForcePoints::DistanceScale' has a wrong offset!");
static_assert(offsetof(UParticleModuleForcePoints, DynamicForcePointProviderName) == 0x000080, "Member 'UParticleModuleForcePoints::DynamicForcePointProviderName' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleLocationDonut
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleLocationDonut final : public UAbstractParticleModule
{
public:
	struct FVector                                Center;                                            // 0x0060(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinRadius;                                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRadius;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SurfaceOnly;                                       // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsFlat;                                            // 0x0075(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD9[0x2];                                      // 0x0076(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleLocationDonut">();
	}
	static class UParticleModuleLocationDonut* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationDonut>();
	}
};
static_assert(alignof(UParticleModuleLocationDonut) == 0x000008, "Wrong alignment on UParticleModuleLocationDonut");
static_assert(sizeof(UParticleModuleLocationDonut) == 0x000078, "Wrong size on UParticleModuleLocationDonut");
static_assert(offsetof(UParticleModuleLocationDonut, Center) == 0x000060, "Member 'UParticleModuleLocationDonut::Center' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationDonut, MinRadius) == 0x00006C, "Member 'UParticleModuleLocationDonut::MinRadius' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationDonut, MaxRadius) == 0x000070, "Member 'UParticleModuleLocationDonut::MaxRadius' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationDonut, SurfaceOnly) == 0x000074, "Member 'UParticleModuleLocationDonut::SurfaceOnly' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationDonut, IsFlat) == 0x000075, "Member 'UParticleModuleLocationDonut::IsFlat' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleLocationHeightmap
// 0x0048 (0x00A8 - 0x0060)
class UParticleModuleLocationHeightmap final : public UAbstractParticleModule
{
public:
	class UTexture2D*                             HeightmapTexture;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UpdateWithTick;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SmoothUpdate;                                      // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CDA[0x2];                                      // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   MapBounds;                                         // 0x006C(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         Intensity;                                         // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CDB[0x1C];                                     // 0x008C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleLocationHeightmap">();
	}
	static class UParticleModuleLocationHeightmap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationHeightmap>();
	}
};
static_assert(alignof(UParticleModuleLocationHeightmap) == 0x000008, "Wrong alignment on UParticleModuleLocationHeightmap");
static_assert(sizeof(UParticleModuleLocationHeightmap) == 0x0000A8, "Wrong size on UParticleModuleLocationHeightmap");
static_assert(offsetof(UParticleModuleLocationHeightmap, HeightmapTexture) == 0x000060, "Member 'UParticleModuleLocationHeightmap::HeightmapTexture' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationHeightmap, UpdateWithTick) == 0x000068, "Member 'UParticleModuleLocationHeightmap::UpdateWithTick' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationHeightmap, SmoothUpdate) == 0x000069, "Member 'UParticleModuleLocationHeightmap::SmoothUpdate' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationHeightmap, MapBounds) == 0x00006C, "Member 'UParticleModuleLocationHeightmap::MapBounds' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationHeightmap, Intensity) == 0x000088, "Member 'UParticleModuleLocationHeightmap::Intensity' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleLocationJiggle
// 0x0048 (0x00A8 - 0x0060)
class UParticleModuleLocationJiggle final : public UAbstractParticleModule
{
public:
	struct FRawDistributionVector                 Intensity;                                         // 0x0060(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleLocationJiggle">();
	}
	static class UParticleModuleLocationJiggle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationJiggle>();
	}
};
static_assert(alignof(UParticleModuleLocationJiggle) == 0x000008, "Wrong alignment on UParticleModuleLocationJiggle");
static_assert(sizeof(UParticleModuleLocationJiggle) == 0x0000A8, "Wrong size on UParticleModuleLocationJiggle");
static_assert(offsetof(UParticleModuleLocationJiggle, Intensity) == 0x000060, "Member 'UParticleModuleLocationJiggle::Intensity' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleLocationMesh
// 0x0110 (0x0170 - 0x0060)
class UParticleModuleLocationMesh final : public UAbstractParticleModule
{
public:
	class UStaticMesh*                            SurfaceMesh;                                       // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DynamicMeshParameterName;                          // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             MeshTransform;                                     // 0x0070(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          EqualTriangeWeight;                                // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CDC[0x7];                                      // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  VelocityScale;                                     // 0x00A8(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CDD[0x98];                                     // 0x00D8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCachedActorDestroyed(class AActor* DestroyedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleLocationMesh">();
	}
	static class UParticleModuleLocationMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationMesh>();
	}
};
static_assert(alignof(UParticleModuleLocationMesh) == 0x000010, "Wrong alignment on UParticleModuleLocationMesh");
static_assert(sizeof(UParticleModuleLocationMesh) == 0x000170, "Wrong size on UParticleModuleLocationMesh");
static_assert(offsetof(UParticleModuleLocationMesh, SurfaceMesh) == 0x000060, "Member 'UParticleModuleLocationMesh::SurfaceMesh' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationMesh, DynamicMeshParameterName) == 0x000068, "Member 'UParticleModuleLocationMesh::DynamicMeshParameterName' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationMesh, MeshTransform) == 0x000070, "Member 'UParticleModuleLocationMesh::MeshTransform' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationMesh, EqualTriangeWeight) == 0x0000A0, "Member 'UParticleModuleLocationMesh::EqualTriangeWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationMesh, VelocityScale) == 0x0000A8, "Member 'UParticleModuleLocationMesh::VelocityScale' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleLocationSpiral
// 0x00C0 (0x0120 - 0x0060)
class UParticleModuleLocationSpiral final : public UAbstractParticleModule
{
public:
	struct FRawDistributionVector                 StartLocation;                                     // 0x0060(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FRawDistributionFloat                  Radius;                                            // 0x00A8(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         DeltaAngle;                                        // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EllipseA;                                          // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EllipseB;                                          // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CDE[0x4];                                      // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  DiscHeight;                                        // 0x00E8(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         FalloffFactor;                                     // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CDF[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleLocationSpiral">();
	}
	static class UParticleModuleLocationSpiral* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationSpiral>();
	}
};
static_assert(alignof(UParticleModuleLocationSpiral) == 0x000008, "Wrong alignment on UParticleModuleLocationSpiral");
static_assert(sizeof(UParticleModuleLocationSpiral) == 0x000120, "Wrong size on UParticleModuleLocationSpiral");
static_assert(offsetof(UParticleModuleLocationSpiral, StartLocation) == 0x000060, "Member 'UParticleModuleLocationSpiral::StartLocation' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationSpiral, Radius) == 0x0000A8, "Member 'UParticleModuleLocationSpiral::Radius' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationSpiral, DeltaAngle) == 0x0000D8, "Member 'UParticleModuleLocationSpiral::DeltaAngle' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationSpiral, EllipseA) == 0x0000DC, "Member 'UParticleModuleLocationSpiral::EllipseA' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationSpiral, EllipseB) == 0x0000E0, "Member 'UParticleModuleLocationSpiral::EllipseB' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationSpiral, DiscHeight) == 0x0000E8, "Member 'UParticleModuleLocationSpiral::DiscHeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleLocationSpiral, FalloffFactor) == 0x000118, "Member 'UParticleModuleLocationSpiral::FalloffFactor' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleSizeBySpeedOverTime
// 0x0068 (0x00C8 - 0x0060)
class UParticleModuleSizeBySpeedOverTime final : public UAbstractParticleModule
{
public:
	struct FRawDistributionVector                 Size;                                              // 0x0060(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          InvertSpeed;                                       // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE0[0x3];                                      // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MaxSize;                                           // 0x00AC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                MinSize;                                           // 0x00B8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE1[0x4];                                      // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleSizeBySpeedOverTime">();
	}
	static class UParticleModuleSizeBySpeedOverTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSizeBySpeedOverTime>();
	}
};
static_assert(alignof(UParticleModuleSizeBySpeedOverTime) == 0x000008, "Wrong alignment on UParticleModuleSizeBySpeedOverTime");
static_assert(sizeof(UParticleModuleSizeBySpeedOverTime) == 0x0000C8, "Wrong size on UParticleModuleSizeBySpeedOverTime");
static_assert(offsetof(UParticleModuleSizeBySpeedOverTime, Size) == 0x000060, "Member 'UParticleModuleSizeBySpeedOverTime::Size' has a wrong offset!");
static_assert(offsetof(UParticleModuleSizeBySpeedOverTime, InvertSpeed) == 0x0000A8, "Member 'UParticleModuleSizeBySpeedOverTime::InvertSpeed' has a wrong offset!");
static_assert(offsetof(UParticleModuleSizeBySpeedOverTime, MaxSize) == 0x0000AC, "Member 'UParticleModuleSizeBySpeedOverTime::MaxSize' has a wrong offset!");
static_assert(offsetof(UParticleModuleSizeBySpeedOverTime, MinSize) == 0x0000B8, "Member 'UParticleModuleSizeBySpeedOverTime::MinSize' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleSortOrder
// 0x0008 (0x0068 - 0x0060)
class UParticleModuleSortOrder final : public UAbstractParticleModule
{
public:
	int32                                         SortOrder;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE2[0x4];                                      // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleSortOrder">();
	}
	static class UParticleModuleSortOrder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSortOrder>();
	}
};
static_assert(alignof(UParticleModuleSortOrder) == 0x000008, "Wrong alignment on UParticleModuleSortOrder");
static_assert(sizeof(UParticleModuleSortOrder) == 0x000068, "Wrong size on UParticleModuleSortOrder");
static_assert(offsetof(UParticleModuleSortOrder, SortOrder) == 0x000060, "Member 'UParticleModuleSortOrder::SortOrder' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleSwarmMovement
// 0x0040 (0x00A0 - 0x0060)
class UParticleModuleSwarmMovement final : public UAbstractParticleModule
{
public:
	float                                         PerceptionRadius;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAcceleration;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxVelocity;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeparationWeight;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AlignmentWeight;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CohesionWeight;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlindspotAngleDeg;                                 // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDistanceWeight                               SeparationDistanceWeight;                          // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE3[0x3];                                      // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        SteeringTargets;                                   // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SteeringWeight;                                    // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDistanceWeight                               SteeringTargetDistanceWeight;                      // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE4[0x3];                                      // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DynamicSteeringPointProviderName;                  // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleSwarmMovement">();
	}
	static class UParticleModuleSwarmMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSwarmMovement>();
	}
};
static_assert(alignof(UParticleModuleSwarmMovement) == 0x000008, "Wrong alignment on UParticleModuleSwarmMovement");
static_assert(sizeof(UParticleModuleSwarmMovement) == 0x0000A0, "Wrong size on UParticleModuleSwarmMovement");
static_assert(offsetof(UParticleModuleSwarmMovement, PerceptionRadius) == 0x000060, "Member 'UParticleModuleSwarmMovement::PerceptionRadius' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, MaxAcceleration) == 0x000064, "Member 'UParticleModuleSwarmMovement::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, MaxVelocity) == 0x000068, "Member 'UParticleModuleSwarmMovement::MaxVelocity' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, SeparationWeight) == 0x00006C, "Member 'UParticleModuleSwarmMovement::SeparationWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, AlignmentWeight) == 0x000070, "Member 'UParticleModuleSwarmMovement::AlignmentWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, CohesionWeight) == 0x000074, "Member 'UParticleModuleSwarmMovement::CohesionWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, BlindspotAngleDeg) == 0x000078, "Member 'UParticleModuleSwarmMovement::BlindspotAngleDeg' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, SeparationDistanceWeight) == 0x00007C, "Member 'UParticleModuleSwarmMovement::SeparationDistanceWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, SteeringTargets) == 0x000080, "Member 'UParticleModuleSwarmMovement::SteeringTargets' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, SteeringWeight) == 0x000090, "Member 'UParticleModuleSwarmMovement::SteeringWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, SteeringTargetDistanceWeight) == 0x000094, "Member 'UParticleModuleSwarmMovement::SteeringTargetDistanceWeight' has a wrong offset!");
static_assert(offsetof(UParticleModuleSwarmMovement, DynamicSteeringPointProviderName) == 0x000098, "Member 'UParticleModuleSwarmMovement::DynamicSteeringPointProviderName' has a wrong offset!");

// Class CascadeExtensionPlugin.ParticleModuleVelocityTurbulence
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleVelocityTurbulence final : public UAbstractParticleModule
{
public:
	struct FVector                                Intensity;                                         // 0x0060(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LengthScale;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Tightness;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAcceleration;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxVelocity;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE5[0x4];                                      // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleVelocityTurbulence">();
	}
	static class UParticleModuleVelocityTurbulence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocityTurbulence>();
	}
};
static_assert(alignof(UParticleModuleVelocityTurbulence) == 0x000008, "Wrong alignment on UParticleModuleVelocityTurbulence");
static_assert(sizeof(UParticleModuleVelocityTurbulence) == 0x000080, "Wrong size on UParticleModuleVelocityTurbulence");
static_assert(offsetof(UParticleModuleVelocityTurbulence, Intensity) == 0x000060, "Member 'UParticleModuleVelocityTurbulence::Intensity' has a wrong offset!");
static_assert(offsetof(UParticleModuleVelocityTurbulence, LengthScale) == 0x00006C, "Member 'UParticleModuleVelocityTurbulence::LengthScale' has a wrong offset!");
static_assert(offsetof(UParticleModuleVelocityTurbulence, Tightness) == 0x000070, "Member 'UParticleModuleVelocityTurbulence::Tightness' has a wrong offset!");
static_assert(offsetof(UParticleModuleVelocityTurbulence, MaxAcceleration) == 0x000074, "Member 'UParticleModuleVelocityTurbulence::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(UParticleModuleVelocityTurbulence, MaxVelocity) == 0x000078, "Member 'UParticleModuleVelocityTurbulence::MaxVelocity' has a wrong offset!");

}

