#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CutinManager

#include "Basic.hpp"

#include "BP_CutinManager_classes.hpp"
#include "BP_CutinManager_parameters.hpp"


namespace SDK
{

// Function BP_CutinManager.BP_CutinManager_C.ED_EndCutin__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::ED_EndCutin__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ED_EndCutin__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.ED_CoverScreen__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::ED_CoverScreen__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ED_CoverScreen__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.ED_BCPlaySequence__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::ED_BCPlaySequence__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ED_BCPlaySequence__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.ExecuteUbergraph_BP_CutinManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::ExecuteUbergraph_BP_CutinManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ExecuteUbergraph_BP_CutinManager");

	Params::BP_CutinManager_C_ExecuteUbergraph_BP_CutinManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.TipsSAS
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::TipsSAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "TipsSAS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.OnVisibleSeeThroughJustDodgeBorder
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::OnVisibleSeeThroughJustDodgeBorder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "OnVisibleSeeThroughJustDodgeBorder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.PlayVoice
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           VoiceFileName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_CutinManager_C::PlayVoice(const class FString& VoiceFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "PlayVoice");

	Params::BP_CutinManager_C_PlayVoice Parms{};

	Parms.VoiceFileName = std::move(VoiceFileName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.BC_PlaySequence
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::BC_PlaySequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "BC_PlaySequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StopCutin
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StopCutin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StopCutin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.ParticleSASEnergy
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::ParticleSASEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ParticleSASEnergy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.DrawMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WindowType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MessageLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Skipable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DrawSecond                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsVoiceOnlyMessage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipVoiceEnd                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CutinManager_C::DrawMessage(int32 WindowType, const class FString& MessageLabel, bool Skipable, float DrawSecond, bool IsVoiceOnlyMessage, bool IsSkipVoiceEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "DrawMessage");

	Params::BP_CutinManager_C_DrawMessage Parms{};

	Parms.WindowType = WindowType;
	Parms.MessageLabel = std::move(MessageLabel);
	Parms.Skipable = Skipable;
	Parms.DrawSecond = DrawSecond;
	Parms.IsVoiceOnlyMessage = IsVoiceOnlyMessage;
	Parms.IsSkipVoiceEnd = IsSkipVoiceEnd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.UnloadMessage
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MessageTableName                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void ABP_CutinManager_C::UnloadMessage(const class FString& MessageTableName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "UnloadMessage");

	Params::BP_CutinManager_C_UnloadMessage Parms{};

	Parms.MessageTableName = std::move(MessageTableName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.LoadMessage
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UDataTable>        DataTable                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_CutinManager_C::LoadMessage(const TSoftObjectPtr<class UDataTable>& DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "LoadMessage");

	Params::BP_CutinManager_C_LoadMessage Parms{};

	Parms.DataTable = DataTable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.VisibleCableEnergy
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::VisibleCableEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "VisibleCableEnergy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.DetachSASEnergy
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::DetachSASEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "DetachSASEnergy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StartSASEnergy
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StartSASEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StartSASEnergy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StopSASStop
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StopSASStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StopSASStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StartSASStop
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StartSASStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StartSASStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.CoverScreen
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::CoverScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "CoverScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.DebugPause
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::DebugPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "DebugPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StartSASCable
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StartSASCable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StartSASCable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.SetSASShot
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::SetSASShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetSASShot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StopCutinSlow
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StopCutinSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StopCutinSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StartCutinSlow
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StartCutinSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StartCutinSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StartSASCableReaction
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::StartSASCableReaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StartSASCableReaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ReceiveEndPlay");

	Params::BP_CutinManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ReceiveTick");

	Params::BP_CutinManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CutinManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.RequestHelpParticle
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::RequestHelpParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "RequestHelpParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.RequestHelpBrainTalk
// (BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::RequestHelpBrainTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "RequestHelpBrainTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.StartCutin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SASKind                               ESASKindType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::StartCutin(class FName RowName, E_SASKind ESASKindType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "StartCutin");

	Params::BP_CutinManager_C_StartCutin Parms{};

	Parms.RowName = RowName;
	Parms.ESASKindType = ESASKindType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.EndCutin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::EndCutin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "EndCutin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.SetCaptureCameraBP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACineCameraActor*                 CaptureCameraBP                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::SetCaptureCameraBP(class ACineCameraActor* CaptureCameraBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetCaptureCameraBP");

	Params::BP_CutinManager_C_SetCaptureCameraBP Parms{};

	Parms.CaptureCameraBP = CaptureCameraBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.GetCaptureCameraBP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACineCameraActor*                 CaptureCameraBP                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::GetCaptureCameraBP(class ACineCameraActor** CaptureCameraBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "GetCaptureCameraBP");

	Params::BP_CutinManager_C_GetCaptureCameraBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CaptureCameraBP != nullptr)
		*CaptureCameraBP = Parms.CaptureCameraBP;
}


// Function BP_CutinManager.BP_CutinManager_C.IsPlayingCurrentSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaying                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CutinManager_C::IsPlayingCurrentSequence(bool* IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "IsPlayingCurrentSequence");

	Params::BP_CutinManager_C_IsPlayingCurrentSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaying != nullptr)
		*IsPlaying = Parms.IsPlaying;
}


// Function BP_CutinManager.BP_CutinManager_C.GetCurrentSequencePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequencePlayer*             Param_CurrentSequencePlayer                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::GetCurrentSequencePlayer(class ULevelSequencePlayer** Param_CurrentSequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "GetCurrentSequencePlayer");

	Params::BP_CutinManager_C_GetCurrentSequencePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CurrentSequencePlayer != nullptr)
		*Param_CurrentSequencePlayer = Parms.Param_CurrentSequencePlayer;
}


// Function BP_CutinManager.BP_CutinManager_C.SetCustomTimeDilationActorArray
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Custom_Dilation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::SetCustomTimeDilationActorArray(float Custom_Dilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetCustomTimeDilationActorArray");

	Params::BP_CutinManager_C_SetCustomTimeDilationActorArray Parms{};

	Parms.Custom_Dilation = Custom_Dilation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.SetSequenceShowActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::SetSequenceShowActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetSequenceShowActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.SetCustomTimeDilationSequence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_CustomTimeDilation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::SetCustomTimeDilationSequence(float Param_CustomTimeDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetCustomTimeDilationSequence");

	Params::BP_CutinManager_C_SetCustomTimeDilationSequence Parms{};

	Parms.Param_CustomTimeDilation = Param_CustomTimeDilation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.SetCutinFadeForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Fade                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::SetCutinFadeForce(float Fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetCutinFadeForce");

	Params::BP_CutinManager_C_SetCutinFadeForce Parms{};

	Parms.Fade = Fade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.Initialize
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.GetCharaSequencerForESASKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class ULevelSequence* ABP_CutinManager_C::GetCharaSequencerForESASKind(E_SASKind Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "GetCharaSequencerForESASKind");

	Params::BP_CutinManager_C_GetCharaSequencerForESASKind Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CutinManager.BP_CutinManager_C.ClearAddSequencerShot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            CurrentSequence                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::ClearAddSequencerShot(class ARSLevelSequenceActor* CurrentSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ClearAddSequencerShot");

	Params::BP_CutinManager_C_ClearAddSequencerShot Parms{};

	Parms.CurrentSequence = CurrentSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.BindDummyCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            SequenceActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::BindDummyCharacter(class ARSLevelSequenceActor* SequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "BindDummyCharacter");

	Params::BP_CutinManager_C_BindDummyCharacter Parms{};

	Parms.SequenceActor = SequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.GetCutinWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::GetCutinWidget(class UUserWidget** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "GetCutinWidget");

	Params::BP_CutinManager_C_GetCutinWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BP_CutinManager.BP_CutinManager_C.BindCutinManager
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            SequenceActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::BindCutinManager(class ARSLevelSequenceActor* SequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "BindCutinManager");

	Params::BP_CutinManager_C_BindCutinManager Parms{};

	Parms.SequenceActor = SequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.AddBindingList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_BindingList                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::AddBindingList(const class FString& Param_BindingList, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "AddBindingList");

	Params::BP_CutinManager_C_AddBindingList Parms{};

	Parms.Param_BindingList = std::move(Param_BindingList);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.ClearBindingList
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::ClearBindingList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "ClearBindingList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.UpdateCapture
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::UpdateCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "UpdateCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.UpdateMaterial
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::UpdateMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "UpdateMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.LoadAsset
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.InitializePostProcess
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::InitializePostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "InitializePostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.OnRequestHelpBrainTalk
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::OnRequestHelpBrainTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "OnRequestHelpBrainTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.SetupSASExtraShotActive
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ExtraID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::SetupSASExtraShotActive(class ARSLevelSequenceActor* Sequencer, int32 ExtraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "SetupSASExtraShotActive");

	Params::BP_CutinManager_C_SetupSASExtraShotActive Parms{};

	Parms.Sequencer = Sequencer;
	Parms.ExtraID = ExtraID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.OnRequestHelpParticle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CutinManager_C::OnRequestHelpParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "OnRequestHelpParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CutinManager.BP_CutinManager_C.PauseSequencer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CutinManager_C::PauseSequencer(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "PauseSequencer");

	Params::BP_CutinManager_C_PauseSequencer Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CutinManager.BP_CutinManager_C.GetCurrentSASType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASKind                               SasKind                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CutinManager_C::GetCurrentSASType(E_SASKind* SasKind) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CutinManager_C", "GetCurrentSASType");

	Params::BP_CutinManager_C_GetCurrentSASType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SasKind != nullptr)
		*SasKind = Parms.SasKind;
}

}

