#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_co0101

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "REDAnimationNode_structs.hpp"
#include "ESASCodeAnimType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_co0101.ABP_co0101_C
// 0x1280 (0x1580 - 0x0300)
class UABP_co0101_C final : public URSCableAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	uint8                                         Pad_83E8[0x8];                                     // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBodyRedCustom           AnimGraphNode_RigidBodyRedCustom_1;                // 0x0310(0x0610)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x0920(0x00C8)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x09E8(0x0020)()
	struct FAnimNode_MeshSpaceRefPose             AnimGraphNode_MeshRefPose_1;                       // 0x0A08(0x0010)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0A18(0x0030)()
	struct FAnimNode_MeshSpaceRefPose             AnimGraphNode_MeshRefPose;                         // 0x0A48(0x0010)()
	uint8                                         Pad_83E9[0x8];                                     // 0x0A58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBodyRedCustom           AnimGraphNode_RigidBodyRedCustom;                  // 0x0A60(0x0610)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x1070(0x0020)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x1090(0x00B0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1140(0x0078)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x11B8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x11E8(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1298(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x12E0(0x0078)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1358(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1388(0x00B0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1438(0x00A0)()
	float                                         PhysicsAlpha;                                      // 0x14D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartAnim;                                        // 0x14DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83EA[0x3];                                     // 0x14DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             PhysicsDelayTimer;                                 // 0x14E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PARAM_PhysicsDelayTime;                            // 0x14EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             PhysicsAlphaTimer;                                 // 0x14F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PARAM_PhysicsAlphaTime;                            // 0x14FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim01;                                            // 0x1500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim02;                                            // 0x1508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim03;                                            // 0x1510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim04;                                            // 0x1518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim05;                                            // 0x1520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              SASAnimType;                                       // 0x1528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83EB[0x3];                                     // 0x1529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             OverrideGravityTimer;                              // 0x152C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_CableBase_C*                        CableActor;                                        // 0x1538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideGravity;                                  // 0x1540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83EC[0x3];                                     // 0x1541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PARAM_OverrideGravityTime;                         // 0x1544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OverrideGravity;                                   // 0x1548(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             DisableOverrideGravityTimer;                       // 0x1554(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ERSCableGravityType                           GravityType;                                       // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           GravityTypeLow;                                    // 0x1561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83ED[0x2];                                     // 0x1562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PARAM_ABNORMAL_CABLE_LENGTH;                       // 0x1564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AbnormalRigidIdlingSec;                            // 0x1568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigidIdlingSecFinal;                               // 0x156C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSwitchCableStartAnim;                             // 0x1570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83EE[0x3];                                     // 0x1571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x1574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_co0101(int32 EntryPoint);
	void AnimNotify_OnBeginStartAnim();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_co0101_AnimGraphNode_SequencePlayer_B90678AF4D8E195E56FA43A0EA38A248();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_co0101_AnimGraphNode_SequencePlayer_7491064045A92F8C18A09AAB99AA137E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_co0101_AnimGraphNode_TwoWayBlend_87EA9E9B44CE3BA2960365991485A2AF();
	void StartSAS(bool bRestart, ESASCodeAnimType AnimType, bool bNoCutin);
	void SetOwnerCableActor(class ABP_CableBase_C* OwnerActor);
	void EndSAS();
	bool BeginOverrideGravity(ERSCableGravityType Type);
	bool EndOverrideGravity(ERSCableGravityType Type);
	void SetPhysicsDirect();
	void StartBrainField(ESASCodeAnimType Param_SASAnimType);
	void GetSASStartAnimSequence(ESASCodeAnimType AnimType, class UAnimSequence** AnimSequence);
	void CheckAbnormalCable();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_co0101_C">();
	}
	static class UABP_co0101_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_co0101_C>();
	}
};
static_assert(alignof(UABP_co0101_C) == 0x000010, "Wrong alignment on UABP_co0101_C");
static_assert(sizeof(UABP_co0101_C) == 0x001580, "Wrong size on UABP_co0101_C");
static_assert(offsetof(UABP_co0101_C, UberGraphFrame) == 0x000300, "Member 'UABP_co0101_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_RigidBodyRedCustom_1) == 0x000310, "Member 'UABP_co0101_C::AnimGraphNode_RigidBodyRedCustom_1' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_TwoWayBlend) == 0x000920, "Member 'UABP_co0101_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0009E8, "Member 'UABP_co0101_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_MeshRefPose_1) == 0x000A08, "Member 'UABP_co0101_C::AnimGraphNode_MeshRefPose_1' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_Root) == 0x000A18, "Member 'UABP_co0101_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_MeshRefPose) == 0x000A48, "Member 'UABP_co0101_C::AnimGraphNode_MeshRefPose' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_RigidBodyRedCustom) == 0x000A60, "Member 'UABP_co0101_C::AnimGraphNode_RigidBodyRedCustom' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_ComponentToLocalSpace) == 0x001070, "Member 'UABP_co0101_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_BlendListByEnum) == 0x001090, "Member 'UABP_co0101_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_SequencePlayer_1) == 0x001140, "Member 'UABP_co0101_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_StateResult_1) == 0x0011B8, "Member 'UABP_co0101_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_StateMachine_1) == 0x0011E8, "Member 'UABP_co0101_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_Slot) == 0x001298, "Member 'UABP_co0101_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_SequencePlayer) == 0x0012E0, "Member 'UABP_co0101_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_StateResult) == 0x001358, "Member 'UABP_co0101_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_StateMachine) == 0x001388, "Member 'UABP_co0101_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AnimGraphNode_BlendListByBool) == 0x001438, "Member 'UABP_co0101_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PhysicsAlpha) == 0x0014D8, "Member 'UABP_co0101_C::PhysicsAlpha' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, bStartAnim) == 0x0014DC, "Member 'UABP_co0101_C::bStartAnim' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PhysicsDelayTimer) == 0x0014E0, "Member 'UABP_co0101_C::PhysicsDelayTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PARAM_PhysicsDelayTime) == 0x0014EC, "Member 'UABP_co0101_C::PARAM_PhysicsDelayTime' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PhysicsAlphaTimer) == 0x0014F0, "Member 'UABP_co0101_C::PhysicsAlphaTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PARAM_PhysicsAlphaTime) == 0x0014FC, "Member 'UABP_co0101_C::PARAM_PhysicsAlphaTime' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, Anim01) == 0x001500, "Member 'UABP_co0101_C::Anim01' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, Anim02) == 0x001508, "Member 'UABP_co0101_C::Anim02' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, Anim03) == 0x001510, "Member 'UABP_co0101_C::Anim03' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, Anim04) == 0x001518, "Member 'UABP_co0101_C::Anim04' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, Anim05) == 0x001520, "Member 'UABP_co0101_C::Anim05' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, SASAnimType) == 0x001528, "Member 'UABP_co0101_C::SASAnimType' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, OverrideGravityTimer) == 0x00152C, "Member 'UABP_co0101_C::OverrideGravityTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, CableActor) == 0x001538, "Member 'UABP_co0101_C::CableActor' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, bOverrideGravity) == 0x001540, "Member 'UABP_co0101_C::bOverrideGravity' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PARAM_OverrideGravityTime) == 0x001544, "Member 'UABP_co0101_C::PARAM_OverrideGravityTime' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, OverrideGravity) == 0x001548, "Member 'UABP_co0101_C::OverrideGravity' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, DisableOverrideGravityTimer) == 0x001554, "Member 'UABP_co0101_C::DisableOverrideGravityTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, GravityType) == 0x001560, "Member 'UABP_co0101_C::GravityType' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, GravityTypeLow) == 0x001561, "Member 'UABP_co0101_C::GravityTypeLow' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, PARAM_ABNORMAL_CABLE_LENGTH) == 0x001564, "Member 'UABP_co0101_C::PARAM_ABNORMAL_CABLE_LENGTH' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, AbnormalRigidIdlingSec) == 0x001568, "Member 'UABP_co0101_C::AbnormalRigidIdlingSec' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, RigidIdlingSecFinal) == 0x00156C, "Member 'UABP_co0101_C::RigidIdlingSecFinal' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, bSwitchCableStartAnim) == 0x001570, "Member 'UABP_co0101_C::bSwitchCableStartAnim' has a wrong offset!");
static_assert(offsetof(UABP_co0101_C, StartPosition) == 0x001574, "Member 'UABP_co0101_C::StartPosition' has a wrong offset!");

}

