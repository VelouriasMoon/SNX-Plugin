#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SoundEmitterBase

#include "Basic.hpp"

#include "BP_SoundEmitterBase_classes.hpp"
#include "BP_SoundEmitterBase_parameters.hpp"


namespace SDK
{

// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.InArea__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_SoundEmitterBase_C::InArea__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "InArea__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.ExecuteUbergraph_BP_SoundEmitterBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::ExecuteUbergraph_BP_SoundEmitterBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "ExecuteUbergraph_BP_SoundEmitterBase");

	Params::BP_SoundEmitterBase_C_ExecuteUbergraph_BP_SoundEmitterBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "ReceiveEndPlay");

	Params::BP_SoundEmitterBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "ReceiveTick");

	Params::BP_SoundEmitterBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SoundEmitterBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.Update
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundEmitterBase_C::Update(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "Update");

	Params::BP_SoundEmitterBase_C_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.MoveSoundLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundEmitterBase_C::MoveSoundLocation(const struct FVector& TargetLocation, bool* IsIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "MoveSoundLocation");

	Params::BP_SoundEmitterBase_C_MoveSoundLocation Parms{};

	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (IsIn != nullptr)
		*IsIn = Parms.IsIn;
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.TickIntervalUpdate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_PlayerLocation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   IntervalSeconds                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::TickIntervalUpdate(const struct FVector& Param_PlayerLocation, float* IntervalSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "TickIntervalUpdate");

	Params::BP_SoundEmitterBase_C_TickIntervalUpdate Parms{};

	Parms.Param_PlayerLocation = std::move(Param_PlayerLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (IntervalSeconds != nullptr)
		*IntervalSeconds = Parms.IntervalSeconds;
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.SetVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::SetVolume(float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "SetVolume");

	Params::BP_SoundEmitterBase_C_SetVolume Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.ResetVolume
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundEmitterBase_C::ResetVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "ResetVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.PlaySoundEmitter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::PlaySoundEmitter(float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "PlaySoundEmitter");

	Params::BP_SoundEmitterBase_C_PlaySoundEmitter Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.StopSoundEmitter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::StopSoundEmitter(float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "StopSoundEmitter");

	Params::BP_SoundEmitterBase_C_StopSoundEmitter Parms{};

	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.UpdatePlayerLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_SoundEmitterBase_C::UpdatePlayerLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "UpdatePlayerLocation");

	Params::BP_SoundEmitterBase_C_UpdatePlayerLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.CheckIsEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEvent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundEmitterBase_C::CheckIsEvent(bool* IsEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "CheckIsEvent");

	Params::BP_SoundEmitterBase_C_CheckIsEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEvent != nullptr)
		*IsEvent = Parms.IsEvent;
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.Enable Emitter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundEmitterBase_C::Enable_Emitter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "Enable Emitter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.Disable Emitter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundEmitterBase_C::Disable_Emitter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "Disable Emitter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.GetRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::GetRadius(float* Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "GetRadius");

	Params::BP_SoundEmitterBase_C_GetRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BP_SoundEmitterBase.BP_SoundEmitterBase_C.GetCapsuleCalcNormal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          CapsuleLineNormal                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CapsuleLine                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CapsuleLineStartLocation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          H                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundEmitterBase_C::GetCapsuleCalcNormal(const struct FVector& CapsuleLineNormal, const struct FVector& CapsuleLine, const struct FVector& CapsuleLineStartLocation, const struct FVector& TargetLocation, float* Rate, struct FVector* H) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundEmitterBase_C", "GetCapsuleCalcNormal");

	Params::BP_SoundEmitterBase_C_GetCapsuleCalcNormal Parms{};

	Parms.CapsuleLineNormal = std::move(CapsuleLineNormal);
	Parms.CapsuleLine = std::move(CapsuleLine);
	Parms.CapsuleLineStartLocation = std::move(CapsuleLineStartLocation);
	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;

	if (H != nullptr)
		*H = std::move(Parms.H);
}

}

