#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DriveShockWave

#include "Basic.hpp"

#include "CollisionCommonInfoBP_structs.hpp"


namespace SDK::Params
{

// Function BP_DriveShockWave.BP_DriveShockWave_C.ExecuteUbergraph_BP_DriveShockWave
// 0x0018 (0x0018 - 0x0000)
struct BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83D1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_AttackOwner;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave) == 0x000008, "Wrong alignment on BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave");
static_assert(sizeof(BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave) == 0x000018, "Wrong size on BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave");
static_assert(offsetof(BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave, EntryPoint) == 0x000000, "Member 'BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave, K2Node_Event_AttackOwner) == 0x000008, "Member 'BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave::K2Node_Event_AttackOwner' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_DriveShockWave_C_ExecuteUbergraph_BP_DriveShockWave::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_DriveShockWave.BP_DriveShockWave_C.StartAttack
// 0x0008 (0x0008 - 0x0000)
struct BP_DriveShockWave_C_StartAttack final
{
public:
	class AActor*                                 Param_AttackOwner;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DriveShockWave_C_StartAttack) == 0x000008, "Wrong alignment on BP_DriveShockWave_C_StartAttack");
static_assert(sizeof(BP_DriveShockWave_C_StartAttack) == 0x000008, "Wrong size on BP_DriveShockWave_C_StartAttack");
static_assert(offsetof(BP_DriveShockWave_C_StartAttack, Param_AttackOwner) == 0x000000, "Member 'BP_DriveShockWave_C_StartAttack::Param_AttackOwner' has a wrong offset!");

// Function BP_DriveShockWave.BP_DriveShockWave_C.SetCollisionSize
// 0x00A8 (0x00A8 - 0x0000)
struct BP_DriveShockWave_C_SetCollisionSize final
{
public:
	bool                                          bLarge;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionCommonInfoBP                 LCommonInfo;                                       // 0x0008(0x0078)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D3[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D4[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DriveShockWave_C_SetCollisionSize) == 0x000008, "Wrong alignment on BP_DriveShockWave_C_SetCollisionSize");
static_assert(sizeof(BP_DriveShockWave_C_SetCollisionSize) == 0x0000A8, "Wrong size on BP_DriveShockWave_C_SetCollisionSize");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, bLarge) == 0x000000, "Member 'BP_DriveShockWave_C_SetCollisionSize::bLarge' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, LCommonInfo) == 0x000008, "Member 'BP_DriveShockWave_C_SetCollisionSize::LCommonInfo' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, Temp_bool_Variable) == 0x000080, "Member 'BP_DriveShockWave_C_SetCollisionSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, Temp_name_Variable) == 0x000084, "Member 'BP_DriveShockWave_C_SetCollisionSize::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, Temp_name_Variable_1) == 0x00008C, "Member 'BP_DriveShockWave_C_SetCollisionSize::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, Temp_bool_Variable_1) == 0x000094, "Member 'BP_DriveShockWave_C_SetCollisionSize::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, K2Node_Select_Default) == 0x000098, "Member 'BP_DriveShockWave_C_SetCollisionSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DriveShockWave_C_SetCollisionSize, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_DriveShockWave_C_SetCollisionSize::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_DriveShockWave.BP_DriveShockWave_C.GetPrimitive
// 0x0008 (0x0008 - 0x0000)
struct BP_DriveShockWave_C_GetPrimitive final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DriveShockWave_C_GetPrimitive) == 0x000008, "Wrong alignment on BP_DriveShockWave_C_GetPrimitive");
static_assert(sizeof(BP_DriveShockWave_C_GetPrimitive) == 0x000008, "Wrong size on BP_DriveShockWave_C_GetPrimitive");
static_assert(offsetof(BP_DriveShockWave_C_GetPrimitive, Primitive) == 0x000000, "Member 'BP_DriveShockWave_C_GetPrimitive::Primitive' has a wrong offset!");

// Function BP_DriveShockWave.BP_DriveShockWave_C.IsFinish
// 0x0001 (0x0001 - 0x0000)
struct BP_DriveShockWave_C_IsFinish final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DriveShockWave_C_IsFinish) == 0x000001, "Wrong alignment on BP_DriveShockWave_C_IsFinish");
static_assert(sizeof(BP_DriveShockWave_C_IsFinish) == 0x000001, "Wrong size on BP_DriveShockWave_C_IsFinish");
static_assert(offsetof(BP_DriveShockWave_C_IsFinish, bEnd) == 0x000000, "Member 'BP_DriveShockWave_C_IsFinish::bEnd' has a wrong offset!");

}

