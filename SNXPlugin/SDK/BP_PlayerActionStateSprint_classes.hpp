#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateSprint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BP_PlayerActionStateCommonBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerActionStateSprint.BP_PlayerActionStateSprint_C
// 0x0030 (0x0118 - 0x00E8)
class UBP_PlayerActionStateSprint_C final : public UBP_PlayerActionStateCommonBase_C
{
public:
	struct FGameTimer                             AngleInterpTimer;                                  // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             PsychicComboTimer;                                 // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         StoreMaxAcceleration;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoStickTime;                                       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InterpDir;                                         // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TutorialTimer;                                     // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckSprintEnd(bool* bEnd);
	int32 Enter(int32 Param);
	int32 Update();
	bool Transition();
	int32 Exit(int32 NextStateIndex);
	void ChangeMaxAcceleration();
	void ResetMaxAcceleration();

	void CheckTurnBack(bool* bTurnBack) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerActionStateSprint_C">();
	}
	static class UBP_PlayerActionStateSprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerActionStateSprint_C>();
	}
};
static_assert(alignof(UBP_PlayerActionStateSprint_C) == 0x000008, "Wrong alignment on UBP_PlayerActionStateSprint_C");
static_assert(sizeof(UBP_PlayerActionStateSprint_C) == 0x000118, "Wrong size on UBP_PlayerActionStateSprint_C");
static_assert(offsetof(UBP_PlayerActionStateSprint_C, AngleInterpTimer) == 0x0000E8, "Member 'UBP_PlayerActionStateSprint_C::AngleInterpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateSprint_C, PsychicComboTimer) == 0x0000F4, "Member 'UBP_PlayerActionStateSprint_C::PsychicComboTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateSprint_C, StoreMaxAcceleration) == 0x000100, "Member 'UBP_PlayerActionStateSprint_C::StoreMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateSprint_C, NoStickTime) == 0x000104, "Member 'UBP_PlayerActionStateSprint_C::NoStickTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateSprint_C, InterpDir) == 0x000108, "Member 'UBP_PlayerActionStateSprint_C::InterpDir' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateSprint_C, TutorialTimer) == 0x000114, "Member 'UBP_PlayerActionStateSprint_C::TutorialTimer' has a wrong offset!");

}

