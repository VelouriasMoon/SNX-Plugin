#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InputManager.BP_InputManager_C
// 0x0030 (0x0500 - 0x04D0)
class ABP_InputManager_C final : public AInputManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   NewVar_0;                                          // 0x04E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          InputIsPress;                                      // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A78[0x3];                                     // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedDiscountRate;                                 // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_InputManager(int32 EntryPoint);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0(float AxisValue);
	void MouseCursorOnOff();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18(float AxisValue);
	void ChangeDeviceTypeEvent(EInputDeviceType NewType, EInputDeviceType OldType);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22(float AxisValue);
	void InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1(float AxisValue);
	void InpActEvt_RUP_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_RUP_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_R1_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_R1_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_R2_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_R2_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_R3_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_R3_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_RDOWN_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_RDOWN_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_L1_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_L1_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_RLEFT_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_RLEFT_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_L2_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_L2_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_L3_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_L3_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_RRIGHT_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_RRIGHT_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Select_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Select_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Pause_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Pause_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_LUP_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_LUP_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Decide_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_Decide_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_LDOWN_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_LDOWN_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_LLEFT_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_LLEFT_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_Cancel_K2Node_InputActionEvent_32(const struct FKey& Key);
	void InpActEvt_Cancel_K2Node_InputActionEvent_33(const struct FKey& Key);
	void InpActEvt_LRIGHT_K2Node_InputActionEvent_34(const struct FKey& Key);
	void InpActEvt_LRIGHT_K2Node_InputActionEvent_35(const struct FKey& Key);
	void InpActEvt_Mouse_K2Node_InputActionEvent_36(const struct FKey& Key);
	void InpActEvt_Mouse_K2Node_InputActionEvent_37(const struct FKey& Key);
	void DebugDrawInput();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InputManager_C">();
	}
	static class ABP_InputManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InputManager_C>();
	}
};
static_assert(alignof(ABP_InputManager_C) == 0x000008, "Wrong alignment on ABP_InputManager_C");
static_assert(sizeof(ABP_InputManager_C) == 0x000500, "Wrong size on ABP_InputManager_C");
static_assert(offsetof(ABP_InputManager_C, UberGraphFrame) == 0x0004D0, "Member 'ABP_InputManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_InputManager_C, DefaultSceneRoot) == 0x0004D8, "Member 'ABP_InputManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_InputManager_C, NewVar_0) == 0x0004E0, "Member 'ABP_InputManager_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_InputManager_C, InputIsPress) == 0x0004F8, "Member 'ABP_InputManager_C::InputIsPress' has a wrong offset!");
static_assert(offsetof(ABP_InputManager_C, SpeedDiscountRate) == 0x0004FC, "Member 'ABP_InputManager_C::SpeedDiscountRate' has a wrong offset!");

}

