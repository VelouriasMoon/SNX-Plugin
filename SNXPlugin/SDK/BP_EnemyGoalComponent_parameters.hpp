#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyGoalComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.ExecuteUbergraph_BP_EnemyGoalComponent
// 0x000C (0x000C - 0x0000)
struct BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent) == 0x000004, "Wrong alignment on BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent");
static_assert(sizeof(BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent) == 0x00000C, "Wrong size on BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent");
static_assert(offsetof(BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent, EntryPoint) == 0x000000, "Member 'BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent, K2Node_Event_EndPlayReason) == 0x000008, "Member 'BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_EnemyGoalComponent_C_ExecuteUbergraph_BP_EnemyGoalComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_EnemyGoalComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_EnemyGoalComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_EnemyGoalComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_EnemyGoalComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_EnemyGoalComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_EnemyGoalComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_EnemyGoalComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_EnemyGoalComponent_C_ReceiveTick");
static_assert(sizeof(BP_EnemyGoalComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_EnemyGoalComponent_C_ReceiveTick");
static_assert(offsetof(BP_EnemyGoalComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_EnemyGoalComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyGoalComponent_C_SetTargetActor final
{
public:
	class ARSBattleCharacter_C*                   Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_SetTargetActor) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_SetTargetActor");
static_assert(sizeof(BP_EnemyGoalComponent_C_SetTargetActor) == 0x000008, "Wrong size on BP_EnemyGoalComponent_C_SetTargetActor");
static_assert(offsetof(BP_EnemyGoalComponent_C_SetTargetActor, Character) == 0x000000, "Member 'BP_EnemyGoalComponent_C_SetTargetActor::Character' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.SetTargetLocation
// 0x000C (0x000C - 0x0000)
struct BP_EnemyGoalComponent_C_SetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_SetTargetLocation) == 0x000004, "Wrong alignment on BP_EnemyGoalComponent_C_SetTargetLocation");
static_assert(sizeof(BP_EnemyGoalComponent_C_SetTargetLocation) == 0x00000C, "Wrong size on BP_EnemyGoalComponent_C_SetTargetLocation");
static_assert(offsetof(BP_EnemyGoalComponent_C_SetTargetLocation, Location) == 0x000000, "Member 'BP_EnemyGoalComponent_C_SetTargetLocation::Location' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.MainTick
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyGoalComponent_C_MainTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Exec;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyGoalComponent_C_MainTick) == 0x000004, "Wrong alignment on BP_EnemyGoalComponent_C_MainTick");
static_assert(sizeof(BP_EnemyGoalComponent_C_MainTick) == 0x000008, "Wrong size on BP_EnemyGoalComponent_C_MainTick");
static_assert(offsetof(BP_EnemyGoalComponent_C_MainTick, DeltaSeconds) == 0x000000, "Member 'BP_EnemyGoalComponent_C_MainTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_MainTick, L_Exec) == 0x000004, "Member 'BP_EnemyGoalComponent_C_MainTick::L_Exec' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.UpdateTargetCharacter
// 0x0068 (0x0068 - 0x0000)
struct BP_EnemyGoalComponent_C_UpdateTargetCharacter final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Select;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        L_TestLocations;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                L_HitLocation;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CenterLocation2;                                 // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CenterLocation;                                  // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_GroundLocation;                                  // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B7[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_UpdateTargetCharacter) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_UpdateTargetCharacter");
static_assert(sizeof(BP_EnemyGoalComponent_C_UpdateTargetCharacter) == 0x000068, "Wrong size on BP_EnemyGoalComponent_C_UpdateTargetCharacter");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, DeltaSeconds) == 0x000000, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_Select) == 0x000004, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_Select' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_TestLocations) == 0x000008, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_TestLocations' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_HitLocation) == 0x000018, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_CenterLocation2) == 0x000024, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_CenterLocation2' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_CenterLocation) == 0x000030, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_CenterLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_GroundLocation) == 0x00003C, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_GroundLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, L_Location) == 0x000048, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::L_Location' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_UpdateTargetCharacter, K2Node_MakeArray_Array) == 0x000058, "Member 'BP_EnemyGoalComponent_C_UpdateTargetCharacter::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.SetGoalIntervalTime
// 0x0004 (0x0004 - 0x0000)
struct BP_EnemyGoalComponent_C_SetGoalIntervalTime final
{
public:
	float                                         NewIntervalTime;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_SetGoalIntervalTime) == 0x000004, "Wrong alignment on BP_EnemyGoalComponent_C_SetGoalIntervalTime");
static_assert(sizeof(BP_EnemyGoalComponent_C_SetGoalIntervalTime) == 0x000004, "Wrong size on BP_EnemyGoalComponent_C_SetGoalIntervalTime");
static_assert(offsetof(BP_EnemyGoalComponent_C_SetGoalIntervalTime, NewIntervalTime) == 0x000000, "Member 'BP_EnemyGoalComponent_C_SetGoalIntervalTime::NewIntervalTime' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.InitializeSpawnMoveGoalActor_FromNative
// 0x0060 (0x0060 - 0x0000)
struct BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	EREDActorStatType                             CallFunc_GetActorStatType_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B8[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyGoalActor_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative) == 0x000010, "Wrong alignment on BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative");
static_assert(sizeof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative) == 0x000060, "Wrong size on BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative, Owner) == 0x000000, "Member 'BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative::Owner' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative, ReturnValue) == 0x000008, "Member 'BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative, CallFunc_GetActorStatType_ReturnValue) == 0x000040, "Member 'BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative::CallFunc_GetActorStatType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000048, "Member 'BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'BP_EnemyGoalComponent_C_InitializeSpawnMoveGoalActor_FromNative::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.InitializeGetCapsuleRadius_FromNative
// 0x0040 (0x0040 - 0x0000)
struct BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41BA[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  CallFunc_GetCapsuleRadius_self_CastInput;          // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41BB[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative");
static_assert(sizeof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative) == 0x000040, "Wrong size on BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, Owner) == 0x000000, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::Owner' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, ReturnValue) == 0x000008, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, K2Node_DynamicCast_AsRSBattle_Character) == 0x000010, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, CallFunc_GetCapsuleRadius_self_CastInput) == 0x000020, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::CallFunc_GetCapsuleRadius_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, CallFunc_GetCapsuleRadius_Radius) == 0x000030, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_EnemyGoalComponent_C_InitializeGetCapsuleRadius_FromNative::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.InitializeGetEnemyCalcComponent_FromNative
// 0x0020 (0x0020 - 0x0000)
struct BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEnemyCalcGoalComponent*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative");
static_assert(sizeof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative) == 0x000020, "Wrong size on BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative, Owner) == 0x000000, "Member 'BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative::Owner' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative, ReturnValue) == 0x000008, "Member 'BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000010, "Member 'BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_EnemyGoalComponent_C_InitializeGetEnemyCalcComponent_FromNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.getTargetActor
// 0x0018 (0x0018 - 0x0000)
struct BP_EnemyGoalComponent_C_GetTargetActor final
{
public:
	class ARSBattleCharacter_C*                   Character;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyGoalComponent_C_GetTargetActor) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_GetTargetActor");
static_assert(sizeof(BP_EnemyGoalComponent_C_GetTargetActor) == 0x000018, "Wrong size on BP_EnemyGoalComponent_C_GetTargetActor");
static_assert(offsetof(BP_EnemyGoalComponent_C_GetTargetActor, Character) == 0x000000, "Member 'BP_EnemyGoalComponent_C_GetTargetActor::Character' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_GetTargetActor, K2Node_DynamicCast_AsRSBattle_Character) == 0x000008, "Member 'BP_EnemyGoalComponent_C_GetTargetActor::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_GetTargetActor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_EnemyGoalComponent_C_GetTargetActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.GetTargetLocation
// 0x000C (0x000C - 0x0000)
struct BP_EnemyGoalComponent_C_GetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_GetTargetLocation) == 0x000004, "Wrong alignment on BP_EnemyGoalComponent_C_GetTargetLocation");
static_assert(sizeof(BP_EnemyGoalComponent_C_GetTargetLocation) == 0x00000C, "Wrong size on BP_EnemyGoalComponent_C_GetTargetLocation");
static_assert(offsetof(BP_EnemyGoalComponent_C_GetTargetLocation, Location) == 0x000000, "Member 'BP_EnemyGoalComponent_C_GetTargetLocation::Location' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.DebugDraw
// 0x0060 (0x0060 - 0x0000)
struct BP_EnemyGoalComponent_C_DebugDraw final
{
public:
	struct FVector                                L_Location;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_ExecDraw;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41BC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41BD[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41BE[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyGoalComponent_C_DebugDraw) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_DebugDraw");
static_assert(sizeof(BP_EnemyGoalComponent_C_DebugDraw) == 0x000060, "Wrong size on BP_EnemyGoalComponent_C_DebugDraw");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, L_Location) == 0x000000, "Member 'BP_EnemyGoalComponent_C_DebugDraw::L_Location' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, L_ExecDraw) == 0x00000C, "Member 'BP_EnemyGoalComponent_C_DebugDraw::L_ExecDraw' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'BP_EnemyGoalComponent_C_DebugDraw::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_BreakVector_Y) == 0x000024, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_BreakVector_Z) == 0x000028, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_MakeVector_ReturnValue_1) == 0x000040, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_GetDebuggingManager_Manager) == 0x000050, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_DebugDraw, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_EnemyGoalComponent_C_DebugDraw::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.GetGoalActor
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyGoalComponent_C_GetGoalActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_GetGoalActor) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_GetGoalActor");
static_assert(sizeof(BP_EnemyGoalComponent_C_GetGoalActor) == 0x000008, "Wrong size on BP_EnemyGoalComponent_C_GetGoalActor");
static_assert(offsetof(BP_EnemyGoalComponent_C_GetGoalActor, Actor) == 0x000000, "Member 'BP_EnemyGoalComponent_C_GetGoalActor::Actor' has a wrong offset!");

// Function BP_EnemyGoalComponent.BP_EnemyGoalComponent_C.CorrectionHitCollision
// 0x01A0 (0x01A0 - 0x0000)
struct BP_EnemyGoalComponent_C_CorrectionHitCollision final
{
public:
	struct FVector                                SrcLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DstLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_MoveVector;                                      // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_DiffVector;                                      // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CorrectLocation;                                 // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41BF[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        L_CorrectVectors;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                L_HitLocation;                                     // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CenterLocation;                                  // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_result;                                          // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C0[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0088(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x00C8(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C1[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C2[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C3[0x2];                                     // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C4[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyGoalComponent_C_CorrectionHitCollision) == 0x000008, "Wrong alignment on BP_EnemyGoalComponent_C_CorrectionHitCollision");
static_assert(sizeof(BP_EnemyGoalComponent_C_CorrectionHitCollision) == 0x0001A0, "Wrong size on BP_EnemyGoalComponent_C_CorrectionHitCollision");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, SrcLocation) == 0x000000, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::SrcLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, DstLocation) == 0x00000C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::DstLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, Radius) == 0x000018, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::Radius' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, Location) == 0x00001C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::Location' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_MoveVector) == 0x000028, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_MoveVector' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_DiffVector) == 0x000034, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_DiffVector' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_CorrectLocation) == 0x000040, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_CorrectLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_CorrectVectors) == 0x000050, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_CorrectVectors' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_HitLocation) == 0x000060, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_CenterLocation) == 0x00006C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_CenterLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, L_result) == 0x000078, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::L_result' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, Temp_object_Variable) == 0x000088, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, Temp_int_Array_Index_Variable) == 0x000098, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, Temp_int_Loop_Num_Variable) == 0x00009C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000AC, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, K2Node_MakeArray_Array) == 0x0000B8, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x0000C8, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x0000D8, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, Temp_int_Loop_Counter_Variable) == 0x0000DC, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Array_Length_ReturnValue) == 0x0000E8, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_bBlockingHit) == 0x0000EC, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000ED, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_Time) == 0x0000F0, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_Distance) == 0x0000F4, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_Location) == 0x0000F8, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_ImpactPoint) == 0x000104, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_Normal) == 0x000110, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_ImpactNormal) == 0x00011C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_PhysMat) == 0x000128, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_HitActor) == 0x000130, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_HitComponent) == 0x000138, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_HitBoneName) == 0x000140, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_HitItem) == 0x000148, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_FaceIndex) == 0x00014C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_TraceStart) == 0x000150, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_BreakHitResult_TraceEnd) == 0x00015C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000168, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Dot_VectorVector_ReturnValue) == 0x000174, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000178, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_DegAcos_ReturnValue) == 0x000184, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Abs_ReturnValue) == 0x000188, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00018C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000190, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyGoalComponent_C_CorrectionHitCollision, CallFunc_Array_Add_ReturnValue) == 0x00019C, "Member 'BP_EnemyGoalComponent_C_CorrectionHitCollision::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

