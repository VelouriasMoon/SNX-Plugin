#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyDeadMoveComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_EnemyDeadMoveComponent.BP_EnemyDeadMoveComponent_C.ExecuteUbergraph_BP_EnemyDeadMoveComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent) == 0x000004, "Wrong alignment on BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent");
static_assert(sizeof(BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent) == 0x000008, "Wrong size on BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent, EntryPoint) == 0x000000, "Member 'BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_EnemyDeadMoveComponent_C_ExecuteUbergraph_BP_EnemyDeadMoveComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_EnemyDeadMoveComponent.BP_EnemyDeadMoveComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_EnemyDeadMoveComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyDeadMoveComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_EnemyDeadMoveComponent_C_ReceiveTick");
static_assert(sizeof(BP_EnemyDeadMoveComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_EnemyDeadMoveComponent_C_ReceiveTick");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_EnemyDeadMoveComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_EnemyDeadMoveComponent.BP_EnemyDeadMoveComponent_C.Update
// 0x0024 (0x0024 - 0x0000)
struct BP_EnemyDeadMoveComponent_C_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CurMove;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_IdealLocation;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CurRate;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bEnd;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyDeadMoveComponent_C_Update) == 0x000004, "Wrong alignment on BP_EnemyDeadMoveComponent_C_Update");
static_assert(sizeof(BP_EnemyDeadMoveComponent_C_Update) == 0x000024, "Wrong size on BP_EnemyDeadMoveComponent_C_Update");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Update, DeltaSeconds) == 0x000000, "Member 'BP_EnemyDeadMoveComponent_C_Update::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Update, L_CurMove) == 0x000004, "Member 'BP_EnemyDeadMoveComponent_C_Update::L_CurMove' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Update, L_IdealLocation) == 0x000010, "Member 'BP_EnemyDeadMoveComponent_C_Update::L_IdealLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Update, L_CurRate) == 0x00001C, "Member 'BP_EnemyDeadMoveComponent_C_Update::L_CurRate' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Update, L_bEnd) == 0x000020, "Member 'BP_EnemyDeadMoveComponent_C_Update::L_bEnd' has a wrong offset!");

// Function BP_EnemyDeadMoveComponent.BP_EnemyDeadMoveComponent_C.Start
// 0x0020 (0x0020 - 0x0000)
struct BP_EnemyDeadMoveComponent_C_Start final
{
public:
	float                                         BlendExp;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveLength;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   Function;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6237[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSeconds;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyDeadMoveComponent_C_Start) == 0x000008, "Wrong alignment on BP_EnemyDeadMoveComponent_C_Start");
static_assert(sizeof(BP_EnemyDeadMoveComponent_C_Start) == 0x000020, "Wrong size on BP_EnemyDeadMoveComponent_C_Start");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Start, BlendExp) == 0x000000, "Member 'BP_EnemyDeadMoveComponent_C_Start::BlendExp' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Start, MoveLength) == 0x000004, "Member 'BP_EnemyDeadMoveComponent_C_Start::MoveLength' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Start, Function) == 0x000008, "Member 'BP_EnemyDeadMoveComponent_C_Start::Function' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Start, MoveSeconds) == 0x00000C, "Member 'BP_EnemyDeadMoveComponent_C_Start::MoveSeconds' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Start, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000010, "Member 'BP_EnemyDeadMoveComponent_C_Start::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyDeadMoveComponent_C_Start, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_EnemyDeadMoveComponent_C_Start::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

