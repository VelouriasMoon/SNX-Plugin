#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerGauge

#include "Basic.hpp"

#include "EBattleBonusAddType_structs.hpp"
#include "EPsychicGaugeEffect_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "FBattleBonusData_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerGauge.BP_PlayerGauge_C.ExecuteUbergraph_BP_PlayerGauge
// 0x0078 (0x0078 - 0x0000)
struct BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bPause;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4673[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4674[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4675[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4676[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bPause)>                  K2Node_CreateDelegate_OutputDelegate;              // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_4677[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4678[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4679[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x0068(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge");
static_assert(sizeof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge) == 0x000078, "Wrong size on BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, EntryPoint) == 0x000000, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_CustomEvent_bPause) == 0x000004, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_CustomEvent_bPause' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, Temp_bool_Has_Been_Initd_Variable) == 0x000006, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_DynamicCast_AsRSBattle_Player) == 0x000018, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, Temp_bool_IsClosed_Variable_1) == 0x000021, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, Temp_bool_Has_Been_Initd_Variable_1) == 0x000022, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_GetPlayerFixParam_Param) == 0x000028, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_CreateDelegate_OutputDelegate) == 0x000034, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000048, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_IsControlAI_bAI) == 0x000052, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_CreateDelegate_OutputDelegate_1) == 0x000054, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, CallFunc_IsControlAI_bAI_1) == 0x000064, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge, K2Node_CreateDelegate_OutputDelegate_2) == 0x000068, "Member 'BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.EventOnPauseTimer
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerGauge_C_EventOnPauseTimer final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_EventOnPauseTimer) == 0x000001, "Wrong alignment on BP_PlayerGauge_C_EventOnPauseTimer");
static_assert(sizeof(BP_PlayerGauge_C_EventOnPauseTimer) == 0x000001, "Wrong size on BP_PlayerGauge_C_EventOnPauseTimer");
static_assert(offsetof(BP_PlayerGauge_C_EventOnPauseTimer, bPause) == 0x000000, "Member 'BP_PlayerGauge_C_EventOnPauseTimer::bPause' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerGauge_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_ReceiveTick");
static_assert(sizeof(BP_PlayerGauge_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerGauge_C_ReceiveTick");
static_assert(offsetof(BP_PlayerGauge_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerGauge_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.AddPsychicGauge
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerGauge_C_AddPsychicGauge final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAddGauge;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDiffGauge;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPrevPsychicGauge;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467A[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdatePsychicGaugeHUD_bSucess;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467B[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_AddPsychicGauge) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_AddPsychicGauge");
static_assert(sizeof(BP_PlayerGauge_C_AddPsychicGauge) == 0x000030, "Wrong size on BP_PlayerGauge_C_AddPsychicGauge");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, Value) == 0x000000, "Member 'BP_PlayerGauge_C_AddPsychicGauge::Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, LAddGauge) == 0x000004, "Member 'BP_PlayerGauge_C_AddPsychicGauge::LAddGauge' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, LDiffGauge) == 0x000008, "Member 'BP_PlayerGauge_C_AddPsychicGauge::LDiffGauge' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, LPrevPsychicGauge) == 0x00000C, "Member 'BP_PlayerGauge_C_AddPsychicGauge::LPrevPsychicGauge' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000011, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_FClamp_ReturnValue) == 0x00001C, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_UpdatePsychicGaugeHUD_bSucess) == 0x000024, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_UpdatePsychicGaugeHUD_bSucess' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000025, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGauge, CallFunc_FClamp_ReturnValue_1) == 0x00002C, "Member 'BP_PlayerGauge_C_AddPsychicGauge::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetPsychicGaugeMax
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerGauge_C_SetPsychicGaugeMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LGaugeLevel;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdatePsychicGaugeHUD_bSucess;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467C[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467E[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_1;      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467F[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_1;     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_1;    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_SetPsychicGaugeMax) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_SetPsychicGaugeMax");
static_assert(sizeof(BP_PlayerGauge_C_SetPsychicGaugeMax) == 0x000068, "Wrong size on BP_PlayerGauge_C_SetPsychicGaugeMax");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, Value) == 0x000000, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, LGaugeLevel) == 0x000004, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::LGaugeLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, Temp_int_Variable) == 0x000008, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, Temp_int_Variable_1) == 0x00000C, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_UpdatePsychicGaugeHUD_bSucess) == 0x000018, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_UpdatePsychicGaugeHUD_bSucess' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_IsControlAI_bAI) == 0x000019, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000020, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetPlayerManager_PlayerManager) == 0x000030, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetPlayerID_self_CastInput) == 0x000038, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetPlayerID_ReturnValue) == 0x000048, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetLearnedSkillParameter_bLearned) == 0x000049, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetLearnedSkillParameter_Parameter) == 0x00004C, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x000050, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetLearnedSkillParameter_bLearned_1) == 0x000054, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetLearnedSkillParameter_bLearned_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetLearnedSkillParameter_Parameter_1) == 0x000058, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetLearnedSkillParameter_Parameter_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_GetLearnedSkillParameter_Parameter2_1) == 0x00005C, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_GetLearnedSkillParameter_Parameter2_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeMax, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000064, "Member 'BP_PlayerGauge_C_SetPsychicGaugeMax::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.AutoRecoveryPsychicGauge
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerGauge_C_AutoRecoveryPsychicGauge final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4680[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4681[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_AutoRecoveryPsychicGauge");
static_assert(sizeof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge) == 0x000028, "Wrong size on BP_PlayerGauge_C_AutoRecoveryPsychicGauge");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, DeltaSeconds) == 0x000000, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_IsBattling_bBatting) == 0x000011, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, Temp_bool_Variable) == 0x000012, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, K2Node_Select_Default) == 0x000014, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_IsPlayerStatus_Result) == 0x000018, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AutoRecoveryPsychicGauge, CallFunc_IsPlayerStatus_Result_1) == 0x000020, "Member 'BP_PlayerGauge_C_AutoRecoveryPsychicGauge::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.AddPsychicGaugeEnemyDestroy
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy final
{
public:
	bool                                          bBrainCrash;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy) == 0x000001, "Wrong alignment on BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy");
static_assert(sizeof(BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy) == 0x000001, "Wrong size on BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy");
static_assert(offsetof(BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy, bBrainCrash) == 0x000000, "Member 'BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy::bBrainCrash' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.UpdatePsychicGaugeHUD
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerGauge_C_UpdatePsychicGaugeHUD final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4682[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UseParam;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSucess;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSuccess;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4683[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4684[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_UpdatePsychicGaugeHUD");
static_assert(sizeof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD) == 0x000028, "Wrong size on BP_PlayerGauge_C_UpdatePsychicGaugeHUD");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, bUse) == 0x000000, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::bUse' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, UseParam) == 0x000004, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::UseParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, bSucess) == 0x000008, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::bSucess' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, LbSuccess) == 0x000009, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::LbSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, CallFunc_IsControlAI_bAI) == 0x00000A, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000010, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeHUD, CallFunc_IsValid_ReturnValue_1) == 0x000024, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeHUD::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.InitPsychicGaugeMax
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerGauge_C_InitPsychicGaugeMax final
{
public:
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_InitPsychicGaugeMax) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_InitPsychicGaugeMax");
static_assert(sizeof(BP_PlayerGauge_C_InitPsychicGaugeMax) == 0x000010, "Wrong size on BP_PlayerGauge_C_InitPsychicGaugeMax");
static_assert(offsetof(BP_PlayerGauge_C_InitPsychicGaugeMax, CallFunc_GetPlayerFixParam_Param) == 0x000000, "Member 'BP_PlayerGauge_C_InitPsychicGaugeMax::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitPsychicGaugeMax, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerGauge_C_InitPsychicGaugeMax::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.AddBattleBonusRate
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerGauge_C_AddBattleBonusRate final
{
public:
	EBattleBonusAddType                           InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4685[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LMaxRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPrevRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBattleBonusAddType                           Temp_byte_Variable;                                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4686[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsDriveMode_self_CastInput;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4687[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBattleBonusMaxRate_Rate;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableBattleBonus_bEnable;              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4688[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_AddBattleBonusRate) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_AddBattleBonusRate");
static_assert(sizeof(BP_PlayerGauge_C_AddBattleBonusRate) == 0x000050, "Wrong size on BP_PlayerGauge_C_AddBattleBonusRate");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, InType) == 0x000000, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::InType' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, LMaxRate) == 0x000004, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::LMaxRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, LPrevRate) == 0x000008, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::LPrevRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000D, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, Temp_byte_Variable) == 0x00000E, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000F, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x000010, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_IsDriveMode_self_CastInput) == 0x000018, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_IsDriveMode_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_IsDriveMode_bDrive) == 0x000028, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000030, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_GetBattleBonusMaxRate_Rate) == 0x000038, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_GetBattleBonusMaxRate_Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_IsEnableBattleBonus_bEnable) == 0x00003D, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_IsEnableBattleBonus_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, K2Node_Select_Default) == 0x000040, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_FMin_ReturnValue) == 0x000048, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_AddBattleBonusRate, CallFunc_IsControlAI_bAI) == 0x00004C, "Member 'BP_PlayerGauge_C_AddBattleBonusRate::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetBattleBonusModeDrive
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerGauge_C_SetBattleBonusModeDrive final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_SetBattleBonusModeDrive) == 0x000001, "Wrong alignment on BP_PlayerGauge_C_SetBattleBonusModeDrive");
static_assert(sizeof(BP_PlayerGauge_C_SetBattleBonusModeDrive) == 0x000002, "Wrong size on BP_PlayerGauge_C_SetBattleBonusModeDrive");
static_assert(offsetof(BP_PlayerGauge_C_SetBattleBonusModeDrive, bON) == 0x000000, "Member 'BP_PlayerGauge_C_SetBattleBonusModeDrive::bON' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetBattleBonusModeDrive, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'BP_PlayerGauge_C_SetBattleBonusModeDrive::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetBattleBonusModeBrainField
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerGauge_C_SetBattleBonusModeBrainField final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_SetBattleBonusModeBrainField) == 0x000001, "Wrong alignment on BP_PlayerGauge_C_SetBattleBonusModeBrainField");
static_assert(sizeof(BP_PlayerGauge_C_SetBattleBonusModeBrainField) == 0x000002, "Wrong size on BP_PlayerGauge_C_SetBattleBonusModeBrainField");
static_assert(offsetof(BP_PlayerGauge_C_SetBattleBonusModeBrainField, bON) == 0x000000, "Member 'BP_PlayerGauge_C_SetBattleBonusModeBrainField::bON' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetBattleBonusModeBrainField, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'BP_PlayerGauge_C_SetBattleBonusModeBrainField::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.InitializeBattleBonusData
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PlayerGauge_C_InitializeBattleBonusData final
{
public:
	struct FFBattleBonusData                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4689[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFBattleBonusData                      CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0044(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_468A[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468B[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_InitializeBattleBonusData) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_InitializeBattleBonusData");
static_assert(sizeof(BP_PlayerGauge_C_InitializeBattleBonusData) == 0x0000B0, "Wrong size on BP_PlayerGauge_C_InitializeBattleBonusData");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000040, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000044, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000084, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetPlayerID_self_CastInput) == 0x000088, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetPlayerID_ReturnValue) == 0x000098, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_GetPlayerManager_PlayerManager) == 0x0000A0, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_InitializeBattleBonusData, CallFunc_IsSkillLearned_learned) == 0x0000A8, "Member 'BP_PlayerGauge_C_InitializeBattleBonusData::CallFunc_IsSkillLearned_learned' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.EndBattleBonus
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerGauge_C_EndBattleBonus final
{
public:
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_EndBattleBonus) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_EndBattleBonus");
static_assert(sizeof(BP_PlayerGauge_C_EndBattleBonus) == 0x000008, "Wrong size on BP_PlayerGauge_C_EndBattleBonus");
static_assert(offsetof(BP_PlayerGauge_C_EndBattleBonus, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000000, "Member 'BP_PlayerGauge_C_EndBattleBonus::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetPsychicGaugeEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerGauge_C_SetPsychicGaugeEffect final
{
public:
	EPsychicGaugeEffect                           Effect;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSet;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_SetPsychicGaugeEffect) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_SetPsychicGaugeEffect");
static_assert(sizeof(BP_PlayerGauge_C_SetPsychicGaugeEffect) == 0x000010, "Wrong size on BP_PlayerGauge_C_SetPsychicGaugeEffect");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeEffect, Effect) == 0x000000, "Member 'BP_PlayerGauge_C_SetPsychicGaugeEffect::Effect' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeEffect, ClaimantName) == 0x000004, "Member 'BP_PlayerGauge_C_SetPsychicGaugeEffect::ClaimantName' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeEffect, bSet) == 0x00000C, "Member 'BP_PlayerGauge_C_SetPsychicGaugeEffect::bSet' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeEffect, CallFunc_IsControlAI_bAI) == 0x00000D, "Member 'BP_PlayerGauge_C_SetPsychicGaugeEffect::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeEffect, CallFunc_Map_Remove_ReturnValue) == 0x00000E, "Member 'BP_PlayerGauge_C_SetPsychicGaugeEffect::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.UpdatePsychicGaugeEffect
// 0x0070 (0x0070 - 0x0000)
struct BP_PlayerGauge_C_UpdatePsychicGaugeEffect final
{
public:
	EPsychicGaugeEffect                           LEffect;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicGaugeEffect                           Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable_7;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468F[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4690[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPsychicGaugeEffect>                   CallFunc_Map_Values_Values;                        // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_UpdatePsychicGaugeEffect");
static_assert(sizeof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect) == 0x000070, "Wrong size on BP_PlayerGauge_C_UpdatePsychicGaugeEffect");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, LEffect) == 0x000000, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::LEffect' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable) == 0x000004, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_byte_Variable) == 0x000008, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_1) == 0x00000C, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_2) == 0x000010, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_3) == 0x000014, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_4) == 0x000018, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_5) == 0x00001C, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_6) == 0x000020, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Loop_Num_Variable) == 0x000030, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_bool_Variable) == 0x000035, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_RandomBool_ReturnValue) == 0x000036, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_IsControlAI_bAI) == 0x000037, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, Temp_int_Variable_7) == 0x000038, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, K2Node_Select_Default) == 0x00003C, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, K2Node_Select_Default_1) == 0x000040, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000048, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_Map_Values_Values) == 0x000058, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_UpdatePsychicGaugeEffect, CallFunc_Greater_ByteByte_ReturnValue) == 0x00006C, "Member 'BP_PlayerGauge_C_UpdatePsychicGaugeEffect::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetPsychicGaugeRecoveryRate
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate");
static_assert(sizeof(BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate) == 0x000004, "Wrong size on BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate");
static_assert(offsetof(BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate, InRate) == 0x000000, "Member 'BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate::InRate' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetEnableBattleBonus
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerGauge_C_SetEnableBattleBonus final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4691[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LPrevEnable;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4692[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4693[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableBattleBonus_bEnable;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_SetEnableBattleBonus) == 0x000008, "Wrong alignment on BP_PlayerGauge_C_SetEnableBattleBonus");
static_assert(sizeof(BP_PlayerGauge_C_SetEnableBattleBonus) == 0x000028, "Wrong size on BP_PlayerGauge_C_SetEnableBattleBonus");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, bEnable) == 0x000000, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, ClaimantName) == 0x000004, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::ClaimantName' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, LPrevEnable) == 0x00000C, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::LPrevEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000010, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000018, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000019, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, CallFunc_Array_RemoveItem_ReturnValue) == 0x00001A, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, CallFunc_Array_AddUnique_ReturnValue) == 0x00001C, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_SetEnableBattleBonus, CallFunc_IsEnableBattleBonus_bEnable) == 0x000020, "Member 'BP_PlayerGauge_C_SetEnableBattleBonus::CallFunc_IsEnableBattleBonus_bEnable' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.TickBattleBonusOverkillBonus
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerGauge_C_TickBattleBonusOverkillBonus final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_TickBattleBonusOverkillBonus) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_TickBattleBonusOverkillBonus");
static_assert(sizeof(BP_PlayerGauge_C_TickBattleBonusOverkillBonus) == 0x000008, "Wrong size on BP_PlayerGauge_C_TickBattleBonusOverkillBonus");
static_assert(offsetof(BP_PlayerGauge_C_TickBattleBonusOverkillBonus, DeltaSeconds) == 0x000000, "Member 'BP_PlayerGauge_C_TickBattleBonusOverkillBonus::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_TickBattleBonusOverkillBonus, CallFunc_IsOver_ReturnValue) == 0x000004, "Member 'BP_PlayerGauge_C_TickBattleBonusOverkillBonus::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.SetTutorialPsychicGauge
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerGauge_C_SetTutorialPsychicGauge final
{
public:
	bool                                          bTutorial;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_SetTutorialPsychicGauge) == 0x000001, "Wrong alignment on BP_PlayerGauge_C_SetTutorialPsychicGauge");
static_assert(sizeof(BP_PlayerGauge_C_SetTutorialPsychicGauge) == 0x000001, "Wrong size on BP_PlayerGauge_C_SetTutorialPsychicGauge");
static_assert(offsetof(BP_PlayerGauge_C_SetTutorialPsychicGauge, bTutorial) == 0x000000, "Member 'BP_PlayerGauge_C_SetTutorialPsychicGauge::bTutorial' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.GetPsychicGauge
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerGauge_C_GetPsychicGauge final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_GetPsychicGauge) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_GetPsychicGauge");
static_assert(sizeof(BP_PlayerGauge_C_GetPsychicGauge) == 0x000004, "Wrong size on BP_PlayerGauge_C_GetPsychicGauge");
static_assert(offsetof(BP_PlayerGauge_C_GetPsychicGauge, Value) == 0x000000, "Member 'BP_PlayerGauge_C_GetPsychicGauge::Value' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.GetPsychicGaugeMax
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerGauge_C_GetPsychicGaugeMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_GetPsychicGaugeMax) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_GetPsychicGaugeMax");
static_assert(sizeof(BP_PlayerGauge_C_GetPsychicGaugeMax) == 0x000004, "Wrong size on BP_PlayerGauge_C_GetPsychicGaugeMax");
static_assert(offsetof(BP_PlayerGauge_C_GetPsychicGaugeMax, Value) == 0x000000, "Member 'BP_PlayerGauge_C_GetPsychicGaugeMax::Value' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.GetBattleBonusRate
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerGauge_C_GetBattleBonusRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_GetBattleBonusRate) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_GetBattleBonusRate");
static_assert(sizeof(BP_PlayerGauge_C_GetBattleBonusRate) == 0x000004, "Wrong size on BP_PlayerGauge_C_GetBattleBonusRate");
static_assert(offsetof(BP_PlayerGauge_C_GetBattleBonusRate, Rate) == 0x000000, "Member 'BP_PlayerGauge_C_GetBattleBonusRate::Rate' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.GetBattleBonusMaxRate
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerGauge_C_GetBattleBonusMaxRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerGauge_C_GetBattleBonusMaxRate) == 0x000004, "Wrong alignment on BP_PlayerGauge_C_GetBattleBonusMaxRate");
static_assert(sizeof(BP_PlayerGauge_C_GetBattleBonusMaxRate) == 0x000004, "Wrong size on BP_PlayerGauge_C_GetBattleBonusMaxRate");
static_assert(offsetof(BP_PlayerGauge_C_GetBattleBonusMaxRate, Rate) == 0x000000, "Member 'BP_PlayerGauge_C_GetBattleBonusMaxRate::Rate' has a wrong offset!");

// Function BP_PlayerGauge.BP_PlayerGauge_C.IsEnableBattleBonus
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerGauge_C_IsEnableBattleBonus final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerGauge_C_IsEnableBattleBonus) == 0x000001, "Wrong alignment on BP_PlayerGauge_C_IsEnableBattleBonus");
static_assert(sizeof(BP_PlayerGauge_C_IsEnableBattleBonus) == 0x000002, "Wrong size on BP_PlayerGauge_C_IsEnableBattleBonus");
static_assert(offsetof(BP_PlayerGauge_C_IsEnableBattleBonus, bEnable) == 0x000000, "Member 'BP_PlayerGauge_C_IsEnableBattleBonus::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerGauge_C_IsEnableBattleBonus, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000001, "Member 'BP_PlayerGauge_C_IsEnableBattleBonus::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

}

