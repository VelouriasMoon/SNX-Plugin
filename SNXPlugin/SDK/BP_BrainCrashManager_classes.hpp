#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainCrashManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Engine_structs.hpp"
#include "FBrainCrashSequencerInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BrainCrashManager.BP_BrainCrashManager_C
// 0x07C0 (0x0AC0 - 0x0300)
class ABP_BrainCrashManager_C final : public ABrainCrashManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_CrashVisionComponent_C*             BP_CrashVisionComponent;                           // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_BrainCrashPostProcessControl_C*    BPC_BrainCrashPostProcessControl;                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnemyMaterialAccessorComponent_C*   BP_EnemyMaterialAccessorComponent;                 // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMaterialAccessorComponent_C*  BP_PlayerMaterialAccessorComponent;                // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         _______0_Debug_E4B969E14E6370FEABC2749DB4857E7A;   // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            _______0__Direction_E4B969E14E6370FEABC2749DB4857E7A; // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B58[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     _______0;                                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 BrainCrashDilationName;                            // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BaseFOV;                                           // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B59[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessComponent*                  PerformPostProcess;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainCrashCutinCharacter_C*         CutinCharacter;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CutinManager_C*                     CutinManager;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnabledPluseForce;                                 // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5A[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CutinCharacterClassAsset;                          // 0x0378(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          GeneralSequencer0100Asset;                         // 0x03A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ULevelSequence*                         GeneralLevelSequence;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CutinCharacterClass;                               // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldCheckSlowRate;                           // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldCheckTimeSeconds;                        // 0x03DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayGeneralSequencer;                              // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayENPCSequencer;                                 // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5B[0x6];                                     // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   CrashTargetEnemy;                                  // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SequencerRootTransform;                            // 0x03F0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FTransform>                     SequencerJoinPlayerTransform;                      // 0x0420(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTransform                             SequencerEnemyTransform;                           // 0x0430(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UBrainCrashParam*                       Param;                                             // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugParamUniqueOffsetX;                           // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugParamUniqueOffsetY;                           // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugParamUniqueOffsetSeconds;                     // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugUniqueOffsetTime;                             // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeightAdjust_EnemyStartLandCheckOffset;            // 0x0478(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         HeightAdjust_EnemyStartLandDown;                   // 0x0484(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeightAdjust_EnemyUpperOffset;                     // 0x0488(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeightAdjust_EnemyBaseOffset;                      // 0x0494(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeightAdjust_PlayerStartOffset;                    // 0x04A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeightAdjust_PlayerFinalLandOffset;                // 0x04AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightAdjust_PlayerFinalLand;                      // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         HeightAdjust_PlayerJumpUp;                         // 0x04BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          SetupStartRootTransform;                           // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5C[0x7];                                     // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BrainCrashSequencerDilationName;                   // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SequencerDilation;                                 // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B5D[0x4];                                     // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACineCameraActor*                       SequencerCamera;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       InterpolateCamera;                                 // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightAdjust_PlayerStart;                          // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         StartCameraInterpolate;                            // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EndCameraInterpolate;                              // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpolateStartCamera;                            // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5E[0x3];                                     // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerAnimationFinalTransform;                     // 0x0500(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             PlayerMeshRelativeTransform;                       // 0x0530(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SlowCustomTimeDilation;                            // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestUpdatePlayerFinalTransform;                 // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5F[0x3];                                     // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnemyApplyScaleRate;                               // 0x0568(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyApplyScaleTranslateCancel;                    // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyApplyInGameLocationRateXY;                    // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyApplyInGameLocationRateZ;                     // 0x0574(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          FixedLocation;                                     // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          DebugUseDepthOffset;                               // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B60[0x6];                                     // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CrashTargetCore;                                   // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HideDitherTime;                                    // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          HideDitherStart;                                   // 0x058C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_3B61[0x3];                                     // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartEnemyTransform;                               // 0x0590(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           PlayerEndMontage;                                  // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B62[0x8];                                     // 0x05C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EnemyMeshRelativeTransform;                        // 0x05D0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           PlayerEndMontageCache;                             // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBrainCrashLocationSettings*            LocationSafePoint;                                 // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             PlayerStartTransform;                              // 0x0610(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CameraStartLocation;                               // 0x0640(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraStartRotation;                               // 0x064C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreUniquePlayerCameraTransform;                // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugOutLog;                                       // 0x0659(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugForceUnique;                                  // 0x065A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugForceGeneral;                                 // 0x065B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B63[0x4];                                     // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CrashTargetEnemyGeneral;                           // 0x0660(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DebugForceENPCKill;                                // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B64[0x7];                                     // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          GeneralSequencer0200Asset;                         // 0x0678(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          ENPCSequencerDamage0100Asset;                      // 0x06A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          ENPCSequencerKillSolo0100Asset;                    // 0x06C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               JoinPlayers;                                       // 0x06F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          PlayENPCSoloSequencer;                             // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B65[0x7];                                     // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BindingDummyActor;                                 // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayENPCKillSequencer;                             // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          VisibleUI;                                         // 0x0711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ValidUniqueSafePoint;                              // 0x0712(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B66[0xD];                                     // 0x0713(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             UniqueSafePointTransform;                          // 0x0720(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartGeneralDamage;                                // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B67[0x7];                                     // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameTimer>                     GeneralDamageTimers;                               // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          WaitUniqueTimer;                                   // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B68[0x7];                                     // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         ENPCSequenceDamage;                                // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         ENPCSequenceKillSolo;                              // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         ENPCSequenceKillMulti;                             // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          ENPCSequencerKillMulti0100Asset;                   // 0x0788(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	ECollisionEnabled                             RestoreEnemyCollision;                             // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B69[0x7];                                     // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ExcludeBindEnemyID;                                // 0x07B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         GeneralCameraLookatRate;                           // 0x07C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GeneralCameraTarget;                               // 0x07CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GeneralCameraLookatPitch;                          // 0x07D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         GeneralCameraLookatOffsetPitch;                    // 0x07DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UniqueFixedLocation;                               // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6A[0x7];                                     // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          Em8220SequencerKillMulti0100Asset;                 // 0x07E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          ENPCSequencerDamage0200Asset;                      // 0x0810(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          ENPCSequencerKillSolo0200Asset;                    // 0x0838(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          ENPCSequencerKillMulti0200Asset;                   // 0x0860(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           UniqueWaitTimer;                                   // 0x0888(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6B[0x3];                                     // 0x0891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HideDitherFlow;                                    // 0x0894(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UseUniqueCameraInterpolate;                        // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          CacheUseUniqueCameraInterpolate;                   // 0x0899(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FixedLocationTargetUnlock;                         // 0x089A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FixedLocationTargetLockRestore;                    // 0x089B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6C[0x4];                                     // 0x089C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               BrainCrashTargets;                                 // 0x08A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ATriggerEffectManager*                  TrgEffMgr;                                         // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleUIModeBoss;                                 // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayENPCEm8300Sequencer;                           // 0x08B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerID                                     LoadENPCPlayerID;                                  // 0x08BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B6D[0x1];                                     // 0x08BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                KilledEnemyLocation;                               // 0x08BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayBrainFieldClose;                               // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6E[0x3];                                     // 0x08C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQualifiedFrameTime                    CutinFullTime;                                     // 0x08CC(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockBrainCrashTarget;                            // 0x08DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6F[0x3];                                     // 0x08DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQualifiedFrameTime                    SequencerEndFrame;                                 // 0x08E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFBrainCrashSequencerInfo>      SequencerInfoList;                                 // 0x08F0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             CV_CharaInfoListDataTable;                         // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSequencerInfoIndex;                         // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B70[0x4];                                     // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULevelSequence*>                 CrashVisionLevelSequencerList;                     // 0x0910(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         CV_SlowCustomTimeDilationCrashVision;              // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CV_NextCrashVisionPlayerID;                        // 0x0924(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CV_CurrentCrashVisionPlayerID;                     // 0x0925(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B71[0x2];                                     // 0x0926(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CV_SlowCustomTimeNameCrashVision;                  // 0x0928(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Interp, HasGetValueTypeHash)
	class UDataTable*                             CV_EnemyInfoListDataTable;                         // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   CV_CrashTargetEnemy;                               // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 CrashVisionEnemyLevelSequencerList;                // 0x0948(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   CV_NextCrashVisionEnemyChara;                      // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CV_VignetteMaterialAsset;                          // 0x0960(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     CV_VignetteMaterial;                               // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  CV_VignettePostProcess;                            // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CV_VignettePostProcessMaterial;                    // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  NoEventPPC;                                        // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CV_VignetteModulateColor;                          // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CV_IsFirstCrashVisionCheck;                        // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_3B72[0x7];                                     // 0x09B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EventPlayerHologram_C*>      CV_HologramActorList;                              // 0x09C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CV_RemindPlayerMaterials;                          // 0x09D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           CV_MenuPlayerAsset;                                // 0x09E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_MenuPlayerBase_C*>           CV_MenuPlayerClassList;                            // 0x09F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UCurveVector*                           CV_BeforeDirectingCurve;                           // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CV_IsToCrashVisionDirecting;                       // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B73[0x3];                                     // 0x0A09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CV_ToCrashVisionDirectingTime;                     // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CV_CrashVisionCameraFOVBase;                       // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0A14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B74[0x3];                                     // 0x0A15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CV_ToCVDirectingEmitter;                           // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CV_ToCVDirectingAttachPointName;                   // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_MenuPlayerBase_C*>           CV_SubMenuPlayerClassList;                         // 0x0A28(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 CrashVisionLevelSubSequencerList;                  // 0x0A38(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          CV_RukaSubSequencer;                               // 0x0A48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CV_IsCrashVisionInputTimeRange;                    // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B75[0x7];                                     // 0x0A71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CV_ToCVDirectingParticle;                          // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CV_IsCrashVisionInputToNextRange;                  // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CV_IsCrashVisionInputSuccess;                      // 0x0A81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CV_IsCrashVisionInputCheckEnable;                  // 0x0A82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B76[0x1];                                     // 0x0A83(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CV_InputStartFrameOffset;                          // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_InputStartFrameOffsetOn;                     // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B77[0x3];                                     // 0x0A89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Debug_InputStartFrameOffset;                       // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          Em8220SequencerKillMulti0200Asset;                 // 0x0A90(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BrainCrashManager(int32 EntryPoint);
	void OnStingManyCables();
	void OnImpactC_Center();
	void OnImpactB_Center();
	void OnScatter();
	void LoadDefaultCutinMesh();
	void OnCaptureObject();
	void OnStopHoldCapture();
	void OnHoldCapture();
	void OnThrowPerry();
	void OnCrashVision_psychic();
	void OnCrashVision_ch1000();
	void OnCrashVision_ch0900();
	void OnCrashVision_ch0700();
	void OnCrashVision_ch0600_telepo();
	void OnCrashVision_ch0600();
	void OnCrashVision_ch0400();
	void OnCrashVision_ch0800_Spark();
	void OnCrashVision_ch0800();
	void OnCrashVisionCutin();
	void OnCrashVision_ch0500();
	void OnCrashVision_ch0300();
	void CrashHPRecovery(const struct FTransform& OffsetTransform, class FName AttachPointName);
	void OnDeadCrashVision();
	void StartCrashVisionHitUniqueEffect();
	void StartCrashVisionHitEffect();
	void OnHiddenMaskMan();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SlowDilationCrashVision(float Time_Dilation);
	void Event_LoadCrashVision(int32 CrashVisionIndex, int32 PlayerIndex, class ARSBattleCharacter_C* TargetEnemy);
	void PrivateCutinBrainFieldClose();
	void DelayBeginPlay();
	void OnCutLeg2();
	void OnFloatSword2();
	void HideCore();
	void OnCut();
	void OnAttractLong();
	void OnStopPadEffectHalf();
	void OnGiantsSnakeup();
	void OnImpact_Karen_After();
	void OnImpact_Karen();
	void OnAttract_Karen();
	void OnKneel();
	void OnGiantsErase();
	void OnAttract_ENPC();
	void OnCircleEffectBack();
	void OnHandTakeBack();
	void OnImpactC_ENPC();
	void OnImpactB_ENPC();
	void OnImpact_ENPC();
	void OnFallENPC();
	void OnHandForword();
	void OnCircleEffect();
	void OnBeat();
	void OnRotateCamera();
	void OnPartyCapture();
	void OnCapture_ENPC();
	void OnGeneralBreak();
	void OnGeneralSqueeze();
	void OnRaiseHand();
	void OnTailWrap();
	void OnTakeOff();
	void OnCutLeg();
	void OnFloatSword();
	void OnStabTubeImpact();
	void OnBreakWeakPoint();
	void OnFinishPull();
	void OnSqueeze();
	void OnFloatObject();
	void OnRotationAir();
	void OnCarFire();
	void OnLandAndShakeSword();
	void OnHoldSword();
	void OnBackflip();
	void OnLookUp();
	void OnContinuanceCut();
	void OnCreateAvater();
	void OnKickGround();
	void OnBurn();
	void OnStabTube();
	void OnHitObject();
	void OnThrowObject();
	void OnPutStrengthB();
	void OnAttractAround();
	void OnShutterShake();
	void OnSmallExplosion();
	void OnCutWithSword();
	void OnSmallMachineGunR();
	void OnSmallMachineGunL();
	void OnExplosion();
	void OnImpactE();
	void OnFlyingAway();
	void OnWeakPullC();
	void OnAttractandRide();
	void OnJump();
	void OnBossKneel();
	void OnDrop();
	void OnPullHorizontal();
	void OnCrash();
	void OnPullOut();
	void OnThrowShort();
	void OnStopAllPadEffect();
	void OnHitGatheredStone();
	void OnThrowLToR();
	void OnHitStone();
	void OnThrowRToL();
	void OnBossFall();
	void OnImpactD();
	void OnPutStrength();
	void OnAttractandJump();
	void OnShake();
	void OnRotationSky();
	void OnLanding();
	void OnShaveEnemy();
	void OnTrampling();
	void OnCutup();
	void OnShaveGround();
	void OnSuppressVolumeForReleaseWater();
	void OnStopReleaseWater();
	void OnThrow();
	void OnAttractForEm0300();
	void OnReleaseRandomWater();
	void OnReleaseWater();
	void OnSlideRForPlayer();
	void OnStopTwistFaucet();
	void OnTwistFaucet();
	void OnStartTwistingFaucet();
	void OnCapture();
	void OnLiftup();
	void OnThrowSword();
	void OnLiftB();
	void OnSwordStab();
	void OnSwing();
	void OnSwordSpins();
	void OnWeakPullB();
	void OnCatchAndHold();
	void OnHolding();
	void OnCatch();
	void OnRotation();
	void OnLift();
	void OnSlam();
	void OnWeakPull();
	void OnStopImpact();
	void OnImpactC();
	void OnImpactB();
	void OnHold();
	void OnAttract();
	void OnImpact();
	void SetupCutinDilationTime();
	void UniqueWaitTimerEnd();
	void UniqueWaitTimerStart();
	void GeneralDamage();
	void SetVisibleUIOff();
	void SetVisibleUIOn();
	void StartGeneralCutin();
	void FinishUniqueTransform();
	void StartUniqueCutin();
	void OtherActorVisible();
	void SlowDilation(float Time_Dilation);
	void EndSlowSequencer();
	void StartSlowSequencer();
	void OnPlayerFootIK(const struct FSEventSequencerBool& Enable);
	void OnCheckBrainFieldOverwrite_Restart();
	void OnCheckBrainFieldOverwrite();
	void Private_SetupTimedilation();
	void Private_EndCutin();
	void OnSequencerFinished();
	void OnStartCutin();
	void OnEnemyFloating();
	void OnPlayerMotion();
	void OnDead();
	void EndSlow();
	void StartSlow();
	void PlayParticle();
	void PlayBrainCrash();
	void PlayBrainCrashSequencer();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PrivateLoadENPC(bool Damage, bool KillSolo, bool KillMulti, bool LoadEm8220, bool ASyncLoading);
	void OnLoaded_8787A5B545EDF86468577ABEA3D32D1C(class UObject* Loaded);
	void OnLoaded_756F5E814049ECD7C28C708A311C1A6A(class UObject* Loaded);
	void OnLoaded_E5C2BEF44E9F80A82237E3AE5021E4BB(class UObject* Loaded);
	void OnLoaded_890FCC2347A12411718D4BAB127C5D91(class UClass* Loaded);
	void OnLoaded_2ADDCF3F4A5CFB5E43492C9CE1F92B24(class UClass* Loaded);
	void OnLoaded_AF7EF5014B0DE89A2C261D81205A89AB(class UObject* Loaded);
	void OnLoaded_344D119745EB95B4B7F5CFA7F5A0B1E3(class UObject* Loaded);
	void OnLoaded_33D5999B4C06E16493524A8CA8AEEB06(class UObject* Loaded);
	void OnLoaded_B234BA9E4B9FA682314A0AB58DA24026(class UObject* Loaded);
	void OnLoaded_9AAF0560439FC75A4D4CA984758A7DF3(class UObject* Loaded);
	void _______0__UpdateFunc();
	void _______0__FinishedFunc();
	void UpdateBlurCenterPositiion(class AActor* TargetEnemy);
	void GetCutinManager(class ABP_CutinManager_C** Param_CutinManager);
	void SetActiveCutinActor(bool Active);
	void LoadAssets();
	void PrivateCheckBrainFieldOverwrite(bool* Overwrite);
	void PrivateSetupBrainFieldOverwrite();
	void PrivateSetupBrainFieldRestart();
	void PrivateStartBrainCrash();
	void PrivatePlayBrainCrashSequencer();
	void PrivateUpdate(float DeltaSeconds);
	void IsPlayingUniqueBrainCrash(bool* IsUnique);
	void IsPlayingGeneralBrainCrash(bool* IsGeneral);
	void PrivateInitialize();
	void PrivateFinishBrainCrashSequencer();
	void PrivateCalcUniqueCrashStartTransform(struct FTransform* Transform);
	void Private_Calc_Unique_Crash_Finish_Restore_Transform_FixedLoc(class ARSCharacterBase* Character, const struct FTransform& MotionTransform, struct FTransform* Transform);
	void PrivateEventSetPlayerFootIK(bool Enable);
	void PrivateUpdateDebug(float DeltaSeconds);
	void PrivateUpdateTransformAdjust();
	void IsPlayingAnyBrainCrash(bool* NowPlaying);
	void SetStartRootTransform(const struct FTransform& Transform);
	void PrivateUpdateUniqueCamera(float DeltaSeconds);
	void Private_Calc_Unique_Crash_Finish_Restore_Transform_FreeLoc(class ARSCharacterBase* Enemy, class ARSCharacterBase* MainPlayer, struct FTransform* Transform);
	void PrivateGetPlayerFinalTransform();
	void PrivateUpdateFixedLocation(float DeltaSeconds);
	void PrivateUpdateActorDepthOffset(float DeltaSeconds);
	void PrivateEnableActorDepthOffset(class ARSCharacterBase* Character, bool Enable);
	void PrivateEnableSkeletalDepthOffset(class USkeletalMeshComponent* SkeletalMesh, bool Enable);
	void PrivateUpdateDither(float DeltaSeconds, bool* Finish);
	void PrivateOnCameraCutChange(class UCameraComponent* CameraComp);
	void SearchSafePoint(const struct FVector& PlayerLocation, const struct FVector& TargetLocation, class ARSBattleCharacter_C* TargetEnemy, bool* Valid, struct FTransform* RootTransform);
	void ReloadSafePointData();
	void LoadSafePointData(int32 LoationID, int32 AreaId);
	void GetSafePointLocationData(class UBrainCrashLocationSettings** Param_LocationSafePoint);
	void PrivatePlaySequencerPlayer();
	void Event_Delayed_Play_Unique_Sequencer_Player();
	void Private_Finish_Unique_Restore_Player_Camera_Transform(bool Interrupt);
	void PrivateGetENPCLoadSequenceAssets(bool LoadEm8220, TSoftObjectPtr<class ULevelSequence>* Damage, TSoftObjectPtr<class ULevelSequence>* KillSolo, TSoftObjectPtr<class ULevelSequence>* KillMulti);
	void PrivateSequencerBindingGeneral(class ARSCharacterBase* MainPlayer, const struct FFBrainCrashSequencerInfo& BrainCrashSequencerInfo);
	void PrivateSequencerBindingUnique(class ARSCharacterBase* MainPlayer, class ARSCharacterBase* LeftPlayer, class ARSCharacterBase* RightPlayer);
	void PrintWarning(const class FText& Message, bool NoSequence);
	void PrivateSetupTypeSequencer(class ARSCharacterBase* MainPlayer, bool IsCrashVisionFlow);
	void PrivateGeneralDamageSetup();
	void PrivateUpdateGeneralDamage(float DeltaSeconds);
	void GetPlayerStartTransform(bool AddMeshRelative, struct FTransform* Transform);
	void LoadENPC(bool Damage, bool KillSolo, bool KillMulti, bool LoadEm8220, bool ASyncLoading);
	void UnloadENPC();
	void PrivateCalcTransform(const struct FTransform& ActorTransform, const struct FTransform& RelativeComponentTransform, struct FTransform* Transform);
	void AttachWeapon(bool ForceBattle);
	void PrivateUpdateGeneral(float DeltaSeconds);
	void PrivateFinishRestoreMaterial();
	void GetUniqueWaitTime(float* RemainTime);
	void GetCrashTargetEnemyGeneralNames(TArray<class FString>* TargetEnemyNames, int32* TargetNum, bool* bGeneral);
	void GetCrashTargetAndIsGeneral();
	void ReloadPlayerSequencer(EPlayerID PlayerId);
	void IsCrashTargetSeeThroughStealth(bool* SeeThroughStealth);
	void GetENPCBrainCrashType(bool* IsEnpc, bool* IsKill, bool* IsSolo);
	void PrivateResetLevelSequenceActor();
	void CheckBrainCrashKill(bool bGeneral);
	bool IsNeedFrameWait();
	void Calc_Not_Bried_Camera_Location(float PlayerToEnemyYaw, const struct FVector& CutCameraVector, const struct FVector& PlayerBaseLocation, struct FVector* NewLocation, bool* Bried);
	void UnloadENPCCheck(class ARSBattlePlayer_C* Player);
	void SpawnKilledEnemyDropItem();
	void PrivateSetupCutinCloseBrainFieldClose();
	void GetSequencerDilation(float* Dilation);
	void CV_ProtectedSetupPlayRangeMarkInternal(const class FString& MarkName, bool IsPauseAtEnd, int32 FrameOffset, bool* HasMark);
	void CV_ProtectedOnCVInputStartResult();
	void CV_ProtectedOnCVInputEndResult();
	void CV_ProtectedSetupPlayRangeMarkCVInputStart();
	void CV_ProtectedSetupPlayRangeMarkCVInputEnd();
	void BindBrainCrashSequenceEnd(class ALevelSequenceActor* LevelSequencer);
	void UnbindBrainCrashSequenceEnd(class ALevelSequenceActor* LevelSequencer);
	void GetCurrentSequencer(class ARSLevelSequenceActor** Sequencer);
	void GetCurrentEnemySequencer(class ARSLevelSequenceActor** Sequencer);
	void GetCurrentSeqUniqueRoot(class ABP_EventCameraRoot_C** SeqUniqueRoot);
	void GetCurrentSeqCameraRoot(class ABP_EventCameraRoot_C** SeqCameraRoot);
	void GetCurrentSeqUniquePlayerRoot(class ABP_EventCameraRoot_C** SeqUniquePlayerRoot);
	void GetCurrentSeqUniqueEnemyRoot(class ABP_EventCameraRoot_C** SeqUniqueEnemyRoot);
	void GetCurrentBrainCrashSequencerInfo(struct FFBrainCrashSequencerInfo* BrainCrashSequencerInfo);
	void CV_LoadCrashVision(int32 CrashVisionIndex, int32 PlayerIndex, class ARSBattleCharacter_C* TargetEnemy);
	void CV_LoadNextCrashVision(int32 PlayerIndex);
	void CV_ChangeNextCrashVisionIndex();
	void CV_GetEnemySequencer(class ARSBattleCharacter_C* TargetEnemy, TSoftObjectPtr<class ULevelSequence>* Sequencer);
	void CV_IsExistNextCrashVision(bool* IsExistNextCrashVision);
	void PrivateBrainCrashStartInitialize();
	void PrivateFinishBrainCrashSequencer_CVLoop();
	void UpdateHologramActor(bool IsHologramEnable);
	void CV_SetRemindPlayerMaterials();
	void CV_SetRestorePlayerMaterials();
	void CV_GotoNextCrashVision();
	void CV_BindMenuPlayer(class ABP_MenuPlayerBase_C* MenuPlayer, class ARSLevelSequenceActor* Sequencer, bool IsKyokaCopy);
	void CV_SetEquipMenuPlayer(class ABP_MenuPlayerBase_C* MenuPlayer, EPlayerID PlayerId);
	void CV_SetHologramPatamFromCurve(float InTime, bool IsUpdateMaterials);
	void CV_RemindCameraFov();
	void CV_StartToCrashVisionDirecting();
	void Get_Current_Crash_Vision_Player(EPlayerID* PlayerId);
	void GetCurrentSubSequencer(class ARSLevelSequenceActor** SubSequencer);
	void CV_PlayCrashVisionVoice(EPlayerID InPlayerID);
	void ReleaseCrashVisionAsset();
	void CV_ProtectedUpdateLukaAttachSequencerPos();
	void GetCurrentSubSeqUniqueRoot(class ABP_EventCameraRoot_C** SubSequencer);
	void OnCrashHPRecovery(const struct FTransform& OffsetTransform, class FName AttachPointName);
	void PrivateHologramMaterialParameterPop();
	void CV_StartSlowAndVignette();
	void IsSoloENPCSequencer(bool* bSolo);
	void GetCrashTargetEnemyList(TArray<class ARSCharacterBase*>* TargetEnemy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BrainCrashManager_C">();
	}
	static class ABP_BrainCrashManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BrainCrashManager_C>();
	}
};
static_assert(alignof(ABP_BrainCrashManager_C) == 0x000010, "Wrong alignment on ABP_BrainCrashManager_C");
static_assert(sizeof(ABP_BrainCrashManager_C) == 0x000AC0, "Wrong size on ABP_BrainCrashManager_C");
static_assert(offsetof(ABP_BrainCrashManager_C, UberGraphFrame) == 0x000300, "Member 'ABP_BrainCrashManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BP_CrashVisionComponent) == 0x000308, "Member 'ABP_BrainCrashManager_C::BP_CrashVisionComponent' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BPC_BrainCrashPostProcessControl) == 0x000310, "Member 'ABP_BrainCrashManager_C::BPC_BrainCrashPostProcessControl' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BP_EnemyMaterialAccessorComponent) == 0x000318, "Member 'ABP_BrainCrashManager_C::BP_EnemyMaterialAccessorComponent' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BP_PlayerMaterialAccessorComponent) == 0x000320, "Member 'ABP_BrainCrashManager_C::BP_PlayerMaterialAccessorComponent' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DefaultSceneRoot) == 0x000328, "Member 'ABP_BrainCrashManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, _______0_Debug_E4B969E14E6370FEABC2749DB4857E7A) == 0x000330, "Member 'ABP_BrainCrashManager_C::_______0_Debug_E4B969E14E6370FEABC2749DB4857E7A' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, _______0__Direction_E4B969E14E6370FEABC2749DB4857E7A) == 0x000334, "Member 'ABP_BrainCrashManager_C::_______0__Direction_E4B969E14E6370FEABC2749DB4857E7A' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, _______0) == 0x000338, "Member 'ABP_BrainCrashManager_C::_______0' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BrainCrashDilationName) == 0x000340, "Member 'ABP_BrainCrashManager_C::BrainCrashDilationName' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BaseFOV) == 0x000350, "Member 'ABP_BrainCrashManager_C::BaseFOV' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PerformPostProcess) == 0x000358, "Member 'ABP_BrainCrashManager_C::PerformPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CutinCharacter) == 0x000360, "Member 'ABP_BrainCrashManager_C::CutinCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CutinManager) == 0x000368, "Member 'ABP_BrainCrashManager_C::CutinManager' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EnabledPluseForce) == 0x000370, "Member 'ABP_BrainCrashManager_C::EnabledPluseForce' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CutinCharacterClassAsset) == 0x000378, "Member 'ABP_BrainCrashManager_C::CutinCharacterClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralSequencer0100Asset) == 0x0003A0, "Member 'ABP_BrainCrashManager_C::GeneralSequencer0100Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralLevelSequence) == 0x0003C8, "Member 'ABP_BrainCrashManager_C::GeneralLevelSequence' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CutinCharacterClass) == 0x0003D0, "Member 'ABP_BrainCrashManager_C::CutinCharacterClass' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BrainFieldCheckSlowRate) == 0x0003D8, "Member 'ABP_BrainCrashManager_C::BrainFieldCheckSlowRate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BrainFieldCheckTimeSeconds) == 0x0003DC, "Member 'ABP_BrainCrashManager_C::BrainFieldCheckTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayGeneralSequencer) == 0x0003E0, "Member 'ABP_BrainCrashManager_C::PlayGeneralSequencer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayENPCSequencer) == 0x0003E1, "Member 'ABP_BrainCrashManager_C::PlayENPCSequencer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CrashTargetEnemy) == 0x0003E8, "Member 'ABP_BrainCrashManager_C::CrashTargetEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerRootTransform) == 0x0003F0, "Member 'ABP_BrainCrashManager_C::SequencerRootTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerJoinPlayerTransform) == 0x000420, "Member 'ABP_BrainCrashManager_C::SequencerJoinPlayerTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerEnemyTransform) == 0x000430, "Member 'ABP_BrainCrashManager_C::SequencerEnemyTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, Param) == 0x000460, "Member 'ABP_BrainCrashManager_C::Param' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugParamUniqueOffsetX) == 0x000468, "Member 'ABP_BrainCrashManager_C::DebugParamUniqueOffsetX' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugParamUniqueOffsetY) == 0x00046C, "Member 'ABP_BrainCrashManager_C::DebugParamUniqueOffsetY' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugParamUniqueOffsetSeconds) == 0x000470, "Member 'ABP_BrainCrashManager_C::DebugParamUniqueOffsetSeconds' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugUniqueOffsetTime) == 0x000474, "Member 'ABP_BrainCrashManager_C::DebugUniqueOffsetTime' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_EnemyStartLandCheckOffset) == 0x000478, "Member 'ABP_BrainCrashManager_C::HeightAdjust_EnemyStartLandCheckOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_EnemyStartLandDown) == 0x000484, "Member 'ABP_BrainCrashManager_C::HeightAdjust_EnemyStartLandDown' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_EnemyUpperOffset) == 0x000488, "Member 'ABP_BrainCrashManager_C::HeightAdjust_EnemyUpperOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_EnemyBaseOffset) == 0x000494, "Member 'ABP_BrainCrashManager_C::HeightAdjust_EnemyBaseOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_PlayerStartOffset) == 0x0004A0, "Member 'ABP_BrainCrashManager_C::HeightAdjust_PlayerStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_PlayerFinalLandOffset) == 0x0004AC, "Member 'ABP_BrainCrashManager_C::HeightAdjust_PlayerFinalLandOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_PlayerFinalLand) == 0x0004B8, "Member 'ABP_BrainCrashManager_C::HeightAdjust_PlayerFinalLand' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_PlayerJumpUp) == 0x0004BC, "Member 'ABP_BrainCrashManager_C::HeightAdjust_PlayerJumpUp' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SetupStartRootTransform) == 0x0004C0, "Member 'ABP_BrainCrashManager_C::SetupStartRootTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BrainCrashSequencerDilationName) == 0x0004C8, "Member 'ABP_BrainCrashManager_C::BrainCrashSequencerDilationName' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerDilation) == 0x0004D8, "Member 'ABP_BrainCrashManager_C::SequencerDilation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerCamera) == 0x0004E0, "Member 'ABP_BrainCrashManager_C::SequencerCamera' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, InterpolateCamera) == 0x0004E8, "Member 'ABP_BrainCrashManager_C::InterpolateCamera' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HeightAdjust_PlayerStart) == 0x0004F0, "Member 'ABP_BrainCrashManager_C::HeightAdjust_PlayerStart' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, StartCameraInterpolate) == 0x0004F4, "Member 'ABP_BrainCrashManager_C::StartCameraInterpolate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EndCameraInterpolate) == 0x0004F8, "Member 'ABP_BrainCrashManager_C::EndCameraInterpolate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, InterpolateStartCamera) == 0x0004FC, "Member 'ABP_BrainCrashManager_C::InterpolateStartCamera' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayerAnimationFinalTransform) == 0x000500, "Member 'ABP_BrainCrashManager_C::PlayerAnimationFinalTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayerMeshRelativeTransform) == 0x000530, "Member 'ABP_BrainCrashManager_C::PlayerMeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SlowCustomTimeDilation) == 0x000560, "Member 'ABP_BrainCrashManager_C::SlowCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, RequestUpdatePlayerFinalTransform) == 0x000564, "Member 'ABP_BrainCrashManager_C::RequestUpdatePlayerFinalTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EnemyApplyScaleRate) == 0x000568, "Member 'ABP_BrainCrashManager_C::EnemyApplyScaleRate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EnemyApplyScaleTranslateCancel) == 0x00056C, "Member 'ABP_BrainCrashManager_C::EnemyApplyScaleTranslateCancel' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EnemyApplyInGameLocationRateXY) == 0x000570, "Member 'ABP_BrainCrashManager_C::EnemyApplyInGameLocationRateXY' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EnemyApplyInGameLocationRateZ) == 0x000574, "Member 'ABP_BrainCrashManager_C::EnemyApplyInGameLocationRateZ' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, FixedLocation) == 0x000578, "Member 'ABP_BrainCrashManager_C::FixedLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugUseDepthOffset) == 0x000579, "Member 'ABP_BrainCrashManager_C::DebugUseDepthOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CrashTargetCore) == 0x000580, "Member 'ABP_BrainCrashManager_C::CrashTargetCore' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HideDitherTime) == 0x000588, "Member 'ABP_BrainCrashManager_C::HideDitherTime' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HideDitherStart) == 0x00058C, "Member 'ABP_BrainCrashManager_C::HideDitherStart' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, StartEnemyTransform) == 0x000590, "Member 'ABP_BrainCrashManager_C::StartEnemyTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayerEndMontage) == 0x0005C0, "Member 'ABP_BrainCrashManager_C::PlayerEndMontage' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, EnemyMeshRelativeTransform) == 0x0005D0, "Member 'ABP_BrainCrashManager_C::EnemyMeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayerEndMontageCache) == 0x000600, "Member 'ABP_BrainCrashManager_C::PlayerEndMontageCache' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, LocationSafePoint) == 0x000608, "Member 'ABP_BrainCrashManager_C::LocationSafePoint' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayerStartTransform) == 0x000610, "Member 'ABP_BrainCrashManager_C::PlayerStartTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CameraStartLocation) == 0x000640, "Member 'ABP_BrainCrashManager_C::CameraStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CameraStartRotation) == 0x00064C, "Member 'ABP_BrainCrashManager_C::CameraStartRotation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, RestoreUniquePlayerCameraTransform) == 0x000658, "Member 'ABP_BrainCrashManager_C::RestoreUniquePlayerCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugOutLog) == 0x000659, "Member 'ABP_BrainCrashManager_C::DebugOutLog' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugForceUnique) == 0x00065A, "Member 'ABP_BrainCrashManager_C::DebugForceUnique' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugForceGeneral) == 0x00065B, "Member 'ABP_BrainCrashManager_C::DebugForceGeneral' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CrashTargetEnemyGeneral) == 0x000660, "Member 'ABP_BrainCrashManager_C::CrashTargetEnemyGeneral' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, DebugForceENPCKill) == 0x000670, "Member 'ABP_BrainCrashManager_C::DebugForceENPCKill' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralSequencer0200Asset) == 0x000678, "Member 'ABP_BrainCrashManager_C::GeneralSequencer0200Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequencerDamage0100Asset) == 0x0006A0, "Member 'ABP_BrainCrashManager_C::ENPCSequencerDamage0100Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequencerKillSolo0100Asset) == 0x0006C8, "Member 'ABP_BrainCrashManager_C::ENPCSequencerKillSolo0100Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, JoinPlayers) == 0x0006F0, "Member 'ABP_BrainCrashManager_C::JoinPlayers' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayENPCSoloSequencer) == 0x000700, "Member 'ABP_BrainCrashManager_C::PlayENPCSoloSequencer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BindingDummyActor) == 0x000708, "Member 'ABP_BrainCrashManager_C::BindingDummyActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayENPCKillSequencer) == 0x000710, "Member 'ABP_BrainCrashManager_C::PlayENPCKillSequencer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, VisibleUI) == 0x000711, "Member 'ABP_BrainCrashManager_C::VisibleUI' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ValidUniqueSafePoint) == 0x000712, "Member 'ABP_BrainCrashManager_C::ValidUniqueSafePoint' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, UniqueSafePointTransform) == 0x000720, "Member 'ABP_BrainCrashManager_C::UniqueSafePointTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, StartGeneralDamage) == 0x000750, "Member 'ABP_BrainCrashManager_C::StartGeneralDamage' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralDamageTimers) == 0x000758, "Member 'ABP_BrainCrashManager_C::GeneralDamageTimers' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, WaitUniqueTimer) == 0x000768, "Member 'ABP_BrainCrashManager_C::WaitUniqueTimer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequenceDamage) == 0x000770, "Member 'ABP_BrainCrashManager_C::ENPCSequenceDamage' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequenceKillSolo) == 0x000778, "Member 'ABP_BrainCrashManager_C::ENPCSequenceKillSolo' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequenceKillMulti) == 0x000780, "Member 'ABP_BrainCrashManager_C::ENPCSequenceKillMulti' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequencerKillMulti0100Asset) == 0x000788, "Member 'ABP_BrainCrashManager_C::ENPCSequencerKillMulti0100Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, RestoreEnemyCollision) == 0x0007B0, "Member 'ABP_BrainCrashManager_C::RestoreEnemyCollision' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ExcludeBindEnemyID) == 0x0007B8, "Member 'ABP_BrainCrashManager_C::ExcludeBindEnemyID' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralCameraLookatRate) == 0x0007C8, "Member 'ABP_BrainCrashManager_C::GeneralCameraLookatRate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralCameraTarget) == 0x0007CC, "Member 'ABP_BrainCrashManager_C::GeneralCameraTarget' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralCameraLookatPitch) == 0x0007D8, "Member 'ABP_BrainCrashManager_C::GeneralCameraLookatPitch' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, GeneralCameraLookatOffsetPitch) == 0x0007DC, "Member 'ABP_BrainCrashManager_C::GeneralCameraLookatOffsetPitch' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, UniqueFixedLocation) == 0x0007E0, "Member 'ABP_BrainCrashManager_C::UniqueFixedLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, Em8220SequencerKillMulti0100Asset) == 0x0007E8, "Member 'ABP_BrainCrashManager_C::Em8220SequencerKillMulti0100Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequencerDamage0200Asset) == 0x000810, "Member 'ABP_BrainCrashManager_C::ENPCSequencerDamage0200Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequencerKillSolo0200Asset) == 0x000838, "Member 'ABP_BrainCrashManager_C::ENPCSequencerKillSolo0200Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, ENPCSequencerKillMulti0200Asset) == 0x000860, "Member 'ABP_BrainCrashManager_C::ENPCSequencerKillMulti0200Asset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, UniqueWaitTimer) == 0x000888, "Member 'ABP_BrainCrashManager_C::UniqueWaitTimer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, IsPlay) == 0x000890, "Member 'ABP_BrainCrashManager_C::IsPlay' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, HideDitherFlow) == 0x000894, "Member 'ABP_BrainCrashManager_C::HideDitherFlow' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, UseUniqueCameraInterpolate) == 0x000898, "Member 'ABP_BrainCrashManager_C::UseUniqueCameraInterpolate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CacheUseUniqueCameraInterpolate) == 0x000899, "Member 'ABP_BrainCrashManager_C::CacheUseUniqueCameraInterpolate' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, FixedLocationTargetUnlock) == 0x00089A, "Member 'ABP_BrainCrashManager_C::FixedLocationTargetUnlock' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, FixedLocationTargetLockRestore) == 0x00089B, "Member 'ABP_BrainCrashManager_C::FixedLocationTargetLockRestore' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, BrainCrashTargets) == 0x0008A0, "Member 'ABP_BrainCrashManager_C::BrainCrashTargets' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, TrgEffMgr) == 0x0008B0, "Member 'ABP_BrainCrashManager_C::TrgEffMgr' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, VisibleUIModeBoss) == 0x0008B8, "Member 'ABP_BrainCrashManager_C::VisibleUIModeBoss' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayENPCEm8300Sequencer) == 0x0008B9, "Member 'ABP_BrainCrashManager_C::PlayENPCEm8300Sequencer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, LoadENPCPlayerID) == 0x0008BA, "Member 'ABP_BrainCrashManager_C::LoadENPCPlayerID' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, KilledEnemyLocation) == 0x0008BC, "Member 'ABP_BrainCrashManager_C::KilledEnemyLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, PlayBrainFieldClose) == 0x0008C8, "Member 'ABP_BrainCrashManager_C::PlayBrainFieldClose' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CutinFullTime) == 0x0008CC, "Member 'ABP_BrainCrashManager_C::CutinFullTime' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, IsLockBrainCrashTarget) == 0x0008DC, "Member 'ABP_BrainCrashManager_C::IsLockBrainCrashTarget' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerEndFrame) == 0x0008E0, "Member 'ABP_BrainCrashManager_C::SequencerEndFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, SequencerInfoList) == 0x0008F0, "Member 'ABP_BrainCrashManager_C::SequencerInfoList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_CharaInfoListDataTable) == 0x000900, "Member 'ABP_BrainCrashManager_C::CV_CharaInfoListDataTable' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CurrentSequencerInfoIndex) == 0x000908, "Member 'ABP_BrainCrashManager_C::CurrentSequencerInfoIndex' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CrashVisionLevelSequencerList) == 0x000910, "Member 'ABP_BrainCrashManager_C::CrashVisionLevelSequencerList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_SlowCustomTimeDilationCrashVision) == 0x000920, "Member 'ABP_BrainCrashManager_C::CV_SlowCustomTimeDilationCrashVision' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_NextCrashVisionPlayerID) == 0x000924, "Member 'ABP_BrainCrashManager_C::CV_NextCrashVisionPlayerID' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_CurrentCrashVisionPlayerID) == 0x000925, "Member 'ABP_BrainCrashManager_C::CV_CurrentCrashVisionPlayerID' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_SlowCustomTimeNameCrashVision) == 0x000928, "Member 'ABP_BrainCrashManager_C::CV_SlowCustomTimeNameCrashVision' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_EnemyInfoListDataTable) == 0x000938, "Member 'ABP_BrainCrashManager_C::CV_EnemyInfoListDataTable' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_CrashTargetEnemy) == 0x000940, "Member 'ABP_BrainCrashManager_C::CV_CrashTargetEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CrashVisionEnemyLevelSequencerList) == 0x000948, "Member 'ABP_BrainCrashManager_C::CrashVisionEnemyLevelSequencerList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_NextCrashVisionEnemyChara) == 0x000958, "Member 'ABP_BrainCrashManager_C::CV_NextCrashVisionEnemyChara' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_VignetteMaterialAsset) == 0x000960, "Member 'ABP_BrainCrashManager_C::CV_VignetteMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_VignetteMaterial) == 0x000988, "Member 'ABP_BrainCrashManager_C::CV_VignetteMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_VignettePostProcess) == 0x000990, "Member 'ABP_BrainCrashManager_C::CV_VignettePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_VignettePostProcessMaterial) == 0x000998, "Member 'ABP_BrainCrashManager_C::CV_VignettePostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, NoEventPPC) == 0x0009A0, "Member 'ABP_BrainCrashManager_C::NoEventPPC' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_VignetteModulateColor) == 0x0009A8, "Member 'ABP_BrainCrashManager_C::CV_VignetteModulateColor' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_IsFirstCrashVisionCheck) == 0x0009B8, "Member 'ABP_BrainCrashManager_C::CV_IsFirstCrashVisionCheck' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_HologramActorList) == 0x0009C0, "Member 'ABP_BrainCrashManager_C::CV_HologramActorList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_RemindPlayerMaterials) == 0x0009D0, "Member 'ABP_BrainCrashManager_C::CV_RemindPlayerMaterials' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_MenuPlayerAsset) == 0x0009E0, "Member 'ABP_BrainCrashManager_C::CV_MenuPlayerAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_MenuPlayerClassList) == 0x0009F0, "Member 'ABP_BrainCrashManager_C::CV_MenuPlayerClassList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_BeforeDirectingCurve) == 0x000A00, "Member 'ABP_BrainCrashManager_C::CV_BeforeDirectingCurve' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_IsToCrashVisionDirecting) == 0x000A08, "Member 'ABP_BrainCrashManager_C::CV_IsToCrashVisionDirecting' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_ToCrashVisionDirectingTime) == 0x000A0C, "Member 'ABP_BrainCrashManager_C::CV_ToCrashVisionDirectingTime' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_CrashVisionCameraFOVBase) == 0x000A10, "Member 'ABP_BrainCrashManager_C::CV_CrashVisionCameraFOVBase' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, NewVar_0) == 0x000A14, "Member 'ABP_BrainCrashManager_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_ToCVDirectingEmitter) == 0x000A18, "Member 'ABP_BrainCrashManager_C::CV_ToCVDirectingEmitter' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_ToCVDirectingAttachPointName) == 0x000A20, "Member 'ABP_BrainCrashManager_C::CV_ToCVDirectingAttachPointName' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_SubMenuPlayerClassList) == 0x000A28, "Member 'ABP_BrainCrashManager_C::CV_SubMenuPlayerClassList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CrashVisionLevelSubSequencerList) == 0x000A38, "Member 'ABP_BrainCrashManager_C::CrashVisionLevelSubSequencerList' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_RukaSubSequencer) == 0x000A48, "Member 'ABP_BrainCrashManager_C::CV_RukaSubSequencer' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_IsCrashVisionInputTimeRange) == 0x000A70, "Member 'ABP_BrainCrashManager_C::CV_IsCrashVisionInputTimeRange' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_ToCVDirectingParticle) == 0x000A78, "Member 'ABP_BrainCrashManager_C::CV_ToCVDirectingParticle' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_IsCrashVisionInputToNextRange) == 0x000A80, "Member 'ABP_BrainCrashManager_C::CV_IsCrashVisionInputToNextRange' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_IsCrashVisionInputSuccess) == 0x000A81, "Member 'ABP_BrainCrashManager_C::CV_IsCrashVisionInputSuccess' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_IsCrashVisionInputCheckEnable) == 0x000A82, "Member 'ABP_BrainCrashManager_C::CV_IsCrashVisionInputCheckEnable' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, CV_InputStartFrameOffset) == 0x000A84, "Member 'ABP_BrainCrashManager_C::CV_InputStartFrameOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, Debug_InputStartFrameOffsetOn) == 0x000A88, "Member 'ABP_BrainCrashManager_C::Debug_InputStartFrameOffsetOn' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, Debug_InputStartFrameOffset) == 0x000A8C, "Member 'ABP_BrainCrashManager_C::Debug_InputStartFrameOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainCrashManager_C, Em8220SequencerKillMulti0200Asset) == 0x000A90, "Member 'ABP_BrainCrashManager_C::Em8220SequencerKillMulti0200Asset' has a wrong offset!");

}

