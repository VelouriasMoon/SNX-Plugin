#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_MakeEventFunction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EShadaAnimeType_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "ECharaCapChangeSpeedType_structs.hpp"
#include "ERenderTargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_MakeEventFunction.BPFL_MakeEventFunction_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_MakeEventFunction_C final : public UBlueprintFunctionLibrary
{
public:
	static void SetBoardTextureScrollSpeed(int32 CaptureActorIndex, float TexScrollSpeedX, float TexScrollSpeedY, class UObject* __WorldContext);
	static void SetBoardTextureScroll(int32 CaptureActorIndex, float TexScrollX, float TexScrollY, class UObject* __WorldContext);
	static void SetBoardMaterialParam(class ABPCaptureActor_C* CaptureActor, class FName MaterialParamName, float ParamValue, class UObject* __WorldContext);
	static void GetCaptureActor(int32 CaptureActorIndex, class UObject* __WorldContext, class ABPCaptureActor_C** CaptureActor, bool* IsSuccess);
	static void SetBoardMaterialParamValue(int32 CaptureActorIndex, class FName MaterialParamName, float Value, class UObject* __WorldContext);
	static void SetBoardMaterialParamCurve(int32 CaptureActorIndex, class FName MaterialParamName, class UCurveFloat* Curve, float CurveTime, class UObject* __WorldContext);
	static void SetBoardTextureScale(int32 CaptureActorIndex, float Scale, class UObject* __WorldContext);
	static void SetBoardTextureScaleCurve(int32 CaptureActorIndex, class UCurveFloat* Curve, float Time, class UObject* __WorldContext);
	static void SetBoardTextureScrollCurve(int32 CaptureActorIndex, class UCurveFloat* TexScrollXCurve, class UCurveFloat* TexScrollYCurve, float Time, class UObject* __WorldContext);
	static void SetBoardTextureScrollSpeedCurve(int32 CaptureActorIndex, class UCurveFloat* TexScrollSpeedXCurve, class UCurveFloat* TexScrollSpeedYCurve, float Time, class UObject* __WorldContext);
	static void ChangePlayerCharacter(ERSPartyPlayerKind Type, class UClass* PlayerClass, class UObject* __WorldContext);
	static void SetCharacterEventMove(ERSPartyPlayerKind PartyPlayerType, bool Walk, class FName EventSplineMovePointTagName, bool bAfterWait, class UObject* __WorldContext);
	static void IsCharacterEventMoveEnd(ERSPartyPlayerKind PartyPlayerType, class UObject* __WorldContext, bool* Result);
	static void StartEventBossName(int32 CaptureActorIndex, bool IsSpecialCaptureIndex, class FName SocketName, const class FString& bossId, const struct FVector& Scale, EBossNameMode Mode, float FreeFixedDrawSecond, class UObject* __WorldContext);
	static void StartEventCharaName(int32 CaptureActorIndex, bool IsSpecialCaptureIndex, class FName SocketName, const class FString& CharaID, const struct FVector& Scale, class UObject* __WorldContext);
	static void SettingSpecialCapture(int32 SpecialCaptureActorIndex, int32 BoardMeshIndex, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class UObject* __WorldContext);
	static void GetSpecialCaptureActor(int32 SpecialCaptureActorIndex, class UObject* __WorldContext, class ABPCaptureActor_C** CaptureActor, bool* IsSuccess);
	static void ResetPlayerCamera(float ResetSec, class UObject* __WorldContext);
	static void PlayBoadAddAnimation(int32 CaptureActorIndex, class UAnimMontage* AddBordAnimMontage, class UObject* __WorldContext);
	static void SetPartyCharacterVisibility(ERSPartyPlayerKind PartyPlayerType, bool bVisibility, class UObject* __WorldContext);
	static void SettingCaptureCrossFade(int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsSeamlessInGameCapture, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, bool IsSimpleCrossFade, class UObject* __WorldContext);
	static void StartCrossFade(int32 CaptureActorIndex, class UCurveFloat* Curve, class UObject* __WorldContext);
	static void StartCaptureBGAlphaCurve(class UCurveFloat* Curve, class UObject* __WorldContext);
	static void SetIsAllEnemyEventWait(bool IsEventWait, class UObject* __WorldContext);
	static void SetIsAllEnemyEventBerserk(bool IsEventBerserk, class UObject* __WorldContext);
	static void SetIsAllEnemyEventWeak(bool IsEventWeak, class UObject* __WorldContext);
	static void SetEventDisableGameOver(bool bDisable, class UObject* __WorldContext);
	static void SetBoardTextureScrollCurveTimeline(int32 CaptureActorIndex, class UCurveFloat* TexScrollXCurve, class UCurveFloat* TexScrollYCurve, float Speed, class UObject* __WorldContext);
	static void GetPlayerHPPercent(class UObject* __WorldContext, float* HPPercent);
	static void SetCarsVisible(bool Visible, class UObject* __WorldContext);
	static void StartOpenBrainFieldPlayer(class UObject* __WorldContext);
	static void StartOpenBrainFieldENPC(class UObject* __WorldContext);
	static void StartOpenBrainField(class AActor* User, class UObject* __WorldContext);
	static void StartCloseBrainField(class UObject* __WorldContext);
	static void StartOverwriteBrainFieldPlayer(class UObject* __WorldContext);
	static void StartOverwriteBrainFieldENPC(class UObject* __WorldContext);
	static void StartOverwriteBrainField(class AActor* User, class UObject* __WorldContext);
	static void ChangeBrainFieldUserPlayer(class UObject* __WorldContext);
	static void ChangeBrainFieldUserENPC(class UObject* __WorldContext);
	static void ChangeBrainFieldUser(class AActor* User, class UObject* __WorldContext);
	static void PrivateGetMainPlayer(class UObject* __WorldContext, class AActor** Player);
	static void PrivateGetENPC(class UObject* __WorldContext, class AActor** ENPC);
	static void ChangeCloseBrainField(class UObject* __WorldContext);
	static void SetEnemyPlayerBattle(bool bBattle, bool bUseBrainField, EPlayerID PlayerId, class UObject* __WorldContext);
	static void SetBoardTextureScaleCurveTimelineWithOffset(int32 CaptureActorIndex, class UCurveFloat* ScaleCurve, class UCurveFloat* CenterXCurve, class UCurveFloat* CenterYCurve, float Speed, class UObject* __WorldContext);
	static void SetBoardTextureScaleCurveTimeline(int32 CaptureActorIndex, class UCurveFloat* TexScaleCurve, float Speed, class UObject* __WorldContext);
	static void SetBoardTextureOffsetCurveTimeline(int32 CaptureActorIndex, class UCurveFloat* TexOffsetXCurve, class UCurveFloat* TexOffsetYCurve, float Speed, class UObject* __WorldContext);
	static void StartCrossFadeCharaCapture(int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, class FName LightPresetName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName CharaPartsDTRowName, ECharaCapChangeSpeedType ChangeSpeedType, bool IsSimpleCrossFade, class UObject* __WorldContext);
	static void SettingCaptureCrossFadeForCapIndex(int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsSeamlessInGameCapture, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, bool IsSimpleCrossFade, class UObject* __WorldContext);
	static void StartCrossFadeForCapIndex(int32 CaptureActorIndex, class UCurveFloat* Curve, class UObject* __WorldContext);
	static void PlayLoopSe(class FName Param_Name, class USoundAtomCue* AtomCue, const struct FVector& Location, float FadeTime, float FadeVolume, bool ContinuousPlaybackSkip, class UObject* __WorldContext);
	static void StopLoopSe(class FName Param_Name, float FadeTime, float FadeVolume, class UObject* __WorldContext);
	static void SetTownUIMode(bool TownMode, bool AjitoMode, class UObject* __WorldContext);
	static void PlaySpecialNodeAnimation(const class FString& SpecialNodeAnimNamePath, bool IsLoop, class UObject* __WorldContext);
	static void AttachCapActorForSpecialNodeActor(int32 CaptureActorIndex, class FName AttachPointName, class UObject* __WorldContext);
	static void AttachCaptureActorForCaptureActor(int32 ParentCaptureActorIndex, int32 ChildCaptureActorIndex, class FName SocketName, class UObject* __WorldContext);
	static void PlaySpecialNodeAnimMontage(const class FString& SpecialNodeAnimNamePath, class UObject* __WorldContext);
	static void ClearSpecialStatic(int32 ParentSpecialCaptureActorIndex, class UObject* __WorldContext);
	static void ChangeSpeakerStaticPl(TArray<class FName>& FrontCharaPlBoneNameList, class UObject* __WorldContext);
	static void AttachCapActorForCapActor(int32 ParentCapActorIndex, int32 ChildCapActorIndex, class FName AttachPointName, class UObject* __WorldContext);
	static void PlayNodeAnimation(int32 CaptureActorIndex, const class FString& AnimationNameOrPath, class UObject* __WorldContext);
	static void PlayPhaseAnimation(const class FString& SpecialNodeAnimNamePath, class FName AttachPointName, class UObject* __WorldContext);
	static void SetNextNewStaticNode(class UObject* __WorldContext);
	static void AttachCapActorForPhaseNodeMesh(int32 CaptureActorIndex, class FName SocketName, bool NewVisibility, class UObject* __WorldContext);
	static void StartNewStaticInGeneral(const class FString& InAnimMontagePath, EShadaAnimeType ShaderAnimType, class FName SelectShaderAnimeDTRowName, bool NoPlaySE, class UObject* __WorldContext);
	static void PlayPhaseNodeAnimation(const class FString& AnimMontagePath, class UObject* __WorldContext);
	static void ClearChildCapActor(EPhaseAlphaCurveType AlphaFadeType, class UObject* __WorldContext);
	static void PlayPostProcessSequencer(class ULevelSequence* Sequence, bool IsLoop, class UObject* __WorldContext);
	static void SetSpeakerCapActor(int32 CaptureActoeIndex, class UObject* __WorldContext);
	static void ChangeCaptureFaceAndBodyAnimation(int32 CaptureActorIndex, class FName CharaAnimationName, class FName CharaFaceAnimationName, class UObject* __WorldContext);
	static void CaptureSpeakFace(int32 CaptureActorIndex, class UObject* __WorldContext);
	static void PresetAddPartyMember(class FName PresetName, bool IsCheckBattleMemberMain, bool bNotEquipSAS, class UObject* __WorldContext);
	static void RemovePartyMember(EPlayerID PlayerId, bool bDequipAttachment, bool bDefaultCostume, class UObject* __WorldContext);
	static void ReturnPartyMember(EPlayerID PlayerId, class UObject* __WorldContext);
	static void StartChangeFaceList(int32 CaptureActorIndex, TArray<struct FFChangeFaceData>& ChangeFaceDataArray, class UObject* __WorldContext);
	static void CaptureSceneBGForLevelSequencere(class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class UObject* __WorldContext);
	static void CaptureSaveDataIcon(class UObject* __WorldContext);
	static void AutoSave(bool IsDoCapture, class UObject* __WorldContext);
	static void SetBattleMember(EPlayerID PlayerId, ERSPartyPlayerKind PartyPlayerKind, bool IsSetMemberEventHidden, class UObject* __WorldContext);
	static void SetPhaseAnimCurveInfo(TArray<struct FEventPlAnimationCurveParam>& CurrentPlAnimationCurveDataList, class UObject* __WorldContext);
	static void SetBoardTextureScaleCenter(int32 CaptureActorIndex, bool IsScaleLeftBottom, class UObject* __WorldContext);
	static void SettingCaptureCrossFadeForAnimCurveData(int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsSeamlessInGameCapture, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, class UObject* __WorldContext);
	static void SettingCaptureCommand(int32 CaptureActorIndex, int32 BoardMeshIndex, class FName CapturePresetName, class FName CharaBodyAnimationSectionName, class FName CharaFaceAnimationSectionName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequnece, float CaptureSequnecePositon, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsUseSaveTexture, bool IsSeamlessInGameCapture, class UObject* __WorldContext);
	static void SettingCaptureCrossFadeForAnimCurveDataCommand(int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class UObject* __WorldContext);
	static void SetBoardTextureScaleX(int32 CaptureActorIndex, float ScaleX, class UObject* __WorldContext);
	static void SetBoardTextureScaleY(int32 CaptureActorIndex, float ScaleY, class UObject* __WorldContext);
	static void SetBoardTextureScaleXCurve(int32 CaptureActorIndex, class UCurveFloat* CurveX, float Time, class UObject* __WorldContext);
	static void SetBoardTextureScaleYCurve(int32 CaptureActorIndex, class UCurveFloat* CurveY, float Time, class UObject* __WorldContext);
	static void SetBoardTextureScaleXYCurveTimelineWithOffset(int32 CaptureActorIndex, class UCurveFloat* ScaleCurveX, class UCurveFloat* ScaleCurveY, class UCurveFloat* CenterXCurve, class UCurveFloat* CenterYCurve, float Speed, class UObject* __WorldContext);
	static void SetBoardTextureScaleXYCurveTimeline(int32 CaptureActorIndex, class UCurveFloat* TexScaleXCurve, class UCurveFloat* TexScaleYCurve, float Speed, class UObject* __WorldContext);
	static void SetBoardTextureUVRotate(int32 CaptureActorIndex, float Angle, class UObject* __WorldContext);
	static void SetBoardTextureUVRotateCurve(int32 CaptureActorIndex, class UCurveFloat* Curve, float Time, class UObject* __WorldContext);
	static void SetBoardTextureUVRotateCurveTimeline(int32 CaptureActorIndex, class UCurveFloat* UVAngleCurve, float Speed, class UObject* __WorldContext);
	static void StartRedLight(EBossNameMode Mode, float FreeFixedDrawSecond, class UObject* __WorldContext);
	static void SetBoadAddAnimWeightCurve(int32 CaptureActorIndex, class UCurveFloat* Curve, class UObject* __WorldContext);
	static void PlayPresentSequencer(class ULevelSequence* Sequence, class AAjitoMember* BindForCharaActor, float PlayRate, class UObject* __WorldContext);
	static void EndPresentSequencer(class AAjitoMember* BindForCharaActor, class UObject* __WorldContext);
	static void CallGeneralPresentEvent(class FName ForCharaID, class FName ItemId, class UObject* __WorldContext);
	static void ClearPlaneRenderTargetForJointID(TArray<class FName>& JointIDList, class UObject* __WorldContext);
	static void GetPlayerCharaID(class UObject* __WorldContext, EPlayerID* ReturnPlayerID);
	static void StartMatchIDWidget(int32 CaptureActorIndex, const class FName CharaID, const class FName ArmyCodeMessageID, const struct FVector& Scale, class UObject* __WorldContext);
	static void EndMatchIDWidget(int32 CaptureActorIndex, class UObject* __WorldContext);
	static void SetEventObstructPsychic_(bool bSAS, bool bPsychic, bool bAttack, bool bDrive, bool bBrainCrash, class UAnimMontage* ObstructAnimation, class ULevelSequence* ObstructSequencer, class UObject* __WorldContext);
	static void ClearEventObstructPsychic(class UObject* __WorldContext);
	static void SetLevelActorVisible(bool IsVisible, const struct FVector& Position, float Range, class UObject* __WorldContext);
	static void PlayBoadCurveValueMontage(int32 CaptureActorIndex, class UAnimMontage* AnimMontage, bool IsLoop, class UCurveFloat* MontageWeghtCurveAsset, class UObject* __WorldContext);
	static void SetTimerByPlayObstructAction(float Time, class UObject* __WorldContext);
	static void CancelTimerByPlayObstructAction(class UObject* __WorldContext);
	static void PresentGetSelectItemID(class UObject* __WorldContext, class FName* ItemId);
	static void PresentGetSelectFlag(class UObject* __WorldContext, bool* SelectFlag);
	static void IsEndSubMenu(class UObject* __WorldContext, bool* Param_IsEndSubMenu);
	static void EndSubMenu(class UObject* __WorldContext);
	static void StartPresentCheckMenu(class UObject* __WorldContext);
	static void StartPresentSelectMenu(EPlayerID PlayerId, class UObject* __WorldContext);
	static void RecoverPlayerAllHP(class UObject* __WorldContext);
	static void IsExistPartyMember(EPlayerID PlayerId, class UObject* __WorldContext, bool* IsExist);
	static void IsPlayerEquipCostume(EPlayerID PartyPlayerID, int32 CostumeId, class UObject* __WorldContext, bool* IsEquipCostume);
	static void IsPlayerEquipWeapon(EPlayerID PartyPlayerID, int32 WeaponId, class UObject* __WorldContext, bool* IsEquipWepon);
	static void IsPlayerEquipAccessory(EPlayerID PartyPlayerID, int32 AccessoryId, class UObject* __WorldContext, bool* IsEquipAccessory);
	static void IsPlayerEquipAttachment(EPlayerID PartyPlayerID, int32 AttachmentId, class UObject* __WorldContext, bool* IsEquipAttachment);
	static void IsExistBattleMember(EPlayerID PlayerId, class UObject* __WorldContext, bool* IsExist);
	static void SetPlayerLookAtLocation(ERSPartyPlayerKind PartyPlayerKind, const struct FVector& TargetLocation, class UObject* __WorldContext);
	static void InvalidPlayerLookAtLocation(ERSPartyPlayerKind PartyPlayerKind, class UObject* __WorldContext);
	static void SetReturnMovePlayer(bool IsWalk, const struct FVector& PlayerVelocity, float MoveDistance, class AActor* CollisionActor, class UObject* __WorldContext);
	static void SetForceBrainTalkMode(bool IsActive, class FName StartFoceBTCameraPresetName, bool IsDisableInput, bool IsOnlyWalk, class UObject* __WorldContext);
	static void SetActorHiddenInGameForTagName(class FName TagName, bool IsHiddenInGame, class UObject* __WorldContext);
	static void CreateEventPlAttachAsset(class FName DTRowName, int32 CaptureActorIndex, const struct FTransform& OffsetTransform, class UObject* __WorldContext);
	static void SetEnemyHPVisible(bool IsVisible, class UObject* __WorldContext);
	static void EnableEnemyIgnoreDamageAll(class UObject* __WorldContext);
	static void DisableEnemyIgnoreDamageAll(class UObject* __WorldContext);
	static void EnableEnemyIgnoreDamageOne(ECharacterIgnoreDamage DamageType, class UObject* __WorldContext);
	static void DisableEnemyIgnoreDamageOne(ECharacterIgnoreDamage DamageType, class UObject* __WorldContext);
	static void SetFrameParticleAlphaCurve(int32 CaptureActorIndex, class UCurveFloat* Curve, class UObject* __WorldContext);
	static void StopPostProcessSequencer(class UObject* __WorldContext);
	static void StopAddSpecialNodeAnimMontage(class UObject* __WorldContext);
	static void PlayAddSpecialNodeAnimMontage(const class FString& SpecialNodeAnimNamePath, class UObject* __WorldContext);
	static void SetSpecialNodeAddAnimWeightCurve(class UCurveFloat* Curve, class UObject* __WorldContext);
	static void SetEventPPStream(float PerspectiveScaleLeft, float PerspectiveScaleRight, float Rotate, float VisibleLineArea, float EmissivePower, class UObject* __WorldContext);
	static void StopEventPPStream(class UCurveFloat* NewFloatCurve, class UObject* __WorldContext);
	static void SetAllTownNpcAnimation(class UObject* __WorldContext);
	static void FinishLoopPostProcessSequencer(class UObject* __WorldContext);
	static void EnemyAllDeadForLevelName(const TArray<class FName>& LevelNameList, class UObject* __WorldContext);
	static void SetBattleMemberSASStealth(bool IsSetStealth, class UObject* __WorldContext);
	static void EndPartyMemberEventWait(ERSPartyPlayerKind Kind, class UObject* __WorldContext);
	static void EndAttentionCamera(class UCurveFloat* Actor_curve_in, class UCurveFloat* Fov_curve_in, class UObject* __WorldContext);
	static void StartAttentionCamera(bool Look_at_actor, const struct FVector& Look_at_pos_in, class AActor* Target_actor_in, class UCurveFloat* Actor_curve_in, bool Change_fov, float Target_fov_in, class UCurveFloat* Fov_curve_in, class UObject* __WorldContext);
	static void StartCourtMortBattle(class UObject* __WorldContext);
	static void SetVisibleBrainKeyGuide(bool Visibleflag, class UObject* __WorldContext);
	static void ChangeBrainFieldUserEnd(class UObject* __WorldContext);
	static void SetEventSASEquipStatus(E_SASKindNative Kind, ESASEquipStatus Status, bool bNotEquip, class UObject* __WorldContext);
	static void EventControlChildYuito(bool IsControl, class UObject* __WorldContext);
	static void SpawnChildYuito(const struct FTransform& SpawnTransform, class UObject* __WorldContext, class ARSBattlePlayer_C** OutChildYuito);
	static void StartBrainMessageMenu(class UObject* __WorldContext);
	static void _Auto_Reply_Brain_Message(class FName DefaultThreadTitle, class UObject* __WorldContext);
	static void PadVibrationOneShot(class UForceFeedbackEffect* VibrationParameterAsset, class UObject* __WorldContext);
	static void PadVibrationLoop(class UForceFeedbackEffect* VibrationParameterAsset, class UObject* __WorldContext);
	static void PadVibrationLoopTime(class UForceFeedbackEffect* VibrationParameterAsset, float Time, class UObject* __WorldContext);
	static void PadVibrationStop(class UObject* __WorldContext);
	static void Set_Vision_Fog_In_Game(EVisionFogID FogID, float Rate, float Time, class UObject* __WorldContext);
	static void LoadExtraSASCutin(class UObject* __WorldContext);
	static void UnloadExtraSASCutin(class UObject* __WorldContext);
	static void StartExtraSASCutin(ESASCutinExtraID CutinID, class UObject* __WorldContext);
	static void MiniTipsOpen(int32 TipsID, class UObject* __WorldContext);
	static void MiniTipsClose(class UObject* __WorldContext);
	static void SetForceCameraMove(bool Active, float LerpTime, const struct FVector& RootOffset, float CamDistance, float FOV, EEasingFunc EaseFunc, float EaseBlendExp, class UObject* __WorldContext);
	static void Set_Force_Player_Mode(bool IsDisableInput, bool IsOnlyWalk, bool IsEnableOpenUiMenu, class UObject* __WorldContext);
	static void NaomiChangePhaseParamSetting(class UObject* __WorldContext);
	static void EventRemvoeMembers(TArray<EPlayerID>& IgnoreActorList, bool bDisableSAS, class UObject* __WorldContext);
	static void ReturnEventRemvoeMembers(class UObject* __WorldContext);
	static void StartDelayBattleLog(class UObject* __WorldContext);
	static void EndDelayBattleLog(class UObject* __WorldContext);
	static void MiniTipsStopDraw(EHelpTutorial TipsID, class UObject* __WorldContext);
	static void SetDisableActionBoringIdle(bool Disable, class UObject* __WorldContext);
	static void SetWeaponVisibility(bool Visibility, bool NoApply, class UObject* __WorldContext);
	static void BackupEnemyParameterToTagName(class FName TagName, class UObject* __WorldContext);
	static void RestoreEnemyParameterToTagName(class FName TagName, class UObject* __WorldContext);
	static void LoadMakeEventAsset(const TArray<class FString>& LoadBPEventPathList, class UObject* __WorldContext);
	static void SetEnemyPlayerBattleForTagName(bool bBattle, bool bUseBrainField, class FName TagName, class UObject* __WorldContext);
	static void SetFPS(int32 Fps, class UObject* __WorldContext);
	static void ResetFPS(class UObject* __WorldContext);
	static void GetEnemyForTagName(class FName TagName, class UObject* __WorldContext, class AActor** Actor);
	static void Set_ENPC_Preset_Player_Camera(bool Enable, EPlayerCameraPreset Preset_Basic, class UObject* __WorldContext);
	static void DestroyEnemyWithTagName(class FName TagName, class UObject* __WorldContext, bool* bDummy);
	static void SetDrawModeKaren(class UObject* __WorldContext);
	static void PlayVibration(class UForceFeedbackEffect* VibrationParameterAsset, bool bLooping, class UObject* __WorldContext);
	static void StopVibration(class UObject* __WorldContext);
	static void StartEventDirectBrainFieldWarning(class UObject* __WorldContext);
	static void StartSasWindow(EPlayerID PlayerId, bool IsEx1, bool IsEx2, class UObject* __WorldContext);
	static void SetLogUpdateGoal(class UObject* __WorldContext);
	static void StartBattleEm8300(class UObject* __WorldContext);
	static void ClearCourtMortBattle(class UObject* __WorldContext);
	static void RestoreAAStaticToInGame(class UObject* __WorldContext);
	static void EndDriveMode(class UObject* __WorldContext);
	static void ChangeEnpcUniqueThinkTable(class UObject* __WorldContext);
	static void SetRenderingSettingArea(int32 LocationId, int32 AreaId, class UObject* __WorldContext);
	static void Set_ENPC_Wire_Visibility(EPlayerID PlayerId, bool IsVisible, class UObject* __WorldContext);
	static void SetBattleMemberToEmpty(EPlayerID PlayerId, class UObject* __WorldContext);
	static void SetEventHiddenNeonWire(bool Hidden, class UObject* __WorldContext);
	static void SetBrainFieldColor(bool IsPlayer, float Grayscale, class UObject* __WorldContext);
	static void EquipAttachmentSetoMask(bool bAddItem, class UObject* __WorldContext);
	static void DisableArrangePlaneActors(class UObject* __WorldContext);
	static void ForceWarpNpcBattleMember(class UObject* __WorldContext);
	static void PreloadEventPlayerInstance(TArray<EPlayerID>& PlayerIDs, class UObject* __WorldContext);
	static void SetStaticGhostTrailCache(EPlayerID PlayerId, int32 ControlId, int32 Num, class UObject* __WorldContext);
	static void ResetStaticGhostTrailCache(int32 ControlId, class UObject* __WorldContext);
	static void LoadMakeEventActorClassFromPath(const class FString& PathString, class UObject* __WorldContext, class UClass** AsMake_Event_Actor);
	static void CheckBrainFieldRemainTime(float RemainTime, class UObject* __WorldContext, bool* bResult);
	static void AddMipPrestreamTextures(TArray<class FName>& PrestreamMeshNames, bool ForceLoad, class UObject* __WorldContext);
	static void RemoveMipPrestreamTextures(TArray<class FName>& PrestreamMeshNames, class UObject* __WorldContext);
	static void LockMipPrestreamTextures(TArray<class FName>& PrestreamMeshNames, class UObject* __WorldContext);
	static void RemoveAllLockMipPrestreamTextures(class UObject* __WorldContext);
	static void SetENPCTransform(EPlayerID PlayerId, const struct FTransform& Transform, class UObject* __WorldContext);
	static void HiddenAttachmentSetoMask(bool bHidden, class UObject* __WorldContext);
	static void ResetPsychicObjectArrangeTransform(class UObject* __WorldContext);
	static void SetStopEndDriveMode(bool FlagIn, class UObject* __WorldContext);
	static void SetBrainFieldMonitorImage(class UMaterialInterface* DrawMaterial, class UObject* __WorldContext);
	static void ClearEventCacheActorCompsHiddenInGameFromTagName(class FName TagName, class UObject* __WorldContext);
	static void SetEventCacheActorCompsHiddenInGameForTagName(class FName TagName, bool IsHiddenInGame, class UObject* __WorldContext);
	static void EquipAttachmentSetoMaskEventEnd(class UObject* __WorldContext);
	static void SetEventPlayerCostumeSetting(EPlayerID PlayerId, bool DefaultCostume, bool NoAttachments, class UObject* __WorldContext);
	static void SetEventPlayerCostumeSettingList(TArray<EPlayerID>& PlayerId, bool DefaultCostume, bool NoAttachments, class UObject* __WorldContext);
	static void ClearEventPlayerCostumeSettingAll(class UObject* __WorldContext);
	static void CreateMatchIDWidget(int32 CaptureActorIndex, class UObject* __WorldContext);
	static void SetNoAddEventTriggerCmdFlag(bool Flag, class UObject* __WorldContext);
	static void IsEnableCrashVision(EPlayerID PlayerId, class UObject* __WorldContext, bool* bEnable);
	static void EnableCrashVision(EPlayerID PlayerId, class UObject* __WorldContext);
	static void IsEnableNexusDrive(EPlayerID PlayerId, class UObject* __WorldContext, bool* bEnable);
	static void EnableNexusDrive(EPlayerID PlayerId, class UObject* __WorldContext);
	static void CallGeneralAjitoStayEvent(class FName ForCharaID, class FName DTRowName, class UObject* __WorldContext);
	static void TempraryEquipDefaultWeapon(EPlayerID PlayerId, class UObject* __WorldContext);
	static void EndTempraryEquipDefaultWeapon(EPlayerID PlayerId, class UObject* __WorldContext);
	static void AjitoTogetherRandomParameterUp(EPlayerID NpcPlayerID, class UObject* __WorldContext, EAjitoTogetherUpKind* NpcUpKind, int32* NpcUpValue, EAjitoTogetherUpKind* PlayerUpKind, int32* PlayerUpValue);
	static void SetCharaBGTextureName(class FName TextureRowName, class UObject* __WorldContext);
	static void ResetCharaBGTextureName(class UObject* __WorldContext);
	static void Set_Scalar_Parameter_For_Tag_Name_Actor_Material_(class FName TagName, class FName ScalarParameterName, float Value, class UObject* __WorldContext);
	static void SetEventBindEnemyTickOffFlag(bool Flag, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_MakeEventFunction_C">();
	}
	static class UBPFL_MakeEventFunction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_MakeEventFunction_C>();
	}
};
static_assert(alignof(UBPFL_MakeEventFunction_C) == 0x000008, "Wrong alignment on UBPFL_MakeEventFunction_C");
static_assert(sizeof(UBPFL_MakeEventFunction_C) == 0x000028, "Wrong size on UBPFL_MakeEventFunction_C");

}

