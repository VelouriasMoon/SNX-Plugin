#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DragonIKPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DragonIKPlugin.EIK_Type_Plugin
// NumValues: 0x0003
enum class EIK_Type_Plugin : uint8
{
	ENUM_Two_Bone_Ik                         = 0,
	ENUM_Single_Bone_Ik                      = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.ERefPosePluginEnum
// NumValues: 0x0003
enum class ERefPosePluginEnum : uint8
{
	VE_Animated                              = 0,
	VE_Rest                                  = 1,
	VE_MAX                                   = 2,
};

// Enum DragonIKPlugin.EInterpoRotation_Type_Plugin
// NumValues: 0x0003
enum class EInterpoRotation_Type_Plugin : uint8
{
	ENUM_DivisiveRot_Interp                  = 0,
	ENUM_LegacyRot_Interp                    = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.EInterpoLocation_Type_Plugin
// NumValues: 0x0003
enum class EInterpoLocation_Type_Plugin : uint8
{
	ENUM_DivisiveLoc_Interp                  = 0,
	ENUM_LegacyLoc_Interp                    = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.EIKTrace_Type_Plugin
// NumValues: 0x0004
enum class EIKTrace_Type_Plugin : uint8
{
	ENUM_LineTrace_Type                      = 0,
	ENUM_SphereTrace_Type                    = 1,
	ENUM_BoxTrace_Type                       = 2,
	ENUM_MAX                                 = 3,
};

// ScriptStruct DragonIKPlugin.DragonData_FootData
// 0x0044 (0x0044 - 0x0000)
struct FDragonData_FootData final
{
public:
	class FName                                   Feet_Bone_Name;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Knee_Bone_Name;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Thigh_Bone_Name;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Feet_Rotation_Offset;                              // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Knee_Direction_Offset;                             // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Feet_Trace_Offset;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Feet_Rotation_Limit;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Feet_Heights;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_FootData) == 0x000004, "Wrong alignment on FDragonData_FootData");
static_assert(sizeof(FDragonData_FootData) == 0x000044, "Wrong size on FDragonData_FootData");
static_assert(offsetof(FDragonData_FootData, Feet_Bone_Name) == 0x000000, "Member 'FDragonData_FootData::Feet_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Knee_Bone_Name) == 0x000008, "Member 'FDragonData_FootData::Knee_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Thigh_Bone_Name) == 0x000010, "Member 'FDragonData_FootData::Thigh_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Rotation_Offset) == 0x000018, "Member 'FDragonData_FootData::Feet_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Knee_Direction_Offset) == 0x000024, "Member 'FDragonData_FootData::Knee_Direction_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Trace_Offset) == 0x000030, "Member 'FDragonData_FootData::Feet_Trace_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Rotation_Limit) == 0x00003C, "Member 'FDragonData_FootData::Feet_Rotation_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Heights) == 0x000040, "Member 'FDragonData_FootData::Feet_Heights' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_MultiInput
// 0x0020 (0x0020 - 0x0000)
struct FDragonData_MultiInput final
{
public:
	class FName                                   Start_Spine;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pelvis;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDragonData_FootData>           FeetBones;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_MultiInput) == 0x000008, "Wrong alignment on FDragonData_MultiInput");
static_assert(sizeof(FDragonData_MultiInput) == 0x000020, "Wrong size on FDragonData_MultiInput");
static_assert(offsetof(FDragonData_MultiInput, Start_Spine) == 0x000000, "Member 'FDragonData_MultiInput::Start_Spine' has a wrong offset!");
static_assert(offsetof(FDragonData_MultiInput, Pelvis) == 0x000008, "Member 'FDragonData_MultiInput::Pelvis' has a wrong offset!");
static_assert(offsetof(FDragonData_MultiInput, FeetBones) == 0x000010, "Member 'FDragonData_MultiInput::FeetBones' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonFeetSolver
// 0x0320 (0x0330 - 0x0010)
struct FAnimNode_DragonFeetSolver final : public FAnimNode_Base
{
public:
	struct FDragonData_MultiInput                 Dragon_input_data;                                 // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1064[0x58];                                    // 0x0030(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	EIK_Type_Plugin                               Ik_type;                                           // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKTrace_Type_Plugin                          Trace_type;                                        // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1065[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trace_Radius;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpoLocation_Type_Plugin                  Loc_interp_type;                                   // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpoRotation_Type_Plugin                  Rot_interp_type;                                   // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1066[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1067[0x8];                                     // 0x00AC(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Automatic_leg_make;                                // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable_solver;                                     // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1068[0x2];                                     // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Shift_speed;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Feet_rotation_speed;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1069[0x20];                                    // 0x00C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	ETraceTypeQuery                               Trace_Channel;                                     // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106A[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODThreshold;                                      // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x00E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106B[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DebugEffectorTransform;                            // 0x00F0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_106C[0x104];                                   // 0x0120(0x0104)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Line_trace_down_height;                            // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Line_trace_upper_height;                           // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Lerping;                                    // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Location_Lerping;                           // 0x022D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Should_Rotate_Feet;                                // 0x022E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106D[0x1];                                     // 0x022F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Show_trace_in_game;                                // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106E[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Location_Lerp_Speed;                               // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106F[0x1];                                     // 0x0238(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enable_Pitch;                                      // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable_Roll;                                       // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1070[0x1];                                     // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Character_direction_vector_CS;                     // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1071[0xE8];                                    // 0x0248(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonFeetSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonFeetSolver");
static_assert(sizeof(FAnimNode_DragonFeetSolver) == 0x000330, "Wrong size on FAnimNode_DragonFeetSolver");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Dragon_input_data) == 0x000010, "Member 'FAnimNode_DragonFeetSolver::Dragon_input_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Ik_type) == 0x000088, "Member 'FAnimNode_DragonFeetSolver::Ik_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Trace_type) == 0x000089, "Member 'FAnimNode_DragonFeetSolver::Trace_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Trace_Radius) == 0x00008C, "Member 'FAnimNode_DragonFeetSolver::Trace_Radius' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Loc_interp_type) == 0x000090, "Member 'FAnimNode_DragonFeetSolver::Loc_interp_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Rot_interp_type) == 0x000091, "Member 'FAnimNode_DragonFeetSolver::Rot_interp_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, ComponentPose) == 0x000098, "Member 'FAnimNode_DragonFeetSolver::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Alpha) == 0x0000A8, "Member 'FAnimNode_DragonFeetSolver::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Automatic_leg_make) == 0x0000B4, "Member 'FAnimNode_DragonFeetSolver::Automatic_leg_make' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_solver) == 0x0000B5, "Member 'FAnimNode_DragonFeetSolver::Enable_solver' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Shift_speed) == 0x0000B8, "Member 'FAnimNode_DragonFeetSolver::Shift_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Feet_rotation_speed) == 0x0000BC, "Member 'FAnimNode_DragonFeetSolver::Feet_rotation_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Trace_Channel) == 0x0000E0, "Member 'FAnimNode_DragonFeetSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, LODThreshold) == 0x0000E4, "Member 'FAnimNode_DragonFeetSolver::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, ActualAlpha) == 0x0000E8, "Member 'FAnimNode_DragonFeetSolver::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, DebugEffectorTransform) == 0x0000F0, "Member 'FAnimNode_DragonFeetSolver::DebugEffectorTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Line_trace_down_height) == 0x000224, "Member 'FAnimNode_DragonFeetSolver::Line_trace_down_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Line_trace_upper_height) == 0x000228, "Member 'FAnimNode_DragonFeetSolver::Line_trace_upper_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Ignore_Lerping) == 0x00022C, "Member 'FAnimNode_DragonFeetSolver::Ignore_Lerping' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Ignore_Location_Lerping) == 0x00022D, "Member 'FAnimNode_DragonFeetSolver::Ignore_Location_Lerping' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Should_Rotate_Feet) == 0x00022E, "Member 'FAnimNode_DragonFeetSolver::Should_Rotate_Feet' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Show_trace_in_game) == 0x000230, "Member 'FAnimNode_DragonFeetSolver::Show_trace_in_game' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Location_Lerp_Speed) == 0x000234, "Member 'FAnimNode_DragonFeetSolver::Location_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_Pitch) == 0x000239, "Member 'FAnimNode_DragonFeetSolver::Enable_Pitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_Roll) == 0x00023A, "Member 'FAnimNode_DragonFeetSolver::Enable_Roll' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Character_direction_vector_CS) == 0x00023C, "Member 'FAnimNode_DragonFeetSolver::Character_direction_vector_CS' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonHandSolver
// 0x00D0 (0x00E0 - 0x0010)
struct FAnimNode_DragonHandSolver final : public FAnimNode_Base
{
public:
	struct FDragonData_MultiInput                 Dragon_input_data;                                 // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1072[0x50];                                    // 0x0030(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1073[0x8];                                     // 0x0094(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ETraceTypeQuery                               Trace_Channel;                                     // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1074[0x3B];                                    // 0x009D(0x003B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActualAlpha;                                       // 0x00D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1075[0x4];                                     // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonHandSolver) == 0x000008, "Wrong alignment on FAnimNode_DragonHandSolver");
static_assert(sizeof(FAnimNode_DragonHandSolver) == 0x0000E0, "Wrong size on FAnimNode_DragonHandSolver");
static_assert(offsetof(FAnimNode_DragonHandSolver, Dragon_input_data) == 0x000010, "Member 'FAnimNode_DragonHandSolver::Dragon_input_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonHandSolver, ComponentPose) == 0x000080, "Member 'FAnimNode_DragonHandSolver::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonHandSolver, Alpha) == 0x000090, "Member 'FAnimNode_DragonHandSolver::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonHandSolver, Trace_Channel) == 0x00009C, "Member 'FAnimNode_DragonHandSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonHandSolver, ActualAlpha) == 0x0000D8, "Member 'FAnimNode_DragonHandSolver::ActualAlpha' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonSpineSolver
// 0x04E0 (0x04F0 - 0x0010)
struct FAnimNode_DragonSpineSolver final : public FAnimNode_Base
{
public:
	struct FDragonData_MultiInput                 Dragon_input_data;                                 // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1076[0x50];                                    // 0x0030(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Precision;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumPitch;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumPitch;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumRoll;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumRoll;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1077[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Shift_speed;                                       // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1078[0x8];                                     // 0x00B4(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ETraceTypeQuery                               Trace_Channel;                                     // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKTrace_Type_Plugin                          Trace_type;                                        // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1079[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trace_Radius;                                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dip_multiplier;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rotate_Around_Translate;                           // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Lerping;                                    // 0x00CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107A[0xA];                                     // 0x00CE(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActualAlpha;                                       // 0x00D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107B[0x8];                                     // 0x00DC(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Line_trace_downward_height;                        // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Line_trace_upper_height;                           // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Slanted_Height_Up_Offset;                          // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107C[0x4];                                     // 0x00F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Slanted_Height_Down_Offset;                        // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse_fabrik;                                    // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107D[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Calculation_To_RefPose;                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107E[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Chest_Slanted_Height_Up_Offset;                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107F[0x4];                                     // 0x0108(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Chest_Slanted_Height_Down_Offset;                  // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Base_Offset;                                 // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Base_Offset;                                // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Body_Rotation_Intensity;                           // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Virtual_leg_width;                                 // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum_Dip_Height;                                // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1080[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rotation_power_between;                            // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Automatic_Fabrik_Selection;                    // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1081[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Location_Lerp_Speed;                               // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation_Lerp_Speed;                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Influence_Alpha;                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_ForwardRotation_Intensity;                  // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_ForwardRotation_Intensity;                   // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1082[0xC];                                     // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DebugEffectorTransform;                            // 0x0150(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Enable_solver;                                     // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Fake_Chest_Rotations;                          // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Fake_Pelvis_Rotations;                         // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1083[0x5];                                     // 0x0183(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Force_Activation;                                  // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accurate_feet_placement;                           // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Only_Root_Solve;                                   // 0x018A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1084[0x9];                                     // 0x018B(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Overall_PostSolved_Offset;                         // 0x0194(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Character_direction_vector_CS;                     // 0x01A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward_Direction_Vector;                          // 0x01AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1085[0xC];                                     // 0x01B8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	ERefPosePluginEnum                            SolverReferencePose;                               // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Spine_Feet_Connect;                                // 0x01C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1086[0x2DE];                                   // 0x01C6(0x02DE)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Snake_Joint_Speed;                                 // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_snake;                                          // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1087[0x3];                                     // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Maximum_Feet_Distance;                             // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum_Feet_Distance;                             // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayLineTrace;                                  // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1088[0x3B];                                    // 0x04B5(0x003B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonSpineSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonSpineSolver");
static_assert(sizeof(FAnimNode_DragonSpineSolver) == 0x0004F0, "Wrong size on FAnimNode_DragonSpineSolver");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Dragon_input_data) == 0x000010, "Member 'FAnimNode_DragonSpineSolver::Dragon_input_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Precision) == 0x000080, "Member 'FAnimNode_DragonSpineSolver::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MaximumPitch) == 0x000084, "Member 'FAnimNode_DragonSpineSolver::MaximumPitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MinimumPitch) == 0x000088, "Member 'FAnimNode_DragonSpineSolver::MinimumPitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MaximumRoll) == 0x00008C, "Member 'FAnimNode_DragonSpineSolver::MaximumRoll' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MinimumRoll) == 0x000090, "Member 'FAnimNode_DragonSpineSolver::MinimumRoll' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MaxIterations) == 0x000094, "Member 'FAnimNode_DragonSpineSolver::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, ComponentPose) == 0x000098, "Member 'FAnimNode_DragonSpineSolver::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Alpha) == 0x0000A8, "Member 'FAnimNode_DragonSpineSolver::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Shift_speed) == 0x0000B0, "Member 'FAnimNode_DragonSpineSolver::Shift_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Trace_Channel) == 0x0000BC, "Member 'FAnimNode_DragonSpineSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Trace_type) == 0x0000BD, "Member 'FAnimNode_DragonSpineSolver::Trace_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Trace_Radius) == 0x0000C0, "Member 'FAnimNode_DragonSpineSolver::Trace_Radius' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, LODThreshold) == 0x0000C4, "Member 'FAnimNode_DragonSpineSolver::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Dip_multiplier) == 0x0000C8, "Member 'FAnimNode_DragonSpineSolver::Dip_multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Rotate_Around_Translate) == 0x0000CC, "Member 'FAnimNode_DragonSpineSolver::Rotate_Around_Translate' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Ignore_Lerping) == 0x0000CD, "Member 'FAnimNode_DragonSpineSolver::Ignore_Lerping' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, ActualAlpha) == 0x0000D8, "Member 'FAnimNode_DragonSpineSolver::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Line_trace_downward_height) == 0x0000E4, "Member 'FAnimNode_DragonSpineSolver::Line_trace_downward_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Line_trace_upper_height) == 0x0000E8, "Member 'FAnimNode_DragonSpineSolver::Line_trace_upper_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Slanted_Height_Up_Offset) == 0x0000EC, "Member 'FAnimNode_DragonSpineSolver::Slanted_Height_Up_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Slanted_Height_Down_Offset) == 0x0000F4, "Member 'FAnimNode_DragonSpineSolver::Slanted_Height_Down_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Reverse_fabrik) == 0x0000F8, "Member 'FAnimNode_DragonSpineSolver::Reverse_fabrik' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Calculation_To_RefPose) == 0x000100, "Member 'FAnimNode_DragonSpineSolver::Calculation_To_RefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Slanted_Height_Up_Offset) == 0x000104, "Member 'FAnimNode_DragonSpineSolver::Chest_Slanted_Height_Up_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Slanted_Height_Down_Offset) == 0x00010C, "Member 'FAnimNode_DragonSpineSolver::Chest_Slanted_Height_Down_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Base_Offset) == 0x000110, "Member 'FAnimNode_DragonSpineSolver::Chest_Base_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_Base_Offset) == 0x000114, "Member 'FAnimNode_DragonSpineSolver::Pelvis_Base_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Body_Rotation_Intensity) == 0x000118, "Member 'FAnimNode_DragonSpineSolver::Body_Rotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Virtual_leg_width) == 0x00011C, "Member 'FAnimNode_DragonSpineSolver::Virtual_leg_width' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Maximum_Dip_Height) == 0x000120, "Member 'FAnimNode_DragonSpineSolver::Maximum_Dip_Height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Rotation_power_between) == 0x000128, "Member 'FAnimNode_DragonSpineSolver::Rotation_power_between' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Automatic_Fabrik_Selection) == 0x00012C, "Member 'FAnimNode_DragonSpineSolver::Use_Automatic_Fabrik_Selection' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Location_Lerp_Speed) == 0x000130, "Member 'FAnimNode_DragonSpineSolver::Location_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Rotation_Lerp_Speed) == 0x000134, "Member 'FAnimNode_DragonSpineSolver::Rotation_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Influence_Alpha) == 0x000138, "Member 'FAnimNode_DragonSpineSolver::Chest_Influence_Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_ForwardRotation_Intensity) == 0x00013C, "Member 'FAnimNode_DragonSpineSolver::Pelvis_ForwardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_ForwardRotation_Intensity) == 0x000140, "Member 'FAnimNode_DragonSpineSolver::Chest_ForwardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, DebugEffectorTransform) == 0x000150, "Member 'FAnimNode_DragonSpineSolver::DebugEffectorTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Enable_solver) == 0x000180, "Member 'FAnimNode_DragonSpineSolver::Enable_solver' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Fake_Chest_Rotations) == 0x000181, "Member 'FAnimNode_DragonSpineSolver::Use_Fake_Chest_Rotations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Fake_Pelvis_Rotations) == 0x000182, "Member 'FAnimNode_DragonSpineSolver::Use_Fake_Pelvis_Rotations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Force_Activation) == 0x000188, "Member 'FAnimNode_DragonSpineSolver::Force_Activation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Accurate_feet_placement) == 0x000189, "Member 'FAnimNode_DragonSpineSolver::Accurate_feet_placement' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Only_Root_Solve) == 0x00018A, "Member 'FAnimNode_DragonSpineSolver::Only_Root_Solve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Overall_PostSolved_Offset) == 0x000194, "Member 'FAnimNode_DragonSpineSolver::Overall_PostSolved_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Character_direction_vector_CS) == 0x0001A0, "Member 'FAnimNode_DragonSpineSolver::Character_direction_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Forward_Direction_Vector) == 0x0001AC, "Member 'FAnimNode_DragonSpineSolver::Forward_Direction_Vector' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, SolverReferencePose) == 0x0001C4, "Member 'FAnimNode_DragonSpineSolver::SolverReferencePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Spine_Feet_Connect) == 0x0001C5, "Member 'FAnimNode_DragonSpineSolver::Spine_Feet_Connect' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Snake_Joint_Speed) == 0x0004A4, "Member 'FAnimNode_DragonSpineSolver::Snake_Joint_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Is_snake) == 0x0004A8, "Member 'FAnimNode_DragonSpineSolver::Is_snake' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Maximum_Feet_Distance) == 0x0004AC, "Member 'FAnimNode_DragonSpineSolver::Maximum_Feet_Distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Minimum_Feet_Distance) == 0x0004B0, "Member 'FAnimNode_DragonSpineSolver::Minimum_Feet_Distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, DisplayLineTrace) == 0x0004B4, "Member 'FAnimNode_DragonSpineSolver::DisplayLineTrace' has a wrong offset!");

}

