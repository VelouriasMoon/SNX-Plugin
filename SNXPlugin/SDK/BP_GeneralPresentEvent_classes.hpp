#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GeneralPresentEvent

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_MakeEventActorBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GeneralPresentEvent.BP_GeneralPresentEvent_C
// 0x0138 (0x05B0 - 0x0478)
class ABP_GeneralPresentEvent_C final : public ABP_MakeEventActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GeneralPresentEvent_C;           // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FPresentContainMessageData>     PresentMessageData;                                // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FPresentEventDataCell                  PresentEventData;                                  // 0x0490(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   FromCharaID;                                       // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ForCharaID;                                        // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemId;                                            // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DefaultPresentMessagePath;                         // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class ARSCharacterBase*                       FromCharaActor;                                    // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAjitoMember*                           ForCharaActor;                                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVoiceCheck;                                      // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkipMessage;                                     // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FD0[0x6];                                     // 0x055A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ForCharaTalkMontage;                               // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ForCharaReactionMontage;                           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         PresentSequence;                                   // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ChangeCharaIDPath;                                 // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ChangePlayerCharaIDPath;                           // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PresentSequencePath;                               // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsFirstTime;                                       // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerID                                     SendCharaID;                                       // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     RecvCharaID;                                       // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadedSequencer;                                 // 0x05AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GeneralPresentEvent(int32 EntryPoint);
	void StartEvent();
	void EventLoadMessage();
	void StartPresentEvent(class FName Param_ForCharaID, class FName Param_ItemId);
	void SubEvent(class AMainEventLatentActor* Latenter);
	void ReceiveTick(float DeltaSeconds);
	void SetForCharaActor();
	void SetFromCharaActor();
	void LoadPresentEventAsset();
	void GetEPlayerIDToFName(class FName CharaID, EPlayerID* PlayerId);
	void StartGamePresentEvent(class FName Param_ForCharaID, class FName Param_ItemId);
	void ChangePlayerPresentAnimationPath(const class FString& BasePath, class FString* ReturnPath);
	bool IsMainPlayerIDToForCharaID();
	EItemFavorability GetPresentItemFavorability();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GeneralPresentEvent_C">();
	}
	static class ABP_GeneralPresentEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GeneralPresentEvent_C>();
	}
};
static_assert(alignof(ABP_GeneralPresentEvent_C) == 0x000008, "Wrong alignment on ABP_GeneralPresentEvent_C");
static_assert(sizeof(ABP_GeneralPresentEvent_C) == 0x0005B0, "Wrong size on ABP_GeneralPresentEvent_C");
static_assert(offsetof(ABP_GeneralPresentEvent_C, UberGraphFrame_BP_GeneralPresentEvent_C) == 0x000478, "Member 'ABP_GeneralPresentEvent_C::UberGraphFrame_BP_GeneralPresentEvent_C' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, PresentMessageData) == 0x000480, "Member 'ABP_GeneralPresentEvent_C::PresentMessageData' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, PresentEventData) == 0x000490, "Member 'ABP_GeneralPresentEvent_C::PresentEventData' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, FromCharaID) == 0x000520, "Member 'ABP_GeneralPresentEvent_C::FromCharaID' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ForCharaID) == 0x000528, "Member 'ABP_GeneralPresentEvent_C::ForCharaID' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ItemId) == 0x000530, "Member 'ABP_GeneralPresentEvent_C::ItemId' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, DefaultPresentMessagePath) == 0x000538, "Member 'ABP_GeneralPresentEvent_C::DefaultPresentMessagePath' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, FromCharaActor) == 0x000548, "Member 'ABP_GeneralPresentEvent_C::FromCharaActor' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ForCharaActor) == 0x000550, "Member 'ABP_GeneralPresentEvent_C::ForCharaActor' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, IsVoiceCheck) == 0x000558, "Member 'ABP_GeneralPresentEvent_C::IsVoiceCheck' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, IsSkipMessage) == 0x000559, "Member 'ABP_GeneralPresentEvent_C::IsSkipMessage' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ForCharaTalkMontage) == 0x000560, "Member 'ABP_GeneralPresentEvent_C::ForCharaTalkMontage' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ForCharaReactionMontage) == 0x000568, "Member 'ABP_GeneralPresentEvent_C::ForCharaReactionMontage' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, PresentSequence) == 0x000570, "Member 'ABP_GeneralPresentEvent_C::PresentSequence' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ChangeCharaIDPath) == 0x000578, "Member 'ABP_GeneralPresentEvent_C::ChangeCharaIDPath' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, ChangePlayerCharaIDPath) == 0x000588, "Member 'ABP_GeneralPresentEvent_C::ChangePlayerCharaIDPath' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, PresentSequencePath) == 0x000598, "Member 'ABP_GeneralPresentEvent_C::PresentSequencePath' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, IsFirstTime) == 0x0005A8, "Member 'ABP_GeneralPresentEvent_C::IsFirstTime' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, SendCharaID) == 0x0005A9, "Member 'ABP_GeneralPresentEvent_C::SendCharaID' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, RecvCharaID) == 0x0005AA, "Member 'ABP_GeneralPresentEvent_C::RecvCharaID' has a wrong offset!");
static_assert(offsetof(ABP_GeneralPresentEvent_C, IsLoadedSequencer) == 0x0005AB, "Member 'ABP_GeneralPresentEvent_C::IsLoadedSequencer' has a wrong offset!");

}

