#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BulletBase

#include "Basic.hpp"

#include "AttackCollisionInfoBP_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_BulletBase.BP_BulletBase_C.ExecuteUbergraph_BP_BulletBase
// 0x01F8 (0x01F8 - 0x0000)
struct BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_OnMoveUpdate_ResultLocation;              // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnMoveUpdate_bEnd;                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnMoveUpdate_bImpactLand;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C67[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnUpdate_bDummy;                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C68[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result;                 // 0x0030(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_OnAttackActorHit_bDummy;                  // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PrevCheckOnAttackActorHit_bOK;            // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase) == 0x000008, "Wrong alignment on BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase");
static_assert(sizeof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase) == 0x0001F8, "Wrong size on BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, EntryPoint) == 0x000000, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, K2Node_Event_DeltaTime) == 0x000004, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_OnMoveUpdate_ResultLocation) == 0x000008, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_OnMoveUpdate_ResultLocation' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_OnMoveUpdate_bEnd) == 0x000014, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_OnMoveUpdate_bEnd' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_OnMoveUpdate_bImpactLand) == 0x000015, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_OnMoveUpdate_bImpactLand' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_MakeRotFromZ_ReturnValue) == 0x000018, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, K2Node_Event_DeltaSeconds) == 0x000024, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_OnUpdate_bDummy) == 0x000028, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_OnUpdate_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, K2Node_Event_EndPlayReason) == 0x000029, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, K2Node_ComponentBoundEvent_Result) == 0x000030, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::K2Node_ComponentBoundEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_OnAttackActorHit_bDummy) == 0x0001F0, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_OnAttackActorHit_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_PrevCheckOnAttackActorHit_bOK) == 0x0001F1, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_PrevCheckOnAttackActorHit_bOK' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase, CallFunc_IsValid_ReturnValue) == 0x0001F2, "Member 'BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature");
static_assert(sizeof(BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature");
static_assert(offsetof(BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_BulletBase_C_ReceiveEndPlay");
static_assert(sizeof(BP_BulletBase_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_BulletBase_C_ReceiveEndPlay");
static_assert(offsetof(BP_BulletBase_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_BulletBase_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BulletBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BulletBase_C_ReceiveTick");
static_assert(sizeof(BP_BulletBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_BulletBase_C_ReceiveTick");
static_assert(offsetof(BP_BulletBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BulletBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.ParallelTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BulletBase_C_ParallelTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_ParallelTick) == 0x000004, "Wrong alignment on BP_BulletBase_C_ParallelTick");
static_assert(sizeof(BP_BulletBase_C_ParallelTick) == 0x000004, "Wrong size on BP_BulletBase_C_ParallelTick");
static_assert(offsetof(BP_BulletBase_C_ParallelTick, DeltaTime) == 0x000000, "Member 'BP_BulletBase_C_ParallelTick::DeltaTime' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.Fire
// 0x03B0 (0x03B0 - 0x0000)
struct BP_BulletBase_C_Fire final
{
public:
	class AActor*                                 Param_AttackOwner;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_FirePoint;                                   // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dir;                                               // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttackCollisionInfoBP                 Param_CollisionInfo;                               // 0x0020(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Param_bDisableImpactParticle;                      // 0x00E0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x00E1(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSuccess;                                         // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C69[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSParallelObjectManager*               CallFunc_GetParallelObjectManager_NewParam;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RegisterObject_ReturnValue;               // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBulletVisibility_dunnmy;               // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C6A[0x1];                                     // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C6B[0x5];                                     // 0x0113(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETeamKind                                     CallFunc_GetTeam_Team;                             // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C6C[0x6];                                     // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCAttackCollisionInfo                 CallFunc_AttackCollisionInfoToC_Out;               // 0x0130(0x0280)()
};
static_assert(alignof(BP_BulletBase_C_Fire) == 0x000008, "Wrong alignment on BP_BulletBase_C_Fire");
static_assert(sizeof(BP_BulletBase_C_Fire) == 0x0003B0, "Wrong size on BP_BulletBase_C_Fire");
static_assert(offsetof(BP_BulletBase_C_Fire, Param_AttackOwner) == 0x000000, "Member 'BP_BulletBase_C_Fire::Param_AttackOwner' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, Param_FirePoint) == 0x000008, "Member 'BP_BulletBase_C_Fire::Param_FirePoint' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, Dir) == 0x000014, "Member 'BP_BulletBase_C_Fire::Dir' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, Param_CollisionInfo) == 0x000020, "Member 'BP_BulletBase_C_Fire::Param_CollisionInfo' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, Param_bDisableImpactParticle) == 0x0000E0, "Member 'BP_BulletBase_C_Fire::Param_bDisableImpactParticle' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, bSuccess) == 0x0000E1, "Member 'BP_BulletBase_C_Fire::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, LbSuccess) == 0x0000E2, "Member 'BP_BulletBase_C_Fire::LbSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_IsValid_ReturnValue) == 0x0000E3, "Member 'BP_BulletBase_C_Fire::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_IsValid_ReturnValue_1) == 0x0000E4, "Member 'BP_BulletBase_C_Fire::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_GetParallelObjectManager_NewParam) == 0x0000E8, "Member 'BP_BulletBase_C_Fire::CallFunc_GetParallelObjectManager_NewParam' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F0, "Member 'BP_BulletBase_C_Fire::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_RegisterObject_ReturnValue) == 0x0000F1, "Member 'BP_BulletBase_C_Fire::CallFunc_RegisterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_SetBulletVisibility_dunnmy) == 0x0000F2, "Member 'BP_BulletBase_C_Fire::CallFunc_SetBulletVisibility_dunnmy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_MakeRotFromX_ReturnValue) == 0x0000F4, "Member 'BP_BulletBase_C_Fire::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000100, "Member 'BP_BulletBase_C_Fire::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_BulletBase_C_Fire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000111, "Member 'BP_BulletBase_C_Fire::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000112, "Member 'BP_BulletBase_C_Fire::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000118, "Member 'BP_BulletBase_C_Fire::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, K2Node_DynamicCast_bSuccess_1) == 0x000128, "Member 'BP_BulletBase_C_Fire::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_GetTeam_Team) == 0x000129, "Member 'BP_BulletBase_C_Fire::CallFunc_GetTeam_Team' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_Fire, CallFunc_AttackCollisionInfoToC_Out) == 0x000130, "Member 'BP_BulletBase_C_Fire::CallFunc_AttackCollisionInfoToC_Out' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.OnAttackEnd
// 0x0020 (0x0020 - 0x0000)
struct BP_BulletBase_C_OnAttackEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C6D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSParallelObjectManager*               CallFunc_GetParallelObjectManager_NewParam;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetBulletVisibility_dunnmy;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_OnAttackEnd) == 0x000008, "Wrong alignment on BP_BulletBase_C_OnAttackEnd");
static_assert(sizeof(BP_BulletBase_C_OnAttackEnd) == 0x000020, "Wrong size on BP_BulletBase_C_OnAttackEnd");
static_assert(offsetof(BP_BulletBase_C_OnAttackEnd, bDummy) == 0x000000, "Member 'BP_BulletBase_C_OnAttackEnd::bDummy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackEnd, CallFunc_GetHitManager_Manager) == 0x000008, "Member 'BP_BulletBase_C_OnAttackEnd::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackEnd, CallFunc_GetParallelObjectManager_NewParam) == 0x000010, "Member 'BP_BulletBase_C_OnAttackEnd::CallFunc_GetParallelObjectManager_NewParam' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackEnd, CallFunc_SetBulletVisibility_dunnmy) == 0x000018, "Member 'BP_BulletBase_C_OnAttackEnd::CallFunc_SetBulletVisibility_dunnmy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackEnd, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_BulletBase_C_OnAttackEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.OnUpdate
// 0x0038 (0x0038 - 0x0000)
struct BP_BulletBase_C_OnUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C6E[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_OnMoveUpdate_ResultLocation;              // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnMoveUpdate_bEnd;                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnMoveUpdate_bImpactLand;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_OnUpdate) == 0x000008, "Wrong alignment on BP_BulletBase_C_OnUpdate");
static_assert(sizeof(BP_BulletBase_C_OnUpdate) == 0x000038, "Wrong size on BP_BulletBase_C_OnUpdate");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, DeltaSeconds) == 0x000000, "Member 'BP_BulletBase_C_OnUpdate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, bDummy) == 0x000004, "Member 'BP_BulletBase_C_OnUpdate::bDummy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_IsValid_ReturnValue_1) == 0x000006, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000007, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_IsOver_ReturnValue) == 0x000008, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_IsEnable_ReturnValue) == 0x000009, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_GetHitManager_Manager) == 0x000010, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_MakeRotFromZ_ReturnValue) == 0x000018, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_OnMoveUpdate_ResultLocation) == 0x000024, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_OnMoveUpdate_ResultLocation' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_OnMoveUpdate_bEnd) == 0x000030, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_OnMoveUpdate_bEnd' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_OnMoveUpdate_bImpactLand) == 0x000031, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_OnMoveUpdate_bImpactLand' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnUpdate, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'BP_BulletBase_C_OnUpdate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.AttackEnd
// 0x0002 (0x0002 - 0x0000)
struct BP_BulletBase_C_AttackEnd final
{
public:
	bool                                          CallFunc_IsAttack_bAttack;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackEnd_bDummy;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_AttackEnd) == 0x000001, "Wrong alignment on BP_BulletBase_C_AttackEnd");
static_assert(sizeof(BP_BulletBase_C_AttackEnd) == 0x000002, "Wrong size on BP_BulletBase_C_AttackEnd");
static_assert(offsetof(BP_BulletBase_C_AttackEnd, CallFunc_IsAttack_bAttack) == 0x000000, "Member 'BP_BulletBase_C_AttackEnd::CallFunc_IsAttack_bAttack' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_AttackEnd, CallFunc_OnAttackEnd_bDummy) == 0x000001, "Member 'BP_BulletBase_C_AttackEnd::CallFunc_OnAttackEnd_bDummy' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.SetBulletVisibility
// 0x0002 (0x0002 - 0x0000)
struct BP_BulletBase_C_SetBulletVisibility final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dunnmy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_SetBulletVisibility) == 0x000001, "Wrong alignment on BP_BulletBase_C_SetBulletVisibility");
static_assert(sizeof(BP_BulletBase_C_SetBulletVisibility) == 0x000002, "Wrong size on BP_BulletBase_C_SetBulletVisibility");
static_assert(offsetof(BP_BulletBase_C_SetBulletVisibility, On) == 0x000000, "Member 'BP_BulletBase_C_SetBulletVisibility::On' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_SetBulletVisibility, Dunnmy) == 0x000001, "Member 'BP_BulletBase_C_SetBulletVisibility::Dunnmy' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.OnMoveUpdate
// 0x0408 (0x0408 - 0x0000)
struct BP_BulletBase_C_OnMoveUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ResultLocation;                                    // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Param_bImpactLand;                                 // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbImpactLand;                                      // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LPrevPenetrateEnemy;                               // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnd;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C6F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LHitResult;                                        // 0x0018(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                LEndPoint;                                         // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LSpeed;                                            // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C70[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C71[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C72[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C73[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C74[0x2];                                     // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MoveUpdate_ReturnValue;                   // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C75[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C76[0x2];                                     // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C77[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C78[0x2];                                     // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C79[0x4];                                     // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0278(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C7A[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0290(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	ETeamKind                                     CallFunc_GetTeam_Team;                             // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C7B[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C7C[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x02B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_3;            // 0x033A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_3;         // 0x033B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time_3;                    // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_3;                // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_3;                // 0x0344(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_3;             // 0x0350(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_3;                  // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_3;            // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C7D[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_3;                 // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_3;                // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_3;            // 0x0388(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_3;             // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_3;                 // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_3;               // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_3;              // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_3;                // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C7E[0x6];                                     // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x03C0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x03D0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C7F[0x7];                                     // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_LineTraceMultiForObjects_OutHits;         // 0x03E8(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_LineTraceMultiForObjects_ReturnValue;     // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C80[0x2];                                     // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_OnMoveUpdate) == 0x000008, "Wrong alignment on BP_BulletBase_C_OnMoveUpdate");
static_assert(sizeof(BP_BulletBase_C_OnMoveUpdate) == 0x000408, "Wrong size on BP_BulletBase_C_OnMoveUpdate");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, DeltaSeconds) == 0x000000, "Member 'BP_BulletBase_C_OnMoveUpdate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, ResultLocation) == 0x000004, "Member 'BP_BulletBase_C_OnMoveUpdate::ResultLocation' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, bEnd) == 0x000010, "Member 'BP_BulletBase_C_OnMoveUpdate::bEnd' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Param_bImpactLand) == 0x000011, "Member 'BP_BulletBase_C_OnMoveUpdate::Param_bImpactLand' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, LbImpactLand) == 0x000012, "Member 'BP_BulletBase_C_OnMoveUpdate::LbImpactLand' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, LPrevPenetrateEnemy) == 0x000013, "Member 'BP_BulletBase_C_OnMoveUpdate::LPrevPenetrateEnemy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, LbEnd) == 0x000014, "Member 'BP_BulletBase_C_OnMoveUpdate::LbEnd' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, LHitResult) == 0x000018, "Member 'BP_BulletBase_C_OnMoveUpdate::LHitResult' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, LEndPoint) == 0x0000A0, "Member 'BP_BulletBase_C_OnMoveUpdate::LEndPoint' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, LSpeed) == 0x0000AC, "Member 'BP_BulletBase_C_OnMoveUpdate::LSpeed' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_int_Variable) == 0x0000B0, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_bool_Variable) == 0x0000B4, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_int_Loop_Counter_Variable) == 0x0000B8, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_bool_True_if_break_was_hit_Variable) == 0x0000C0, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_int_Array_Index_Variable) == 0x0000C4, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Not_PreBool_ReturnValue) == 0x0000C8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_int_Loop_Num_Variable) == 0x0000CC, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BooleanAND_ReturnValue) == 0x0000D1, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D2, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D3, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_FaceIndex) == 0x000134, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceStart) == 0x000138, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceEnd) == 0x000144, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000150, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000159, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_MoveUpdate_ReturnValue) == 0x00015C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_MoveUpdate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000168, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00016C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000170, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000174, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000178, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000179, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Time_1) == 0x00017C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Distance_1) == 0x000180, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Location_1) == 0x000184, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000190, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Normal_1) == 0x00019C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0001A8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_PhysMat_1) == 0x0001B8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitActor_1) == 0x0001C0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitComponent_1) == 0x0001C8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitBoneName_1) == 0x0001D0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitItem_1) == 0x0001D8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_FaceIndex_1) == 0x0001DC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceStart_1) == 0x0001E0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceEnd_1) == 0x0001EC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bBlockingHit_2) == 0x0001F8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x0001F9, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Time_2) == 0x0001FC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Distance_2) == 0x000200, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Location_2) == 0x000204, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000210, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Normal_2) == 0x00021C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000228, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_PhysMat_2) == 0x000238, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitActor_2) == 0x000240, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitComponent_2) == 0x000248, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitBoneName_2) == 0x000250, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitItem_2) == 0x000258, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_FaceIndex_2) == 0x00025C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceStart_2) == 0x000260, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceEnd_2) == 0x00026C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000278, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_DynamicCast_bSuccess_1) == 0x000288, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_object_Variable) == 0x000290, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_GetTeam_Team) == 0x0002A0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_GetTeam_Team' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_float_Variable) == 0x0002A4, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Greater_IntInt_ReturnValue) == 0x0002A8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002AC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_LineTraceSingle_OutHit) == 0x0002B0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_LineTraceSingle_ReturnValue) == 0x000338, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_bool_Variable_1) == 0x000339, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bBlockingHit_3) == 0x00033A, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bBlockingHit_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_bInitialOverlap_3) == 0x00033B, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_bInitialOverlap_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Time_3) == 0x00033C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Time_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Distance_3) == 0x000340, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Distance_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Location_3) == 0x000344, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Location_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactPoint_3) == 0x000350, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactPoint_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_Normal_3) == 0x00035C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_Normal_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_ImpactNormal_3) == 0x000368, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_ImpactNormal_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_PhysMat_3) == 0x000378, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_PhysMat_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitActor_3) == 0x000380, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitActor_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitComponent_3) == 0x000388, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitComponent_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitBoneName_3) == 0x000390, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitBoneName_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_HitItem_3) == 0x000398, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_HitItem_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_FaceIndex_3) == 0x00039C, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_FaceIndex_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceStart_3) == 0x0003A0, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceStart_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_BreakHitResult_TraceEnd_3) == 0x0003AC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_BreakHitResult_TraceEnd_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0003B8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_bool_Variable_2) == 0x0003B9, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_MakeArray_Array) == 0x0003C0, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_MakeArray_Array_1) == 0x0003D0, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, Temp_bool_Variable_3) == 0x0003E0, "Member 'BP_BulletBase_C_OnMoveUpdate::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_LineTraceMultiForObjects_OutHits) == 0x0003E8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_LineTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_LineTraceMultiForObjects_ReturnValue) == 0x0003F8, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_LineTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_Select_Default) == 0x0003F9, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Array_Length_ReturnValue) == 0x0003FC, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000400, "Member 'BP_BulletBase_C_OnMoveUpdate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnMoveUpdate, K2Node_Select_Default_1) == 0x000404, "Member 'BP_BulletBase_C_OnMoveUpdate::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.MoveUpdate
// 0x0028 (0x0028 - 0x0000)
struct BP_BulletBase_C_MoveUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_MoveUpdate) == 0x000004, "Wrong alignment on BP_BulletBase_C_MoveUpdate");
static_assert(sizeof(BP_BulletBase_C_MoveUpdate) == 0x000028, "Wrong size on BP_BulletBase_C_MoveUpdate");
static_assert(offsetof(BP_BulletBase_C_MoveUpdate, DeltaSeconds) == 0x000000, "Member 'BP_BulletBase_C_MoveUpdate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_MoveUpdate, ReturnValue) == 0x000004, "Member 'BP_BulletBase_C_MoveUpdate::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_MoveUpdate, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'BP_BulletBase_C_MoveUpdate::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_MoveUpdate, CallFunc_Add_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_BulletBase_C_MoveUpdate::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.PostMove
// 0x0110 (0x0110 - 0x0000)
struct BP_BulletBase_C_PostMove final
{
public:
	struct FVector                                LCenterPoint;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESequencerDilationOwner                       Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C81[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C82[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESequencerDilationOwner                       K2Node_Select_Default;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C83[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C84[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0084(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_PostMove) == 0x000008, "Wrong alignment on BP_BulletBase_C_PostMove");
static_assert(sizeof(BP_BulletBase_C_PostMove) == 0x000110, "Wrong size on BP_BulletBase_C_PostMove");
static_assert(offsetof(BP_BulletBase_C_PostMove, LCenterPoint) == 0x000000, "Member 'BP_BulletBase_C_PostMove::LCenterPoint' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_VSize_ReturnValue) == 0x00000C, "Member 'BP_BulletBase_C_PostMove::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, Temp_byte_Variable) == 0x000010, "Member 'BP_BulletBase_C_PostMove::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_BulletBase_C_PostMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000018, "Member 'BP_BulletBase_C_PostMove::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BulletBase_C_PostMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_IsMainPlayer_bMainPlayer) == 0x000029, "Member 'BP_BulletBase_C_PostMove::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'BP_BulletBase_C_PostMove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_BulletBase_C_PostMove::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000044, "Member 'BP_BulletBase_C_PostMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'BP_BulletBase_C_PostMove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_VSizeSquared_ReturnValue) == 0x000054, "Member 'BP_BulletBase_C_PostMove::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_BulletBase_C_PostMove::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BP_BulletBase_C_PostMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_IsValid_ReturnValue_1) == 0x00005A, "Member 'BP_BulletBase_C_PostMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, Temp_bool_Variable) == 0x00005B, "Member 'BP_BulletBase_C_PostMove::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, K2Node_Select_Default) == 0x00005C, "Member 'BP_BulletBase_C_PostMove::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000060, "Member 'BP_BulletBase_C_PostMove::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_IsValid_ReturnValue_2) == 0x000068, "Member 'BP_BulletBase_C_PostMove::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, K2Node_SwitchEnum_CmpSuccess) == 0x000069, "Member 'BP_BulletBase_C_PostMove::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00006C, "Member 'BP_BulletBase_C_PostMove::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000078, "Member 'BP_BulletBase_C_PostMove::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000084, "Member 'BP_BulletBase_C_PostMove::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PostMove, CallFunc_K2_SetActorLocation_ReturnValue) == 0x00010C, "Member 'BP_BulletBase_C_PostMove::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.PrevCheckOnAttackActorHit
// 0x01E0 (0x01E0 - 0x0000)
struct BP_BulletBase_C_PrevCheckOnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bOK;                                               // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C85[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_PrevCheckOnAttackActorHit) == 0x000008, "Wrong alignment on BP_BulletBase_C_PrevCheckOnAttackActorHit");
static_assert(sizeof(BP_BulletBase_C_PrevCheckOnAttackActorHit) == 0x0001E0, "Wrong size on BP_BulletBase_C_PrevCheckOnAttackActorHit");
static_assert(offsetof(BP_BulletBase_C_PrevCheckOnAttackActorHit, HitResult) == 0x000000, "Member 'BP_BulletBase_C_PrevCheckOnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PrevCheckOnAttackActorHit, bOK) == 0x0001C0, "Member 'BP_BulletBase_C_PrevCheckOnAttackActorHit::bOK' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PrevCheckOnAttackActorHit, HitActor) == 0x0001C8, "Member 'BP_BulletBase_C_PrevCheckOnAttackActorHit::HitActor' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PrevCheckOnAttackActorHit, CallFunc_Array_Add_ReturnValue) == 0x0001D0, "Member 'BP_BulletBase_C_PrevCheckOnAttackActorHit::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PrevCheckOnAttackActorHit, CallFunc_Array_Find_ReturnValue) == 0x0001D4, "Member 'BP_BulletBase_C_PrevCheckOnAttackActorHit::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_PrevCheckOnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001D8, "Member 'BP_BulletBase_C_PrevCheckOnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.OnAttackActorHit
// 0x01D8 (0x01D8 - 0x0000)
struct BP_BulletBase_C_OnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bDummy;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C86[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_OnAttackActorHit) == 0x000008, "Wrong alignment on BP_BulletBase_C_OnAttackActorHit");
static_assert(sizeof(BP_BulletBase_C_OnAttackActorHit) == 0x0001D8, "Wrong size on BP_BulletBase_C_OnAttackActorHit");
static_assert(offsetof(BP_BulletBase_C_OnAttackActorHit, HitResult) == 0x000000, "Member 'BP_BulletBase_C_OnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackActorHit, bDummy) == 0x0001C0, "Member 'BP_BulletBase_C_OnAttackActorHit::bDummy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackActorHit, K2Node_DynamicCast_AsRSBattle_Character) == 0x0001C8, "Member 'BP_BulletBase_C_OnAttackActorHit::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess) == 0x0001D0, "Member 'BP_BulletBase_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_OnAttackActorHit, CallFunc_OnAttackActorHit_Dummy) == 0x0001D1, "Member 'BP_BulletBase_C_OnAttackActorHit::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.UpdateDilation
// 0x0058 (0x0058 - 0x0000)
struct BP_BulletBase_C_UpdateDilation final
{
public:
	float                                         LBaseDilation;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C87[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C88[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue_1;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C89[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C8A[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActorTimeDilation_ReturnValue;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorTimeDilation_ReturnValue_1;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C8C[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_UpdateDilation) == 0x000008, "Wrong alignment on BP_BulletBase_C_UpdateDilation");
static_assert(sizeof(BP_BulletBase_C_UpdateDilation) == 0x000058, "Wrong size on BP_BulletBase_C_UpdateDilation");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, LBaseDilation) == 0x000000, "Member 'BP_BulletBase_C_UpdateDilation::LBaseDilation' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, LPlayer) == 0x000008, "Member 'BP_BulletBase_C_UpdateDilation::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetGlobalTimeDilation_ReturnValue) == 0x000010, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetGlobalTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000014, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetGlobalTimeDilation_ReturnValue_1) == 0x000018, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetGlobalTimeDilation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetAttachParentActor_ReturnValue) == 0x000020, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetActorTimeDilation_ReturnValue) == 0x00002C, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetActorTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetActorTimeDilation_ReturnValue_1) == 0x000030, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetActorTimeDilation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000038, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetPlayerManager_PlayerManager) == 0x000040, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, K2Node_SwitchEnum_CmpSuccess) == 0x000049, "Member 'BP_BulletBase_C_UpdateDilation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_UpdateDilation, CallFunc_GetPlayer_ReturnValue) == 0x000050, "Member 'BP_BulletBase_C_UpdateDilation::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.SetAttackDelayTime
// 0x0004 (0x0004 - 0x0000)
struct BP_BulletBase_C_SetAttackDelayTime final
{
public:
	float                                         AttackCollisionDelayTime;                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_SetAttackDelayTime) == 0x000004, "Wrong alignment on BP_BulletBase_C_SetAttackDelayTime");
static_assert(sizeof(BP_BulletBase_C_SetAttackDelayTime) == 0x000004, "Wrong size on BP_BulletBase_C_SetAttackDelayTime");
static_assert(offsetof(BP_BulletBase_C_SetAttackDelayTime, AttackCollisionDelayTime) == 0x000000, "Member 'BP_BulletBase_C_SetAttackDelayTime::AttackCollisionDelayTime' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.ForceEnd
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_ForceEnd final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_ForceEnd) == 0x000001, "Wrong alignment on BP_BulletBase_C_ForceEnd");
static_assert(sizeof(BP_BulletBase_C_ForceEnd) == 0x000001, "Wrong size on BP_BulletBase_C_ForceEnd");
static_assert(offsetof(BP_BulletBase_C_ForceEnd, Return) == 0x000000, "Member 'BP_BulletBase_C_ForceEnd::Return' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.IsEnableParallelTick
// 0x0002 (0x0002 - 0x0000)
struct BP_BulletBase_C_IsEnableParallelTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_IsEnableParallelTick) == 0x000001, "Wrong alignment on BP_BulletBase_C_IsEnableParallelTick");
static_assert(sizeof(BP_BulletBase_C_IsEnableParallelTick) == 0x000002, "Wrong size on BP_BulletBase_C_IsEnableParallelTick");
static_assert(offsetof(BP_BulletBase_C_IsEnableParallelTick, ReturnValue) == 0x000000, "Member 'BP_BulletBase_C_IsEnableParallelTick::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_IsEnableParallelTick, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000001, "Member 'BP_BulletBase_C_IsEnableParallelTick::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.GetParallelTiming
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_GetParallelTiming final
{
public:
	ERSParallelTiming                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_GetParallelTiming) == 0x000001, "Wrong alignment on BP_BulletBase_C_GetParallelTiming");
static_assert(sizeof(BP_BulletBase_C_GetParallelTiming) == 0x000001, "Wrong size on BP_BulletBase_C_GetParallelTiming");
static_assert(offsetof(BP_BulletBase_C_GetParallelTiming, ReturnValue) == 0x000000, "Member 'BP_BulletBase_C_GetParallelTiming::ReturnValue' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.InterceptAttack
// 0x0078 (0x0078 - 0x0000)
struct BP_BulletBase_C_InterceptAttack final
{
public:
	class ARSBattleCharacter_C*                   Intercepter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   NewTarget;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C8D[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C8F[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamKind                                     CallFunc_GetTeam_Team;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C90[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BulletBase_C_InterceptAttack) == 0x000008, "Wrong alignment on BP_BulletBase_C_InterceptAttack");
static_assert(sizeof(BP_BulletBase_C_InterceptAttack) == 0x000078, "Wrong size on BP_BulletBase_C_InterceptAttack");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, Intercepter) == 0x000000, "Member 'BP_BulletBase_C_InterceptAttack::Intercepter' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, NewTarget) == 0x000008, "Member 'BP_BulletBase_C_InterceptAttack::NewTarget' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, bDummy) == 0x000010, "Member 'BP_BulletBase_C_InterceptAttack::bDummy' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000028, "Member 'BP_BulletBase_C_InterceptAttack::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BulletBase_C_InterceptAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_GetActorForwardVector_ReturnValue) == 0x00003C, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_GetTeam_Team) == 0x000048, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_GetTeam_Team' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00004C, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_Normal_ReturnValue) == 0x000064, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_VSize_ReturnValue) == 0x000070, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BulletBase_C_InterceptAttack, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000074, "Member 'BP_BulletBase_C_InterceptAttack::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.InterceptReserve
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_InterceptReserve final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_InterceptReserve) == 0x000001, "Wrong alignment on BP_BulletBase_C_InterceptReserve");
static_assert(sizeof(BP_BulletBase_C_InterceptReserve) == 0x000001, "Wrong size on BP_BulletBase_C_InterceptReserve");
static_assert(offsetof(BP_BulletBase_C_InterceptReserve, bDummy) == 0x000000, "Member 'BP_BulletBase_C_InterceptReserve::bDummy' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.InterceptCancel
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_InterceptCancel final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_InterceptCancel) == 0x000001, "Wrong alignment on BP_BulletBase_C_InterceptCancel");
static_assert(sizeof(BP_BulletBase_C_InterceptCancel) == 0x000001, "Wrong size on BP_BulletBase_C_InterceptCancel");
static_assert(offsetof(BP_BulletBase_C_InterceptCancel, bDummy) == 0x000000, "Member 'BP_BulletBase_C_InterceptCancel::bDummy' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.IsInterceptFail
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_IsInterceptFail final
{
public:
	bool                                          bFail;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_IsInterceptFail) == 0x000001, "Wrong alignment on BP_BulletBase_C_IsInterceptFail");
static_assert(sizeof(BP_BulletBase_C_IsInterceptFail) == 0x000001, "Wrong size on BP_BulletBase_C_IsInterceptFail");
static_assert(offsetof(BP_BulletBase_C_IsInterceptFail, bFail) == 0x000000, "Member 'BP_BulletBase_C_IsInterceptFail::bFail' has a wrong offset!");

// Function BP_BulletBase.BP_BulletBase_C.IsAttack
// 0x0001 (0x0001 - 0x0000)
struct BP_BulletBase_C_IsAttack final
{
public:
	bool                                          Param_bAttack;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BulletBase_C_IsAttack) == 0x000001, "Wrong alignment on BP_BulletBase_C_IsAttack");
static_assert(sizeof(BP_BulletBase_C_IsAttack) == 0x000001, "Wrong size on BP_BulletBase_C_IsAttack");
static_assert(offsetof(BP_BulletBase_C_IsAttack, Param_bAttack) == 0x000000, "Member 'BP_BulletBase_C_IsAttack::Param_bAttack' has a wrong offset!");

}

