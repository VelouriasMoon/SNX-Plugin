#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_SplineBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMesh.BP_SplineMesh_C
// 0x00A0 (0x02E0 - 0x0240)
class ABP_SplineMesh_C : public ABP_SplineBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StaticMesh;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material1;                                         // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spacing;                                           // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TangentMod;                                        // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Closed;                                            // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Collision;                                         // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CollisionCameraThrough;                            // 0x027B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CollisionBattleField;                              // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AttachParentBound;                                 // 0x027D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DynamicShadow;                                     // 0x027E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8781[0x1];                                     // 0x027F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material2;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material3;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material4;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material5;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanEverAffectNavigation;                           // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverrideLightMapRes;                               // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8782[0x2];                                     // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverridenLightMapRes;                              // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PositionOffset;                                    // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveLastMesh;                                    // 0x02B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8783[0x3];                                     // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          StaticShadow;                                      // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseTwoSidedLighting;                               // 0x02C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowTwoSided;                                    // 0x02CA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseMeshRoll;                                       // 0x02CB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LightmapTypeVolumetric;                            // 0x02CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VisibleInReflectionCaptures;                       // 0x02CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8784[0x2];                                     // 0x02CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDrawDistance;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredMaxDrawDistance;                            // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowCullDistanceVolume;                           // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SplineMesh(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetCollisionEnable(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMesh_C">();
	}
	static class ABP_SplineMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMesh_C>();
	}
};
static_assert(alignof(ABP_SplineMesh_C) == 0x000008, "Wrong alignment on ABP_SplineMesh_C");
static_assert(sizeof(ABP_SplineMesh_C) == 0x0002E0, "Wrong size on ABP_SplineMesh_C");
static_assert(offsetof(ABP_SplineMesh_C, UberGraphFrame) == 0x000240, "Member 'ABP_SplineMesh_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Box) == 0x000248, "Member 'ABP_SplineMesh_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Spline) == 0x000250, "Member 'ABP_SplineMesh_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, StaticMesh) == 0x000258, "Member 'ABP_SplineMesh_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Material) == 0x000260, "Member 'ABP_SplineMesh_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Material1) == 0x000268, "Member 'ABP_SplineMesh_C::Material1' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Spacing) == 0x000270, "Member 'ABP_SplineMesh_C::Spacing' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, TangentMod) == 0x000274, "Member 'ABP_SplineMesh_C::TangentMod' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, ForwardAxis) == 0x000278, "Member 'ABP_SplineMesh_C::ForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Closed) == 0x000279, "Member 'ABP_SplineMesh_C::Closed' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Collision) == 0x00027A, "Member 'ABP_SplineMesh_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, CollisionCameraThrough) == 0x00027B, "Member 'ABP_SplineMesh_C::CollisionCameraThrough' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, CollisionBattleField) == 0x00027C, "Member 'ABP_SplineMesh_C::CollisionBattleField' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AttachParentBound) == 0x00027D, "Member 'ABP_SplineMesh_C::AttachParentBound' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, DynamicShadow) == 0x00027E, "Member 'ABP_SplineMesh_C::DynamicShadow' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Material2) == 0x000280, "Member 'ABP_SplineMesh_C::Material2' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Material3) == 0x000288, "Member 'ABP_SplineMesh_C::Material3' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Material4) == 0x000290, "Member 'ABP_SplineMesh_C::Material4' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Material5) == 0x000298, "Member 'ABP_SplineMesh_C::Material5' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, CanEverAffectNavigation) == 0x0002A0, "Member 'ABP_SplineMesh_C::CanEverAffectNavigation' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, OverrideLightMapRes) == 0x0002A1, "Member 'ABP_SplineMesh_C::OverrideLightMapRes' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, OverridenLightMapRes) == 0x0002A4, "Member 'ABP_SplineMesh_C::OverridenLightMapRes' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, PositionOffset) == 0x0002A8, "Member 'ABP_SplineMesh_C::PositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, RemoveLastMesh) == 0x0002B4, "Member 'ABP_SplineMesh_C::RemoveLastMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, SplineMeshComponents) == 0x0002B8, "Member 'ABP_SplineMesh_C::SplineMeshComponents' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, StaticShadow) == 0x0002C8, "Member 'ABP_SplineMesh_C::StaticShadow' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseTwoSidedLighting) == 0x0002C9, "Member 'ABP_SplineMesh_C::UseTwoSidedLighting' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, ShadowTwoSided) == 0x0002CA, "Member 'ABP_SplineMesh_C::ShadowTwoSided' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseMeshRoll) == 0x0002CB, "Member 'ABP_SplineMesh_C::UseMeshRoll' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, LightmapTypeVolumetric) == 0x0002CC, "Member 'ABP_SplineMesh_C::LightmapTypeVolumetric' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, VisibleInReflectionCaptures) == 0x0002CD, "Member 'ABP_SplineMesh_C::VisibleInReflectionCaptures' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, MinDrawDistance) == 0x0002D0, "Member 'ABP_SplineMesh_C::MinDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, DesiredMaxDrawDistance) == 0x0002D4, "Member 'ABP_SplineMesh_C::DesiredMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AllowCullDistanceVolume) == 0x0002D8, "Member 'ABP_SplineMesh_C::AllowCullDistanceVolume' has a wrong offset!");

}

