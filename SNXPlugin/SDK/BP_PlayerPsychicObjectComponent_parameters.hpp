#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPsychicObjectComponent

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "PsychicGrabPosData_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CaptureSuccess__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature final
{
public:
	class UAnimMontage*                           Unique_montage;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature, Unique_montage) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureSuccess__DelegateSignature::Unique_montage' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.UniqueAttackSuccess__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature final
{
public:
	class UAnimMontage*                           Unique_montage;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature, Unique_montage) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_UniqueAttackSuccess__DelegateSignature::Unique_montage' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.UniqueObjectEnd__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature final
{
public:
	bool                                          Input_success_in;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature) == 0x000001, "Wrong size on BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature, Input_success_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_UniqueObjectEnd__DelegateSignature::Input_success_in' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.UniqueObjectControlStart__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature final
{
public:
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature, Psy_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_UniqueObjectControlStart__DelegateSignature::Psy_obj_in' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.ExecuteUbergraph_BP_PlayerPsychicObjectComponent
// 0x000C (0x000C - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5145[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent) == 0x000004, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent) == 0x00000C, "Wrong size on BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_ExecuteUbergraph_BP_PlayerPsychicObjectComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerPsychicObjectComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.Initialize
// 0x00D0 (0x00D0 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_Initialize final
{
public:
	class FName                                   L_name;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5146[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5147[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5148[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5149[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514A[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FPsychicGrabPosData                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0060(0x003C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_514B[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_514C[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_Initialize) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_Initialize");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_Initialize) == 0x0000D0, "Wrong size on BP_PlayerPsychicObjectComponent_C_Initialize");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, L_name) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::L_name' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, Temp_int_Loop_Num_Variable) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetBrainFieldManager_Manager) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, Temp_int_Loop_Num_Variable_1) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Less_IntInt_ReturnValue_1) == 0x000044, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetDataTableRowFromName_OutRow) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00009C, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_Array_Length_ReturnValue_1) == 0x0000A4, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x0000A8, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_IsValid_ReturnValue_1) == 0x0000B0, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, CallFunc_GetOwner_ReturnValue) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x0000C0, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_PlayerPsychicObjectComponent_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.Update
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_Update final
{
public:
	int32                                         L_count;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_str;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_Update) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_Update");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_Update) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_Update");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Update, L_count) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_Update::L_count' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_Update, L_str) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_Update::L_str' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.InitOwnerType
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_InitOwnerType final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_514E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_InitOwnerType) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_InitOwnerType");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_InitOwnerType) == 0x000020, "Wrong size on BP_PlayerPsychicObjectComponent_C_InitOwnerType");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitOwnerType, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_InitOwnerType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitOwnerType, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_InitOwnerType::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitOwnerType, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_InitOwnerType::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitOwnerType, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_InitOwnerType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitOwnerType, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000019, "Member 'BP_PlayerPsychicObjectComponent_C_InitOwnerType::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CaptureFocusObject
// 0x0006 (0x0006 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CaptureFocusObject final
{
public:
	bool                                          Unique_obj_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Combo_in;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Air_in;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CaptureFocusObject_return;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CaptureFocusObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject) == 0x000006, "Wrong size on BP_PlayerPsychicObjectComponent_C_CaptureFocusObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject, Unique_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureFocusObject::Unique_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject, Combo_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureFocusObject::Combo_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject, Air_in) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureFocusObject::Air_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject, Return) == 0x000003, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureFocusObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureFocusObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CaptureFocusObject, CallFunc_CaptureFocusObject_return) == 0x000005, "Member 'BP_PlayerPsychicObjectComponent_C_CaptureFocusObject::CallFunc_CaptureFocusObject_return' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AttackCaptureObject
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AttackCaptureObject final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Direct_drop_in;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_514F[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                L_psyObjMan;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_return;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckSasCopyParameter_return;             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5150[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckSasCopyParameter_copy_count;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AttackCaptureObject_return;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5151[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_AttackCaptureObject_unique_object;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AttackCaptureObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject) == 0x000038, "Wrong size on BP_PlayerPsychicObjectComponent_C_AttackCaptureObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, Target_actor_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, Direct_drop_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::Direct_drop_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, Return) == 0x000009, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, L_psyObjMan) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::L_psyObjMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, L_psyObj) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, L_return) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::L_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, CallFunc_CheckSasCopyParameter_return) == 0x000022, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::CallFunc_CheckSasCopyParameter_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, CallFunc_CheckSasCopyParameter_copy_count) == 0x000024, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::CallFunc_CheckSasCopyParameter_copy_count' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, CallFunc_AttackCaptureObject_return) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::CallFunc_AttackCaptureObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackCaptureObject, CallFunc_AttackCaptureObject_unique_object) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_AttackCaptureObject::CallFunc_AttackCaptureObject_unique_object' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AttackComboCaptureObject
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Attack_level_in;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Attack_index_in;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attract_time_in;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5152[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Anim_seq_in;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Air_combo_in;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Enemy_direct_shot_in;                              // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5153[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                L_psyObjMan;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSasCopyParameter_return;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5154[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckSasCopyParameter_copy_count;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AttackComboCaptureObject_return;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5155[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_AttackComboCaptureObject_combo_obj;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject) == 0x000048, "Wrong size on BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Target_actor_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Attack_level_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Attack_level_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Attack_index_in) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Attack_index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Attract_time_in) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Attract_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Anim_seq_in) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Anim_seq_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Air_combo_in) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Air_combo_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Enemy_direct_shot_in) == 0x000021, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Enemy_direct_shot_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, Return) == 0x000022, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, L_return) == 0x000023, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::L_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, L_psyObjMan) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::L_psyObjMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, CallFunc_CheckSasCopyParameter_return) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::CallFunc_CheckSasCopyParameter_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, CallFunc_CheckSasCopyParameter_copy_count) == 0x000034, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::CallFunc_CheckSasCopyParameter_copy_count' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, CallFunc_AttackComboCaptureObject_return) == 0x000039, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::CallFunc_AttackComboCaptureObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject, CallFunc_AttackComboCaptureObject_combo_obj) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_AttackComboCaptureObject::CallFunc_AttackComboCaptureObject_combo_obj' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.DetachAttackComboObject
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject) == 0x000001, "Wrong size on BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_DetachAttackComboObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetCurrentPsychicAnimObject
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject final
{
public:
	class APsychicAnimObject_C*                   Psy_anim_obj;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5156[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject) == 0x000028, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject, Psy_anim_obj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject::Psy_anim_obj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject, L_psyObj) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject, CallFunc_GetPsychicObject_return) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_GetCurrentPsychicAnimObject::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CancelCaptureObject
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CancelCaptureObject final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CancelCaptureObject) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CancelCaptureObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CancelCaptureObject) == 0x000001, "Wrong size on BP_PlayerPsychicObjectComponent_C_CancelCaptureObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelCaptureObject, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CancelCaptureObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AttackBrainFieldObject
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject final
{
public:
	EPsychicObjectBrainFieldAttackType            Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5157[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill_level_in;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swing_lerp_in;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5158[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Swing_lerp_time_in;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Swing_update_time_in;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_atkColl;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5159[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_camAngle;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexLoop;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 L_random;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         L_count;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_515A[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject) == 0x000050, "Wrong size on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, Attack_type_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, Skill_level_in) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::Skill_level_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, Swing_lerp_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::Swing_lerp_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, Swing_lerp_time_in) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::Swing_lerp_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, Swing_update_time_in) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::Swing_update_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_atkColl) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_atkColl' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_camAngle) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_camAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_indexLoop) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_indexLoop' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_random) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_random' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_count) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_count' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_psyObj) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, L_index) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::L_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, K2Node_SwitchEnum_CmpSuccess) == 0x000044, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000045, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, CallFunc_IsValid_ReturnValue) == 0x000046, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, CallFunc_IsValid_ReturnValue_1) == 0x000047, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject, CallFunc_BooleanOR_ReturnValue) == 0x000049, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldObject::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CancelUniqueObjectInput
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput final
{
public:
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelInput_skip;                         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput) == 0x000030, "Wrong size on BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput, L_psyObj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput, CallFunc_CancelInput_skip) == 0x000029, "Member 'BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput::CallFunc_CancelInput_skip' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput, CallFunc_IsValid_ReturnValue_1) == 0x00002A, "Member 'BP_PlayerPsychicObjectComponent_C_CancelUniqueObjectInput::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CancelPsychicObjectAction
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction final
{
public:
	bool                                          Event_in;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Psychic_battle_in;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction) == 0x000003, "Wrong size on BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction, Event_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction::Event_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction, Psychic_battle_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction::Psychic_battle_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_CancelPsychicObjectAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetPsychicObject
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetPsychicObject final
{
public:
	bool                                          Unq_obj_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Focus_in;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Capture_in;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Attack_in;                                         // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               Return;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_psy_obj;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetPsychicObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject) == 0x000020, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetPsychicObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, Unq_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::Unq_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, Focus_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::Focus_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, Capture_in) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::Capture_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, Attack_in) == 0x000003, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::Attack_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, Return) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObject, CallFunc_GetPsychicObject_psy_obj) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObject::CallFunc_GetPsychicObject_psy_obj' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetPsychicObjectState
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState final
{
public:
	bool                                          Unq_obj_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Focus_in;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Capture_in;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Attack_in;                                         // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           State;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515D[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_psy_obj;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_return;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, Unq_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::Unq_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, Focus_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::Focus_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, Capture_in) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::Capture_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, Attack_in) == 0x000003, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::Attack_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, State) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::State' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, CallFunc_GetPsychicObject_psy_obj) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::CallFunc_GetPsychicObject_psy_obj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState, CallFunc_GetPsychicObjectState_return) == 0x000011, "Member 'BP_PlayerPsychicObjectComponent_C_GetPsychicObjectState::CallFunc_GetPsychicObjectState_return' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetCapturePsychicObject
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject final
{
public:
	class ABP_PsychicObjectBasic_C*               Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                L_psyObjMan;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               LObject;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return_1;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject) == 0x000030, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, L_psyObjMan) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::L_psyObjMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, LObject) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::LObject' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, CallFunc_GetPsychicObject_return) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, CallFunc_GetPsychicObject_return_1) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::CallFunc_GetPsychicObject_return_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObject::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetCapturePsychicObjectState
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState final
{
public:
	bool                                          Unq_obj_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           State;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_515E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                L_psyObjMan;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           LState;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515F[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_psy_obj;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_psy_obj_1;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_return;             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_return_1;           // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState) == 0x000038, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, Unq_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::Unq_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, State) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::State' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, L_psyObjMan) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::L_psyObjMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, L_psyObj) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, LState) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::LState' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_GetPsychicObject_psy_obj) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_GetPsychicObject_psy_obj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_GetPsychicObject_psy_obj_1) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_GetPsychicObject_psy_obj_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_IsValid_ReturnValue_2) == 0x000031, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_GetPsychicObjectState_return) == 0x000032, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_GetPsychicObjectState_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState, CallFunc_GetPsychicObjectState_return_1) == 0x000033, "Member 'BP_PlayerPsychicObjectComponent_C_GetCapturePsychicObjectState::CallFunc_GetPsychicObjectState_return_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsNormalObjectFocus
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5160[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus, CallFunc_GetPsychicObject_return) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsUniqueObjectFocus
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5161[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus, CallFunc_GetPsychicObject_return) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsMapGimmickFocus
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus) == 0x000003, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_IsMapGimmickFocus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsFocusPsychicObjectUnique
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5162[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique, CallFunc_GetPsychicObject_return) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_IsFocusPsychicObjectUnique::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CanCapture
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CanCapture final
{
public:
	bool                                          Unq_obj_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanCapture_return;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CanCapture) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CanCapture");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CanCapture) == 0x000004, "Wrong size on BP_PlayerPsychicObjectComponent_C_CanCapture");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CanCapture, Unq_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CanCapture::Unq_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CanCapture, Return) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_CanCapture::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CanCapture, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_CanCapture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CanCapture, CallFunc_CanCapture_return) == 0x000003, "Member 'BP_PlayerPsychicObjectComponent_C_CanCapture::CallFunc_CanCapture_return' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsNormalObjectCapture
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5163[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               LObject;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_State;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture, LObject) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture::LObject' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture, CallFunc_GetPsychicObjectState_State) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture::CallFunc_GetPsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'BP_PlayerPsychicObjectComponent_C_IsNormalObjectCapture::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsUniqueObjectCapture
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5164[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               LObject;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_State;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture, LObject) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture::LObject' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture, CallFunc_GetPsychicObjectState_State) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture::CallFunc_GetPsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'BP_PlayerPsychicObjectComponent_C_IsUniqueObjectCapture::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetBrainField
// 0x0070 (0x0070 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetBrainField final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5165[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5166[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_PsychicObjectBasic_C*         Temp_object_Variable;                              // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5167[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5168[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5169[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516A[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetBrainField) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetBrainField");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetBrainField) == 0x000070, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetBrainField");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Flag_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, L_psyObj) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_object_Variable) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_int_Array_Index_Variable_1) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_int_Loop_Counter_Variable_2) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Add_IntInt_ReturnValue_2) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, Temp_int_Array_Index_Variable_2) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Less_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000065, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainField, CallFunc_Less_IntInt_ReturnValue_2) == 0x00006C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainField::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.UpdateBrainField
// 0x0100 (0x0100 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_UpdateBrainField final
{
public:
	float                                         L_trgEffLingeringTime;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_isThrowObj;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_objIdx;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_request;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_replenish;                                       // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516C[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessEnable_Return;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516D[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessEnable_Return_1;        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRestriction_ReturnValue;                // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRestriction_ReturnValue_1;              // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue_1;       // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516E[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionAttack_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimDamage_ReturnValue;                 // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimJump_ReturnValue;                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimKind_ReturnValue;                   // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimKind_ReturnValue_1;                 // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimKind_ReturnValue_2;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516F[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue_2;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue_3;       // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue_4;       // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5170[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionAttack_ReturnValue_1;       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5171[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_1; // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimKind_ReturnValue_3;                 // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimKind_ReturnValue_4;                 // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimDamage_ReturnValue_1;               // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyInputAttack_ReturnValue;          // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimAttack_ReturnValue;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimLand_ReturnValue;                   // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5172[0x5];                                     // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5173[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwingTypeC_ReturnValue;                 // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5174[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_2; // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimAttack_ReturnValue_1;               // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue_5;       // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5175[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_3; // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyInputAttack_ReturnValue_1;        // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5176[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5177[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5178[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5179[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_UpdateBrainField");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField) == 0x000100, "Wrong size on BP_PlayerPsychicObjectComponent_C_UpdateBrainField");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, L_trgEffLingeringTime) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::L_trgEffLingeringTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, L_isThrowObj) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::L_isThrowObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, L_objIdx) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::L_objIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, L_request) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::L_request' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, L_replenish) == 0x00000D, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::L_replenish' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, L_psyObj) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsBrainCrashAccessEnable_Return) == 0x000021, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsBrainCrashAccessEnable_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_GetEnemyManager_Manager_1) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_1) == 0x000034, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsBrainCrashAccessEnable_Return_1) == 0x000035, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsBrainCrashAccessEnable_Return_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsRestriction_ReturnValue) == 0x000036, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsRestriction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsRestriction_ReturnValue_1) == 0x000037, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsRestriction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_BooleanOR_ReturnValue) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsTriggerInputStatus_ReturnValue) == 0x000039, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsTriggerInputStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsTriggerInputStatus_ReturnValue_1) == 0x00003A, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsTriggerInputStatus_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, Temp_int_Loop_Num_Variable) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsEnableActionAttack_ReturnValue) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsEnableActionAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Not_PreBool_ReturnValue) == 0x00004A, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimDamage_ReturnValue) == 0x00004B, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimJump_ReturnValue) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_BooleanAND_ReturnValue) == 0x00004D, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimKind_ReturnValue) == 0x00004E, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimKind_ReturnValue_1) == 0x00004F, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimKind_ReturnValue_2) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimKind_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsTriggerInputStatus_ReturnValue_2) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsTriggerInputStatus_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00005D, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsTriggerInputStatus_ReturnValue_3) == 0x00005E, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsTriggerInputStatus_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsTriggerInputStatus_ReturnValue_4) == 0x00005F, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsTriggerInputStatus_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, Temp_bool_True_if_break_was_hit_Variable) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Not_PreBool_ReturnValue_1) == 0x000065, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsEnableActionAttack_ReturnValue_1) == 0x00006C, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsEnableActionAttack_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_1) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Not_PreBool_ReturnValue_2) == 0x000078, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_3) == 0x000079, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimKind_ReturnValue_3) == 0x00007A, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimKind_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimKind_ReturnValue_4) == 0x00007B, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimKind_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimDamage_ReturnValue_1) == 0x00007C, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimDamage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_BooleanAND_ReturnValue_1) == 0x00007D, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsNotifyInputAttack_ReturnValue) == 0x00007E, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsNotifyInputAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_BooleanAND_ReturnValue_2) == 0x00007F, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimAttack_ReturnValue) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimLand_ReturnValue) == 0x000081, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimLand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_4) == 0x000082, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000098, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Less_IntInt_ReturnValue) == 0x0000A9, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsSwingTypeC_ReturnValue) == 0x0000AA, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsSwingTypeC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_5) == 0x0000AB, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000AC, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_2) == 0x0000B0, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsAnimAttack_ReturnValue_1) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsAnimAttack_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_6) == 0x0000B9, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_BooleanAND_ReturnValue_3) == 0x0000BA, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsTriggerInputStatus_ReturnValue_5) == 0x0000BB, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsTriggerInputStatus_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_7) == 0x0000BC, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_3) == 0x0000C0, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_8) == 0x0000C8, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsNotifyInputAttack_ReturnValue_1) == 0x0000C9, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsNotifyInputAttack_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000CA, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_9) == 0x0000CB, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Array_Length_ReturnValue_2) == 0x0000CC, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D0, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsOver_ReturnValue) == 0x0000E0, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, Temp_int_Loop_Counter_Variable_1) == 0x0000E4, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000E8, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000EC, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_BooleanAND_ReturnValue_4) == 0x0000F0, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_Array_Length_ReturnValue_3) == 0x0000F4, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_10) == 0x0000F8, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_UpdateBrainField, CallFunc_IsOver_ReturnValue_1) == 0x0000F9, "Member 'BP_PlayerPsychicObjectComponent_C_UpdateBrainField::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetBrainFieldOffsetPos
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos final
{
public:
	int32                                         Index_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset_pos;                                        // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos) == 0x000020, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos, Index_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos::Index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos, Psy_obj_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos::Psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos, Offset_pos) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos::Offset_pos' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00001D, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldOffsetPos::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.InitBrainFieldObjList
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList final
{
public:
	EPsychicObjectSizeType                        Temp_byte_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        Temp_byte_Variable_1;                              // 0x000C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        Temp_byte_Variable_2;                              // 0x001C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_517E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPsychicObjectSizeType>                CallFunc_GetAvailableRegisterSizeArraySafety_size_array; // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAvailableRegisterSizeArraySafety_safety; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_517F[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5180[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList) == 0x000068, "Wrong size on BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, Temp_byte_Variable) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, Temp_int_Variable) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, Temp_byte_Variable_1) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, Temp_int_Variable_1) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, Temp_byte_Variable_2) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_GetAvailableRegisterSizeArraySafety_size_array) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_GetAvailableRegisterSizeArraySafety_size_array' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_GetAvailableRegisterSizeArraySafety_safety) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_GetAvailableRegisterSizeArraySafety_safety' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Array_Add_ReturnValue_1) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Array_Add_ReturnValue_2) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Array_Add_ReturnValue_3) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Min_ReturnValue) == 0x000054, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_Array_LastIndex_ReturnValue) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_InitBrainFieldObjList::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.ReplenishBrainFieldObj
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj final
{
public:
	int32                                         Index_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Replenish_time_in;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 L_objClass;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_GetRandomRegisterSwingObjectSafety_psy_obj; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5181[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager_1;  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectSizeType                        CallFunc_Array_Get_Item;                           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5182[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetRandomRegisterPsychicObjectSafety_psy_obj; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5183[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBrainFieldOffsetPos_offset_pos;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj) == 0x000068, "Wrong size on BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, Index_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::Index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, Replenish_time_in) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::Replenish_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, NewLocalVar_0) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, L_objClass) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::L_objClass' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, L_psyObj) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_GetRandomRegisterSwingObjectSafety_psy_obj) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_GetRandomRegisterSwingObjectSafety_psy_obj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_GetPsychicObjectManager_PsyObjManager_1) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_GetPsychicObjectManager_PsyObjManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_Array_Get_Item) == 0x000041, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000042, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_GetRandomRegisterPsychicObjectSafety_psy_obj) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_GetRandomRegisterPsychicObjectSafety_psy_obj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_GetBrainFieldOffsetPos_offset_pos) == 0x000054, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_GetBrainFieldOffsetPos_offset_pos' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj, CallFunc_IsValid_ReturnValue_3) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_ReplenishBrainFieldObj::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetAttackBrainFieldObj
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj final
{
public:
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_in;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Skill_level_in;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectBrainFieldAttackType            Attack_type_in;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_collision_in;                               // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5184[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attack_index_in;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attract_time_in;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5185[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_PsychicObjectBasic_C*         Temp_object_Variable;                              // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5186[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPsychicObjectAttack_return;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj) == 0x000040, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Psy_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Index_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Skill_level_in) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Skill_level_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Attack_type_in) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Attack_collision_in) == 0x000011, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Attack_collision_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Attack_index_in) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Attack_index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Attract_time_in) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Attract_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, Temp_object_Variable) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, CallFunc_Array_Find_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00002C, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj, CallFunc_SetPsychicObjectAttack_return) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_SetAttackBrainFieldObj::CallFunc_SetPsychicObjectAttack_return' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetBrainFieldDropLevel
// 0x01C0 (0x01C0 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexObj;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObjMain;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_minIndex;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_minAngle;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_angleDiff;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_objAngleHz;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_posObj;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_posPly;                                          // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 L_objAngleList;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_camAngleHz;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_searchAngle;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 L_reserveIndexList;                                // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         L_objNum;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5187[0x1];                                     // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectBrainFieldAttackType            Temp_byte_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5188[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectBrainFieldAttackType            Temp_byte_Variable_1;                              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5189[0x2];                                     // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_518A[0x2];                                     // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_518B[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectBrainFieldAttackType            K2Node_Select_Default;                             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_518C[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_518D[0x1];                                     // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMeshBoundCentrePos_pos;                // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_518E[0x1];                                     // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue_1;         // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_5;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_518F[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue_2;         // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel) == 0x0001C0, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Level) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Level' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_indexObj) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_indexObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_psyObjMain) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_psyObjMain' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_minIndex) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_minIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_minAngle) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_minAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_angleDiff) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_angleDiff' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_objAngleHz) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_objAngleHz' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_posObj) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_posObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_posPly) == 0x00002C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_posPly' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_objAngleList) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_objAngleList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_camAngleHz) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_camAngleHz' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_searchAngle) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_searchAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_reserveIndexList) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_reserveIndexList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_objNum) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_objNum' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_index) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, L_psyObj) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000071, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_IntInt_ReturnValue) == 0x000072, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Array_Index_Variable) == 0x000074, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Loop_Num_Variable) == 0x000078, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Loop_Counter_Variable) == 0x00007C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_byte_Variable) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_IntInt_ReturnValue_1) == 0x000081, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Loop_Counter_Variable_1) == 0x000088, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Loop_Num_Variable_1) == 0x000094, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_IntInt_ReturnValue_2) == 0x000098, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_byte_Variable_1) == 0x000099, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_int_Variable) == 0x00009C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A0, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_IsValid_ReturnValue) == 0x0000A4, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_IsValid_ReturnValue_1) == 0x0000A5, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, Temp_bool_Variable) == 0x0000AC, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, K2Node_Select_Default) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000B9, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0000C8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_IsValid_ReturnValue_2) == 0x0000C9, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x0000CA, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000CC, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000D4, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_GetMeshBoundCentrePos_pos) == 0x0000DC, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_GetMeshBoundCentrePos_pos' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Percent_FloatFloat_ReturnValue) == 0x0000E8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_X) == 0x0000EC, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_Y) == 0x0000F0, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_Z) == 0x0000F4, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_MakeVector_ReturnValue) == 0x0000F8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_IsValid_ReturnValue_3) == 0x000104, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000105, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000106, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000108, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Abs_ReturnValue) == 0x00010C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000110, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_X_1) == 0x00011C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_Y_1) == 0x000120, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_Z_1) == 0x000124, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_MakeVector_ReturnValue_1) == 0x000128, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_MakeRotFromX_ReturnValue) == 0x000134, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakRotator_Roll) == 0x000140, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakRotator_Pitch) == 0x000144, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakRotator_Yaw) == 0x000148, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_Length_ReturnValue_1) == 0x00014C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000150, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Percent_FloatFloat_ReturnValue_1) == 0x000154, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Percent_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Less_FloatFloat_ReturnValue_5) == 0x000158, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Less_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_Add_ReturnValue_1) == 0x00015C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000160, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00016C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_X_2) == 0x000170, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_Y_2) == 0x000174, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakVector_Z_2) == 0x000178, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00017C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_MakeVector_ReturnValue_2) == 0x000180, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00018C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000190, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Percent_FloatFloat_ReturnValue_2) == 0x000194, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Percent_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_GetCameraRotation_ReturnValue) == 0x000198, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakRotator_Roll_1) == 0x0001A4, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakRotator_Pitch_1) == 0x0001A8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_BreakRotator_Yaw_1) == 0x0001AC, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0001B0, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001B4, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001B8, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x0001B9, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldDropLevel::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AttackBrainFieldDrop
// 0x0070 (0x0070 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop final
{
public:
	bool                                          L_atkColl;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5190[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5191[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicAnimObject_C*                   CallFunc_SetAnimOwner_anim_owner;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicAnimObject_C*                   CallFunc_SetAnimOwner_anim_owner_1;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5192[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5193[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop) == 0x000070, "Wrong size on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, L_atkColl) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::L_atkColl' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, L_psyObj) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_SetAnimOwner_anim_owner) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_SetAnimOwner_anim_owner' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_SetAnimOwner_anim_owner_1) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_SetAnimOwner_anim_owner_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Loop_Num_Variable_1) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Loop_Counter_Variable_1) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Array_Index_Variable_2) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Loop_Num_Variable_2) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, Temp_int_Loop_Counter_Variable_2) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Less_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Less_IntInt_ReturnValue_2) == 0x000055, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Add_IntInt_ReturnValue_2) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldDrop::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CancelBrainFieldDrop
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop final
{
public:
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5194[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicAnimObject_C*                   CallFunc_SetAnimOwner_anim_owner;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5195[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop) == 0x000040, "Wrong size on BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, L_psyObj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, Temp_int_Loop_Num_Variable) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, Temp_int_Loop_Num_Variable_1) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_SetAnimOwner_anim_owner) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_SetAnimOwner_anim_owner' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_Less_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_CancelBrainFieldDrop::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.ReportDropObjWait
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_ReportDropObjWait final
{
public:
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5196[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_ReportDropObjWait) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_ReportDropObjWait");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_ReportDropObjWait) == 0x000010, "Wrong size on BP_PlayerPsychicObjectComponent_C_ReportDropObjWait");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjWait, Psy_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjWait::Psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjWait, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjWait::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjWait, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjWait::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.ReportDropObjHit
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_ReportDropObjHit final
{
public:
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5197[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_ReportDropObjHit");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit) == 0x000030, "Wrong size on BP_PlayerPsychicObjectComponent_C_ReportDropObjHit");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, Psy_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::Psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, L_psyObj) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_ReportDropObjHit, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_ReportDropObjHit::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetEnpcOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetEnpcOld final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetEnpcOld) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetEnpcOld");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetEnpcOld) == 0x000001, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetEnpcOld");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetEnpcOld, Flag_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetEnpcOld::Flag_in' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SearchNpcObject
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SearchNpcObject final
{
public:
	bool                                          Unq_obj;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5198[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPsychicObjectFocusResult              CallFunc_SearchNpcPsychicObject_result;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SearchNpcObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject) == 0x000028, "Wrong size on BP_PlayerPsychicObjectComponent_C_SearchNpcObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, Unq_obj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::Unq_obj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, Return) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, CallFunc_SearchNpcPsychicObject_result) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::CallFunc_SearchNpcPsychicObject_result' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SearchNpcObject, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'BP_PlayerPsychicObjectComponent_C_SearchNpcObject::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CheckNpcObject
// 0x0006 (0x0006 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CheckNpcObject final
{
public:
	bool                                          Unq_obj_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Chk_capture_in;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Chk_attack_in;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNpcObject_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CheckNpcObject");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject) == 0x000006, "Wrong size on BP_PlayerPsychicObjectComponent_C_CheckNpcObject");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject, Unq_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CheckNpcObject::Unq_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject, Chk_capture_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_CheckNpcObject::Chk_capture_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject, Chk_attack_in) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_CheckNpcObject::Chk_attack_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject, Return) == 0x000003, "Member 'BP_PlayerPsychicObjectComponent_C_CheckNpcObject::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_CheckNpcObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckNpcObject, CallFunc_CheckNpcObject_ReturnValue) == 0x000005, "Member 'BP_PlayerPsychicObjectComponent_C_CheckNpcObject::CallFunc_CheckNpcObject_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetSasKind
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetSasKind final
{
public:
	E_SASKind                                     Sas_kind_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flag_in;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetSasKind) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetSasKind");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetSasKind) == 0x000005, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetSasKind");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetSasKind, Sas_kind_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetSasKind::Sas_kind_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetSasKind, Flag_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_SetSasKind::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetSasKind, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_SetSasKind::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetSasKind, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerPsychicObjectComponent_C_SetSasKind::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetSasKind, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_SetSasKind::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetSasKind
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetSasKind final
{
public:
	E_SASKind                                     Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetSasKind) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetSasKind");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetSasKind) == 0x000001, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetSasKind");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetSasKind, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetSasKind::Return' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CheckSasCopyParameter
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5199[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Copy_count;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class INexusDriveInterface>  CallFunc_IsActiveNexusDriveSas_self_CastInput;     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveNexusDriveSas_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519A[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable_1;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519B[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter) == 0x000040, "Wrong size on BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, Copy_count) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::Copy_count' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsActiveNexusDriveSas_self_CastInput) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsActiveNexusDriveSas_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsActiveNexusDriveSas_ReturnValue) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsActiveNexusDriveSas_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_bEnable) == 0x000019, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param0) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param1) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param2) == 0x000024, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param3) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_bEnable_1) == 0x00002C, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_bEnable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param0_1) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param0_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param1_1) == 0x000034, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param1_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param2_1) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param2_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter, CallFunc_IsEnableSASEffect_Param3_1) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_CheckSasCopyParameter::CallFunc_IsEnableSASEffect_Param3_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetBrainFieldReplenishTimer
// 0x002C (0x002C - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer final
{
public:
	int32                                         L_objNum;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519C[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer) == 0x000004, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer) == 0x00002C, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, L_objNum) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::L_objNum' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000015, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, Temp_int_Variable) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldReplenishTimer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.DebugDrawBrainFieldInfo
// 0x0088 (0x0088 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo final
{
public:
	class ABP_PsychicObjectBasic_C*               L_BfObj;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519E[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519F[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo) == 0x000088, "Wrong size on BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, L_BfObj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::L_BfObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Conv_VectorToString_ReturnValue) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_GetComponentBounds_Origin) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_GetComponentBounds_BoxExtent) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_GetComponentBounds_SphereRadius) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_DebugDrawBrainFieldInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AnimNotifyFirstAttack
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerMontageFirstAttack_dummy;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack) == 0x000003, "Wrong size on BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack, CallFunc_SetPlayerMontageFirstAttack_dummy) == 0x000002, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyFirstAttack::CallFunc_SetPlayerMontageFirstAttack_dummy' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AnimNotifyAttackInterpolate
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate final
{
public:
	float                                         Interpolate_time_in;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAttackInterpolate_dummy;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate) == 0x000004, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate) == 0x000008, "Wrong size on BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate, Interpolate_time_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate::Interpolate_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate, CallFunc_SetAttackInterpolate_dummy) == 0x000006, "Member 'BP_PlayerPsychicObjectComponent_C_AnimNotifyAttackInterpolate::CallFunc_SetAttackInterpolate_dummy' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AttackBrainFieldThrow
// 0x00E0 (0x00E0 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow final
{
public:
	EPsychicObjectBrainFieldAttackType            Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill_level_in;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexTgt;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 L_tgtIndexList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_bFirstThrow;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A2[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_count;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwingTypeC_ReturnValue;                 // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A3[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A4[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A5[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A6[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A7[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A8[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A9[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetNearestBrainFieldObj_tgt_index_list;   // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51AA[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51AB[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51AC[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51AD[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51AE[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow) == 0x0000E0, "Wrong size on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Attack_type_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Skill_level_in) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Skill_level_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, L_indexTgt) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::L_indexTgt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, L_tgtIndexList) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::L_tgtIndexList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, L_bFirstThrow) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::L_bFirstThrow' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, L_psyObj) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, L_index) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::L_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, L_count) == 0x000034, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::L_count' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_IsSwingTypeC_ReturnValue) == 0x00004A, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_IsSwingTypeC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_bool_True_if_break_was_hit_Variable) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Array_Index_Variable) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Loop_Num_Variable) == 0x00006C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Loop_Num_Variable_1) == 0x000074, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Less_IntInt_ReturnValue_1) == 0x000079, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Get_Item) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_IsValid_ReturnValue_1) == 0x000088, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Add_ReturnValue) == 0x00008C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Add_ReturnValue_1) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000094, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Less_IntInt_ReturnValue_2) == 0x000095, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_GetNearestBrainFieldObj_tgt_index_list) == 0x000098, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_GetNearestBrainFieldObj_tgt_index_list' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Add_ReturnValue_2) == 0x0000A8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, K2Node_SwitchEnum_CmpSuccess) == 0x0000AC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Add_ReturnValue_3) == 0x0000B0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Array_Index_Variable_1) == 0x0000B4, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_IsValid_ReturnValue_2) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, Temp_int_Variable) == 0x0000BC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_IsValid_ReturnValue_3) == 0x0000D0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_Length_ReturnValue_1) == 0x0000D4, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000D8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow, CallFunc_Min_ReturnValue) == 0x0000DC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldThrow::CallFunc_Min_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.AttackBrainFieldSwing
// 0x01D0 (0x01D0 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing final
{
public:
	EPsychicObjectBrainFieldAttackType            Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51AF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill_level_in;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swing_lerp_in;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Swing_lerp_time_in;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Swing_update_time_in;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexSwing;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_atkColl;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B1[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           L_color;                                           // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51B2[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 L_indexTgt_2;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 L_indexTgt_1;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 L_indexTgt_0;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<float>                                 L_angleMin;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 L_indexTgt;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         L_indexObj;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_angleDiff;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_angleTgt;                                        // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_objAngleHz;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_dirCam;                                          // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_posObj;                                          // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_posPly;                                          // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_camAngleHz;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51B3[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B4[0x6];                                     // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwingTypeC_ReturnValue;                 // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B5[0x1];                                     // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B6[0x5];                                     // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetNearestBrainFieldObj_tgt_index_list;   // 0x0108(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0118(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B7[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B8[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0134(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0138(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0140(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51B9[0x5];                                     // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item;                           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0180(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51BA[0x3];                                     // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing) == 0x0001D0, "Wrong size on BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Attack_type_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Skill_level_in) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Skill_level_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Swing_lerp_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Swing_lerp_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Swing_lerp_time_in) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Swing_lerp_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Swing_update_time_in) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Swing_update_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_indexSwing) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_indexSwing' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_atkColl) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_atkColl' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_color) == 0x00001C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_color' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_indexTgt_2) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_indexTgt_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_indexTgt_1) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_indexTgt_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_indexTgt_0) == 0x000050, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_indexTgt_0' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_angleMin) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_angleMin' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_indexTgt) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_indexTgt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_indexObj) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_indexObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_index) == 0x000084, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_angleDiff) == 0x000088, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_angleDiff' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_angleTgt) == 0x00008C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_angleTgt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_objAngleHz) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_objAngleHz' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_dirCam) == 0x000094, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_dirCam' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_posObj) == 0x0000A0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_posObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_posPly) == 0x0000AC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_posPly' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_camAngleHz) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_camAngleHz' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, L_psyObj) == 0x0000C0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Variable) == 0x0000C8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Add_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000D1, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x0000D8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_IsSwingTypeC_ReturnValue) == 0x0000E9, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_IsSwingTypeC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Not_PreBool_ReturnValue) == 0x0000EA, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Length_ReturnValue) == 0x0000EC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue) == 0x0000F0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Loop_Num_Variable) == 0x0000F4, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Length_ReturnValue_1) == 0x0000F8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Array_Index_Variable) == 0x0000FC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_bool_True_if_break_was_hit_Variable) == 0x000100, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Not_PreBool_ReturnValue_1) == 0x000101, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000102, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_GetNearestBrainFieldObj_tgt_index_list) == 0x000108, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_GetNearestBrainFieldObj_tgt_index_list' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Variable_1) == 0x000118, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Loop_Counter_Variable) == 0x00011C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Loop_Counter_Variable_1) == 0x000120, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Add_IntInt_ReturnValue_1) == 0x000124, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Less_IntInt_ReturnValue) == 0x000128, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Add_IntInt_ReturnValue_2) == 0x00012C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BooleanAND_ReturnValue) == 0x000130, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_float_Variable) == 0x000134, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_float_Variable_1) == 0x000138, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Array_Index_Variable_1) == 0x00013C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_float_Variable_2) == 0x000140, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Loop_Num_Variable_1) == 0x000144, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Less_IntInt_ReturnValue_1) == 0x000148, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_IsValid_ReturnValue) == 0x000149, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_IsValid_ReturnValue_1) == 0x00014A, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Get_Item) == 0x000150, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue_1) == 0x000158, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue_2) == 0x00015C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue_3) == 0x000160, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Loop_Counter_Variable_2) == 0x000164, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue_4) == 0x000168, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Add_IntInt_ReturnValue_3) == 0x00016C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue_5) == 0x000170, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Variable_2) == 0x000174, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Array_Index_Variable_2) == 0x000178, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Loop_Num_Variable_2) == 0x00017C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, Temp_int_Variable_3) == 0x000180, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Less_IntInt_ReturnValue_2) == 0x000184, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Add_ReturnValue_6) == 0x000188, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00018C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BreakVector_X) == 0x000198, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BreakVector_Y) == 0x00019C, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BreakVector_Z) == 0x0001A0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_GetCameraRotation_ReturnValue) == 0x0001A4, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_MakeVector_ReturnValue) == 0x0001B0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BreakRotator_Roll) == 0x0001BC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BreakRotator_Pitch) == 0x0001C0, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_BreakRotator_Yaw) == 0x0001C4, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001C8, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing, CallFunc_Array_Length_ReturnValue_2) == 0x0001CC, "Member 'BP_PlayerPsychicObjectComponent_C_AttackBrainFieldSwing::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetBrainFieldFirstSwing
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51BB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Animation_name_in;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Force_off_in;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing) == 0x000028, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, Flag_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, Psy_obj_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::Psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, Animation_name_in) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::Animation_name_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, Force_off_in) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::Force_off_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000022, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldFirstSwing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetPsychicFieldCapture
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture final
{
public:
	int32                                         Capture_num_in;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture) == 0x000004, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture) == 0x000004, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture, Capture_num_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetPsychicFieldCapture::Capture_num_in' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsPsychicFieldCaptureFinish
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish final
{
public:
	bool                                          Finish;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicFieldCaptureFinish_finish;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish) == 0x000002, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish, Finish) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish::Finish' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish, CallFunc_IsPsychicFieldCaptureFinish_finish) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_IsPsychicFieldCaptureFinish::CallFunc_IsPsychicFieldCaptureFinish_finish' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetFocusUniqueObjectMontageOld
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld final
{
public:
	EPsychicObjectUniqueMontageIndex              Montage_index_in;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Left_in;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51BC[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Unique_montage;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld) == 0x000010, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld, Montage_index_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld::Montage_index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld, Left_in) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld::Left_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld, Unique_montage) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetFocusUniqueObjectMontageOld::Unique_montage' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.IsNewObjectSystem
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem) == 0x000002, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem, Return) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_IsNewObjectSystem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.isUnqObjTemp
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp final
{
public:
	bool                                          Unq_obj_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp) == 0x000001, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp) == 0x000002, "Wrong size on BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp, Unq_obj_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp::Unq_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp, Return) == 0x000001, "Member 'BP_PlayerPsychicObjectComponent_C_IsUnqObjTemp::Return' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetUniqueObjectCamera
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51BD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Obj_actor_in;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Socket_type_in;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Control_type_in;                                   // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Remote_type_in;                                    // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          brain_field_drop_type_in;                          // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51BE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51BF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C0[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraUniqueObjectParameter           CallFunc_GetBrainFieldDropTypeCameraParameter_camera_parameter; // 0x0038(0x0058)()
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera) == 0x0000A0, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, Flag_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, Obj_actor_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::Obj_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, Socket_type_in) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::Socket_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, Control_type_in) == 0x000011, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::Control_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, Remote_type_in) == 0x000012, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::Remote_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, brain_field_drop_type_in) == 0x000013, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::brain_field_drop_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, L_psyObj) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, CallFunc_GetBrainFieldDropTypeCameraParameter_camera_parameter) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::CallFunc_GetBrainFieldDropTypeCameraParameter_camera_parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, CallFunc_IsValid_ReturnValue_1) == 0x000098, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera, CallFunc_IsValid_ReturnValue_2) == 0x000099, "Member 'BP_PlayerPsychicObjectComponent_C_SetUniqueObjectCamera::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetBrainFieldDropTypeCameraParameter
// 0x0130 (0x0130 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter final
{
public:
	struct FCameraUniqueObjectParameter           Camera_parameter;                                  // 0x0000(0x0058)(Parm, OutParm)
	struct FCameraUniqueObjectParameter           CallFunc_GetDataTableRowFromName_OutRow;           // 0x0058(0x0058)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C1[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraUniqueObjectParameter           CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00B8(0x0058)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C2[0x5];                                     // 0x0113(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter) == 0x000130, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, Camera_parameter) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::Camera_parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, CallFunc_GetDataTableRowFromName_OutRow) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000B0, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000110, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, Temp_byte_Variable) == 0x000111, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000112, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, K2Node_DynamicCast_AsPlayer_Interface) == 0x000118, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter, CallFunc_GetPlayerID_ReturnValue) == 0x000129, "Member 'BP_PlayerPsychicObjectComponent_C_GetBrainFieldDropTypeCameraParameter::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.CalcBrainFieldSwingPos
// 0x00F8 (0x00F8 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos final
{
public:
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_length;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C3[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos) == 0x0000F8, "Wrong size on BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, L_psyObj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, L_index) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::L_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, L_length) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::L_length' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_GetComponentBounds_Origin) == 0x0000A0, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_GetComponentBounds_BoxExtent) == 0x0000AC, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_GetComponentBounds_SphereRadius) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_BreakVector_X) == 0x0000BC, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_BreakVector_Y) == 0x0000C0, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_BreakVector_Z) == 0x0000C4, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_FMax_ReturnValue) == 0x0000CC, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_FMax_ReturnValue_1) == 0x0000D0, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D8, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_Add_IntInt_ReturnValue) == 0x0000DC, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E0, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_MakeVector_ReturnValue) == 0x0000E4, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'BP_PlayerPsychicObjectComponent_C_CalcBrainFieldSwingPos::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.SetBrainFieldSwingEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C4[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd) == 0x000004, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd) == 0x000018, "Wrong size on BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerPsychicObjectComponent_C_SetBrainFieldSwingEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetNearestBrainFieldObj
// 0x03D0 (0x03D0 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj final
{
public:
	EPsychicObjectBrainFieldAttackType            Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill_level_in;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Obj_num_in;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Tgt_index_list;                                    // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          L_bSort;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C7[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 L_indexList;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         L_indexTgt;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexMin;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_diffAngle;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_diffMin;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_vecObj;                                          // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_vecChoose;                                       // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexObj;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_indexSort;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C8[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 L_sortAngleList;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 L_sortList;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 L_tempList;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_bSwingType;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C9[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_num;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_chooseBk;                                        // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_chooseRt;                                        // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_chooseLt;                                        // 0x00B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bMale;                                           // 0x00B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               L_rotPly;                                          // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                L_posPly;                                          // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51CA[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51CB[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMeshBoundCentrePos_pos;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51CC[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51CD[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51CE[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51CF[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D0[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D1[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51D2[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D3[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D4[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item;                           // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D5[0x3];                                     // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D6[0x3];                                     // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51D7[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D8[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51D9[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51DA[0x3];                                     // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMeshBoundCentrePos_pos_1;              // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51DB[0x4];                                     // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_Array_Get_Item_1;                         // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51DC[0x8];                                     // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0340(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51DD[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x03A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51DE[0x2];                                     // 0x03A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwingTypeC_ReturnValue;                 // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x03BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x03BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51DF[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj) == 0x000010, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj) == 0x0003D0, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Attack_type_in) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Skill_level_in) == 0x000004, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Skill_level_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Obj_num_in) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Obj_num_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Tgt_index_list) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Tgt_index_list' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_bSort) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_bSort' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_indexList) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_indexList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_indexTgt) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_indexTgt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_index) == 0x00003C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_indexMin) == 0x000040, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_indexMin' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_diffAngle) == 0x000044, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_diffAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_diffMin) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_diffMin' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_vecObj) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_vecObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_vecChoose) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_vecChoose' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_indexObj) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_indexObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_indexSort) == 0x000068, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_indexSort' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_sortAngleList) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_sortAngleList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_sortList) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_sortList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_tempList) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_tempList' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_bSwingType) == 0x0000A0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_bSwingType' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_psyObj) == 0x0000A8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_num) == 0x0000B0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_num' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_chooseBk) == 0x0000B4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_chooseBk' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_chooseRt) == 0x0000B5, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_chooseRt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_chooseLt) == 0x0000B6, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_chooseLt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_bMale) == 0x0000B7, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_bMale' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_rotPly) == 0x0000B8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_rotPly' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, L_posPly) == 0x0000C4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::L_posPly' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_bool_True_if_break_was_hit_Variable) == 0x0000D1, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Array_Index_Variable) == 0x0000D4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Conv_IntToString_ReturnValue) == 0x0000D8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Concat_StrStr_ReturnValue) == 0x0000E8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Not_PreBool_ReturnValue) == 0x0000F8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000100, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Num_Variable) == 0x000110, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000114, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetMeshBoundCentrePos_pos) == 0x000120, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetMeshBoundCentrePos_pos' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Counter_Variable) == 0x00012C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_IntInt_ReturnValue) == 0x000134, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BooleanAND_ReturnValue) == 0x000138, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Counter_Variable_1) == 0x00013C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_IntInt_ReturnValue_1) == 0x000140, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Array_Index_Variable_1) == 0x000144, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Num_Variable_1) == 0x000148, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Less_IntInt_ReturnValue_1) == 0x00014C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Array_Index_Variable_2) == 0x000150, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000154, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_SelectColor_ReturnValue) == 0x000158, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Counter_Variable_2) == 0x000168, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_IntInt_ReturnValue_2) == 0x00016C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000170, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Array_Index_Variable_3) == 0x000174, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Not_PreBool_ReturnValue_1) == 0x000178, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Num_Variable_2) == 0x00017C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_bool_Variable) == 0x000180, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Less_IntInt_ReturnValue_2) == 0x000181, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BooleanAND_ReturnValue_1) == 0x000182, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Not_PreBool_ReturnValue_2) == 0x000183, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_IntInt_ReturnValue_3) == 0x000184, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_LastIndex_ReturnValue) == 0x000188, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_byte_Variable) == 0x00018C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000190, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001A0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001A8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0001B8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0001C8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Length_ReturnValue) == 0x0001D8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Loop_Counter_Variable_3) == 0x0001DC, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_SelectFloat_ReturnValue) == 0x0001E0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_IntInt_ReturnValue_4) == 0x0001E4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_RotateAngleAxis_ReturnValue) == 0x0001E8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_SelectVector_ReturnValue) == 0x0001F4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetCameraRotation_ReturnValue) == 0x000200, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakRotator_Roll) == 0x00020C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakRotator_Pitch) == 0x000210, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakRotator_Yaw) == 0x000214, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_IsValid_ReturnValue_1) == 0x000218, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_DegSin_ReturnValue) == 0x00021C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_DegCos_ReturnValue) == 0x000220, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_MakeVector_ReturnValue) == 0x000224, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000230, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_VectorVector_ReturnValue) == 0x00023C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Get_Item) == 0x000248, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Length_ReturnValue_1) == 0x000250, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Less_IntInt_ReturnValue_3) == 0x000254, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Add_ReturnValue) == 0x000258, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Less_IntInt_ReturnValue_4) == 0x00025C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Dot_VectorVector_ReturnValue) == 0x000260, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetForwardVector_ReturnValue) == 0x000264, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_DegAcos_ReturnValue) == 0x000270, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000274, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetRightVector_ReturnValue) == 0x000280, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, K2Node_DynamicCast_AsPlayer_Interface) == 0x000290, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, K2Node_DynamicCast_bSuccess) == 0x0002A0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_SelectFloat_ReturnValue_1) == 0x0002A4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetPlayerID_ReturnValue) == 0x0002A8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0002AC, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_SelectVector_ReturnValue_1) == 0x0002B8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_IsValid_ReturnValue_2) == 0x0002C4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetMeshBoundCentrePos_pos_1) == 0x0002C8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetMeshBoundCentrePos_pos_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002D4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakVector_X) == 0x0002E0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakVector_Y) == 0x0002E4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakVector_Z) == 0x0002E8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_MakeVector_ReturnValue_1) == 0x0002EC, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Normal_ReturnValue) == 0x0002F8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Conv_FloatToString_ReturnValue) == 0x000308, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000318, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Get_Item_1) == 0x000328, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Length_ReturnValue_2) == 0x000330, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Add_ReturnValue_1) == 0x000334, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_GetTransform_ReturnValue) == 0x000340, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakTransform_Location) == 0x000370, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakTransform_Rotation) == 0x00037C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BreakTransform_Scale) == 0x000388, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, Temp_int_Variable) == 0x000394, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, K2Node_SwitchEnum_CmpSuccess) == 0x000398, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Subtract_IntInt_ReturnValue) == 0x00039C, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Add_IntInt_ReturnValue_5) == 0x0003A0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0003A4, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_BooleanAND_ReturnValue_2) == 0x0003A5, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x0003A8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, K2Node_DynamicCast_bSuccess_1) == 0x0003B8, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_IsSwingTypeC_ReturnValue) == 0x0003B9, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_IsSwingTypeC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0003BA, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x0003BB, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Less_FloatFloat_ReturnValue) == 0x0003BC, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj, CallFunc_Array_Length_ReturnValue_3) == 0x0003C0, "Member 'BP_PlayerPsychicObjectComponent_C_GetNearestBrainFieldObj::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.GetFocusMapGimmick
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick final
{
public:
	class ABP_MapGimmickObjectBase_C*             MapGimmick;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick) == 0x000010, "Wrong size on BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick, MapGimmick) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick::MapGimmick' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_GetFocusMapGimmick::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.PrevEventCancel
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_PrevEventCancel final
{
public:
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E0[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAIPlayer_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E1[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_PrevEventCancel");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel) == 0x000040, "Wrong size on BP_PlayerPsychicObjectComponent_C_PrevEventCancel");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, L_psyObj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, K2Node_DynamicCast_AsPlayer_Interface) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, CallFunc_IsAIPlayer_ReturnValue) == 0x000029, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::CallFunc_IsAIPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, CallFunc_GetPsychicObject_return) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PrevEventCancel, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_PrevEventCancel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.PostEventCancel
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_PostEventCancel final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAIPlayer_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_PostEventCancel) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_PostEventCancel");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_PostEventCancel) == 0x000028, "Wrong size on BP_PlayerPsychicObjectComponent_C_PostEventCancel");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PostEventCancel, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_PostEventCancel::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PostEventCancel, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_PostEventCancel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PostEventCancel, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_PostEventCancel::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PostEventCancel, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_PostEventCancel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_PostEventCancel, CallFunc_IsAIPlayer_ReturnValue) == 0x000021, "Member 'BP_PlayerPsychicObjectComponent_C_PostEventCancel::CallFunc_IsAIPlayer_ReturnValue' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.StartEventCancel
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_StartEventCancel final
{
public:
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAIPlayer_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E4[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_StartEventCancel) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_StartEventCancel");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_StartEventCancel) == 0x000040, "Wrong size on BP_PlayerPsychicObjectComponent_C_StartEventCancel");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, L_psyObj) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, K2Node_DynamicCast_AsPlayer_Interface) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, CallFunc_IsAIPlayer_ReturnValue) == 0x000029, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::CallFunc_IsAIPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, CallFunc_GetPsychicObject_return) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_StartEventCancel, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_StartEventCancel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerPsychicObjectComponent.BP_PlayerPsychicObjectComponent_C.EndEventCancel
// 0x00A8 (0x00A8 - 0x0000)
struct BP_PlayerPsychicObjectComponent_C_EndEventCancel final
{
public:
	struct FVector                                L_traceEnd;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_traceStt;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       L_actorPly;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               L_psyObj;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E5[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAIPlayer_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E6[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E7[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_1;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_2;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerPsychicObjectComponent_C_EndEventCancel) == 0x000008, "Wrong alignment on BP_PlayerPsychicObjectComponent_C_EndEventCancel");
static_assert(sizeof(BP_PlayerPsychicObjectComponent_C_EndEventCancel) == 0x0000A8, "Wrong size on BP_PlayerPsychicObjectComponent_C_EndEventCancel");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, L_traceEnd) == 0x000000, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::L_traceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, L_traceStt) == 0x00000C, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::L_traceStt' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, L_actorPly) == 0x000018, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::L_actorPly' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, L_psyObj) == 0x000020, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsValid_ReturnValue_2) == 0x00002A, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsValid_ReturnValue_3) == 0x00002B, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, K2Node_DynamicCast_AsPlayer_Interface) == 0x000038, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsAIPlayer_ReturnValue) == 0x000049, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsAIPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00004C, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_BreakRotator_Roll) == 0x000058, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_BreakRotator_Pitch) == 0x00005C, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_BreakRotator_Yaw) == 0x000060, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_MakeRotator_ReturnValue) == 0x000064, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_GetPlayerManager_PlayerManager) == 0x000070, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000078, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsValid_ReturnValue_4) == 0x000079, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_GetPlayer_ReturnValue) == 0x000080, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_GetPlayer_ReturnValue_1) == 0x000088, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_GetPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_GetPlayer_ReturnValue_2) == 0x000090, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_GetPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_GetPsychicObject_return) == 0x000098, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerPsychicObjectComponent_C_EndEventCancel, CallFunc_IsValid_ReturnValue_5) == 0x0000A0, "Member 'BP_PlayerPsychicObjectComponent_C_EndEventCancel::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");

}

