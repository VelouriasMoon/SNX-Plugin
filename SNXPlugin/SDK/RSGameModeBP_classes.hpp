#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RSGameModeBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RSGameModeBP.RSGameModeBP_C
// 0x0068 (0x03A0 - 0x0338)
class ARSGameModeBP_C final : public ARSGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           MainPlayerClasses;                                 // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           LeftPlayerClasses;                                 // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           RightPlayerClasses;                                // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   BossCharacter;                                     // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Fade_C*                             Fader;                                             // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               LEnemyList;                                        // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bInitializedDev;                                   // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_RSGameModeBP(int32 EntryPoint);
	void OnUnloadedLevel(class UObject* UnloadedLevel);
	void OnLoadedLevel(class UObject* LoadedLevel);
	void OnLoadedLevelWithNoCheck();
	void OnPreStartPlay(const class FString& CurrentLevelName);
	void OnPostInitGame(const class FString& CurrentLevelName);
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void ReceiveBeginPlay();
	void SetPlayerAndEnemyGravity(bool Enable);
	void InitializeEnemys();
	void StartGameForDebug();
	void MakeArrayPlayerToBase(TArray<class ARSBattlePlayer_C*>& Players, TArray<class ARSCharacterBase*>* Bases);
	void MakeArrayBaseToPlayer(TArray<class ARSCharacterBase*>& Bases, TArray<class ARSBattlePlayer_C*>* Players);
	void IndexToPartyPlayerKind(int32 Param_Index, ERSPartyPlayerKind* Kind);
	void SpawnBossChara(const struct FTransform& SpawnTransform, class UClass* BossClass);
	void SwapBossControll();
	void FindRivalTeamCharas(TArray<class ARSBattleCharacter_C*>* Enemys);
	void GetFader(class ABP_Fade_C** Param_Fader);
	void GetLeftPlayerBP(class ARSCharacterBase** Player);
	void GetRightPlayerBP(class ARSCharacterBase** Player);
	void GetMainPlayerBP(class ARSCharacterBase** Player);
	void GetPlayersAll(TArray<class ARSCharacterBase*>* Players);
	void IsPersistentLevel(class UObject* Level, bool* IsPersistenceLevel);
	void IsLV_MainPersistent(bool* IsLV_MainPersistence);
	void IsDevelopmentBP(bool* Param_IsDevelopment);
	bool IsGameFlowLevelBP();
	void IsInitializedDev(bool* IsInitialized);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RSGameModeBP_C">();
	}
	static class ARSGameModeBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARSGameModeBP_C>();
	}
};
static_assert(alignof(ARSGameModeBP_C) == 0x000008, "Wrong alignment on ARSGameModeBP_C");
static_assert(sizeof(ARSGameModeBP_C) == 0x0003A0, "Wrong size on ARSGameModeBP_C");
static_assert(offsetof(ARSGameModeBP_C, UberGraphFrame) == 0x000338, "Member 'ARSGameModeBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, DefaultSceneRoot) == 0x000340, "Member 'ARSGameModeBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, MainPlayerClasses) == 0x000348, "Member 'ARSGameModeBP_C::MainPlayerClasses' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, LeftPlayerClasses) == 0x000358, "Member 'ARSGameModeBP_C::LeftPlayerClasses' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, RightPlayerClasses) == 0x000368, "Member 'ARSGameModeBP_C::RightPlayerClasses' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, BossCharacter) == 0x000378, "Member 'ARSGameModeBP_C::BossCharacter' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, Fader) == 0x000380, "Member 'ARSGameModeBP_C::Fader' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, LEnemyList) == 0x000388, "Member 'ARSGameModeBP_C::LEnemyList' has a wrong offset!");
static_assert(offsetof(ARSGameModeBP_C, bInitializedDev) == 0x000398, "Member 'ARSGameModeBP_C::bInitializedDev' has a wrong offset!");

}

