#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Enemy_Weapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Enemy_Weapon.BP_Enemy_Weapon_C
// 0x03C0 (0x06F8 - 0x0338)
class ABP_Enemy_Weapon_C final : public AEnemyWeaponBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      PhysicsCollision;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      RootCollisionCapsule;                              // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitCheckReceiverComponent*             HitCheckReceiver;                                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BulletMesh;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_RSParticleSystemComponent_C*        BP_RSParticleSystemComponent;                      // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AssetLoadComponent_C*               BP_AssetLoadComponent;                             // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      AttackCollisionCapsule;                            // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AttackCollision;                                   // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTeamComponent*                         Team;                                              // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionCommonInfo                 Common;                                            // 0x0390(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UHitCheckComponent*                     HitCheckComponent;                                 // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LifeTimer;                                         // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitLocation;                                      // 0x040C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackOwner;                                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurveTargetMove;                                 // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B0F[0x3];                                     // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurveTargetMoveSpeed;                              // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OldLocation;                                       // 0x0428(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0434(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDistance;                                    // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B10[0x4];                                     // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveTargetMove;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHitCurveTargetMove;                              // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B11[0x3];                                     // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetDistanceCheck;                               // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CommonMoveDir;                                     // 0x0458(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CommonMoveSpeed;                                   // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CreateScale;                                       // 0x0468(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsProjectileMove;                                  // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitAttack;                                        // 0x0475(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitDamage;                                        // 0x0476(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitObject;                                        // 0x0477(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         TestCount;                                         // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalDeltaSeconds;                                 // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BulletDirection;                                   // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnyHit;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B12[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        HitEffect;                                         // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRecycle;                                         // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEnemyWeaponMoveKind                          MoveKind;                                          // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIntercepted;                                      // 0x04A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B13[0x1];                                     // 0x04A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitDir;                                           // 0x04A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroy;                                          // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B14[0x3];                                     // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustAngle;                                       // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCorrectAngleZ;                                  // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingStartDistance;                               // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileGravityScale;                            // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingMagnitude;                                   // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptHomingMagnitude;                          // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B15[0x4];                                     // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         State;                                             // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingAngle;                                       // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingInterpSpeed;                                 // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeed;                                       // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReadyStartLocation;                                // 0x04E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReadyEndLocation;                                  // 0x04F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingReadySeconds;                                // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingEnableSeconds;                               // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        VanishEffect;                                      // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOldVersion;                                       // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B16[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        WallHitEffect;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustFloorAngle;                                  // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBreakLostTarget;                                  // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B17[0x3];                                     // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          HitSound;                                          // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          WallHitSound;                                      // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNotLineCheck;                                     // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNotUseAttackCollision;                            // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableSweep;                                      // 0x053A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B18[0x1];                                     // 0x053B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CommonMoveGravity;                                 // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingCutDistance;                                 // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableHoming;                                    // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B19[0x3];                                     // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          HomingLoopSe;                                      // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   HomingLoopSe_Handle;                               // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitEffectScale;                                    // 0x0558(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInterceptReserve;                                 // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1A[0x3];                                     // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             InterceptReserveTimer;                             // 0x0568(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInterceptPauseAttackCollision;                    // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1B[0x3];                                     // 0x0575(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CorrectBulletSpeed;                                // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableHomingTime;                                  // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartHoming;                                      // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHomingProjectile;                                 // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1C[0x2];                                     // 0x0582(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PreRotation;                                       // 0x0584(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHomingLimitDegree;                                // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1D[0x3];                                     // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HomingLimitDegree;                                 // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreVelocity;                                       // 0x0598(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CorrectBulletGravity;                              // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitAngleUp;                                      // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitAngleDown;                                    // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitAngleLR;                                      // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustAngleDistanceMax;                            // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustAngleDistanceMin;                            // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDistanceAdjustAngleUp;                        // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDistanceAdjustAngleDown;                      // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewCorrectDir;                                    // 0x05C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1E[0x3];                                     // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     AttackSkillInfo;                                   // 0x05C8(0x00F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         InterceptMoveSpeed;                                // 0x06B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntercepRotAngle;                                  // 0x06BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntercepRotSeconds;                                // 0x06C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntercepRotTimer;                                  // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitPhysics;                                       // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1F[0x3];                                     // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicsHalfHeightScale;                            // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsRadiusScale;                                // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PhysicsCollisionHitLocation;                       // 0x06D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableHitPhysics;                                // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisableUpdatePhysics;                             // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B20[0x2];                                     // 0x06E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayIgnoreJustDodgeSeconds;                       // 0x06E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IgnoreJustDodgeTimer;                              // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInterceptAttack;                                 // 0x06EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B21[0x3];                                     // 0x06ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         EmitterInstance;                                   // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Enemy_Weapon(int32 EntryPoint);
	void EndCurveTargetMove_FromNative(float Sec);
	void BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result);
	void BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void CreateAttackCollosion(class UDataTable* DataTable, class FName SkillName, class AActor* Param_Owner, float Timer, const struct FVector& Location);
	void UpdateCurveTargetMove(float Sec);
	float GetTargetDistance();
	void SetCurveTargetMoveInit();
	void SetTargetMoveEffectRotation();
	void HitCurveMoveTarget(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HitAfterCurveMoveTarget(const struct FVector& HitLocation, const struct FVector& HitNormal, bool* Return);
	void AttackCollisionEnd(bool IsVisible);
	void EndCurveTargetMove(float Sec, bool* Return);
	void GetHitObjectType(TArray<EObjectTypeQuery>* ObjectType);
	void InitCommonMove(const struct FVector& InitPos, const struct FVector& MoveDir, float MoveSpeed, bool NoTargetMove);
	void UpdateCommonMove(float DeltaTime);
	void IsHitLineCheck(const struct FVector& StartLocation, const struct FVector& EndLocation, bool* Param_IsAnyHit, struct FHitResult* HitResult);
	void OnHitAttack(const struct FHCHitResult& HitResult, bool* Result);
	void OnHitDamage(const struct FHCHitResult& HitResult, bool* Result);
	void UpdateProjectileMove(float DeltaTime);
	void OnHitObject(const struct FHitResult& HitResult, bool* Result);
	void WeaponUpdate(float DeltaSeconds);
	void UpdateGravityMiove(float DeltaSeconds);
	void GravityHitProcess(bool IsHitPlayer, const struct FVector& HitLocation, const struct FVector& HitNormal, bool* Dummy);
	void Bullet_Recycle(const struct FVector& Location, bool* Dummy);
	void InitProjectileMove(const struct FVector& Src, const struct FVector& Dst, const struct FVector& Dir, float Speed, float Angle, float MaxAngle, float GravityScale);
	void InitInterceptMove_Old(class ARSBattleCharacter_C* Attacker, class ARSBattleCharacter_C* Param_Target);
	void GetAttackCollisionPrimitive(class UPrimitiveComponent** Primitive);
	void UpdateTimer(float DeltaTime);
	void ProjectileHitProcess(bool IsHitPlayer, const struct FVector& HitLocation, const struct FVector& HitNormal, bool* NewParam);
	void EndHoming();
	void UpdateCustomMove(float DeltaTime, bool* Return);
	void InitCustomMove(bool* Return);
	void CorrectBulletDirection(const struct FVector& FireLocation, const struct FVector& Param_TargetLocation, const struct FVector& FireForwardVector, float AbsoluteAngleZ, float MaxAngleZ, float Speed, struct FVector* OutDirection);
	void InitHomingProjectileMove(const struct FVector& StartLocation, const struct FVector& Param_TargetLocation, const struct FVector& ForwardVec, float Speed, float Angle, float MaxAngle, float GravityScale, float HomingStartDis, float HomingMagunitude, class ARSBattleCharacter_C* TargetActor);
	void UpdateHomingMove(float DeltaSeconds, bool* Dummy);
	void InitHomingMove(const struct FVector& ReadyStart, const struct FVector& ReadyEnd);
	void StartVanishEffect(const struct FVector& HitLocation, const struct FVector& HitNormal, bool* Dummy);
	void SetWeaponActivate(bool bActive, bool* Dummy);
	void InitVariable(bool* Dummy);
	void InitWeapon(bool* Dummy);
	void FinishWeapon(bool* Dummy);
	void SetWeaponVisibility(bool bVisible, bool* Dummy);
	bool IsHitFloor(const struct FVector& Normal);
	void InitProjectileMoveSimple(const struct FVector& Location, const struct FVector& Velocity, float GravityScale);
	void PlayHitSound(const struct FVector& Location, bool IsWall);
	void NoticeSelfDestruct();
	void InitCommonMoveWithGravity(const struct FVector& InitPos, const struct FVector& MoveDir, float MoveSpeed, float Param_Gravity, bool NoTargetMove);
	void IsHomingCutDistance(const struct FVector& Param_TargetLocation, bool* IsCut);
	void StopHomingSe();
	void UpdateInterceptReserve(float DeltaSeconds, bool* Dummy);
	void CheckHomingEnd();
	void EndCustomMove(bool bForce, bool* Dummy);
	void CancelAllEffect(bool* bDummy);
	void OnHitProjectileWall(bool IsWall, bool IsFloor);
	void UpdateInterceptMove(float DeltaSeconds, bool* bDummy);
	void InitInterceptMove(class ARSBattleCharacter_C* Attacker, class ARSBattleCharacter_C* Param_Target);
	void InitializePhysicsCollision();
	void StartPhysicsCollision();
	void HitPhysicsCollision(const struct FVector& HitLocation);
	void IsHitPhysicsCollision(bool* bHit);
	void UpdatePhysicsCollision(float DeltaSec);
	void EndPhysicsCollision();
	void IsHitLineCheckForObjects(const struct FVector& StartLocation, const struct FVector& EndLocation, TArray<EObjectTypeQuery>& ObjectTypes, TArray<class AActor*>& ActorsToIgnore, bool* Param_IsAnyHit, struct FHitResult* HitResult);
	void AddIgnoreJustDodge();
	void Set_Ignore_Just_Dodge_Seconds(float DelaySeconds, bool* bDummy);
	class AActor* GetAttackOwnerTargetCharaNative();
	bool ProjectileHitProcess_FromNative(bool IsHitPlayer, const struct FVector& HitLocation, const struct FVector& HitNormal);
	class UHitCheckComponent* GetHitCheckComponent_FromNative();
	bool HitAfterCurveMoveTarget_FromNative(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void IsIntercept(bool* IsInterceptReserve);
	void UpdateEmitterInstance(class URSParticleSystemComponentBase* NewEmitterInstance);
	void InterceptAttack(class ARSBattleCharacter_C* Intercepter, class ARSBattleCharacter_C* NewTarget, bool* bDummy);
	void InterceptReserve(bool* bDummy);
	void InterceptCancel(bool* bDummy);
	void IsInterceptFail(bool* bFail);
	void GetLocationForHitDirection(bool* IsEnemyWeapon, struct FVector* Location);

	void IsOverTarget(bool* IsOver) const;
	void IsWeaponActive(bool* bActive) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Enemy_Weapon_C">();
	}
	static class ABP_Enemy_Weapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Enemy_Weapon_C>();
	}
};
static_assert(alignof(ABP_Enemy_Weapon_C) == 0x000008, "Wrong alignment on ABP_Enemy_Weapon_C");
static_assert(sizeof(ABP_Enemy_Weapon_C) == 0x0006F8, "Wrong size on ABP_Enemy_Weapon_C");
static_assert(offsetof(ABP_Enemy_Weapon_C, UberGraphFrame) == 0x000338, "Member 'ABP_Enemy_Weapon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, PhysicsCollision) == 0x000340, "Member 'ABP_Enemy_Weapon_C::PhysicsCollision' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, RootCollisionCapsule) == 0x000348, "Member 'ABP_Enemy_Weapon_C::RootCollisionCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HitCheckReceiver) == 0x000350, "Member 'ABP_Enemy_Weapon_C::HitCheckReceiver' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, ProjectileMovement) == 0x000358, "Member 'ABP_Enemy_Weapon_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, BulletMesh) == 0x000360, "Member 'ABP_Enemy_Weapon_C::BulletMesh' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, BP_RSParticleSystemComponent) == 0x000368, "Member 'ABP_Enemy_Weapon_C::BP_RSParticleSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, BP_AssetLoadComponent) == 0x000370, "Member 'ABP_Enemy_Weapon_C::BP_AssetLoadComponent' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AttackCollisionCapsule) == 0x000378, "Member 'ABP_Enemy_Weapon_C::AttackCollisionCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AttackCollision) == 0x000380, "Member 'ABP_Enemy_Weapon_C::AttackCollision' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, Team) == 0x000388, "Member 'ABP_Enemy_Weapon_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, Common) == 0x000390, "Member 'ABP_Enemy_Weapon_C::Common' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HitCheckComponent) == 0x000400, "Member 'ABP_Enemy_Weapon_C::HitCheckComponent' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, LifeTimer) == 0x000408, "Member 'ABP_Enemy_Weapon_C::LifeTimer' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, InitLocation) == 0x00040C, "Member 'ABP_Enemy_Weapon_C::InitLocation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AttackOwner) == 0x000418, "Member 'ABP_Enemy_Weapon_C::AttackOwner' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IsCurveTargetMove) == 0x000420, "Member 'ABP_Enemy_Weapon_C::IsCurveTargetMove' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CurveTargetMoveSpeed) == 0x000424, "Member 'ABP_Enemy_Weapon_C::CurveTargetMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, OldLocation) == 0x000428, "Member 'ABP_Enemy_Weapon_C::OldLocation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, TargetLocation) == 0x000434, "Member 'ABP_Enemy_Weapon_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, TargetDistance) == 0x000440, "Member 'ABP_Enemy_Weapon_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CurveTargetMove) == 0x000448, "Member 'ABP_Enemy_Weapon_C::CurveTargetMove' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IsHitCurveTargetMove) == 0x000450, "Member 'ABP_Enemy_Weapon_C::IsHitCurveTargetMove' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, TargetDistanceCheck) == 0x000454, "Member 'ABP_Enemy_Weapon_C::TargetDistanceCheck' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CommonMoveDir) == 0x000458, "Member 'ABP_Enemy_Weapon_C::CommonMoveDir' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CommonMoveSpeed) == 0x000464, "Member 'ABP_Enemy_Weapon_C::CommonMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CreateScale) == 0x000468, "Member 'ABP_Enemy_Weapon_C::CreateScale' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IsProjectileMove) == 0x000474, "Member 'ABP_Enemy_Weapon_C::IsProjectileMove' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bHitAttack) == 0x000475, "Member 'ABP_Enemy_Weapon_C::bHitAttack' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bHitDamage) == 0x000476, "Member 'ABP_Enemy_Weapon_C::bHitDamage' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bHitObject) == 0x000477, "Member 'ABP_Enemy_Weapon_C::bHitObject' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, TestCount) == 0x000478, "Member 'ABP_Enemy_Weapon_C::TestCount' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, TotalDeltaSeconds) == 0x00047C, "Member 'ABP_Enemy_Weapon_C::TotalDeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, BulletDirection) == 0x000480, "Member 'ABP_Enemy_Weapon_C::BulletDirection' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, Gravity) == 0x00048C, "Member 'ABP_Enemy_Weapon_C::Gravity' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IsAnyHit) == 0x000490, "Member 'ABP_Enemy_Weapon_C::IsAnyHit' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HitEffect) == 0x000498, "Member 'ABP_Enemy_Weapon_C::HitEffect' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IsRecycle) == 0x0004A0, "Member 'ABP_Enemy_Weapon_C::IsRecycle' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, MoveKind) == 0x0004A1, "Member 'ABP_Enemy_Weapon_C::MoveKind' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bIntercepted) == 0x0004A2, "Member 'ABP_Enemy_Weapon_C::bIntercepted' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, InitDir) == 0x0004A4, "Member 'ABP_Enemy_Weapon_C::InitDir' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bDestroy) == 0x0004B0, "Member 'ABP_Enemy_Weapon_C::bDestroy' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AdjustAngle) == 0x0004B4, "Member 'ABP_Enemy_Weapon_C::AdjustAngle' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, MaxCorrectAngleZ) == 0x0004B8, "Member 'ABP_Enemy_Weapon_C::MaxCorrectAngleZ' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingStartDistance) == 0x0004BC, "Member 'ABP_Enemy_Weapon_C::HomingStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, ProjectileGravityScale) == 0x0004C0, "Member 'ABP_Enemy_Weapon_C::ProjectileGravityScale' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingMagnitude) == 0x0004C4, "Member 'ABP_Enemy_Weapon_C::HomingMagnitude' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, InterceptHomingMagnitude) == 0x0004C8, "Member 'ABP_Enemy_Weapon_C::InterceptHomingMagnitude' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, Target) == 0x0004D0, "Member 'ABP_Enemy_Weapon_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, State) == 0x0004D8, "Member 'ABP_Enemy_Weapon_C::State' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingAngle) == 0x0004DC, "Member 'ABP_Enemy_Weapon_C::HomingAngle' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingInterpSpeed) == 0x0004E0, "Member 'ABP_Enemy_Weapon_C::HomingInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingSpeed) == 0x0004E4, "Member 'ABP_Enemy_Weapon_C::HomingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, ReadyStartLocation) == 0x0004E8, "Member 'ABP_Enemy_Weapon_C::ReadyStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, ReadyEndLocation) == 0x0004F4, "Member 'ABP_Enemy_Weapon_C::ReadyEndLocation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingReadySeconds) == 0x000500, "Member 'ABP_Enemy_Weapon_C::HomingReadySeconds' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingEnableSeconds) == 0x000504, "Member 'ABP_Enemy_Weapon_C::HomingEnableSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, VanishEffect) == 0x000508, "Member 'ABP_Enemy_Weapon_C::VanishEffect' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bOldVersion) == 0x000510, "Member 'ABP_Enemy_Weapon_C::bOldVersion' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, WallHitEffect) == 0x000518, "Member 'ABP_Enemy_Weapon_C::WallHitEffect' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AdjustFloorAngle) == 0x000520, "Member 'ABP_Enemy_Weapon_C::AdjustFloorAngle' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bBreakLostTarget) == 0x000524, "Member 'ABP_Enemy_Weapon_C::bBreakLostTarget' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HitSound) == 0x000528, "Member 'ABP_Enemy_Weapon_C::HitSound' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, WallHitSound) == 0x000530, "Member 'ABP_Enemy_Weapon_C::WallHitSound' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bNotLineCheck) == 0x000538, "Member 'ABP_Enemy_Weapon_C::bNotLineCheck' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bNotUseAttackCollision) == 0x000539, "Member 'ABP_Enemy_Weapon_C::bNotUseAttackCollision' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bEnableSweep) == 0x00053A, "Member 'ABP_Enemy_Weapon_C::bEnableSweep' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CommonMoveGravity) == 0x00053C, "Member 'ABP_Enemy_Weapon_C::CommonMoveGravity' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingCutDistance) == 0x000540, "Member 'ABP_Enemy_Weapon_C::HomingCutDistance' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bDisableHoming) == 0x000544, "Member 'ABP_Enemy_Weapon_C::bDisableHoming' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingLoopSe) == 0x000548, "Member 'ABP_Enemy_Weapon_C::HomingLoopSe' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingLoopSe_Handle) == 0x000550, "Member 'ABP_Enemy_Weapon_C::HomingLoopSe_Handle' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HitEffectScale) == 0x000558, "Member 'ABP_Enemy_Weapon_C::HitEffectScale' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bInterceptReserve) == 0x000564, "Member 'ABP_Enemy_Weapon_C::bInterceptReserve' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, InterceptReserveTimer) == 0x000568, "Member 'ABP_Enemy_Weapon_C::InterceptReserveTimer' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bInterceptPauseAttackCollision) == 0x000574, "Member 'ABP_Enemy_Weapon_C::bInterceptPauseAttackCollision' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CorrectBulletSpeed) == 0x000578, "Member 'ABP_Enemy_Weapon_C::CorrectBulletSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, EnableHomingTime) == 0x00057C, "Member 'ABP_Enemy_Weapon_C::EnableHomingTime' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bStartHoming) == 0x000580, "Member 'ABP_Enemy_Weapon_C::bStartHoming' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bHomingProjectile) == 0x000581, "Member 'ABP_Enemy_Weapon_C::bHomingProjectile' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, PreRotation) == 0x000584, "Member 'ABP_Enemy_Weapon_C::PreRotation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bHomingLimitDegree) == 0x000590, "Member 'ABP_Enemy_Weapon_C::bHomingLimitDegree' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, HomingLimitDegree) == 0x000594, "Member 'ABP_Enemy_Weapon_C::HomingLimitDegree' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, PreVelocity) == 0x000598, "Member 'ABP_Enemy_Weapon_C::PreVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, CorrectBulletGravity) == 0x0005A4, "Member 'ABP_Enemy_Weapon_C::CorrectBulletGravity' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, LimitAngleUp) == 0x0005A8, "Member 'ABP_Enemy_Weapon_C::LimitAngleUp' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, LimitAngleDown) == 0x0005AC, "Member 'ABP_Enemy_Weapon_C::LimitAngleDown' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, LimitAngleLR) == 0x0005B0, "Member 'ABP_Enemy_Weapon_C::LimitAngleLR' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AdjustAngleDistanceMax) == 0x0005B4, "Member 'ABP_Enemy_Weapon_C::AdjustAngleDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AdjustAngleDistanceMin) == 0x0005B8, "Member 'ABP_Enemy_Weapon_C::AdjustAngleDistanceMin' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, LimitDistanceAdjustAngleUp) == 0x0005BC, "Member 'ABP_Enemy_Weapon_C::LimitDistanceAdjustAngleUp' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, LimitDistanceAdjustAngleDown) == 0x0005C0, "Member 'ABP_Enemy_Weapon_C::LimitDistanceAdjustAngleDown' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bNewCorrectDir) == 0x0005C4, "Member 'ABP_Enemy_Weapon_C::bNewCorrectDir' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, AttackSkillInfo) == 0x0005C8, "Member 'ABP_Enemy_Weapon_C::AttackSkillInfo' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, InterceptMoveSpeed) == 0x0006B8, "Member 'ABP_Enemy_Weapon_C::InterceptMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IntercepRotAngle) == 0x0006BC, "Member 'ABP_Enemy_Weapon_C::IntercepRotAngle' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IntercepRotSeconds) == 0x0006C0, "Member 'ABP_Enemy_Weapon_C::IntercepRotSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IntercepRotTimer) == 0x0006C4, "Member 'ABP_Enemy_Weapon_C::IntercepRotTimer' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bHitPhysics) == 0x0006C8, "Member 'ABP_Enemy_Weapon_C::bHitPhysics' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, PhysicsHalfHeightScale) == 0x0006CC, "Member 'ABP_Enemy_Weapon_C::PhysicsHalfHeightScale' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, PhysicsRadiusScale) == 0x0006D0, "Member 'ABP_Enemy_Weapon_C::PhysicsRadiusScale' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, PhysicsCollisionHitLocation) == 0x0006D4, "Member 'ABP_Enemy_Weapon_C::PhysicsCollisionHitLocation' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bDisableHitPhysics) == 0x0006E0, "Member 'ABP_Enemy_Weapon_C::bDisableHitPhysics' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, bDisableUpdatePhysics) == 0x0006E1, "Member 'ABP_Enemy_Weapon_C::bDisableUpdatePhysics' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, DelayIgnoreJustDodgeSeconds) == 0x0006E4, "Member 'ABP_Enemy_Weapon_C::DelayIgnoreJustDodgeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IgnoreJustDodgeTimer) == 0x0006E8, "Member 'ABP_Enemy_Weapon_C::IgnoreJustDodgeTimer' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, IsInterceptAttack) == 0x0006EC, "Member 'ABP_Enemy_Weapon_C::IsInterceptAttack' has a wrong offset!");
static_assert(offsetof(ABP_Enemy_Weapon_C, EmitterInstance) == 0x0006F0, "Member 'ABP_Enemy_Weapon_C::EmitterInstance' has a wrong offset!");

}

