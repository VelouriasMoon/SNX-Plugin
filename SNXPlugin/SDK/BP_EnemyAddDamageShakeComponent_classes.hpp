#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyAddDamageShakeComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyAddDamageShakeComponent.BP_EnemyAddDamageShakeComponent_C
// 0x0090 (0x01D8 - 0x0148)
class UBP_EnemyAddDamageShakeComponent_C final : public UEnemyAddDamageShakeComponentBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0148(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattleCharacter_C*                   OwnerCharacter;                                    // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShake;                                           // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD5[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShakeCurrentCount;                                 // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShakeMaxCount;                                     // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeScale;                                        // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeVec;                                          // 0x0168(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DD6[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShakeCurveData;                                    // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotateRange;                                       // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRight;                                           // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirst;                                           // 0x0185(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD7[0x2];                                     // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShakeRangeMin;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeRangeMax;                                     // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OneShakeTimer;                                     // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x0194(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x01A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x01AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTotalTime;                                  // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRange;                                      // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTriggerScale;                                     // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD8[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerShakeScale;                                 // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockBackShakeScale;                               // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharaTypeShakeScale;                               // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKnockBackScale;                                   // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EnemyAddDamageShakeComponent(int32 EntryPoint);
	void UnbindUpdate();
	void BindUpdate();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Update(float DeltaSec);
	void Start(bool bTriggerAttack);
	void End();
	void GetRandomVec(const struct FVector& CurrentVec, float Range, bool Param_IsRight, struct FVector* ReturnVec);
	void CalcShakeScale(float* CalcScale);
	void SetParam();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyAddDamageShakeComponent_C">();
	}
	static class UBP_EnemyAddDamageShakeComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyAddDamageShakeComponent_C>();
	}
};
static_assert(alignof(UBP_EnemyAddDamageShakeComponent_C) == 0x000008, "Wrong alignment on UBP_EnemyAddDamageShakeComponent_C");
static_assert(sizeof(UBP_EnemyAddDamageShakeComponent_C) == 0x0001D8, "Wrong size on UBP_EnemyAddDamageShakeComponent_C");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, UberGraphFrame) == 0x000148, "Member 'UBP_EnemyAddDamageShakeComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, OwnerCharacter) == 0x000150, "Member 'UBP_EnemyAddDamageShakeComponent_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, IsShake) == 0x000158, "Member 'UBP_EnemyAddDamageShakeComponent_C::IsShake' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeCurrentCount) == 0x00015C, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeCurrentCount' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeMaxCount) == 0x000160, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeMaxCount' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeScale) == 0x000164, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeVec) == 0x000168, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeVec' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeCurveData) == 0x000178, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeCurveData' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, RotateRange) == 0x000180, "Member 'UBP_EnemyAddDamageShakeComponent_C::RotateRange' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, IsRight) == 0x000184, "Member 'UBP_EnemyAddDamageShakeComponent_C::IsRight' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, IsFirst) == 0x000185, "Member 'UBP_EnemyAddDamageShakeComponent_C::IsFirst' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeRangeMin) == 0x000188, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, ShakeRangeMax) == 0x00018C, "Member 'UBP_EnemyAddDamageShakeComponent_C::ShakeRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, OneShakeTimer) == 0x000190, "Member 'UBP_EnemyAddDamageShakeComponent_C::OneShakeTimer' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, LastLocation) == 0x000194, "Member 'UBP_EnemyAddDamageShakeComponent_C::LastLocation' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, StartLocation) == 0x0001A0, "Member 'UBP_EnemyAddDamageShakeComponent_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, EndLocation) == 0x0001AC, "Member 'UBP_EnemyAddDamageShakeComponent_C::EndLocation' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, CurrentTotalTime) == 0x0001B8, "Member 'UBP_EnemyAddDamageShakeComponent_C::CurrentTotalTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, CurrentRange) == 0x0001BC, "Member 'UBP_EnemyAddDamageShakeComponent_C::CurrentRange' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, bTriggerScale) == 0x0001C0, "Member 'UBP_EnemyAddDamageShakeComponent_C::bTriggerScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, TriggerShakeScale) == 0x0001C4, "Member 'UBP_EnemyAddDamageShakeComponent_C::TriggerShakeScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, KnockBackShakeScale) == 0x0001C8, "Member 'UBP_EnemyAddDamageShakeComponent_C::KnockBackShakeScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, CharaTypeShakeScale) == 0x0001CC, "Member 'UBP_EnemyAddDamageShakeComponent_C::CharaTypeShakeScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyAddDamageShakeComponent_C, bKnockBackScale) == 0x0001D0, "Member 'UBP_EnemyAddDamageShakeComponent_C::bKnockBackScale' has a wrong offset!");

}

