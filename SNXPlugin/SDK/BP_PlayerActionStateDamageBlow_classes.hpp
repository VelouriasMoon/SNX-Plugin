#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateDamageBlow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BP_PlayerActionStateDamage_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C
// 0x0018 (0x0118 - 0x0100)
class UBP_PlayerActionStateDamageBlow_C final : public UBP_PlayerActionStateDamage_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerActionStateDamageBlow_C;   // 0x0100(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   ClaimantName;                                      // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageDir                              DamageDir;                                         // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFallFailed;                                       // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBindFloatingControl;                              // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerActionStateDamageBlow(int32 EntryPoint);
	void UnbindFloatingControlEvent();
	void BindFloatingControlEvent();
	int32 Enter(int32 Param);
	int32 Update();
	bool Transition();
	int32 Exit(int32 NextStateIndex);
	void IsInvalidDamage(EPlayerDamageKind DamageKind, bool* bInvalidDamage);
	void IsAerialBlow(EPlayerDamageKind DamageKind, bool* bSkip);
	void OnBeginFall();
	void OnFallFailed();

	void IsDamageFront(bool* bFront) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerActionStateDamageBlow_C">();
	}
	static class UBP_PlayerActionStateDamageBlow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerActionStateDamageBlow_C>();
	}
};
static_assert(alignof(UBP_PlayerActionStateDamageBlow_C) == 0x000008, "Wrong alignment on UBP_PlayerActionStateDamageBlow_C");
static_assert(sizeof(UBP_PlayerActionStateDamageBlow_C) == 0x000118, "Wrong size on UBP_PlayerActionStateDamageBlow_C");
static_assert(offsetof(UBP_PlayerActionStateDamageBlow_C, UberGraphFrame_BP_PlayerActionStateDamageBlow_C) == 0x000100, "Member 'UBP_PlayerActionStateDamageBlow_C::UberGraphFrame_BP_PlayerActionStateDamageBlow_C' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDamageBlow_C, ClaimantName) == 0x000108, "Member 'UBP_PlayerActionStateDamageBlow_C::ClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDamageBlow_C, DamageDir) == 0x000110, "Member 'UBP_PlayerActionStateDamageBlow_C::DamageDir' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDamageBlow_C, bFallFailed) == 0x000111, "Member 'UBP_PlayerActionStateDamageBlow_C::bFallFailed' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDamageBlow_C, bBindFloatingControl) == 0x000112, "Member 'UBP_PlayerActionStateDamageBlow_C::bBindFloatingControl' has a wrong offset!");

}

