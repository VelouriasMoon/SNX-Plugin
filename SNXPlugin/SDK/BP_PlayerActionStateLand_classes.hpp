#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateLand

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BP_PlayerActionStateCommonBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerActionStateLand.BP_PlayerActionStateLand_C
// 0x0028 (0x0110 - 0x00E8)
class UBP_PlayerActionStateLand_C final : public UBP_PlayerActionStateCommonBase_C
{
public:
	EJumpActionParam                              LandingParam;                                      // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5091[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             LandingOffsetTimer;                                // 0x00EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                LandingOffset;                                     // 0x00F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevLandingOffset;                                 // 0x0104(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	int32 Enter(int32 Param);
	int32 Update();
	bool Transition();
	void PlayLandingEffect(EGamePhysicalSurfaceType PhysicsType, const struct FVector& Location);
	void PlayLandingSound(EGamePhysicalSurfaceType PhysicsType, const struct FVector& Location);
	void PlayLandingEffectSound();
	void GetLandingPower(bool* IsLarge);
	int32 Exit(int32 NextStateIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerActionStateLand_C">();
	}
	static class UBP_PlayerActionStateLand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerActionStateLand_C>();
	}
};
static_assert(alignof(UBP_PlayerActionStateLand_C) == 0x000008, "Wrong alignment on UBP_PlayerActionStateLand_C");
static_assert(sizeof(UBP_PlayerActionStateLand_C) == 0x000110, "Wrong size on UBP_PlayerActionStateLand_C");
static_assert(offsetof(UBP_PlayerActionStateLand_C, LandingParam) == 0x0000E8, "Member 'UBP_PlayerActionStateLand_C::LandingParam' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateLand_C, LandingOffsetTimer) == 0x0000EC, "Member 'UBP_PlayerActionStateLand_C::LandingOffsetTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateLand_C, LandingOffset) == 0x0000F8, "Member 'UBP_PlayerActionStateLand_C::LandingOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateLand_C, PrevLandingOffset) == 0x000104, "Member 'UBP_PlayerActionStateLand_C::PrevLandingOffset' has a wrong offset!");

}

