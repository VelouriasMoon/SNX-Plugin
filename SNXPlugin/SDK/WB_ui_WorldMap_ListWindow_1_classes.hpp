#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ui_WorldMap_ListWindow_1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ui_WorldMap_ListWindow_1.WB_ui_WorldMap_ListWindow_1_C
// 0x0108 (0x0490 - 0x0388)
class UWB_ui_WorldMap_ListWindow_1_C final : public UUIBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Out;                                               // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_none;                                      // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default;                                           // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                All_Color;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Choise_list;                                       // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Map_ListWindow_set;                                // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_1;                            // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_2;                            // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_3;                            // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_4;                            // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_5;                            // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_6;                            // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_7;                            // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_8;                            // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_9;                            // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Parts_1_C*              WB_ui_WorldMap_Parts_10;                           // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FWorldmapOpenAreaParam>         AreaList;                                          // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CursorPos;                                         // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagDecide;                                        // 0x042C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagBattle;                                        // 0x042D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E4E[0x2];                                     // 0x042E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWB_ui_WorldMap_Parts_1_C*>      CellList;                                          // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         ListIndexBase;                                     // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4F[0x4];                                     // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsMainQuestList;                                   // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsSubQuestList;                                    // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsSubQuestRequestList;                             // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         AreaNameList;                                      // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FlagEnable;                                        // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagAreaEnable;                                    // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagKizuna;                                        // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WB_ui_WorldMap_ListWindow_1(int32 EntryPoint);
	void OnInitialized();
	void ________(const struct FRedMouseArgument& Argument, class UUserWidget* PWidget);
	void UpdateState(int32 State, int32 SubState, float DeltaSeconds);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void StateNone(int32 SubState);
	void StateOpen(int32 SubState);
	void StateLoop(int32 SubState);
	void StateClose(int32 SubState);
	void SetAreaList(TArray<struct FWorldmapOpenAreaParam>& List);
	void SetList();
	void SetListElement(int32 Param_Index, class UWB_ui_WorldMap_Parts_1_C* Widget);
	void GetLocationID(int32 Param_Index, int32* ID);
	void GetAreaID(int32 Param_Index, int32* ID);
	void GetPortalID(int32 Param_Index, int32* ID);
	void UpdateCursor();
	void IsDecide(bool* Param_IsDecide);
	void GetCurrentLocationID(int32* ID);
	void GetCurrentAreaID(int32* ID);
	void GetCurrentPortalID(int32* ID);
	void GetCurrentPortalName(class FName* Param_Name);
	void ResetList();
	void ResetDecide();
	void SetMainQuestList(TArray<bool>& List);
	void SetListBaseIndex(int32 Param_Index);
	void SetAreaNameList(TArray<class FString>& List);
	void SetEnable(bool Param_IsEnable);
	void IsEnable(bool* Param_IsEnable);
	void GetCurrentAreaName(class FString* AreaName);
	void IsEnableArea(bool* IsEnable);
	void ResetNewFlag(int32 Param_Index);
	void SetSubQuestList(TArray<bool>& List);
	void SetCursorPos(int32 AreaListIndex);
	void SetSubQuestRequestList(TArray<bool>& List);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ui_WorldMap_ListWindow_1_C">();
	}
	static class UWB_ui_WorldMap_ListWindow_1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ui_WorldMap_ListWindow_1_C>();
	}
};
static_assert(alignof(UWB_ui_WorldMap_ListWindow_1_C) == 0x000008, "Wrong alignment on UWB_ui_WorldMap_ListWindow_1_C");
static_assert(sizeof(UWB_ui_WorldMap_ListWindow_1_C) == 0x000490, "Wrong size on UWB_ui_WorldMap_ListWindow_1_C");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, UberGraphFrame) == 0x000388, "Member 'UWB_ui_WorldMap_ListWindow_1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, Out) == 0x000390, "Member 'UWB_ui_WorldMap_ListWindow_1_C::Out' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, In) == 0x000398, "Member 'UWB_ui_WorldMap_ListWindow_1_C::In' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, Default_none) == 0x0003A0, "Member 'UWB_ui_WorldMap_ListWindow_1_C::Default_none' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, Default) == 0x0003A8, "Member 'UWB_ui_WorldMap_ListWindow_1_C::Default' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, All_Color) == 0x0003B0, "Member 'UWB_ui_WorldMap_ListWindow_1_C::All_Color' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, Choise_list) == 0x0003B8, "Member 'UWB_ui_WorldMap_ListWindow_1_C::Choise_list' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, Map_ListWindow_set) == 0x0003C0, "Member 'UWB_ui_WorldMap_ListWindow_1_C::Map_ListWindow_set' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_1) == 0x0003C8, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_2) == 0x0003D0, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_3) == 0x0003D8, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_4) == 0x0003E0, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_4' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_5) == 0x0003E8, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_5' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_6) == 0x0003F0, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_6' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_7) == 0x0003F8, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_7' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_8) == 0x000400, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_8' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_9) == 0x000408, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_9' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, WB_ui_WorldMap_Parts_10) == 0x000410, "Member 'UWB_ui_WorldMap_ListWindow_1_C::WB_ui_WorldMap_Parts_10' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, AreaList) == 0x000418, "Member 'UWB_ui_WorldMap_ListWindow_1_C::AreaList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, CursorPos) == 0x000428, "Member 'UWB_ui_WorldMap_ListWindow_1_C::CursorPos' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, FlagDecide) == 0x00042C, "Member 'UWB_ui_WorldMap_ListWindow_1_C::FlagDecide' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, FlagBattle) == 0x00042D, "Member 'UWB_ui_WorldMap_ListWindow_1_C::FlagBattle' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, CellList) == 0x000430, "Member 'UWB_ui_WorldMap_ListWindow_1_C::CellList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, ListIndexBase) == 0x000440, "Member 'UWB_ui_WorldMap_ListWindow_1_C::ListIndexBase' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, IsMainQuestList) == 0x000448, "Member 'UWB_ui_WorldMap_ListWindow_1_C::IsMainQuestList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, IsSubQuestList) == 0x000458, "Member 'UWB_ui_WorldMap_ListWindow_1_C::IsSubQuestList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, IsSubQuestRequestList) == 0x000468, "Member 'UWB_ui_WorldMap_ListWindow_1_C::IsSubQuestRequestList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, AreaNameList) == 0x000478, "Member 'UWB_ui_WorldMap_ListWindow_1_C::AreaNameList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, FlagEnable) == 0x000488, "Member 'UWB_ui_WorldMap_ListWindow_1_C::FlagEnable' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, FlagAreaEnable) == 0x000489, "Member 'UWB_ui_WorldMap_ListWindow_1_C::FlagAreaEnable' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_ListWindow_1_C, FlagKizuna) == 0x00048A, "Member 'UWB_ui_WorldMap_ListWindow_1_C::FlagKizuna' has a wrong offset!");

}

