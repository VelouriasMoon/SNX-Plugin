#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SeamlessCameraRoot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CinematicCamera_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C
// 0x00A0 (0x02D0 - 0x0230)
class ABP_SeamlessCameraRoot_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       SequencerCamera;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeamlessIn;                                        // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         SeamlessOut;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       InterpolateCamera;                                 // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ED_SeamlessInFinish;                               // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FinishSeamlessIn;                                  // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_854D[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ED_SeamlessOutFinish;                              // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FinishSeamlessOut;                                 // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_854E[0xF];                                     // 0x0281(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SeamlessOutCameraTransform;                        // 0x0290(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSeamlessOutCameraTransform;                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseFocusManual;                                    // 0x02C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_854F[0x2];                                     // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinishCameraBlendTime;                             // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SeamlessOutPlayerCameraReset;                      // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          UsePlayerMeshRelativeLocation;                     // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsePlayerMeshRelativeRotation;                     // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ED_SeamlessInFinish__DelegateSignature();
	void ED_SeamlessOutFinish__DelegateSignature();
	void ExecuteUbergraph_BP_SeamlessCameraRoot(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InitializeInternal();
	void FinalizeInternal();
	void BindingSequencerCamera(class ARSLevelSequenceActor* Sequencer, TArray<struct FMovieSceneObjectBindingID>& Binding);
	void Bind(class ARSLevelSequenceActor* Sequencer, bool BindingSequencerCamera, bool BindingSeamlessCamera);
	void UpdateInternal(float DeltaSeconds);
	void ResetPlayerCamera();
	void Start();
	void End(bool BeforeReplaceSequencerCamera);
	void SetSeamlessOutCameraTransform(const struct FTransform& CameraTransform);
	void CalcSeamlessOutCameraTransformInternal(class ARSCharacterBase* Player, struct FTransform* Transform);
	void ResetCamera(const struct FTransform& CameraTransform);
	void SetViewTarget();
	void SetUsePlayerMeshRelative(bool UseLocation, bool UseRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SeamlessCameraRoot_C">();
	}
	static class ABP_SeamlessCameraRoot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SeamlessCameraRoot_C>();
	}
};
static_assert(alignof(ABP_SeamlessCameraRoot_C) == 0x000010, "Wrong alignment on ABP_SeamlessCameraRoot_C");
static_assert(sizeof(ABP_SeamlessCameraRoot_C) == 0x0002D0, "Wrong size on ABP_SeamlessCameraRoot_C");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, UberGraphFrame) == 0x000230, "Member 'ABP_SeamlessCameraRoot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_SeamlessCameraRoot_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, SequencerCamera) == 0x000240, "Member 'ABP_SeamlessCameraRoot_C::SequencerCamera' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, SeamlessIn) == 0x000248, "Member 'ABP_SeamlessCameraRoot_C::SeamlessIn' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, SeamlessOut) == 0x00024C, "Member 'ABP_SeamlessCameraRoot_C::SeamlessOut' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, InterpolateCamera) == 0x000250, "Member 'ABP_SeamlessCameraRoot_C::InterpolateCamera' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, ED_SeamlessInFinish) == 0x000258, "Member 'ABP_SeamlessCameraRoot_C::ED_SeamlessInFinish' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, FinishSeamlessIn) == 0x000268, "Member 'ABP_SeamlessCameraRoot_C::FinishSeamlessIn' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, ED_SeamlessOutFinish) == 0x000270, "Member 'ABP_SeamlessCameraRoot_C::ED_SeamlessOutFinish' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, FinishSeamlessOut) == 0x000280, "Member 'ABP_SeamlessCameraRoot_C::FinishSeamlessOut' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, SeamlessOutCameraTransform) == 0x000290, "Member 'ABP_SeamlessCameraRoot_C::SeamlessOutCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, UseSeamlessOutCameraTransform) == 0x0002C0, "Member 'ABP_SeamlessCameraRoot_C::UseSeamlessOutCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, UseFocusManual) == 0x0002C1, "Member 'ABP_SeamlessCameraRoot_C::UseFocusManual' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, FinishCameraBlendTime) == 0x0002C4, "Member 'ABP_SeamlessCameraRoot_C::FinishCameraBlendTime' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, SeamlessOutPlayerCameraReset) == 0x0002C8, "Member 'ABP_SeamlessCameraRoot_C::SeamlessOutPlayerCameraReset' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, UsePlayerMeshRelativeLocation) == 0x0002C9, "Member 'ABP_SeamlessCameraRoot_C::UsePlayerMeshRelativeLocation' has a wrong offset!");
static_assert(offsetof(ABP_SeamlessCameraRoot_C, UsePlayerMeshRelativeRotation) == 0x0002CA, "Member 'ABP_SeamlessCameraRoot_C::UsePlayerMeshRelativeRotation' has a wrong offset!");

}

