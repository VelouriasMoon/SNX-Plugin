#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SASCutinExtra

#include "Basic.hpp"

#include "BP_SASCutinExtra_classes.hpp"
#include "BP_SASCutinExtra_parameters.hpp"


namespace SDK
{

// Function BP_SASCutinExtra.BP_SASCutinExtra_C.ExecuteUbergraph_BP_SASCutinExtra
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SASCutinExtra_C::ExecuteUbergraph_BP_SASCutinExtra(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "ExecuteUbergraph_BP_SASCutinExtra");

	Params::BP_SASCutinExtra_C_ExecuteUbergraph_BP_SASCutinExtra Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SASCutinExtra_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "ReceiveEndPlay");

	Params::BP_SASCutinExtra_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SASCutinExtra_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "ReceiveTick");

	Params::BP_SASCutinExtra_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SASCutinExtra_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.Initialize
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SASCutinExtra_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.StartCutin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESASCutinExtraID                        SASExtraID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SASCutinExtra_C::StartCutin(ESASCutinExtraID SASExtraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "StartCutin");

	Params::BP_SASCutinExtra_C_StartCutin Parms{};

	Parms.SASExtraID = SASExtraID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.IsPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Playing                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SASCutinExtra_C::IsPlaying(bool* Playing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "IsPlaying");

	Params::BP_SASCutinExtra_C_IsPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Playing != nullptr)
		*Playing = Parms.Playing;
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.SetDilation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Dilation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SASCutinExtra_C::SetDilation(float Dilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "SetDilation");

	Params::BP_SASCutinExtra_C_SetDilation Parms{};

	Parms.Dilation = Dilation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.UpdateGlobalDilation
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_SASCutinExtra_C::UpdateGlobalDilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "UpdateGlobalDilation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.Finalize
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_SASCutinExtra_C::Finalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "Finalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SASCutinExtra.BP_SASCutinExtra_C.PauseCutin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SASCutinExtra_C::PauseCutin(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SASCutinExtra_C", "PauseCutin");

	Params::BP_SASCutinExtra_C_PauseCutin Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}

}

