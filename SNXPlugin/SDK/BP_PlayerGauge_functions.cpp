#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerGauge

#include "Basic.hpp"

#include "BP_PlayerGauge_classes.hpp"
#include "BP_PlayerGauge_parameters.hpp"


namespace SDK
{

// Function BP_PlayerGauge.BP_PlayerGauge_C.ExecuteUbergraph_BP_PlayerGauge
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::ExecuteUbergraph_BP_PlayerGauge(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "ExecuteUbergraph_BP_PlayerGauge");

	Params::BP_PlayerGauge_C_ExecuteUbergraph_BP_PlayerGauge Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.EventOnPauseTimer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPause                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::EventOnPauseTimer(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "EventOnPauseTimer");

	Params::BP_PlayerGauge_C_EventOnPauseTimer Parms{};

	Parms.bPause = bPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.UnbindOverkillBonus
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::UnbindOverkillBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "UnbindOverkillBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.BindOverkillBonusTick
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::BindOverkillBonusTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "BindOverkillBonusTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "ReceiveTick");

	Params::BP_PlayerGauge_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerGauge_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.AddPsychicGauge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::AddPsychicGauge(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "AddPsychicGauge");

	Params::BP_PlayerGauge_C_AddPsychicGauge Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetPsychicGaugeMax
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::SetPsychicGaugeMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetPsychicGaugeMax");

	Params::BP_PlayerGauge_C_SetPsychicGaugeMax Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.AutoRecoveryPsychicGauge
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::AutoRecoveryPsychicGauge(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "AutoRecoveryPsychicGauge");

	Params::BP_PlayerGauge_C_AutoRecoveryPsychicGauge Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.AddPsychicGaugeEnemyDestroy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBrainCrash                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::AddPsychicGaugeEnemyDestroy(bool bBrainCrash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "AddPsychicGaugeEnemyDestroy");

	Params::BP_PlayerGauge_C_AddPsychicGaugeEnemyDestroy Parms{};

	Parms.bBrainCrash = bBrainCrash;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.UpdatePsychicGaugeHUD
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUse                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   UseParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSucess                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::UpdatePsychicGaugeHUD(bool bUse, float UseParam, bool* bSucess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "UpdatePsychicGaugeHUD");

	Params::BP_PlayerGauge_C_UpdatePsychicGaugeHUD Parms{};

	Parms.bUse = bUse;
	Parms.UseParam = UseParam;

	UObject::ProcessEvent(Func, &Parms);

	if (bSucess != nullptr)
		*bSucess = Parms.bSucess;
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.InitPsychicGaugeMax
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::InitPsychicGaugeMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "InitPsychicGaugeMax");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.AddBattleBonusRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleBonusAddType                     InType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::AddBattleBonusRate(EBattleBonusAddType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "AddBattleBonusRate");

	Params::BP_PlayerGauge_C_AddBattleBonusRate Parms{};

	Parms.InType = InType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetBattleBonusModeDrive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::SetBattleBonusModeDrive(bool bON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetBattleBonusModeDrive");

	Params::BP_PlayerGauge_C_SetBattleBonusModeDrive Parms{};

	Parms.bON = bON;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetBattleBonusModeBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::SetBattleBonusModeBrainField(bool bON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetBattleBonusModeBrainField");

	Params::BP_PlayerGauge_C_SetBattleBonusModeBrainField Parms{};

	Parms.bON = bON;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.ResetBattleBonusRate
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::ResetBattleBonusRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "ResetBattleBonusRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.InitializeBattleBonusData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::InitializeBattleBonusData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "InitializeBattleBonusData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.EndBattleBonus
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::EndBattleBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "EndBattleBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetPsychicGaugeEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPsychicGaugeEffect                     Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSet                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::SetPsychicGaugeEffect(EPsychicGaugeEffect Effect, class FName ClaimantName, bool bSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetPsychicGaugeEffect");

	Params::BP_PlayerGauge_C_SetPsychicGaugeEffect Parms{};

	Parms.Effect = Effect;
	Parms.ClaimantName = ClaimantName;
	Parms.bSet = bSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.UpdatePsychicGaugeEffect
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::UpdatePsychicGaugeEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "UpdatePsychicGaugeEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.ResetPsychicGauge
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::ResetPsychicGauge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "ResetPsychicGauge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetPsychicGaugeRecoveryRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InRate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::SetPsychicGaugeRecoveryRate(float InRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetPsychicGaugeRecoveryRate");

	Params::BP_PlayerGauge_C_SetPsychicGaugeRecoveryRate Parms{};

	Parms.InRate = InRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.ResetPsychicGaugeRecoveryRate
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerGauge_C::ResetPsychicGaugeRecoveryRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "ResetPsychicGaugeRecoveryRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetEnableBattleBonus
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::SetEnableBattleBonus(bool bEnable, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetEnableBattleBonus");

	Params::BP_PlayerGauge_C_SetEnableBattleBonus Parms{};

	Parms.bEnable = bEnable;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.TickBattleBonusOverkillBonus
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::TickBattleBonusOverkillBonus(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "TickBattleBonusOverkillBonus");

	Params::BP_PlayerGauge_C_TickBattleBonusOverkillBonus Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.SetTutorialPsychicGauge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTutorial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::SetTutorialPsychicGauge(bool bTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "SetTutorialPsychicGauge");

	Params::BP_PlayerGauge_C_SetTutorialPsychicGauge Parms{};

	Parms.bTutorial = bTutorial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.GetPsychicGauge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::GetPsychicGauge(float* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "GetPsychicGauge");

	Params::BP_PlayerGauge_C_GetPsychicGauge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.GetPsychicGaugeMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::GetPsychicGaugeMax(float* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "GetPsychicGaugeMax");

	Params::BP_PlayerGauge_C_GetPsychicGaugeMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.GetBattleBonusRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::GetBattleBonusRate(float* Rate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "GetBattleBonusRate");

	Params::BP_PlayerGauge_C_GetBattleBonusRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.GetBattleBonusMaxRate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerGauge_C::GetBattleBonusMaxRate(float* Rate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "GetBattleBonusMaxRate");

	Params::BP_PlayerGauge_C_GetBattleBonusMaxRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_PlayerGauge.BP_PlayerGauge_C.IsEnableBattleBonus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerGauge_C::IsEnableBattleBonus(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerGauge_C", "IsEnableBattleBonus");

	Params::BP_PlayerGauge_C_IsEnableBattleBonus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}

}

