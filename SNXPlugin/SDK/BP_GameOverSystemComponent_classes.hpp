#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameOverSystemComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameOverSystemComponent.BP_GameOverSystemComponent_C
// 0x0210 (0x02D0 - 0x00C0)
class UBP_GameOverSystemComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          GameOverSequenceAsset0100;                         // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          GameOverSequenceAsset0200;                         // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          RecoverSequenceAsset0100;                          // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     PPToneMono;                                        // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          RecoverSequenceAsset0200;                          // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      PPToneMonoAsset;                                   // 0x0178(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class ULevelSequence*                         GameOverSequence;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         RecoverSequence;                                   // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayingGameOver;                                   // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingRecover;                                    // 0x01B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E91[0x6];                                     // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      RecoverPlayer;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   RecoverNPC;                                        // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoverCameraRate;                                 // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E92[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SystemRootActor;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetupStartCutEvent;                                // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E93[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RecoverPlayerTransform;                            // 0x01E0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             RecoverNPCTransform;                               // 0x0210(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             RecoverRelativeTransformPlayer;                    // 0x0240(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             RecoverRelativeTransformNPC;                       // 0x0270(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerID                                     LoadPlayerID;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E94[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SeamlessCameraRoot_C*               SeamlessCamera;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    SequqncerEndFrame;                                 // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitBrainField;                                    // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E95[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameOverCameraTopViewRoot_C*        TopViewRoot;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameOverSystemComponent(int32 EntryPoint);
	void PrivateBrainFieldOutRestart();
	void EventOnBrainFieldClose();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void StartDeadGameOver();
	void PrivateFinishGameOver();
	void EventStartUIGameOver();
	void EventBrainTalkDeadBlur();
	void EventBrainTalkDead();
	void EventPlayerAnimationDead();
	void EventChangeDeadCamera();
	void PrivateSetupPostProcess(float Rate);
	void EventBrainFieldOut();
	void EventRecoverEffectNPC();
	void EventRecoverEffectPlayer();
	void IsPlayingDeadGameOver(bool* IsPlaying);
	void PrivateLoadAsset();
	void StartDeadRecover(class ARSBattleCharacter_C* RecoverCharacter);
	void PrivateStartSequence(class ULevelSequence* InSequencer);
	void IsPlayingAny(bool* IsPlaying);
	void EventWaitStandupNPC();
	void EventPlayerStandup();
	void PrivateBrainFieldSwitchBG(bool IsBrainField);
	void EventRecoverCamera();
	void PrivateSetupRecoverCamera();
	void EventEraseHUD();
	void PrivateEraseHUD();
	void UpdateRecoverCamera();
	void EventStartCutEvent();
	void UpdateRecover();
	void PrivateCalcRecoverStartTransform(class ARSBattlePlayer_C* Player, class ARSBattleCharacter_C* NPC, struct FTransform* FinishTransform);
	void PrivateCalcRecoverFinishTransform(const struct FTransform& BaseTransform, const struct FTransform& RestoreRelativeTransform, class ARSBattleCharacter_C* Character, struct FTransform* FinishTransform);
	void EventCameraTopView();
	void ReloadPlayer(EPlayerID PlayerId);
	void EventBrainTalkRevival();
	void EventRevivePlayer();
	void PrivateBrainFieldClose();
	void PrivatePlayEnpcBattleVoice();

	void IsPlayingDeadRecover(bool* IsPlaying) const;
	void PrivateGetGameOverBrainTalkID(class FName* BrainTalkID) const;
	void PrivateGetRecoverBrainTalkID(class FName* BrainTalkID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameOverSystemComponent_C">();
	}
	static class UBP_GameOverSystemComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameOverSystemComponent_C>();
	}
};
static_assert(alignof(UBP_GameOverSystemComponent_C) == 0x000010, "Wrong alignment on UBP_GameOverSystemComponent_C");
static_assert(sizeof(UBP_GameOverSystemComponent_C) == 0x0002D0, "Wrong size on UBP_GameOverSystemComponent_C");
static_assert(offsetof(UBP_GameOverSystemComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_GameOverSystemComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, Sequencer) == 0x0000C8, "Member 'UBP_GameOverSystemComponent_C::Sequencer' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, GameOverSequenceAsset0100) == 0x0000D0, "Member 'UBP_GameOverSystemComponent_C::GameOverSequenceAsset0100' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, GameOverSequenceAsset0200) == 0x0000F8, "Member 'UBP_GameOverSystemComponent_C::GameOverSequenceAsset0200' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverSequenceAsset0100) == 0x000120, "Member 'UBP_GameOverSystemComponent_C::RecoverSequenceAsset0100' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, PPToneMono) == 0x000148, "Member 'UBP_GameOverSystemComponent_C::PPToneMono' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverSequenceAsset0200) == 0x000150, "Member 'UBP_GameOverSystemComponent_C::RecoverSequenceAsset0200' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, PPToneMonoAsset) == 0x000178, "Member 'UBP_GameOverSystemComponent_C::PPToneMonoAsset' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, GameOverSequence) == 0x0001A0, "Member 'UBP_GameOverSystemComponent_C::GameOverSequence' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverSequence) == 0x0001A8, "Member 'UBP_GameOverSystemComponent_C::RecoverSequence' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, PlayingGameOver) == 0x0001B0, "Member 'UBP_GameOverSystemComponent_C::PlayingGameOver' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, PlayingRecover) == 0x0001B1, "Member 'UBP_GameOverSystemComponent_C::PlayingRecover' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverPlayer) == 0x0001B8, "Member 'UBP_GameOverSystemComponent_C::RecoverPlayer' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverNPC) == 0x0001C0, "Member 'UBP_GameOverSystemComponent_C::RecoverNPC' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverCameraRate) == 0x0001C8, "Member 'UBP_GameOverSystemComponent_C::RecoverCameraRate' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, SystemRootActor) == 0x0001D0, "Member 'UBP_GameOverSystemComponent_C::SystemRootActor' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, SetupStartCutEvent) == 0x0001D8, "Member 'UBP_GameOverSystemComponent_C::SetupStartCutEvent' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverPlayerTransform) == 0x0001E0, "Member 'UBP_GameOverSystemComponent_C::RecoverPlayerTransform' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverNPCTransform) == 0x000210, "Member 'UBP_GameOverSystemComponent_C::RecoverNPCTransform' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverRelativeTransformPlayer) == 0x000240, "Member 'UBP_GameOverSystemComponent_C::RecoverRelativeTransformPlayer' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, RecoverRelativeTransformNPC) == 0x000270, "Member 'UBP_GameOverSystemComponent_C::RecoverRelativeTransformNPC' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, LoadPlayerID) == 0x0002A0, "Member 'UBP_GameOverSystemComponent_C::LoadPlayerID' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, SeamlessCamera) == 0x0002A8, "Member 'UBP_GameOverSystemComponent_C::SeamlessCamera' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, SequqncerEndFrame) == 0x0002B0, "Member 'UBP_GameOverSystemComponent_C::SequqncerEndFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, WaitBrainField) == 0x0002C0, "Member 'UBP_GameOverSystemComponent_C::WaitBrainField' has a wrong offset!");
static_assert(offsetof(UBP_GameOverSystemComponent_C, TopViewRoot) == 0x0002C8, "Member 'UBP_GameOverSystemComponent_C::TopViewRoot' has a wrong offset!");

}

