#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerInterface

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EBattleBonusAddType_structs.hpp"
#include "EParamAfterEventAction_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "ECharaDeadType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_PlayerInterface.BPI_PlayerInterface_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_PlayerInterface_C final : public IInterface
{
public:
	void SetSASCodeVisible(bool bVisible, bool* Dummy);
	void EnableRigidBody(bool bEnable, float LerpTime, bool* bDummy);
	void SetPlayerActionSAS(bool* bDummy);
	void SetPlayerBattle(bool bBattle, bool* bDummy);
	void SetBrainCodeVisible(bool bVisible, bool bDrive, bool* bDummy);
	void SetSASCodeParam(float Param, bool* bDummy);
	void StartSASCode(E_SASKind SasKind, bool* bDummy);
	void GetSASCodeActorList(TArray<class ABP_CableBase_C*>* CodeList);
	void GetBrainCodeActorList(TArray<class ABP_CableBase_C*>* CodeList);
	void GetBrainFieldTimeRate(float* Rate);
	void IsOpenBrainField(bool* bOpen);
	void PlaySASCodeDirection(ERSCableGravityType Type, bool* bDummy);
	void StopSASCodeDirection(ERSCableGravityType Type, bool* bDummy);
	void ResetSpecialEffects(bool* bDummy);
	void SetPlayerActionAfterEvent(EParamAfterEventAction Param, bool* bDummy);
	void GetSAS_Kind(E_SASButton Button, E_SASKind* Kind);
	void PlayerCameraReset(float InterpSec, bool* Dummy);
	void ForceWarp_Interface(const struct FTransform& Transform, float IdlingSeconds, bool* Dummy);
	void SetPsychicObjectEnableRange(bool Is_Brain_Field_in, float* Range);
	void SetCanAnimOverrideSASColor(bool Enable, bool* Dummy);
	void GetCanAnimOverrideSASColor(bool* Enabled);
	void SetStealth(bool Flag_in);
	void AddPsychicFlyObj(class ABP_PsychicObjectBasic_C* FlyObj, bool* Dummy);
	void GetPsychicFlyObj(TArray<class AActor*>* FlyObj);
	void AddHitPsychicFlyObj(class ABP_PsychicObjectBasic_C* HitFlyObj, bool* IsAdd);
	void IsUseFog(bool* IsFog);
	void IsEnpcBarrier(bool* IsBarrier);
	void CanBattleAction(EPlayerAIBattleThinkType ThinkType, bool* CanAction);
	void GetENpcKind(ENpcKind* ENpcKind);
	void IsDodgeTargetRot(bool* Param_IsDodgeTargetRot);
	void GetDodgeScale(float* DodgeScale);
	void IsSpecialDown(bool* IsSpDown, float* SpDownWince);
	void GetSpecialDownTimer(float* SpDownTimer);
	void ChangeENpcKind(ENpcKind ENpcKind, bool* Dummy);
	void GetSkillCoreDropProbability(float* Probability);
	void CanSpecialMoveTrigger(bool* CanDo);
	void ReturnMetamorphosis(const struct FVector& Location, const struct FRotator& Rotation, class ARSBattlePlayer_C* SpecifyPlayer, bool* Dummy);
	void OnAttackedEnemyDead(ECharaDeadType DeadType, bool* Dummy);
	void CanEnpcOpenBrainField(bool* CanDo);
	void EnpcBarrierHitNotify(const struct FHCHitResult& Result, bool* Dammy);
	void CreateRedCode(bool* NewParam);
	void DestroyRedCode(bool* NewParam);
	void CheckStickInputTurn(bool* bTurn);
	void OnAnimNotifyInputPsychic();
	void GetEnableRigidBody(bool* Enable);
	void SetPlayerInputRestriction(EPlayerInputRestrictionType Type, bool bRestriction, bool* bDummy);
	void IsJumpAreaAble(bool* bAble);
	void IsEnableInputPsychicCombo(bool* bEnable);
	void SetPsychicEmissionInterface(bool bON, class FName ClaimantName);
	void IsIntense(bool* bIntense);
	void IsEnableSeeThrough(bool* bEnable);
	void SetTalkLookAtTurn(const struct FVector& LookAtLocation, bool* bDummy);
	void EndTalkLookAtTurn(bool* bDummy);
	void EnableUseSeeThrough(bool* bEnable);
	bool CheckTargetableCharacterENPC(class ARSCharacterBase* Chara);
	void RequestBrainFieldHelp(bool* bDummy);
	void SetNpcBrainFieldDrive(bool bDrive, bool* bDummy);
	void OnAnimNotify_EnpcSAS(E_SASKind Kind, bool* bDummy);
	void BeginEnpcSAS(E_SASKind Kind, bool* bDummy);
	void CheckAssassinAttack(EAssassinAttackHit Type, class ARSBattleCharacter_C* DamagedActor, bool* bSuccess, bool* bArmorBreak);
	void ResetCollisionOverlap(bool* bDummy);
	void PlayBrainFieldBattleTalk(bool* bDummy);
	void IsDriveMode(bool* bDrive);
	void EventInputRestrict(bool bRestrict, bool* bDummy);
	void EventInputRestrictAction(bool bRestrict, bool* bDummy);
	void SuspendPlayer(bool* bSuspend);
	void ResumePlayer(bool* bResume);
	void FinishMetamorphosisLastAttack(bool* Dummy);
	void IsEnableCreateCopy(bool* Enable);
	void OnStartReactionChance(bool* Dummy);
	void OnStartEnpcDrive(bool* Dummy);
	void GetReactionChanceEndAction(EPlayerAIBattleThinkType* EndAction);
	void SelectReactionChanceEndAction(const TArray<EPlayerAIBattleThinkType>& InEndAction, EPlayerAIBattleThinkType* OutEndAction);
	void SetNpcWarpDither(bool* bDummy);
	void IsExecNpcRevive(bool* bExec);
	void IsMainPlayer(bool* bMainPlayer);
	void NotifyKillEnemy(class ARSBattleCharacter_C* KillActor, bool* bDummy);
	void DisablePlayerFootIK(bool bDisable, class FName ClaimantName, float BlendTime, bool* bDummy);
	void ElevatorSetting(bool bInElevator, bool* bDummy);
	void IsEnableDrive(bool* Enable);
	void IsEnableRegistSAS(bool* Enable);
	void IsActiveEnpcSasFire(bool* IsActive);
	void IsActiveEnpcSasElectric(bool* IsActive);
	void IsActiveEnpcSasTeleport(bool* IsActive);
	void SetDisableActionBoringIdle(bool bDisable, bool* bDummy);
	void UpdatePlayerActionAfterEvent(EParamAfterEventAction EventAction, bool* Return);
	void EnablePlaySpTrigger(bool bEnable, bool* Return_);
	void IsEnablePlaySpTrigger();
	void SetEnpcSasStealthStart(bool* Dummy);
	void SetEnpcSasStealthEnd(bool* Dummy);
	void BattleSettingEm1500(bool bBattle, bool* bDummy);
	void SetAttackHitStop(class AActor* DamagedActor, const struct FHCHitResult& HitResult, bool* bDummy);
	void BeforeCutSceneEventManagerStart(bool* bDummy);
	void CheckBattleStartTimer(bool* Enable);
	void StoreLockTargetInterface(bool* bDummy);
	void RestoreLockTargetInterface(bool* bDummy);
	void ProcEndBrainCrash(int32 CrashTargetNum, bool* bDummy);
	void AddBattleBonusInterface(EBattleBonusAddType Type, bool* bDummy);
	void IsEnableDriveAttack(bool* Enable);
	void SetDriveAttacked(bool* Dummy);
	void SetAttackCollisionDelayTime(const TArray<float>& AttackDelayTime, bool* Dummy);
	void DebugNextBattleThinkLog(const struct FFPlayerAIBattleThinkTransitionData& InTransitionData, bool* Return);
	void SASCancelEffectAndSEInterface(bool bEffect, bool bSE, bool* bDummy);
	void IsOverwriteAttackAutoAimSpeed(bool* bOverwrite, float* Speed);
	void GetAllSasCodeList(TArray<class ABP_CableBase_C*>* NormalCode);
	void IsNexusDriveSeeThroughBestJustDodge(bool* bBestJustDodge);
	void SetPlayerPhysicsIdlingInterface(float IdlingSeconds, bool bRefreshSkin, bool* bDummy);

	void GetPlayerIndex(int32* Param_Index) const;
	void GetPlayerWeaponList(EGetPlayerWeaponType Type, TArray<class ABP_WeaponBase_C*>* WeaponList) const;
	void IsEnemyPlayer(bool* bEnemyPlayer) const;
	void IsForceWarpAble_Interface(bool* bWarpAble) const;
	void GetSkillParameter(EPlayerSkill Skill, bool* bLearned, float* Parameter) const;
	void IsPlayerInputRestriction(EPlayerInputRestrictionType Type, bool* bRestriction) const;
	void GetEnpcComp(class UBP_ENpcComponent_C** ReturnComp) const;
	void IsAnimationEndTalkTurn(bool* bAnimation) const;
	void GetTalkLookAtLocation(bool* bTalkLookAt, struct FVector* Location) const;
	void IsCameraControl(bool* bControl) const;
	void IsEnpcSASLinkAble(E_SASKind Kind, bool* bOK) const;
	void IsDying(bool* bDying) const;
	void IsAutoTakenItem(bool* bAuto) const;
	void GetBrainCrashStartTransform(struct FTransform* Transform) const;
	void IsExecTalkEvent(bool* bTalk) const;
	void IsUsingItem(bool* bUsing, EConsumeItemID* ItemId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_PlayerInterface_C">();
	}
	static class IBPI_PlayerInterface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_PlayerInterface_C>();
	}
};
static_assert(alignof(IBPI_PlayerInterface_C) == 0x000008, "Wrong alignment on IBPI_PlayerInterface_C");
static_assert(sizeof(IBPI_PlayerInterface_C) == 0x000028, "Wrong size on IBPI_PlayerInterface_C");

}

