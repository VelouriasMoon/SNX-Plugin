#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponManageComponent

#include "Basic.hpp"

#include "BP_WeaponManageComponent_classes.hpp"
#include "BP_WeaponManageComponent_parameters.hpp"


namespace SDK
{

// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ExecuteUbergraph_BP_WeaponManageComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ExecuteUbergraph_BP_WeaponManageComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ExecuteUbergraph_BP_WeaponManageComponent");

	Params::BP_WeaponManageComponent_C_ExecuteUbergraph_BP_WeaponManageComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ReceiveEndPlay");

	Params::BP_WeaponManageComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ReceiveTick");

	Params::BP_WeaponManageComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.CreateWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WeaponClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMainWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::CreateWeapon(class UClass* WeaponClass, class FName SocketName, bool bMainWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "CreateWeapon");

	Params::BP_WeaponManageComponent_C_CreateWeapon Parms{};

	Parms.WeaponClass = WeaponClass;
	Parms.SocketName = SocketName;
	Parms.bMainWeapon = bMainWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetBattleEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetBattleEffect(bool bBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetBattleEffect");

	Params::BP_WeaponManageComponent_C_SetBattleEffect Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetWeaponVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisibility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWithSubWeapon                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetWeaponVisibility(bool bVisibility, bool bBattle, bool bWithSubWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetWeaponVisibility");

	Params::BP_WeaponManageComponent_C_SetWeaponVisibility Parms{};

	Parms.bVisibility = bVisibility;
	Parms.bBattle = bBattle;
	Parms.bWithSubWeapon = bWithSubWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetMaterialScalarParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetMaterialScalarParameter(class FName ParamName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetMaterialScalarParameter");

	Params::BP_WeaponManageComponent_C_SetMaterialScalarParameter Parms{};

	Parms.ParamName = ParamName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetMaterialScalarArrayParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetMaterialScalarArrayParameter");

	Params::BP_WeaponManageComponent_C_SetMaterialScalarArrayParameter Parms{};

	Parms.ParamName = std::move(ParamName);
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);

	ParamName = std::move(Parms.ParamName);
	Value = std::move(Parms.Value);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetMaterialVectorParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetMaterialVectorParameter(class FName ParamName, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetMaterialVectorParameter");

	Params::BP_WeaponManageComponent_C_SetMaterialVectorParameter Parms{};

	Parms.ParamName = ParamName;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetShadowEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetShadowEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetShadowEnable");

	Params::BP_WeaponManageComponent_C_SetShadowEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetWeaponHidden
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHidden                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetWeaponHidden(bool bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetWeaponHidden");

	Params::BP_WeaponManageComponent_C_SetWeaponHidden Parms{};

	Parms.bHidden = bHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.AttachWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForceBattle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::AttachWeapon(bool bBattle, bool ForceBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "AttachWeapon");

	Params::BP_WeaponManageComponent_C_AttachWeapon Parms{};

	Parms.bBattle = bBattle;
	Parms.ForceBattle = ForceBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Param_OwnerPlayer                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMeshComponent*                   Param_AttachMesh                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_bCopy                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::Initialize(class ARSBattlePlayer_C* Param_OwnerPlayer, class UMeshComponent* Param_AttachMesh, bool Param_bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "Initialize");

	Params::BP_WeaponManageComponent_C_Initialize Parms{};

	Parms.Param_OwnerPlayer = Param_OwnerPlayer;
	Parms.Param_AttachMesh = Param_AttachMesh;
	Parms.Param_bCopy = Param_bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetLoopAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetLoopAnim(bool bBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetLoopAnim");

	Params::BP_WeaponManageComponent_C_SetLoopAnim Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetTransAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetTransAnim(bool bBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetTransAnim");

	Params::BP_WeaponManageComponent_C_SetTransAnim Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetBattleEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FlagIn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LerpTimeIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetBattleEmission(bool ForceIn, bool FlagIn, float LerpTimeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetBattleEmission");

	Params::BP_WeaponManageComponent_C_SetBattleEmission Parms{};

	Parms.ForceIn = ForceIn;
	Parms.FlagIn = FlagIn;
	Parms.LerpTimeIn = LerpTimeIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetMaterialAlphaPsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetMaterialAlphaPsychicEmission(float Alpha, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetMaterialAlphaPsychicEmission");

	Params::BP_WeaponManageComponent_C_SetMaterialAlphaPsychicEmission Parms{};

	Parms.Alpha = Alpha;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ResetMaterialAlphaPsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ResetMaterialAlphaPsychicEmission(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ResetMaterialAlphaPsychicEmission");

	Params::BP_WeaponManageComponent_C_ResetMaterialAlphaPsychicEmission Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetMaterialColorPsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   G                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetMaterialColorPsychicEmission(float R, float G, float B, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetMaterialColorPsychicEmission");

	Params::BP_WeaponManageComponent_C_SetMaterialColorPsychicEmission Parms{};

	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ResetMaterialColorPsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ResetMaterialColorPsychicEmission(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ResetMaterialColorPsychicEmission");

	Params::BP_WeaponManageComponent_C_ResetMaterialColorPsychicEmission Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.CreateThrowWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WeaponClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::CreateThrowWeapon(class UClass* WeaponClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "CreateThrowWeapon");

	Params::BP_WeaponManageComponent_C_CreateThrowWeapon Parms{};

	Parms.WeaponClass = WeaponClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.DestroyWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_WeaponManageComponent_C::DestroyWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "DestroyWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetWeaponVisibilityByIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bVisibility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetWeaponVisibilityByIndex(int32 Param_Index, bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetWeaponVisibilityByIndex");

	Params::BP_WeaponManageComponent_C_SetWeaponVisibilityByIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.bVisibility = bVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetSeparateVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSeparate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::SetSeparateVisibility(bool bSeparate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetSeparateVisibility");

	Params::BP_WeaponManageComponent_C_SetSeparateVisibility Parms{};

	Parms.bSeparate = bSeparate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ChangeWeaponScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ChangeWeaponScale(const struct FVector& Scale, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ChangeWeaponScale");

	Params::BP_WeaponManageComponent_C_ChangeWeaponScale Parms{};

	Parms.Scale = std::move(Scale);
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ResetWeaponScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ResetWeaponScale(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ResetWeaponScale");

	Params::BP_WeaponManageComponent_C_ResetWeaponScale Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.UpdateWeaponScale
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_WeaponManageComponent_C::UpdateWeaponScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "UpdateWeaponScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SwitchMaterial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMaterialSwitchCache             MaterialCache                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     ExcludeSlots                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UMaterialInterface*               NewMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SwitchMaterial(struct FMaterialSwitchCache& MaterialCache, TArray<class FName>& ExcludeSlots, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SwitchMaterial");

	Params::BP_WeaponManageComponent_C_SwitchMaterial Parms{};

	Parms.MaterialCache = std::move(MaterialCache);
	Parms.ExcludeSlots = std::move(ExcludeSlots);
	Parms.NewMaterial = NewMaterial;

	UObject::ProcessEvent(Func, &Parms);

	MaterialCache = std::move(Parms.MaterialCache);
	ExcludeSlots = std::move(Parms.ExcludeSlots);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.SetMaterialVectorArrayParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FLinearColor>             Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::SetMaterialVectorArrayParameter(TArray<class FName>& ParamName, TArray<struct FLinearColor>& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "SetMaterialVectorArrayParameter");

	Params::BP_WeaponManageComponent_C_SetMaterialVectorArrayParameter Parms{};

	Parms.ParamName = std::move(ParamName);
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);

	ParamName = std::move(Parms.ParamName);
	Color = std::move(Parms.Color);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.ResetupSwitchMaterial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMaterialSwitchCache             MaterialCache                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     ExcludeSlots                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UMaterialInterface*               NewMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::ResetupSwitchMaterial(struct FMaterialSwitchCache& MaterialCache, TArray<class FName>& ExcludeSlots, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "ResetupSwitchMaterial");

	Params::BP_WeaponManageComponent_C_ResetupSwitchMaterial Parms{};

	Parms.MaterialCache = std::move(MaterialCache);
	Parms.ExcludeSlots = std::move(ExcludeSlots);
	Parms.NewMaterial = NewMaterial;

	UObject::ProcessEvent(Func, &Parms);

	MaterialCache = std::move(Parms.MaterialCache);
	ExcludeSlots = std::move(Parms.ExcludeSlots);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.RestoreSwtichMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMaterialSwitchCache             MaterialCache                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ClearCache                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_WeaponManageComponent_C::RestoreSwtichMaterial(struct FMaterialSwitchCache& MaterialCache, bool ClearCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "RestoreSwtichMaterial");

	Params::BP_WeaponManageComponent_C_RestoreSwtichMaterial Parms{};

	Parms.MaterialCache = std::move(MaterialCache);
	Parms.ClearCache = ClearCache;

	UObject::ProcessEvent(Func, &Parms);

	MaterialCache = std::move(Parms.MaterialCache);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.CompleteRestoreSwitchMaterial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WeaponManageComponent_C::CompleteRestoreSwitchMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "CompleteRestoreSwitchMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.GetWeaponList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class ABP_WeaponBase_C*>         Param_WeaponList                                       (Parm, OutParm, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::GetWeaponList(TArray<class ABP_WeaponBase_C*>* Param_WeaponList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "GetWeaponList");

	Params::BP_WeaponManageComponent_C_GetWeaponList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_WeaponList != nullptr)
		*Param_WeaponList = std::move(Parms.Param_WeaponList);
}


// Function BP_WeaponManageComponent.BP_WeaponManageComponent_C.GetThrowWeaponList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class ABP_WeaponBase_C*>         Param_ThrowWeaponList                                  (Parm, OutParm, HasGetValueTypeHash)

void UBP_WeaponManageComponent_C::GetThrowWeaponList(TArray<class ABP_WeaponBase_C*>* Param_ThrowWeaponList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponManageComponent_C", "GetThrowWeaponList");

	Params::BP_WeaponManageComponent_C_GetThrowWeaponList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ThrowWeaponList != nullptr)
		*Param_ThrowWeaponList = std::move(Parms.Param_ThrowWeaponList);
}

}

