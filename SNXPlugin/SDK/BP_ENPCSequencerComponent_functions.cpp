#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ENPCSequencerComponent

#include "Basic.hpp"

#include "BP_ENPCSequencerComponent_classes.hpp"
#include "BP_ENPCSequencerComponent_parameters.hpp"


namespace SDK
{

// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.ExecuteUbergraph_BP_ENPCSequencerComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ENPCSequencerComponent_C::ExecuteUbergraph_BP_ENPCSequencerComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "ExecuteUbergraph_BP_ENPCSequencerComponent");

	Params::BP_ENPCSequencerComponent_C_ExecuteUbergraph_BP_ENPCSequencerComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.PauseDelayRestart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelayRestartTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ENPCSequencerComponent_C::PauseDelayRestart(float DelayRestartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "PauseDelayRestart");

	Params::BP_ENPCSequencerComponent_C_PauseDelayRestart Parms{};

	Parms.DelayRestartTime = DelayRestartTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ENPCSequencerComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "ReceiveTick");

	Params::BP_ENPCSequencerComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_ENPCSequencerComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.EndSequencer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_SequencerIndex                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::EndSequencer(int32 Param_SequencerIndex, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "EndSequencer");

	Params::BP_ENPCSequencerComponent_C_EndSequencer Parms{};

	Parms.Param_SequencerIndex = Param_SequencerIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.Update
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::Update(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "Update");

	Params::BP_ENPCSequencerComponent_C_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.Initialize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::Initialize(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "Initialize");

	Params::BP_ENPCSequencerComponent_C_Initialize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.StartSequnecer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_in                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::StartSequnecer(int32 Index_in, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "StartSequnecer");

	Params::BP_ENPCSequencerComponent_C_StartSequnecer Parms{};

	Parms.Index_in = Index_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.PlaySequencer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::PlaySequencer(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "PlaySequencer");

	Params::BP_ENPCSequencerComponent_C_PlaySequencer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.BindActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ObjName                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class AActor*                           Param_BindActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::BindActor(const class FText& ObjName, class AActor* Param_BindActor, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "BindActor");

	Params::BP_ENPCSequencerComponent_C_BindActor Parms{};

	Parms.ObjName = std::move(ObjName);
	Parms.Param_BindActor = Param_BindActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.CalcActorTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARSBattleCharacter_C*             RSBattleCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       MeshRefTransform                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       CalcTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::CalcActorTransform(class ARSBattleCharacter_C* RSBattleCharacter, const struct FTransform& MeshRefTransform, struct FTransform* CalcTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "CalcActorTransform");

	Params::BP_ENPCSequencerComponent_C_CalcActorTransform Parms{};

	Parms.RSBattleCharacter = RSBattleCharacter;
	Parms.MeshRefTransform = std::move(MeshRefTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (CalcTransform != nullptr)
		*CalcTransform = std::move(Parms.CalcTransform);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.BindCineCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::BindCineCamera(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "BindCineCamera");

	Params::BP_ENPCSequencerComponent_C_BindCineCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.SetPartyStoreTransform
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ENPCSequencerComponent_C::SetPartyStoreTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "SetPartyStoreTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.OnWaitResult
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ENPCSequencerComponent_C::OnWaitResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "OnWaitResult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.CharacterDynamicEventEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 RSCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::CharacterDynamicEventEnd(class ARSCharacterBase* RSCharacter, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "CharacterDynamicEventEnd");

	Params::BP_ENPCSequencerComponent_C_CharacterDynamicEventEnd Parms{};

	Parms.RSCharacter = RSCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.PlayerDynamicEventStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                RSPlayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::PlayerDynamicEventStart(class ARSBattlePlayer_C* RSPlayer, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "PlayerDynamicEventStart");

	Params::BP_ENPCSequencerComponent_C_PlayerDynamicEventStart Parms{};

	Parms.RSPlayer = RSPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.SetEnemyStoreTransform
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ENPCSequencerComponent_C::SetEnemyStoreTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "SetEnemyStoreTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.Finalize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ENPCSequencerComponent_C::Finalize(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "Finalize");

	Params::BP_ENPCSequencerComponent_C_Finalize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.BindingSetupCode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ENPCSequencerComponent_C::BindingSetupCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "BindingSetupCode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C.SwappingCode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ENPCSequencerComponent_C::SwappingCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ENPCSequencerComponent_C", "SwappingCode");

	UObject::ProcessEvent(Func, nullptr);
}

}

