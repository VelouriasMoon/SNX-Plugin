#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TaskBase

#include "Basic.hpp"

#include "TaskBase_classes.hpp"
#include "TaskBase_parameters.hpp"


namespace SDK
{

// Function TaskBase.TaskBase_C.ExecuteUbergraph_TaskBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::ExecuteUbergraph_TaskBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "ExecuteUbergraph_TaskBase");

	Params::TaskBase_C_ExecuteUbergraph_TaskBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TaskBase.TaskBase_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "ReceiveAbortAI");

	Params::TaskBase_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TaskBase.TaskBase_C.GetDirectionVectorXY
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::GetDirectionVectorXY(const struct FVector& From, const struct FVector& To, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "GetDirectionVectorXY");

	Params::TaskBase_C_GetDirectionVectorXY Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function TaskBase.TaskBase_C.StopMoveAndAbort
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::StopMoveAndAbort(class AController* OwnerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "StopMoveAndAbort");

	Params::TaskBase_C_StopMoveAndAbort Parms{};

	Parms.OwnerController = OwnerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TaskBase.TaskBase_C.GetDirectionByMovementMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            FromControlledPawn                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ToTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::GetDirectionByMovementMode(class APawn* FromControlledPawn, class AActor* ToTarget, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "GetDirectionByMovementMode");

	Params::TaskBase_C_GetDirectionByMovementMode Parms{};

	Parms.FromControlledPawn = FromControlledPawn;
	Parms.ToTarget = ToTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function TaskBase.TaskBase_C.GetRandomReachablePointFromTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ANavigationData*                  NavData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReachablePoint                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValidPoint                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTaskBase_C::GetRandomReachablePointFromTarget(class AActor* TargetActor, float Radius, class ANavigationData* NavData, struct FVector* ReachablePoint, bool* IsValidPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "GetRandomReachablePointFromTarget");

	Params::TaskBase_C_GetRandomReachablePointFromTarget Parms{};

	Parms.TargetActor = TargetActor;
	Parms.Radius = Radius;
	Parms.NavData = NavData;

	UObject::ProcessEvent(Func, &Parms);

	if (ReachablePoint != nullptr)
		*ReachablePoint = std::move(Parms.ReachablePoint);

	if (IsValidPoint != nullptr)
		*IsValidPoint = Parms.IsValidPoint;
}


// Function TaskBase.TaskBase_C.ConvertDistanceAToB
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ConvertedDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::ConvertDistanceAToB(class AActor* ActorA, class AActor* ActorB, float Distance, float* ConvertedDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "ConvertDistanceAToB");

	Params::TaskBase_C_ConvertDistanceAToB Parms{};

	Parms.ActorA = ActorA;
	Parms.ActorB = ActorB;
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);

	if (ConvertedDistance != nullptr)
		*ConvertedDistance = Parms.ConvertedDistance;
}


// Function TaskBase.TaskBase_C.DebugPrintStringWithMyName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UTaskBase_C::DebugPrintStringWithMyName(class APawn* ControlledPawn, const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "DebugPrintStringWithMyName");

	Params::TaskBase_C_DebugPrintStringWithMyName Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TaskBase.TaskBase_C.TurnToTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::TurnToTarget(class APawn* ControlledPawn, class AActor* Target, float DeltaSeconds, float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "TurnToTarget");

	Params::TaskBase_C_TurnToTarget Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.Target = Target;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TaskBase.TaskBase_C.GetRandomPointOriginLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          OriginLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FlightAltittude                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::GetRandomPointOriginLocation(const struct FVector& OriginLocation, float Radius, float FlightAltittude, struct FVector* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "GetRandomPointOriginLocation");

	Params::TaskBase_C_GetRandomPointOriginLocation Parms{};

	Parms.OriginLocation = std::move(OriginLocation);
	Parms.Radius = Radius;
	Parms.FlightAltittude = FlightAltittude;

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function TaskBase.TaskBase_C.GetRandomPointOriginTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OriginTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FlightAltittude                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::GetRandomPointOriginTarget(class AActor* OriginTarget, float Radius, float FlightAltittude, struct FVector* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "GetRandomPointOriginTarget");

	Params::TaskBase_C_GetRandomPointOriginTarget Parms{};

	Parms.OriginTarget = OriginTarget;
	Parms.Radius = Radius;
	Parms.FlightAltittude = FlightAltittude;

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function TaskBase.TaskBase_C.CalculateSpeedScaleFromDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Goal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BaseRange                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BaseSpeedScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTaskBase_C::CalculateSpeedScaleFromDistance(const struct FVector& Start, const struct FVector& Goal, float BaseRange, float BaseSpeedScale, float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "CalculateSpeedScaleFromDistance");

	Params::TaskBase_C_CalculateSpeedScaleFromDistance Parms{};

	Parms.Start = std::move(Start);
	Parms.Goal = std::move(Goal);
	Parms.BaseRange = BaseRange;
	Parms.BaseSpeedScale = BaseSpeedScale;

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function TaskBase.TaskBase_C.GetRandomReachablePointAndCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ANavigationData*                  NavData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValidPoint                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTaskBase_C::GetRandomReachablePointAndCheck(const struct FVector& Origin, float Radius, class ANavigationData* NavData, struct FVector* Point, bool* IsValidPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TaskBase_C", "GetRandomReachablePointAndCheck");

	Params::TaskBase_C_GetRandomReachablePointAndCheck Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Radius = Radius;
	Parms.NavData = NavData;

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);

	if (IsValidPoint != nullptr)
		*IsValidPoint = Parms.IsValidPoint;
}

}

