#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerInterface

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "FPlayerAIBattleThinkTransitionData_structs.hpp"
#include "EBattleBonusAddType_structs.hpp"
#include "EParamAfterEventAction_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "ECharaDeadType_structs.hpp"


namespace SDK::Params
{

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetSASCodeVisible
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_SetSASCodeVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetSASCodeVisible) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetSASCodeVisible");
static_assert(sizeof(BPI_PlayerInterface_C_SetSASCodeVisible) == 0x000002, "Wrong size on BPI_PlayerInterface_C_SetSASCodeVisible");
static_assert(offsetof(BPI_PlayerInterface_C_SetSASCodeVisible, bVisible) == 0x000000, "Member 'BPI_PlayerInterface_C_SetSASCodeVisible::bVisible' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetSASCodeVisible, Dummy) == 0x000001, "Member 'BPI_PlayerInterface_C_SetSASCodeVisible::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EnableRigidBody
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerInterface_C_EnableRigidBody final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84E8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EnableRigidBody) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_EnableRigidBody");
static_assert(sizeof(BPI_PlayerInterface_C_EnableRigidBody) == 0x00000C, "Wrong size on BPI_PlayerInterface_C_EnableRigidBody");
static_assert(offsetof(BPI_PlayerInterface_C_EnableRigidBody, bEnable) == 0x000000, "Member 'BPI_PlayerInterface_C_EnableRigidBody::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_EnableRigidBody, LerpTime) == 0x000004, "Member 'BPI_PlayerInterface_C_EnableRigidBody::LerpTime' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_EnableRigidBody, bDummy) == 0x000008, "Member 'BPI_PlayerInterface_C_EnableRigidBody::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPlayerActionSAS
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SetPlayerActionSAS final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPlayerActionSAS) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetPlayerActionSAS");
static_assert(sizeof(BPI_PlayerInterface_C_SetPlayerActionSAS) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SetPlayerActionSAS");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerActionSAS, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPlayerActionSAS::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPlayerBattle
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_SetPlayerBattle final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPlayerBattle) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetPlayerBattle");
static_assert(sizeof(BPI_PlayerInterface_C_SetPlayerBattle) == 0x000002, "Wrong size on BPI_PlayerInterface_C_SetPlayerBattle");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerBattle, bBattle) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPlayerBattle::bBattle' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerBattle, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_SetPlayerBattle::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetBrainCodeVisible
// 0x0003 (0x0003 - 0x0000)
struct BPI_PlayerInterface_C_SetBrainCodeVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDrive;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetBrainCodeVisible) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetBrainCodeVisible");
static_assert(sizeof(BPI_PlayerInterface_C_SetBrainCodeVisible) == 0x000003, "Wrong size on BPI_PlayerInterface_C_SetBrainCodeVisible");
static_assert(offsetof(BPI_PlayerInterface_C_SetBrainCodeVisible, bVisible) == 0x000000, "Member 'BPI_PlayerInterface_C_SetBrainCodeVisible::bVisible' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetBrainCodeVisible, bDrive) == 0x000001, "Member 'BPI_PlayerInterface_C_SetBrainCodeVisible::bDrive' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetBrainCodeVisible, bDummy) == 0x000002, "Member 'BPI_PlayerInterface_C_SetBrainCodeVisible::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetSASCodeParam
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_SetSASCodeParam final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetSASCodeParam) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_SetSASCodeParam");
static_assert(sizeof(BPI_PlayerInterface_C_SetSASCodeParam) == 0x000008, "Wrong size on BPI_PlayerInterface_C_SetSASCodeParam");
static_assert(offsetof(BPI_PlayerInterface_C_SetSASCodeParam, Param) == 0x000000, "Member 'BPI_PlayerInterface_C_SetSASCodeParam::Param' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetSASCodeParam, bDummy) == 0x000004, "Member 'BPI_PlayerInterface_C_SetSASCodeParam::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.StartSASCode
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_StartSASCode final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_StartSASCode) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_StartSASCode");
static_assert(sizeof(BPI_PlayerInterface_C_StartSASCode) == 0x000002, "Wrong size on BPI_PlayerInterface_C_StartSASCode");
static_assert(offsetof(BPI_PlayerInterface_C_StartSASCode, SasKind) == 0x000000, "Member 'BPI_PlayerInterface_C_StartSASCode::SasKind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_StartSASCode, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_StartSASCode::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetSASCodeActorList
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_GetSASCodeActorList final
{
public:
	TArray<class ABP_CableBase_C*>                CodeList;                                          // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetSASCodeActorList) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_GetSASCodeActorList");
static_assert(sizeof(BPI_PlayerInterface_C_GetSASCodeActorList) == 0x000010, "Wrong size on BPI_PlayerInterface_C_GetSASCodeActorList");
static_assert(offsetof(BPI_PlayerInterface_C_GetSASCodeActorList, CodeList) == 0x000000, "Member 'BPI_PlayerInterface_C_GetSASCodeActorList::CodeList' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetBrainCodeActorList
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_GetBrainCodeActorList final
{
public:
	TArray<class ABP_CableBase_C*>                CodeList;                                          // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetBrainCodeActorList) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_GetBrainCodeActorList");
static_assert(sizeof(BPI_PlayerInterface_C_GetBrainCodeActorList) == 0x000010, "Wrong size on BPI_PlayerInterface_C_GetBrainCodeActorList");
static_assert(offsetof(BPI_PlayerInterface_C_GetBrainCodeActorList, CodeList) == 0x000000, "Member 'BPI_PlayerInterface_C_GetBrainCodeActorList::CodeList' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetBrainFieldTimeRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_PlayerInterface_C_GetBrainFieldTimeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetBrainFieldTimeRate) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetBrainFieldTimeRate");
static_assert(sizeof(BPI_PlayerInterface_C_GetBrainFieldTimeRate) == 0x000004, "Wrong size on BPI_PlayerInterface_C_GetBrainFieldTimeRate");
static_assert(offsetof(BPI_PlayerInterface_C_GetBrainFieldTimeRate, Rate) == 0x000000, "Member 'BPI_PlayerInterface_C_GetBrainFieldTimeRate::Rate' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsOpenBrainField
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsOpenBrainField final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsOpenBrainField) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsOpenBrainField");
static_assert(sizeof(BPI_PlayerInterface_C_IsOpenBrainField) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsOpenBrainField");
static_assert(offsetof(BPI_PlayerInterface_C_IsOpenBrainField, bOpen) == 0x000000, "Member 'BPI_PlayerInterface_C_IsOpenBrainField::bOpen' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.PlaySASCodeDirection
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_PlaySASCodeDirection final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_PlaySASCodeDirection) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_PlaySASCodeDirection");
static_assert(sizeof(BPI_PlayerInterface_C_PlaySASCodeDirection) == 0x000002, "Wrong size on BPI_PlayerInterface_C_PlaySASCodeDirection");
static_assert(offsetof(BPI_PlayerInterface_C_PlaySASCodeDirection, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_PlaySASCodeDirection::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_PlaySASCodeDirection, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_PlaySASCodeDirection::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.StopSASCodeDirection
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_StopSASCodeDirection final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_StopSASCodeDirection) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_StopSASCodeDirection");
static_assert(sizeof(BPI_PlayerInterface_C_StopSASCodeDirection) == 0x000002, "Wrong size on BPI_PlayerInterface_C_StopSASCodeDirection");
static_assert(offsetof(BPI_PlayerInterface_C_StopSASCodeDirection, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_StopSASCodeDirection::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_StopSASCodeDirection, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_StopSASCodeDirection::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ResetSpecialEffects
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_ResetSpecialEffects final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ResetSpecialEffects) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_ResetSpecialEffects");
static_assert(sizeof(BPI_PlayerInterface_C_ResetSpecialEffects) == 0x000001, "Wrong size on BPI_PlayerInterface_C_ResetSpecialEffects");
static_assert(offsetof(BPI_PlayerInterface_C_ResetSpecialEffects, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_ResetSpecialEffects::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPlayerActionAfterEvent
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_SetPlayerActionAfterEvent final
{
public:
	EParamAfterEventAction                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPlayerActionAfterEvent) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetPlayerActionAfterEvent");
static_assert(sizeof(BPI_PlayerInterface_C_SetPlayerActionAfterEvent) == 0x000002, "Wrong size on BPI_PlayerInterface_C_SetPlayerActionAfterEvent");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerActionAfterEvent, Param) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPlayerActionAfterEvent::Param' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerActionAfterEvent, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_SetPlayerActionAfterEvent::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetSAS_Kind
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_GetSAS_Kind final
{
public:
	E_SASButton                                   Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Kind;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetSAS_Kind) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_GetSAS_Kind");
static_assert(sizeof(BPI_PlayerInterface_C_GetSAS_Kind) == 0x000002, "Wrong size on BPI_PlayerInterface_C_GetSAS_Kind");
static_assert(offsetof(BPI_PlayerInterface_C_GetSAS_Kind, Button) == 0x000000, "Member 'BPI_PlayerInterface_C_GetSAS_Kind::Button' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_GetSAS_Kind, Kind) == 0x000001, "Member 'BPI_PlayerInterface_C_GetSAS_Kind::Kind' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.PlayerCameraReset
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_PlayerCameraReset final
{
public:
	float                                         InterpSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_PlayerCameraReset) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_PlayerCameraReset");
static_assert(sizeof(BPI_PlayerInterface_C_PlayerCameraReset) == 0x000008, "Wrong size on BPI_PlayerInterface_C_PlayerCameraReset");
static_assert(offsetof(BPI_PlayerInterface_C_PlayerCameraReset, InterpSec) == 0x000000, "Member 'BPI_PlayerInterface_C_PlayerCameraReset::InterpSec' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_PlayerCameraReset, Dummy) == 0x000004, "Member 'BPI_PlayerInterface_C_PlayerCameraReset::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ForceWarp_Interface
// 0x0040 (0x0040 - 0x0000)
struct BPI_PlayerInterface_C_ForceWarp_Interface final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         IdlingSeconds;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ForceWarp_Interface) == 0x000010, "Wrong alignment on BPI_PlayerInterface_C_ForceWarp_Interface");
static_assert(sizeof(BPI_PlayerInterface_C_ForceWarp_Interface) == 0x000040, "Wrong size on BPI_PlayerInterface_C_ForceWarp_Interface");
static_assert(offsetof(BPI_PlayerInterface_C_ForceWarp_Interface, Transform) == 0x000000, "Member 'BPI_PlayerInterface_C_ForceWarp_Interface::Transform' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ForceWarp_Interface, IdlingSeconds) == 0x000030, "Member 'BPI_PlayerInterface_C_ForceWarp_Interface::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ForceWarp_Interface, Dummy) == 0x000034, "Member 'BPI_PlayerInterface_C_ForceWarp_Interface::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPsychicObjectEnableRange
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_SetPsychicObjectEnableRange final
{
public:
	bool                                          Is_Brain_Field_in;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84E9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPsychicObjectEnableRange) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_SetPsychicObjectEnableRange");
static_assert(sizeof(BPI_PlayerInterface_C_SetPsychicObjectEnableRange) == 0x000008, "Wrong size on BPI_PlayerInterface_C_SetPsychicObjectEnableRange");
static_assert(offsetof(BPI_PlayerInterface_C_SetPsychicObjectEnableRange, Is_Brain_Field_in) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPsychicObjectEnableRange::Is_Brain_Field_in' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPsychicObjectEnableRange, Range) == 0x000004, "Member 'BPI_PlayerInterface_C_SetPsychicObjectEnableRange::Range' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetCanAnimOverrideSASColor
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_SetCanAnimOverrideSASColor final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetCanAnimOverrideSASColor) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetCanAnimOverrideSASColor");
static_assert(sizeof(BPI_PlayerInterface_C_SetCanAnimOverrideSASColor) == 0x000002, "Wrong size on BPI_PlayerInterface_C_SetCanAnimOverrideSASColor");
static_assert(offsetof(BPI_PlayerInterface_C_SetCanAnimOverrideSASColor, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_SetCanAnimOverrideSASColor::Enable' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetCanAnimOverrideSASColor, Dummy) == 0x000001, "Member 'BPI_PlayerInterface_C_SetCanAnimOverrideSASColor::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetCanAnimOverrideSASColor
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_GetCanAnimOverrideSASColor final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_GetCanAnimOverrideSASColor) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_GetCanAnimOverrideSASColor");
static_assert(sizeof(BPI_PlayerInterface_C_GetCanAnimOverrideSASColor) == 0x000001, "Wrong size on BPI_PlayerInterface_C_GetCanAnimOverrideSASColor");
static_assert(offsetof(BPI_PlayerInterface_C_GetCanAnimOverrideSASColor, Enabled) == 0x000000, "Member 'BPI_PlayerInterface_C_GetCanAnimOverrideSASColor::Enabled' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetStealth
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SetStealth final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetStealth) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetStealth");
static_assert(sizeof(BPI_PlayerInterface_C_SetStealth) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SetStealth");
static_assert(offsetof(BPI_PlayerInterface_C_SetStealth, Flag_in) == 0x000000, "Member 'BPI_PlayerInterface_C_SetStealth::Flag_in' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.AddPsychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_AddPsychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               FlyObj;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_AddPsychicFlyObj) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_AddPsychicFlyObj");
static_assert(sizeof(BPI_PlayerInterface_C_AddPsychicFlyObj) == 0x000010, "Wrong size on BPI_PlayerInterface_C_AddPsychicFlyObj");
static_assert(offsetof(BPI_PlayerInterface_C_AddPsychicFlyObj, FlyObj) == 0x000000, "Member 'BPI_PlayerInterface_C_AddPsychicFlyObj::FlyObj' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_AddPsychicFlyObj, Dummy) == 0x000008, "Member 'BPI_PlayerInterface_C_AddPsychicFlyObj::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetPsychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_GetPsychicFlyObj final
{
public:
	TArray<class AActor*>                         FlyObj;                                            // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetPsychicFlyObj) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_GetPsychicFlyObj");
static_assert(sizeof(BPI_PlayerInterface_C_GetPsychicFlyObj) == 0x000010, "Wrong size on BPI_PlayerInterface_C_GetPsychicFlyObj");
static_assert(offsetof(BPI_PlayerInterface_C_GetPsychicFlyObj, FlyObj) == 0x000000, "Member 'BPI_PlayerInterface_C_GetPsychicFlyObj::FlyObj' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.AddHitPsychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_AddHitPsychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               HitFlyObj;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAdd;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_AddHitPsychicFlyObj) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_AddHitPsychicFlyObj");
static_assert(sizeof(BPI_PlayerInterface_C_AddHitPsychicFlyObj) == 0x000010, "Wrong size on BPI_PlayerInterface_C_AddHitPsychicFlyObj");
static_assert(offsetof(BPI_PlayerInterface_C_AddHitPsychicFlyObj, HitFlyObj) == 0x000000, "Member 'BPI_PlayerInterface_C_AddHitPsychicFlyObj::HitFlyObj' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_AddHitPsychicFlyObj, IsAdd) == 0x000008, "Member 'BPI_PlayerInterface_C_AddHitPsychicFlyObj::IsAdd' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsUseFog
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsUseFog final
{
public:
	bool                                          IsFog;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsUseFog) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsUseFog");
static_assert(sizeof(BPI_PlayerInterface_C_IsUseFog) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsUseFog");
static_assert(offsetof(BPI_PlayerInterface_C_IsUseFog, IsFog) == 0x000000, "Member 'BPI_PlayerInterface_C_IsUseFog::IsFog' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnpcBarrier
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnpcBarrier final
{
public:
	bool                                          IsBarrier;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnpcBarrier) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnpcBarrier");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnpcBarrier) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnpcBarrier");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnpcBarrier, IsBarrier) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnpcBarrier::IsBarrier' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CanBattleAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_CanBattleAction final
{
public:
	EPlayerAIBattleThinkType                      ThinkType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAction;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CanBattleAction) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_CanBattleAction");
static_assert(sizeof(BPI_PlayerInterface_C_CanBattleAction) == 0x000002, "Wrong size on BPI_PlayerInterface_C_CanBattleAction");
static_assert(offsetof(BPI_PlayerInterface_C_CanBattleAction, ThinkType) == 0x000000, "Member 'BPI_PlayerInterface_C_CanBattleAction::ThinkType' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_CanBattleAction, CanAction) == 0x000001, "Member 'BPI_PlayerInterface_C_CanBattleAction::CanAction' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetENpcKind
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_GetENpcKind final
{
public:
	ENpcKind                                      ENpcKind;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetENpcKind) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_GetENpcKind");
static_assert(sizeof(BPI_PlayerInterface_C_GetENpcKind) == 0x000001, "Wrong size on BPI_PlayerInterface_C_GetENpcKind");
static_assert(offsetof(BPI_PlayerInterface_C_GetENpcKind, ENpcKind) == 0x000000, "Member 'BPI_PlayerInterface_C_GetENpcKind::ENpcKind' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsDodgeTargetRot
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsDodgeTargetRot final
{
public:
	bool                                          Param_IsDodgeTargetRot;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsDodgeTargetRot) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsDodgeTargetRot");
static_assert(sizeof(BPI_PlayerInterface_C_IsDodgeTargetRot) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsDodgeTargetRot");
static_assert(offsetof(BPI_PlayerInterface_C_IsDodgeTargetRot, Param_IsDodgeTargetRot) == 0x000000, "Member 'BPI_PlayerInterface_C_IsDodgeTargetRot::Param_IsDodgeTargetRot' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetDodgeScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_PlayerInterface_C_GetDodgeScale final
{
public:
	float                                         DodgeScale;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetDodgeScale) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetDodgeScale");
static_assert(sizeof(BPI_PlayerInterface_C_GetDodgeScale) == 0x000004, "Wrong size on BPI_PlayerInterface_C_GetDodgeScale");
static_assert(offsetof(BPI_PlayerInterface_C_GetDodgeScale, DodgeScale) == 0x000000, "Member 'BPI_PlayerInterface_C_GetDodgeScale::DodgeScale' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsSpecialDown
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_IsSpecialDown final
{
public:
	bool                                          IsSpDown;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84EA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpDownWince;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_IsSpecialDown) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_IsSpecialDown");
static_assert(sizeof(BPI_PlayerInterface_C_IsSpecialDown) == 0x000008, "Wrong size on BPI_PlayerInterface_C_IsSpecialDown");
static_assert(offsetof(BPI_PlayerInterface_C_IsSpecialDown, IsSpDown) == 0x000000, "Member 'BPI_PlayerInterface_C_IsSpecialDown::IsSpDown' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_IsSpecialDown, SpDownWince) == 0x000004, "Member 'BPI_PlayerInterface_C_IsSpecialDown::SpDownWince' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetSpecialDownTimer
// 0x0004 (0x0004 - 0x0000)
struct BPI_PlayerInterface_C_GetSpecialDownTimer final
{
public:
	float                                         SpDownTimer;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetSpecialDownTimer) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetSpecialDownTimer");
static_assert(sizeof(BPI_PlayerInterface_C_GetSpecialDownTimer) == 0x000004, "Wrong size on BPI_PlayerInterface_C_GetSpecialDownTimer");
static_assert(offsetof(BPI_PlayerInterface_C_GetSpecialDownTimer, SpDownTimer) == 0x000000, "Member 'BPI_PlayerInterface_C_GetSpecialDownTimer::SpDownTimer' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ChangeENpcKind
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_ChangeENpcKind final
{
public:
	ENpcKind                                      ENpcKind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ChangeENpcKind) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_ChangeENpcKind");
static_assert(sizeof(BPI_PlayerInterface_C_ChangeENpcKind) == 0x000002, "Wrong size on BPI_PlayerInterface_C_ChangeENpcKind");
static_assert(offsetof(BPI_PlayerInterface_C_ChangeENpcKind, ENpcKind) == 0x000000, "Member 'BPI_PlayerInterface_C_ChangeENpcKind::ENpcKind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ChangeENpcKind, Dummy) == 0x000001, "Member 'BPI_PlayerInterface_C_ChangeENpcKind::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetSkillCoreDropProbability
// 0x0004 (0x0004 - 0x0000)
struct BPI_PlayerInterface_C_GetSkillCoreDropProbability final
{
public:
	float                                         Probability;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetSkillCoreDropProbability) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetSkillCoreDropProbability");
static_assert(sizeof(BPI_PlayerInterface_C_GetSkillCoreDropProbability) == 0x000004, "Wrong size on BPI_PlayerInterface_C_GetSkillCoreDropProbability");
static_assert(offsetof(BPI_PlayerInterface_C_GetSkillCoreDropProbability, Probability) == 0x000000, "Member 'BPI_PlayerInterface_C_GetSkillCoreDropProbability::Probability' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CanSpecialMoveTrigger
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_CanSpecialMoveTrigger final
{
public:
	bool                                          CanDo;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CanSpecialMoveTrigger) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_CanSpecialMoveTrigger");
static_assert(sizeof(BPI_PlayerInterface_C_CanSpecialMoveTrigger) == 0x000001, "Wrong size on BPI_PlayerInterface_C_CanSpecialMoveTrigger");
static_assert(offsetof(BPI_PlayerInterface_C_CanSpecialMoveTrigger, CanDo) == 0x000000, "Member 'BPI_PlayerInterface_C_CanSpecialMoveTrigger::CanDo' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ReturnMetamorphosis
// 0x0028 (0x0028 - 0x0000)
struct BPI_PlayerInterface_C_ReturnMetamorphosis final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ARSBattlePlayer_C*                      SpecifyPlayer;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ReturnMetamorphosis) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_ReturnMetamorphosis");
static_assert(sizeof(BPI_PlayerInterface_C_ReturnMetamorphosis) == 0x000028, "Wrong size on BPI_PlayerInterface_C_ReturnMetamorphosis");
static_assert(offsetof(BPI_PlayerInterface_C_ReturnMetamorphosis, Location) == 0x000000, "Member 'BPI_PlayerInterface_C_ReturnMetamorphosis::Location' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ReturnMetamorphosis, Rotation) == 0x00000C, "Member 'BPI_PlayerInterface_C_ReturnMetamorphosis::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ReturnMetamorphosis, SpecifyPlayer) == 0x000018, "Member 'BPI_PlayerInterface_C_ReturnMetamorphosis::SpecifyPlayer' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ReturnMetamorphosis, Dummy) == 0x000020, "Member 'BPI_PlayerInterface_C_ReturnMetamorphosis::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.OnAttackedEnemyDead
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_OnAttackedEnemyDead final
{
public:
	ECharaDeadType                                DeadType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_OnAttackedEnemyDead) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_OnAttackedEnemyDead");
static_assert(sizeof(BPI_PlayerInterface_C_OnAttackedEnemyDead) == 0x000002, "Wrong size on BPI_PlayerInterface_C_OnAttackedEnemyDead");
static_assert(offsetof(BPI_PlayerInterface_C_OnAttackedEnemyDead, DeadType) == 0x000000, "Member 'BPI_PlayerInterface_C_OnAttackedEnemyDead::DeadType' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_OnAttackedEnemyDead, Dummy) == 0x000001, "Member 'BPI_PlayerInterface_C_OnAttackedEnemyDead::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CanEnpcOpenBrainField
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_CanEnpcOpenBrainField final
{
public:
	bool                                          CanDo;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CanEnpcOpenBrainField) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_CanEnpcOpenBrainField");
static_assert(sizeof(BPI_PlayerInterface_C_CanEnpcOpenBrainField) == 0x000001, "Wrong size on BPI_PlayerInterface_C_CanEnpcOpenBrainField");
static_assert(offsetof(BPI_PlayerInterface_C_CanEnpcOpenBrainField, CanDo) == 0x000000, "Member 'BPI_PlayerInterface_C_CanEnpcOpenBrainField::CanDo' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EnpcBarrierHitNotify
// 0x01C8 (0x01C8 - 0x0000)
struct BPI_PlayerInterface_C_EnpcBarrierHitNotify final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dammy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EnpcBarrierHitNotify) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_EnpcBarrierHitNotify");
static_assert(sizeof(BPI_PlayerInterface_C_EnpcBarrierHitNotify) == 0x0001C8, "Wrong size on BPI_PlayerInterface_C_EnpcBarrierHitNotify");
static_assert(offsetof(BPI_PlayerInterface_C_EnpcBarrierHitNotify, Result) == 0x000000, "Member 'BPI_PlayerInterface_C_EnpcBarrierHitNotify::Result' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_EnpcBarrierHitNotify, Dammy) == 0x0001C0, "Member 'BPI_PlayerInterface_C_EnpcBarrierHitNotify::Dammy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CreateRedCode
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_CreateRedCode final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CreateRedCode) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_CreateRedCode");
static_assert(sizeof(BPI_PlayerInterface_C_CreateRedCode) == 0x000001, "Wrong size on BPI_PlayerInterface_C_CreateRedCode");
static_assert(offsetof(BPI_PlayerInterface_C_CreateRedCode, NewParam) == 0x000000, "Member 'BPI_PlayerInterface_C_CreateRedCode::NewParam' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.DestroyRedCode
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_DestroyRedCode final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_DestroyRedCode) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_DestroyRedCode");
static_assert(sizeof(BPI_PlayerInterface_C_DestroyRedCode) == 0x000001, "Wrong size on BPI_PlayerInterface_C_DestroyRedCode");
static_assert(offsetof(BPI_PlayerInterface_C_DestroyRedCode, NewParam) == 0x000000, "Member 'BPI_PlayerInterface_C_DestroyRedCode::NewParam' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CheckStickInputTurn
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_CheckStickInputTurn final
{
public:
	bool                                          bTurn;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CheckStickInputTurn) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_CheckStickInputTurn");
static_assert(sizeof(BPI_PlayerInterface_C_CheckStickInputTurn) == 0x000001, "Wrong size on BPI_PlayerInterface_C_CheckStickInputTurn");
static_assert(offsetof(BPI_PlayerInterface_C_CheckStickInputTurn, bTurn) == 0x000000, "Member 'BPI_PlayerInterface_C_CheckStickInputTurn::bTurn' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetEnableRigidBody
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_GetEnableRigidBody final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_GetEnableRigidBody) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_GetEnableRigidBody");
static_assert(sizeof(BPI_PlayerInterface_C_GetEnableRigidBody) == 0x000001, "Wrong size on BPI_PlayerInterface_C_GetEnableRigidBody");
static_assert(offsetof(BPI_PlayerInterface_C_GetEnableRigidBody, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_GetEnableRigidBody::Enable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPlayerInputRestriction
// 0x0003 (0x0003 - 0x0000)
struct BPI_PlayerInterface_C_SetPlayerInputRestriction final
{
public:
	EPlayerInputRestrictionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRestriction;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPlayerInputRestriction) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetPlayerInputRestriction");
static_assert(sizeof(BPI_PlayerInterface_C_SetPlayerInputRestriction) == 0x000003, "Wrong size on BPI_PlayerInterface_C_SetPlayerInputRestriction");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerInputRestriction, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPlayerInputRestriction::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerInputRestriction, bRestriction) == 0x000001, "Member 'BPI_PlayerInterface_C_SetPlayerInputRestriction::bRestriction' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerInputRestriction, bDummy) == 0x000002, "Member 'BPI_PlayerInterface_C_SetPlayerInputRestriction::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsJumpAreaAble
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsJumpAreaAble final
{
public:
	bool                                          bAble;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsJumpAreaAble) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsJumpAreaAble");
static_assert(sizeof(BPI_PlayerInterface_C_IsJumpAreaAble) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsJumpAreaAble");
static_assert(offsetof(BPI_PlayerInterface_C_IsJumpAreaAble, bAble) == 0x000000, "Member 'BPI_PlayerInterface_C_IsJumpAreaAble::bAble' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnableInputPsychicCombo
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnableInputPsychicCombo final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnableInputPsychicCombo) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnableInputPsychicCombo");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnableInputPsychicCombo) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnableInputPsychicCombo");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnableInputPsychicCombo, bEnable) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnableInputPsychicCombo::bEnable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPsychicEmissionInterface
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerInterface_C_SetPsychicEmissionInterface final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84EB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPsychicEmissionInterface) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_SetPsychicEmissionInterface");
static_assert(sizeof(BPI_PlayerInterface_C_SetPsychicEmissionInterface) == 0x00000C, "Wrong size on BPI_PlayerInterface_C_SetPsychicEmissionInterface");
static_assert(offsetof(BPI_PlayerInterface_C_SetPsychicEmissionInterface, bON) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPsychicEmissionInterface::bON' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPsychicEmissionInterface, ClaimantName) == 0x000004, "Member 'BPI_PlayerInterface_C_SetPsychicEmissionInterface::ClaimantName' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsIntense
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsIntense final
{
public:
	bool                                          bIntense;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsIntense) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsIntense");
static_assert(sizeof(BPI_PlayerInterface_C_IsIntense) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsIntense");
static_assert(offsetof(BPI_PlayerInterface_C_IsIntense, bIntense) == 0x000000, "Member 'BPI_PlayerInterface_C_IsIntense::bIntense' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnableSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnableSeeThrough final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnableSeeThrough) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnableSeeThrough");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnableSeeThrough) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnableSeeThrough");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnableSeeThrough, bEnable) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnableSeeThrough::bEnable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetTalkLookAtTurn
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_SetTalkLookAtTurn final
{
public:
	struct FVector                                LookAtLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetTalkLookAtTurn) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_SetTalkLookAtTurn");
static_assert(sizeof(BPI_PlayerInterface_C_SetTalkLookAtTurn) == 0x000010, "Wrong size on BPI_PlayerInterface_C_SetTalkLookAtTurn");
static_assert(offsetof(BPI_PlayerInterface_C_SetTalkLookAtTurn, LookAtLocation) == 0x000000, "Member 'BPI_PlayerInterface_C_SetTalkLookAtTurn::LookAtLocation' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetTalkLookAtTurn, bDummy) == 0x00000C, "Member 'BPI_PlayerInterface_C_SetTalkLookAtTurn::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EndTalkLookAtTurn
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_EndTalkLookAtTurn final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EndTalkLookAtTurn) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_EndTalkLookAtTurn");
static_assert(sizeof(BPI_PlayerInterface_C_EndTalkLookAtTurn) == 0x000001, "Wrong size on BPI_PlayerInterface_C_EndTalkLookAtTurn");
static_assert(offsetof(BPI_PlayerInterface_C_EndTalkLookAtTurn, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_EndTalkLookAtTurn::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EnableUseSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_EnableUseSeeThrough final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EnableUseSeeThrough) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_EnableUseSeeThrough");
static_assert(sizeof(BPI_PlayerInterface_C_EnableUseSeeThrough) == 0x000001, "Wrong size on BPI_PlayerInterface_C_EnableUseSeeThrough");
static_assert(offsetof(BPI_PlayerInterface_C_EnableUseSeeThrough, bEnable) == 0x000000, "Member 'BPI_PlayerInterface_C_EnableUseSeeThrough::bEnable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CheckTargetableCharacterENPC
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_CheckTargetableCharacterENPC final
{
public:
	class ARSCharacterBase*                       Chara;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CheckTargetableCharacterENPC) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_CheckTargetableCharacterENPC");
static_assert(sizeof(BPI_PlayerInterface_C_CheckTargetableCharacterENPC) == 0x000010, "Wrong size on BPI_PlayerInterface_C_CheckTargetableCharacterENPC");
static_assert(offsetof(BPI_PlayerInterface_C_CheckTargetableCharacterENPC, Chara) == 0x000000, "Member 'BPI_PlayerInterface_C_CheckTargetableCharacterENPC::Chara' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_CheckTargetableCharacterENPC, ReturnValue) == 0x000008, "Member 'BPI_PlayerInterface_C_CheckTargetableCharacterENPC::ReturnValue' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.RequestBrainFieldHelp
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_RequestBrainFieldHelp final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_RequestBrainFieldHelp) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_RequestBrainFieldHelp");
static_assert(sizeof(BPI_PlayerInterface_C_RequestBrainFieldHelp) == 0x000001, "Wrong size on BPI_PlayerInterface_C_RequestBrainFieldHelp");
static_assert(offsetof(BPI_PlayerInterface_C_RequestBrainFieldHelp, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_RequestBrainFieldHelp::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetNpcBrainFieldDrive
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_SetNpcBrainFieldDrive final
{
public:
	bool                                          bDrive;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetNpcBrainFieldDrive) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetNpcBrainFieldDrive");
static_assert(sizeof(BPI_PlayerInterface_C_SetNpcBrainFieldDrive) == 0x000002, "Wrong size on BPI_PlayerInterface_C_SetNpcBrainFieldDrive");
static_assert(offsetof(BPI_PlayerInterface_C_SetNpcBrainFieldDrive, bDrive) == 0x000000, "Member 'BPI_PlayerInterface_C_SetNpcBrainFieldDrive::bDrive' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetNpcBrainFieldDrive, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_SetNpcBrainFieldDrive::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.OnAnimNotify_EnpcSAS
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS");
static_assert(sizeof(BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS) == 0x000002, "Wrong size on BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS");
static_assert(offsetof(BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS, Kind) == 0x000000, "Member 'BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_OnAnimNotify_EnpcSAS::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.BeginEnpcSAS
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_BeginEnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_BeginEnpcSAS) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_BeginEnpcSAS");
static_assert(sizeof(BPI_PlayerInterface_C_BeginEnpcSAS) == 0x000002, "Wrong size on BPI_PlayerInterface_C_BeginEnpcSAS");
static_assert(offsetof(BPI_PlayerInterface_C_BeginEnpcSAS, Kind) == 0x000000, "Member 'BPI_PlayerInterface_C_BeginEnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_BeginEnpcSAS, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_BeginEnpcSAS::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CheckAssassinAttack
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerInterface_C_CheckAssassinAttack final
{
public:
	EAssassinAttackHit                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84EC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   DamagedActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bArmorBreak;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CheckAssassinAttack) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_CheckAssassinAttack");
static_assert(sizeof(BPI_PlayerInterface_C_CheckAssassinAttack) == 0x000018, "Wrong size on BPI_PlayerInterface_C_CheckAssassinAttack");
static_assert(offsetof(BPI_PlayerInterface_C_CheckAssassinAttack, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_CheckAssassinAttack::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_CheckAssassinAttack, DamagedActor) == 0x000008, "Member 'BPI_PlayerInterface_C_CheckAssassinAttack::DamagedActor' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_CheckAssassinAttack, bSuccess) == 0x000010, "Member 'BPI_PlayerInterface_C_CheckAssassinAttack::bSuccess' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_CheckAssassinAttack, bArmorBreak) == 0x000011, "Member 'BPI_PlayerInterface_C_CheckAssassinAttack::bArmorBreak' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ResetCollisionOverlap
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_ResetCollisionOverlap final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ResetCollisionOverlap) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_ResetCollisionOverlap");
static_assert(sizeof(BPI_PlayerInterface_C_ResetCollisionOverlap) == 0x000001, "Wrong size on BPI_PlayerInterface_C_ResetCollisionOverlap");
static_assert(offsetof(BPI_PlayerInterface_C_ResetCollisionOverlap, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_ResetCollisionOverlap::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.PlayBrainFieldBattleTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_PlayBrainFieldBattleTalk final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_PlayBrainFieldBattleTalk) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_PlayBrainFieldBattleTalk");
static_assert(sizeof(BPI_PlayerInterface_C_PlayBrainFieldBattleTalk) == 0x000001, "Wrong size on BPI_PlayerInterface_C_PlayBrainFieldBattleTalk");
static_assert(offsetof(BPI_PlayerInterface_C_PlayBrainFieldBattleTalk, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_PlayBrainFieldBattleTalk::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsDriveMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsDriveMode final
{
public:
	bool                                          bDrive;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsDriveMode) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsDriveMode");
static_assert(sizeof(BPI_PlayerInterface_C_IsDriveMode) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsDriveMode");
static_assert(offsetof(BPI_PlayerInterface_C_IsDriveMode, bDrive) == 0x000000, "Member 'BPI_PlayerInterface_C_IsDriveMode::bDrive' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EventInputRestrict
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_EventInputRestrict final
{
public:
	bool                                          bRestrict;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EventInputRestrict) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_EventInputRestrict");
static_assert(sizeof(BPI_PlayerInterface_C_EventInputRestrict) == 0x000002, "Wrong size on BPI_PlayerInterface_C_EventInputRestrict");
static_assert(offsetof(BPI_PlayerInterface_C_EventInputRestrict, bRestrict) == 0x000000, "Member 'BPI_PlayerInterface_C_EventInputRestrict::bRestrict' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_EventInputRestrict, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_EventInputRestrict::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EventInputRestrictAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_EventInputRestrictAction final
{
public:
	bool                                          bRestrict;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EventInputRestrictAction) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_EventInputRestrictAction");
static_assert(sizeof(BPI_PlayerInterface_C_EventInputRestrictAction) == 0x000002, "Wrong size on BPI_PlayerInterface_C_EventInputRestrictAction");
static_assert(offsetof(BPI_PlayerInterface_C_EventInputRestrictAction, bRestrict) == 0x000000, "Member 'BPI_PlayerInterface_C_EventInputRestrictAction::bRestrict' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_EventInputRestrictAction, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_EventInputRestrictAction::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SuspendPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SuspendPlayer final
{
public:
	bool                                          bSuspend;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SuspendPlayer) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SuspendPlayer");
static_assert(sizeof(BPI_PlayerInterface_C_SuspendPlayer) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SuspendPlayer");
static_assert(offsetof(BPI_PlayerInterface_C_SuspendPlayer, bSuspend) == 0x000000, "Member 'BPI_PlayerInterface_C_SuspendPlayer::bSuspend' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ResumePlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_ResumePlayer final
{
public:
	bool                                          bResume;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ResumePlayer) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_ResumePlayer");
static_assert(sizeof(BPI_PlayerInterface_C_ResumePlayer) == 0x000001, "Wrong size on BPI_PlayerInterface_C_ResumePlayer");
static_assert(offsetof(BPI_PlayerInterface_C_ResumePlayer, bResume) == 0x000000, "Member 'BPI_PlayerInterface_C_ResumePlayer::bResume' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.FinishMetamorphosisLastAttack
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_FinishMetamorphosisLastAttack final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_FinishMetamorphosisLastAttack) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_FinishMetamorphosisLastAttack");
static_assert(sizeof(BPI_PlayerInterface_C_FinishMetamorphosisLastAttack) == 0x000001, "Wrong size on BPI_PlayerInterface_C_FinishMetamorphosisLastAttack");
static_assert(offsetof(BPI_PlayerInterface_C_FinishMetamorphosisLastAttack, Dummy) == 0x000000, "Member 'BPI_PlayerInterface_C_FinishMetamorphosisLastAttack::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnableCreateCopy
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnableCreateCopy final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnableCreateCopy) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnableCreateCopy");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnableCreateCopy) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnableCreateCopy");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnableCreateCopy, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnableCreateCopy::Enable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.OnStartReactionChance
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_OnStartReactionChance final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_OnStartReactionChance) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_OnStartReactionChance");
static_assert(sizeof(BPI_PlayerInterface_C_OnStartReactionChance) == 0x000001, "Wrong size on BPI_PlayerInterface_C_OnStartReactionChance");
static_assert(offsetof(BPI_PlayerInterface_C_OnStartReactionChance, Dummy) == 0x000000, "Member 'BPI_PlayerInterface_C_OnStartReactionChance::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.OnStartEnpcDrive
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_OnStartEnpcDrive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_OnStartEnpcDrive) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_OnStartEnpcDrive");
static_assert(sizeof(BPI_PlayerInterface_C_OnStartEnpcDrive) == 0x000001, "Wrong size on BPI_PlayerInterface_C_OnStartEnpcDrive");
static_assert(offsetof(BPI_PlayerInterface_C_OnStartEnpcDrive, Dummy) == 0x000000, "Member 'BPI_PlayerInterface_C_OnStartEnpcDrive::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetReactionChanceEndAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_GetReactionChanceEndAction final
{
public:
	EPlayerAIBattleThinkType                      EndAction;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetReactionChanceEndAction) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_GetReactionChanceEndAction");
static_assert(sizeof(BPI_PlayerInterface_C_GetReactionChanceEndAction) == 0x000001, "Wrong size on BPI_PlayerInterface_C_GetReactionChanceEndAction");
static_assert(offsetof(BPI_PlayerInterface_C_GetReactionChanceEndAction, EndAction) == 0x000000, "Member 'BPI_PlayerInterface_C_GetReactionChanceEndAction::EndAction' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SelectReactionChanceEndAction
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerInterface_C_SelectReactionChanceEndAction final
{
public:
	TArray<EPlayerAIBattleThinkType>              InEndAction;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      OutEndAction;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_SelectReactionChanceEndAction) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_SelectReactionChanceEndAction");
static_assert(sizeof(BPI_PlayerInterface_C_SelectReactionChanceEndAction) == 0x000018, "Wrong size on BPI_PlayerInterface_C_SelectReactionChanceEndAction");
static_assert(offsetof(BPI_PlayerInterface_C_SelectReactionChanceEndAction, InEndAction) == 0x000000, "Member 'BPI_PlayerInterface_C_SelectReactionChanceEndAction::InEndAction' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SelectReactionChanceEndAction, OutEndAction) == 0x000010, "Member 'BPI_PlayerInterface_C_SelectReactionChanceEndAction::OutEndAction' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetNpcWarpDither
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SetNpcWarpDither final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetNpcWarpDither) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetNpcWarpDither");
static_assert(sizeof(BPI_PlayerInterface_C_SetNpcWarpDither) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SetNpcWarpDither");
static_assert(offsetof(BPI_PlayerInterface_C_SetNpcWarpDither, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_SetNpcWarpDither::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsExecNpcRevive
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsExecNpcRevive final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsExecNpcRevive) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsExecNpcRevive");
static_assert(sizeof(BPI_PlayerInterface_C_IsExecNpcRevive) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsExecNpcRevive");
static_assert(offsetof(BPI_PlayerInterface_C_IsExecNpcRevive, bExec) == 0x000000, "Member 'BPI_PlayerInterface_C_IsExecNpcRevive::bExec' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsMainPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsMainPlayer final
{
public:
	bool                                          bMainPlayer;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsMainPlayer) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsMainPlayer");
static_assert(sizeof(BPI_PlayerInterface_C_IsMainPlayer) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsMainPlayer");
static_assert(offsetof(BPI_PlayerInterface_C_IsMainPlayer, bMainPlayer) == 0x000000, "Member 'BPI_PlayerInterface_C_IsMainPlayer::bMainPlayer' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.NotifyKillEnemy
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_NotifyKillEnemy final
{
public:
	class ARSBattleCharacter_C*                   KillActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_NotifyKillEnemy) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_NotifyKillEnemy");
static_assert(sizeof(BPI_PlayerInterface_C_NotifyKillEnemy) == 0x000010, "Wrong size on BPI_PlayerInterface_C_NotifyKillEnemy");
static_assert(offsetof(BPI_PlayerInterface_C_NotifyKillEnemy, KillActor) == 0x000000, "Member 'BPI_PlayerInterface_C_NotifyKillEnemy::KillActor' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_NotifyKillEnemy, bDummy) == 0x000008, "Member 'BPI_PlayerInterface_C_NotifyKillEnemy::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.DisablePlayerFootIK
// 0x0014 (0x0014 - 0x0000)
struct BPI_PlayerInterface_C_DisablePlayerFootIK final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84ED[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_DisablePlayerFootIK) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_DisablePlayerFootIK");
static_assert(sizeof(BPI_PlayerInterface_C_DisablePlayerFootIK) == 0x000014, "Wrong size on BPI_PlayerInterface_C_DisablePlayerFootIK");
static_assert(offsetof(BPI_PlayerInterface_C_DisablePlayerFootIK, bDisable) == 0x000000, "Member 'BPI_PlayerInterface_C_DisablePlayerFootIK::bDisable' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_DisablePlayerFootIK, ClaimantName) == 0x000004, "Member 'BPI_PlayerInterface_C_DisablePlayerFootIK::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_DisablePlayerFootIK, BlendTime) == 0x00000C, "Member 'BPI_PlayerInterface_C_DisablePlayerFootIK::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_DisablePlayerFootIK, bDummy) == 0x000010, "Member 'BPI_PlayerInterface_C_DisablePlayerFootIK::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ElevatorSetting
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_ElevatorSetting final
{
public:
	bool                                          bInElevator;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ElevatorSetting) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_ElevatorSetting");
static_assert(sizeof(BPI_PlayerInterface_C_ElevatorSetting) == 0x000002, "Wrong size on BPI_PlayerInterface_C_ElevatorSetting");
static_assert(offsetof(BPI_PlayerInterface_C_ElevatorSetting, bInElevator) == 0x000000, "Member 'BPI_PlayerInterface_C_ElevatorSetting::bInElevator' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ElevatorSetting, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_ElevatorSetting::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnableDrive
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnableDrive final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnableDrive) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnableDrive");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnableDrive) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnableDrive");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnableDrive, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnableDrive::Enable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnableRegistSAS
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnableRegistSAS final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnableRegistSAS) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnableRegistSAS");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnableRegistSAS) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnableRegistSAS");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnableRegistSAS, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnableRegistSAS::Enable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsActiveEnpcSasFire
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsActiveEnpcSasFire final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsActiveEnpcSasFire) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsActiveEnpcSasFire");
static_assert(sizeof(BPI_PlayerInterface_C_IsActiveEnpcSasFire) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsActiveEnpcSasFire");
static_assert(offsetof(BPI_PlayerInterface_C_IsActiveEnpcSasFire, IsActive) == 0x000000, "Member 'BPI_PlayerInterface_C_IsActiveEnpcSasFire::IsActive' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsActiveEnpcSasElectric
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsActiveEnpcSasElectric final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsActiveEnpcSasElectric) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsActiveEnpcSasElectric");
static_assert(sizeof(BPI_PlayerInterface_C_IsActiveEnpcSasElectric) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsActiveEnpcSasElectric");
static_assert(offsetof(BPI_PlayerInterface_C_IsActiveEnpcSasElectric, IsActive) == 0x000000, "Member 'BPI_PlayerInterface_C_IsActiveEnpcSasElectric::IsActive' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsActiveEnpcSasTeleport
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsActiveEnpcSasTeleport final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsActiveEnpcSasTeleport) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsActiveEnpcSasTeleport");
static_assert(sizeof(BPI_PlayerInterface_C_IsActiveEnpcSasTeleport) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsActiveEnpcSasTeleport");
static_assert(offsetof(BPI_PlayerInterface_C_IsActiveEnpcSasTeleport, IsActive) == 0x000000, "Member 'BPI_PlayerInterface_C_IsActiveEnpcSasTeleport::IsActive' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetDisableActionBoringIdle
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_SetDisableActionBoringIdle final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetDisableActionBoringIdle) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetDisableActionBoringIdle");
static_assert(sizeof(BPI_PlayerInterface_C_SetDisableActionBoringIdle) == 0x000002, "Wrong size on BPI_PlayerInterface_C_SetDisableActionBoringIdle");
static_assert(offsetof(BPI_PlayerInterface_C_SetDisableActionBoringIdle, bDisable) == 0x000000, "Member 'BPI_PlayerInterface_C_SetDisableActionBoringIdle::bDisable' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetDisableActionBoringIdle, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_SetDisableActionBoringIdle::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.UpdatePlayerActionAfterEvent
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent final
{
public:
	EParamAfterEventAction                        EventAction;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent");
static_assert(sizeof(BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent) == 0x000002, "Wrong size on BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent");
static_assert(offsetof(BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent, EventAction) == 0x000000, "Member 'BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent::EventAction' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent, Return) == 0x000001, "Member 'BPI_PlayerInterface_C_UpdatePlayerActionAfterEvent::Return' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.EnablePlaySpTrigger
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_EnablePlaySpTrigger final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return_;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_EnablePlaySpTrigger) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_EnablePlaySpTrigger");
static_assert(sizeof(BPI_PlayerInterface_C_EnablePlaySpTrigger) == 0x000002, "Wrong size on BPI_PlayerInterface_C_EnablePlaySpTrigger");
static_assert(offsetof(BPI_PlayerInterface_C_EnablePlaySpTrigger, bEnable) == 0x000000, "Member 'BPI_PlayerInterface_C_EnablePlaySpTrigger::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_EnablePlaySpTrigger, Return_) == 0x000001, "Member 'BPI_PlayerInterface_C_EnablePlaySpTrigger::Return_' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetEnpcSasStealthStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SetEnpcSasStealthStart final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetEnpcSasStealthStart) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetEnpcSasStealthStart");
static_assert(sizeof(BPI_PlayerInterface_C_SetEnpcSasStealthStart) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SetEnpcSasStealthStart");
static_assert(offsetof(BPI_PlayerInterface_C_SetEnpcSasStealthStart, Dummy) == 0x000000, "Member 'BPI_PlayerInterface_C_SetEnpcSasStealthStart::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetEnpcSasStealthEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SetEnpcSasStealthEnd final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetEnpcSasStealthEnd) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetEnpcSasStealthEnd");
static_assert(sizeof(BPI_PlayerInterface_C_SetEnpcSasStealthEnd) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SetEnpcSasStealthEnd");
static_assert(offsetof(BPI_PlayerInterface_C_SetEnpcSasStealthEnd, Dummy) == 0x000000, "Member 'BPI_PlayerInterface_C_SetEnpcSasStealthEnd::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.BattleSettingEm1500
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_BattleSettingEm1500 final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_BattleSettingEm1500) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_BattleSettingEm1500");
static_assert(sizeof(BPI_PlayerInterface_C_BattleSettingEm1500) == 0x000002, "Wrong size on BPI_PlayerInterface_C_BattleSettingEm1500");
static_assert(offsetof(BPI_PlayerInterface_C_BattleSettingEm1500, bBattle) == 0x000000, "Member 'BPI_PlayerInterface_C_BattleSettingEm1500::bBattle' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_BattleSettingEm1500, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_BattleSettingEm1500::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetAttackHitStop
// 0x01D0 (0x01D0 - 0x0000)
struct BPI_PlayerInterface_C_SetAttackHitStop final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           HitResult;                                         // 0x0008(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bDummy;                                            // 0x01C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetAttackHitStop) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_SetAttackHitStop");
static_assert(sizeof(BPI_PlayerInterface_C_SetAttackHitStop) == 0x0001D0, "Wrong size on BPI_PlayerInterface_C_SetAttackHitStop");
static_assert(offsetof(BPI_PlayerInterface_C_SetAttackHitStop, DamagedActor) == 0x000000, "Member 'BPI_PlayerInterface_C_SetAttackHitStop::DamagedActor' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetAttackHitStop, HitResult) == 0x000008, "Member 'BPI_PlayerInterface_C_SetAttackHitStop::HitResult' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetAttackHitStop, bDummy) == 0x0001C8, "Member 'BPI_PlayerInterface_C_SetAttackHitStop::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.BeforeCutSceneEventManagerStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart");
static_assert(sizeof(BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart) == 0x000001, "Wrong size on BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart");
static_assert(offsetof(BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_BeforeCutSceneEventManagerStart::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.CheckBattleStartTimer
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_CheckBattleStartTimer final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_CheckBattleStartTimer) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_CheckBattleStartTimer");
static_assert(sizeof(BPI_PlayerInterface_C_CheckBattleStartTimer) == 0x000001, "Wrong size on BPI_PlayerInterface_C_CheckBattleStartTimer");
static_assert(offsetof(BPI_PlayerInterface_C_CheckBattleStartTimer, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_CheckBattleStartTimer::Enable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.StoreLockTargetInterface
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_StoreLockTargetInterface final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_StoreLockTargetInterface) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_StoreLockTargetInterface");
static_assert(sizeof(BPI_PlayerInterface_C_StoreLockTargetInterface) == 0x000001, "Wrong size on BPI_PlayerInterface_C_StoreLockTargetInterface");
static_assert(offsetof(BPI_PlayerInterface_C_StoreLockTargetInterface, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_StoreLockTargetInterface::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.RestoreLockTargetInterface
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_RestoreLockTargetInterface final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_RestoreLockTargetInterface) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_RestoreLockTargetInterface");
static_assert(sizeof(BPI_PlayerInterface_C_RestoreLockTargetInterface) == 0x000001, "Wrong size on BPI_PlayerInterface_C_RestoreLockTargetInterface");
static_assert(offsetof(BPI_PlayerInterface_C_RestoreLockTargetInterface, bDummy) == 0x000000, "Member 'BPI_PlayerInterface_C_RestoreLockTargetInterface::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.ProcEndBrainCrash
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_ProcEndBrainCrash final
{
public:
	int32                                         CrashTargetNum;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_ProcEndBrainCrash) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_ProcEndBrainCrash");
static_assert(sizeof(BPI_PlayerInterface_C_ProcEndBrainCrash) == 0x000008, "Wrong size on BPI_PlayerInterface_C_ProcEndBrainCrash");
static_assert(offsetof(BPI_PlayerInterface_C_ProcEndBrainCrash, CrashTargetNum) == 0x000000, "Member 'BPI_PlayerInterface_C_ProcEndBrainCrash::CrashTargetNum' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_ProcEndBrainCrash, bDummy) == 0x000004, "Member 'BPI_PlayerInterface_C_ProcEndBrainCrash::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.AddBattleBonusInterface
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_AddBattleBonusInterface final
{
public:
	EBattleBonusAddType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_AddBattleBonusInterface) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_AddBattleBonusInterface");
static_assert(sizeof(BPI_PlayerInterface_C_AddBattleBonusInterface) == 0x000002, "Wrong size on BPI_PlayerInterface_C_AddBattleBonusInterface");
static_assert(offsetof(BPI_PlayerInterface_C_AddBattleBonusInterface, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_AddBattleBonusInterface::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_AddBattleBonusInterface, bDummy) == 0x000001, "Member 'BPI_PlayerInterface_C_AddBattleBonusInterface::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnableDriveAttack
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnableDriveAttack final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnableDriveAttack) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnableDriveAttack");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnableDriveAttack) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnableDriveAttack");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnableDriveAttack, Enable) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnableDriveAttack::Enable' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetDriveAttacked
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_SetDriveAttacked final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetDriveAttacked) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SetDriveAttacked");
static_assert(sizeof(BPI_PlayerInterface_C_SetDriveAttacked) == 0x000001, "Wrong size on BPI_PlayerInterface_C_SetDriveAttacked");
static_assert(offsetof(BPI_PlayerInterface_C_SetDriveAttacked, Dummy) == 0x000000, "Member 'BPI_PlayerInterface_C_SetDriveAttacked::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetAttackCollisionDelayTime
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerInterface_C_SetAttackCollisionDelayTime final
{
public:
	TArray<float>                                 AttackDelayTime;                                   // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetAttackCollisionDelayTime) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_SetAttackCollisionDelayTime");
static_assert(sizeof(BPI_PlayerInterface_C_SetAttackCollisionDelayTime) == 0x000018, "Wrong size on BPI_PlayerInterface_C_SetAttackCollisionDelayTime");
static_assert(offsetof(BPI_PlayerInterface_C_SetAttackCollisionDelayTime, AttackDelayTime) == 0x000000, "Member 'BPI_PlayerInterface_C_SetAttackCollisionDelayTime::AttackDelayTime' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetAttackCollisionDelayTime, Dummy) == 0x000010, "Member 'BPI_PlayerInterface_C_SetAttackCollisionDelayTime::Dummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.DebugNextBattleThinkLog
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_DebugNextBattleThinkLog final
{
public:
	struct FFPlayerAIBattleThinkTransitionData    InTransitionData;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_DebugNextBattleThinkLog) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_DebugNextBattleThinkLog");
static_assert(sizeof(BPI_PlayerInterface_C_DebugNextBattleThinkLog) == 0x000010, "Wrong size on BPI_PlayerInterface_C_DebugNextBattleThinkLog");
static_assert(offsetof(BPI_PlayerInterface_C_DebugNextBattleThinkLog, InTransitionData) == 0x000000, "Member 'BPI_PlayerInterface_C_DebugNextBattleThinkLog::InTransitionData' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_DebugNextBattleThinkLog, Return) == 0x00000C, "Member 'BPI_PlayerInterface_C_DebugNextBattleThinkLog::Return' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SASCancelEffectAndSEInterface
// 0x0003 (0x0003 - 0x0000)
struct BPI_PlayerInterface_C_SASCancelEffectAndSEInterface final
{
public:
	bool                                          bEffect;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSE;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SASCancelEffectAndSEInterface) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_SASCancelEffectAndSEInterface");
static_assert(sizeof(BPI_PlayerInterface_C_SASCancelEffectAndSEInterface) == 0x000003, "Wrong size on BPI_PlayerInterface_C_SASCancelEffectAndSEInterface");
static_assert(offsetof(BPI_PlayerInterface_C_SASCancelEffectAndSEInterface, bEffect) == 0x000000, "Member 'BPI_PlayerInterface_C_SASCancelEffectAndSEInterface::bEffect' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SASCancelEffectAndSEInterface, bSE) == 0x000001, "Member 'BPI_PlayerInterface_C_SASCancelEffectAndSEInterface::bSE' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SASCancelEffectAndSEInterface, bDummy) == 0x000002, "Member 'BPI_PlayerInterface_C_SASCancelEffectAndSEInterface::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsOverwriteAttackAutoAimSpeed
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84EE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed");
static_assert(sizeof(BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed) == 0x000008, "Wrong size on BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed");
static_assert(offsetof(BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed, bOverwrite) == 0x000000, "Member 'BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed::bOverwrite' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed, Speed) == 0x000004, "Member 'BPI_PlayerInterface_C_IsOverwriteAttackAutoAimSpeed::Speed' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetAllSasCodeList
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_GetAllSasCodeList final
{
public:
	TArray<class ABP_CableBase_C*>                NormalCode;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetAllSasCodeList) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_GetAllSasCodeList");
static_assert(sizeof(BPI_PlayerInterface_C_GetAllSasCodeList) == 0x000010, "Wrong size on BPI_PlayerInterface_C_GetAllSasCodeList");
static_assert(offsetof(BPI_PlayerInterface_C_GetAllSasCodeList, NormalCode) == 0x000000, "Member 'BPI_PlayerInterface_C_GetAllSasCodeList::NormalCode' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsNexusDriveSeeThroughBestJustDodge
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge final
{
public:
	bool                                          bBestJustDodge;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge");
static_assert(sizeof(BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge");
static_assert(offsetof(BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge, bBestJustDodge) == 0x000000, "Member 'BPI_PlayerInterface_C_IsNexusDriveSeeThroughBestJustDodge::bBestJustDodge' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.SetPlayerPhysicsIdlingInterface
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface final
{
public:
	float                                         IdlingSeconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRefreshSkin;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface");
static_assert(sizeof(BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface) == 0x000008, "Wrong size on BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface, IdlingSeconds) == 0x000000, "Member 'BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface, bRefreshSkin) == 0x000004, "Member 'BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface::bRefreshSkin' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface, bDummy) == 0x000005, "Member 'BPI_PlayerInterface_C_SetPlayerPhysicsIdlingInterface::bDummy' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_PlayerInterface_C_GetPlayerIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetPlayerIndex) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetPlayerIndex");
static_assert(sizeof(BPI_PlayerInterface_C_GetPlayerIndex) == 0x000004, "Wrong size on BPI_PlayerInterface_C_GetPlayerIndex");
static_assert(offsetof(BPI_PlayerInterface_C_GetPlayerIndex, Param_Index) == 0x000000, "Member 'BPI_PlayerInterface_C_GetPlayerIndex::Param_Index' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetPlayerWeaponList
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerInterface_C_GetPlayerWeaponList final
{
public:
	EGetPlayerWeaponType                          Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84EF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               WeaponList;                                        // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetPlayerWeaponList) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_GetPlayerWeaponList");
static_assert(sizeof(BPI_PlayerInterface_C_GetPlayerWeaponList) == 0x000018, "Wrong size on BPI_PlayerInterface_C_GetPlayerWeaponList");
static_assert(offsetof(BPI_PlayerInterface_C_GetPlayerWeaponList, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_GetPlayerWeaponList::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_GetPlayerWeaponList, WeaponList) == 0x000008, "Member 'BPI_PlayerInterface_C_GetPlayerWeaponList::WeaponList' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnemyPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsEnemyPlayer final
{
public:
	bool                                          bEnemyPlayer;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnemyPlayer) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnemyPlayer");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnemyPlayer) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsEnemyPlayer");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnemyPlayer, bEnemyPlayer) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnemyPlayer::bEnemyPlayer' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsForceWarpAble_Interface
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsForceWarpAble_Interface final
{
public:
	bool                                          bWarpAble;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsForceWarpAble_Interface) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsForceWarpAble_Interface");
static_assert(sizeof(BPI_PlayerInterface_C_IsForceWarpAble_Interface) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsForceWarpAble_Interface");
static_assert(offsetof(BPI_PlayerInterface_C_IsForceWarpAble_Interface, bWarpAble) == 0x000000, "Member 'BPI_PlayerInterface_C_IsForceWarpAble_Interface::bWarpAble' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetSkillParameter
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_GetSkillParameter final
{
public:
	EPlayerSkill                                  Skill;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLearned;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84F0[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Parameter;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetSkillParameter) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetSkillParameter");
static_assert(sizeof(BPI_PlayerInterface_C_GetSkillParameter) == 0x000008, "Wrong size on BPI_PlayerInterface_C_GetSkillParameter");
static_assert(offsetof(BPI_PlayerInterface_C_GetSkillParameter, Skill) == 0x000000, "Member 'BPI_PlayerInterface_C_GetSkillParameter::Skill' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_GetSkillParameter, bLearned) == 0x000001, "Member 'BPI_PlayerInterface_C_GetSkillParameter::bLearned' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_GetSkillParameter, Parameter) == 0x000004, "Member 'BPI_PlayerInterface_C_GetSkillParameter::Parameter' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsPlayerInputRestriction
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_IsPlayerInputRestriction final
{
public:
	EPlayerInputRestrictionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRestriction;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsPlayerInputRestriction) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsPlayerInputRestriction");
static_assert(sizeof(BPI_PlayerInterface_C_IsPlayerInputRestriction) == 0x000002, "Wrong size on BPI_PlayerInterface_C_IsPlayerInputRestriction");
static_assert(offsetof(BPI_PlayerInterface_C_IsPlayerInputRestriction, Type) == 0x000000, "Member 'BPI_PlayerInterface_C_IsPlayerInputRestriction::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_IsPlayerInputRestriction, bRestriction) == 0x000001, "Member 'BPI_PlayerInterface_C_IsPlayerInputRestriction::bRestriction' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetEnpcComp
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerInterface_C_GetEnpcComp final
{
public:
	class UBP_ENpcComponent_C*                    ReturnComp;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetEnpcComp) == 0x000008, "Wrong alignment on BPI_PlayerInterface_C_GetEnpcComp");
static_assert(sizeof(BPI_PlayerInterface_C_GetEnpcComp) == 0x000008, "Wrong size on BPI_PlayerInterface_C_GetEnpcComp");
static_assert(offsetof(BPI_PlayerInterface_C_GetEnpcComp, ReturnComp) == 0x000000, "Member 'BPI_PlayerInterface_C_GetEnpcComp::ReturnComp' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsAnimationEndTalkTurn
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsAnimationEndTalkTurn final
{
public:
	bool                                          bAnimation;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsAnimationEndTalkTurn) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsAnimationEndTalkTurn");
static_assert(sizeof(BPI_PlayerInterface_C_IsAnimationEndTalkTurn) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsAnimationEndTalkTurn");
static_assert(offsetof(BPI_PlayerInterface_C_IsAnimationEndTalkTurn, bAnimation) == 0x000000, "Member 'BPI_PlayerInterface_C_IsAnimationEndTalkTurn::bAnimation' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetTalkLookAtLocation
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerInterface_C_GetTalkLookAtLocation final
{
public:
	bool                                          bTalkLookAt;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84F1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_GetTalkLookAtLocation) == 0x000004, "Wrong alignment on BPI_PlayerInterface_C_GetTalkLookAtLocation");
static_assert(sizeof(BPI_PlayerInterface_C_GetTalkLookAtLocation) == 0x000010, "Wrong size on BPI_PlayerInterface_C_GetTalkLookAtLocation");
static_assert(offsetof(BPI_PlayerInterface_C_GetTalkLookAtLocation, bTalkLookAt) == 0x000000, "Member 'BPI_PlayerInterface_C_GetTalkLookAtLocation::bTalkLookAt' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_GetTalkLookAtLocation, Location) == 0x000004, "Member 'BPI_PlayerInterface_C_GetTalkLookAtLocation::Location' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsCameraControl
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsCameraControl final
{
public:
	bool                                          bControl;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsCameraControl) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsCameraControl");
static_assert(sizeof(BPI_PlayerInterface_C_IsCameraControl) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsCameraControl");
static_assert(offsetof(BPI_PlayerInterface_C_IsCameraControl, bControl) == 0x000000, "Member 'BPI_PlayerInterface_C_IsCameraControl::bControl' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsEnpcSASLinkAble
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_IsEnpcSASLinkAble final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsEnpcSASLinkAble) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsEnpcSASLinkAble");
static_assert(sizeof(BPI_PlayerInterface_C_IsEnpcSASLinkAble) == 0x000002, "Wrong size on BPI_PlayerInterface_C_IsEnpcSASLinkAble");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnpcSASLinkAble, Kind) == 0x000000, "Member 'BPI_PlayerInterface_C_IsEnpcSASLinkAble::Kind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_IsEnpcSASLinkAble, bOK) == 0x000001, "Member 'BPI_PlayerInterface_C_IsEnpcSASLinkAble::bOK' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsDying
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsDying final
{
public:
	bool                                          bDying;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsDying) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsDying");
static_assert(sizeof(BPI_PlayerInterface_C_IsDying) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsDying");
static_assert(offsetof(BPI_PlayerInterface_C_IsDying, bDying) == 0x000000, "Member 'BPI_PlayerInterface_C_IsDying::bDying' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsAutoTakenItem
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsAutoTakenItem final
{
public:
	bool                                          bAuto;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsAutoTakenItem) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsAutoTakenItem");
static_assert(sizeof(BPI_PlayerInterface_C_IsAutoTakenItem) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsAutoTakenItem");
static_assert(offsetof(BPI_PlayerInterface_C_IsAutoTakenItem, bAuto) == 0x000000, "Member 'BPI_PlayerInterface_C_IsAutoTakenItem::bAuto' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.GetBrainCrashStartTransform
// 0x0030 (0x0030 - 0x0000)
struct BPI_PlayerInterface_C_GetBrainCrashStartTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_GetBrainCrashStartTransform) == 0x000010, "Wrong alignment on BPI_PlayerInterface_C_GetBrainCrashStartTransform");
static_assert(sizeof(BPI_PlayerInterface_C_GetBrainCrashStartTransform) == 0x000030, "Wrong size on BPI_PlayerInterface_C_GetBrainCrashStartTransform");
static_assert(offsetof(BPI_PlayerInterface_C_GetBrainCrashStartTransform, Transform) == 0x000000, "Member 'BPI_PlayerInterface_C_GetBrainCrashStartTransform::Transform' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsExecTalkEvent
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerInterface_C_IsExecTalkEvent final
{
public:
	bool                                          bTalk;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerInterface_C_IsExecTalkEvent) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsExecTalkEvent");
static_assert(sizeof(BPI_PlayerInterface_C_IsExecTalkEvent) == 0x000001, "Wrong size on BPI_PlayerInterface_C_IsExecTalkEvent");
static_assert(offsetof(BPI_PlayerInterface_C_IsExecTalkEvent, bTalk) == 0x000000, "Member 'BPI_PlayerInterface_C_IsExecTalkEvent::bTalk' has a wrong offset!");

// Function BPI_PlayerInterface.BPI_PlayerInterface_C.IsUsingItem
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerInterface_C_IsUsingItem final
{
public:
	bool                                          bUsing;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EConsumeItemID                                ItemId;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerInterface_C_IsUsingItem) == 0x000001, "Wrong alignment on BPI_PlayerInterface_C_IsUsingItem");
static_assert(sizeof(BPI_PlayerInterface_C_IsUsingItem) == 0x000002, "Wrong size on BPI_PlayerInterface_C_IsUsingItem");
static_assert(offsetof(BPI_PlayerInterface_C_IsUsingItem, bUsing) == 0x000000, "Member 'BPI_PlayerInterface_C_IsUsingItem::bUsing' has a wrong offset!");
static_assert(offsetof(BPI_PlayerInterface_C_IsUsingItem, ItemId) == 0x000001, "Member 'BPI_PlayerInterface_C_IsUsingItem::ItemId' has a wrong offset!");

}

