#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_GameUtility

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CinematicCamera_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_GameUtility.BPFL_GameUtility_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_GameUtility_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetLowLODIndex(class UStaticMesh* StaticMesh, class UObject* __WorldContext, int32* Param_Index);
	static void SearchMaterialFromName(class UPrimitiveComponent* Primitive, const class FString& SearchSubStirng, class UObject* __WorldContext, class UMaterialInterface** FindMaterial, int32* Param_Index);
	static void SearchMeshMaterialFromSlot(class USkinnedMeshComponent* Mesh, const class FString& SearchSubStirng, class UObject* __WorldContext, class UMaterialInterface** FindMaterial, int32* Param_Index);
	static void SetHoodVisible(class USkinnedMeshComponent* Mesh, bool Visible, bool ForceReset, bool InvisibleMask, bool InvisibleBFHood, class UObject* __WorldContext);
	static void CreateAllDynamicMaterialInstance(class UMeshComponent* Mesh, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* DMArray);
	static void BindingEventPlayer(class ARSCharacterBase* Player, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, bool AllowSuffixNo, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon);
	static void Private_BindingEventPlayer(TArray<class AActor*>& BindingActors, TArray<class FText>& BindingNames, class ARSLevelSequenceActor* Sequencer, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding);
	static void SetAllEnableTick(class AActor* Actor, bool EnableTick, class UObject* __WorldContext);
	static void CreateAllDynamicMaterialInstanceFromParticle(class UParticleSystemComponent* Particle, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* DMArray);
	static void SetScalarParameterFromSearchMaterial(class USkinnedMeshComponent* Mesh, float Value, const class FString& MaterialName, class FName ParameterName, class UObject* __WorldContext);
	static void BindingEventPlayerFromText(class ARSCharacterBase* Player, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, TArray<class FText>& BindingNames, TArray<class FText>& BindingCodeBaseText, TArray<class FText>& BindingWeaponBaseText, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon);
	static void CheckWallHeight(const struct FVector& Start, const struct FVector& End, float CheckLimitHeight, class UObject* __WorldContext, bool* bHit, struct FVector* GroundPoint);
	static void GetScalarParameterValueOnMaterialByCaptureActor(class ABPCaptureActor_C* Actor, int32 MaterialIndex, class FName ParameterName, class UObject* __WorldContext, float* Value);
	static void CalcPlayerCameraToTarget(class AActor* BaseActor, class AActor* TargetActor, const struct FVector& TargetOffset, float Pitch, class UObject* __WorldContext, struct FRotator* Rotation);
	static void SetPlayerCameraToTarget(class ARSBattlePlayer_C* Player, class AActor* TargetActor, const struct FVector& TargetOffset, float Pitch, class UObject* __WorldContext);
	static void BindingEventEnemy(class ARSCharacterBase* Enemy, class ARSLevelSequenceActor* Sequencer, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding);
	static void BindingEventEnemyFromText(class ARSCharacterBase* Enemy, class ARSLevelSequenceActor* Sequencer, TArray<class FName>& BindingTags, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding);
	static void Private_BindingEventEnemy(TArray<class AActor*>& BindingActors, TArray<class FName>& BindingTags, class ARSLevelSequenceActor* Sequencer, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding);
	static void InterpolateCineCamera(class UCineCameraComponent* A, class UCineCameraComponent* B, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext);
	static void InterpolateCineCameraToDefault(class UCineCameraComponent* A, const struct FTransform& B_Transform, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext);
	static void InterpolateCineCameraParam(class UCineCameraComponent* A, const struct FCameraFilmbackSettings& B_FilmbackSettings, const struct FCameraLensSettings& B_LensSettings, const struct FCameraFocusSettings& BFocusSettings, float B_CurrentFocalLength, float B_Current_Aperture, const struct FTransform& B_Transform, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext);
	static void InterpolateCineCameraParamFromFov(class UCineCameraComponent* A, const struct FCameraFilmbackSettings& B_FilmbackSettings, const struct FCameraLensSettings& B_LensSettings, const struct FCameraFocusSettings& B_FocusSettings, float B_Current_Aperture, float B_Field_Of_View, const struct FTransform& B_Transform, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext);
	static void BindingEventNPC(class ARSCharacterBase* NPC, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, bool AllowSuffixNo, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon);
	static void BindingEventCharacterBase(class ARSCharacterBase* Character, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, const class FString& SkeletalTextPrefix, TArray<class FText>& BindingTextPrefix, TArray<class FText>& BindingCodeTextPrefix, TArray<class FText>& BindingWeaponTextPrefix, TArray<class FText>& BindingSuffix, TArray<class FText>& WeaponBindingSuffix, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon);
	static void BindingEventNPCEm(class ARSCharacterBase* NPC, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, bool AllowSuffixNo, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon);
	static void BindingEventPlayerWeaponFromText(TArray<class AActor*>& Weapons, class ARSLevelSequenceActor* Sequencer, TArray<class FText>& BindingWeaponBaseText, bool IsChangeOwnerShip, class UObject* __WorldContext, TArray<bool>* IsBinding);
	static void InternalBindingEventCharacterBaseTextList(TArray<class FText>& OutTextList, class FText& BaseText, TArray<class FText>& PrefixList, TArray<class FText>& SuffixList, class UObject* __WorldContext);
	static void GetSequencerSuffixNoList(bool AllowSuffixNo, class UObject* __WorldContext, TArray<class FText>* List);
	static void SetBehaviorTreeTickEnable(class AActor* Target, bool Enabled, class UObject* __WorldContext);
	static void CastChildRSParticleComponent(class USceneComponent* SceneComponent, class UObject* __WorldContext, class UBP_RSParticleSystemComponent_C** BP_RSParticleComp, class URSParticleSystemComponentBase** ParticleComp);
	static void SearchMeshMaterialsFromSlot(class UMeshComponent* Mesh, const class FString& SearchSubStirng, class UObject* __WorldContext, TArray<class UMaterialInterface*>* FindMaterial, TArray<int32>* Param_Index);
	static void InterpolateCineCameraToDefaultFov(class UCineCameraComponent* A, const struct FTransform& B_Transform, float B_FieldOfView, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext);
	static void SetWireVisiblity(class AActor* Actor, bool bShow, class UObject* __WorldContext);
	static void GetSequencerWeaponSuffixNoList(bool AllowSuffixNo, class UObject* __WorldContext, TArray<class FText>* List);
	static void BindingEventSheath(class AActor* BindingActor, class ARSLevelSequenceActor* Sequencer, class UObject* __WorldContext, bool* IsBinding);
	static void CanPlayCutScene(bool IsTipsCheck, class UObject* __WorldContext, bool* Ok);
	static void SetSequencerMarkPause(class ALevelSequenceActor* LevelSequenceActor, const class FString& MarkString, int32 StartFrame, class UObject* __WorldContext, bool* Successsed, struct FQualifiedFrameTime* SequencerFullTime);
	static void CancelSequencerMarkPause(class ALevelSequenceActor* LevelSequenceActor, const class FString& RestartMarkString, const struct FQualifiedFrameTime& FullTime, class UObject* __WorldContext, bool* Successsed);

	static void IsPlayerActor(class AActor* Actor, class UObject* __WorldContext, bool* Valid);
	static void GetStaticMeshTriangleData(class UStaticMesh* StaticMesh, int32 LOD_Index, int32 Section_Index, const struct FVector& Scale3D, class UObject* __WorldContext, struct FMeshTriangleData* MeshTriangleData);
	static void GetPlayerIDFromSASKind(E_SASKind Sas, class UObject* __WorldContext, EPlayerID* PlayerId);
	static void GetSASKindFromPlayerID(EPlayerID PlayerId, class UObject* __WorldContext, E_SASKind* Sas);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_GameUtility_C">();
	}
	static class UBPFL_GameUtility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_GameUtility_C>();
	}
};
static_assert(alignof(UBPFL_GameUtility_C) == 0x000008, "Wrong alignment on UBPFL_GameUtility_C");
static_assert(sizeof(UBPFL_GameUtility_C) == 0x000028, "Wrong size on UBPFL_GameUtility_C");

}

