#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerHardenComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerHardenComponent.BP_PlayerHardenComponent_C
// 0x00C0 (0x0180 - 0x00C0)
class UBP_PlayerHardenComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARsBattleHero_C*                        OwnerHero;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 OwnerMesh;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenLerpTime;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHardenOn;                                         // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHardenLerp;                                       // 0x00E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4148[0x2];                                     // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HardenLerpTimerOld;                                // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             HardenLerpTimer;                                   // 0x00EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HardenRate;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenRateStt;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenRateEnd;                                     // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamage;                                           // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDamageRise;                                       // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4149[0x2];                                     // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RiseTime;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DropTime;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RateMin;                                           // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RateMax;                                           // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadiusMin;                                         // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadiusMax;                                         // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageRate;                                        // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitParam;                                        // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_414A[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoHardenCoolDownTime;                            // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414B[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TickRefList;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bGuardBadStatus;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_414C[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             AutoHardenTimer;                                   // 0x0144(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             CoolDownTimer;                                     // 0x0150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHardenFistOn;                                     // 0x015C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHardenFistLerp;                                   // 0x015D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_414D[0x2];                                     // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             HardenFistTimer;                                   // 0x0160(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_414E[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HardenStartEmissivePowCurve;                       // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHardenStartParameter*                  HardenStartDataAsset;                              // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerHardenComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Initialize();
	void Update();
	void SetHarden(bool Harden_on_in, float Harden_time_in);
	void IsHarden(bool* Return);
	void GetHardenDamageCutRate(float* Damage_cut_rate);
	void SetHardenDamage();
	void SetSasHarden(bool Harden_on_in);
	void IsGuardBadStatus(bool* Return);
	void CheckAutoHarden(bool* Return);
	void UpdateSystem();
	void DebugDisplayState();
	void SetHardenFist(bool Fist_on_in);
	void UpdateHardenBody();
	void UpdateHardenFist();
	void UpdateHardenDamage();
	void UpdateAutoHarden();
	void SetTickRef(bool Flag_in, class FName Ref_name_in);
	void DebugDisplayTickRef();
	void InitParam();
	void SubRemainTime(float SubTime);
	void SetDamageEffectType(bool bHarden);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerHardenComponent_C">();
	}
	static class UBP_PlayerHardenComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerHardenComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerHardenComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerHardenComponent_C");
static_assert(sizeof(UBP_PlayerHardenComponent_C) == 0x000180, "Wrong size on UBP_PlayerHardenComponent_C");
static_assert(offsetof(UBP_PlayerHardenComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_PlayerHardenComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, OwnerHero) == 0x0000C8, "Member 'UBP_PlayerHardenComponent_C::OwnerHero' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, OwnerPlayer) == 0x0000D0, "Member 'UBP_PlayerHardenComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, OwnerMesh) == 0x0000D8, "Member 'UBP_PlayerHardenComponent_C::OwnerMesh' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenLerpTime) == 0x0000E0, "Member 'UBP_PlayerHardenComponent_C::HardenLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bHardenOn) == 0x0000E4, "Member 'UBP_PlayerHardenComponent_C::bHardenOn' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bHardenLerp) == 0x0000E5, "Member 'UBP_PlayerHardenComponent_C::bHardenLerp' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenLerpTimerOld) == 0x0000E8, "Member 'UBP_PlayerHardenComponent_C::HardenLerpTimerOld' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenLerpTimer) == 0x0000EC, "Member 'UBP_PlayerHardenComponent_C::HardenLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenRate) == 0x0000F8, "Member 'UBP_PlayerHardenComponent_C::HardenRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenRateStt) == 0x0000FC, "Member 'UBP_PlayerHardenComponent_C::HardenRateStt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenRateEnd) == 0x000100, "Member 'UBP_PlayerHardenComponent_C::HardenRateEnd' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bDamage) == 0x000104, "Member 'UBP_PlayerHardenComponent_C::bDamage' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bDamageRise) == 0x000105, "Member 'UBP_PlayerHardenComponent_C::bDamageRise' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, RiseTime) == 0x000108, "Member 'UBP_PlayerHardenComponent_C::RiseTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, DropTime) == 0x00010C, "Member 'UBP_PlayerHardenComponent_C::DropTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, RateMin) == 0x000110, "Member 'UBP_PlayerHardenComponent_C::RateMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, RateMax) == 0x000114, "Member 'UBP_PlayerHardenComponent_C::RateMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, RadiusMin) == 0x000118, "Member 'UBP_PlayerHardenComponent_C::RadiusMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, RadiusMax) == 0x00011C, "Member 'UBP_PlayerHardenComponent_C::RadiusMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, DamageRate) == 0x000120, "Member 'UBP_PlayerHardenComponent_C::DamageRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bInitParam) == 0x000124, "Member 'UBP_PlayerHardenComponent_C::bInitParam' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, AutoHardenCoolDownTime) == 0x000128, "Member 'UBP_PlayerHardenComponent_C::AutoHardenCoolDownTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, TickRefList) == 0x000130, "Member 'UBP_PlayerHardenComponent_C::TickRefList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bGuardBadStatus) == 0x000140, "Member 'UBP_PlayerHardenComponent_C::bGuardBadStatus' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, AutoHardenTimer) == 0x000144, "Member 'UBP_PlayerHardenComponent_C::AutoHardenTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, CoolDownTimer) == 0x000150, "Member 'UBP_PlayerHardenComponent_C::CoolDownTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bHardenFistOn) == 0x00015C, "Member 'UBP_PlayerHardenComponent_C::bHardenFistOn' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, bHardenFistLerp) == 0x00015D, "Member 'UBP_PlayerHardenComponent_C::bHardenFistLerp' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenFistTimer) == 0x000160, "Member 'UBP_PlayerHardenComponent_C::HardenFistTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenStartEmissivePowCurve) == 0x000170, "Member 'UBP_PlayerHardenComponent_C::HardenStartEmissivePowCurve' has a wrong offset!");
static_assert(offsetof(UBP_PlayerHardenComponent_C, HardenStartDataAsset) == 0x000178, "Member 'UBP_PlayerHardenComponent_C::HardenStartDataAsset' has a wrong offset!");

}

