#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPCaptureActor

#include "Basic.hpp"

#include "BPCaptureActor_classes.hpp"
#include "BPCaptureActor_parameters.hpp"


namespace SDK
{

// Function BPCaptureActor.BPCaptureActor_C.ExecuteUbergraph_BPCaptureActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::ExecuteUbergraph_BPCaptureActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ExecuteUbergraph_BPCaptureActor");

	Params::BPCaptureActor_C_ExecuteUbergraph_BPCaptureActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.DelayFirstRipSync
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::DelayFirstRipSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "DelayFirstRipSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateGeneralCapturePost
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::PrivateGeneralCapturePost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateGeneralCapturePost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.ForceCaptureFinish
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ForceCaptureFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ForceCaptureFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.CancelTAACaptureSetting
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::CancelTAACaptureSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CancelTAACaptureSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.TAACaptureSetting
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::TAACaptureSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "TAACaptureSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.DebugRetryCapture
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::DebugRetryCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "DebugRetryCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.AlphaFadeFrameParticle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::AlphaFadeFrameParticle(class UCurveFloat* Curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "AlphaFadeFrameParticle");

	Params::BPCaptureActor_C_AlphaFadeFrameParticle Parms{};

	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.StoreSequencerInGameTransform
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequnece                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SequencePosition                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::StoreSequencerInGameTransform(class ULevelSequence* Sequnece, float SequencePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StoreSequencerInGameTransform");

	Params::BPCaptureActor_C_StoreSequencerInGameTransform Parms{};

	Parms.Sequnece = Sequnece;
	Parms.SequencePosition = SequencePosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetBoadAddAnimWeightCurve
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetBoadAddAnimWeightCurve(class UCurveFloat* Curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetBoadAddAnimWeightCurve");

	Params::BPCaptureActor_C_SetBoadAddAnimWeightCurve Parms{};

	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.OnCaptureModelMontageEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::OnCaptureModelMontageEnd(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "OnCaptureModelMontageEnd");

	Params::BPCaptureActor_C_OnCaptureModelMontageEnd Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineReset
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateCapturePost
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::PrivateCapturePost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateCapturePost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.StopCrossFadeSequencer
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::StopCrossFadeSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StopCrossFadeSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimeline
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             XParamName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             YParamName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      XCurve                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      YCurve                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XParamRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   YParamRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sp_Add                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sp_Mul                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::BoardParamCurveTimeline(class FName XParamName, class FName YParamName, class UCurveFloat* XCurve, class UCurveFloat* YCurve, float Speed, float XParamRate, float YParamRate, const struct FVector& Sp_Add, const struct FVector& Sp_Mul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimeline");

	Params::BPCaptureActor_C_BoardParamCurveTimeline Parms{};

	Parms.XParamName = XParamName;
	Parms.YParamName = YParamName;
	Parms.XCurve = XCurve;
	Parms.YCurve = YCurve;
	Parms.Speed = Speed;
	Parms.XParamRate = XParamRate;
	Parms.YParamRate = YParamRate;
	Parms.Sp_Add = std::move(Sp_Add);
	Parms.Sp_Mul = std::move(Sp_Mul);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.StartTelepathyLoop
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::StartTelepathyLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StartTelepathyLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.CrossFade
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::CrossFade(class UCurveFloat* Curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CrossFade");

	Params::BPCaptureActor_C_CrossFade Parms{};

	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EventSettingNormalBoard
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::EventSettingNormalBoard(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EventSettingNormalBoard");

	Params::BPCaptureActor_C_EventSettingNormalBoard Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EventSettingGeneralBoard
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::EventSettingGeneralBoard(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EventSettingGeneralBoard");

	Params::BPCaptureActor_C_EventSettingGeneralBoard Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EventOnMontageBlendingOut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::EventOnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EventOnMontageBlendingOut");

	Params::BPCaptureActor_C_EventOnMontageBlendingOut Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.StopWaitSequencer
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::StopWaitSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StopWaitSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.StopSequenceAlpha
// (BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::StopSequenceAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StopSequenceAlpha");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SequenceAlpha
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SequenceAlpha(float Time, float Start, float End, class UCurveFloat* Curve, bool Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SequenceAlpha");

	Params::BPCaptureActor_C_SequenceAlpha Parms{};

	Parms.Time = Time;
	Parms.Start = Start;
	Parms.End = End;
	Parms.Curve = Curve;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetEffectAlpha
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetEffectAlpha(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetEffectAlpha");

	Params::BPCaptureActor_C_SetEffectAlpha Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetEffectMove
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Offset                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetEffectMove(const struct FVector2D& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetEffectMove");

	Params::BPCaptureActor_C_SetEffectMove Parms{};

	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetEffectScale
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetEffectScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetEffectScale");

	Params::BPCaptureActor_C_SetEffectScale Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SequenceMove
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SequenceMove(float Time, const struct FVector2D& Start, const struct FVector2D& End, class UCurveFloat* Curve, bool Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SequenceMove");

	Params::BPCaptureActor_C_SequenceMove Parms{};

	Parms.Time = Time;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Curve = Curve;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SequenceScale
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SequenceScale(float Time, float Start, float End, class UCurveFloat* Curve, bool Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SequenceScale");

	Params::BPCaptureActor_C_SequenceScale Parms{};

	Parms.Time = Time;
	Parms.Start = Start;
	Parms.End = End;
	Parms.Curve = Curve;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EventSettingCapture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaAnimationTableName                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CharaAnimationStartFrame                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::EventSettingCapture(class FName CapturePresetName, class FName CharaAnimationTableName, float CharaAnimationStartFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EventSettingCapture");

	Params::BPCaptureActor_C_EventSettingCapture Parms{};

	Parms.CapturePresetName = CapturePresetName;
	Parms.CharaAnimationTableName = CharaAnimationTableName;
	Parms.CharaAnimationStartFrame = CharaAnimationStartFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ReceiveTick");

	Params::BPCaptureActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABPCaptureActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectNoiseAdvanced
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      MonitorNoiseCurve                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveVector*                     FringeCurve                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveVector*                     GlitchCurve                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      NoiseCurve                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::EffectNoiseAdvanced(class UCurveFloat* MonitorNoiseCurve, class UCurveVector* FringeCurve, class UCurveVector* GlitchCurve, class UCurveFloat* NoiseCurve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectNoiseAdvanced");

	Params::BPCaptureActor_C_EffectNoiseAdvanced Parms{};

	Parms.MonitorNoiseCurve = MonitorNoiseCurve;
	Parms.FringeCurve = FringeCurve;
	Parms.GlitchCurve = GlitchCurve;
	Parms.NoiseCurve = NoiseCurve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectNoise
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::EffectNoise(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectNoise");

	Params::BPCaptureActor_C_EffectNoise Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectGaussFilter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CurveReverse                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::EffectGaussFilter(class UCurveFloat* Curve, bool CurveReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectGaussFilter");

	Params::BPCaptureActor_C_EffectGaussFilter Parms{};

	Parms.Curve = Curve;
	Parms.CurveReverse = CurveReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.FrameParticleAlphaTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::FrameParticleAlphaTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "FrameParticleAlphaTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.FrameParticleAlphaTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::FrameParticleAlphaTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "FrameParticleAlphaTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.TimelineAddBoardAnimWeightCurve__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::TimelineAddBoardAnimWeightCurve__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "TimelineAddBoardAnimWeightCurve__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.TimelineAddBoardAnimWeightCurve__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::TimelineAddBoardAnimWeightCurve__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "TimelineAddBoardAnimWeightCurve__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineBase_3__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineBase_3__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineBase_3__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineBase_3__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineBase_3__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineBase_3__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineBase_2__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineBase_2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineBase_2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineBase_2__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineBase_2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineBase_2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineBase_1__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineBase_1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineBase_1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.BoardParamCurveTimelineBase_1__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::BoardParamCurveTimelineBase_1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "BoardParamCurveTimelineBase_1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.TelepathyTimeLine__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::TelepathyTimeLine__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "TelepathyTimeLine__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.TelepathyTimeLine__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::TelepathyTimeLine__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "TelepathyTimeLine__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.CrossFadeTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::CrossFadeTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CrossFadeTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.CrossFadeTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::CrossFadeTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CrossFadeTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectAlphaTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectAlphaTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectAlphaTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectAlphaTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectAlphaTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectAlphaTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectMoveTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectMoveTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectMoveTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectMoveTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectMoveTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectMoveTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectScaleTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectScaleTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectScaleTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectScaleTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectScaleTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectScaleTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.NoiseAdvancedTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::NoiseAdvancedTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "NoiseAdvancedTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.NoiseAdvancedTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::NoiseAdvancedTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "NoiseAdvancedTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.NoiseTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::NoiseTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "NoiseTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.NoiseTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::NoiseTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "NoiseTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectGaussFilterTimeline__UpdateFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectGaussFilterTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectGaussFilterTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EffectGaussFilterTimeline__FinishedFunc
// (BlueprintEvent)

void ABPCaptureActor_C::EffectGaussFilterTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EffectGaussFilterTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SettingCapture
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BoardMeshIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaFaceAnimationName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMeshTableID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMaterialTableID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LightPresetName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequence*                   CaptureSequence                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureSequencePosition                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TextureRowName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MovieTextureRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseSaveTexture                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSeamlessInGameCapture                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNoStaticPlSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHiddenPlFrameEffect                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             CharaEyePresetName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeXAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeYAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaPartsDTRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventCaptureRenderType                 RenderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ToneMapCounterValue                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SettingCapture(int32 BoardMeshIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsUseSaveTexture, bool IsSeamlessInGameCapture, bool IsNoStaticPlSetting, bool IsHiddenPlFrameEffect, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, EEventCaptureRenderType RenderType, float ToneMapCounterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingCapture");

	Params::BPCaptureActor_C_SettingCapture Parms{};

	Parms.BoardMeshIndex = BoardMeshIndex;
	Parms.CapturePresetName = CapturePresetName;
	Parms.CharaAnimationName = CharaAnimationName;
	Parms.CharaFaceAnimationName = CharaFaceAnimationName;
	Parms.NpcMeshTableID = NpcMeshTableID;
	Parms.NpcMaterialTableID = NpcMaterialTableID;
	Parms.LightPresetName = LightPresetName;
	Parms.CaptureSequence = CaptureSequence;
	Parms.CaptureSequencePosition = CaptureSequencePosition;
	Parms.TextureRowName = TextureRowName;
	Parms.StaticPlType = StaticPlType;
	Parms.MovieTextureRowName = MovieTextureRowName;
	Parms.IsUseSaveTexture = IsUseSaveTexture;
	Parms.IsSeamlessInGameCapture = IsSeamlessInGameCapture;
	Parms.IsNoStaticPlSetting = IsNoStaticPlSetting;
	Parms.IsHiddenPlFrameEffect = IsHiddenPlFrameEffect;
	Parms.CharaEyePresetName = CharaEyePresetName;
	Parms.EyeXAxisThreshold = EyeXAxisThreshold;
	Parms.EyeYAxisThreshold = EyeYAxisThreshold;
	Parms.CharaPartsDTRowName = CharaPartsDTRowName;
	Parms.RenderType = RenderType;
	Parms.ToneMapCounterValue = ToneMapCounterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PlayBoardAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimationIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAddMotion                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UCurveFloat>       PlayRateCurveData                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::PlayBoardAnimation(const class FString& BoardAnimationIndex, bool IsLoop, class FName SocketName, bool IsAddMotion, EStaticPlType StaticPlType, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PlayBoardAnimation");

	Params::BPCaptureActor_C_PlayBoardAnimation Parms{};

	Parms.BoardAnimationIndex = std::move(BoardAnimationIndex);
	Parms.IsLoop = IsLoop;
	Parms.SocketName = SocketName;
	Parms.IsAddMotion = IsAddMotion;
	Parms.StaticPlType = StaticPlType;
	Parms.PlayRateCurveData = PlayRateCurveData;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BPCaptureActor.BPCaptureActor_C.SetPlaneMeshHiddenInGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHidden                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SetPlaneMeshHiddenInGame(bool IsHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetPlaneMeshHiddenInGame");

	Params::BPCaptureActor_C_SetPlaneMeshHiddenInGame Parms{};

	Parms.IsHidden = IsHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.AddBoardAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimationIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::AddBoardAnimation(const class FString& BoardAnimationIndex, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "AddBoardAnimation");

	Params::BPCaptureActor_C_AddBoardAnimation Parms{};

	Parms.BoardAnimationIndex = std::move(BoardAnimationIndex);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.CaptureScene
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::CaptureScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CaptureScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.IsEndMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsEndMotion                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::IsEndMotion(bool* Param_IsEndMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "IsEndMotion");

	Params::BPCaptureActor_C_IsEndMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsEndMotion != nullptr)
		*Param_IsEndMotion = Parms.Param_IsEndMotion;
}


// Function BPCaptureActor.BPCaptureActor_C.GetAnimSequenceForAnimNamePath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Prefix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsBoardOrbitAnimation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* ABPCaptureActor_C::GetAnimSequenceForAnimNamePath(const class FString& Prefix, bool IsBoardOrbitAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetAnimSequenceForAnimNamePath");

	Params::BPCaptureActor_C_GetAnimSequenceForAnimNamePath Parms{};

	Parms.Prefix = std::move(Prefix);
	Parms.IsBoardOrbitAnimation = IsBoardOrbitAnimation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.GetCharaAnimSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* ABPCaptureActor_C::GetCharaAnimSequence(class UObject* Object, class FName InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetCharaAnimSequence");

	Params::BPCaptureActor_C_GetCharaAnimSequence Parms{};

	Parms.Object = Object;
	Parms.InName = InName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.EventEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCrossFadeActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::EventEnd(bool IsCrossFadeActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EventEnd");

	Params::BPCaptureActor_C_EventEnd Parms{};

	Parms.IsCrossFadeActor = IsCrossFadeActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.GetCharaAnimInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* ABPCaptureActor_C::GetCharaAnimInstance(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetCharaAnimInstance");

	Params::BPCaptureActor_C_GetCharaAnimInstance Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.GetCharaFaceAnimMontage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           FacialName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFaceAnimation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

class UAnimationAsset* ABPCaptureActor_C::GetCharaFaceAnimMontage(class UObject* Object, const class FString& FacialName, bool* IsFaceAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetCharaFaceAnimMontage");

	Params::BPCaptureActor_C_GetCharaFaceAnimMontage Parms{};

	Parms.Object = Object;
	Parms.FacialName = std::move(FacialName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsFaceAnimation != nullptr)
		*IsFaceAnimation = Parms.IsFaceAnimation;

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.GetCharaBodyAnimMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* ABPCaptureActor_C::GetCharaBodyAnimMontage(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetCharaBodyAnimMontage");

	Params::BPCaptureActor_C_GetCharaBodyAnimMontage Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.CalcTimelineRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTimelineComponent*               Timeline                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::CalcTimelineRate(class UTimelineComponent* Timeline, class UCurveFloat* Curve, float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CalcTimelineRate");

	Params::BPCaptureActor_C_CalcTimelineRate Parms{};

	Parms.Timeline = Timeline;
	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BPCaptureActor.BPCaptureActor_C.StartEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::StartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StartEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.EndEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::EndEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EndEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetTicks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SetTicks(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetTicks");

	Params::BPCaptureActor_C_SetTicks Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.GetBP_static_pl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       ASCharacter                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::GetBP_static_pl(class ACharacter** ASCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetBP_static_pl");

	Params::BPCaptureActor_C_GetBP_static_pl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ASCharacter != nullptr)
		*ASCharacter = Parms.ASCharacter;
}


// Function BPCaptureActor.BPCaptureActor_C.SetActorLocationForSocketName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetActorLocationForSocketName(class FName SocketName, EStaticPlType StaticPlType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetActorLocationForSocketName");

	Params::BPCaptureActor_C_SetActorLocationForSocketName Parms{};

	Parms.SocketName = SocketName;
	Parms.StaticPlType = StaticPlType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetupAlphaSort
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetupAlphaSort()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupAlphaSort");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetCaptureShowOnlyActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetCaptureShowOnlyActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetCaptureShowOnlyActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetSceneCaptureRenderTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetSceneCaptureRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetSceneCaptureRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.ClearSceneCaptureRenderTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ClearSceneCaptureRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ClearSceneCaptureRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.CheckAutoBoardAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::CheckAutoBoardAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CheckAutoBoardAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.StartAutoBoardAnimaton
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimatonName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UAnimMontage*                     AddBordAnimMontage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UCurveFloat>       PlayRateCurveData                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABPCaptureActor_C::StartAutoBoardAnimaton(const class FString& BoardAnimatonName, class UAnimMontage* AddBordAnimMontage, EStaticPlType StaticPlType, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StartAutoBoardAnimaton");

	Params::BPCaptureActor_C_StartAutoBoardAnimaton Parms{};

	Parms.BoardAnimatonName = std::move(BoardAnimatonName);
	Parms.AddBordAnimMontage = AddBordAnimMontage;
	Parms.StaticPlType = StaticPlType;
	Parms.PlayRateCurveData = PlayRateCurveData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.LoadAsset
// (Protected, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.ResetBoardAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ResetBoardAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ResetBoardAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetAnimMontageTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetAnimMontageTransform(const class FString& BoardAnimName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetAnimMontageTransform");

	Params::BPCaptureActor_C_SetAnimMontageTransform Parms{};

	Parms.BoardAnimName = std::move(BoardAnimName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.CaptureSceneGeneralStatic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   InSequence                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewPlaybackPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSeamlessInGameCapture                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EEventCaptureRenderType                 RenderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ToneMapCounterValue                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::CaptureSceneGeneralStatic(class ULevelSequence* InSequence, float NewPlaybackPosition, bool IsSeamlessInGameCapture, EEventCaptureRenderType RenderType, float ToneMapCounterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "CaptureSceneGeneralStatic");

	Params::BPCaptureActor_C_CaptureSceneGeneralStatic Parms{};

	Parms.InSequence = InSequence;
	Parms.NewPlaybackPosition = NewPlaybackPosition;
	Parms.IsSeamlessInGameCapture = IsSeamlessInGameCapture;
	Parms.RenderType = RenderType;
	Parms.ToneMapCounterValue = ToneMapCounterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SettingMovieTexture
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         MaterialInstance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MovieTextureRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SettingMovieTexture(class UMaterialInstanceDynamic* MaterialInstance, class FName MovieTextureRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingMovieTexture");

	Params::BPCaptureActor_C_SettingMovieTexture Parms{};

	Parms.MaterialInstance = MaterialInstance;
	Parms.MovieTextureRowName = MovieTextureRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetTexParameterForTexDatatable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         AsTexture                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetTexParameterForTexDatatable(class UDataTable* DataTable, class FName RowName, class UMaterialInstanceDynamic* InputPin, class UTexture** AsTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetTexParameterForTexDatatable");

	Params::BPCaptureActor_C_SetTexParameterForTexDatatable Parms{};

	Parms.DataTable = DataTable;
	Parms.RowName = RowName;
	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);

	if (AsTexture != nullptr)
		*AsTexture = Parms.AsTexture;
}


// Function BPCaptureActor.BPCaptureActor_C.SettingGeneralBoardAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SettingGeneralBoardAnimation(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingGeneralBoardAnimation");

	Params::BPCaptureActor_C_SettingGeneralBoardAnimation Parms{};

	Parms.AnimMontage = AnimMontage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SettingNormalBoardAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SettingNormalBoardAnimation(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingNormalBoardAnimation");

	Params::BPCaptureActor_C_SettingNormalBoardAnimation Parms{};

	Parms.AnimMontage = AnimMontage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateSetupGeneralStaticParticle
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            LevelSequenceActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>BindingID                                              (Parm, OutParm, HasGetValueTypeHash)

void ABPCaptureActor_C::PrivateSetupGeneralStaticParticle(class ARSLevelSequenceActor* LevelSequenceActor, TArray<struct FMovieSceneObjectBindingID>* BindingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateSetupGeneralStaticParticle");

	Params::BPCaptureActor_C_PrivateSetupGeneralStaticParticle Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;

	UObject::ProcessEvent(Func, &Parms);

	if (BindingID != nullptr)
		*BindingID = std::move(Parms.BindingID);
}


// Function BPCaptureActor.BPCaptureActor_C.SetupPPM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSSceneCaptureComponent2D*       SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCineCameraComponent*             AddPostProcess                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetupPPM(class URSSceneCaptureComponent2D* SceneCapture, class UCineCameraComponent* AddPostProcess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupPPM");

	Params::BPCaptureActor_C_SetupPPM Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.AddPostProcess = AddPostProcess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetTelepathyParticleMIDArray
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   ParticleComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetTelepathyParticleMIDArray(class URSParticleSystemComponentBase* ParticleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetTelepathyParticleMIDArray");

	Params::BPCaptureActor_C_SetTelepathyParticleMIDArray Parms{};

	Parms.ParticleComponent = ParticleComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.UpdateAnimationRate
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::UpdateAnimationRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "UpdateAnimationRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SettingNpcModel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CharaAnimName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaFaceAnimName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMeshTableID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMaterialTableID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SettingNpcModel(class FName CharaAnimName, class FName CharaFaceAnimName, int32 NpcMeshTableID, int32 NpcMaterialTableID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingNpcModel");

	Params::BPCaptureActor_C_SettingNpcModel Parms{};

	Parms.CharaAnimName = CharaAnimName;
	Parms.CharaFaceAnimName = CharaFaceAnimName;
	Parms.NpcMeshTableID = NpcMeshTableID;
	Parms.NpcMaterialTableID = NpcMaterialTableID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetModelHiddenInGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHiddenCaptureModel                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SetModelHiddenInGame(bool IsHiddenCaptureModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetModelHiddenInGame");

	Params::BPCaptureActor_C_SetModelHiddenInGame Parms{};

	Parms.IsHiddenCaptureModel = IsHiddenCaptureModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.GetAnimSequenceForAnimFullPath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Prefix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* ABPCaptureActor_C::GetAnimSequenceForAnimFullPath(const class FString& Prefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetAnimSequenceForAnimFullPath");

	Params::BPCaptureActor_C_GetAnimSequenceForAnimFullPath Parms{};

	Parms.Prefix = std::move(Prefix);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.PlayNodeAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimationIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PlayNodeAnimation(const class FString& BoardAnimationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PlayNodeAnimation");

	Params::BPCaptureActor_C_PlayNodeAnimation Parms{};

	Parms.BoardAnimationIndex = std::move(BoardAnimationIndex);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetAllPartsVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewVisibility                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SetAllPartsVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetAllPartsVisibility");

	Params::BPCaptureActor_C_SetAllPartsVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.ClearStoreRenderTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ClearStoreRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ClearStoreRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetCharaBodyAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetCharaBodyAnimMontage(class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetCharaBodyAnimMontage");

	Params::BPCaptureActor_C_SetCharaBodyAnimMontage Parms{};

	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetCharaFaceAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetCharaFaceAnimMontage(class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetCharaFaceAnimMontage");

	Params::BPCaptureActor_C_SetCharaFaceAnimMontage Parms{};

	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.StartChangeFaceTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFChangeFaceData>         Param_ChangeFaceDataArray                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABPCaptureActor_C::StartChangeFaceTimer(TArray<struct FFChangeFaceData>& Param_ChangeFaceDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StartChangeFaceTimer");

	Params::BPCaptureActor_C_StartChangeFaceTimer Parms{};

	Parms.Param_ChangeFaceDataArray = std::move(Param_ChangeFaceDataArray);

	UObject::ProcessEvent(Func, &Parms);

	Param_ChangeFaceDataArray = std::move(Parms.Param_ChangeFaceDataArray);
}


// Function BPCaptureActor.BPCaptureActor_C.OnChangeFaceTimerEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::OnChangeFaceTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "OnChangeFaceTimerEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetChangeFaceTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetChangeFaceTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetChangeFaceTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.ClearChangeFaceTimerData
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ClearChangeFaceTimerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ClearChangeFaceTimerData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SettingCharaBGCapture
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SettingCharaBGCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingCharaBGCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetCharaBGData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetCharaBGData(class FName CapturePresetName, EStaticPlType StaticPlType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetCharaBGData");

	Params::BPCaptureActor_C_SetCharaBGData Parms{};

	Parms.CapturePresetName = CapturePresetName;
	Parms.StaticPlType = StaticPlType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.UpdateCaptureSceneFace
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::UpdateCaptureSceneFace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "UpdateCaptureSceneFace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PlayCharaMeshMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InTimeToStartMontageAt                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PlayCharaMeshMontage(class UAnimMontage* AnimMontage, float InPlayRate, float InTimeToStartMontageAt, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PlayCharaMeshMontage");

	Params::BPCaptureActor_C_PlayCharaMeshMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.InPlayRate = InPlayRate;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;
	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.UpdatePhaseAnimCurveData
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::UpdatePhaseAnimCurveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "UpdatePhaseAnimCurveData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.RemoveSequencerInPsychicObject
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::RemoveSequencerInPsychicObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "RemoveSequencerInPsychicObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.OnCaptureSequencerFinished
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RemoveEventCommand                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::OnCaptureSequencerFinished(bool RemoveEventCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "OnCaptureSequencerFinished");

	Params::BPCaptureActor_C_OnCaptureSequencerFinished Parms{};

	Parms.RemoveEventCommand = RemoveEventCommand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.StoreSequencerInGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SequencePosition                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::StoreSequencerInGame(class ULevelSequence* Sequencer, float SequencePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StoreSequencerInGame");

	Params::BPCaptureActor_C_StoreSequencerInGame Parms{};

	Parms.Sequencer = Sequencer;
	Parms.SequencePosition = SequencePosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateResetGemeralParticles
// (Private, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::PrivateResetGemeralParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateResetGemeralParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PlayBoardCurveValueMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveFloat*                      MontageWeghtCurveAsset                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PlayBoardCurveValueMontage(class UAnimMontage* AnimMontage, bool IsLoop, class UCurveFloat* MontageWeghtCurveAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PlayBoardCurveValueMontage");

	Params::BPCaptureActor_C_PlayBoardCurveValueMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.IsLoop = IsLoop;
	Parms.MontageWeghtCurveAsset = MontageWeghtCurveAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetupSkeletalMeshes
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetupSkeletalMeshes(class ARSLevelSequenceActor* Sequencer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupSkeletalMeshes");

	Params::BPCaptureActor_C_SetupSkeletalMeshes Parms{};

	Parms.Sequencer = Sequencer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.ClearFacialModelCaptureMesh
// (Private, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ClearFacialModelCaptureMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ClearFacialModelCaptureMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetCharaEyeData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CharaEyePresetName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeXAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeYAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetCharaEyeData(class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetCharaEyeData");

	Params::BPCaptureActor_C_SetCharaEyeData Parms{};

	Parms.CharaEyePresetName = CharaEyePresetName;
	Parms.EyeXAxisThreshold = EyeXAxisThreshold;
	Parms.EyeYAxisThreshold = EyeYAxisThreshold;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SettingCharaFacePartsMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FaceAnimationName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaPartsDTRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SettingCharaFacePartsMesh(class FName FaceAnimationName, class FName CharaPartsDTRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SettingCharaFacePartsMesh");

	Params::BPCaptureActor_C_SettingCharaFacePartsMesh Parms{};

	Parms.FaceAnimationName = FaceAnimationName;
	Parms.CharaPartsDTRowName = CharaPartsDTRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetDebugPl
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetDebugPl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetDebugPl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetFrameParticleAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetFrameParticleAlpha(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetFrameParticleAlpha");

	Params::BPCaptureActor_C_SetFrameParticleAlpha Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetCharaFaceMaterialParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetCharaFaceMaterialParameter(class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetCharaFaceMaterialParameter");

	Params::BPCaptureActor_C_SetCharaFaceMaterialParameter Parms{};

	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetSequenceInGamePartyMember
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetSequenceInGamePartyMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetSequenceInGamePartyMember");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateSetupStageParam
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_MenuPlayerBase_C*>     BindingSpawnPlayers                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class ASkeletalMeshActor*>       BindingSpawnWeapons                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    UseInGamePlayer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::PrivateSetupStageParam(class ARSLevelSequenceActor* LevelSequence, TArray<class ABP_MenuPlayerBase_C*>& BindingSpawnPlayers, TArray<class ASkeletalMeshActor*>& BindingSpawnWeapons, bool UseInGamePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateSetupStageParam");

	Params::BPCaptureActor_C_PrivateSetupStageParam Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.BindingSpawnPlayers = std::move(BindingSpawnPlayers);
	Parms.BindingSpawnWeapons = std::move(BindingSpawnWeapons);
	Parms.UseInGamePlayer = UseInGamePlayer;

	UObject::ProcessEvent(Func, &Parms);

	BindingSpawnPlayers = std::move(Parms.BindingSpawnPlayers);
	BindingSpawnWeapons = std::move(Parms.BindingSpawnWeapons);
}


// Function BPCaptureActor.BPCaptureActor_C.SetupFacialCaptureMaterial
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNPC                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SetupFacialCaptureMaterial(bool IsNPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupFacialCaptureMaterial");

	Params::BPCaptureActor_C_SetupFacialCaptureMaterial Parms{};

	Parms.IsNPC = IsNPC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateSetupHighResRenderTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ErrorInformation                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void ABPCaptureActor_C::PrivateSetupHighResRenderTarget(const class FText& ErrorInformation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateSetupHighResRenderTarget");

	Params::BPCaptureActor_C_PrivateSetupHighResRenderTarget Parms{};

	Parms.ErrorInformation = std::move(ErrorInformation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateGetRenderTarget
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFace                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             ErrorInformation                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FFRenderTargetData               RTData                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PrivateGetRenderTarget(bool IsFace, const class FText& ErrorInformation, struct FFRenderTargetData* RTData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateGetRenderTarget");

	Params::BPCaptureActor_C_PrivateGetRenderTarget Parms{};

	Parms.IsFace = IsFace;
	Parms.ErrorInformation = std::move(ErrorInformation);

	UObject::ProcessEvent(Func, &Parms);

	if (RTData != nullptr)
		*RTData = std::move(Parms.RTData);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateSetupPlMaterialRenderType
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventCaptureRenderType                 RenderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PrivateSetupPlMaterialRenderType(class UMaterialInstanceDynamic* Mid, EEventCaptureRenderType RenderType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateSetupPlMaterialRenderType");

	Params::BPCaptureActor_C_PrivateSetupPlMaterialRenderType Parms{};

	Parms.Mid = Mid;
	Parms.RenderType = RenderType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateSetupHighResCapture
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSSceneCaptureComponent2D*       SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventCaptureRenderType                 RenderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PrivateSetupHighResCapture(class URSSceneCaptureComponent2D* SceneCapture, EEventCaptureRenderType RenderType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateSetupHighResCapture");

	Params::BPCaptureActor_C_PrivateSetupHighResCapture Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.RenderType = RenderType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetupFacialCaptureRenderSetting
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSSceneCaptureComponent2D*       SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           SkelMeshComp                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetupFacialCaptureRenderSetting(class URSSceneCaptureComponent2D* SceneCapture, class FName CapturePresetName, class AActor* Actor, class USkeletalMeshComponent* SkelMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupFacialCaptureRenderSetting");

	Params::BPCaptureActor_C_SetupFacialCaptureRenderSetting Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.CapturePresetName = CapturePresetName;
	Parms.Actor = Actor;
	Parms.SkelMeshComp = SkelMeshComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.AdjustCaptureTarget
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventCaptureType                       CaptureType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FaceBoardMeshIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::AdjustCaptureTarget(EEventCaptureType CaptureType, int32 FaceBoardMeshIndex, bool Reset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "AdjustCaptureTarget");

	Params::BPCaptureActor_C_AdjustCaptureTarget Parms{};

	Parms.CaptureType = CaptureType;
	Parms.FaceBoardMeshIndex = FaceBoardMeshIndex;
	Parms.Reset = Reset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.SetupFacialCaptureRenderSettingInternal
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSSceneCaptureComponent2D*       SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEventFacialCaptureRenderSettingsRenderSetting                                          (Parm, OutParm)
// bool                                    NpMaterial                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::SetupFacialCaptureRenderSettingInternal(class URSSceneCaptureComponent2D* SceneCapture, class FName CapturePresetName, struct FEventFacialCaptureRenderSettings* RenderSetting, bool* NpMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupFacialCaptureRenderSettingInternal");

	Params::BPCaptureActor_C_SetupFacialCaptureRenderSettingInternal Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.CapturePresetName = CapturePresetName;

	UObject::ProcessEvent(Func, &Parms);

	if (RenderSetting != nullptr)
		*RenderSetting = std::move(Parms.RenderSetting);

	if (NpMaterial != nullptr)
		*NpMaterial = Parms.NpMaterial;
}


// Function BPCaptureActor.BPCaptureActor_C.SetupFacialCaptureRenderSettingNPC
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSSceneCaptureComponent2D*       SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ANpcSkeletalMeshActor*            NPCSkelActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::SetupFacialCaptureRenderSettingNPC(class URSSceneCaptureComponent2D* SceneCapture, class FName CapturePresetName, class ANpcSkeletalMeshActor* NPCSkelActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetupFacialCaptureRenderSettingNPC");

	Params::BPCaptureActor_C_SetupFacialCaptureRenderSettingNPC Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.CapturePresetName = CapturePresetName;
	Parms.NPCSkelActor = NPCSkelActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateSetupHighResCaptureMaterial
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseHighRes                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::PrivateSetupHighResCaptureMaterial(bool UseHighRes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateSetupHighResCaptureMaterial");

	Params::BPCaptureActor_C_PrivateSetupHighResCaptureMaterial Parms{};

	Parms.UseHighRes = UseHighRes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.Get Chara Face Part AnimSequence
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           FacialName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFaceAnimation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

class UAnimationAsset* ABPCaptureActor_C::Get_Chara_Face_Part_AnimSequence(class UObject* Object, const class FString& FacialName, bool* IsFaceAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Get Chara Face Part AnimSequence");

	Params::BPCaptureActor_C_Get_Chara_Face_Part_AnimSequence Parms{};

	Parms.Object = Object;
	Parms.FacialName = std::move(FacialName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsFaceAnimation != nullptr)
		*IsFaceAnimation = Parms.IsFaceAnimation;

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.DestroyFrameParticle
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::DestroyFrameParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "DestroyFrameParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivatePauseHighResInGameActorsAnimation
// (Private, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::PrivatePauseHighResInGameActorsAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivatePauseHighResInGameActorsAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.PrivateRestoreHighResAnimation
// (Private, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::PrivateRestoreHighResAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PrivateRestoreHighResAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.IsGStaticTAACaptureRun
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Run                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::IsGStaticTAACaptureRun(bool* Run)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "IsGStaticTAACaptureRun");

	Params::BPCaptureActor_C_IsGStaticTAACaptureRun Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Run != nullptr)
		*Run = Parms.Run;
}


// Function BPCaptureActor.BPCaptureActor_C.IsGStaticTAACaptureFirst
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Run                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::IsGStaticTAACaptureFirst(bool* Run)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "IsGStaticTAACaptureFirst");

	Params::BPCaptureActor_C_IsGStaticTAACaptureFirst Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Run != nullptr)
		*Run = Parms.Run;
}


// Function BPCaptureActor.BPCaptureActor_C.Setup GStatic TAACapture
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventCaptureRenderType                 RenderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ErrorTextureTarget                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::Setup_GStatic_TAACapture(EEventCaptureRenderType RenderType, bool* ErrorTextureTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Setup GStatic TAACapture");

	Params::BPCaptureActor_C_Setup_GStatic_TAACapture Parms{};

	Parms.RenderType = RenderType;

	UObject::ProcessEvent(Func, &Parms);

	if (ErrorTextureTarget != nullptr)
		*ErrorTextureTarget = Parms.ErrorTextureTarget;
}


// Function BPCaptureActor.BPCaptureActor_C.StartGStatic TAACapture
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTAA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ManyCapture                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::StartGStatic_TAACapture(bool UseTAA, bool ManyCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "StartGStatic TAACapture");

	Params::BPCaptureActor_C_StartGStatic_TAACapture Parms{};

	Parms.UseTAA = UseTAA;
	Parms.ManyCapture = ManyCapture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.EndGStatic TAACapture
// (Private, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::EndGStatic_TAACapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "EndGStatic TAACapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.OnOptimizeTick
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::OnOptimizeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "OnOptimizeTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.OffOptimizeTick
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::OffOptimizeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "OffOptimizeTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.IsTownPeopleSkeletalMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           CharaObjectName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABPCaptureActor_C::IsTownPeopleSkeletalMesh(const class FString& CharaObjectName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "IsTownPeopleSkeletalMesh");

	Params::BPCaptureActor_C_IsTownPeopleSkeletalMesh Parms{};

	Parms.CharaObjectName = std::move(CharaObjectName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.PlayNpcMeshMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InTimeToStartMontageAt                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::PlayNpcMeshMontage(class UAnimMontage* AnimMontage, float InPlayRate, float InTimeToStartMontageAt, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "PlayNpcMeshMontage");

	Params::BPCaptureActor_C_PlayNpcMeshMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.InPlayRate = InPlayRate;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;
	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.TAAForceCaptureFinishEventStack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::TAAForceCaptureFinishEventStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "TAAForceCaptureFinishEventStack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.ChangeCharaMaterial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::ChangeCharaMaterial(class FName RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ChangeCharaMaterial");

	Params::BPCaptureActor_C_ChangeCharaMaterial Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.UpdateGeneralParticles
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::UpdateGeneralParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "UpdateGeneralParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.OnSkipButton
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::OnSkipButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "OnSkipButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.Update Frame Drop
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::Update_Frame_Drop(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Update Frame Drop");

	Params::BPCaptureActor_C_Update_Frame_Drop Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.GetRandomPlaneMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USkeletalMesh*>            PlanList                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class USkeletalMesh*                    PlaneMesh                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPCaptureActor_C::GetRandomPlaneMesh(TArray<class USkeletalMesh*>& PlanList, class USkeletalMesh** PlaneMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetRandomPlaneMesh");

	Params::BPCaptureActor_C_GetRandomPlaneMesh Parms{};

	Parms.PlanList = std::move(PlanList);

	UObject::ProcessEvent(Func, &Parms);

	PlanList = std::move(Parms.PlanList);

	if (PlaneMesh != nullptr)
		*PlaneMesh = Parms.PlaneMesh;
}


// Function BPCaptureActor.BPCaptureActor_C.Check and Change Light Material BP
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::Check_and_Change_Light_Material_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Check and Change Light Material BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.Set All Tick Enabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::Set_All_Tick_Enabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Set All Tick Enabled");

	Params::BPCaptureActor_C_Set_All_Tick_Enabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.Set Hidden Mark
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::Set_Hidden_Mark(bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Set Hidden Mark");

	Params::BPCaptureActor_C_Set_Hidden_Mark Parms{};

	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCaptureActor.BPCaptureActor_C.Set Hidden by Current Status
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::Set_Hidden_by_Current_Status()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Set Hidden by Current Status");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.SetBloodDecalBP
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::SetBloodDecalBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "SetBloodDecalBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.ClearBloodDecalBP
// (Public, BlueprintCallable, BlueprintEvent)

void ABPCaptureActor_C::ClearBloodDecalBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "ClearBloodDecalBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCaptureActor.BPCaptureActor_C.Get Anim Sequence from Path
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Path                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Load                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* ABPCaptureActor_C::Get_Anim_Sequence_from_Path(const class FString& Path, bool Load)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Get Anim Sequence from Path");

	Params::BPCaptureActor_C_Get_Anim_Sequence_from_Path Parms{};

	Parms.Path = std::move(Path);
	Parms.Load = Load;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPCaptureActor.BPCaptureActor_C.GetGeneralStaticBindingActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_MenuPlayerBase_C*>     Param_GeneralBindingSpawnInstance                      (Parm, OutParm, HasGetValueTypeHash)
// TArray<class ASkeletalMeshActor*>       Param_GeneralBindingSpawnWeaponInstance                (Parm, OutParm, HasGetValueTypeHash)

void ABPCaptureActor_C::GetGeneralStaticBindingActors(TArray<class ABP_MenuPlayerBase_C*>* Param_GeneralBindingSpawnInstance, TArray<class ASkeletalMeshActor*>* Param_GeneralBindingSpawnWeaponInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "GetGeneralStaticBindingActors");

	Params::BPCaptureActor_C_GetGeneralStaticBindingActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_GeneralBindingSpawnInstance != nullptr)
		*Param_GeneralBindingSpawnInstance = std::move(Parms.Param_GeneralBindingSpawnInstance);

	if (Param_GeneralBindingSpawnWeaponInstance != nullptr)
		*Param_GeneralBindingSpawnWeaponInstance = std::move(Parms.Param_GeneralBindingSpawnWeaponInstance);
}


// Function BPCaptureActor.BPCaptureActor_C.Is Valid Curve Param Type
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECurveParamType                         CurveParamType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnIsValid                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::Is_Valid_Curve_Param_Type(ECurveParamType CurveParamType, bool* ReturnIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "Is Valid Curve Param Type");

	Params::BPCaptureActor_C_Is_Valid_Curve_Param_Type Parms{};

	Parms.CurveParamType = CurveParamType;

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnIsValid != nullptr)
		*ReturnIsValid = Parms.ReturnIsValid;
}


// Function BPCaptureActor.BPCaptureActor_C.IsStartRipSyncCrossFadeChara
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPCaptureActor_C::IsStartRipSyncCrossFadeChara(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCaptureActor_C", "IsStartRipSyncCrossFadeChara");

	Params::BPCaptureActor_C_IsStartRipSyncCrossFadeChara Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}

}

