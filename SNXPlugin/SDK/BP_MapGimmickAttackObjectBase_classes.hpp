#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapGimmickAttackObjectBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BP_MapGimmickObjectBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapGimmickAttackObjectBase.BP_MapGimmickAttackObjectBase_C
// 0x0190 (0x0AE0 - 0x0950)
class ABP_MapGimmickAttackObjectBase_C final : public ABP_MapGimmickObjectBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MapGimmickAttackObjectBase_C;    // 0x0948(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHitCheckReceiverComponent*             HitCheckReceiver;                                  // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTeamComponent*                         Team;                                              // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitCheckComponent*                     HitCheckComponent;                                 // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionCommonInfo                 CollisionCommonInfo;                               // 0x0968(0x0070)(Edit, BlueprintVisible)
	struct FHCSkillCommonInfo                     SkillCommonInfo;                                   // 0x09D8(0x00F0)(Edit, BlueprintVisible)
	struct FHCHitEffectInfo                       HitEffectInfo;                                     // 0x0AC8(0x0008)(Edit, BlueprintVisible, NoDestructor)
	bool                                          UseMultiHitSeparateParam;                          // 0x0AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInitializedHitCollision;                         // 0x0AD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MapGimmickAttackObjectBase(int32 EntryPoint);
	void ReceiveBeginPlay();
	void EnableAttackCollision(bool Enable);
	void InitializeAttackCollisionLoop();
	void InitializeAttackCollision();
	void SetAttackEnable(bool Enable, bool IsGimmickEnemy);
	void GetPsychicObjectWeightGaugePos(struct FVector* Weight_gauge_pos);
	void SetMultiHitExtraType();
	void ResetMultiHitExtraType(bool UpdateCollision);
	void CommonAttackHitFunc();
	void CommonAttackFinishFunc(bool UpdateCollision);
	void RegisterHitExtraTypeToCollision();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapGimmickAttackObjectBase_C">();
	}
	static class ABP_MapGimmickAttackObjectBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapGimmickAttackObjectBase_C>();
	}
};
static_assert(alignof(ABP_MapGimmickAttackObjectBase_C) == 0x000010, "Wrong alignment on ABP_MapGimmickAttackObjectBase_C");
static_assert(sizeof(ABP_MapGimmickAttackObjectBase_C) == 0x000AE0, "Wrong size on ABP_MapGimmickAttackObjectBase_C");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, UberGraphFrame_BP_MapGimmickAttackObjectBase_C) == 0x000948, "Member 'ABP_MapGimmickAttackObjectBase_C::UberGraphFrame_BP_MapGimmickAttackObjectBase_C' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, HitCheckReceiver) == 0x000950, "Member 'ABP_MapGimmickAttackObjectBase_C::HitCheckReceiver' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, Team) == 0x000958, "Member 'ABP_MapGimmickAttackObjectBase_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, HitCheckComponent) == 0x000960, "Member 'ABP_MapGimmickAttackObjectBase_C::HitCheckComponent' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, CollisionCommonInfo) == 0x000968, "Member 'ABP_MapGimmickAttackObjectBase_C::CollisionCommonInfo' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, SkillCommonInfo) == 0x0009D8, "Member 'ABP_MapGimmickAttackObjectBase_C::SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, HitEffectInfo) == 0x000AC8, "Member 'ABP_MapGimmickAttackObjectBase_C::HitEffectInfo' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, UseMultiHitSeparateParam) == 0x000AD0, "Member 'ABP_MapGimmickAttackObjectBase_C::UseMultiHitSeparateParam' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickAttackObjectBase_C, IsInitializedHitCollision) == 0x000AD1, "Member 'ABP_MapGimmickAttackObjectBase_C::IsInitializedHitCollision' has a wrong offset!");

}

