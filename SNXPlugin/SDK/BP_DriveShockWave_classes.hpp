#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DriveShockWave

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_SimpleAttackActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DriveShockWave.BP_DriveShockWave_C
// 0x0020 (0x0388 - 0x0368)
class ABP_DriveShockWave_C final : public ABP_SimpleAttackActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DriveShockWave_C;                // 0x0368(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       AttackCollision;                                   // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PARAM_RANGE_S;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PARAM_RANGE_L;                                     // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndAttack;                                        // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DriveShockWave(int32 EntryPoint);
	void EndAttackCollision();
	void StartAttack(class AActor* Param_AttackOwner);
	void SetCollisionSize(bool bLarge);
	void GetPrimitive(class UPrimitiveComponent** Primitive);

	void IsFinish(bool* bEnd) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DriveShockWave_C">();
	}
	static class ABP_DriveShockWave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DriveShockWave_C>();
	}
};
static_assert(alignof(ABP_DriveShockWave_C) == 0x000008, "Wrong alignment on ABP_DriveShockWave_C");
static_assert(sizeof(ABP_DriveShockWave_C) == 0x000388, "Wrong size on ABP_DriveShockWave_C");
static_assert(offsetof(ABP_DriveShockWave_C, UberGraphFrame_BP_DriveShockWave_C) == 0x000368, "Member 'ABP_DriveShockWave_C::UberGraphFrame_BP_DriveShockWave_C' has a wrong offset!");
static_assert(offsetof(ABP_DriveShockWave_C, AttackCollision) == 0x000370, "Member 'ABP_DriveShockWave_C::AttackCollision' has a wrong offset!");
static_assert(offsetof(ABP_DriveShockWave_C, PARAM_RANGE_S) == 0x000378, "Member 'ABP_DriveShockWave_C::PARAM_RANGE_S' has a wrong offset!");
static_assert(offsetof(ABP_DriveShockWave_C, PARAM_RANGE_L) == 0x00037C, "Member 'ABP_DriveShockWave_C::PARAM_RANGE_L' has a wrong offset!");
static_assert(offsetof(ABP_DriveShockWave_C, bEndAttack) == 0x000380, "Member 'ABP_DriveShockWave_C::bEndAttack' has a wrong offset!");

}

