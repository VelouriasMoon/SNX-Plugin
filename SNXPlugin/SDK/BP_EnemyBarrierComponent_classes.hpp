#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyBarrierComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EEnemyBarrierType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyBarrierComponent.BP_EnemyBarrierComponent_C
// 0x01B8 (0x0278 - 0x00C0)
class UBP_EnemyBarrierComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicObjArray;                                   // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsEnableBarrier;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FDD[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      Barrier;                                           // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         WindowBarrierSoftRef;                              // 0x00E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         WindowBarrierHitSoftRef;                           // 0x0110(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         TornadEffectSoftRef;                               // 0x0138(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UParticleSystem*                        WindowBarrierEffect;                               // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UParticleSystem*                        WindowBarrierHitEffect;                            // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UParticleSystem*                        TornadEffect;                                      // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UParticleSystem*                        FinishEffect;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         WindowLoopEffectHandle;                            // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalDeltaSeconds;                                 // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BarrierAttachName;                                 // 0x0194(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BarrierRotation;                                   // 0x019C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class UParticleSystem>         FinishEffectSoftRef;                               // 0x01A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   FinishAttachName;                                  // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FinishRotation;                                    // 0x01D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEnemyBarrierType                             BarrierType;                                       // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FDE[0x3];                                     // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DamageBreakEffect;                                 // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         DamageBreakEffectSoftRef;                          // 0x01F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_ENPC_BarrierBase_C*                 BarrierActor;                                      // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BarrierMaxHp;                                      // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrierRadius;                                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrierMaxTime;                                    // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueDamageScale;                                 // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BouncePower;                                       // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceAngle;                                       // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEmissive;                                         // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FDF[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EmissiveColor;                                     // 0x023C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissivePower;                                     // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalDuration;                                     // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentEmissiveTime;                               // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveScale;                                     // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveStartValue;                                // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          HitBarrierSE;                                      // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          BarrierLoopSE;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   AtomComponent;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EnemyBarrierComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Start();
	void Update(float DeltaSeconds);
	void Exit(bool IsDamage);
	void HitProcess(class ABP_PsychicObjectBasic_C* PsychicObj, const struct FHCHitResult& Result_in);
	void Initialize(class UCapsuleComponent* BarrierShape);
	void LoadAsset();
	void IsBarrier(bool* Param_IsBarrier);
	void BarrierCollisionHitNotify(const struct FHCHitResult& Result);
	void CalcBarrierDamage(const struct FHCHitResult& Result);
	void LoadBarrierActor();
	void UpdateEmissive(float DeltaSec);
	void StartEmissive();
	void EndEmissive();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyBarrierComponent_C">();
	}
	static class UBP_EnemyBarrierComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyBarrierComponent_C>();
	}
};
static_assert(alignof(UBP_EnemyBarrierComponent_C) == 0x000008, "Wrong alignment on UBP_EnemyBarrierComponent_C");
static_assert(sizeof(UBP_EnemyBarrierComponent_C) == 0x000278, "Wrong size on UBP_EnemyBarrierComponent_C");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_EnemyBarrierComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, PsychicObjArray) == 0x0000C8, "Member 'UBP_EnemyBarrierComponent_C::PsychicObjArray' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, IsEnableBarrier) == 0x0000D8, "Member 'UBP_EnemyBarrierComponent_C::IsEnableBarrier' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, Barrier) == 0x0000E0, "Member 'UBP_EnemyBarrierComponent_C::Barrier' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, WindowBarrierSoftRef) == 0x0000E8, "Member 'UBP_EnemyBarrierComponent_C::WindowBarrierSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, WindowBarrierHitSoftRef) == 0x000110, "Member 'UBP_EnemyBarrierComponent_C::WindowBarrierHitSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, TornadEffectSoftRef) == 0x000138, "Member 'UBP_EnemyBarrierComponent_C::TornadEffectSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, WindowBarrierEffect) == 0x000160, "Member 'UBP_EnemyBarrierComponent_C::WindowBarrierEffect' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, WindowBarrierHitEffect) == 0x000168, "Member 'UBP_EnemyBarrierComponent_C::WindowBarrierHitEffect' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, TornadEffect) == 0x000170, "Member 'UBP_EnemyBarrierComponent_C::TornadEffect' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, FinishEffect) == 0x000178, "Member 'UBP_EnemyBarrierComponent_C::FinishEffect' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, OwnerPlayer) == 0x000180, "Member 'UBP_EnemyBarrierComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, WindowLoopEffectHandle) == 0x000188, "Member 'UBP_EnemyBarrierComponent_C::WindowLoopEffectHandle' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, TotalDeltaSeconds) == 0x000190, "Member 'UBP_EnemyBarrierComponent_C::TotalDeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierAttachName) == 0x000194, "Member 'UBP_EnemyBarrierComponent_C::BarrierAttachName' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierRotation) == 0x00019C, "Member 'UBP_EnemyBarrierComponent_C::BarrierRotation' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, FinishEffectSoftRef) == 0x0001A8, "Member 'UBP_EnemyBarrierComponent_C::FinishEffectSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, FinishAttachName) == 0x0001D0, "Member 'UBP_EnemyBarrierComponent_C::FinishAttachName' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, FinishRotation) == 0x0001D8, "Member 'UBP_EnemyBarrierComponent_C::FinishRotation' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierType) == 0x0001E4, "Member 'UBP_EnemyBarrierComponent_C::BarrierType' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, DamageBreakEffect) == 0x0001E8, "Member 'UBP_EnemyBarrierComponent_C::DamageBreakEffect' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, DamageBreakEffectSoftRef) == 0x0001F0, "Member 'UBP_EnemyBarrierComponent_C::DamageBreakEffectSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierActor) == 0x000218, "Member 'UBP_EnemyBarrierComponent_C::BarrierActor' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierMaxHp) == 0x000220, "Member 'UBP_EnemyBarrierComponent_C::BarrierMaxHp' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierRadius) == 0x000224, "Member 'UBP_EnemyBarrierComponent_C::BarrierRadius' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierMaxTime) == 0x000228, "Member 'UBP_EnemyBarrierComponent_C::BarrierMaxTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, UniqueDamageScale) == 0x00022C, "Member 'UBP_EnemyBarrierComponent_C::UniqueDamageScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BouncePower) == 0x000230, "Member 'UBP_EnemyBarrierComponent_C::BouncePower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BounceAngle) == 0x000234, "Member 'UBP_EnemyBarrierComponent_C::BounceAngle' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, bEmissive) == 0x000238, "Member 'UBP_EnemyBarrierComponent_C::bEmissive' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, EmissiveColor) == 0x00023C, "Member 'UBP_EnemyBarrierComponent_C::EmissiveColor' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, EmissivePower) == 0x00024C, "Member 'UBP_EnemyBarrierComponent_C::EmissivePower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, TotalDuration) == 0x000250, "Member 'UBP_EnemyBarrierComponent_C::TotalDuration' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, CurrentEmissiveTime) == 0x000254, "Member 'UBP_EnemyBarrierComponent_C::CurrentEmissiveTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, EmissiveScale) == 0x000258, "Member 'UBP_EnemyBarrierComponent_C::EmissiveScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, EmissiveStartValue) == 0x00025C, "Member 'UBP_EnemyBarrierComponent_C::EmissiveStartValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, HitBarrierSE) == 0x000260, "Member 'UBP_EnemyBarrierComponent_C::HitBarrierSE' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, BarrierLoopSE) == 0x000268, "Member 'UBP_EnemyBarrierComponent_C::BarrierLoopSE' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBarrierComponent_C, AtomComponent) == 0x000270, "Member 'UBP_EnemyBarrierComponent_C::AtomComponent' has a wrong offset!");

}

