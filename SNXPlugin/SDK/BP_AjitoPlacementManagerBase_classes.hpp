#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AjitoPlacementManagerBase

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AjitoPlacementManagerBase.BP_AjitoPlacementManagerBase_C
// 0x0068 (0x02B0 - 0x0248)
class ABP_AjitoPlacementManagerBase_C final : public AAjitoPlacementManager
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FAjitoPlacementInfo> ActorInfoMap;                                      // 0x0250(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NeedProgressId_Yuito;                              // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeedProgressId_Kasane;                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeedProgressId_YuitoEx;                            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeedProgressId_KasaneEx;                           // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Reset_Placement_Presented_Items();
	void SetItemVisible(class FName ItemName, bool Visible);
	void SetAllItemVisible(bool Visible);
	void IsItemPresented(TArray<struct FPresentInfoData>& PresentInfos, class FName ItemName, bool IsAbsolute, bool* Presented);
	void GetItemNameList(TArray<class FName>* ItemNames);
	void GetActorByItemName(class FName ItemName, TArray<class AActor*>* Actor, TArray<class AActor*>* HiddenActor);
	void MakeActorInfoMap();
	void DebugGetActorInfoMap(TMap<class FName, struct FAjitoPlacementInfo>* Param_ActorInfoMap, TArray<struct FAjitoPlacementInfo>* Param_ActorInfos);
	void SetVisibleActorWithTag(class FName Tag, bool Visible);
	void TestTags();
	void SplitTags(const class FString& Param_Tags, TArray<class FString>* TagArray1);
	void SetAjitoActorVisible(class AActor* Actor, bool Visible);
	void SetActorVisibleAndCollision(class AActor* Actor, bool Visible);
	void SetPresentVisible(bool Visible, class AActor* ItemActor, class AActor* HideItemActor, class FName HideItemTag, class FName VisibleItemTag, bool UpdateVisibleTag);
	void SetActionUseItemVisible(class FName ActionName, class FName ItemName, bool Visible, EPlayerID ActionPlayerId);
	void IsItemPresentedForExternal(class FName ItemName, bool* Presented);
	void IsClearScenario(EPlayerID Param_PlayerId, bool* Cleared);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AjitoPlacementManagerBase_C">();
	}
	static class ABP_AjitoPlacementManagerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AjitoPlacementManagerBase_C>();
	}
};
static_assert(alignof(ABP_AjitoPlacementManagerBase_C) == 0x000008, "Wrong alignment on ABP_AjitoPlacementManagerBase_C");
static_assert(sizeof(ABP_AjitoPlacementManagerBase_C) == 0x0002B0, "Wrong size on ABP_AjitoPlacementManagerBase_C");
static_assert(offsetof(ABP_AjitoPlacementManagerBase_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_AjitoPlacementManagerBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AjitoPlacementManagerBase_C, ActorInfoMap) == 0x000250, "Member 'ABP_AjitoPlacementManagerBase_C::ActorInfoMap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoPlacementManagerBase_C, NeedProgressId_Yuito) == 0x0002A0, "Member 'ABP_AjitoPlacementManagerBase_C::NeedProgressId_Yuito' has a wrong offset!");
static_assert(offsetof(ABP_AjitoPlacementManagerBase_C, NeedProgressId_Kasane) == 0x0002A4, "Member 'ABP_AjitoPlacementManagerBase_C::NeedProgressId_Kasane' has a wrong offset!");
static_assert(offsetof(ABP_AjitoPlacementManagerBase_C, NeedProgressId_YuitoEx) == 0x0002A8, "Member 'ABP_AjitoPlacementManagerBase_C::NeedProgressId_YuitoEx' has a wrong offset!");
static_assert(offsetof(ABP_AjitoPlacementManagerBase_C, NeedProgressId_KasaneEx) == 0x0002AC, "Member 'ABP_AjitoPlacementManagerBase_C::NeedProgressId_KasaneEx' has a wrong offset!");

}

