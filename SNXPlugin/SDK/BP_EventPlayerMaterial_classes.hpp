#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventPlayerMaterial

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BP_EventPlayerMaterialBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventPlayerMaterial.BP_EventPlayerMaterial_C
// 0x0070 (0x0300 - 0x0290)
class ABP_EventPlayerMaterial_C final : public ABP_EventPlayerMaterialBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EventPlayerMaterial_C;           // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PlayerMaterialAccessorComponent_C*  BP_PlayerMaterialAccessorComponent;                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ShadowOffsetMap;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AssignBody;                                        // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AssignSkin;                                        // 0x02A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AssignMask;                                        // 0x02AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AssignHair;                                        // 0x02AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AssignHood;                                        // 0x02AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AssignOutline;                                     // 0x02AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AssignSheath;                                      // 0x02AE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceRestoreSASParameter;                          // 0x02AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 SubAttachActor;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SubAttachActor2;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          SteahlMatRenderAfterDofON;                         // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetupWeapon;                                       // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9607[0x6];                                     // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       WeaponBase;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      BattlePlayer;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestoreWeaponHidden;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9608[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SubAttachActor3;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          NeonWireDepthTickOff;                              // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9609[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_NeonWireDepth_C*                   RestoreNeonWireDepthComp;                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRestoreNeonWireDepthTick;                        // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstUpdateOnly;                                   // 0x02F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RestoreMaterialAllSkip;                            // 0x02FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetupAttachment;                                   // 0x02FB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetupPlayerForceOutlineVisibility;                 // 0x02FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EventPlayerMaterial(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Initialize(class USkeletalMeshComponent* SkeletalMesh);
	void IniitalizePlayer(class ARSBattlePlayer_C* Player);
	void InitializeMenuPlayer(class ABP_MenuPlayerBase_C* MenuPlayer);
	void InitializeSekeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent);
	void InitializeWeapon();
	void FinalizeWeapon();
	void SetUsedNormalFixed();
	void ProtectedSetupEventOptimizeCustomStencil(bool Enable);
	void GetMeshCustomStencil(class USkeletalMeshComponent* SkelMeshComp, bool* HasCustomStencil, int32* CustomStencil);
	void GetAttachedMeshes(class UMeshComponent* MeshComp, TArray<class UMeshComponent*>* Meshes);
	void SetupNeonWireDepthTick(class UMeshComponent* MeshComp);
	void RestoreNeonWireDepthTick();
	void ProtectedSetupRestoreType(bool IsBattlePlayer, bool IsMenuPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventPlayerMaterial_C">();
	}
	static class ABP_EventPlayerMaterial_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventPlayerMaterial_C>();
	}
};
static_assert(alignof(ABP_EventPlayerMaterial_C) == 0x000008, "Wrong alignment on ABP_EventPlayerMaterial_C");
static_assert(sizeof(ABP_EventPlayerMaterial_C) == 0x000300, "Wrong size on ABP_EventPlayerMaterial_C");
static_assert(offsetof(ABP_EventPlayerMaterial_C, UberGraphFrame_BP_EventPlayerMaterial_C) == 0x000290, "Member 'ABP_EventPlayerMaterial_C::UberGraphFrame_BP_EventPlayerMaterial_C' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, BP_PlayerMaterialAccessorComponent) == 0x000298, "Member 'ABP_EventPlayerMaterial_C::BP_PlayerMaterialAccessorComponent' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, ShadowOffsetMap) == 0x0002A0, "Member 'ABP_EventPlayerMaterial_C::ShadowOffsetMap' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignBody) == 0x0002A8, "Member 'ABP_EventPlayerMaterial_C::AssignBody' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignSkin) == 0x0002A9, "Member 'ABP_EventPlayerMaterial_C::AssignSkin' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignMask) == 0x0002AA, "Member 'ABP_EventPlayerMaterial_C::AssignMask' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignHair) == 0x0002AB, "Member 'ABP_EventPlayerMaterial_C::AssignHair' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignHood) == 0x0002AC, "Member 'ABP_EventPlayerMaterial_C::AssignHood' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignOutline) == 0x0002AD, "Member 'ABP_EventPlayerMaterial_C::AssignOutline' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, AssignSheath) == 0x0002AE, "Member 'ABP_EventPlayerMaterial_C::AssignSheath' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, ForceRestoreSASParameter) == 0x0002AF, "Member 'ABP_EventPlayerMaterial_C::ForceRestoreSASParameter' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SubAttachActor) == 0x0002B0, "Member 'ABP_EventPlayerMaterial_C::SubAttachActor' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SubAttachActor2) == 0x0002B8, "Member 'ABP_EventPlayerMaterial_C::SubAttachActor2' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SteahlMatRenderAfterDofON) == 0x0002C0, "Member 'ABP_EventPlayerMaterial_C::SteahlMatRenderAfterDofON' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SetupWeapon) == 0x0002C1, "Member 'ABP_EventPlayerMaterial_C::SetupWeapon' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, WeaponBase) == 0x0002C8, "Member 'ABP_EventPlayerMaterial_C::WeaponBase' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, BattlePlayer) == 0x0002D0, "Member 'ABP_EventPlayerMaterial_C::BattlePlayer' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, RestoreWeaponHidden) == 0x0002D8, "Member 'ABP_EventPlayerMaterial_C::RestoreWeaponHidden' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SubAttachActor3) == 0x0002E0, "Member 'ABP_EventPlayerMaterial_C::SubAttachActor3' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, NeonWireDepthTickOff) == 0x0002E8, "Member 'ABP_EventPlayerMaterial_C::NeonWireDepthTickOff' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, RestoreNeonWireDepthComp) == 0x0002F0, "Member 'ABP_EventPlayerMaterial_C::RestoreNeonWireDepthComp' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, IsRestoreNeonWireDepthTick) == 0x0002F8, "Member 'ABP_EventPlayerMaterial_C::IsRestoreNeonWireDepthTick' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, FirstUpdateOnly) == 0x0002F9, "Member 'ABP_EventPlayerMaterial_C::FirstUpdateOnly' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, RestoreMaterialAllSkip) == 0x0002FA, "Member 'ABP_EventPlayerMaterial_C::RestoreMaterialAllSkip' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SetupAttachment) == 0x0002FB, "Member 'ABP_EventPlayerMaterial_C::SetupAttachment' has a wrong offset!");
static_assert(offsetof(ABP_EventPlayerMaterial_C, SetupPlayerForceOutlineVisibility) == 0x0002FC, "Member 'ABP_EventPlayerMaterial_C::SetupPlayerForceOutlineVisibility' has a wrong offset!");

}

