#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainFieldSequenceActor

#include "Basic.hpp"

#include "BP_BrainFieldSequenceActor_classes.hpp"
#include "BP_BrainFieldSequenceActor_parameters.hpp"


namespace SDK
{

// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ED_OnFinished__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::ED_OnFinished__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ED_OnFinished__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ExecuteUbergraph_BP_BrainFieldSequenceActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::ExecuteUbergraph_BP_BrainFieldSequenceActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ExecuteUbergraph_BP_BrainFieldSequenceActor");

	Params::BP_BrainFieldSequenceActor_C_ExecuteUbergraph_BP_BrainFieldSequenceActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ENPCWhiteoutEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::ENPCWhiteoutEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ENPCWhiteoutEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupPlayAfterFrameDrop
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::SetupPlayAfterFrameDrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupPlayAfterFrameDrop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ASyncLoadDamageSequence
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::ASyncLoadDamageSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ASyncLoadDamageSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.StartENPCPsychicObject
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::StartENPCPsychicObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "StartENPCPsychicObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ReceiveTick");

	Params::BP_BrainFieldSequenceActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PPMOutlineDefault
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::PPMOutlineDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PPMOutlineDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PPMOutlineFront
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::PPMOutlineFront()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PPMOutlineFront");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SeamlessEventJump
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::SeamlessEventJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SeamlessEventJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.HiddenNearBG
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::HiddenNearBG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "HiddenNearBG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetVisibleEnemy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetVisibleEnemy(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetVisibleEnemy");

	Params::BP_BrainFieldSequenceActor_C_SetVisibleEnemy Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetVisiblePlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetVisiblePlayer(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetVisiblePlayer");

	Params::BP_BrainFieldSequenceActor_C_SetVisiblePlayer Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.EndPlayerWatchUser
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::EndPlayerWatchUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "EndPlayerWatchUser");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.BeginPlayerWatchUser
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EaseTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::BeginPlayerWatchUser(const struct FVector& TargetOffset, float Pitch, float EaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "BeginPlayerWatchUser");

	Params::BP_BrainFieldSequenceActor_C_BeginPlayerWatchUser Parms{};

	Parms.TargetOffset = std::move(TargetOffset);
	Parms.Pitch = Pitch;
	Parms.EaseTime = EaseTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ReceiveBrainCrashCheckENPC
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::ReceiveBrainCrashCheckENPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ReceiveBrainCrashCheckENPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PlayerWatchUser
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EaseTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::PlayerWatchUser(const struct FVector& TargetOffset, float Pitch, float EaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PlayerWatchUser");

	Params::BP_BrainFieldSequenceActor_C_PlayerWatchUser Parms{};

	Parms.TargetOffset = std::move(TargetOffset);
	Parms.Pitch = Pitch;
	Parms.EaseTime = EaseTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.UserHoodON
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::UserHoodON(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "UserHoodON");

	Params::BP_BrainFieldSequenceActor_C_UserHoodON Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.CameraWatchUser
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTimeSeconds                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WatchOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::CameraWatchUser(float BlendTimeSeconds, const struct FVector& WatchOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "CameraWatchUser");

	Params::BP_BrainFieldSequenceActor_C_CameraWatchUser Parms{};

	Parms.BlendTimeSeconds = BlendTimeSeconds;
	Parms.WatchOffset = std::move(WatchOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PlayerStopEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::PlayerStopEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PlayerStopEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.BrainFieldLightVisible
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::BrainFieldLightVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "BrainFieldLightVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.BrainFieldLightHide
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::BrainFieldLightHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "BrainFieldLightHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetVisibleUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetVisibleUI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetVisibleUI");

	Params::BP_BrainFieldSequenceActor_C_SetVisibleUI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.EndSlow
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::EndSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "EndSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.StartSlow
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::StartSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "StartSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.StartInput
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::StartInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "StartInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.Play
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.OnFinished
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "OnFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SwitchVisibleNormal
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::SwitchVisibleNormal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SwitchVisibleNormal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SwitchVisibleBrainField
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::SwitchVisibleBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SwitchVisibleBrainField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.OnLoaded_830D2F464683427EE424F3A810D577C1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::OnLoaded_830D2F464683427EE424F3A810D577C1(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "OnLoaded_830D2F464683427EE424F3A810D577C1");

	Params::BP_BrainFieldSequenceActor_C_OnLoaded_830D2F464683427EE424F3A810D577C1 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetSequenceAssetPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldSequencerType                SequencerType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::SetSequenceAssetPlayer(EBrainFieldSequencerType SequencerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetSequenceAssetPlayer");

	Params::BP_BrainFieldSequenceActor_C_SetSequenceAssetPlayer Parms{};

	Parms.SequencerType = SequencerType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetBrainFieldUser
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SubUser                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::SetBrainFieldUser(class AActor* User, class AActor* SubUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetBrainFieldUser");

	Params::BP_BrainFieldSequenceActor_C_SetBrainFieldUser Parms{};

	Parms.User = User;
	Parms.SubUser = SubUser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingPlayer(class ARSCharacterBase* Player, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingPlayer");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetActiveSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UserIsPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOpen                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::SetActiveSequencer(bool UserIsPlayer, bool IsOpen, bool IsOverride, EBrainFieldEndType EndType, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetActiveSequencer");

	Params::BP_BrainFieldSequenceActor_C_SetActiveSequencer Parms{};

	Parms.UserIsPlayer = UserIsPlayer;
	Parms.IsOpen = IsOpen;
	Parms.IsOverride = IsOverride;
	Parms.EndType = EndType;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.Stop
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingPlayerFromText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             BindingText                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingPlayerFromText(class ARSCharacterBase* Player, const class FText& BindingText, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingPlayerFromText");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingPlayerFromText Parms{};

	Parms.Player = Player;
	Parms.BindingText = std::move(BindingText);

	UObject::ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.LoadAsset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingDummyFromText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             BindingText                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingDummyFromText(const class FText& BindingText, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingDummyFromText");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingDummyFromText Parms{};

	Parms.BindingText = std::move(BindingText);

	UObject::ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PrivateLoadSequenceAsset
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class ULevelSequence>>Sequences                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class ARSLevelSequenceActor*>    OutputInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::PrivateLoadSequenceAsset(TArray<TSoftObjectPtr<class ULevelSequence>>& Sequences, TArray<class ARSLevelSequenceActor*>& OutputInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PrivateLoadSequenceAsset");

	Params::BP_BrainFieldSequenceActor_C_PrivateLoadSequenceAsset Parms{};

	Parms.Sequences = std::move(Sequences);
	Parms.OutputInstance = std::move(OutputInstance);

	UObject::ProcessEvent(Func, &Parms);

	Sequences = std::move(Parms.Sequences);
	OutputInstance = std::move(Parms.OutputInstance);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetSequenceAssetENPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldSequencerType                SequencerType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::SetSequenceAssetENPC(EBrainFieldSequencerType SequencerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetSequenceAssetENPC");

	Params::BP_BrainFieldSequenceActor_C_SetSequenceAssetENPC Parms{};

	Parms.SequencerType = SequencerType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.UnloadSequenceAssetENPC
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::UnloadSequenceAssetENPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "UnloadSequenceAssetENPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PrivateUnloadSequenceAsset
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ARSLevelSequenceActor*>    Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::PrivateUnloadSequenceAsset(TArray<class ARSLevelSequenceActor*>& Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PrivateUnloadSequenceAsset");

	Params::BP_BrainFieldSequenceActor_C_PrivateUnloadSequenceAsset Parms{};

	Parms.Instance = std::move(Instance);

	UObject::ProcessEvent(Func, &Parms);

	Instance = std::move(Parms.Instance);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.FinishSequencerFlow
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::FinishSequencerFlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "FinishSequencerFlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.GetCameraWatchZoom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Zoom                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::GetCameraWatchZoom(float* Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "GetCameraWatchZoom");

	Params::BP_BrainFieldSequenceActor_C_GetCameraWatchZoom Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Zoom != nullptr)
		*Zoom = Parms.Zoom;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.GetSequencerList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UserIsPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOpen                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ARSLevelSequenceActor*>    SequencerList                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::GetSequencerList(bool UserIsPlayer, bool IsOpen, bool IsOverride, EBrainFieldEndType EndType, TArray<class ARSLevelSequenceActor*>* SequencerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "GetSequencerList");

	Params::BP_BrainFieldSequenceActor_C_GetSequencerList Parms{};

	Parms.UserIsPlayer = UserIsPlayer;
	Parms.IsOpen = IsOpen;
	Parms.IsOverride = IsOverride;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);

	if (SequencerList != nullptr)
		*SequencerList = std::move(Parms.SequencerList);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingNPC
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 NPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingNPC(class ARSCharacterBase* NPC, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingNPC");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingNPC Parms{};

	Parms.NPC = NPC;

	UObject::ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingENPC
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 ENPC                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingENPC(class ARSCharacterBase* ENPC, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingENPC");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingENPC Parms{};

	Parms.ENPC = ENPC;

	UObject::ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PrivateSetSequenceAsset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldSequencerType                SequencerType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ARSLevelSequenceActor*>    OpenList                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class ARSLevelSequenceActor*>    CloseList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class ARSLevelSequenceActor*>    ReceiveBrainCrashList                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class ARSLevelSequenceActor*>    OverrideList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::PrivateSetSequenceAsset(EBrainFieldSequencerType SequencerType, TArray<class ARSLevelSequenceActor*>& OpenList, TArray<class ARSLevelSequenceActor*>& CloseList, TArray<class ARSLevelSequenceActor*>& ReceiveBrainCrashList, TArray<class ARSLevelSequenceActor*>& OverrideList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PrivateSetSequenceAsset");

	Params::BP_BrainFieldSequenceActor_C_PrivateSetSequenceAsset Parms{};

	Parms.SequencerType = SequencerType;
	Parms.OpenList = std::move(OpenList);
	Parms.CloseList = std::move(CloseList);
	Parms.ReceiveBrainCrashList = std::move(ReceiveBrainCrashList);
	Parms.OverrideList = std::move(OverrideList);

	UObject::ProcessEvent(Func, &Parms);

	OpenList = std::move(Parms.OpenList);
	CloseList = std::move(Parms.CloseList);
	ReceiveBrainCrashList = std::move(Parms.ReceiveBrainCrashList);
	OverrideList = std::move(Parms.OverrideList);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingSystemRoot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SystemRoot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingSystemRoot(class AActor* SystemRoot, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingSystemRoot");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingSystemRoot Parms{};

	Parms.SystemRoot = SystemRoot;

	UObject::ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.PrivateSetupSeamlessEvent
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::PrivateSetupSeamlessEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "PrivateSetupSeamlessEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.Start Damage Sequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::Start_Damage_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "Start Damage Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetDamageStep
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AddValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIgnorHealCheck                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetDamageStep(int32 AddValue, bool bIgnorHealCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetDamageStep");

	Params::BP_BrainFieldSequenceActor_C_SetDamageStep Parms{};

	Parms.AddValue = AddValue;
	Parms.bIgnorHealCheck = bIgnorHealCheck;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.StopDamageSequence
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::StopDamageSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "StopDamageSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.GetNowDamageStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::GetNowDamageStep(int32* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "GetNowDamageStep");

	Params::BP_BrainFieldSequenceActor_C_GetNowDamageStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.RefreshSequencer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::RefreshSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "RefreshSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.GetPPFuturePredictionBP
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldSequenceActor_C::GetPPFuturePredictionBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "GetPPFuturePredictionBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupBindingPlayerFromTextOpt
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     BindingText                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingCodeText                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingWeaponText                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupBindingPlayerFromTextOpt(class ARSCharacterBase* Player, TArray<class FText>& BindingText, TArray<class FText>& BindingCodeText, TArray<class FText>& BindingWeaponText, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupBindingPlayerFromTextOpt");

	Params::BP_BrainFieldSequenceActor_C_SetupBindingPlayerFromTextOpt Parms{};

	Parms.Player = Player;
	Parms.BindingText = std::move(BindingText);
	Parms.BindingCodeText = std::move(BindingCodeText);
	Parms.BindingWeaponText = std::move(BindingWeaponText);

	UObject::ProcessEvent(Func, &Parms);

	BindingText = std::move(Parms.BindingText);
	BindingCodeText = std::move(Parms.BindingCodeText);
	BindingWeaponText = std::move(Parms.BindingWeaponText);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.SetupMenu
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InMenu                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::SetupMenu(bool InMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "SetupMenu");

	Params::BP_BrainFieldSequenceActor_C_SetupMenu Parms{};

	Parms.InMenu = InMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.GetSequencerTypePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBrainFieldSequencerType                SequencerType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::GetSequencerTypePlayer(EBrainFieldSequencerType* SequencerType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "GetSequencerTypePlayer");

	Params::BP_BrainFieldSequenceActor_C_GetSequencerTypePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SequencerType != nullptr)
		*SequencerType = Parms.SequencerType;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.GetSequencerTypeENPC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBrainFieldSequencerType                SequencerType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldSequenceActor_C::GetSequencerTypeENPC(EBrainFieldSequencerType* SequencerType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "GetSequencerTypeENPC");

	Params::BP_BrainFieldSequenceActor_C_GetSequencerTypeENPC Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SequencerType != nullptr)
		*SequencerType = Parms.SequencerType;
}


// Function BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C.IsLoadENPC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Loaded                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldSequenceActor_C::IsLoadENPC(bool* Loaded) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldSequenceActor_C", "IsLoadENPC");

	Params::BP_BrainFieldSequenceActor_C_IsLoadENPC Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Loaded != nullptr)
		*Loaded = Parms.Loaded;
}

}

