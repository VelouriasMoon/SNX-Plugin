#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RSPlayerCameraManager

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_RSPlayerCameraManager.BP_RSPlayerCameraManager_C.Initialize
// 0x0030 (0x0030 - 0x0000)
struct BP_RSPlayerCameraManager_C_Initialize final
{
public:
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5335[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPPlayerManagerInterface_C> K2Node_DynamicCast_AsBPPlayer_Manager_Interface;   // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5336[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCameraPitchMaxAngle_MaxLowAngle;       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraPitchMaxAngle_MaxUpAngle;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RSPlayerCameraManager_C_Initialize) == 0x000008, "Wrong alignment on BP_RSPlayerCameraManager_C_Initialize");
static_assert(sizeof(BP_RSPlayerCameraManager_C_Initialize) == 0x000030, "Wrong size on BP_RSPlayerCameraManager_C_Initialize");
static_assert(offsetof(BP_RSPlayerCameraManager_C_Initialize, CallFunc_GetPlayerManager_PlayerManager) == 0x000000, "Member 'BP_RSPlayerCameraManager_C_Initialize::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_RSPlayerCameraManager_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_RSPlayerCameraManager_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RSPlayerCameraManager_C_Initialize, K2Node_DynamicCast_AsBPPlayer_Manager_Interface) == 0x000010, "Member 'BP_RSPlayerCameraManager_C_Initialize::K2Node_DynamicCast_AsBPPlayer_Manager_Interface' has a wrong offset!");
static_assert(offsetof(BP_RSPlayerCameraManager_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_RSPlayerCameraManager_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RSPlayerCameraManager_C_Initialize, CallFunc_GetCameraPitchMaxAngle_MaxLowAngle) == 0x000024, "Member 'BP_RSPlayerCameraManager_C_Initialize::CallFunc_GetCameraPitchMaxAngle_MaxLowAngle' has a wrong offset!");
static_assert(offsetof(BP_RSPlayerCameraManager_C_Initialize, CallFunc_GetCameraPitchMaxAngle_MaxUpAngle) == 0x000028, "Member 'BP_RSPlayerCameraManager_C_Initialize::CallFunc_GetCameraPitchMaxAngle_MaxUpAngle' has a wrong offset!");

}

