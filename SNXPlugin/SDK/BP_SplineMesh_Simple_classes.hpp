#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh_Simple

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_SplineBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMesh_Simple.BP_SplineMesh_Simple_C
// 0x00B8 (0x02F8 - 0x0240)
class ABP_SplineMesh_Simple_C final : public ABP_SplineBase_C
{
public:
	class UBoxComponent*                          Box;                                               // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StaticMesh;                                        // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spacing;                                           // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TangentMod;                                        // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C5[0x3];                                     // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roll;                                              // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Closed;                                            // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40C6[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomRotation_X;                                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomRotation_Y;                                  // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomRotation_Z;                                  // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomScale;                                       // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0284(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          Collision;                                         // 0x028C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotRoll;                                           // 0x028D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LockRotatePitch;                                   // 0x028E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40C7[0x1];                                     // 0x028F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionOffset;                                    // 0x0290(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeshScale;                                         // 0x029C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionCameraThrough;                            // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AttachParentBound;                                 // 0x02AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CastShadow;                                        // 0x02AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DynamicShadow;                                     // 0x02AF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     Material1;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material2;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material3;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material4;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material5;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanEverAffectNavigation;                           // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverrideLightMapRes;                               // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40C8[0x2];                                     // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverridenLightMapRes;                              // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StaticShadow;                                      // 0x02E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TwoSidedLighting;                                  // 0x02E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowTwoSided;                                    // 0x02E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LightmapTypeVolumetric;                            // 0x02E3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VisibleInReflectionCaptures;                       // 0x02E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40C9[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDrawDistance;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredMaxDrawDistance;                            // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowCullDistanceVolume;                           // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotYaw;                                            // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMesh_Simple_C">();
	}
	static class ABP_SplineMesh_Simple_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMesh_Simple_C>();
	}
};
static_assert(alignof(ABP_SplineMesh_Simple_C) == 0x000008, "Wrong alignment on ABP_SplineMesh_Simple_C");
static_assert(sizeof(ABP_SplineMesh_Simple_C) == 0x0002F8, "Wrong size on ABP_SplineMesh_Simple_C");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Box) == 0x000240, "Member 'ABP_SplineMesh_Simple_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Spline) == 0x000248, "Member 'ABP_SplineMesh_Simple_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, StaticMesh) == 0x000250, "Member 'ABP_SplineMesh_Simple_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Material) == 0x000258, "Member 'ABP_SplineMesh_Simple_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Spacing) == 0x000260, "Member 'ABP_SplineMesh_Simple_C::Spacing' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, TangentMod) == 0x000264, "Member 'ABP_SplineMesh_Simple_C::TangentMod' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, ForwardAxis) == 0x000268, "Member 'ABP_SplineMesh_Simple_C::ForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Roll) == 0x00026C, "Member 'ABP_SplineMesh_Simple_C::Roll' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Closed) == 0x000270, "Member 'ABP_SplineMesh_Simple_C::Closed' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, RandomRotation_X) == 0x000274, "Member 'ABP_SplineMesh_Simple_C::RandomRotation_X' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, RandomRotation_Y) == 0x000278, "Member 'ABP_SplineMesh_Simple_C::RandomRotation_Y' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, RandomRotation_Z) == 0x00027C, "Member 'ABP_SplineMesh_Simple_C::RandomRotation_Z' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, RandomScale) == 0x000280, "Member 'ABP_SplineMesh_Simple_C::RandomScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, RandomStream) == 0x000284, "Member 'ABP_SplineMesh_Simple_C::RandomStream' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Collision) == 0x00028C, "Member 'ABP_SplineMesh_Simple_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, NotRoll) == 0x00028D, "Member 'ABP_SplineMesh_Simple_C::NotRoll' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, LockRotatePitch) == 0x00028E, "Member 'ABP_SplineMesh_Simple_C::LockRotatePitch' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, PositionOffset) == 0x000290, "Member 'ABP_SplineMesh_Simple_C::PositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, MeshScale) == 0x00029C, "Member 'ABP_SplineMesh_Simple_C::MeshScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Yaw) == 0x0002A8, "Member 'ABP_SplineMesh_Simple_C::Yaw' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, CollisionCameraThrough) == 0x0002AC, "Member 'ABP_SplineMesh_Simple_C::CollisionCameraThrough' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, AttachParentBound) == 0x0002AD, "Member 'ABP_SplineMesh_Simple_C::AttachParentBound' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, CastShadow) == 0x0002AE, "Member 'ABP_SplineMesh_Simple_C::CastShadow' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, DynamicShadow) == 0x0002AF, "Member 'ABP_SplineMesh_Simple_C::DynamicShadow' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Material1) == 0x0002B0, "Member 'ABP_SplineMesh_Simple_C::Material1' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Material2) == 0x0002B8, "Member 'ABP_SplineMesh_Simple_C::Material2' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Material3) == 0x0002C0, "Member 'ABP_SplineMesh_Simple_C::Material3' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Material4) == 0x0002C8, "Member 'ABP_SplineMesh_Simple_C::Material4' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, Material5) == 0x0002D0, "Member 'ABP_SplineMesh_Simple_C::Material5' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, CanEverAffectNavigation) == 0x0002D8, "Member 'ABP_SplineMesh_Simple_C::CanEverAffectNavigation' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, OverrideLightMapRes) == 0x0002D9, "Member 'ABP_SplineMesh_Simple_C::OverrideLightMapRes' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, OverridenLightMapRes) == 0x0002DC, "Member 'ABP_SplineMesh_Simple_C::OverridenLightMapRes' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, StaticShadow) == 0x0002E0, "Member 'ABP_SplineMesh_Simple_C::StaticShadow' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, TwoSidedLighting) == 0x0002E1, "Member 'ABP_SplineMesh_Simple_C::TwoSidedLighting' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, ShadowTwoSided) == 0x0002E2, "Member 'ABP_SplineMesh_Simple_C::ShadowTwoSided' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, LightmapTypeVolumetric) == 0x0002E3, "Member 'ABP_SplineMesh_Simple_C::LightmapTypeVolumetric' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, VisibleInReflectionCaptures) == 0x0002E4, "Member 'ABP_SplineMesh_Simple_C::VisibleInReflectionCaptures' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, MinDrawDistance) == 0x0002E8, "Member 'ABP_SplineMesh_Simple_C::MinDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, DesiredMaxDrawDistance) == 0x0002EC, "Member 'ABP_SplineMesh_Simple_C::DesiredMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, AllowCullDistanceVolume) == 0x0002F0, "Member 'ABP_SplineMesh_Simple_C::AllowCullDistanceVolume' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_Simple_C, NotYaw) == 0x0002F1, "Member 'ABP_SplineMesh_Simple_C::NotYaw' has a wrong offset!");

}

