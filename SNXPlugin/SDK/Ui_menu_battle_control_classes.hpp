#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ui_menu_battle_control

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Engine_structs.hpp"
#include "Enum_ui_pk_weight_gauge_button_structs.hpp"
#include "Enum_ui_object_guide_structs.hpp"
#include "UMG_structs.hpp"
#include "Enum_ui_action_icon_device_type_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ui_menu_battle_control.ui_menu_battle_control_C
// 0x0420 (0x0958 - 0x0538)
class UUi_menu_battle_control_C final : public UUIMenuBattleControl
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0538(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Out;                                               // 0x0540(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x0548(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Damage_critical;                                   // 0x0550(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Damage_normal;                                     // 0x0558(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Brain_gauge_en_C*                brain_gauge_enemy_boss;                            // 0x0560(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_BrainCrash_gauge2_C*             BrainCrash_gauge_boss;                             // 0x0568(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_button_03_C*                 Cv_button;                                         // 0x0570(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Cv_Unacquired_0;                                   // 0x0578(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Cv_Unacquired_1;                                   // 0x0580(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Cv_Unacquired_2;                                   // 0x0588(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Cv_Unacquired_3;                                   // 0x0590(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_en_01_C*                Hp_enemy_boss;                                     // 0x0598(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_pl_01_C*                Hp_p0;                                             // 0x05A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Hp_p0_base_set;                                    // 0x05A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Hp_p0_Icon_Status_set;                             // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Hp_p0_vitality_num_set;                            // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_pl_02_C*                Hp_p1;                                             // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_pl_03_C*                Hp_p2;                                             // 0x05C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Status01;                                     // 0x05D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Status02;                                     // 0x05D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Status03;                                     // 0x05E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Status04;                                     // 0x05E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Status05;                                     // 0x05F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Item_Menu_1_C*                   Item_menu;                                         // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Parts_minimap_1_C*               Minimap;                                           // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Mission_Time_Frame;                                // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_pl_02_C*              NexusDrive_p1;                                     // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_pl_03_C*              NexusDrive_p2;                                     // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_Sas_C*                NexusDrive_Sas_0;                                  // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_Sas_C*                NexusDrive_Sas_1;                                  // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_Sas_C*                NexusDrive_Sas_2;                                  // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_Sas_C*                NexusDrive_Sas_3;                                  // 0x0638(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_base_0;                             // 0x0640(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_base_1;                             // 0x0648(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_base_2;                             // 0x0650(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_base_3;                             // 0x0658(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_center_0;                           // 0x0660(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_center_1;                           // 0x0668(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_center_2;                           // 0x0670(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_center_3;                           // 0x0678(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_corner_0;                           // 0x0680(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_corner_1;                           // 0x0688(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_corner_2;                           // 0x0690(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NexusDrive_Sas_corner_3;                           // 0x0698(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayShadow;                                     // 0x06A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayWidgets_1;                                  // 0x06A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayWidgets_2;                                  // 0x06B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SAS_Base;                                          // 0x06B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_button_02_C*                 Sas_button;                                        // 0x06C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sas_none_0;                                        // 0x06C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sas_none_1;                                        // 0x06D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sas_none_2;                                        // 0x06D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sas_none_3;                                        // 0x06E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_page_01_C*                   Sas_page;                                          // 0x06E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_menu_control_C*              Sas_page_menu;                                     // 0x06F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_psychic_gauge;                                // 0x06F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_party_vitality_pl_1_num1;                     // 0x0700(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_party_vitality_pl_1_num2;                     // 0x0708(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_party_vitality_pl_1_slash;                    // 0x0710(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_pl_01;                                        // 0x0718(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Brain_bonus1_C*                  WB_ui_Brain_bonus1;                                // 0x0720(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Brain_frame3_C*                  WB_ui_Brain_frame3;                                // 0x0728(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Brain_gauge3_C*                  WB_ui_Brain_gauge3;                                // 0x0730(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Brain_gauge_en_frame_C*          WB_ui_Brain_gauge_en_frame;                        // 0x0738(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Item_Menu_2_C*                   WB_ui_Item_Menu_2;                                 // 0x0740(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_LevelUp_C*                       WB_ui_LevelUp;                                     // 0x0748(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Log_C*                           WB_ui_Log;                                         // 0x0750(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_MapGuide_C*                      WB_ui_MapGuide;                                    // 0x0758(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_MiniMes_C*                       WB_ui_MiniMes;                                     // 0x0760(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_MissionTimer_C*                  WB_ui_MissionTimer;                                // 0x0768(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_NexusDrive_Jack_C*               WB_ui_NexusDrive_Jack;                             // 0x0770(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_ObjectGuide_C*                   WB_ui_ObjectGuide;                                 // 0x0778(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_PK_action_icon_1_C*              WB_ui_PK_action_icon;                              // 0x0780(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_PK_action_icon_1_C*              WB_ui_PK_action_icon_L;                            // 0x0788(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_PK_action_icon_1_C*              WB_ui_PK_action_icon_R;                            // 0x0790(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_PK_psychic_gauge_1_C*            WB_ui_PK_psychic_gauge_1;                          // 0x0798(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_PK_psychic_gauge_2_C*            WB_ui_PK_psychic_gauge_2;                          // 0x07A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_PK_psychic_timer_1_C*            WB_ui_PK_psychic_timer_1;                          // 0x07A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_frame_02_C*                  WB_ui_Sas_frame_0;                                 // 0x07B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_frame_02_C*                  WB_ui_Sas_frame_1;                                 // 0x07B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_frame_02_C*                  WB_ui_Sas_frame_2;                                 // 0x07C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_frame_02_C*                  WB_ui_Sas_frame_3;                                 // 0x07C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Sas_hologram_01_C*               WB_ui_Sas_hologram_01;                             // 0x07D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Success_C*                       WB_ui_Success;                                     // 0x07D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_TeamKizuna_C*                    WB_ui_TeamKizuna;                                  // 0x07E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_en_01_frame_C*          WB_ui_Vitality_en_01_frame;                        // 0x07E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_pl_02_frame_C*          WB_ui_Vitality_pl_02_frame;                        // 0x07F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Vitality_pl_03_frame_C*          WB_ui_Vitality_pl_03_frame;                        // 0x07F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   BackupBrainTarget;                                 // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackupBrainRate;                                   // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashGaugeDrawTime;                           // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Intercept_1_C*                   WB_Icon_Intercept;                                 // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InterceptTarget;                                   // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InterceptState;                                    // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActiveIntercept;                                 // 0x0824(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PsychicWeightGaugeInitFlag;                        // 0x0825(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagTown;                                          // 0x0826(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D2[0x1];                                     // 0x0827(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWB_ui_PK_weight_gauge_1_C*>     WbPsychicWeightGauge;                              // 0x0828(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<int32>                                 PsychicWeightGaugeCurrentIndex;                    // 0x0838(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         PsychicWeightGaugeCurrentTarget;                   // 0x0848(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PsychicWeightGaugeWorkNum;                         // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicWeightGaugeButtonNum;                       // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugSasHidePsychicGauge;                          // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D3[0x7];                                     // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  PsychicWeightGaugeEnableFlag;                      // 0x0868(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  PsychicWeightGaugeEnableFlagWork;                  // 0x0878(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         PsychicWeightGaugeTarget;                          // 0x0888(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         PsychicWeightGaugeTargetWork;                      // 0x0898(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  PsychicWeightGaugeSuccessFlag;                     // 0x08A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EPsychicWeightGaugeSize>               PsychicWeightGaugeSize;                            // 0x08B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 PsychicWeightGaugeMaxLevel;                        // 0x08C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FlagAjito;                                         // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagDroneGuide;                                    // 0x08D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagExpBonus;                                      // 0x08DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagMiniTips;                                      // 0x08DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D4[0x4];                                     // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_Brain_tutorial1_C*               WB_ui_Brain_tutorial1;                             // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 CurrentTipsID;                                     // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagMiniTipsPrioTop;                               // 0x08E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D5[0x6];                                     // 0x08EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHelpTutorial>                         MiniTipsWorkList;                                  // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  MiniTipsWorkPrioList;                              // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         MiniTipsNum;                                       // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniTipsDrawTime;                                  // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniTipsTime;                                      // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MiniTipsState;                                     // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagPsychicTimerActive;                            // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D6[0x7];                                     // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  PsychicWeightGaugeExFlag;                          // 0x0928(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UWB_ui_Success_C*                       WidgetMiniTipsSuccess;                             // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugFlagDrawShortcutGuide;                        // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagPlayerWait;                                    // 0x0941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D7[0x2];                                     // 0x0942(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShortcutGuideState;                                // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShortcutGuideWaitFlag;                             // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D8[0x3];                                     // 0x0949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShortcutGuideTimer;                                // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagPsychicChaseCenter;                            // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagPsychicChaseL;                                 // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagPsychicChaseR;                                 // 0x0952(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagSasHologram;                                   // 0x0953(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagBrainField;                                    // 0x0954(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ui_menu_battle_control(int32 EntryPoint);
	void SetVisibleIntercept(bool Param_IsVisible);
	void Event_SelectableChange(bool IsNotSelectable);
	void Event_ContentsRestricted(EOperationRestriction Contents, bool bOpen);
	void Construct();
	void OnInitialized();
	void Event_ContentsOpened(EContentsOpening Contents, bool bOpen);
	void Event_SasEquipExtend(bool bExtend);
	void UpdateState(int32 State, int32 SubState, float DeltaSeconds);
	void CreateWidgetEnemyHp();
	void CreateTargetCursor();
	void CreateBrainTargetCursor();
	void IsFlagPlayUI(bool* Param_IsFlagPlayUI);
	void CreateGameOver();
	void CreateBossName();
	bool ChangePlayUI(bool IsPlay);
	void CreateInterceptIcon();
	void ReleaseInterceptIcon();
	void SetIntercept(class AActor* Target);
	void ResetIntercept();
	void InterceptUpdate();
	void InterceptUpdatePosition();
	void CreateCrushBonus();
	bool ChangeTown(bool IsTown, bool IsAjito);
	void StartBrainCrashOverwrite();
	void SetPsychicGauge(float Param);
	void StartPsychicWeightGauge(Enum_ui_pk_weight_gauge_button Button, class AActor* Target, bool IsExObject);
	void SetPsychicWeightGaugeStyle(EPsychicWeightGaugeButton Button, EPsychicWeightGaugeSize Size, int32 MaxLevel);
	void SetPsychicWeightGauge(EPsychicWeightGaugeButton Button, int32 Level, float Percent);
	void EndPsychicWeightGauge(Enum_ui_pk_weight_gauge_button Button, bool IsSuccess);
	void StartPursuitIcon(EPsychicObjectUniqueInputType LeftInput, EPsychicObjectUniqueInputButton LeftButton, EPsychicObjectUniqueInputType CenterInput, EPsychicObjectUniqueInputButton CenterButton, EPsychicObjectUniqueInputType RightInput, EPsychicObjectUniqueInputButton RightButton, bool FlagSasFire, Enum_ui_action_icon_device_type DeviceType, bool FlagDrawMouse);
	void EndPursuitIcon(bool IsSuccess);
	void CreatePsychicWeightGauge();
	void SetPsychicWeightGaugeVisible(Enum_ui_pk_weight_gauge_button Button, bool Param_IsVisible);
	void SetPsychicWeightGaugeReverse(bool IsReverse);
	void GetPsychicWeightGaugeReverseFlag(bool* IsReverse);
	void UsePsychicGauge(float UsePercent);
	void ErrorPsychicGauge();
	bool SetCrushBonus(class ARSCharacterBase* Target, int32 bonus);
	bool PlayDamageEffect(bool IsCritical);
	void SetPsychicWeightGaugeEnableFlag(Enum_ui_pk_weight_gauge_button Button, bool IsEnable);
	void LevelUp(int32 NewLevel);
	void SasChangePage(int32 Page);
	void DebugSasSetHideLockIconFlag(bool Flag);
	void DebugSasSetHidePsychicGaugeFlag(bool Flag);
	void UpdatePsychicWeightGauge();
	void StartPsychicWeightGaugeReal(EPsychicWeightGaugeButton Button, class AActor* Target, bool ExFlag);
	void EndPsychicWeightGaugeReal(EPsychicWeightGaugeButton Button, bool IsSuccess);
	void DriveGaugeSetPercent(float Percent);
	void DriveGaugeSetUnlockBrainField(bool IsUnlock);
	void DriveGaugeSetDriveMode(bool IsDriveMode);
	void DriveGaugeSetBrainFieldMode(bool IsBrainField);
	void RushPursuitIcon(bool Left, bool Center, bool Right);
	void SetPsychicGaugeEffect(int32 Param_Index, float Time);
	void SetPsychicGaugeLevel(int32 Level);
	void InitSASObject();
	void StartSasHologram(EPlayerID CharaID, bool IsCrashVision);
	void StopSasHologram();
	void DecideSasHologram();
	void UpdateSasHologram();
	void SetPsychicWeightGaugeEnableComboFlag(bool IsEnable);
	void SetPursuitIconStickHoldPercent(float LeftPercent, float CenterPercent, float RightPercent);
	void SetPursuitIconStickRoll(bool FlagLeft, bool FlagCenter, bool FlagRight);
	void SetPursuitIconStickHold(bool FlagLeft, bool FlagCenter, bool FlagRight);
	void SetPursuitIconRushPercent(float LeftPercent, float CenterPercent, float RightPercent);
	void SetPursuitIconStickRollStart(bool FlagStartLeft, bool FlagStartCenter, bool FlagStartRight);
	void DroneGuideOpen(Enum_ui_object_guide ObjectID);
	void DroneGuideClose();
	void SetPursuitIconButtonHoldPercent(float LeftPercent, float CenterPercent, float RightPercent);
	void SetPursuitIconButtonHold(bool IsHoldLeft, bool IsHoldCenter, bool IsHoldRight);
	void SetDrawModeBattle();
	void SetDrawModeTown();
	void UpdateDrawWidget();
	void UpdateDrawWidgetHpMain();
	void UpdateDrawWidgetHpSub();
	void UpdateDrawWidgetBrainCrashGauge();
	void UpdateDrawWidgetItemMenu();
	void UpdateDrawWidgetSasMenu();
	void UpdateDrawWidgetOther();
	void SetDrawModeAjito();
	void SetDrawModeKaren();
	void UpdateDrawWidgetLog();
	void UpdateDrawWidgetDroneGuide();
	void UpdateDrawWidgetPsychicGauge();
	void UpdateDrawWidgetBrainCrashGaugeEnemy();
	void SetDrawModeEM1500();
	bool UpdateDrawWidgetMiniMap();
	void ExpBonusOpen(float bonus);
	void ExpBonusClose();
	void UpdateDrawWidgetExpBonus();
	void ExpBonusUpdate(float bonus);
	void CreateWidgetBrainTutorial();
	bool PlayDecideAnimeBrainTuto();
	bool OpenBrainTuto();
	bool IsPlayBrainTuto();
	void DriveGaugeSetDrivePercent(float Percent);
	void DriveGaugeSetBrainPercent(float Percent);
	void DriveGaugeSetStockFlag(bool StockFlag, bool UseItemFlag);
	void DriveGaugeSetDownFlag(bool DownFlag);
	void UpdateDrawWidgetTeamBondLv();
	void SetDrawModeBattleBrainField();
	void SetDrawModeNaomi();
	void DriveGaugeSetDisableFlag(bool DisableFlag);
	void DriveGaugeSetRemainingSecond(int32 Second);
	void DriveGaugeSetBrainChargePercent(float Percent);
	void DriveGaugeSetVisibleBrainKeyGuide(bool Visibleflag);
	void MiniTipsOpen(int32 TipsID);
	void MiniTipsClose();
	void UpdateDrawWidgetMiniTips();
	bool CloseMinimap(bool Force);
	bool OpenMinimap(bool Force);
	int32 GetEnemyLevel(class ARSCharacterBase* Target);
	void SasFireStart();
	void SasFireEnd(bool IsSuccess);
	void SasFireRush();
	int32 CreateDiscoverIndexList(class UUIDiscover* UIDiscover);
	bool RemoveDiscoverIndexList(int32 Param_Index);
	void MiniTipsStartDraw(EHelpTutorial TipsID);
	void MiniTipsStopDraw(EHelpTutorial TipsID);
	void MiniTipsUpdate();
	void MiniTipsSetCurrentTips();
	void MiniTipsCurrentTipsFlagResetCheck();
	void PsychicTimerOpen();
	void PsychicTimerClose();
	void PsychicTimerSetGaugePercent(float Percent);
	void MiniTipsClearCurrentTips();
	bool CloseMiniTips(EHelpTutorial ID);
	EHelpTutorial GetCurrentMiniTipsID();
	void MiniTipsSortList();
	void MiniTipsSwapList(int32 Index0, int32 Index1);
	void MiniTipsDecrementTips();
	void SetDrawModeBrainCrash();
	void UpdateDrawWidgetHpEnemyBoss();
	void ItemMenuGetCurrentItemID(class FName* ItemId);
	void UpdateDrawWidgetShortcutGuide();
	void MiniTipsSuccessOpen();
	void MiniTipsSuccessClose();
	void CreateWidgetMiniTipsSuccess();
	bool EndMinimapBrainField();
	bool StartMinimapBrainField();
	void PsychicTimerSetState(int32 Param_Index);
	void SetDebugFlagDrawShortcutGuide(bool IsDraw);
	void GetDebugFlagDrawShortcutGuide(bool* IsDraw);
	void Set_Player_Wait_Flag(bool IsWait);
	void UpdateShortcutGuide();
	void UpdateDrawWidgetBrainTalk();
	void CreatePkObjectTimer();
	void UpdateDrawWidgetTutoOperation();
	void Set_Draw_Mode_Brain_Crash_Nomal(bool IsBrainCrash);
	bool SasSetChangePageReady(bool ReadyFlagL, bool ReadyFlagR);
	void UpdateDrawWidgetHUD();
	void UpdateDrawWidgetResurrection();
	bool MiniMapModelDelete();
	void SetDrawModeYuitosChildhood();
	void UpdateDrawWidgetLevelUp();
	void UpdateDrawWidgetSuccess();
	void MiniTipsSuccessUpdate();
	bool StartNexusDrive();
	void UpdateDrawWidgetNexusDrive();
	void GetNexusDriveUsingAnimTime(float* Time);
	bool UpdateGuide();
	void GetNexusDriveDefaultAnimTime(float* Time);
	void UpdateDrawWidgetVisionSimulatorTimer();
	bool SetVisionSimulatorTimerDraw(bool IsDraw);
	bool SetVisionSimulatorTimerColor(int32 ColorIndex);
	void SetDrawModeVisionSimulatorStart();
	void UpdateNexusDriveNotice();
	void UpdateDrawPkObjectTimer();

	void IsDrawMiniTipsSuccess(bool* IsDraw) const;
	bool IsUsingBrainField() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ui_menu_battle_control_C">();
	}
	static class UUi_menu_battle_control_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUi_menu_battle_control_C>();
	}
};
static_assert(alignof(UUi_menu_battle_control_C) == 0x000008, "Wrong alignment on UUi_menu_battle_control_C");
static_assert(sizeof(UUi_menu_battle_control_C) == 0x000958, "Wrong size on UUi_menu_battle_control_C");
static_assert(offsetof(UUi_menu_battle_control_C, UberGraphFrame) == 0x000538, "Member 'UUi_menu_battle_control_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Out) == 0x000540, "Member 'UUi_menu_battle_control_C::Out' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, In) == 0x000548, "Member 'UUi_menu_battle_control_C::In' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Damage_critical) == 0x000550, "Member 'UUi_menu_battle_control_C::Damage_critical' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Damage_normal) == 0x000558, "Member 'UUi_menu_battle_control_C::Damage_normal' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, brain_gauge_enemy_boss) == 0x000560, "Member 'UUi_menu_battle_control_C::brain_gauge_enemy_boss' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, BrainCrash_gauge_boss) == 0x000568, "Member 'UUi_menu_battle_control_C::BrainCrash_gauge_boss' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Cv_button) == 0x000570, "Member 'UUi_menu_battle_control_C::Cv_button' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Cv_Unacquired_0) == 0x000578, "Member 'UUi_menu_battle_control_C::Cv_Unacquired_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Cv_Unacquired_1) == 0x000580, "Member 'UUi_menu_battle_control_C::Cv_Unacquired_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Cv_Unacquired_2) == 0x000588, "Member 'UUi_menu_battle_control_C::Cv_Unacquired_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Cv_Unacquired_3) == 0x000590, "Member 'UUi_menu_battle_control_C::Cv_Unacquired_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_enemy_boss) == 0x000598, "Member 'UUi_menu_battle_control_C::Hp_enemy_boss' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_p0) == 0x0005A0, "Member 'UUi_menu_battle_control_C::Hp_p0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_p0_base_set) == 0x0005A8, "Member 'UUi_menu_battle_control_C::Hp_p0_base_set' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_p0_Icon_Status_set) == 0x0005B0, "Member 'UUi_menu_battle_control_C::Hp_p0_Icon_Status_set' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_p0_vitality_num_set) == 0x0005B8, "Member 'UUi_menu_battle_control_C::Hp_p0_vitality_num_set' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_p1) == 0x0005C0, "Member 'UUi_menu_battle_control_C::Hp_p1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Hp_p2) == 0x0005C8, "Member 'UUi_menu_battle_control_C::Hp_p2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Icon_Status01) == 0x0005D0, "Member 'UUi_menu_battle_control_C::Icon_Status01' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Icon_Status02) == 0x0005D8, "Member 'UUi_menu_battle_control_C::Icon_Status02' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Icon_Status03) == 0x0005E0, "Member 'UUi_menu_battle_control_C::Icon_Status03' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Icon_Status04) == 0x0005E8, "Member 'UUi_menu_battle_control_C::Icon_Status04' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Icon_Status05) == 0x0005F0, "Member 'UUi_menu_battle_control_C::Icon_Status05' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Item_menu) == 0x0005F8, "Member 'UUi_menu_battle_control_C::Item_menu' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Minimap) == 0x000600, "Member 'UUi_menu_battle_control_C::Minimap' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Mission_Time_Frame) == 0x000608, "Member 'UUi_menu_battle_control_C::Mission_Time_Frame' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_p1) == 0x000610, "Member 'UUi_menu_battle_control_C::NexusDrive_p1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_p2) == 0x000618, "Member 'UUi_menu_battle_control_C::NexusDrive_p2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_0) == 0x000620, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_1) == 0x000628, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_2) == 0x000630, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_3) == 0x000638, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_base_0) == 0x000640, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_base_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_base_1) == 0x000648, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_base_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_base_2) == 0x000650, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_base_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_base_3) == 0x000658, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_base_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_center_0) == 0x000660, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_center_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_center_1) == 0x000668, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_center_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_center_2) == 0x000670, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_center_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_center_3) == 0x000678, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_center_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_corner_0) == 0x000680, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_corner_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_corner_1) == 0x000688, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_corner_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_corner_2) == 0x000690, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_corner_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, NexusDrive_Sas_corner_3) == 0x000698, "Member 'UUi_menu_battle_control_C::NexusDrive_Sas_corner_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, OverlayShadow) == 0x0006A0, "Member 'UUi_menu_battle_control_C::OverlayShadow' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, OverlayWidgets_1) == 0x0006A8, "Member 'UUi_menu_battle_control_C::OverlayWidgets_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, OverlayWidgets_2) == 0x0006B0, "Member 'UUi_menu_battle_control_C::OverlayWidgets_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, SAS_Base) == 0x0006B8, "Member 'UUi_menu_battle_control_C::SAS_Base' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_button) == 0x0006C0, "Member 'UUi_menu_battle_control_C::Sas_button' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_none_0) == 0x0006C8, "Member 'UUi_menu_battle_control_C::Sas_none_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_none_1) == 0x0006D0, "Member 'UUi_menu_battle_control_C::Sas_none_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_none_2) == 0x0006D8, "Member 'UUi_menu_battle_control_C::Sas_none_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_none_3) == 0x0006E0, "Member 'UUi_menu_battle_control_C::Sas_none_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_page) == 0x0006E8, "Member 'UUi_menu_battle_control_C::Sas_page' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Sas_page_menu) == 0x0006F0, "Member 'UUi_menu_battle_control_C::Sas_page_menu' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Size_psychic_gauge) == 0x0006F8, "Member 'UUi_menu_battle_control_C::Size_psychic_gauge' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Text_party_vitality_pl_1_num1) == 0x000700, "Member 'UUi_menu_battle_control_C::Text_party_vitality_pl_1_num1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Text_party_vitality_pl_1_num2) == 0x000708, "Member 'UUi_menu_battle_control_C::Text_party_vitality_pl_1_num2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Text_party_vitality_pl_1_slash) == 0x000710, "Member 'UUi_menu_battle_control_C::Text_party_vitality_pl_1_slash' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, Text_pl_01) == 0x000718, "Member 'UUi_menu_battle_control_C::Text_pl_01' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Brain_bonus1) == 0x000720, "Member 'UUi_menu_battle_control_C::WB_ui_Brain_bonus1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Brain_frame3) == 0x000728, "Member 'UUi_menu_battle_control_C::WB_ui_Brain_frame3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Brain_gauge3) == 0x000730, "Member 'UUi_menu_battle_control_C::WB_ui_Brain_gauge3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Brain_gauge_en_frame) == 0x000738, "Member 'UUi_menu_battle_control_C::WB_ui_Brain_gauge_en_frame' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Item_Menu_2) == 0x000740, "Member 'UUi_menu_battle_control_C::WB_ui_Item_Menu_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_LevelUp) == 0x000748, "Member 'UUi_menu_battle_control_C::WB_ui_LevelUp' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Log) == 0x000750, "Member 'UUi_menu_battle_control_C::WB_ui_Log' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_MapGuide) == 0x000758, "Member 'UUi_menu_battle_control_C::WB_ui_MapGuide' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_MiniMes) == 0x000760, "Member 'UUi_menu_battle_control_C::WB_ui_MiniMes' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_MissionTimer) == 0x000768, "Member 'UUi_menu_battle_control_C::WB_ui_MissionTimer' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_NexusDrive_Jack) == 0x000770, "Member 'UUi_menu_battle_control_C::WB_ui_NexusDrive_Jack' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_ObjectGuide) == 0x000778, "Member 'UUi_menu_battle_control_C::WB_ui_ObjectGuide' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_PK_action_icon) == 0x000780, "Member 'UUi_menu_battle_control_C::WB_ui_PK_action_icon' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_PK_action_icon_L) == 0x000788, "Member 'UUi_menu_battle_control_C::WB_ui_PK_action_icon_L' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_PK_action_icon_R) == 0x000790, "Member 'UUi_menu_battle_control_C::WB_ui_PK_action_icon_R' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_PK_psychic_gauge_1) == 0x000798, "Member 'UUi_menu_battle_control_C::WB_ui_PK_psychic_gauge_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_PK_psychic_gauge_2) == 0x0007A0, "Member 'UUi_menu_battle_control_C::WB_ui_PK_psychic_gauge_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_PK_psychic_timer_1) == 0x0007A8, "Member 'UUi_menu_battle_control_C::WB_ui_PK_psychic_timer_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Sas_frame_0) == 0x0007B0, "Member 'UUi_menu_battle_control_C::WB_ui_Sas_frame_0' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Sas_frame_1) == 0x0007B8, "Member 'UUi_menu_battle_control_C::WB_ui_Sas_frame_1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Sas_frame_2) == 0x0007C0, "Member 'UUi_menu_battle_control_C::WB_ui_Sas_frame_2' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Sas_frame_3) == 0x0007C8, "Member 'UUi_menu_battle_control_C::WB_ui_Sas_frame_3' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Sas_hologram_01) == 0x0007D0, "Member 'UUi_menu_battle_control_C::WB_ui_Sas_hologram_01' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Success) == 0x0007D8, "Member 'UUi_menu_battle_control_C::WB_ui_Success' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_TeamKizuna) == 0x0007E0, "Member 'UUi_menu_battle_control_C::WB_ui_TeamKizuna' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Vitality_en_01_frame) == 0x0007E8, "Member 'UUi_menu_battle_control_C::WB_ui_Vitality_en_01_frame' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Vitality_pl_02_frame) == 0x0007F0, "Member 'UUi_menu_battle_control_C::WB_ui_Vitality_pl_02_frame' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Vitality_pl_03_frame) == 0x0007F8, "Member 'UUi_menu_battle_control_C::WB_ui_Vitality_pl_03_frame' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, BackupBrainTarget) == 0x000800, "Member 'UUi_menu_battle_control_C::BackupBrainTarget' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, BackupBrainRate) == 0x000808, "Member 'UUi_menu_battle_control_C::BackupBrainRate' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, BrainCrashGaugeDrawTime) == 0x00080C, "Member 'UUi_menu_battle_control_C::BrainCrashGaugeDrawTime' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_Icon_Intercept) == 0x000810, "Member 'UUi_menu_battle_control_C::WB_Icon_Intercept' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, InterceptTarget) == 0x000818, "Member 'UUi_menu_battle_control_C::InterceptTarget' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, InterceptState) == 0x000820, "Member 'UUi_menu_battle_control_C::InterceptState' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, IsActiveIntercept) == 0x000824, "Member 'UUi_menu_battle_control_C::IsActiveIntercept' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeInitFlag) == 0x000825, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeInitFlag' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagTown) == 0x000826, "Member 'UUi_menu_battle_control_C::FlagTown' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WbPsychicWeightGauge) == 0x000828, "Member 'UUi_menu_battle_control_C::WbPsychicWeightGauge' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeCurrentIndex) == 0x000838, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeCurrentIndex' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeCurrentTarget) == 0x000848, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeCurrentTarget' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeWorkNum) == 0x000858, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeWorkNum' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeButtonNum) == 0x00085C, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeButtonNum' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, DebugSasHidePsychicGauge) == 0x000860, "Member 'UUi_menu_battle_control_C::DebugSasHidePsychicGauge' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeEnableFlag) == 0x000868, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeEnableFlag' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeEnableFlagWork) == 0x000878, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeEnableFlagWork' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeTarget) == 0x000888, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeTarget' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeTargetWork) == 0x000898, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeTargetWork' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeSuccessFlag) == 0x0008A8, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeSuccessFlag' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeSize) == 0x0008B8, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeSize' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeMaxLevel) == 0x0008C8, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeMaxLevel' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagAjito) == 0x0008D8, "Member 'UUi_menu_battle_control_C::FlagAjito' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagDroneGuide) == 0x0008D9, "Member 'UUi_menu_battle_control_C::FlagDroneGuide' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagExpBonus) == 0x0008DA, "Member 'UUi_menu_battle_control_C::FlagExpBonus' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagMiniTips) == 0x0008DB, "Member 'UUi_menu_battle_control_C::FlagMiniTips' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WB_ui_Brain_tutorial1) == 0x0008E0, "Member 'UUi_menu_battle_control_C::WB_ui_Brain_tutorial1' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, CurrentTipsID) == 0x0008E8, "Member 'UUi_menu_battle_control_C::CurrentTipsID' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagMiniTipsPrioTop) == 0x0008E9, "Member 'UUi_menu_battle_control_C::FlagMiniTipsPrioTop' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, MiniTipsWorkList) == 0x0008F0, "Member 'UUi_menu_battle_control_C::MiniTipsWorkList' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, MiniTipsWorkPrioList) == 0x000900, "Member 'UUi_menu_battle_control_C::MiniTipsWorkPrioList' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, MiniTipsNum) == 0x000910, "Member 'UUi_menu_battle_control_C::MiniTipsNum' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, MiniTipsDrawTime) == 0x000914, "Member 'UUi_menu_battle_control_C::MiniTipsDrawTime' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, MiniTipsTime) == 0x000918, "Member 'UUi_menu_battle_control_C::MiniTipsTime' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, MiniTipsState) == 0x00091C, "Member 'UUi_menu_battle_control_C::MiniTipsState' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagPsychicTimerActive) == 0x000920, "Member 'UUi_menu_battle_control_C::FlagPsychicTimerActive' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, PsychicWeightGaugeExFlag) == 0x000928, "Member 'UUi_menu_battle_control_C::PsychicWeightGaugeExFlag' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, WidgetMiniTipsSuccess) == 0x000938, "Member 'UUi_menu_battle_control_C::WidgetMiniTipsSuccess' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, DebugFlagDrawShortcutGuide) == 0x000940, "Member 'UUi_menu_battle_control_C::DebugFlagDrawShortcutGuide' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagPlayerWait) == 0x000941, "Member 'UUi_menu_battle_control_C::FlagPlayerWait' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, ShortcutGuideState) == 0x000944, "Member 'UUi_menu_battle_control_C::ShortcutGuideState' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, ShortcutGuideWaitFlag) == 0x000948, "Member 'UUi_menu_battle_control_C::ShortcutGuideWaitFlag' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, ShortcutGuideTimer) == 0x00094C, "Member 'UUi_menu_battle_control_C::ShortcutGuideTimer' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagPsychicChaseCenter) == 0x000950, "Member 'UUi_menu_battle_control_C::FlagPsychicChaseCenter' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagPsychicChaseL) == 0x000951, "Member 'UUi_menu_battle_control_C::FlagPsychicChaseL' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagPsychicChaseR) == 0x000952, "Member 'UUi_menu_battle_control_C::FlagPsychicChaseR' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagSasHologram) == 0x000953, "Member 'UUi_menu_battle_control_C::FlagSasHologram' has a wrong offset!");
static_assert(offsetof(UUi_menu_battle_control_C, FlagBrainField) == 0x000954, "Member 'UUi_menu_battle_control_C::FlagBrainField' has a wrong offset!");

}

