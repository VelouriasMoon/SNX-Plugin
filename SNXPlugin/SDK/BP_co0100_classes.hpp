#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_co0100

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_CableBase_classes.hpp"
#include "ECableType_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_co0100.BP_co0100_C
// 0x0018 (0x0330 - 0x0318)
class ABP_co0100_C final : public ABP_CableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_co0100_C;                        // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UABP_co0100_C*                          AnimBP;                                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_BP_co0100_C;                                 // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DRIVE_MODE_COLOR_RATE;                             // 0x032C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_co0100(int32 EntryPoint);
	void BeginOverrideGravity(ERSCableGravityType Type);
	void ReceiveBeginPlay();
	void EndOverrideGravity(ERSCableGravityType Type);
	void DoCodeStart(ECableType Type, bool bOptionNoCutin, bool bNexusDrive, bool bExColor, bool* bDummy);
	void EventPhysicsIdling(float IdlingSec, bool* bDummy);

	void GetCableIndex(int32* Param_Index) const;
	void GetMaterialLocationParamName(class FName* ParamName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_co0100_C">();
	}
	static class ABP_co0100_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_co0100_C>();
	}
};
static_assert(alignof(ABP_co0100_C) == 0x000008, "Wrong alignment on ABP_co0100_C");
static_assert(sizeof(ABP_co0100_C) == 0x000330, "Wrong size on ABP_co0100_C");
static_assert(offsetof(ABP_co0100_C, UberGraphFrame_BP_co0100_C) == 0x000318, "Member 'ABP_co0100_C::UberGraphFrame_BP_co0100_C' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C, AnimBP) == 0x000320, "Member 'ABP_co0100_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C, Index_BP_co0100_C) == 0x000328, "Member 'ABP_co0100_C::Index_BP_co0100_C' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C, DRIVE_MODE_COLOR_RATE) == 0x00032C, "Member 'ABP_co0100_C::DRIVE_MODE_COLOR_RATE' has a wrong offset!");

}

