#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainFieldManager

#include "Basic.hpp"

#include "BP_BrainFieldManager_classes.hpp"
#include "BP_BrainFieldManager_parameters.hpp"


namespace SDK
{

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_BrainFieldBattleStart__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::ED_BrainFieldBattleStart__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ED_BrainFieldBattleStart__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_BrainFieldBattleEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldEndType                      Param_EndType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ED_BrainFieldBattleEnd__DelegateSignature(EBrainFieldEndType Param_EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ED_BrainFieldBattleEnd__DelegateSignature");

	Params::BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature Parms{};

	Parms.Param_EndType = Param_EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_BrainFieldSwitchBG__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBrainField                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::ED_BrainFieldSwitchBG__DelegateSignature(bool IsBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ED_BrainFieldSwitchBG__DelegateSignature");

	Params::BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature Parms{};

	Parms.IsBrainField = IsBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_ChangeMonitorState__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldMonitorState                 MonitorState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ED_ChangeMonitorState__DelegateSignature(EBrainFieldMonitorState MonitorState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ED_ChangeMonitorState__DelegateSignature");

	Params::BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature Parms{};

	Parms.MonitorState = MonitorState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ExecuteUbergraph_BP_BrainFieldManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ExecuteUbergraph_BP_BrainFieldManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ExecuteUbergraph_BP_BrainFieldManager");

	Params::BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ReceiveEndPlay");

	Params::BP_BrainFieldManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ResetRenderTarget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERenderTargetType                       RenderTargetType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ResetRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ResetRenderTarget");

	Params::BP_BrainFieldManager_C_ResetRenderTarget Parms{};

	Parms.RenderTargetType = RenderTargetType;
	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetBGRenderTarget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetBGRenderTarget(class UTextureRenderTarget2D* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetBGRenderTarget");

	Params::BP_BrainFieldManager_C_SetBGRenderTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OnReadyDebManager
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::OnReadyDebManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "OnReadyDebManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OnChangeMonitorState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldMonitorState                 MonitorState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::OnChangeMonitorState(EBrainFieldMonitorState MonitorState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "OnChangeMonitorState");

	Params::BP_BrainFieldManager_C_OnChangeMonitorState Parms{};

	Parms.MonitorState = MonitorState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OnChangedDebugForceEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADebuggingItemBool*               InItem                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::OnChangedDebugForceEnd(const class ADebuggingItemBool* InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "OnChangedDebugForceEnd");

	Params::BP_BrainFieldManager_C_OnChangedDebugForceEnd Parms{};

	Parms.InItem = InItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_LevelLoaded
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_LevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_LevelLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ReceiveTick");

	Params::BP_BrainFieldManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BrainFieldManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_DelayPlayerPositionCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_DelayPlayerPositionCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_DelayPlayerPositionCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetDynamicShadowDelay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateSetDynamicShadowDelay(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetDynamicShadowDelay");

	Params::BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetDynamicShadow
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateSetDynamicShadow(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetDynamicShadow");

	Params::BP_BrainFieldManager_C_PrivateSetDynamicShadow Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_DelayedHood
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Visible                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::Private_DelayedHood(const TArray<class AActor*>& Actors, const bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_DelayedHood");

	Params::BP_BrainFieldManager_C_Private_DelayedHood Parms{};

	Parms.Actors = std::move(Actors);
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateEvent_PlaySequencerENPCBrainField
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseRefresh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateEvent_PlaySequencerENPCBrainField(bool UseRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateEvent_PlaySequencerENPCBrainField");

	Params::BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField Parms{};

	Parms.UseRefresh = UseRefresh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_UnloadCollisionLevel
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_UnloadCollisionLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_UnloadCollisionLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_LoadCollisionLevel
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_LoadCollisionLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_LoadCollisionLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateEvent_HiddenRuntimeLevels
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivateEvent_HiddenRuntimeLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateEvent_HiddenRuntimeLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateEvent_VisibleRuntimeLevels
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivateEvent_VisibleRuntimeLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateEvent_VisibleRuntimeLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_UnloadNavimeshLevels
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_UnloadNavimeshLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_UnloadNavimeshLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_LoadNavimeshLevels
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_LoadNavimeshLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_LoadNavimeshLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_PerformEndWait
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::Private_PerformEndWait(bool MoveBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_PerformEndWait");

	Params::BP_BrainFieldManager_C_Private_PerformEndWait Parms{};

	Parms.MoveBrainField = MoveBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_SwitchVisibleActorSplitFrame
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibleBrainField                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ObjectNum                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::Private_SwitchVisibleActorSplitFrame(bool VisibleBrainField, int32 ObjectNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_SwitchVisibleActorSplitFrame");

	Params::BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame Parms{};

	Parms.VisibleBrainField = VisibleBrainField;
	Parms.ObjectNum = ObjectNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_PerformEndWaitFinish
// (BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_PerformEndWaitFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private_PerformEndWaitFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SubUser                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::StartBrainField(class AActor* User, class AActor* SubUser, bool IsEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "StartBrainField");

	Params::BP_BrainFieldManager_C_StartBrainField Parms{};

	Parms.User = User;
	Parms.SubUser = SubUser;
	Parms.IsEvent = IsEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetPlayerList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Param_PlayerLists                                      (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetPlayerList(TArray<class AActor*>* Param_PlayerLists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetPlayerList");

	Params::BP_BrainFieldManager_C_GetPlayerList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PlayerLists != nullptr)
		*Param_PlayerLists = std::move(Parms.Param_PlayerLists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EndBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldEndType                      Param_EndType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_BrainCrashAttacker                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_BrainCrashAttackerSub                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::EndBrainField(EBrainFieldEndType Param_EndType, class AActor* Param_BrainCrashAttacker, class AActor* Param_BrainCrashAttackerSub)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EndBrainField");

	Params::BP_BrainFieldManager_C_EndBrainField Parms{};

	Parms.Param_EndType = Param_EndType;
	Parms.Param_BrainCrashAttacker = Param_BrainCrashAttacker;
	Parms.Param_BrainCrashAttackerSub = Param_BrainCrashAttackerSub;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenEnd
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InGameStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PerformOpenEnd(bool InGameStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformOpenEnd");

	Params::BP_BrainFieldManager_C_PerformOpenEnd Parms{};

	Parms.InGameStart = InGameStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseEnd
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PerformCloseEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformCloseEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldEnemyList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InGameStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllTrain                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   TargetEnemyListBattleField                             (Parm, OutParm, HasGetValueTypeHash)
// TArray<class AActor*>                   TargetEnemyListBattleFieldWave                         (Parm, OutParm, HasGetValueTypeHash)
// TArray<class AActor*>                   TargetEnemyListNormal                                  (Parm, OutParm, HasGetValueTypeHash)
// TArray<class AActor*>                   FarEnemyLists                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetBrainFieldEnemyList(bool InGameStart, bool* AllTrain, TArray<class AActor*>* TargetEnemyListBattleField, TArray<class AActor*>* TargetEnemyListBattleFieldWave, TArray<class AActor*>* TargetEnemyListNormal, TArray<class AActor*>* FarEnemyLists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetBrainFieldEnemyList");

	Params::BP_BrainFieldManager_C_GetBrainFieldEnemyList Parms{};

	Parms.InGameStart = InGameStart;

	UObject::ProcessEvent(Func, &Parms);

	if (AllTrain != nullptr)
		*AllTrain = Parms.AllTrain;

	if (TargetEnemyListBattleField != nullptr)
		*TargetEnemyListBattleField = std::move(Parms.TargetEnemyListBattleField);

	if (TargetEnemyListBattleFieldWave != nullptr)
		*TargetEnemyListBattleFieldWave = std::move(Parms.TargetEnemyListBattleFieldWave);

	if (TargetEnemyListNormal != nullptr)
		*TargetEnemyListNormal = std::move(Parms.TargetEnemyListNormal);

	if (FarEnemyLists != nullptr)
		*FarEnemyLists = std::move(Parms.FarEnemyLists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenStartInnerOne
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FTransform>               Transforms                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    InGameStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<bool>                            OutValid                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PerformOpenStartInnerOne(bool IsUser, TArray<class AActor*>& Lists, TArray<struct FTransform>& Transforms, bool InGameStart, TArray<bool>& OutValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformOpenStartInnerOne");

	Params::BP_BrainFieldManager_C_PerformOpenStartInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);
	Parms.Transforms = std::move(Transforms);
	Parms.InGameStart = InGameStart;
	Parms.OutValid = std::move(OutValid);

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
	Transforms = std::move(Parms.Transforms);
	OutValid = std::move(Parms.OutValid);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenEndInnerOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    InGameStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PerformOpenEndInnerOne(bool IsUser, TArray<class AActor*>& Lists, bool InGameStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformOpenEndInnerOne");

	Params::BP_BrainFieldManager_C_PerformOpenEndInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);
	Parms.InGameStart = InGameStart;

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseStartInnerOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PerformCloseStartInnerOne(bool IsUser, TArray<class AActor*>& Lists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformCloseStartInnerOne");

	Params::BP_BrainFieldManager_C_PerformCloseStartInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseEndInnerOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PerformCloseEndInnerOne(bool IsUser, TArray<class AActor*>& Lists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformCloseEndInnerOne");

	Params::BP_BrainFieldManager_C_PerformCloseEndInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenStart
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InGameStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PerformOpenStart(bool InGameStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformOpenStart");

	Params::BP_BrainFieldManager_C_PerformOpenStart Parms{};

	Parms.InGameStart = InGameStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseStart
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlaySequencer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PerformCloseStart(bool PlaySequencer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformCloseStart");

	Params::BP_BrainFieldManager_C_PerformCloseStart Parms{};

	Parms.PlaySequencer = PlaySequencer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldPlayerTransform
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTransform>               Transforms                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetBrainFieldPlayerTransform(TArray<struct FTransform>* Transforms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetBrainFieldPlayerTransform");

	Params::BP_BrainFieldManager_C_GetBrainFieldPlayerTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transforms != nullptr)
		*Transforms = std::move(Parms.Transforms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SwitchVisibleBrainFieldLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibleBrainField                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SwitchVisibleBrainFieldLevel(bool VisibleBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SwitchVisibleBrainFieldLevel");

	Params::BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel Parms{};

	Parms.VisibleBrainField = VisibleBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsFinishBrainFieldVisible
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Finish                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsFinishBrainFieldVisible(bool* Finish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsFinishBrainFieldVisible");

	Params::BP_BrainFieldManager_C_IsFinishBrainFieldVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Finish != nullptr)
		*Finish = Parms.Finish;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartFieldBattle
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::StartFieldBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "StartFieldBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EndFieldBattle
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EndFieldBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EndFieldBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsFinishNormalFieldVisible
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Finish                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsFinishNormalFieldVisible(bool* Finish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsFinishNormalFieldVisible");

	Params::BP_BrainFieldManager_C_IsFinishNormalFieldVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Finish != nullptr)
		*Finish = Parms.Finish;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetNormalLevelActorList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   LevelLists                                             (Parm, OutParm, HasGetValueTypeHash)
// TArray<class UBP_RSParticleBackgroundComponent_C*>LevelParticleList                                      (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetNormalLevelActorList(TArray<class AActor*>* LevelLists, TArray<class UBP_RSParticleBackgroundComponent_C*>* LevelParticleList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetNormalLevelActorList");

	Params::BP_BrainFieldManager_C_GetNormalLevelActorList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelLists != nullptr)
		*LevelLists = std::move(Parms.LevelLists);

	if (LevelParticleList != nullptr)
		*LevelParticleList = std::move(Parms.LevelParticleList);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.VisibleNormalActors
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ObjectNum                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VisibleSplitIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FBrainFieldRestoreFlag>   SettingFlags                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::VisibleNormalActors(bool IsVisible, int32 ObjectNum, int32& VisibleSplitIndex, TArray<class AActor*>& ActorList, TArray<struct FBrainFieldRestoreFlag>& SettingFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "VisibleNormalActors");

	Params::BP_BrainFieldManager_C_VisibleNormalActors Parms{};

	Parms.IsVisible = IsVisible;
	Parms.ObjectNum = ObjectNum;
	Parms.VisibleSplitIndex = VisibleSplitIndex;
	Parms.ActorList = std::move(ActorList);
	Parms.SettingFlags = std::move(SettingFlags);

	UObject::ProcessEvent(Func, &Parms);

	VisibleSplitIndex = Parms.VisibleSplitIndex;
	ActorList = std::move(Parms.ActorList);
	SettingFlags = std::move(Parms.SettingFlags);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.JumpBrainFieldTransform
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::JumpBrainFieldTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "JumpBrainFieldTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.JumpNormalTransform
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::JumpNormalTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "JumpNormalTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PlayPerformSequencer
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StartPlay                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PlayPerformSequencer(bool MoveBrainField, int32 Param_Index, bool* StartPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PlayPerformSequencer");

	Params::BP_BrainFieldManager_C_PlayPerformSequencer Parms{};

	Parms.MoveBrainField = MoveBrainField;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (StartPlay != nullptr)
		*StartPlay = Parms.StartPlay;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.CalcBrainFieldPsychicAttachmentTransform
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PsychicActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       LastPlayerTransform                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       NewPlayerTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       NewTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::CalcBrainFieldPsychicAttachmentTransform(class AActor* PsychicActor, const struct FTransform& LastPlayerTransform, const struct FTransform& NewPlayerTransform, struct FTransform* NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "CalcBrainFieldPsychicAttachmentTransform");

	Params::BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform Parms{};

	Parms.PsychicActor = PsychicActor;
	Parms.LastPlayerTransform = std::move(LastPlayerTransform);
	Parms.NewPlayerTransform = std::move(NewPlayerTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (NewTransform != nullptr)
		*NewTransform = std::move(Parms.NewTransform);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.CheckFinishCondition
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFinish                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::CheckFinishCondition(bool* IsFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "CheckFinishCondition");

	Params::BP_BrainFieldManager_C_CheckFinishCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFinish != nullptr)
		*IsFinish = Parms.IsFinish;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DebugForceEndField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForce                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::DebugForceEndField(bool IsForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "DebugForceEndField");

	Params::BP_BrainFieldManager_C_DebugForceEndField Parms{};

	Parms.IsForce = IsForce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PostLoadedLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PostLoadedLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PostLoadedLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupPlayerMaterial
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VisibleBrainField                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetupPlayerMaterial(class ARSBattlePlayer_C* Player, bool VisibleBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupPlayerMaterial");

	Params::BP_BrainFieldManager_C_SetupPlayerMaterial Parms{};

	Parms.Player = Player;
	Parms.VisibleBrainField = VisibleBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupEnemyEnabled
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetupEnemyEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupEnemyEnabled");

	Params::BP_BrainFieldManager_C_SetupEnemyEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartUserInput
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::StartUserInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "StartUserInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupEnemyEnabledInternal
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           InEnemy                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InEnemyIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<bool>                            EnemyFlagList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<bool>                            ComponentsFlagList                                     (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetupEnemyEnabledInternal(bool Enabled, class AActor* InEnemy, int32 InEnemyIndex, TArray<bool>& EnemyFlagList, TArray<bool>* ComponentsFlagList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupEnemyEnabledInternal");

	Params::BP_BrainFieldManager_C_SetupEnemyEnabledInternal Parms{};

	Parms.Enabled = Enabled;
	Parms.InEnemy = InEnemy;
	Parms.InEnemyIndex = InEnemyIndex;
	Parms.EnemyFlagList = std::move(EnemyFlagList);

	UObject::ProcessEvent(Func, &Parms);

	EnemyFlagList = std::move(Parms.EnemyFlagList);

	if (ComponentsFlagList != nullptr)
		*ComponentsFlagList = std::move(Parms.ComponentsFlagList);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupGrabObjectEnabled
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetupGrabObjectEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupGrabObjectEnabled");

	Params::BP_BrainFieldManager_C_SetupGrabObjectEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SwitchParticleSystem
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SwitchParticleSystem(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SwitchParticleSystem");

	Params::BP_BrainFieldManager_C_SwitchParticleSystem Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInvokeBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_InvokeBrainField                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsInvokeBrainField(bool* Param_InvokeBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsInvokeBrainField");

	Params::BP_BrainFieldManager_C_IsInvokeBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_InvokeBrainField != nullptr)
		*Param_InvokeBrainField = Parms.Param_InvokeBrainField;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetBrainFieldLightVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetBrainFieldLightVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetBrainFieldLightVisible");

	Params::BP_BrainFieldManager_C_SetBrainFieldLightVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformMoveBrainFieldInnerOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PerformMoveBrainFieldInnerOne(bool IsUser, TArray<class AActor*>& Lists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformMoveBrainFieldInnerOne");

	Params::BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformMoveNormalFieldInnerOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PerformMoveNormalFieldInnerOne(bool IsUser, TArray<class AActor*>& Lists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformMoveNormalFieldInnerOne");

	Params::BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetEndType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldEndType                      Param_EndType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetEndType(EBrainFieldEndType* Param_EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetEndType");

	Params::BP_BrainFieldManager_C_GetEndType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_EndType != nullptr)
		*Param_EndType = Parms.Param_EndType;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsReceiveBrainCrashGameOver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsGameOver                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsReceiveBrainCrashGameOver(bool* IsGameOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsReceiveBrainCrashGameOver");

	Params::BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsGameOver != nullptr)
		*IsGameOver = Parms.IsGameOver;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SwitchGameOver
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::SwitchGameOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SwitchGameOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.LoadAsset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSwitchBGSide
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_UserIsPlayer                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateSwitchBGSide(bool Param_UserIsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSwitchBGSide");

	Params::BP_BrainFieldManager_C_PrivateSwitchBGSide Parms{};

	Parms.Param_UserIsPlayer = Param_UserIsPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateMoveBFPlayerTransform
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseDynamicEventRelative                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateMoveBFPlayerTransform(bool UseDynamicEventRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateMoveBFPlayerTransform");

	Params::BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform Parms{};

	Parms.UseDynamicEventRelative = UseDynamicEventRelative;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OverrideBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SubUser                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::OverrideBrainField(class AActor* User, class AActor* SubUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "OverrideBrainField");

	Params::BP_BrainFieldManager_C_OverrideBrainField Parms{};

	Parms.User = User;
	Parms.SubUser = SubUser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOverrideStart
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlaySequencer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PerformOverrideStart(bool PlaySequencer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformOverrideStart");

	Params::BP_BrainFieldManager_C_PerformOverrideStart Parms{};

	Parms.PlaySequencer = PlaySequencer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupBFVisible
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivateSetupBFVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetupBFVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupPartyMaterial
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibleBrainField                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateSetupPartyMaterial(bool VisibleBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetupPartyMaterial");

	Params::BP_BrainFieldManager_C_PrivateSetupPartyMaterial Parms{};

	Parms.VisibleBrainField = VisibleBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupMaterial
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VisibleBrainField                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SetupBrainCode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateSetupMaterial(class AActor* Actor, bool VisibleBrainField, bool SetupBrainCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetupMaterial");

	Params::BP_BrainFieldManager_C_PrivateSetupMaterial Parms{};

	Parms.Actor = Actor;
	Parms.VisibleBrainField = VisibleBrainField;
	Parms.SetupBrainCode = SetupBrainCode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOverrideStartInnerOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Lists                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PerformOverrideStartInnerOne(bool IsUser, TArray<class AActor*>& Lists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PerformOverrideStartInnerOne");

	Params::BP_BrainFieldManager_C_PerformOverrideStartInnerOne Parms{};

	Parms.IsUser = IsUser;
	Parms.Lists = std::move(Lists);

	UObject::ProcessEvent(Func, &Parms);

	Lists = std::move(Parms.Lists);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Is Performance Sequencer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPerform                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::Is_Performance_Sequencer(bool* IsPerform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Is Performance Sequencer");

	Params::BP_BrainFieldManager_C_Is_Performance_Sequencer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPerform != nullptr)
		*IsPerform = Parms.IsPerform;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventOpenUser
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SubUser                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::EventOpenUser(class AActor* User, class AActor* SubUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EventOpenUser");

	Params::BP_BrainFieldManager_C_EventOpenUser Parms{};

	Parms.User = User;
	Parms.SubUser = SubUser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventClose
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EventClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EventClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupENPCStencil
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Set                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateSetupENPCStencil(class AActor* Target, bool Set, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetupENPCStencil");

	Params::BP_BrainFieldManager_C_PrivateSetupENPCStencil Parms{};

	Parms.Target = Target;
	Parms.Set = Set;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.LoadLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::LoadLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "LoadLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSwitchVisibleTeamActors
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateSwitchVisibleTeamActors(bool IsPlayer, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSwitchVisibleTeamActors");

	Params::BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors Parms{};

	Parms.IsPlayer = IsPlayer;
	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsEventStartup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsEvent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsEventStartup(bool* IsEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsEventStartup");

	Params::BP_BrainFieldManager_C_IsEventStartup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEvent != nullptr)
		*IsEvent = Parms.IsEvent;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.LoadENPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ENPCActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBrainFieldENPCType                     ENPCType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::LoadENPC(class AActor* ENPCActor, EBrainFieldENPCType ENPCType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "LoadENPC");

	Params::BP_BrainFieldManager_C_LoadENPC Parms{};

	Parms.ENPCActor = ENPCActor;
	Parms.ENPCType = ENPCType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.UnloadENPC
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::UnloadENPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "UnloadENPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventOpenUserEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EventOpenUserEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EventOpenUserEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartFreeCameraWatchUser
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTimeSeconds                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WatchOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::StartFreeCameraWatchUser(float BlendTimeSeconds, const struct FVector& WatchOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "StartFreeCameraWatchUser");

	Params::BP_BrainFieldManager_C_StartFreeCameraWatchUser Parms{};

	Parms.BlendTimeSeconds = BlendTimeSeconds;
	Parms.WatchOffset = std::move(WatchOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PlayerStopEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PlayerStopEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PlayerStopEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateUpdateFreeCameraWatchUser
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateUpdateFreeCameraWatchUser(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateUpdateFreeCameraWatchUser");

	Params::BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.BrainFieldUserHoodON
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HoodON                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::BrainFieldUserHoodON(bool HoodON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "BrainFieldUserHoodON");

	Params::BP_BrainFieldManager_C_BrainFieldUserHoodON Parms{};

	Parms.HoodON = HoodON;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetPlayerCameraWatchUser
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetPlayerCameraWatchUser(const struct FVector& TargetOffset, float Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetPlayerCameraWatchUser");

	Params::BP_BrainFieldManager_C_SetPlayerCameraWatchUser Parms{};

	Parms.TargetOffset = std::move(TargetOffset);
	Parms.Pitch = Pitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateUpdateFieldTimeColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateUpdateFieldTimeColor(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateUpdateFieldTimeColor");

	Params::BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventReceiveBrainCrashCheckENPC
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EventReceiveBrainCrashCheckENPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EventReceiveBrainCrashCheckENPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.UnloadENPCCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::UnloadENPCCheck(class ARSBattlePlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "UnloadENPCCheck");

	Params::BP_BrainFieldManager_C_UnloadENPCCheck Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldUser
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetBrainFieldUser(class AActor** User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetBrainFieldUser");

	Params::BP_BrainFieldManager_C_GetBrainFieldUser Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (User != nullptr)
		*User = Parms.User;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.BeginPlayerCameraWatchUser
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EaseTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::BeginPlayerCameraWatchUser(const struct FVector& TargetOffset, float Pitch, float EaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "BeginPlayerCameraWatchUser");

	Params::BP_BrainFieldManager_C_BeginPlayerCameraWatchUser Parms{};

	Parms.TargetOffset = std::move(TargetOffset);
	Parms.Pitch = Pitch;
	Parms.EaseTime = EaseTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EndPlayerCameraWatchUser
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EndPlayerCameraWatchUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EndPlayerCameraWatchUser");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateUpdatePlayerCameraWatchUser
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateUpdatePlayerCameraWatchUser(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateUpdatePlayerCameraWatchUser");

	Params::BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetVisiblePlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetVisiblePlayer(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetVisiblePlayer");

	Params::BP_BrainFieldManager_C_SetVisiblePlayer Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDebugForceBrainCrashENPCOverwrite
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetDebugForceBrainCrashENPCOverwrite(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetDebugForceBrainCrashENPCOverwrite");

	Params::BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDebugForceFieldColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SideColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Grayscale                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetDebugForceFieldColor(bool Enable, float SideColor, float Grayscale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetDebugForceFieldColor");

	Params::BP_BrainFieldManager_C_SetDebugForceFieldColor Parms{};

	Parms.Enable = Enable;
	Parms.SideColor = SideColor;
	Parms.Grayscale = Grayscale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetENPCStartTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetENPCStartTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetENPCStartTransform");

	Params::BP_BrainFieldManager_C_SetENPCStartTransform Parms{};

	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetENPCStartTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::GetENPCStartTransform(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetENPCStartTransform");

	Params::BP_BrainFieldManager_C_GetENPCStartTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldUserList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   User                                                   (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetBrainFieldUserList(TArray<class AActor*>* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetBrainFieldUserList");

	Params::BP_BrainFieldManager_C_GetBrainFieldUserList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (User != nullptr)
		*User = std::move(Parms.User);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupBrainFieldUser
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SubUser                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateSetupBrainFieldUser(class AActor* User, class AActor* SubUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetupBrainFieldUser");

	Params::BP_BrainFieldManager_C_PrivateSetupBrainFieldUser Parms{};

	Parms.User = User;
	Parms.SubUser = SubUser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DebugDispEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::DebugDispEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "DebugDispEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateOnSpawnBrainFieldBGEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_RSParticleBackgroundComponent_C*Emitter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateOnSpawnBrainFieldBGEffect(class UBP_RSParticleBackgroundComponent_C* Emitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateOnSpawnBrainFieldBGEffect");

	Params::BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect Parms{};

	Parms.Emitter = Emitter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReloadPlayerSequencer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ReloadPlayerSequencer(EPlayerID PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ReloadPlayerSequencer");

	Params::BP_BrainFieldManager_C_ReloadPlayerSequencer Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.VisibleNormalParticles
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class UBP_RSParticleBackgroundComponent_C*>ParticleList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// struct FBrainFieldRestoreFlag           RestoreFlag                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FBrainFieldRestoreFlag           SetRestoreFlag                                         (Parm, OutParm)

void ABP_BrainFieldManager_C::VisibleNormalParticles(bool IsVisible, TArray<class UBP_RSParticleBackgroundComponent_C*>& ParticleList, struct FBrainFieldRestoreFlag& RestoreFlag, struct FBrainFieldRestoreFlag* SetRestoreFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "VisibleNormalParticles");

	Params::BP_BrainFieldManager_C_VisibleNormalParticles Parms{};

	Parms.IsVisible = IsVisible;
	Parms.ParticleList = std::move(ParticleList);
	Parms.RestoreFlag = std::move(RestoreFlag);

	UObject::ProcessEvent(Func, &Parms);

	ParticleList = std::move(Parms.ParticleList);
	RestoreFlag = std::move(Parms.RestoreFlag);

	if (SetRestoreFlag != nullptr)
		*SetRestoreFlag = std::move(Parms.SetRestoreFlag);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetVisibleEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetVisibleEnemy(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetVisibleEnemy");

	Params::BP_BrainFieldManager_C_SetVisibleEnemy Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetTimePostRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetTimePostRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetTimePostRate");

	Params::BP_BrainFieldManager_C_SetTimePostRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.HiddenNearBG
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::HiddenNearBG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "HiddenNearBG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.RestoreVisibleNearBG
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::RestoreVisibleNearBG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "RestoreVisibleNearBG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.CheckCustomCollision
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::CheckCustomCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "CheckCustomCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldPlayerTransformCustomCollision
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTransform>               Transforms                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetBrainFieldPlayerTransformCustomCollision(TArray<struct FTransform>* Transforms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetBrainFieldPlayerTransformCustomCollision");

	Params::BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transforms != nullptr)
		*Transforms = std::move(Parms.Transforms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivatePostLoadCollisionLevel
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivatePostLoadCollisionLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivatePostLoadCollisionLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Update ENPCSequence Time
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Update_ENPCSequence_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Update ENPCSequence Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.HasSeamlessEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasEvent                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::HasSeamlessEvent(bool* HasEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "HasSeamlessEvent");

	Params::BP_BrainFieldManager_C_HasSeamlessEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasEvent != nullptr)
		*HasEvent = Parms.HasEvent;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDamageStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetDamageStep(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetDamageStep");

	Params::BP_BrainFieldManager_C_SetDamageStep Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.UndoENpcDriveSetting
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::UndoENpcDriveSetting(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "UndoENpcDriveSetting");

	Params::BP_BrainFieldManager_C_UndoENpcDriveSetting Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupEnemyWaveTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ARSBattleCharacter_C*>     WaveEnemyList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetupEnemyWaveTransform(TArray<class ARSBattleCharacter_C*>& WaveEnemyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupEnemyWaveTransform");

	Params::BP_BrainFieldManager_C_SetupEnemyWaveTransform Parms{};

	Parms.WaveEnemyList = std::move(WaveEnemyList);

	UObject::ProcessEvent(Func, &Parms);

	WaveEnemyList = std::move(Parms.WaveEnemyList);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupBrainFieldMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::SetupBrainFieldMaterial(ERSPartyPlayerKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupBrainFieldMaterial");

	Params::BP_BrainFieldManager_C_SetupBrainFieldMaterial Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInvokeBrainField_FromNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BrainFieldManager_C::IsInvokeBrainField_FromNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsInvokeBrainField_FromNative");

	Params::BP_BrainFieldManager_C_IsInvokeBrainField_FromNative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateCheckUseSpawnPsychicObject
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    UseSpawn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PrivateCheckUseSpawnPsychicObject(bool* UseSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateCheckUseSpawnPsychicObject");

	Params::BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseSpawn != nullptr)
		*UseSpawn = Parms.UseSpawn;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetUserIsPlayer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BrainFieldManager_C::GetUserIsPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetUserIsPlayer");

	Params::BP_BrainFieldManager_C_GetUserIsPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateLoadLevelVisible
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivateLoadLevelVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateLoadLevelVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventCheckUsePsychicSpawn
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EventCheckUsePsychicSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EventCheckUsePsychicSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetENPCCustomStencil
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Set                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetENPCCustomStencil(bool Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetENPCCustomStencil");

	Params::BP_BrainFieldManager_C_SetENPCCustomStencil Parms{};

	Parms.Set = Set;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.InBranField_FromNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BrainFieldManager_C::InBranField_FromNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "InBranField_FromNative");

	Params::BP_BrainFieldManager_C_InBranField_FromNative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsPerformanceSequencer_FromNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BrainFieldManager_C::IsPerformanceSequencer_FromNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsPerformanceSequencer_FromNative");

	Params::BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PlayPerformSequencerInternal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseRefresh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::PlayPerformSequencerInternal(bool UseRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PlayPerformSequencerInternal");

	Params::BP_BrainFieldManager_C_PlayPerformSequencerInternal Parms{};

	Parms.UseRefresh = UseRefresh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DebugSetMonitorIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::DebugSetMonitorIndex(EPlayerID Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "DebugSetMonitorIndex");

	Params::BP_BrainFieldManager_C_DebugSetMonitorIndex Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDelayedBattleFieldEnemyEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBossInBattleField                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetDelayedBattleFieldEnemyEnabled(int32 GroupID, bool IsBossInBattleField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetDelayedBattleFieldEnemyEnabled");

	Params::BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled Parms{};

	Parms.GroupID = GroupID;
	Parms.IsBossInBattleField = IsBossInBattleField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupJumpBFEnemyAvatar
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::SetupJumpBFEnemyAvatar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupJumpBFEnemyAvatar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateOverwriteRestoreTransform
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivateOverwriteRestoreTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateOverwriteRestoreTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetInvalidDamagePlayers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Invalid                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::PrivateSetInvalidDamagePlayers(bool Invalid, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateSetInvalidDamagePlayers");

	Params::BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers Parms{};

	Parms.Invalid = Invalid;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BrainFieldManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsNeedFrameWait");

	Params::BP_BrainFieldManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ChangeBrainFieldEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewEnemy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OldEnemy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::ChangeBrainFieldEnemy(class AActor* NewEnemy, class AActor* OldEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "ChangeBrainFieldEnemy");

	Params::BP_BrainFieldManager_C_ChangeBrainFieldEnemy Parms{};

	Parms.NewEnemy = NewEnemy;
	Parms.OldEnemy = OldEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.HasCustomRestoreTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseRestoreTransform                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::HasCustomRestoreTransform(bool* UseRestoreTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "HasCustomRestoreTransform");

	Params::BP_BrainFieldManager_C_HasCustomRestoreTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseRestoreTransform != nullptr)
		*UseRestoreTransform = Parms.UseRestoreTransform;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetCustomCollisionSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBrainFieldSettingsLocation      Settings                                               (Parm, OutParm, NoDestructor)
// bool                                    Param_UseCustomCollision                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::GetCustomCollisionSettings(struct FBrainFieldSettingsLocation* Settings, bool* Param_UseCustomCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetCustomCollisionSettings");

	Params::BP_BrainFieldManager_C_GetCustomCollisionSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = std::move(Parms.Settings);

	if (Param_UseCustomCollision != nullptr)
		*Param_UseCustomCollision = Parms.Param_UseCustomCollision;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupMenu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InMenu                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetupMenu(bool InMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetupMenu");

	Params::BP_BrainFieldManager_C_SetupMenu Parms{};

	Parms.InMenu = InMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventENPCWhiteoutEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::EventENPCWhiteoutEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "EventENPCWhiteoutEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateAdjustPlayerOpenSequenceLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::PrivateAdjustPlayerOpenSequenceLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "PrivateAdjustPlayerOpenSequenceLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private Player Position Check
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BrainFieldManager_C::Private_Player_Position_Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "Private Player Position Check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.RemoveEnpcFromEnemyList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   RefEnemyList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class AActor*>                   EnemyReturn                                            (Parm, OutParm, HasGetValueTypeHash)
// TArray<class AActor*>                   FarEnemyReturn                                         (Parm, OutParm, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::RemoveEnpcFromEnemyList(TArray<class AActor*>& RefEnemyList, TArray<class AActor*>* EnemyReturn, TArray<class AActor*>* FarEnemyReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "RemoveEnpcFromEnemyList");

	Params::BP_BrainFieldManager_C_RemoveEnpcFromEnemyList Parms{};

	Parms.RefEnemyList = std::move(RefEnemyList);

	UObject::ProcessEvent(Func, &Parms);

	RefEnemyList = std::move(Parms.RefEnemyList);

	if (EnemyReturn != nullptr)
		*EnemyReturn = std::move(Parms.EnemyReturn);

	if (FarEnemyReturn != nullptr)
		*FarEnemyReturn = std::move(Parms.FarEnemyReturn);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetInSpField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_InSpField                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetInSpField(bool Param_InSpField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetInSpField");

	Params::BP_BrainFieldManager_C_SetInSpField Parms{};

	Parms.Param_InSpField = Param_InSpField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetInvokeSpField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InInvoke                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::SetInvokeSpField(bool InInvoke)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "SetInvokeSpField");

	Params::BP_BrainFieldManager_C_SetInvokeSpField Parms{};

	Parms.InInvoke = InInvoke;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.InBranField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    InBrainDield                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::InBranField(bool* InBrainDield) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "InBranField");

	Params::BP_BrainFieldManager_C_InBranField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InBrainDield != nullptr)
		*InBrainDield = Parms.InBrainDield;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsSpawnPsychicObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsSpawn                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsSpawnPsychicObject(bool* IsSpawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsSpawnPsychicObject");

	Params::BP_BrainFieldManager_C_IsSpawnPsychicObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSpawn != nullptr)
		*IsSpawn = Parms.IsSpawn;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsUserIsPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsPlayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsUserIsPlayer(bool* IsPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsUserIsPlayer");

	Params::BP_BrainFieldManager_C_IsUserIsPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayer != nullptr)
		*IsPlayer = Parms.IsPlayer;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetENPCSequencerType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBrainFieldSequencerType                Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BrainFieldManager_C::GetENPCSequencerType(EBrainFieldSequencerType* Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "GetENPCSequencerType");

	Params::BP_BrainFieldManager_C_GetENPCSequencerType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsEnemyLastOne
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsLastOne                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsEnemyLastOne(bool* IsLastOne) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsEnemyLastOne");

	Params::BP_BrainFieldManager_C_IsEnemyLastOne Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLastOne != nullptr)
		*IsLastOne = Parms.IsLastOne;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInFieldActorInEnemyList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           SearchActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsInFieldActorInEnemyList(class AActor* SearchActor, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsInFieldActorInEnemyList");

	Params::BP_BrainFieldManager_C_IsInFieldActorInEnemyList Parms{};

	Parms.SearchActor = SearchActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInSpField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_InSpField                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsInSpField(bool* Param_InSpField) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsInSpField");

	Params::BP_BrainFieldManager_C_IsInSpField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_InSpField != nullptr)
		*Param_InSpField = Parms.Param_InSpField;
}


// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInvokeSpField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    InvokeSpField                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BrainFieldManager_C::IsInvokeSpField(bool* InvokeSpField) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BrainFieldManager_C", "IsInvokeSpField");

	Params::BP_BrainFieldManager_C_IsInvokeSpField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InvokeSpField != nullptr)
		*InvokeSpField = Parms.InvokeSpField;
}

}

