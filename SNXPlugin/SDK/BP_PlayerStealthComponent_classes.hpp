#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerStealthComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerStealthComponent.BP_PlayerStealthComponent_C
// 0x0138 (0x01F8 - 0x00C0)
class UBP_PlayerStealthComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 OwnerMesh;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStealthOn;                                        // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHeroOrder;                                        // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStealthLerp;                                      // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51EC[0x1];                                     // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StealthLerpTimer;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthRate;                                       // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthRateStt;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthRateEnd;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStealthDelay;                                     // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51ED[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StealthDelayTimer;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultLerpTime;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthLerpTime;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MaterialParameterNameStealth;                      // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MaterialParameterNameVanish;                       // 0x0104(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPreviousSwitchMaterial;                           // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51EE[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaterialSwitchHandle;                              // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51EF[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TickClaimantList;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     StealthMaterial;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     StealthMaterialENPC;                               // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthOpacityRate;                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SeeThoughCancel;                                   // 0x013C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51F0[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      AssasinAttackBaseCurve;                            // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      AssasinAttackFresnelCurve;                         // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           AssasinAttackEtcCurve;                             // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassedCurveTime;                                   // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssassinCurveLoopStartTime;                        // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssassinCurveLoopEndTime;                          // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LastLoopAssasinBaseColor;                          // 0x0164(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LastLoopAssasinFresnelColor;                       // 0x0174(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndAssassinAttackCharge;                          // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bfirstLoopRun;                                     // 0x0185(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51F1[0x2];                                     // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssassinCurveLoopEndLinearTime;                    // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLoopAssassinEtc;                               // 0x018C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdateAssasinAttack;                              // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51F2[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   VectorsBeforeAssassin;                             // 0x01A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           MemoryVectorparametorNames;                        // 0x01B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           MemoryScalarParameterNames;                        // 0x01C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 ScalarsBeforeAssassin;                             // 0x01D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         AfterStealthTime;                                  // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AfterStealthTimer;                                 // 0x01E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPauseTimer;                                       // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEventStealth;                                     // 0x01F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerStealthComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Initialize();
	void SetStealth(bool Stealth_on_in, bool Hero_oreder_in, float Stealth_time_in, float Delay_time_in, bool No_sas_cancel_in, bool From_event_in);
	void Update();
	void IsStealth(bool* Return);
	void IsStealthThink(bool* Return);
	void IsStealthHeroOrder(bool* Return);
	void SetMaterialParameter(float Rate, bool OneFrameSetting);
	void SetupStealthMaterialOnly(float Rate);
	void SetPrivateTickEnabled(bool bEnable, class FName ClaimantName);
	void SetSeeThroughCancel(bool Enable);
	void UpdateAssasinAttackMaterial(float DeltaTime);
	void BeginAssassinAttack();
	void EndAssassinAttack();
	void EndAssassinAttackCharge();
	void SetAfterStealthTimer(bool bAfterStealth);
	void SetPauseTimer(bool bPauseTimerIN);
	void SetStealthForceVisible(bool Stealth_on_in);
	void GetPlayerStealthDelayParam(struct FPlayerStealthDelayParam* PlayerStealthDelayParam);
	void SetPlayerStealthDelayParam(const struct FPlayerStealthDelayParam& PlayerStealthDelayParam);
	void SetMaterialParameter_SasCable(float Rate, bool OneFrameSetting);

	void IsAfterStealth(bool* bAfterStealth) const;
	void IsStealthFromEvent(bool* bFromEvent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerStealthComponent_C">();
	}
	static class UBP_PlayerStealthComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerStealthComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerStealthComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerStealthComponent_C");
static_assert(sizeof(UBP_PlayerStealthComponent_C) == 0x0001F8, "Wrong size on UBP_PlayerStealthComponent_C");
static_assert(offsetof(UBP_PlayerStealthComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_PlayerStealthComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, OwnerMesh) == 0x0000C8, "Member 'UBP_PlayerStealthComponent_C::OwnerMesh' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, OwnerPlayer) == 0x0000D0, "Member 'UBP_PlayerStealthComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bStealthOn) == 0x0000D8, "Member 'UBP_PlayerStealthComponent_C::bStealthOn' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bHeroOrder) == 0x0000D9, "Member 'UBP_PlayerStealthComponent_C::bHeroOrder' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bStealthLerp) == 0x0000DA, "Member 'UBP_PlayerStealthComponent_C::bStealthLerp' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthLerpTimer) == 0x0000DC, "Member 'UBP_PlayerStealthComponent_C::StealthLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthRate) == 0x0000E0, "Member 'UBP_PlayerStealthComponent_C::StealthRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthRateStt) == 0x0000E4, "Member 'UBP_PlayerStealthComponent_C::StealthRateStt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthRateEnd) == 0x0000E8, "Member 'UBP_PlayerStealthComponent_C::StealthRateEnd' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bStealthDelay) == 0x0000EC, "Member 'UBP_PlayerStealthComponent_C::bStealthDelay' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthDelayTimer) == 0x0000F0, "Member 'UBP_PlayerStealthComponent_C::StealthDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, DefaultLerpTime) == 0x0000F4, "Member 'UBP_PlayerStealthComponent_C::DefaultLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthLerpTime) == 0x0000F8, "Member 'UBP_PlayerStealthComponent_C::StealthLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, MaterialParameterNameStealth) == 0x0000FC, "Member 'UBP_PlayerStealthComponent_C::MaterialParameterNameStealth' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, MaterialParameterNameVanish) == 0x000104, "Member 'UBP_PlayerStealthComponent_C::MaterialParameterNameVanish' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bPreviousSwitchMaterial) == 0x00010C, "Member 'UBP_PlayerStealthComponent_C::bPreviousSwitchMaterial' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, MaterialSwitchHandle) == 0x000110, "Member 'UBP_PlayerStealthComponent_C::MaterialSwitchHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, TickClaimantList) == 0x000118, "Member 'UBP_PlayerStealthComponent_C::TickClaimantList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthMaterial) == 0x000128, "Member 'UBP_PlayerStealthComponent_C::StealthMaterial' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthMaterialENPC) == 0x000130, "Member 'UBP_PlayerStealthComponent_C::StealthMaterialENPC' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, StealthOpacityRate) == 0x000138, "Member 'UBP_PlayerStealthComponent_C::StealthOpacityRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, SeeThoughCancel) == 0x00013C, "Member 'UBP_PlayerStealthComponent_C::SeeThoughCancel' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AssasinAttackBaseCurve) == 0x000140, "Member 'UBP_PlayerStealthComponent_C::AssasinAttackBaseCurve' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AssasinAttackFresnelCurve) == 0x000148, "Member 'UBP_PlayerStealthComponent_C::AssasinAttackFresnelCurve' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AssasinAttackEtcCurve) == 0x000150, "Member 'UBP_PlayerStealthComponent_C::AssasinAttackEtcCurve' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, PassedCurveTime) == 0x000158, "Member 'UBP_PlayerStealthComponent_C::PassedCurveTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AssassinCurveLoopStartTime) == 0x00015C, "Member 'UBP_PlayerStealthComponent_C::AssassinCurveLoopStartTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AssassinCurveLoopEndTime) == 0x000160, "Member 'UBP_PlayerStealthComponent_C::AssassinCurveLoopEndTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, LastLoopAssasinBaseColor) == 0x000164, "Member 'UBP_PlayerStealthComponent_C::LastLoopAssasinBaseColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, LastLoopAssasinFresnelColor) == 0x000174, "Member 'UBP_PlayerStealthComponent_C::LastLoopAssasinFresnelColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bEndAssassinAttackCharge) == 0x000184, "Member 'UBP_PlayerStealthComponent_C::bEndAssassinAttackCharge' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bfirstLoopRun) == 0x000185, "Member 'UBP_PlayerStealthComponent_C::bfirstLoopRun' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AssassinCurveLoopEndLinearTime) == 0x000188, "Member 'UBP_PlayerStealthComponent_C::AssassinCurveLoopEndLinearTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, LastLoopAssassinEtc) == 0x00018C, "Member 'UBP_PlayerStealthComponent_C::LastLoopAssassinEtc' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bUpdateAssasinAttack) == 0x000198, "Member 'UBP_PlayerStealthComponent_C::bUpdateAssasinAttack' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, VectorsBeforeAssassin) == 0x0001A0, "Member 'UBP_PlayerStealthComponent_C::VectorsBeforeAssassin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, MemoryVectorparametorNames) == 0x0001B0, "Member 'UBP_PlayerStealthComponent_C::MemoryVectorparametorNames' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, MemoryScalarParameterNames) == 0x0001C0, "Member 'UBP_PlayerStealthComponent_C::MemoryScalarParameterNames' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, ScalarsBeforeAssassin) == 0x0001D0, "Member 'UBP_PlayerStealthComponent_C::ScalarsBeforeAssassin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AfterStealthTime) == 0x0001E0, "Member 'UBP_PlayerStealthComponent_C::AfterStealthTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, AfterStealthTimer) == 0x0001E4, "Member 'UBP_PlayerStealthComponent_C::AfterStealthTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bPauseTimer) == 0x0001F0, "Member 'UBP_PlayerStealthComponent_C::bPauseTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerStealthComponent_C, bEventStealth) == 0x0001F1, "Member 'UBP_PlayerStealthComponent_C::bEventStealth' has a wrong offset!");

}

