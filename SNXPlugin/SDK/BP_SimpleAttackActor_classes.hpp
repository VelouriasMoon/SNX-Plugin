#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SimpleAttackActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "AttackCollisionInfoBP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SimpleAttackActor.BP_SimpleAttackActor_C
// 0x0138 (0x0368 - 0x0230)
class ABP_SimpleAttackActor_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHitCheckReceiverComponent*             HitCheckReceiver;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTeamComponent*                         Team;                                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DelayAttackTime;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackTime;                                        // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttackCollisionInfoBP                 CollisionInfo;                                     // 0x0258(0x00C0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class USoundAtomCue*                          AttackSE;                                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackOwner;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AttackTimer;                                       // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A3A[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AttackHitActorList;                                // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             DelayTimer;                                        // 0x0348(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         AttackStep;                                        // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        AttackParticle;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         AttackParticleHandle;                              // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SimpleAttackActor(int32 EntryPoint);
	void BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result);
	void ReceiveTick(float DeltaSeconds);
	void StartAttack(class AActor* Param_AttackOwner);
	void EndAttackCollision();
	void GetPrimitive(class UPrimitiveComponent** Primitive);
	void PrevCheckOnAttackActorHit(const struct FHCHitResult& HCHitResult, bool* bOK);
	void UpdateAttackStep();
	void UpdateCustomTimeDilation(float TimeDilation);
	void Finish();
	void IsEnableParticle(bool* bEnable);

	void IsFinish(bool* bEnd) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SimpleAttackActor_C">();
	}
	static class ABP_SimpleAttackActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SimpleAttackActor_C>();
	}
};
static_assert(alignof(ABP_SimpleAttackActor_C) == 0x000008, "Wrong alignment on ABP_SimpleAttackActor_C");
static_assert(sizeof(ABP_SimpleAttackActor_C) == 0x000368, "Wrong size on ABP_SimpleAttackActor_C");
static_assert(offsetof(ABP_SimpleAttackActor_C, UberGraphFrame) == 0x000230, "Member 'ABP_SimpleAttackActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, HitCheckReceiver) == 0x000238, "Member 'ABP_SimpleAttackActor_C::HitCheckReceiver' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, Team) == 0x000240, "Member 'ABP_SimpleAttackActor_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_SimpleAttackActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, DelayAttackTime) == 0x000250, "Member 'ABP_SimpleAttackActor_C::DelayAttackTime' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackTime) == 0x000254, "Member 'ABP_SimpleAttackActor_C::AttackTime' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, CollisionInfo) == 0x000258, "Member 'ABP_SimpleAttackActor_C::CollisionInfo' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackSE) == 0x000318, "Member 'ABP_SimpleAttackActor_C::AttackSE' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackOwner) == 0x000320, "Member 'ABP_SimpleAttackActor_C::AttackOwner' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackTimer) == 0x000328, "Member 'ABP_SimpleAttackActor_C::AttackTimer' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackHitActorList) == 0x000338, "Member 'ABP_SimpleAttackActor_C::AttackHitActorList' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, DelayTimer) == 0x000348, "Member 'ABP_SimpleAttackActor_C::DelayTimer' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackStep) == 0x000354, "Member 'ABP_SimpleAttackActor_C::AttackStep' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackParticle) == 0x000358, "Member 'ABP_SimpleAttackActor_C::AttackParticle' has a wrong offset!");
static_assert(offsetof(ABP_SimpleAttackActor_C, AttackParticleHandle) == 0x000360, "Member 'ABP_SimpleAttackActor_C::AttackParticleHandle' has a wrong offset!");

}

