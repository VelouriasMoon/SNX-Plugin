#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HitCheckConvertFuncLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CollisionHitTeamBP_structs.hpp"
#include "CollisionValueKindBP_structs.hpp"
#include "ConditionKindBP_structs.hpp"
#include "ElementKindBP_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "DamageKindBP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UHitCheckConvertFuncLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void ElementKindToC(ElementKindBP In, class UObject* __WorldContext, EHCElementKind* Out);
	static void ConditionKindToC(EConditionKindBP In, class UObject* __WorldContext, EConditionKind* Out);
	static void CollisionValueKindToC(ECollisionValueKindBP In, class UObject* __WorldContext, EHCCollisionValueKind* Out);
	static void DamageKindToC(EDamageKindBP In, class UObject* __WorldContext, EHCDamageKind* Out);
	static void CollisionHitTeamToC(ECollisionHitTeamBP In, class UObject* __WorldContext, EHCCollisionHitTeam* Out);
	static void CollisionCommonInfoToC(struct FCollisionCommonInfoBP& In, class UObject* __WorldContext, struct FHCCollisionCommonInfo* Out);
	static void ElementDataToC(struct FCollisionElementDataBP& In, class UObject* __WorldContext, struct FHCCollisionElementData* Out);
	static void ConditionDataToC(struct FCollitionConditionDataBP& In, class UObject* __WorldContext, struct FHCCollisionConditionData* Out);
	static void CollisionValueDataToC(struct FCollisionValueDataBP& In, class UObject* __WorldContext, struct FHCCollisionValueData* Out);
	static void AttackCollisionInfoToC(const struct FAttackCollisionInfoBP& In, class AActor* AttackOwner, class UObject* __WorldContext, struct FHCAttackCollisionInfo* Out);
	static void HitResultToBP(struct FHCHitResult& In, class UObject* __WorldContext, struct FCommonHitResultBP* Out);
	static void CollisionCommonInfoToBP(struct FHCCollisionCommonInfo& In, class UObject* __WorldContext, struct FCollisionCommonInfoBP* Out);
	static void DamageKindToBP(EHCDamageKind In, class UObject* __WorldContext, EDamageKindBP* Out);
	static void CollisionHitTeamToBP(EHCCollisionHitTeam In, class UObject* __WorldContext, ECollisionHitTeamBP* Out);
	static void ElementKindToBP(EHCElementKind In, class UObject* __WorldContext, ElementKindBP* Out);
	static void ConditionKindToBP(EConditionKind In, class UObject* __WorldContext, EConditionKindBP* Out);
	static void CollisionValueKindToBP(EHCCollisionValueKind NewParam, class UObject* __WorldContext, ECollisionValueKindBP* NewParam1);
	static void ElementDataToBP(struct FHCCollisionElementData& In, class UObject* __WorldContext, struct FCollisionElementDataBP* Out);
	static void ConditionDataToBP(struct FHCCollisionConditionData& In, class UObject* __WorldContext, struct FCollitionConditionDataBP* Out);
	static void CollisionValueDataToBP(struct FHCCollisionValueData& In, class UObject* __WorldContext, struct FCollisionValueDataBP* Out);
	static void RuntimeDataToBP(struct FHCRuntimeData& In, class UObject* __WorldContext, struct FCollisionRumtimeDataBP* Out);
	static void HitResultToC(struct FCommonHitResultBP& In, class UObject* __WorldContext, struct FHCHitResult* Out);
	static void RuntimeDataToC(struct FCollisionRumtimeDataBP& In, class UObject* __WorldContext, struct FHCRuntimeData* Out);
	static void GetSkillParameterTable(class UDataTable* Table, class FName Param_Name, class UObject* __WorldContext, struct FHCSkillCommonInfo* SkillParam);
	static void GetSkillParameterTableWithReplace(class UDataTable* OrgTable, class FName SkillName, class AActor* OwnerActor, class UObject* __WorldContext, struct FHCSkillCommonInfo* SkillCommonInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HitCheckConvertFuncLibrary_C">();
	}
	static class UHitCheckConvertFuncLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitCheckConvertFuncLibrary_C>();
	}
};
static_assert(alignof(UHitCheckConvertFuncLibrary_C) == 0x000008, "Wrong alignment on UHitCheckConvertFuncLibrary_C");
static_assert(sizeof(UHitCheckConvertFuncLibrary_C) == 0x000028, "Wrong size on UHitCheckConvertFuncLibrary_C");

}

