#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ElevatorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ElevatorBase.BP_ElevatorBase_C
// 0x01A0 (0x03D0 - 0x0230)
class ABP_ElevatorBase_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          PsyInsideCollision;                                // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LeftNpcPos;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RightNpcPos;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PsychicObjectBlock;                                // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  ElevatorPostProcess;                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCameraComponent_C*            BP_PlayerCameraComponent;                          // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ElevatorCamera;                                    // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InvisibleWall;                                     // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ElevatorMoveStartCollision;                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ElevatorInnerInsideCollision;                      // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         _______0_LightIntensity_DFCDCF814911F6C081EE59A602CF85BB; // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            _______0__Direction_DFCDCF814911F6C081EE59A602CF85BB; // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A7E[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     _______0;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentFloor;                                      // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentState;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PowerAlpha;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed;                                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelSeconds;                                      // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSeconds;                                       // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecelerationSeconds;                               // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveStartLocation;                                 // 0x02CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveEndStartLocation;                              // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTargetLocation;                                // 0x02E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DecideGotoFloor;                                   // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A7F[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ImpartBaseVelocityX_Array;                         // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  ImpartBaseVelocityY_Array;                         // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  ImpartBaseVelocityZ_Array;                         // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                MoveStartEndLocation;                              // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   AcceltInterpType;                                  // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A80[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelBlendExp;                                     // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   DeaccelInterpType;                                 // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A81[0x3];                                     // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialPosition;                                   // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaMoveLength;                                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeltaMoveSpeed;                                    // 0x0350(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveUpper;                                       // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A82[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeaccelBlendExp;                                   // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A83[0x4];                                     // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          UpMoveSound;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          DownMoveSound;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   ElevatorMoveAtom;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattleCharacter_C*>           HitCharacterArray;                                 // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequence*                          UseAnim;                                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FElevatorFloorParameter>        ElevatorFloorArray;                                // 0x0398(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   MoveSoundAttachName;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveReady;                                       // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A84[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraActor*                           CameraActor;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckPlayerOut;                                    // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x03C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckTickOff;                                      // 0x03C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckAnimation;                                    // 0x03C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreMenuPPC;                                    // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ElevatorBase(int32 EntryPoint);
	void SetupMenu(bool InMenu);
	void BndEvt__PsyInsideCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EV_MoveFloorForce(int32 Floor);
	void BndEvt__ElevatorInnerInsideCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__ElevatorMoveStartCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void BndEvt__MoveStartCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveTick(float DeltaSeconds);
	void _______0__UpdateFunc();
	void _______0__FinishedFunc();
	void ElevatorMove(float DeltaSeconds);
	void ElevatorMoveStart(int32 GotoFloor, bool* Dummy);
	void ElevatorMoveAddParam(const struct FVector& ElevatorNewPos);
	void ElevatorMoveEnd(bool* Dummy);
	void PlayerInElevator(class AActor* HitActor);
	void PlayerOutElevator(class AActor* HitActor);
	void PlayerMoveForElevator(const struct FVector& DeltaMove);
	void MoveFloorForce(int32 Floor);
	void ResetToPlayerCamera();
	void SetToElevatorCamera();
	void UpdateCurrentFloor(int32 NewFloor);
	void ElevatorLight(float Time, bool Condition);
	void SetAvailableWorldMap(bool Available);
	void AdjustFloorInPlayerSpawn(const struct FVector& PlayerPos);
	void SetElevatorTickEnable(bool Enable_in);
	void SetInitialPosition();
	void SetupMenuPPC(bool InMenu);
	void ElevatorInPlayerSetting(class ARSBattlePlayer_C* InPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ElevatorBase_C">();
	}
	static class ABP_ElevatorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ElevatorBase_C>();
	}
};
static_assert(alignof(ABP_ElevatorBase_C) == 0x000008, "Wrong alignment on ABP_ElevatorBase_C");
static_assert(sizeof(ABP_ElevatorBase_C) == 0x0003D0, "Wrong size on ABP_ElevatorBase_C");
static_assert(offsetof(ABP_ElevatorBase_C, UberGraphFrame) == 0x000230, "Member 'ABP_ElevatorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, PsyInsideCollision) == 0x000238, "Member 'ABP_ElevatorBase_C::PsyInsideCollision' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, LeftNpcPos) == 0x000240, "Member 'ABP_ElevatorBase_C::LeftNpcPos' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, RightNpcPos) == 0x000248, "Member 'ABP_ElevatorBase_C::RightNpcPos' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, PsychicObjectBlock) == 0x000250, "Member 'ABP_ElevatorBase_C::PsychicObjectBlock' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, SpotLight) == 0x000258, "Member 'ABP_ElevatorBase_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ElevatorPostProcess) == 0x000260, "Member 'ABP_ElevatorBase_C::ElevatorPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, BP_PlayerCameraComponent) == 0x000268, "Member 'ABP_ElevatorBase_C::BP_PlayerCameraComponent' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ElevatorCamera) == 0x000270, "Member 'ABP_ElevatorBase_C::ElevatorCamera' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, InvisibleWall) == 0x000278, "Member 'ABP_ElevatorBase_C::InvisibleWall' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ElevatorMoveStartCollision) == 0x000280, "Member 'ABP_ElevatorBase_C::ElevatorMoveStartCollision' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ElevatorInnerInsideCollision) == 0x000288, "Member 'ABP_ElevatorBase_C::ElevatorInnerInsideCollision' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, SkeletalMesh) == 0x000290, "Member 'ABP_ElevatorBase_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_ElevatorBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, _______0_LightIntensity_DFCDCF814911F6C081EE59A602CF85BB) == 0x0002A0, "Member 'ABP_ElevatorBase_C::_______0_LightIntensity_DFCDCF814911F6C081EE59A602CF85BB' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, _______0__Direction_DFCDCF814911F6C081EE59A602CF85BB) == 0x0002A4, "Member 'ABP_ElevatorBase_C::_______0__Direction_DFCDCF814911F6C081EE59A602CF85BB' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, _______0) == 0x0002A8, "Member 'ABP_ElevatorBase_C::_______0' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, CurrentFloor) == 0x0002B0, "Member 'ABP_ElevatorBase_C::CurrentFloor' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, CurrentState) == 0x0002B4, "Member 'ABP_ElevatorBase_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, PowerAlpha) == 0x0002B8, "Member 'ABP_ElevatorBase_C::PowerAlpha' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveSpeed) == 0x0002BC, "Member 'ABP_ElevatorBase_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, AccelSeconds) == 0x0002C0, "Member 'ABP_ElevatorBase_C::AccelSeconds' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveSeconds) == 0x0002C4, "Member 'ABP_ElevatorBase_C::MoveSeconds' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DecelerationSeconds) == 0x0002C8, "Member 'ABP_ElevatorBase_C::DecelerationSeconds' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveStartLocation) == 0x0002CC, "Member 'ABP_ElevatorBase_C::MoveStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveEndStartLocation) == 0x0002D8, "Member 'ABP_ElevatorBase_C::MoveEndStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveTargetLocation) == 0x0002E4, "Member 'ABP_ElevatorBase_C::MoveTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DecideGotoFloor) == 0x0002F0, "Member 'ABP_ElevatorBase_C::DecideGotoFloor' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ImpartBaseVelocityX_Array) == 0x0002F8, "Member 'ABP_ElevatorBase_C::ImpartBaseVelocityX_Array' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ImpartBaseVelocityY_Array) == 0x000308, "Member 'ABP_ElevatorBase_C::ImpartBaseVelocityY_Array' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ImpartBaseVelocityZ_Array) == 0x000318, "Member 'ABP_ElevatorBase_C::ImpartBaseVelocityZ_Array' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveStartEndLocation) == 0x000328, "Member 'ABP_ElevatorBase_C::MoveStartEndLocation' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, AcceltInterpType) == 0x000334, "Member 'ABP_ElevatorBase_C::AcceltInterpType' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, AccelBlendExp) == 0x000338, "Member 'ABP_ElevatorBase_C::AccelBlendExp' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DeaccelInterpType) == 0x00033C, "Member 'ABP_ElevatorBase_C::DeaccelInterpType' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, InitialPosition) == 0x000340, "Member 'ABP_ElevatorBase_C::InitialPosition' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DeltaMoveLength) == 0x00034C, "Member 'ABP_ElevatorBase_C::DeltaMoveLength' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DeltaMoveSpeed) == 0x000350, "Member 'ABP_ElevatorBase_C::DeltaMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, IsMoveUpper) == 0x00035C, "Member 'ABP_ElevatorBase_C::IsMoveUpper' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DeaccelBlendExp) == 0x000360, "Member 'ABP_ElevatorBase_C::DeaccelBlendExp' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, UpMoveSound) == 0x000368, "Member 'ABP_ElevatorBase_C::UpMoveSound' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, DownMoveSound) == 0x000370, "Member 'ABP_ElevatorBase_C::DownMoveSound' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ElevatorMoveAtom) == 0x000378, "Member 'ABP_ElevatorBase_C::ElevatorMoveAtom' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, HitCharacterArray) == 0x000380, "Member 'ABP_ElevatorBase_C::HitCharacterArray' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, UseAnim) == 0x000390, "Member 'ABP_ElevatorBase_C::UseAnim' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, ElevatorFloorArray) == 0x000398, "Member 'ABP_ElevatorBase_C::ElevatorFloorArray' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, MoveSoundAttachName) == 0x0003A8, "Member 'ABP_ElevatorBase_C::MoveSoundAttachName' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, IsMoveReady) == 0x0003B0, "Member 'ABP_ElevatorBase_C::IsMoveReady' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, CameraActor) == 0x0003B8, "Member 'ABP_ElevatorBase_C::CameraActor' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, LightIntensity) == 0x0003C0, "Member 'ABP_ElevatorBase_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, CheckPlayerOut) == 0x0003C4, "Member 'ABP_ElevatorBase_C::CheckPlayerOut' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, IsMoving) == 0x0003C5, "Member 'ABP_ElevatorBase_C::IsMoving' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, CheckTickOff) == 0x0003C6, "Member 'ABP_ElevatorBase_C::CheckTickOff' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, CheckAnimation) == 0x0003C7, "Member 'ABP_ElevatorBase_C::CheckAnimation' has a wrong offset!");
static_assert(offsetof(ABP_ElevatorBase_C, RestoreMenuPPC) == 0x0003C8, "Member 'ABP_ElevatorBase_C::RestoreMenuPPC' has a wrong offset!");

}

