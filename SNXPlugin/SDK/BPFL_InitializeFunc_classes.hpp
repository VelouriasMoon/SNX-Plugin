#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_InitializeFunc

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_InitializeFunc.BPFL_InitializeFunc_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_InitializeFunc_C final : public UBlueprintFunctionLibrary
{
public:
	static void Initialize_New_Game(bool IsExNewGame, class UObject* __WorldContext);
	static void InitializeParty(EPlayerID BattleMemberMain, EPlayerID BattleMemberLeft, EPlayerID BattleMemberRight, class UObject* __WorldContext);
	static void SetPartyMemberInfo(EPlayerID ID, const struct FPlayerInfo& PlayerInfo, class UObject* __WorldContext);
	static void SetNewGamePartyMember(class UObject* __WorldContext);
	static void SetDebugPartyMember(class UObject* __WorldContext);
	static void SavePartyMemberParam(TArray<struct FVector>& BattlePlayerLocation, TArray<struct FRotator>& BattlePlayerRotation, class UObject* __WorldContext);
	static void SetDebugPartyMemberInfo(TArray<struct FPlayerInfo>& PlayerInfoList, class UObject* __WorldContext);
	static void InitializeNewGame_Yuito(class UObject* __WorldContext);
	static void InitializeNewGame_Kasane(class UObject* __WorldContext);
	static void InitializeItem(class UObject* __WorldContext);
	static void InitializeDebugGame(class UObject* __WorldContext);
	static void InitializeDebugItem(class UObject* __WorldContext);
	static void InitializeNewGameArea(int32 ProgressId, class FName AreaName, class FName PortalName, class UObject* __WorldContext);
	static void InitializeDebugSkill(class UObject* __WorldContext);
	static void InitializeSkill(class UObject* __WorldContext);
	static void InitializeDebugSAS(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_InitializeFunc_C">();
	}
	static class UBPFL_InitializeFunc_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_InitializeFunc_C>();
	}
};
static_assert(alignof(UBPFL_InitializeFunc_C) == 0x000008, "Wrong alignment on UBPFL_InitializeFunc_C");
static_assert(sizeof(UBPFL_InitializeFunc_C) == 0x000028, "Wrong size on UBPFL_InitializeFunc_C");

}

