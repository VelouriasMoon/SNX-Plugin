#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CounterComponent

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_CounterComponent.BP_CounterComponent_C.ExecuteUbergraph_BP_CounterComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent) == 0x000004, "Wrong alignment on BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent");
static_assert(sizeof(BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent) == 0x000008, "Wrong size on BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent");
static_assert(offsetof(BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent, EntryPoint) == 0x000000, "Member 'BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CounterComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CounterComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CounterComponent_C_ReceiveTick");
static_assert(sizeof(BP_CounterComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_CounterComponent_C_ReceiveTick");
static_assert(offsetof(BP_CounterComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CounterComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.Initialize
// 0x0038 (0x0038 - 0x0000)
struct BP_CounterComponent_C_Initialize final
{
public:
	int32                                         Auto_counter_rate_in;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Auto_counter_radius_rate_in;                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Auto_counter_half_height_rate_in;                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cool_down_time_min_in;                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cool_down_time_max_in;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B0E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_Initialize) == 0x000008, "Wrong alignment on BP_CounterComponent_C_Initialize");
static_assert(sizeof(BP_CounterComponent_C_Initialize) == 0x000038, "Wrong size on BP_CounterComponent_C_Initialize");
static_assert(offsetof(BP_CounterComponent_C_Initialize, Auto_counter_rate_in) == 0x000000, "Member 'BP_CounterComponent_C_Initialize::Auto_counter_rate_in' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, Auto_counter_radius_rate_in) == 0x000004, "Member 'BP_CounterComponent_C_Initialize::Auto_counter_radius_rate_in' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, Auto_counter_half_height_rate_in) == 0x000008, "Member 'BP_CounterComponent_C_Initialize::Auto_counter_half_height_rate_in' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, Cool_down_time_min_in) == 0x00000C, "Member 'BP_CounterComponent_C_Initialize::Cool_down_time_min_in' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, Cool_down_time_max_in) == 0x000010, "Member 'BP_CounterComponent_C_Initialize::Cool_down_time_max_in' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, CallFunc_GetHitManager_Manager) == 0x000018, "Member 'BP_CounterComponent_C_Initialize::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_CounterComponent_C_Initialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, K2Node_DynamicCast_AsRSBattle_Player) == 0x000028, "Member 'BP_CounterComponent_C_Initialize::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CounterComponent_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.Update
// 0x0001 (0x0001 - 0x0000)
struct BP_CounterComponent_C_Update final
{
public:
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_Update) == 0x000001, "Wrong alignment on BP_CounterComponent_C_Update");
static_assert(sizeof(BP_CounterComponent_C_Update) == 0x000001, "Wrong size on BP_CounterComponent_C_Update");
static_assert(offsetof(BP_CounterComponent_C_Update, CallFunc_IsOver_ReturnValue) == 0x000000, "Member 'BP_CounterComponent_C_Update::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.CheckAutoCounter
// 0x00D0 (0x00D0 - 0x0000)
struct BP_CounterComponent_C_CheckAutoCounter final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_index;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_loopNum;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B10[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttackCollisionCapsule_outStartLocation; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttackCollisionCapsule_outEndLocation; // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttackCollisionCapsule_outRadius;      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAttackCollisionCapsule_ReturnValue;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B11[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRSResultCapsule                       CallFunc_CheckCollisionCapsule_Result;             // 0x0088(0x001C)(NoDestructor)
	bool                                          CallFunc_CheckCollisionCapsule_ReturnValue;        // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B12[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttackCollisionAttacker_ReturnValue;   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B13[0x2];                                     // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B14[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAttackCollisionNum_ReturnValue;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CounterComponent_C_CheckAutoCounter) == 0x000008, "Wrong alignment on BP_CounterComponent_C_CheckAutoCounter");
static_assert(sizeof(BP_CounterComponent_C_CheckAutoCounter) == 0x0000D0, "Wrong size on BP_CounterComponent_C_CheckAutoCounter");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, Return) == 0x000000, "Member 'BP_CounterComponent_C_CheckAutoCounter::Return' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, L_index) == 0x000004, "Member 'BP_CounterComponent_C_CheckAutoCounter::L_index' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, L_loopNum) == 0x000008, "Member 'BP_CounterComponent_C_CheckAutoCounter::L_loopNum' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_RandomInteger_ReturnValue) == 0x00000C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_RandomFloatInRange_ReturnValue) == 0x000014, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, Temp_int_Variable) == 0x000018, "Member 'BP_CounterComponent_C_CheckAutoCounter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000020, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetAttackCollisionCapsule_outStartLocation) == 0x000024, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetAttackCollisionCapsule_outStartLocation' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetAttackCollisionCapsule_outEndLocation) == 0x000030, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetAttackCollisionCapsule_outEndLocation' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetAttackCollisionCapsule_outRadius) == 0x00003C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetAttackCollisionCapsule_outRadius' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetAttackCollisionCapsule_ReturnValue) == 0x000040, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetAttackCollisionCapsule_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000048, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00004C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000058, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_BreakVector_X) == 0x00005C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_BreakVector_Y) == 0x000060, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_BreakVector_Z) == 0x000064, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Add_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_MakeVector_ReturnValue_1) == 0x00007C, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_CheckCollisionCapsule_Result) == 0x000088, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_CheckCollisionCapsule_Result' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_CheckCollisionCapsule_ReturnValue) == 0x0000A4, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_CheckCollisionCapsule_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetAttackCollisionAttacker_ReturnValue) == 0x0000A8, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetAttackCollisionAttacker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0000B0, "Member 'BP_CounterComponent_C_CheckAutoCounter::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_CounterComponent_C_CheckAutoCounter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_IsEnemy_bEnemy) == 0x0000C1, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_CheckAutoCounter, CallFunc_GetAttackCollisionNum_ReturnValue) == 0x0000CC, "Member 'BP_CounterComponent_C_CheckAutoCounter::CallFunc_GetAttackCollisionNum_ReturnValue' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.SetAutoCounter
// 0x0001 (0x0001 - 0x0000)
struct BP_CounterComponent_C_SetAutoCounter final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_SetAutoCounter) == 0x000001, "Wrong alignment on BP_CounterComponent_C_SetAutoCounter");
static_assert(sizeof(BP_CounterComponent_C_SetAutoCounter) == 0x000001, "Wrong size on BP_CounterComponent_C_SetAutoCounter");
static_assert(offsetof(BP_CounterComponent_C_SetAutoCounter, On) == 0x000000, "Member 'BP_CounterComponent_C_SetAutoCounter::On' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.IsAutoCounterSuccess
// 0x0001 (0x0001 - 0x0000)
struct BP_CounterComponent_C_IsAutoCounterSuccess final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_IsAutoCounterSuccess) == 0x000001, "Wrong alignment on BP_CounterComponent_C_IsAutoCounterSuccess");
static_assert(sizeof(BP_CounterComponent_C_IsAutoCounterSuccess) == 0x000001, "Wrong size on BP_CounterComponent_C_IsAutoCounterSuccess");
static_assert(offsetof(BP_CounterComponent_C_IsAutoCounterSuccess, Return) == 0x000000, "Member 'BP_CounterComponent_C_IsAutoCounterSuccess::Return' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.IsCounterAnimEnable
// 0x0003 (0x0003 - 0x0000)
struct BP_CounterComponent_C_IsCounterAnimEnable final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_IsCounterAnimEnable) == 0x000001, "Wrong alignment on BP_CounterComponent_C_IsCounterAnimEnable");
static_assert(sizeof(BP_CounterComponent_C_IsCounterAnimEnable) == 0x000003, "Wrong size on BP_CounterComponent_C_IsCounterAnimEnable");
static_assert(offsetof(BP_CounterComponent_C_IsCounterAnimEnable, Return) == 0x000000, "Member 'BP_CounterComponent_C_IsCounterAnimEnable::Return' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_IsCounterAnimEnable, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_CounterComponent_C_IsCounterAnimEnable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CounterComponent_C_IsCounterAnimEnable, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'BP_CounterComponent_C_IsCounterAnimEnable::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.SetThinkCounter
// 0x0001 (0x0001 - 0x0000)
struct BP_CounterComponent_C_SetThinkCounter final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_SetThinkCounter) == 0x000001, "Wrong alignment on BP_CounterComponent_C_SetThinkCounter");
static_assert(sizeof(BP_CounterComponent_C_SetThinkCounter) == 0x000001, "Wrong size on BP_CounterComponent_C_SetThinkCounter");
static_assert(offsetof(BP_CounterComponent_C_SetThinkCounter, Flag_in) == 0x000000, "Member 'BP_CounterComponent_C_SetThinkCounter::Flag_in' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.IsThinkCounterSuccess
// 0x0001 (0x0001 - 0x0000)
struct BP_CounterComponent_C_IsThinkCounterSuccess final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_IsThinkCounterSuccess) == 0x000001, "Wrong alignment on BP_CounterComponent_C_IsThinkCounterSuccess");
static_assert(sizeof(BP_CounterComponent_C_IsThinkCounterSuccess) == 0x000001, "Wrong size on BP_CounterComponent_C_IsThinkCounterSuccess");
static_assert(offsetof(BP_CounterComponent_C_IsThinkCounterSuccess, Return) == 0x000000, "Member 'BP_CounterComponent_C_IsThinkCounterSuccess::Return' has a wrong offset!");

// Function BP_CounterComponent.BP_CounterComponent_C.IsThinkCounter
// 0x0001 (0x0001 - 0x0000)
struct BP_CounterComponent_C_IsThinkCounter final
{
public:
	bool                                          bCounter;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CounterComponent_C_IsThinkCounter) == 0x000001, "Wrong alignment on BP_CounterComponent_C_IsThinkCounter");
static_assert(sizeof(BP_CounterComponent_C_IsThinkCounter) == 0x000001, "Wrong size on BP_CounterComponent_C_IsThinkCounter");
static_assert(offsetof(BP_CounterComponent_C_IsThinkCounter, bCounter) == 0x000000, "Member 'BP_CounterComponent_C_IsThinkCounter::bCounter' has a wrong offset!");

}

