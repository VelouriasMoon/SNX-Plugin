#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ch_MoveCircle

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_ch_MoveCircle.BTT_ch_MoveCircle_C.ExecuteUbergraph_BTT_ch_MoveCircle
// 0x0148 (0x0148 - 0x0000)
struct BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83DD[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83DE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83DF[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_1;     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E0[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMovePosActor_MovePosActor;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAIMoveStick_bDummy;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E1[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E2[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83E3[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_2;     // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E4[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_3;     // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnableInputStick_Dummy;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E5[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E6[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83E7[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle) == 0x000008, "Wrong alignment on BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle");
static_assert(sizeof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle) == 0x000148, "Wrong size on BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, EntryPoint) == 0x000000, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_CustomEvent_MovementResult) == 0x000004, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, Temp_byte_Variable) == 0x000005, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000020, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_AsBPI_Player_AIInterface_1) == 0x000038, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_AsBPI_Player_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_GetMovePosActor_MovePosActor) == 0x000050, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_GetMovePosActor_MovePosActor' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_SetAIMoveStick_bDummy) == 0x000058, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_SetAIMoveStick_bDummy' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_RandomFloat_ReturnValue) == 0x00005C, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_IsOver_ReturnValue) == 0x000060, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_CustomEvent_MovementResult_1) == 0x000074, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_Event_OwnerController) == 0x000078, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_Event_ControlledPawn) == 0x000080, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_CreateDelegate_OutputDelegate_1) == 0x000088, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_AsBPI_Player_AIInterface_2) == 0x000098, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_AsBPI_Player_AIInterface_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_AsBPI_Player_AIInterface_3) == 0x0000B0, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_AsBPI_Player_AIInterface_3' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_SetEnableInputStick_Dummy) == 0x0000C1, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_SetEnableInputStick_Dummy' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_GetBattleTargetActor_TargetActor) == 0x0000C8, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000D4, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000E0, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000EC, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_BreakVector_X) == 0x0000F8, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_BreakVector_Y) == 0x0000FC, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_BreakVector_Z) == 0x000100, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_MakeVector_ReturnValue) == 0x000104, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x000110, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_VSize_ReturnValue) == 0x000118, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00011C, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_FClamp_ReturnValue) == 0x000120, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_IsValid_ReturnValue_1) == 0x000124, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Lerp_ReturnValue) == 0x000128, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00012C, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000130, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000134, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000138, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00013C, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle, CallFunc_Add_FloatFloat_ReturnValue) == 0x000140, "Member 'BTT_ch_MoveCircle_C_ExecuteUbergraph_BTT_ch_MoveCircle::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BTT_ch_MoveCircle.BTT_ch_MoveCircle_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_ch_MoveCircle_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveCircle_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_ch_MoveCircle_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_ch_MoveCircle_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_ch_MoveCircle_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_ch_MoveCircle_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_ch_MoveCircle_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_MoveCircle_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_ch_MoveCircle.BTT_ch_MoveCircle_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTT_ch_MoveCircle_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveCircle_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTT_ch_MoveCircle_C_ReceiveTickAI");
static_assert(sizeof(BTT_ch_MoveCircle_C_ReceiveTickAI) == 0x000018, "Wrong size on BTT_ch_MoveCircle_C_ReceiveTickAI");
static_assert(offsetof(BTT_ch_MoveCircle_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTT_ch_MoveCircle_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_MoveCircle_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveCircle_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTT_ch_MoveCircle_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTT_ch_MoveCircle.BTT_ch_MoveCircle_C.OnSuccess_B4F2C567467115C1D6ACF18928FEAB55
// 0x0001 (0x0001 - 0x0000)
struct BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55) == 0x000001, "Wrong alignment on BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55");
static_assert(sizeof(BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55) == 0x000001, "Wrong size on BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55");
static_assert(offsetof(BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55, MovementResult) == 0x000000, "Member 'BTT_ch_MoveCircle_C_OnSuccess_B4F2C567467115C1D6ACF18928FEAB55::MovementResult' has a wrong offset!");

// Function BTT_ch_MoveCircle.BTT_ch_MoveCircle_C.OnFail_B4F2C567467115C1D6ACF18928FEAB55
// 0x0001 (0x0001 - 0x0000)
struct BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55) == 0x000001, "Wrong alignment on BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55");
static_assert(sizeof(BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55) == 0x000001, "Wrong size on BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55");
static_assert(offsetof(BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55, MovementResult) == 0x000000, "Member 'BTT_ch_MoveCircle_C_OnFail_B4F2C567467115C1D6ACF18928FEAB55::MovementResult' has a wrong offset!");

}

