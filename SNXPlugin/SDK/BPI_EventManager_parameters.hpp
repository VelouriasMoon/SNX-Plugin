#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_EventManager

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "FEventTriggerCommand_structs.hpp"


namespace SDK::Params
{

// Function BPI_EventManager.BPI_EventManager_C.ISetProgressID
// 0x0004 (0x0004 - 0x0000)
struct BPI_EventManager_C_ISetProgressID final
{
public:
	int32                                         ProgressId;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_ISetProgressID) == 0x000004, "Wrong alignment on BPI_EventManager_C_ISetProgressID");
static_assert(sizeof(BPI_EventManager_C_ISetProgressID) == 0x000004, "Wrong size on BPI_EventManager_C_ISetProgressID");
static_assert(offsetof(BPI_EventManager_C_ISetProgressID, ProgressId) == 0x000000, "Member 'BPI_EventManager_C_ISetProgressID::ProgressId' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.AddEventTriggerCommand
// 0x0068 (0x0068 - 0x0000)
struct BPI_EventManager_C_AddEventTriggerCommand final
{
public:
	struct FFEventTriggerCommand                  TriggerCommand;                                    // 0x0000(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_AddEventTriggerCommand) == 0x000008, "Wrong alignment on BPI_EventManager_C_AddEventTriggerCommand");
static_assert(sizeof(BPI_EventManager_C_AddEventTriggerCommand) == 0x000068, "Wrong size on BPI_EventManager_C_AddEventTriggerCommand");
static_assert(offsetof(BPI_EventManager_C_AddEventTriggerCommand, TriggerCommand) == 0x000000, "Member 'BPI_EventManager_C_AddEventTriggerCommand::TriggerCommand' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.LoadMakeEvent
// 0x0010 (0x0010 - 0x0000)
struct BPI_EventManager_C_LoadMakeEvent final
{
public:
	class FString                                 MakeEventPathString;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_LoadMakeEvent) == 0x000008, "Wrong alignment on BPI_EventManager_C_LoadMakeEvent");
static_assert(sizeof(BPI_EventManager_C_LoadMakeEvent) == 0x000010, "Wrong size on BPI_EventManager_C_LoadMakeEvent");
static_assert(offsetof(BPI_EventManager_C_LoadMakeEvent, MakeEventPathString) == 0x000000, "Member 'BPI_EventManager_C_LoadMakeEvent::MakeEventPathString' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.AddEventTriggerCommandByPath
// 0x0020 (0x0020 - 0x0000)
struct BPI_EventManager_C_AddEventTriggerCommandByPath final
{
public:
	EEventTriggerCheckType                        TriggerType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TriggerCommandPath;                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         TriggerWaitTime;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EventPriority;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_AddEventTriggerCommandByPath) == 0x000008, "Wrong alignment on BPI_EventManager_C_AddEventTriggerCommandByPath");
static_assert(sizeof(BPI_EventManager_C_AddEventTriggerCommandByPath) == 0x000020, "Wrong size on BPI_EventManager_C_AddEventTriggerCommandByPath");
static_assert(offsetof(BPI_EventManager_C_AddEventTriggerCommandByPath, TriggerType) == 0x000000, "Member 'BPI_EventManager_C_AddEventTriggerCommandByPath::TriggerType' has a wrong offset!");
static_assert(offsetof(BPI_EventManager_C_AddEventTriggerCommandByPath, TriggerCommandPath) == 0x000008, "Member 'BPI_EventManager_C_AddEventTriggerCommandByPath::TriggerCommandPath' has a wrong offset!");
static_assert(offsetof(BPI_EventManager_C_AddEventTriggerCommandByPath, TriggerWaitTime) == 0x000018, "Member 'BPI_EventManager_C_AddEventTriggerCommandByPath::TriggerWaitTime' has a wrong offset!");
static_assert(offsetof(BPI_EventManager_C_AddEventTriggerCommandByPath, EventPriority) == 0x00001C, "Member 'BPI_EventManager_C_AddEventTriggerCommandByPath::EventPriority' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.GetProgressID
// 0x0004 (0x0004 - 0x0000)
struct BPI_EventManager_C_GetProgressID final
{
public:
	int32                                         ProgressId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_GetProgressID) == 0x000004, "Wrong alignment on BPI_EventManager_C_GetProgressID");
static_assert(sizeof(BPI_EventManager_C_GetProgressID) == 0x000004, "Wrong size on BPI_EventManager_C_GetProgressID");
static_assert(offsetof(BPI_EventManager_C_GetProgressID, ProgressId) == 0x000000, "Member 'BPI_EventManager_C_GetProgressID::ProgressId' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.SetEventPause
// 0x0001 (0x0001 - 0x0000)
struct BPI_EventManager_C_SetEventPause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EventManager_C_SetEventPause) == 0x000001, "Wrong alignment on BPI_EventManager_C_SetEventPause");
static_assert(sizeof(BPI_EventManager_C_SetEventPause) == 0x000001, "Wrong size on BPI_EventManager_C_SetEventPause");
static_assert(offsetof(BPI_EventManager_C_SetEventPause, IsPause) == 0x000000, "Member 'BPI_EventManager_C_SetEventPause::IsPause' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.IsEventPause
// 0x0001 (0x0001 - 0x0000)
struct BPI_EventManager_C_IsEventPause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EventManager_C_IsEventPause) == 0x000001, "Wrong alignment on BPI_EventManager_C_IsEventPause");
static_assert(sizeof(BPI_EventManager_C_IsEventPause) == 0x000001, "Wrong size on BPI_EventManager_C_IsEventPause");
static_assert(offsetof(BPI_EventManager_C_IsEventPause, IsPause) == 0x000000, "Member 'BPI_EventManager_C_IsEventPause::IsPause' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.GetEventTriggerCommendNum
// 0x0008 (0x0008 - 0x0000)
struct BPI_EventManager_C_GetEventTriggerCommendNum final
{
public:
	EEventTriggerCheckType                        CheckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_GetEventTriggerCommendNum) == 0x000004, "Wrong alignment on BPI_EventManager_C_GetEventTriggerCommendNum");
static_assert(sizeof(BPI_EventManager_C_GetEventTriggerCommendNum) == 0x000008, "Wrong size on BPI_EventManager_C_GetEventTriggerCommendNum");
static_assert(offsetof(BPI_EventManager_C_GetEventTriggerCommendNum, CheckType) == 0x000000, "Member 'BPI_EventManager_C_GetEventTriggerCommendNum::CheckType' has a wrong offset!");
static_assert(offsetof(BPI_EventManager_C_GetEventTriggerCommendNum, Count) == 0x000004, "Member 'BPI_EventManager_C_GetEventTriggerCommendNum::Count' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.AddBattleSimulatorEndEvent
// 0x0008 (0x0008 - 0x0000)
struct BPI_EventManager_C_AddBattleSimulatorEndEvent final
{
public:
	class UClass*                                 EventObject;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EventManager_C_AddBattleSimulatorEndEvent) == 0x000008, "Wrong alignment on BPI_EventManager_C_AddBattleSimulatorEndEvent");
static_assert(sizeof(BPI_EventManager_C_AddBattleSimulatorEndEvent) == 0x000008, "Wrong size on BPI_EventManager_C_AddBattleSimulatorEndEvent");
static_assert(offsetof(BPI_EventManager_C_AddBattleSimulatorEndEvent, EventObject) == 0x000000, "Member 'BPI_EventManager_C_AddBattleSimulatorEndEvent::EventObject' has a wrong offset!");

// Function BPI_EventManager.BPI_EventManager_C.SetENPCPresetPlayerCamera
// 0x0003 (0x0003 - 0x0000)
struct BPI_EventManager_C_SetENPCPresetPlayerCamera final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCameraPreset                           Preset_Basic;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EventManager_C_SetENPCPresetPlayerCamera) == 0x000001, "Wrong alignment on BPI_EventManager_C_SetENPCPresetPlayerCamera");
static_assert(sizeof(BPI_EventManager_C_SetENPCPresetPlayerCamera) == 0x000003, "Wrong size on BPI_EventManager_C_SetENPCPresetPlayerCamera");
static_assert(offsetof(BPI_EventManager_C_SetENPCPresetPlayerCamera, Enable) == 0x000000, "Member 'BPI_EventManager_C_SetENPCPresetPlayerCamera::Enable' has a wrong offset!");
static_assert(offsetof(BPI_EventManager_C_SetENPCPresetPlayerCamera, Preset_Basic) == 0x000001, "Member 'BPI_EventManager_C_SetENPCPresetPlayerCamera::Preset_Basic' has a wrong offset!");
static_assert(offsetof(BPI_EventManager_C_SetENPCPresetPlayerCamera, Ret) == 0x000002, "Member 'BPI_EventManager_C_SetENPCPresetPlayerCamera::Ret' has a wrong offset!");

}

