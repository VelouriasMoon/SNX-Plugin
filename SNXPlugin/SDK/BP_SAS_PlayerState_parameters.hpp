#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SAS_PlayerState

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "FSASCommand_structs.hpp"


namespace SDK::Params
{

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.ExecuteUbergraph_BP_SAS_PlayerState
// 0x0010 (0x0010 - 0x0000)
struct BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8569[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState");
static_assert(sizeof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState) == 0x000010, "Wrong size on BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState");
static_assert(offsetof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState, EntryPoint) == 0x000000, "Member 'BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState, CallFunc_MakeLiteralInt_ReturnValue) == 0x00000C, "Member 'BP_SAS_PlayerState_C_ExecuteUbergraph_BP_SAS_PlayerState::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_SAS_PlayerState_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_ReceiveTick");
static_assert(sizeof(BP_SAS_PlayerState_C_ReceiveTick) == 0x000004, "Wrong size on BP_SAS_PlayerState_C_ReceiveTick");
static_assert(offsetof(BP_SAS_PlayerState_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_SAS_PlayerState_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.SetActiveFlag
// 0x0024 (0x0024 - 0x0000)
struct BP_SAS_PlayerState_C_SetActiveFlag final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          On;                                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_856A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LPrevFlag;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_856B[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BitFlagOff_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_856C[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BitFlagOn_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_SetActiveFlag) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_SetActiveFlag");
static_assert(sizeof(BP_SAS_PlayerState_C_SetActiveFlag) == 0x000024, "Wrong size on BP_SAS_PlayerState_C_SetActiveFlag");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, SASButton) == 0x000000, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::SASButton' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, On) == 0x000001, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::On' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, LPrevFlag) == 0x000004, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::LPrevFlag' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00000C, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000011, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_BitFlagOff_ReturnValue) == 0x000018, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_BitFlagOff_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetActiveFlag, CallFunc_BitFlagOn_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_SetActiveFlag::CallFunc_BitFlagOn_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.IsAnyActiveSAS
// 0x0002 (0x0002 - 0x0000)
struct BP_SAS_PlayerState_C_IsAnyActiveSAS final
{
public:
	bool                                          Acitve;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SAS_PlayerState_C_IsAnyActiveSAS) == 0x000001, "Wrong alignment on BP_SAS_PlayerState_C_IsAnyActiveSAS");
static_assert(sizeof(BP_SAS_PlayerState_C_IsAnyActiveSAS) == 0x000002, "Wrong size on BP_SAS_PlayerState_C_IsAnyActiveSAS");
static_assert(offsetof(BP_SAS_PlayerState_C_IsAnyActiveSAS, Acitve) == 0x000000, "Member 'BP_SAS_PlayerState_C_IsAnyActiveSAS::Acitve' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsAnyActiveSAS, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000001, "Member 'BP_SAS_PlayerState_C_IsAnyActiveSAS::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.IsActiveSAS
// 0x0020 (0x0020 - 0x0000)
struct BP_SAS_PlayerState_C_IsActiveSAS final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_856D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BitFlagCheck_ReturnValue;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_856E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_856F[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_IsActiveSAS) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_IsActiveSAS");
static_assert(sizeof(BP_SAS_PlayerState_C_IsActiveSAS) == 0x000020, "Wrong size on BP_SAS_PlayerState_C_IsActiveSAS");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, SAS_Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::SAS_Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, Active) == 0x000001, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::Active' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, CallFunc_BitFlagCheck_ReturnValue) == 0x00000C, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::CallFunc_BitFlagCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, CallFunc_Less_IntInt_ReturnValue) == 0x000019, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_IsActiveSAS, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_IsActiveSAS::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.Update
// 0x0130 (0x0130 - 0x0000)
struct BP_SAS_PlayerState_C_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LSASExtendTimeRate;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbDisableSasControl;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8570[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LMaxTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCommand                           NewLocalVar_0;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LTipsCheckTime;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPrevRemainTime;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LIndex;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRemainTime;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LTempRate;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LMaxSASRate;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8571[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_GetSASExtendTimeRate_self_CastInput;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSASExtendTimeRate_Rate;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8572[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8573[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8574[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8575[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BitFlagCheck_ReturnValue;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8576[0x1];                                     // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8577[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8578[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager_1;              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager;               // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8579[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_857A[0x6];                                     // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSASCodeParam_bDummy;                   // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_857B[0x2];                                     // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndSAS_Success;                           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyActiveSAS_Acitve;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_857C[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_Update) == 0x000008, "Wrong alignment on BP_SAS_PlayerState_C_Update");
static_assert(sizeof(BP_SAS_PlayerState_C_Update) == 0x000130, "Wrong size on BP_SAS_PlayerState_C_Update");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, DeltaSeconds) == 0x000000, "Member 'BP_SAS_PlayerState_C_Update::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LSASExtendTimeRate) == 0x000004, "Member 'BP_SAS_PlayerState_C_Update::LSASExtendTimeRate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LbDisableSasControl) == 0x000008, "Member 'BP_SAS_PlayerState_C_Update::LbDisableSasControl' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LMaxTime) == 0x00000C, "Member 'BP_SAS_PlayerState_C_Update::LMaxTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, NewLocalVar_0) == 0x000010, "Member 'BP_SAS_PlayerState_C_Update::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LTipsCheckTime) == 0x000040, "Member 'BP_SAS_PlayerState_C_Update::LTipsCheckTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LPrevRemainTime) == 0x000044, "Member 'BP_SAS_PlayerState_C_Update::LPrevRemainTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LIndex) == 0x000048, "Member 'BP_SAS_PlayerState_C_Update::LIndex' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LRemainTime) == 0x00004C, "Member 'BP_SAS_PlayerState_C_Update::LRemainTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LTempRate) == 0x000050, "Member 'BP_SAS_PlayerState_C_Update::LTempRate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, LMaxSASRate) == 0x000054, "Member 'BP_SAS_PlayerState_C_Update::LMaxSASRate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_SAS_PlayerState_C_Update::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, Temp_int_Loop_Num_Variable) == 0x00005C, "Member 'BP_SAS_PlayerState_C_Update::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetSASManager_SAS_Manager) == 0x000060, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, Temp_int_Loop_Counter_Variable) == 0x000068, "Member 'BP_SAS_PlayerState_C_Update::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetSASExtendTimeRate_self_CastInput) == 0x000070, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetSASExtendTimeRate_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetSASExtendTimeRate_Rate) == 0x000080, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetSASExtendTimeRate_Rate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetOwner_ReturnValue) == 0x000090, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000098, "Member 'BP_SAS_PlayerState_C_Update::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_SAS_PlayerState_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_IsActionStatusAI_bResult) == 0x0000B0, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x0000B4, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_BitFlagCheck_ReturnValue) == 0x0000B8, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_BitFlagCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B9, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000BA, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_FMax_ReturnValue) == 0x0000BC, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Not_PreBool_ReturnValue) == 0x0000C1, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetDebuggingManager_Manager) == 0x0000C8, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetSASManager_SAS_Manager_1) == 0x0000D8, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetSASManager_SAS_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, K2Node_DynamicCast_AsBPI_SASManager) == 0x0000E0, "Member 'BP_SAS_PlayerState_C_Update::K2Node_DynamicCast_AsBPI_SASManager' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, K2Node_DynamicCast_bSuccess_1) == 0x0000F0, "Member 'BP_SAS_PlayerState_C_Update::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000F4, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000F8, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000F9, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_GetOwner_ReturnValue_1) == 0x000100, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000108, "Member 'BP_SAS_PlayerState_C_Update::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, K2Node_DynamicCast_bSuccess_2) == 0x000118, "Member 'BP_SAS_PlayerState_C_Update::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_SetSASCodeParam_bDummy) == 0x000119, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_SetSASCodeParam_bDummy' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Array_Length_ReturnValue) == 0x00011C, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_EndSAS_Success) == 0x000120, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_EndSAS_Success' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_IsAnyActiveSAS_Acitve) == 0x000121, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_IsAnyActiveSAS_Acitve' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000124, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000128, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_Update, CallFunc_FMax_ReturnValue_1) == 0x00012C, "Member 'BP_SAS_PlayerState_C_Update::CallFunc_FMax_ReturnValue_1' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.RegistCommandParam
// 0x0040 (0x0040 - 0x0000)
struct BP_SAS_PlayerState_C_RegistCommandParam final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_857D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSASCommand                           SAS_CommandParam;                                  // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_RegistCommandParam) == 0x000008, "Wrong alignment on BP_SAS_PlayerState_C_RegistCommandParam");
static_assert(sizeof(BP_SAS_PlayerState_C_RegistCommandParam) == 0x000040, "Wrong size on BP_SAS_PlayerState_C_RegistCommandParam");
static_assert(offsetof(BP_SAS_PlayerState_C_RegistCommandParam, SASButton) == 0x000000, "Member 'BP_SAS_PlayerState_C_RegistCommandParam::SASButton' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RegistCommandParam, SAS_CommandParam) == 0x000008, "Member 'BP_SAS_PlayerState_C_RegistCommandParam::SAS_CommandParam' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RegistCommandParam, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000038, "Member 'BP_SAS_PlayerState_C_RegistCommandParam::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.GetCommandAccelerator
// 0x0048 (0x0048 - 0x0000)
struct BP_SAS_PlayerState_C_GetCommandAccelerator final
{
public:
	struct FAcceleratorParam                      Command;                                           // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_857E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      LFailedData;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     AcceleratorKind;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_857F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8580[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SAS_PlayerState_C_GetCommandAccelerator) == 0x000008, "Wrong alignment on BP_SAS_PlayerState_C_GetCommandAccelerator");
static_assert(sizeof(BP_SAS_PlayerState_C_GetCommandAccelerator) == 0x000048, "Wrong size on BP_SAS_PlayerState_C_GetCommandAccelerator");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, Command) == 0x000000, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::Command' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, Owner) == 0x000010, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::Owner' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, LFailedData) == 0x000018, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::LFailedData' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, AcceleratorKind) == 0x000024, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::AcceleratorKind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetCommandAccelerator, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_SAS_PlayerState_C_GetCommandAccelerator::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.SAS_End
// 0x0060 (0x0060 - 0x0000)
struct BP_SAS_PlayerState_C_SAS_End final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8581[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSASCommand                           LDefaultValue;                                     // 0x0008(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyActiveSAS_Acitve;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x003D(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8582[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSASCodeParam_bDummy;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SAS_PlayerState_C_SAS_End) == 0x000008, "Wrong alignment on BP_SAS_PlayerState_C_SAS_End");
static_assert(sizeof(BP_SAS_PlayerState_C_SAS_End) == 0x000060, "Wrong size on BP_SAS_PlayerState_C_SAS_End");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, SASButton) == 0x000000, "Member 'BP_SAS_PlayerState_C_SAS_End::SASButton' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, LDefaultValue) == 0x000008, "Member 'BP_SAS_PlayerState_C_SAS_End::LDefaultValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000038, "Member 'BP_SAS_PlayerState_C_SAS_End::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, CallFunc_IsAnyActiveSAS_Acitve) == 0x00003C, "Member 'BP_SAS_PlayerState_C_SAS_End::CallFunc_IsAnyActiveSAS_Acitve' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, Temp_bool_Variable) == 0x00003D, "Member 'BP_SAS_PlayerState_C_SAS_End::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'BP_SAS_PlayerState_C_SAS_End::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000048, "Member 'BP_SAS_PlayerState_C_SAS_End::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_SAS_PlayerState_C_SAS_End::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SAS_End, CallFunc_SetSASCodeParam_bDummy) == 0x000059, "Member 'BP_SAS_PlayerState_C_SAS_End::CallFunc_SetSASCodeParam_bDummy' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.SubRemainTime
// 0x0038 (0x0038 - 0x0000)
struct BP_SAS_PlayerState_C_SubRemainTime final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8583[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8584[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8585[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8586[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8587[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8588[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_SubRemainTime) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_SubRemainTime");
static_assert(sizeof(BP_SAS_PlayerState_C_SubRemainTime) == 0x000038, "Wrong size on BP_SAS_PlayerState_C_SubRemainTime");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_SubRemainTime::Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, SubTime) == 0x000004, "Member 'BP_SAS_PlayerState_C_SubRemainTime::SubTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, Temp_bool_True_if_break_was_hit_Variable) == 0x000008, "Member 'BP_SAS_PlayerState_C_SubRemainTime::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_SubRemainTime::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'BP_SAS_PlayerState_C_SubRemainTime::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_SAS_PlayerState_C_SubRemainTime::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTime, CallFunc_FMax_ReturnValue) == 0x000034, "Member 'BP_SAS_PlayerState_C_SubRemainTime::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.PauseTimer
// 0x0001 (0x0001 - 0x0000)
struct BP_SAS_PlayerState_C_PauseTimer final
{
public:
	bool                                          Param_bPauseTimer;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SAS_PlayerState_C_PauseTimer) == 0x000001, "Wrong alignment on BP_SAS_PlayerState_C_PauseTimer");
static_assert(sizeof(BP_SAS_PlayerState_C_PauseTimer) == 0x000001, "Wrong size on BP_SAS_PlayerState_C_PauseTimer");
static_assert(offsetof(BP_SAS_PlayerState_C_PauseTimer, Param_bPauseTimer) == 0x000000, "Member 'BP_SAS_PlayerState_C_PauseTimer::Param_bPauseTimer' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.SetDelayEndFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_SAS_PlayerState_C_SetDelayEndFlag final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDelay;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8589[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_858A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SAS_PlayerState_C_SetDelayEndFlag) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_SetDelayEndFlag");
static_assert(sizeof(BP_SAS_PlayerState_C_SetDelayEndFlag) == 0x000020, "Wrong size on BP_SAS_PlayerState_C_SetDelayEndFlag");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, bDelay) == 0x000001, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::bDelay' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SetDelayEndFlag, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_SetDelayEndFlag::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.RecoverRemainTimeByRate
// 0x0038 (0x0038 - 0x0000)
struct BP_SAS_PlayerState_C_RecoverRemainTimeByRate final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_858B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoverRate;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LNewRemainTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_858C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_858D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_858E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_858F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8590[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_RecoverRemainTimeByRate");
static_assert(sizeof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate) == 0x000038, "Wrong size on BP_SAS_PlayerState_C_RecoverRemainTimeByRate");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, RecoverRate) == 0x000004, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::RecoverRate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, LNewRemainTime) == 0x000008, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::LNewRemainTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, Temp_int_Loop_Num_Variable) == 0x000018, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTimeByRate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_SAS_PlayerState_C_RecoverRemainTimeByRate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.RecoverRemainTime
// 0x0040 (0x0040 - 0x0000)
struct BP_SAS_PlayerState_C_RecoverRemainTime final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8591[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoverTime;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LNewRemainTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8592[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8593[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8594[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8595[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8596[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_RecoverRemainTime) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_RecoverRemainTime");
static_assert(sizeof(BP_SAS_PlayerState_C_RecoverRemainTime) == 0x000040, "Wrong size on BP_SAS_PlayerState_C_RecoverRemainTime");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, RecoverTime) == 0x000004, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::RecoverTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, LNewRemainTime) == 0x000008, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::LNewRemainTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, Temp_int_Loop_Num_Variable) == 0x000018, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_FMax_ReturnValue) == 0x000034, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_RecoverRemainTime, CallFunc_FMin_ReturnValue) == 0x00003C, "Member 'BP_SAS_PlayerState_C_RecoverRemainTime::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.SubRemainTimeMax
// 0x0030 (0x0030 - 0x0000)
struct BP_SAS_PlayerState_C_SubRemainTimeMax final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8597[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8598[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8599[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_859A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_859B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_SubRemainTimeMax) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_SubRemainTimeMax");
static_assert(sizeof(BP_SAS_PlayerState_C_SubRemainTimeMax) == 0x000030, "Wrong size on BP_SAS_PlayerState_C_SubRemainTimeMax");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, Temp_bool_True_if_break_was_hit_Variable) == 0x000001, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000024, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_SubRemainTimeMax, CallFunc_FMax_ReturnValue) == 0x00002C, "Member 'BP_SAS_PlayerState_C_SubRemainTimeMax::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.GetActiveSecondsFromKind
// 0x0028 (0x0028 - 0x0000)
struct BP_SAS_PlayerState_C_GetActiveSecondsFromKind final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_859C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveSeconds;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTime;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_859D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_GetActiveSecondsFromKind");
static_assert(sizeof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind) == 0x000028, "Wrong size on BP_SAS_PlayerState_C_GetActiveSecondsFromKind");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, Kind) == 0x000000, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::Kind' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, ActiveSeconds) == 0x000004, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::ActiveSeconds' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, MaxTime) == 0x000008, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::MaxTime' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsFromKind, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000024, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsFromKind::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.ChargeRemainTime
// 0x002C (0x002C - 0x0000)
struct BP_SAS_PlayerState_C_ChargeRemainTime final
{
public:
	float                                         ChargeRate;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_859E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyActiveSAS_Acitve;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_859F[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_ChargeRemainTime) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_ChargeRemainTime");
static_assert(sizeof(BP_SAS_PlayerState_C_ChargeRemainTime) == 0x00002C, "Wrong size on BP_SAS_PlayerState_C_ChargeRemainTime");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, ChargeRate) == 0x000000, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::ChargeRate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_IsAnyActiveSAS_Acitve) == 0x000018, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_IsAnyActiveSAS_Acitve' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_ChargeRemainTime, CallFunc_FMin_ReturnValue) == 0x000028, "Member 'BP_SAS_PlayerState_C_ChargeRemainTime::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.GetActiveSeconds
// 0x000C (0x000C - 0x0000)
struct BP_SAS_PlayerState_C_GetActiveSeconds final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85A0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveSeconds;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_GetActiveSeconds) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_GetActiveSeconds");
static_assert(sizeof(BP_SAS_PlayerState_C_GetActiveSeconds) == 0x00000C, "Wrong size on BP_SAS_PlayerState_C_GetActiveSeconds");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSeconds, SASButton) == 0x000000, "Member 'BP_SAS_PlayerState_C_GetActiveSeconds::SASButton' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSeconds, ActiveSeconds) == 0x000004, "Member 'BP_SAS_PlayerState_C_GetActiveSeconds::ActiveSeconds' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSeconds, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BP_SAS_PlayerState_C_GetActiveSeconds::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function BP_SAS_PlayerState.BP_SAS_PlayerState_C.GetActiveSecondsRate
// 0x0018 (0x0018 - 0x0000)
struct BP_SAS_PlayerState_C_GetActiveSecondsRate final
{
public:
	E_SASButton                                   Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85A1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRate;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A2[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SAS_PlayerState_C_GetActiveSecondsRate) == 0x000004, "Wrong alignment on BP_SAS_PlayerState_C_GetActiveSecondsRate");
static_assert(sizeof(BP_SAS_PlayerState_C_GetActiveSecondsRate) == 0x000018, "Wrong size on BP_SAS_PlayerState_C_GetActiveSecondsRate");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsRate, Button) == 0x000000, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsRate::Button' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsRate, Rate) == 0x000004, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsRate::Rate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsRate, LRate) == 0x000008, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsRate::LRate' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsRate, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsRate::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsRate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsRate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SAS_PlayerState_C_GetActiveSecondsRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_SAS_PlayerState_C_GetActiveSecondsRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

}

