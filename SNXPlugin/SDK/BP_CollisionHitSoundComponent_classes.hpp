#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollisionHitSoundComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C
// 0x00C8 (0x0188 - 0x00C0)
class UBP_CollisionHitSoundComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class AActor*>                         HitActor;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsHit;                                             // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                OldRollRightAxis;                                  // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4697[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRoll;                                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4698[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OldRollRot;                                        // 0x0104(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRollSoundPlay;                                   // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4699[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TotalRoll;                                         // 0x0114(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OldDeltaRot;                                       // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OldFallRot;                                        // 0x012C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         IgnoreVelocity;                                    // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitGameTime;                                       // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IgnoreHitMinSeconds;                               // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IgnoreHitMaxSeconds;                               // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LargeHitSoundThresholdVelocity;                    // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IgnoreHitSeconds;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RollFirstRotate;                                   // 0x0150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotateSoundStartAngle;                             // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   RollSoundHandle;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LargeRollSpeedThreshold;                           // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IgnoreMoveLength;                                  // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitSoundLocation;                                  // 0x0170(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNoSoundRoll;                                     // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469A[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     SoundManager;                                      // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CollisionHitSoundComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void CollisionHitSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult, bool* IsHitSound);
	void CollisionRollSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult, bool* IsRolling);
	void CollisionFallSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult, bool* IsFall);
	void CollisionSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult);
	void UpdateCollisionParam();
	void GetCollisionSound(const struct FHitResult& OtherHitResult, class UMaterialInterface* OwnerMaterial, struct FRSCollisionSound* CollisionSound);
	void GetOwnerMaterials(TArray<class UMaterialInterface*>* OwnerMaterials);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CollisionHitSoundComponent_C">();
	}
	static class UBP_CollisionHitSoundComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CollisionHitSoundComponent_C>();
	}
};
static_assert(alignof(UBP_CollisionHitSoundComponent_C) == 0x000008, "Wrong alignment on UBP_CollisionHitSoundComponent_C");
static_assert(sizeof(UBP_CollisionHitSoundComponent_C) == 0x000188, "Wrong size on UBP_CollisionHitSoundComponent_C");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_CollisionHitSoundComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, HitActor) == 0x0000C8, "Member 'UBP_CollisionHitSoundComponent_C::HitActor' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IsHit) == 0x0000D8, "Member 'UBP_CollisionHitSoundComponent_C::IsHit' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, OldRollRightAxis) == 0x0000E8, "Member 'UBP_CollisionHitSoundComponent_C::OldRollRightAxis' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, OwnerActor) == 0x0000F8, "Member 'UBP_CollisionHitSoundComponent_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IsRoll) == 0x000100, "Member 'UBP_CollisionHitSoundComponent_C::IsRoll' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, OldRollRot) == 0x000104, "Member 'UBP_CollisionHitSoundComponent_C::OldRollRot' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IsRollSoundPlay) == 0x000110, "Member 'UBP_CollisionHitSoundComponent_C::IsRollSoundPlay' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, TotalRoll) == 0x000114, "Member 'UBP_CollisionHitSoundComponent_C::TotalRoll' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, OldDeltaRot) == 0x000120, "Member 'UBP_CollisionHitSoundComponent_C::OldDeltaRot' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, OldFallRot) == 0x00012C, "Member 'UBP_CollisionHitSoundComponent_C::OldFallRot' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IgnoreVelocity) == 0x000138, "Member 'UBP_CollisionHitSoundComponent_C::IgnoreVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, HitGameTime) == 0x00013C, "Member 'UBP_CollisionHitSoundComponent_C::HitGameTime' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IgnoreHitMinSeconds) == 0x000140, "Member 'UBP_CollisionHitSoundComponent_C::IgnoreHitMinSeconds' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IgnoreHitMaxSeconds) == 0x000144, "Member 'UBP_CollisionHitSoundComponent_C::IgnoreHitMaxSeconds' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, LargeHitSoundThresholdVelocity) == 0x000148, "Member 'UBP_CollisionHitSoundComponent_C::LargeHitSoundThresholdVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IgnoreHitSeconds) == 0x00014C, "Member 'UBP_CollisionHitSoundComponent_C::IgnoreHitSeconds' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, RollFirstRotate) == 0x000150, "Member 'UBP_CollisionHitSoundComponent_C::RollFirstRotate' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, RotateSoundStartAngle) == 0x00015C, "Member 'UBP_CollisionHitSoundComponent_C::RotateSoundStartAngle' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, RollSoundHandle) == 0x000160, "Member 'UBP_CollisionHitSoundComponent_C::RollSoundHandle' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, LargeRollSpeedThreshold) == 0x000168, "Member 'UBP_CollisionHitSoundComponent_C::LargeRollSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IgnoreMoveLength) == 0x00016C, "Member 'UBP_CollisionHitSoundComponent_C::IgnoreMoveLength' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, HitSoundLocation) == 0x000170, "Member 'UBP_CollisionHitSoundComponent_C::HitSoundLocation' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, IsNoSoundRoll) == 0x00017C, "Member 'UBP_CollisionHitSoundComponent_C::IsNoSoundRoll' has a wrong offset!");
static_assert(offsetof(UBP_CollisionHitSoundComponent_C, SoundManager) == 0x000180, "Member 'UBP_CollisionHitSoundComponent_C::SoundManager' has a wrong offset!");

}

