#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Enemy_Weapon

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.ExecuteUbergraph_BP_Enemy_Weapon
// 0x0658 (0x0658 - 0x0000)
struct BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result_1;               // 0x0008(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_OnHitAttack_Result;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B22[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result;                 // 0x01D0(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_OnHitDamage_Result;                       // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B23[0x6];                                     // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B24[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitCheckComponent*                     CallFunc_GetHitCheckComponentFromActor_ReturnValue; // 0x03A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B25[0x6];                                     // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x03C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x03D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x03E4(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8B26[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0470(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0480(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B27[0x3];                                     // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0490(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0519(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B28[0x2];                                     // 0x051A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0524(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0530(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x053C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0548(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B29[0x4];                                     // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0568(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x057C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0580(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x058C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0599(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2A[0x2];                                     // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x059C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x05A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x05B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x05BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x05C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B2B[0x4];                                     // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x05E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0600(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x060C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0619(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2C[0x6];                                     // 0x061A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2D[0x7];                                     // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic_1;    // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2E[0x3];                                     // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Sec;                                  // 0x063C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndCurveTargetMove_Return;                // 0x0640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x0641(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2F[0x6];                                     // 0x0642(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x0648(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CancelAllEffect_bDummy;                   // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon");
static_assert(sizeof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon) == 0x000658, "Wrong size on BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, EntryPoint) == 0x000000, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_Result_1) == 0x000008, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_Result_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_OnHitAttack_Result) == 0x0001C8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_OnHitAttack_Result' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_Result) == 0x0001D0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_OnHitDamage_Result) == 0x000390, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_OnHitDamage_Result' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_Event_EndPlayReason) == 0x000391, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_GetHitManager_Manager) == 0x000398, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_IsValid_ReturnValue) == 0x0003A0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_GetHitCheckComponentFromActor_ReturnValue) == 0x0003A8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_GetHitCheckComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_DynamicCast_AsRSBattle_Character) == 0x0003B0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_DynamicCast_bSuccess) == 0x0003B8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_OnAttackActorHit_Dummy) == 0x0003B9, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_HitComponent) == 0x0003C0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0003C8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0003D0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0003D8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_Hit) == 0x0003E4, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000470, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_OtherActor) == 0x000478, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_OtherComp) == 0x000480, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000488, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_bFromSweep) == 0x00048C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_ComponentBoundEvent_SweepResult) == 0x000490, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_bBlockingHit) == 0x000518, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_bInitialOverlap) == 0x000519, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Time) == 0x00051C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Distance) == 0x000520, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Location) == 0x000524, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_ImpactPoint) == 0x000530, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Normal) == 0x00053C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_ImpactNormal) == 0x000548, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_PhysMat) == 0x000558, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitActor) == 0x000560, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitComponent) == 0x000568, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitBoneName) == 0x000570, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitItem) == 0x000578, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_FaceIndex) == 0x00057C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_TraceStart) == 0x000580, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_TraceEnd) == 0x00058C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000598, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000599, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Time_1) == 0x00059C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Distance_1) == 0x0005A0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Location_1) == 0x0005A4, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0005B0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_Normal_1) == 0x0005BC, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0005C8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_PhysMat_1) == 0x0005D8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitActor_1) == 0x0005E0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitComponent_1) == 0x0005E8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitBoneName_1) == 0x0005F0, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_HitItem_1) == 0x0005F8, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_FaceIndex_1) == 0x0005FC, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_TraceStart_1) == 0x000600, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_BreakHitResult_TraceEnd_1) == 0x00060C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_IsValid_ReturnValue_1) == 0x000618, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_IsValid_ReturnValue_2) == 0x000619, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000620, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_DynamicCast_bSuccess_1) == 0x000628, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_DynamicCast_AsBP_Psychic_Object_Basic_1) == 0x000630, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_DynamicCast_AsBP_Psychic_Object_Basic_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_DynamicCast_bSuccess_2) == 0x000638, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, K2Node_Event_Sec) == 0x00063C, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::K2Node_Event_Sec' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_EndCurveTargetMove_Return) == 0x000640, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_EndCurveTargetMove_Return' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x000641, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x000648, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon, CallFunc_CancelAllEffect_bDummy) == 0x000650, "Member 'BP_Enemy_Weapon_C_ExecuteUbergraph_BP_Enemy_Weapon::CallFunc_CancelAllEffect_bDummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.EndCurveTargetMove_FromNative
// 0x0004 (0x0004 - 0x0000)
struct BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative");
static_assert(sizeof(BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative) == 0x000004, "Wrong size on BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative, Sec) == 0x000000, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove_FromNative::Sec' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B30[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'BP_Enemy_Weapon_C_BndEvt__PhysicsCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_ReceiveEndPlay");
static_assert(sizeof(BP_Enemy_Weapon_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_ReceiveEndPlay");
static_assert(offsetof(BP_Enemy_Weapon_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Enemy_Weapon_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature");
static_assert(sizeof(BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_2_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature");
static_assert(sizeof(BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature");
static_assert(offsetof(BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'BP_Enemy_Weapon_C_BndEvt__BaseHitCheckReceiver_K2Node_ComponentBoundEvent_1_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Enemy_Weapon_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_ReceiveTick");
static_assert(sizeof(BP_Enemy_Weapon_C_ReceiveTick) == 0x000004, "Wrong size on BP_Enemy_Weapon_C_ReceiveTick");
static_assert(offsetof(BP_Enemy_Weapon_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.CreateAttackCollosion
// 0x0170 (0x0170 - 0x0000)
struct BP_Enemy_Weapon_C_CreateAttackCollosion final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timer;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitEffectInfo                       LEffectInfo;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor)
	class UPrimitiveComponent*                    Primitive;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B31[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B32[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitCheckComponent*                     CallFunc_GetHitCheckComponentFromActor_ReturnValue; // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B33[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B34[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo; // 0x0078(0x00F0)()
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_CreateAttackCollosion) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_CreateAttackCollosion");
static_assert(sizeof(BP_Enemy_Weapon_C_CreateAttackCollosion) == 0x000170, "Wrong size on BP_Enemy_Weapon_C_CreateAttackCollosion");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, DataTable) == 0x000000, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::DataTable' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, SkillName) == 0x000008, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::SkillName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, Param_Owner) == 0x000010, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, Timer) == 0x000018, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::Timer' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, Location) == 0x00001C, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, LEffectInfo) == 0x000028, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::LEffectInfo' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, Primitive) == 0x000030, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::Primitive' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x000038, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_GetHitManager_Manager) == 0x000048, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_GetHitCheckComponentFromActor_ReturnValue) == 0x000058, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_GetHitCheckComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000068, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo) == 0x000078, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CreateAttackCollosion, CallFunc_IsValid_ReturnValue_2) == 0x000168, "Member 'BP_Enemy_Weapon_C_CreateAttackCollosion::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateCurveTargetMove
// 0x0278 (0x0278 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateCurveTargetMove final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndCurveTargetMove_Return;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B35[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B36[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTargetDistance_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitLineCheck_IsAnyHit;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B37[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_IsHitLineCheck_HitResult;                 // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B38[0x2];                                     // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MinValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MaxValue;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x017C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B39[0x3];                                     // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateCurveTargetMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_UpdateCurveTargetMove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateCurveTargetMove) == 0x000278, "Wrong size on BP_Enemy_Weapon_C_UpdateCurveTargetMove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, Sec) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::Sec' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, L_Location) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::L_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, L_Distance) == 0x000010, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::L_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_EndCurveTargetMove_Return) == 0x000014, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_EndCurveTargetMove_Return' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_X) == 0x000024, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_GetTargetDistance_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_GetTargetDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000044, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_IsHitLineCheck_IsAnyHit) == 0x000050, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_IsHitLineCheck_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_IsHitLineCheck_HitResult) == 0x000054, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_IsHitLineCheck_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_bBlockingHit) == 0x0000DC, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000DD, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_Time) == 0x0000E0, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_Distance) == 0x0000E4, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_Location) == 0x0000E8, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F4, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_Normal) == 0x000100, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_ImpactNormal) == 0x00010C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_HitItem) == 0x000138, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_FaceIndex) == 0x00013C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_TraceStart) == 0x000140, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakHitResult_TraceEnd) == 0x00014C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_GetValueRange_MinValue) == 0x000158, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_GetValueRange_MinValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_GetValueRange_MaxValue) == 0x00015C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_GetValueRange_MaxValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_X_1) == 0x000160, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_Y_1) == 0x000164, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_Z_1) == 0x000168, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00016C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000170, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000174, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000178, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00017C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000204, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000208, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00020C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_GetFloatValue_ReturnValue) == 0x000218, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00021C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000220, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_GetActorForwardVector_ReturnValue) == 0x00022C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000238, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_Add_VectorVector_ReturnValue) == 0x000244, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_X_2) == 0x000250, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_Y_2) == 0x000254, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_BreakVector_Z_2) == 0x000258, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_MakeVector_ReturnValue) == 0x00025C, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCurveTargetMove, CallFunc_MakeVector_ReturnValue_1) == 0x000268, "Member 'BP_Enemy_Weapon_C_UpdateCurveTargetMove::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GetTargetDistance
// 0x002C (0x002C - 0x0000)
struct BP_Enemy_Weapon_C_GetTargetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_GetTargetDistance) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_GetTargetDistance");
static_assert(sizeof(BP_Enemy_Weapon_C_GetTargetDistance) == 0x00002C, "Wrong size on BP_Enemy_Weapon_C_GetTargetDistance");
static_assert(offsetof(BP_Enemy_Weapon_C_GetTargetDistance, ReturnValue) == 0x000000, "Member 'BP_Enemy_Weapon_C_GetTargetDistance::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetTargetDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_Enemy_Weapon_C_GetTargetDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetTargetDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_GetTargetDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetTargetDistance, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_Enemy_Weapon_C_GetTargetDistance::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetTargetDistance, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_Enemy_Weapon_C_GetTargetDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.SetCurveTargetMoveInit
// 0x0038 (0x0038 - 0x0000)
struct BP_Enemy_Weapon_C_SetCurveTargetMoveInit final
{
public:
	float                                         CallFunc_GetTargetDistance_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_SetCurveTargetMoveInit");
static_assert(sizeof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit) == 0x000038, "Wrong size on BP_Enemy_Weapon_C_SetCurveTargetMoveInit");
static_assert(offsetof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit, CallFunc_GetTargetDistance_ReturnValue) == 0x000000, "Member 'BP_Enemy_Weapon_C_SetCurveTargetMoveInit::CallFunc_GetTargetDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_Enemy_Weapon_C_SetCurveTargetMoveInit::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_SetCurveTargetMoveInit::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x00001C, "Member 'BP_Enemy_Weapon_C_SetCurveTargetMoveInit::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit, CallFunc_FindLookAtRotation_ReturnValue) == 0x000028, "Member 'BP_Enemy_Weapon_C_SetCurveTargetMoveInit::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetCurveTargetMoveInit, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_SetCurveTargetMoveInit::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.SetTargetMoveEffectRotation
// 0x013C (0x013C - 0x0000)
struct BP_Enemy_Weapon_C_SetTargetMoveEffectRotation final
{
public:
	struct FRotator                               LForwardRotation;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B3A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B3B[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x00B4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_SetTargetMoveEffectRotation");
static_assert(sizeof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation) == 0x00013C, "Wrong size on BP_Enemy_Weapon_C_SetTargetMoveEffectRotation");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, LForwardRotation) == 0x000000, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::LForwardRotation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000010, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000098, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000A4, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, CallFunc_IsValid_ReturnValue_1) == 0x0000B0, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetTargetMoveEffectRotation, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x0000B4, "Member 'BP_Enemy_Weapon_C_SetTargetMoveEffectRotation::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.HitCurveMoveTarget
// 0x001C (0x001C - 0x0000)
struct BP_Enemy_Weapon_C_HitCurveMoveTarget final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HitAfterCurveMoveTarget_Return;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_HitCurveMoveTarget) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_HitCurveMoveTarget");
static_assert(sizeof(BP_Enemy_Weapon_C_HitCurveMoveTarget) == 0x00001C, "Wrong size on BP_Enemy_Weapon_C_HitCurveMoveTarget");
static_assert(offsetof(BP_Enemy_Weapon_C_HitCurveMoveTarget, HitLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_HitCurveMoveTarget::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitCurveMoveTarget, HitNormal) == 0x00000C, "Member 'BP_Enemy_Weapon_C_HitCurveMoveTarget::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitCurveMoveTarget, CallFunc_HitAfterCurveMoveTarget_Return) == 0x000018, "Member 'BP_Enemy_Weapon_C_HitCurveMoveTarget::CallFunc_HitAfterCurveMoveTarget_Return' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.HitAfterCurveMoveTarget
// 0x001C (0x001C - 0x0000)
struct BP_Enemy_Weapon_C_HitAfterCurveMoveTarget final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_HitAfterCurveMoveTarget");
static_assert(sizeof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget) == 0x00001C, "Wrong size on BP_Enemy_Weapon_C_HitAfterCurveMoveTarget");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget, HitLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget, HitNormal) == 0x00000C, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget, Return) == 0x000018, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget::Return' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.AttackCollisionEnd
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_AttackCollisionEnd final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponVisibility_Dummy;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_AttackCollisionEnd) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_AttackCollisionEnd");
static_assert(sizeof(BP_Enemy_Weapon_C_AttackCollisionEnd) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_AttackCollisionEnd");
static_assert(offsetof(BP_Enemy_Weapon_C_AttackCollisionEnd, IsVisible) == 0x000000, "Member 'BP_Enemy_Weapon_C_AttackCollisionEnd::IsVisible' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_AttackCollisionEnd, CallFunc_SetWeaponVisibility_Dummy) == 0x000001, "Member 'BP_Enemy_Weapon_C_AttackCollisionEnd::CallFunc_SetWeaponVisibility_Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.EndCurveTargetMove
// 0x0038 (0x0038 - 0x0000)
struct BP_Enemy_Weapon_C_EndCurveTargetMove final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B3C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      L_Type;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_EndCurveTargetMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_EndCurveTargetMove");
static_assert(sizeof(BP_Enemy_Weapon_C_EndCurveTargetMove) == 0x000038, "Wrong size on BP_Enemy_Weapon_C_EndCurveTargetMove");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove, Sec) == 0x000000, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove::Sec' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove, Return) == 0x000004, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove::Return' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove, L_Type) == 0x000008, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove::L_Type' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove, L_Location) == 0x000018, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove::L_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove, L_Distance) == 0x000024, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove::L_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCurveTargetMove, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_Enemy_Weapon_C_EndCurveTargetMove::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GetHitObjectType
// 0x0030 (0x0030 - 0x0000)
struct BP_Enemy_Weapon_C_GetHitObjectType final
{
public:
	TArray<EObjectTypeQuery>                      ObjectType;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      L_ObjectType;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_GetHitObjectType) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_GetHitObjectType");
static_assert(sizeof(BP_Enemy_Weapon_C_GetHitObjectType) == 0x000030, "Wrong size on BP_Enemy_Weapon_C_GetHitObjectType");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitObjectType, ObjectType) == 0x000000, "Member 'BP_Enemy_Weapon_C_GetHitObjectType::ObjectType' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitObjectType, L_ObjectType) == 0x000010, "Member 'BP_Enemy_Weapon_C_GetHitObjectType::L_ObjectType' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitObjectType, K2Node_MakeArray_Array) == 0x000020, "Member 'BP_Enemy_Weapon_C_GetHitObjectType::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitCommonMove
// 0x0020 (0x0020 - 0x0000)
struct BP_Enemy_Weapon_C_InitCommonMove final
{
public:
	struct FVector                                InitPos;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDir;                                           // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoTargetMove;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitCommonMove) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_InitCommonMove");
static_assert(sizeof(BP_Enemy_Weapon_C_InitCommonMove) == 0x000020, "Wrong size on BP_Enemy_Weapon_C_InitCommonMove");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMove, InitPos) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitCommonMove::InitPos' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMove, MoveDir) == 0x00000C, "Member 'BP_Enemy_Weapon_C_InitCommonMove::MoveDir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMove, MoveSpeed) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitCommonMove::MoveSpeed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMove, NoTargetMove) == 0x00001C, "Member 'BP_Enemy_Weapon_C_InitCommonMove::NoTargetMove' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateCommonMove
// 0x0020 (0x0020 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateCommonMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bUpdateLocation;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B3D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_Move;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_NewLocation;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateCommonMove) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_UpdateCommonMove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateCommonMove) == 0x000020, "Wrong size on BP_Enemy_Weapon_C_UpdateCommonMove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCommonMove, DeltaTime) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateCommonMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCommonMove, L_bUpdateLocation) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateCommonMove::L_bUpdateLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCommonMove, L_Move) == 0x000008, "Member 'BP_Enemy_Weapon_C_UpdateCommonMove::L_Move' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCommonMove, L_NewLocation) == 0x000014, "Member 'BP_Enemy_Weapon_C_UpdateCommonMove::L_NewLocation' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsHitLineCheck
// 0x0270 (0x0270 - 0x0000)
struct BP_Enemy_Weapon_C_IsHitLineCheck final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsAnyHit;                                    // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B3E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x001C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             LHitResult;                                        // 0x00A4(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          LIsAnyHit;                                         // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B3F[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0130(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0158(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsHitPhysicsCollision_bHit;               // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B40[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x01E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsHitLineCheck) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_IsHitLineCheck");
static_assert(sizeof(BP_Enemy_Weapon_C_IsHitLineCheck) == 0x000270, "Wrong size on BP_Enemy_Weapon_C_IsHitLineCheck");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, StartLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, EndLocation) == 0x00000C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, Param_IsAnyHit) == 0x000018, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::Param_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, HitResult) == 0x00001C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, LHitResult) == 0x0000A4, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::LHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, LIsAnyHit) == 0x00012C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::LIsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, Temp_object_Variable) == 0x000130, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, CallFunc_GetActorForwardVector_ReturnValue) == 0x000140, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00014C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, CallFunc_MakeHitResult_ReturnValue) == 0x000158, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, CallFunc_IsHitPhysicsCollision_bHit) == 0x0001E0, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::CallFunc_IsHitPhysicsCollision_bHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, CallFunc_LineTraceSingle_OutHit) == 0x0001E4, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheck, CallFunc_LineTraceSingle_ReturnValue) == 0x00026C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheck::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.OnHitAttack
// 0x01C8 (0x01C8 - 0x0000)
struct BP_Enemy_Weapon_C_OnHitAttack final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Result;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_OnHitAttack) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_OnHitAttack");
static_assert(sizeof(BP_Enemy_Weapon_C_OnHitAttack) == 0x0001C8, "Wrong size on BP_Enemy_Weapon_C_OnHitAttack");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitAttack, HitResult) == 0x000000, "Member 'BP_Enemy_Weapon_C_OnHitAttack::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitAttack, Result) == 0x0001C0, "Member 'BP_Enemy_Weapon_C_OnHitAttack::Result' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.OnHitDamage
// 0x01C8 (0x01C8 - 0x0000)
struct BP_Enemy_Weapon_C_OnHitDamage final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Result;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_OnHitDamage) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_OnHitDamage");
static_assert(sizeof(BP_Enemy_Weapon_C_OnHitDamage) == 0x0001C8, "Wrong size on BP_Enemy_Weapon_C_OnHitDamage");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitDamage, HitResult) == 0x000000, "Member 'BP_Enemy_Weapon_C_OnHitDamage::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitDamage, Result) == 0x0001C0, "Member 'BP_Enemy_Weapon_C_OnHitDamage::Result' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateProjectileMove
// 0x01F0 (0x01F0 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateProjectileMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LAxis;                                             // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LNewVelocity;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDstVelocity;                                      // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LSrcVelocity;                                      // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle;           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B41[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle_1;         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B42[0x1];                                     // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B43[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B44[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitLineCheck_IsAnyHit;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B45[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_IsHitLineCheck_HitResult;                 // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B46[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B47[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectileHitProcess_NewParam;            // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B48[0x2];                                     // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateProjectileMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_UpdateProjectileMove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateProjectileMove) == 0x0001F0, "Wrong size on BP_Enemy_Weapon_C_UpdateProjectileMove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, DeltaTime) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, LAxis) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::LAxis' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, LNewVelocity) == 0x000010, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::LNewVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, LDstVelocity) == 0x00001C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::LDstVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, LSrcVelocity) == 0x000028, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::LSrcVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_Normal_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_RotateAngleAxis_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_Cross_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_Normal_ReturnValue_1) == 0x000058, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_GetTargetRangeAngle_RangeAngle) == 0x000064, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_GetTargetRangeAngle_RangeAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_Normal_ReturnValue_2) == 0x00006C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_GetTargetRangeAngle_RangeAngle_1) == 0x000078, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_GetTargetRangeAngle_RangeAngle_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00007C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_IsValid_ReturnValue) == 0x00007D, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_IsValid_ReturnValue_1) == 0x00007E, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_FindLookAtRotation_ReturnValue) == 0x00008C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000098, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00009C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000A8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000B4, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_VSize_ReturnValue) == 0x0000C0, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000C4, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000C5, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0000C8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_IsHitLineCheck_IsAnyHit) == 0x0000D4, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_IsHitLineCheck_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_IsHitLineCheck_HitResult) == 0x0000D8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_IsHitLineCheck_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_bBlockingHit) == 0x000160, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_bInitialOverlap) == 0x000161, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_Time) == 0x000164, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_Distance) == 0x000168, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_Location) == 0x00016C, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_ImpactPoint) == 0x000178, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_Normal) == 0x000184, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_ImpactNormal) == 0x000190, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_PhysMat) == 0x0001A0, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_HitActor) == 0x0001A8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_HitComponent) == 0x0001B0, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_HitBoneName) == 0x0001B8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_HitItem) == 0x0001C0, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_FaceIndex) == 0x0001C4, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_BreakHitResult_TraceEnd) == 0x0001D4, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_VSize_ReturnValue_1) == 0x0001E0, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_ProjectileHitProcess_NewParam) == 0x0001E4, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_ProjectileHitProcess_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x0001E5, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateProjectileMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001E8, "Member 'BP_Enemy_Weapon_C_UpdateProjectileMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.OnHitObject
// 0x008C (0x008C - 0x0000)
struct BP_Enemy_Weapon_C_OnHitObject final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Result;                                            // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_OnHitObject) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_OnHitObject");
static_assert(sizeof(BP_Enemy_Weapon_C_OnHitObject) == 0x00008C, "Wrong size on BP_Enemy_Weapon_C_OnHitObject");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitObject, HitResult) == 0x000000, "Member 'BP_Enemy_Weapon_C_OnHitObject::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitObject, Result) == 0x000088, "Member 'BP_Enemy_Weapon_C_OnHitObject::Result' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.WeaponUpdate
// 0x000C (0x000C - 0x0000)
struct BP_Enemy_Weapon_C_WeaponUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateInterceptReserve_Dummy;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishWeapon_Dummy;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishWeapon_Dummy_1;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateInterceptMove_bDummy;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateHomingMove_Dummy;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateCustomMove_return;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_WeaponUpdate) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_WeaponUpdate");
static_assert(sizeof(BP_Enemy_Weapon_C_WeaponUpdate) == 0x00000C, "Wrong size on BP_Enemy_Weapon_C_WeaponUpdate");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, DeltaSeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, CallFunc_UpdateInterceptReserve_Dummy) == 0x000004, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::CallFunc_UpdateInterceptReserve_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, CallFunc_FinishWeapon_Dummy) == 0x000005, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::CallFunc_FinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, CallFunc_FinishWeapon_Dummy_1) == 0x000006, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::CallFunc_FinishWeapon_Dummy_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, K2Node_SwitchEnum_CmpSuccess) == 0x000007, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, CallFunc_UpdateInterceptMove_bDummy) == 0x000008, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::CallFunc_UpdateInterceptMove_bDummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, CallFunc_UpdateHomingMove_Dummy) == 0x000009, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::CallFunc_UpdateHomingMove_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_WeaponUpdate, CallFunc_UpdateCustomMove_return) == 0x00000A, "Member 'BP_Enemy_Weapon_C_WeaponUpdate::CallFunc_UpdateCustomMove_return' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateGravityMiove
// 0x01E8 (0x01E8 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateGravityMiove final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LRotation;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitLineCheck_IsAnyHit;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B49[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_IsHitLineCheck_HitResult;                 // 0x0020(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B4A[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B4B[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GravityHitProcess_Dummy;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B4C[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Square_ReturnValue;                       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x015C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateGravityMiove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_UpdateGravityMiove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateGravityMiove) == 0x0001E8, "Wrong size on BP_Enemy_Weapon_C_UpdateGravityMiove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, DeltaSeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, LRotation) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::LRotation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_IsHitLineCheck_IsAnyHit) == 0x00001C, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_IsHitLineCheck_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_IsHitLineCheck_HitResult) == 0x000020, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_IsHitLineCheck_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A8, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000A9, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_Time) == 0x0000AC, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_Distance) == 0x0000B0, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_Location) == 0x0000B4, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C0, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_Normal) == 0x0000CC, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D8, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_PhysMat) == 0x0000E8, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_HitActor) == 0x0000F0, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_HitComponent) == 0x0000F8, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_HitBoneName) == 0x000100, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_HitItem) == 0x000108, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_FaceIndex) == 0x00010C, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_TraceStart) == 0x000110, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_BreakHitResult_TraceEnd) == 0x00011C, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000128, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_GravityHitProcess_Dummy) == 0x000134, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_GravityHitProcess_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_Square_ReturnValue) == 0x000138, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00013C, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_Add_FloatFloat_ReturnValue) == 0x000140, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_MakeVector_ReturnValue) == 0x000144, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000150, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateGravityMiove, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x00015C, "Member 'BP_Enemy_Weapon_C_UpdateGravityMiove::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GravityHitProcess
// 0x0048 (0x0048 - 0x0000)
struct BP_Enemy_Weapon_C_GravityHitProcess final
{
public:
	bool                                          IsHitPlayer;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B4D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B4E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LRotation;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B4F[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_GravityHitProcess) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_GravityHitProcess");
static_assert(sizeof(BP_Enemy_Weapon_C_GravityHitProcess) == 0x000048, "Wrong size on BP_Enemy_Weapon_C_GravityHitProcess");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, IsHitPlayer) == 0x000000, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::IsHitPlayer' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, HitLocation) == 0x000004, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, HitNormal) == 0x000010, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, Dummy) == 0x00001C, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, LRotation) == 0x000020, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::LRotation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, CallFunc_MakeRotFromZ_ReturnValue) == 0x00002C, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GravityHitProcess, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_GravityHitProcess::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.Bullet Recycle
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Enemy_Weapon_C_Bullet_Recycle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B50[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponVisibility_Dummy;                // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B51[0x5];                                     // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_Bullet_Recycle) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_Bullet_Recycle");
static_assert(sizeof(BP_Enemy_Weapon_C_Bullet_Recycle) == 0x0000A8, "Wrong size on BP_Enemy_Weapon_C_Bullet_Recycle");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, Location) == 0x000000, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, Dummy) == 0x00000C, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000010, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000098, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, CallFunc_SetWeaponVisibility_Dummy) == 0x000099, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::CallFunc_SetWeaponVisibility_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x00009A, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Bullet_Recycle, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x0000A0, "Member 'BP_Enemy_Weapon_C_Bullet_Recycle::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitProjectileMove
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Enemy_Weapon_C_InitProjectileMove final
{
public:
	struct FVector                                Src;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dst;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dir;                                               // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngle;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_InitVelocity;                                    // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Dir;                                             // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B52[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B53[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B54[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B55[0x2];                                     // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CorrectBulletDirection_OutDirection;      // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitProjectileMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InitProjectileMove");
static_assert(sizeof(BP_Enemy_Weapon_C_InitProjectileMove) == 0x0000B0, "Wrong size on BP_Enemy_Weapon_C_InitProjectileMove");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, Src) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::Src' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, Dst) == 0x00000C, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::Dst' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, Dir) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::Dir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, Speed) == 0x000024, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::Speed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, Angle) == 0x000028, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::Angle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, MaxAngle) == 0x00002C, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::MaxAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, GravityScale) == 0x000030, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::GravityScale' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, L_InitVelocity) == 0x000034, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::L_InitVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, L_Dir) == 0x000040, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::L_Dir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00004C, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_IsValid_ReturnValue) == 0x00005D, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000060, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000070, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_VSize_ReturnValue) == 0x00007C, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000080, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_IsValid_ReturnValue_2) == 0x000084, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_IsValid_ReturnValue_3) == 0x000085, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00008C, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000090, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_CorrectBulletDirection_OutDirection) == 0x000094, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_CorrectBulletDirection_OutDirection' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A0, "Member 'BP_Enemy_Weapon_C_InitProjectileMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitInterceptMove_Old
// 0x00E0 (0x00E0 - 0x0000)
struct BP_Enemy_Weapon_C_InitInterceptMove_Old final
{
public:
	class ARSBattleCharacter_C*                   Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   Param_Target;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_HomingMagnitude;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_AdjustAngle;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Speed;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_InitVelocity;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Dir;                                             // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B56[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_GetWeakTargetComponent_self_CastInput;    // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class USceneComponent*                        CallFunc_GetWeakTargetComponent_WeakComponent;     // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpDownVector_Out;                         // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitInterceptMove_Old) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InitInterceptMove_Old");
static_assert(sizeof(BP_Enemy_Weapon_C_InitInterceptMove_Old) == 0x0000E0, "Wrong size on BP_Enemy_Weapon_C_InitInterceptMove_Old");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, Attacker) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::Attacker' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, Param_Target) == 0x000008, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::Param_Target' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, L_HomingMagnitude) == 0x000010, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::L_HomingMagnitude' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, L_AdjustAngle) == 0x000014, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::L_AdjustAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, L_Speed) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::L_Speed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, L_InitVelocity) == 0x00001C, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::L_InitVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, L_Dir) == 0x000028, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::L_Dir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000040, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00004C, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_RandomFloatInRange_ReturnValue) == 0x000058, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_RotateAngleAxis_ReturnValue) == 0x000068, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_FindLookAtRotation_ReturnValue) == 0x000074, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000080, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_GetWeakTargetComponent_self_CastInput) == 0x000088, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_GetWeakTargetComponent_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_GetWeakTargetComponent_WeakComponent) == 0x000098, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_GetWeakTargetComponent_WeakComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_UpDownVector_Out) == 0x0000A0, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_UpDownVector_Out' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000AC, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0000B8, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C4, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove_Old, CallFunc_Normal_ReturnValue) == 0x0000D0, "Member 'BP_Enemy_Weapon_C_InitInterceptMove_Old::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GetAttackCollisionPrimitive
// 0x0018 (0x0018 - 0x0000)
struct BP_Enemy_Weapon_C_GetAttackCollisionPrimitive final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B57[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_GetAttackCollisionPrimitive) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_GetAttackCollisionPrimitive");
static_assert(sizeof(BP_Enemy_Weapon_C_GetAttackCollisionPrimitive) == 0x000018, "Wrong size on BP_Enemy_Weapon_C_GetAttackCollisionPrimitive");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackCollisionPrimitive, Primitive) == 0x000000, "Member 'BP_Enemy_Weapon_C_GetAttackCollisionPrimitive::Primitive' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackCollisionPrimitive, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x000008, "Member 'BP_Enemy_Weapon_C_GetAttackCollisionPrimitive::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackCollisionPrimitive, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_GetAttackCollisionPrimitive::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateTimer
// 0x0018 (0x0018 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateTimer final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateLifeTimeNative_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishWeapon_Dummy;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B58[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartVanishEffect_Dummy;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateTimer) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_UpdateTimer");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateTimer) == 0x000018, "Wrong size on BP_Enemy_Weapon_C_UpdateTimer");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateTimer, DeltaTime) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateTimer::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateTimer, CallFunc_UpdateLifeTimeNative_ReturnValue) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateTimer::CallFunc_UpdateLifeTimeNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateTimer, CallFunc_FinishWeapon_Dummy) == 0x000005, "Member 'BP_Enemy_Weapon_C_UpdateTimer::CallFunc_FinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateTimer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_Enemy_Weapon_C_UpdateTimer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateTimer, CallFunc_StartVanishEffect_Dummy) == 0x000014, "Member 'BP_Enemy_Weapon_C_UpdateTimer::CallFunc_StartVanishEffect_Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.ProjectileHitProcess
// 0x0060 (0x0060 - 0x0000)
struct BP_Enemy_Weapon_C_ProjectileHitProcess final
{
public:
	bool                                          IsHitPlayer;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B59[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_Location;                                        // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitFloorNative_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5B[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5C[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue_1;               // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_ProjectileHitProcess) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_ProjectileHitProcess");
static_assert(sizeof(BP_Enemy_Weapon_C_ProjectileHitProcess) == 0x000060, "Wrong size on BP_Enemy_Weapon_C_ProjectileHitProcess");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, IsHitPlayer) == 0x000000, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::IsHitPlayer' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, HitLocation) == 0x000004, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, HitNormal) == 0x000010, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, NewParam) == 0x00001C, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, L_Location) == 0x000020, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::L_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, L_Distance) == 0x00002C, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::L_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_IsHitFloorNative_ReturnValue) == 0x000030, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_IsHitFloorNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_MakeRotFromZ_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_MakeRotFromZ_ReturnValue_1) == 0x00004C, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_MakeRotFromZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000058, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateCustomMove
// 0x0008 (0x0008 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateCustomMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateCustomMove) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_UpdateCustomMove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateCustomMove) == 0x000008, "Wrong size on BP_Enemy_Weapon_C_UpdateCustomMove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCustomMove, DeltaTime) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateCustomMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateCustomMove, Return) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateCustomMove::Return' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitCustomMove
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_InitCustomMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitCustomMove) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_InitCustomMove");
static_assert(sizeof(BP_Enemy_Weapon_C_InitCustomMove) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_InitCustomMove");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCustomMove, Return) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitCustomMove::Return' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.CorrectBulletDirection
// 0x02F8 (0x02F8 - 0x0000)
struct BP_Enemy_Weapon_C_CorrectBulletDirection final
{
public:
	struct FVector                                FireLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_TargetLocation;                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FireForwardVector;                                 // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AbsoluteAngleZ;                                    // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngleZ;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutDirection;                                      // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAngleAlpha;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LTargetVector;                                     // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDistanceAdjustAngle;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LLimitHeightAngle;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LUP;                                               // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5D[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LDstZ;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LSrcZ;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LWorkDstVector;                                    // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LWorkSrcVector;                                    // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LOutDirection;                                     // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LAxis;                                             // 0x0084(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDstVector;                                        // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LSrcVector;                                        // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5E[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5F[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle_1;         // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B60[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_6;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpDownVector_Out;                         // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_8;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_8;                          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_8;                          // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_9;                          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_9;                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_9;                          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_10;                         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_10;                         // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_10;                         // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_11;                         // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_11;                         // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_11;                         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_12;                         // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_12;                         // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_12;                         // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle_2;         // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B61[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_13;                         // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_13;                         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_13;                         // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_14;                         // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_14;                         // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_14;                         // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpDownVector_Out_1;                       // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_15;                         // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_15;                         // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_15;                         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_16;                         // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_16;                         // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_16;                         // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B62[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle_3;         // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_4;       // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B63[0x3];                                     // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_UpDownVector_Out_2;                       // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_5;       // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B64[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_3;                      // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_6;       // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B65[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue_4;                      // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_7;       // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B66[0x3];                                     // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_17;                         // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_17;                         // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_17;                         // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_7;                 // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B67[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBulletDirection_BulletDirection;       // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpDownVector_Out_3;                       // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_CorrectBulletDirection) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_CorrectBulletDirection");
static_assert(sizeof(BP_Enemy_Weapon_C_CorrectBulletDirection) == 0x0002F8, "Wrong size on BP_Enemy_Weapon_C_CorrectBulletDirection");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, FireLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::FireLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, Param_TargetLocation) == 0x00000C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::Param_TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, FireForwardVector) == 0x000018, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::FireForwardVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, AbsoluteAngleZ) == 0x000024, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::AbsoluteAngleZ' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, MaxAngleZ) == 0x000028, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::MaxAngleZ' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, Speed) == 0x00002C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::Speed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, OutDirection) == 0x000030, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::OutDirection' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LAngleAlpha) == 0x00003C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LAngleAlpha' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LTargetVector) == 0x000040, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LTargetVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LDistanceAdjustAngle) == 0x00004C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LDistanceAdjustAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LLimitHeightAngle) == 0x000050, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LLimitHeightAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LUP) == 0x000054, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LUP' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LDstZ) == 0x000058, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LDstZ' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LSrcZ) == 0x00005C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LSrcZ' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LWorkDstVector) == 0x000060, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LWorkDstVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LWorkSrcVector) == 0x00006C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LWorkSrcVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LOutDirection) == 0x000078, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LOutDirection' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LAxis) == 0x000084, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LAxis' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LDstVector) == 0x000090, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LDstVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, LSrcVector) == 0x00009C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::LSrcVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_VSize_ReturnValue) == 0x0000A8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_VSize_ReturnValue_1) == 0x0000AC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000B4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_FClamp_ReturnValue) == 0x0000BC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X) == 0x0000C0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y) == 0x0000C4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z) == 0x0000C8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_1) == 0x0000CC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_1) == 0x0000D0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_1) == 0x0000D4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_2) == 0x0000D8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_2) == 0x0000DC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_2) == 0x0000E0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue) == 0x0000E4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_GetTargetRangeAngle_RangeAngle) == 0x0000F0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_GetTargetRangeAngle_RangeAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000F4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000F8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_3) == 0x000104, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_3) == 0x000108, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_3) == 0x00010C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_1) == 0x000110, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_4) == 0x00011C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_4) == 0x000120, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_4) == 0x000124, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_5) == 0x000128, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_5) == 0x00012C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_5) == 0x000130, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_2) == 0x000134, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_GetTargetRangeAngle_RangeAngle_1) == 0x000140, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_GetTargetRangeAngle_RangeAngle_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000144, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_6) == 0x000148, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_6) == 0x00014C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_6) == 0x000150, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Normal_ReturnValue) == 0x000154, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_7) == 0x000160, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_7) == 0x000164, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_7) == 0x000168, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_3) == 0x00016C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Lerp_ReturnValue) == 0x000178, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_UpDownVector_Out) == 0x00017C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_UpDownVector_Out' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_8) == 0x000188, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_8) == 0x00018C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_8) == 0x000190, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_9) == 0x000194, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_9' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_9) == 0x000198, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_9' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_9) == 0x00019C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_9' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_10) == 0x0001A0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_10' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_10) == 0x0001A4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_10' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_10) == 0x0001A8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_10' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_4) == 0x0001AC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_11) == 0x0001B8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_11' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_11) == 0x0001BC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_11' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_11) == 0x0001C0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_11' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_12) == 0x0001C4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_12' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_12) == 0x0001C8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_12' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_12) == 0x0001CC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_12' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_5) == 0x0001D0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_GetTargetRangeAngle_RangeAngle_2) == 0x0001DC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_GetTargetRangeAngle_RangeAngle_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x0001E0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_13) == 0x0001E4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_13' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_13) == 0x0001E8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_13' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_13) == 0x0001EC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_13' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Normal_ReturnValue_1) == 0x0001F0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_14) == 0x0001FC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_14' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_14) == 0x000200, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_14' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_14) == 0x000204, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_14' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_6) == 0x000208, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_UpDownVector_Out_1) == 0x000214, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_UpDownVector_Out_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000220, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_15) == 0x00022C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_15' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_15) == 0x000230, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_15' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_15) == 0x000234, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_15' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_16) == 0x000238, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_16' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_16) == 0x00023C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_16' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_16) == 0x000240, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_16' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x000244, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_GetTargetRangeAngle_RangeAngle_3) == 0x000248, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_GetTargetRangeAngle_RangeAngle_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_4) == 0x00024C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_UpDownVector_Out_2) == 0x000250, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_UpDownVector_Out_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00025C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_VSize_ReturnValue_2) == 0x000268, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_5) == 0x00026C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x000270, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x00027C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_VSize_ReturnValue_3) == 0x000288, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_VSize_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_6) == 0x00028C, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_VSize_ReturnValue_4) == 0x000290, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_VSize_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_LessEqual_FloatFloat_ReturnValue_7) == 0x000294, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_LessEqual_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Normal_ReturnValue_2) == 0x000298, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x0002A4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_X_17) == 0x0002B0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_X_17' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Y_17) == 0x0002B4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Y_17' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_BreakVector_Z_17) == 0x0002B8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_BreakVector_Z_17' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_MakeVector_ReturnValue_7) == 0x0002BC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_MakeVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, K2Node_DynamicCast_AsRSBattle_Character) == 0x0002C8, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, K2Node_DynamicCast_bSuccess) == 0x0002D0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_GetBulletDirection_BulletDirection) == 0x0002D4, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_GetBulletDirection_BulletDirection' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002E0, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CorrectBulletDirection, CallFunc_UpDownVector_Out_3) == 0x0002EC, "Member 'BP_Enemy_Weapon_C_CorrectBulletDirection::CallFunc_UpDownVector_Out_3' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitHomingProjectileMove
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Enemy_Weapon_C_InitHomingProjectileMove final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_TargetLocation;                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardVec;                                        // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngle;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingStartDis;                                    // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingMagunitude;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B68[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   TargetActor;                                       // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CorrectBulletDirection_OutDirection;      // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B69[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B6A[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitHomingProjectileMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InitHomingProjectileMove");
static_assert(sizeof(BP_Enemy_Weapon_C_InitHomingProjectileMove) == 0x0000A0, "Wrong size on BP_Enemy_Weapon_C_InitHomingProjectileMove");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, StartLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, Param_TargetLocation) == 0x00000C, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::Param_TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, ForwardVec) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::ForwardVec' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, Speed) == 0x000024, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::Speed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, Angle) == 0x000028, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::Angle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, MaxAngle) == 0x00002C, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::MaxAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, GravityScale) == 0x000030, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::GravityScale' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, HomingStartDis) == 0x000034, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::HomingStartDis' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, HomingMagunitude) == 0x000038, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::HomingMagunitude' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, TargetActor) == 0x000040, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_GetActorForwardVector_ReturnValue) == 0x000048, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000054, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000064, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_CorrectBulletDirection_OutDirection) == 0x000068, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_CorrectBulletDirection_OutDirection' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00007C, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000088, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_VSize_ReturnValue) == 0x000090, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_IsValid_ReturnValue_1) == 0x000094, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000098, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingProjectileMove, CallFunc_IsValid_ReturnValue_2) == 0x00009C, "Member 'BP_Enemy_Weapon_C_InitHomingProjectileMove::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateHomingMove
// 0x03E8 (0x03E8 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateHomingMove final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B6B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LTarget;                                           // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B6C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitLineCheck_IsAnyHit;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B6D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_IsHitLineCheck_HitResult;                 // 0x0028(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B6E[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0138(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GravityHitProcess_Dummy;                  // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B6F[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B70[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHomingCutDistance_IsCut;                // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0206(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B71[0x1];                                     // 0x0207(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x021C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B72[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B73[0x3];                                     // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_2;        // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B74[0x3];                                     // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_3;        // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B75[0x3];                                     // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle;           // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B76[0x3];                                     // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateHomingMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_UpdateHomingMove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateHomingMove) == 0x0003E8, "Wrong size on BP_Enemy_Weapon_C_UpdateHomingMove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, DeltaSeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, Dummy) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, LTarget) == 0x000008, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::LTarget' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_IsHitLineCheck_IsAnyHit) == 0x000024, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_IsHitLineCheck_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_IsHitLineCheck_HitResult) == 0x000028, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_IsHitLineCheck_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000B0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_bBlockingHit) == 0x0000BC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000BD, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_Time) == 0x0000C0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_Distance) == 0x0000C4, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_Location) == 0x0000C8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D4, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_Normal) == 0x0000E0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_ImpactNormal) == 0x0000EC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_HitItem) == 0x000118, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_FaceIndex) == 0x00011C, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_TraceStart) == 0x000120, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_BreakHitResult_TraceEnd) == 0x00012C, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000138, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_GravityHitProcess_Dummy) == 0x0001C0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_GravityHitProcess_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0001C4, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001D0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0001DC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0001E8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_GetForwardVector_ReturnValue) == 0x0001EC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0001F8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_IsHomingCutDistance_IsCut) == 0x000204, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_IsHomingCutDistance_IsCut' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_IsValid_ReturnValue_1) == 0x000205, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000206, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000208, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x00020C, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_VEase_ReturnValue) == 0x000210, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_VEase_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00021C, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0002A4, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x0002A8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_GetForwardVector_ReturnValue_1) == 0x0002B4, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0002C0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002CC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x0002D8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000360, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_IsValid_ReturnValue_2) == 0x00036C, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000370, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x00037C, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorRotation_ReturnValue_2) == 0x000388, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000394, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_RInterpTo_ReturnValue) == 0x0003A0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0003AC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x0003B8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_K2_GetActorRotation_ReturnValue_3) == 0x0003BC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_K2_GetActorRotation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_GetForwardVector_ReturnValue_2) == 0x0003C8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, K2Node_SwitchInteger_CmpSuccess) == 0x0003D4, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_GetTargetRangeAngle_RangeAngle) == 0x0003D8, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_GetTargetRangeAngle_RangeAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0003DC, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateHomingMove, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0003E0, "Member 'BP_Enemy_Weapon_C_UpdateHomingMove::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitHomingMove
// 0x0040 (0x0040 - 0x0000)
struct BP_Enemy_Weapon_C_InitHomingMove final
{
public:
	struct FVector                                ReadyStart;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReadyEnd;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B77[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitHomingMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InitHomingMove");
static_assert(sizeof(BP_Enemy_Weapon_C_InitHomingMove) == 0x000040, "Wrong size on BP_Enemy_Weapon_C_InitHomingMove");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingMove, ReadyStart) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitHomingMove::ReadyStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingMove, ReadyEnd) == 0x00000C, "Member 'BP_Enemy_Weapon_C_InitHomingMove::ReadyEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitHomingMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingMove, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_Enemy_Weapon_C_InitHomingMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingMove, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000028, "Member 'BP_Enemy_Weapon_C_InitHomingMove::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitHomingMove, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000030, "Member 'BP_Enemy_Weapon_C_InitHomingMove::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.StartVanishEffect
// 0x0040 (0x0040 - 0x0000)
struct BP_Enemy_Weapon_C_StartVanishEffect final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B78[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LRotation;                                         // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B79[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_StartVanishEffect) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_StartVanishEffect");
static_assert(sizeof(BP_Enemy_Weapon_C_StartVanishEffect) == 0x000040, "Wrong size on BP_Enemy_Weapon_C_StartVanishEffect");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, HitLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, HitNormal) == 0x00000C, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, Dummy) == 0x000018, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, LRotation) == 0x00001C, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::LRotation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, CallFunc_MakeRotFromZ_ReturnValue) == 0x00002C, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_StartVanishEffect, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000038, "Member 'BP_Enemy_Weapon_C_StartVanishEffect::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.SetWeaponActivate
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_SetWeaponActivate final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_SetWeaponActivate) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_SetWeaponActivate");
static_assert(sizeof(BP_Enemy_Weapon_C_SetWeaponActivate) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_SetWeaponActivate");
static_assert(offsetof(BP_Enemy_Weapon_C_SetWeaponActivate, bActive) == 0x000000, "Member 'BP_Enemy_Weapon_C_SetWeaponActivate::bActive' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetWeaponActivate, Dummy) == 0x000001, "Member 'BP_Enemy_Weapon_C_SetWeaponActivate::Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitVariable
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_InitVariable final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitVariable) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_InitVariable");
static_assert(sizeof(BP_Enemy_Weapon_C_InitVariable) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_InitVariable");
static_assert(offsetof(BP_Enemy_Weapon_C_InitVariable, Dummy) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitVariable::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitVariable, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_Enemy_Weapon_C_InitVariable::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitWeapon
// 0x0004 (0x0004 - 0x0000)
struct BP_Enemy_Weapon_C_InitWeapon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponVisibility_Dummy;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InitVariable_Dummy;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponActivate_Dummy;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitWeapon) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_InitWeapon");
static_assert(sizeof(BP_Enemy_Weapon_C_InitWeapon) == 0x000004, "Wrong size on BP_Enemy_Weapon_C_InitWeapon");
static_assert(offsetof(BP_Enemy_Weapon_C_InitWeapon, Dummy) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitWeapon::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitWeapon, CallFunc_SetWeaponVisibility_Dummy) == 0x000001, "Member 'BP_Enemy_Weapon_C_InitWeapon::CallFunc_SetWeaponVisibility_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitWeapon, CallFunc_InitVariable_Dummy) == 0x000002, "Member 'BP_Enemy_Weapon_C_InitWeapon::CallFunc_InitVariable_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitWeapon, CallFunc_SetWeaponActivate_Dummy) == 0x000003, "Member 'BP_Enemy_Weapon_C_InitWeapon::CallFunc_SetWeaponActivate_Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.FinishWeapon
// 0x0003 (0x0003 - 0x0000)
struct BP_Enemy_Weapon_C_FinishWeapon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponVisibility_Dummy;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponActivate_Dummy;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_FinishWeapon) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_FinishWeapon");
static_assert(sizeof(BP_Enemy_Weapon_C_FinishWeapon) == 0x000003, "Wrong size on BP_Enemy_Weapon_C_FinishWeapon");
static_assert(offsetof(BP_Enemy_Weapon_C_FinishWeapon, Dummy) == 0x000000, "Member 'BP_Enemy_Weapon_C_FinishWeapon::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_FinishWeapon, CallFunc_SetWeaponVisibility_Dummy) == 0x000001, "Member 'BP_Enemy_Weapon_C_FinishWeapon::CallFunc_SetWeaponVisibility_Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_FinishWeapon, CallFunc_SetWeaponActivate_Dummy) == 0x000002, "Member 'BP_Enemy_Weapon_C_FinishWeapon::CallFunc_SetWeaponActivate_Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.SetWeaponVisibility
// 0x0003 (0x0003 - 0x0000)
struct BP_Enemy_Weapon_C_SetWeaponVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponVisibilityNative_ReturnValue;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_SetWeaponVisibility) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_SetWeaponVisibility");
static_assert(sizeof(BP_Enemy_Weapon_C_SetWeaponVisibility) == 0x000003, "Wrong size on BP_Enemy_Weapon_C_SetWeaponVisibility");
static_assert(offsetof(BP_Enemy_Weapon_C_SetWeaponVisibility, bVisible) == 0x000000, "Member 'BP_Enemy_Weapon_C_SetWeaponVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetWeaponVisibility, Dummy) == 0x000001, "Member 'BP_Enemy_Weapon_C_SetWeaponVisibility::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_SetWeaponVisibility, CallFunc_SetWeaponVisibilityNative_ReturnValue) == 0x000002, "Member 'BP_Enemy_Weapon_C_SetWeaponVisibility::CallFunc_SetWeaponVisibilityNative_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsHitFloor
// 0x0020 (0x0020 - 0x0000)
struct BP_Enemy_Weapon_C_IsHitFloor final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B7A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitFloorNative_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsHitFloor) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_IsHitFloor");
static_assert(sizeof(BP_Enemy_Weapon_C_IsHitFloor) == 0x000020, "Wrong size on BP_Enemy_Weapon_C_IsHitFloor");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitFloor, Normal) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsHitFloor::Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitFloor, ReturnValue) == 0x00000C, "Member 'BP_Enemy_Weapon_C_IsHitFloor::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitFloor, Primitive) == 0x000010, "Member 'BP_Enemy_Weapon_C_IsHitFloor::Primitive' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitFloor, CallFunc_IsHitFloorNative_ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_IsHitFloor::CallFunc_IsHitFloorNative_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitProjectileMoveSimple
// 0x004C (0x004C - 0x0000)
struct BP_Enemy_Weapon_C_InitProjectileMoveSimple final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_InitVelocity;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Dir;                                             // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitProjectileMoveSimple) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_InitProjectileMoveSimple");
static_assert(sizeof(BP_Enemy_Weapon_C_InitProjectileMoveSimple) == 0x00004C, "Wrong size on BP_Enemy_Weapon_C_InitProjectileMoveSimple");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, Location) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, Velocity) == 0x00000C, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::Velocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, GravityScale) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::GravityScale' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, L_InitVelocity) == 0x00001C, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::L_InitVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, L_Dir) == 0x000028, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::L_Dir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitProjectileMoveSimple, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_InitProjectileMoveSimple::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.PlayHitSound
// 0x0010 (0x0010 - 0x0000)
struct BP_Enemy_Weapon_C_PlayHitSound final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWall;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_PlayHitSound) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_PlayHitSound");
static_assert(sizeof(BP_Enemy_Weapon_C_PlayHitSound) == 0x000010, "Wrong size on BP_Enemy_Weapon_C_PlayHitSound");
static_assert(offsetof(BP_Enemy_Weapon_C_PlayHitSound, Location) == 0x000000, "Member 'BP_Enemy_Weapon_C_PlayHitSound::Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_PlayHitSound, IsWall) == 0x00000C, "Member 'BP_Enemy_Weapon_C_PlayHitSound::IsWall' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitCommonMoveWithGravity
// 0x0024 (0x0024 - 0x0000)
struct BP_Enemy_Weapon_C_InitCommonMoveWithGravity final
{
public:
	struct FVector                                InitPos;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDir;                                           // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Gravity;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoTargetMove;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_InitCommonMoveWithGravity");
static_assert(sizeof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity) == 0x000024, "Wrong size on BP_Enemy_Weapon_C_InitCommonMoveWithGravity");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity, InitPos) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitCommonMoveWithGravity::InitPos' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity, MoveDir) == 0x00000C, "Member 'BP_Enemy_Weapon_C_InitCommonMoveWithGravity::MoveDir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity, MoveSpeed) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitCommonMoveWithGravity::MoveSpeed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity, Param_Gravity) == 0x00001C, "Member 'BP_Enemy_Weapon_C_InitCommonMoveWithGravity::Param_Gravity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitCommonMoveWithGravity, NoTargetMove) == 0x000020, "Member 'BP_Enemy_Weapon_C_InitCommonMoveWithGravity::NoTargetMove' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsHomingCutDistance
// 0x0038 (0x0038 - 0x0000)
struct BP_Enemy_Weapon_C_IsHomingCutDistance final
{
public:
	struct FVector                                Param_TargetLocation;                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCut;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bCut;                                            // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B7B[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Square_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B7C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsHomingCutDistance) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_IsHomingCutDistance");
static_assert(sizeof(BP_Enemy_Weapon_C_IsHomingCutDistance) == 0x000038, "Wrong size on BP_Enemy_Weapon_C_IsHomingCutDistance");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, Param_TargetLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::Param_TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, IsCut) == 0x00000C, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::IsCut' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, L_bCut) == 0x00000D, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::L_bCut' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, CallFunc_Square_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, CallFunc_VSizeSquared_ReturnValue) == 0x000030, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHomingCutDistance, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_IsHomingCutDistance::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.StopHomingSe
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_StopHomingSe final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_StopHomingSe) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_StopHomingSe");
static_assert(sizeof(BP_Enemy_Weapon_C_StopHomingSe) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_StopHomingSe");
static_assert(offsetof(BP_Enemy_Weapon_C_StopHomingSe, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Enemy_Weapon_C_StopHomingSe::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateInterceptReserve
// 0x0008 (0x0008 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateInterceptReserve final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateInterceptReserve) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_UpdateInterceptReserve");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateInterceptReserve) == 0x000008, "Wrong size on BP_Enemy_Weapon_C_UpdateInterceptReserve");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptReserve, DeltaSeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateInterceptReserve::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptReserve, Dummy) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateInterceptReserve::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptReserve, CallFunc_IsOver_ReturnValue) == 0x000005, "Member 'BP_Enemy_Weapon_C_UpdateInterceptReserve::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.CheckHomingEnd
// 0x0090 (0x0090 - 0x0000)
struct BP_Enemy_Weapon_C_CheckHomingEnd final
{
public:
	bool                                          LEndHoming;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B7D[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B7E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCompleteTelepoDisappear_bComplete;      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B7F[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B80[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B81[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B82[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverTarget_IsOver;                      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B83[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_CheckHomingEnd) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_CheckHomingEnd");
static_assert(sizeof(BP_Enemy_Weapon_C_CheckHomingEnd) == 0x000090, "Wrong size on BP_Enemy_Weapon_C_CheckHomingEnd");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, LEndHoming) == 0x000000, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::LEndHoming' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsValid_ReturnValue_2) == 0x000010, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, K2Node_DynamicCast_AsRSBattle_Player) == 0x000018, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsStealthMode_ReturnValue) == 0x000021, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsCompleteTelepoDisappear_bComplete) == 0x000022, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsCompleteTelepoDisappear_bComplete' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsValid_ReturnValue_3) == 0x000030, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_GetMainPlayer_Player) == 0x000038, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000040, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsValid_ReturnValue_4) == 0x000051, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_GetAccelerating_Accelerating) == 0x000052, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000053, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsValid_ReturnValue_5) == 0x000065, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000068, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_IsOverTarget_IsOver) == 0x000074, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_IsOverTarget_IsOver' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_VSize_ReturnValue) == 0x000084, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_CheckHomingEnd, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_Enemy_Weapon_C_CheckHomingEnd::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.EndCustomMove
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_EndCustomMove final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_EndCustomMove) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_EndCustomMove");
static_assert(sizeof(BP_Enemy_Weapon_C_EndCustomMove) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_EndCustomMove");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCustomMove, bForce) == 0x000000, "Member 'BP_Enemy_Weapon_C_EndCustomMove::bForce' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_EndCustomMove, Dummy) == 0x000001, "Member 'BP_Enemy_Weapon_C_EndCustomMove::Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.CancelAllEffect
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_CancelAllEffect final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_CancelAllEffect) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_CancelAllEffect");
static_assert(sizeof(BP_Enemy_Weapon_C_CancelAllEffect) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_CancelAllEffect");
static_assert(offsetof(BP_Enemy_Weapon_C_CancelAllEffect, bDummy) == 0x000000, "Member 'BP_Enemy_Weapon_C_CancelAllEffect::bDummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.OnHitProjectileWall
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_OnHitProjectileWall final
{
public:
	bool                                          IsWall;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFloor;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_OnHitProjectileWall) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_OnHitProjectileWall");
static_assert(sizeof(BP_Enemy_Weapon_C_OnHitProjectileWall) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_OnHitProjectileWall");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitProjectileWall, IsWall) == 0x000000, "Member 'BP_Enemy_Weapon_C_OnHitProjectileWall::IsWall' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_OnHitProjectileWall, IsFloor) == 0x000001, "Member 'BP_Enemy_Weapon_C_OnHitProjectileWall::IsFloor' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateInterceptMove
// 0x02B0 (0x02B0 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateInterceptMove final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B84[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_MoveVector;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B85[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B86[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B87[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetWeakTargetPoint_Point;                 // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B88[0xC];                                     // 0x00E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00F0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitLineCheck_IsAnyHit;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B89[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_IsHitLineCheck_HitResult;                 // 0x0184(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_TurnToTargetRotation_NewRotate;           // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B8A[0x2];                                     // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B8B[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0268(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ProjectileHitProcess_NewParam;            // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B8C[0x2];                                     // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateInterceptMove) == 0x000010, "Wrong alignment on BP_Enemy_Weapon_C_UpdateInterceptMove");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateInterceptMove) == 0x0002B0, "Wrong size on BP_Enemy_Weapon_C_UpdateInterceptMove");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, DeltaSeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, bDummy) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::bDummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, L_MoveVector) == 0x000008, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::L_MoveVector' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000014, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00009C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0000B8, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_IsValid_ReturnValue) == 0x0000C9, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_GetWeakTargetPoint_Point) == 0x0000CC, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_GetWeakTargetPoint_Point' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000D8, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_GetTransform_ReturnValue) == 0x0000F0, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_GetForwardVector_ReturnValue) == 0x000120, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakTransform_Location) == 0x00012C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakTransform_Rotation) == 0x000138, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakTransform_Scale) == 0x000144, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000150, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_GetForwardVector_ReturnValue_1) == 0x00015C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000168, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_FindLookAtRotation_ReturnValue) == 0x000174, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_IsHitLineCheck_IsAnyHit) == 0x000180, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_IsHitLineCheck_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_IsHitLineCheck_HitResult) == 0x000184, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_IsHitLineCheck_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_TurnToTargetRotation_NewRotate) == 0x00020C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_TurnToTargetRotation_NewRotate' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_bBlockingHit) == 0x000218, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_bInitialOverlap) == 0x000219, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_Time) == 0x00021C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_Distance) == 0x000220, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_Location) == 0x000224, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_ImpactPoint) == 0x000230, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_Normal) == 0x00023C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_ImpactNormal) == 0x000248, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_PhysMat) == 0x000258, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_HitActor) == 0x000260, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_HitComponent) == 0x000268, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_HitBoneName) == 0x000270, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_HitItem) == 0x000278, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_FaceIndex) == 0x00027C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_TraceStart) == 0x000280, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_BreakHitResult_TraceEnd) == 0x00028C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000298, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_ProjectileHitProcess_NewParam) == 0x000299, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_ProjectileHitProcess_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00029C, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateInterceptMove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0002A0, "Member 'BP_Enemy_Weapon_C_UpdateInterceptMove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitInterceptMove
// 0x0078 (0x0078 - 0x0000)
struct BP_Enemy_Weapon_C_InitInterceptMove final
{
public:
	class ARSBattleCharacter_C*                   Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   Param_Target;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_HomingMagnitude;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_AdjustAngle;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Speed;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_InitVelocity;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Dir;                                             // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B8D[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B8E[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWeakTargetPoint_Point;                 // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitInterceptMove) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InitInterceptMove");
static_assert(sizeof(BP_Enemy_Weapon_C_InitInterceptMove) == 0x000078, "Wrong size on BP_Enemy_Weapon_C_InitInterceptMove");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, Attacker) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::Attacker' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, Param_Target) == 0x000008, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::Param_Target' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, L_HomingMagnitude) == 0x000010, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::L_HomingMagnitude' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, L_AdjustAngle) == 0x000014, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::L_AdjustAngle' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, L_Speed) == 0x000018, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::L_Speed' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, L_InitVelocity) == 0x00001C, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::L_InitVelocity' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, L_Dir) == 0x000028, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::L_Dir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000038, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00004C, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, CallFunc_GetWeakTargetPoint_Point) == 0x000058, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::CallFunc_GetWeakTargetPoint_Point' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, CallFunc_FindLookAtRotation_ReturnValue) == 0x000064, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InitInterceptMove, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000070, "Member 'BP_Enemy_Weapon_C_InitInterceptMove::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InitializePhysicsCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_InitializePhysicsCollision final
{
public:
	ECollisionEnabled                             LCollisionType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_InitializePhysicsCollision) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_InitializePhysicsCollision");
static_assert(sizeof(BP_Enemy_Weapon_C_InitializePhysicsCollision) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_InitializePhysicsCollision");
static_assert(offsetof(BP_Enemy_Weapon_C_InitializePhysicsCollision, LCollisionType) == 0x000000, "Member 'BP_Enemy_Weapon_C_InitializePhysicsCollision::LCollisionType' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.HitPhysicsCollision
// 0x000C (0x000C - 0x0000)
struct BP_Enemy_Weapon_C_HitPhysicsCollision final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_HitPhysicsCollision) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_HitPhysicsCollision");
static_assert(sizeof(BP_Enemy_Weapon_C_HitPhysicsCollision) == 0x00000C, "Wrong size on BP_Enemy_Weapon_C_HitPhysicsCollision");
static_assert(offsetof(BP_Enemy_Weapon_C_HitPhysicsCollision, HitLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_HitPhysicsCollision::HitLocation' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsHitPhysicsCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_IsHitPhysicsCollision final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsHitPhysicsCollision) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_IsHitPhysicsCollision");
static_assert(sizeof(BP_Enemy_Weapon_C_IsHitPhysicsCollision) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_IsHitPhysicsCollision");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitPhysicsCollision, bHit) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsHitPhysicsCollision::bHit' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdatePhysicsCollision
// 0x0030 (0x0030 - 0x0000)
struct BP_Enemy_Weapon_C_UpdatePhysicsCollision final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LRotation;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                LLocation;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRadius;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHalfHeight;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B8F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    LAttackCollision;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdatePhysicsCollision) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_UpdatePhysicsCollision");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdatePhysicsCollision) == 0x000030, "Wrong size on BP_Enemy_Weapon_C_UpdatePhysicsCollision");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdatePhysicsCollision, DeltaSec) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdatePhysicsCollision::DeltaSec' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdatePhysicsCollision, LRotation) == 0x000004, "Member 'BP_Enemy_Weapon_C_UpdatePhysicsCollision::LRotation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdatePhysicsCollision, LLocation) == 0x000010, "Member 'BP_Enemy_Weapon_C_UpdatePhysicsCollision::LLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdatePhysicsCollision, LRadius) == 0x00001C, "Member 'BP_Enemy_Weapon_C_UpdatePhysicsCollision::LRadius' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdatePhysicsCollision, LHalfHeight) == 0x000020, "Member 'BP_Enemy_Weapon_C_UpdatePhysicsCollision::LHalfHeight' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdatePhysicsCollision, LAttackCollision) == 0x000028, "Member 'BP_Enemy_Weapon_C_UpdatePhysicsCollision::LAttackCollision' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.EndPhysicsCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_EndPhysicsCollision final
{
public:
	ECollisionEnabled                             LCollisionType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_EndPhysicsCollision) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_EndPhysicsCollision");
static_assert(sizeof(BP_Enemy_Weapon_C_EndPhysicsCollision) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_EndPhysicsCollision");
static_assert(offsetof(BP_Enemy_Weapon_C_EndPhysicsCollision, LCollisionType) == 0x000000, "Member 'BP_Enemy_Weapon_C_EndPhysicsCollision::LCollisionType' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsHitLineCheckForObjects
// 0x0278 (0x0278 - 0x0000)
struct BP_Enemy_Weapon_C_IsHitLineCheckForObjects final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Param_IsAnyHit;                                    // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B90[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x003C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             LHitResult;                                        // 0x00C4(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          LIsAnyHit;                                         // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B91[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0150(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B92[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x01E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsHitPhysicsCollision_bHit;               // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_IsHitLineCheckForObjects");
static_assert(sizeof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects) == 0x000278, "Wrong size on BP_Enemy_Weapon_C_IsHitLineCheckForObjects");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, StartLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, EndLocation) == 0x00000C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, ObjectTypes) == 0x000018, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, ActorsToIgnore) == 0x000028, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, Param_IsAnyHit) == 0x000038, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::Param_IsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, HitResult) == 0x00003C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, LHitResult) == 0x0000C4, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::LHitResult' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, LIsAnyHit) == 0x00014C, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::LIsAnyHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000150, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001D8, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, CallFunc_GetActorForwardVector_ReturnValue) == 0x0001DC, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, CallFunc_MakeHitResult_ReturnValue) == 0x0001E8, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsHitLineCheckForObjects, CallFunc_IsHitPhysicsCollision_bHit) == 0x000270, "Member 'BP_Enemy_Weapon_C_IsHitLineCheckForObjects::CallFunc_IsHitPhysicsCollision_bHit' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.AddIgnoreJustDodge
// 0x0018 (0x0018 - 0x0000)
struct BP_Enemy_Weapon_C_AddIgnoreJustDodge final
{
public:
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B93[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_AddIgnoreJustDodge) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_AddIgnoreJustDodge");
static_assert(sizeof(BP_Enemy_Weapon_C_AddIgnoreJustDodge) == 0x000018, "Wrong size on BP_Enemy_Weapon_C_AddIgnoreJustDodge");
static_assert(offsetof(BP_Enemy_Weapon_C_AddIgnoreJustDodge, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x000000, "Member 'BP_Enemy_Weapon_C_AddIgnoreJustDodge::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_AddIgnoreJustDodge, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x000008, "Member 'BP_Enemy_Weapon_C_AddIgnoreJustDodge::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_AddIgnoreJustDodge, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_AddIgnoreJustDodge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_AddIgnoreJustDodge, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_Enemy_Weapon_C_AddIgnoreJustDodge::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.Set Ignore Just Dodge Seconds
// 0x0008 (0x0008 - 0x0000)
struct BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds final
{
public:
	float                                         DelaySeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds");
static_assert(sizeof(BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds) == 0x000008, "Wrong size on BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds");
static_assert(offsetof(BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds, DelaySeconds) == 0x000000, "Member 'BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds::DelaySeconds' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds, bDummy) == 0x000004, "Member 'BP_Enemy_Weapon_C_Set_Ignore_Just_Dodge_Seconds::bDummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GetAttackOwnerTargetCharaNative
// 0x0018 (0x0018 - 0x0000)
struct BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative");
static_assert(sizeof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative) == 0x000018, "Wrong size on BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative, ReturnValue) == 0x000000, "Member 'BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000008, "Member 'BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'BP_Enemy_Weapon_C_GetAttackOwnerTargetCharaNative::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.ProjectileHitProcess_FromNative
// 0x0060 (0x0060 - 0x0000)
struct BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative final
{
public:
	bool                                          IsHitPlayer;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B94[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B95[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue_1;               // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitFloorNative_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B96[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B97[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative");
static_assert(sizeof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative) == 0x000060, "Wrong size on BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, IsHitPlayer) == 0x000000, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::IsHitPlayer' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, HitLocation) == 0x000004, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, HitNormal) == 0x000010, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, ReturnValue) == 0x00001C, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_MakeRotFromZ_ReturnValue) == 0x000020, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_MakeRotFromZ_ReturnValue_1) == 0x00002C, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_MakeRotFromZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_IsHitFloorNative_ReturnValue) == 0x000038, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_IsHitFloorNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000050, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'BP_Enemy_Weapon_C_ProjectileHitProcess_FromNative::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GetHitCheckComponent_FromNative
// 0x0020 (0x0020 - 0x0000)
struct BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative final
{
public:
	class UHitCheckComponent*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B98[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitCheckComponent*                     CallFunc_GetHitCheckComponentFromActor_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative");
static_assert(sizeof(BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative) == 0x000020, "Wrong size on BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative, ReturnValue) == 0x000000, "Member 'BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative, CallFunc_GetHitManager_Manager) == 0x000008, "Member 'BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative, CallFunc_GetHitCheckComponentFromActor_ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_GetHitCheckComponent_FromNative::CallFunc_GetHitCheckComponentFromActor_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.HitAfterCurveMoveTarget_FromNative
// 0x001C (0x001C - 0x0000)
struct BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HitAfterCurveMoveTarget_Return;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative");
static_assert(sizeof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative) == 0x00001C, "Wrong size on BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative, HitLocation) == 0x000000, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative, HitNormal) == 0x00000C, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative, ReturnValue) == 0x000018, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative, CallFunc_HitAfterCurveMoveTarget_Return) == 0x000019, "Member 'BP_Enemy_Weapon_C_HitAfterCurveMoveTarget_FromNative::CallFunc_HitAfterCurveMoveTarget_Return' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsIntercept
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_IsIntercept final
{
public:
	bool                                          IsInterceptReserve;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsIntercept) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_IsIntercept");
static_assert(sizeof(BP_Enemy_Weapon_C_IsIntercept) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_IsIntercept");
static_assert(offsetof(BP_Enemy_Weapon_C_IsIntercept, IsInterceptReserve) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsIntercept::IsInterceptReserve' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsIntercept, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_Enemy_Weapon_C_IsIntercept::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.UpdateEmitterInstance
// 0x0010 (0x0010 - 0x0000)
struct BP_Enemy_Weapon_C_UpdateEmitterInstance final
{
public:
	class URSParticleSystemComponentBase*         NewEmitterInstance;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_UpdateEmitterInstance) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_UpdateEmitterInstance");
static_assert(sizeof(BP_Enemy_Weapon_C_UpdateEmitterInstance) == 0x000010, "Wrong size on BP_Enemy_Weapon_C_UpdateEmitterInstance");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateEmitterInstance, NewEmitterInstance) == 0x000000, "Member 'BP_Enemy_Weapon_C_UpdateEmitterInstance::NewEmitterInstance' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_UpdateEmitterInstance, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Enemy_Weapon_C_UpdateEmitterInstance::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InterceptAttack
// 0x01D8 (0x01D8 - 0x0000)
struct BP_Enemy_Weapon_C_InterceptAttack final
{
public:
	class ARSBattleCharacter_C*                   Intercepter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   NewTarget;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B99[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B9A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetInterceptAttackParam_bFind;            // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B9B[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionCommonInfo                 CallFunc_GetInterceptAttackParam_CommonInfo;       // 0x0048(0x0070)()
	struct FHCSkillCommonInfo                     CallFunc_GetInterceptAttackParam_SkillInfo;        // 0x00B8(0x00F0)()
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B9C[0x6];                                     // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere_1; // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B9D[0x7];                                     // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue_1; // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerActionForEnemyReaction_Dummy;       // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InterceptAttack) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InterceptAttack");
static_assert(sizeof(BP_Enemy_Weapon_C_InterceptAttack) == 0x0001D8, "Wrong size on BP_Enemy_Weapon_C_InterceptAttack");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, Intercepter) == 0x000000, "Member 'BP_Enemy_Weapon_C_InterceptAttack::Intercepter' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, NewTarget) == 0x000008, "Member 'BP_Enemy_Weapon_C_InterceptAttack::NewTarget' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, bDummy) == 0x000010, "Member 'BP_Enemy_Weapon_C_InterceptAttack::bDummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000018, "Member 'BP_Enemy_Weapon_C_InterceptAttack::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Enemy_Weapon_C_InterceptAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetHitManager_Manager) == 0x000030, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000038, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetInterceptAttackParam_bFind) == 0x000042, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetInterceptAttackParam_bFind' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetInterceptAttackParam_CommonInfo) == 0x000048, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetInterceptAttackParam_CommonInfo' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetInterceptAttackParam_SkillInfo) == 0x0000B8, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetInterceptAttackParam_SkillInfo' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_IsValid_ReturnValue_2) == 0x0001A8, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x0001A9, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x0001B0, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere_1) == 0x0001B8, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue_1) == 0x0001C0, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001C8, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptAttack, CallFunc_PlayerActionForEnemyReaction_Dummy) == 0x0001D4, "Member 'BP_Enemy_Weapon_C_InterceptAttack::CallFunc_PlayerActionForEnemyReaction_Dummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InterceptReserve
// 0x0018 (0x0018 - 0x0000)
struct BP_Enemy_Weapon_C_InterceptReserve final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAttackCollisionPrimitiveNative_IsSphere; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B9E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsCollisionEnabled_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InterceptReserve) == 0x000008, "Wrong alignment on BP_Enemy_Weapon_C_InterceptReserve");
static_assert(sizeof(BP_Enemy_Weapon_C_InterceptReserve) == 0x000018, "Wrong size on BP_Enemy_Weapon_C_InterceptReserve");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptReserve, bDummy) == 0x000000, "Member 'BP_Enemy_Weapon_C_InterceptReserve::bDummy' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptReserve, CallFunc_GetAttackCollisionPrimitiveNative_IsSphere) == 0x000001, "Member 'BP_Enemy_Weapon_C_InterceptReserve::CallFunc_GetAttackCollisionPrimitiveNative_IsSphere' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptReserve, CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue) == 0x000008, "Member 'BP_Enemy_Weapon_C_InterceptReserve::CallFunc_GetAttackCollisionPrimitiveNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptReserve, CallFunc_K2_IsCollisionEnabled_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_InterceptReserve::CallFunc_K2_IsCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptReserve, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_Enemy_Weapon_C_InterceptReserve::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.InterceptCancel
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_InterceptCancel final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_InterceptCancel) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_InterceptCancel");
static_assert(sizeof(BP_Enemy_Weapon_C_InterceptCancel) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_InterceptCancel");
static_assert(offsetof(BP_Enemy_Weapon_C_InterceptCancel, bDummy) == 0x000000, "Member 'BP_Enemy_Weapon_C_InterceptCancel::bDummy' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsInterceptFail
// 0x0002 (0x0002 - 0x0000)
struct BP_Enemy_Weapon_C_IsInterceptFail final
{
public:
	bool                                          bFail;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsInterceptFail) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_IsInterceptFail");
static_assert(sizeof(BP_Enemy_Weapon_C_IsInterceptFail) == 0x000002, "Wrong size on BP_Enemy_Weapon_C_IsInterceptFail");
static_assert(offsetof(BP_Enemy_Weapon_C_IsInterceptFail, bFail) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsInterceptFail::bFail' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsInterceptFail, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_Enemy_Weapon_C_IsInterceptFail::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.GetLocationForHitDirection
// 0x001C (0x001C - 0x0000)
struct BP_Enemy_Weapon_C_GetLocationForHitDirection final
{
public:
	bool                                          IsEnemyWeapon;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B9F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationTwoFrameAgo_ReturnValue;       // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Enemy_Weapon_C_GetLocationForHitDirection) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_GetLocationForHitDirection");
static_assert(sizeof(BP_Enemy_Weapon_C_GetLocationForHitDirection) == 0x00001C, "Wrong size on BP_Enemy_Weapon_C_GetLocationForHitDirection");
static_assert(offsetof(BP_Enemy_Weapon_C_GetLocationForHitDirection, IsEnemyWeapon) == 0x000000, "Member 'BP_Enemy_Weapon_C_GetLocationForHitDirection::IsEnemyWeapon' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetLocationForHitDirection, Location) == 0x000004, "Member 'BP_Enemy_Weapon_C_GetLocationForHitDirection::Location' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_GetLocationForHitDirection, CallFunc_GetLocationTwoFrameAgo_ReturnValue) == 0x000010, "Member 'BP_Enemy_Weapon_C_GetLocationForHitDirection::CallFunc_GetLocationTwoFrameAgo_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsOverTarget
// 0x0068 (0x0068 - 0x0000)
struct BP_Enemy_Weapon_C_IsOverTarget final
{
public:
	bool                                          IsOver;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_OverLimit;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CurDir;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Diff;                                            // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Over;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA1[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA2[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA3[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsOverTarget) == 0x000004, "Wrong alignment on BP_Enemy_Weapon_C_IsOverTarget");
static_assert(sizeof(BP_Enemy_Weapon_C_IsOverTarget) == 0x000068, "Wrong size on BP_Enemy_Weapon_C_IsOverTarget");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, IsOver) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsOverTarget::IsOver' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, L_OverLimit) == 0x000004, "Member 'BP_Enemy_Weapon_C_IsOverTarget::L_OverLimit' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, L_CurDir) == 0x000008, "Member 'BP_Enemy_Weapon_C_IsOverTarget::L_CurDir' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, L_Diff) == 0x000014, "Member 'BP_Enemy_Weapon_C_IsOverTarget::L_Diff' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, L_Over) == 0x000020, "Member 'BP_Enemy_Weapon_C_IsOverTarget::L_Over' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_VSize_ReturnValue) == 0x000024, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_Normal_ReturnValue) == 0x000028, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_Dot_VectorVector_ReturnValue) == 0x000044, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_Less_FloatFloat_ReturnValue) == 0x000049, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_IsValid_ReturnValue_1) == 0x00004A, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00004C, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Enemy_Weapon_C_IsOverTarget, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000064, "Member 'BP_Enemy_Weapon_C_IsOverTarget::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_Enemy_Weapon.BP_Enemy_Weapon_C.IsWeaponActive
// 0x0001 (0x0001 - 0x0000)
struct BP_Enemy_Weapon_C_IsWeaponActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Enemy_Weapon_C_IsWeaponActive) == 0x000001, "Wrong alignment on BP_Enemy_Weapon_C_IsWeaponActive");
static_assert(sizeof(BP_Enemy_Weapon_C_IsWeaponActive) == 0x000001, "Wrong size on BP_Enemy_Weapon_C_IsWeaponActive");
static_assert(offsetof(BP_Enemy_Weapon_C_IsWeaponActive, bActive) == 0x000000, "Member 'BP_Enemy_Weapon_C_IsWeaponActive::bActive' has a wrong offset!");

}

