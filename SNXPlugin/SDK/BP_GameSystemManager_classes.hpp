#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameSystemManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameSystemManager.BP_GameSystemManager_C
// 0x0028 (0x0258 - 0x0230)
class ABP_GameSystemManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_VibrationComponent_C*               BP_VibrationComponent;                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PostProcessVolumeAccess_C*          BP_PostProcessVolumeAccess;                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CalcCustomTImeDilationComponent_C*  CalcCustomTimeDilation;                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameSystemManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void DelayBeginPlay();
	bool InitializeManager(EManagerProcTiming Timing);
	bool FinalizeManager(EManagerProcTiming Timing);
	bool IsNeedFrameWait();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameSystemManager_C">();
	}
	static class ABP_GameSystemManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameSystemManager_C>();
	}
};
static_assert(alignof(ABP_GameSystemManager_C) == 0x000008, "Wrong alignment on ABP_GameSystemManager_C");
static_assert(sizeof(ABP_GameSystemManager_C) == 0x000258, "Wrong size on ABP_GameSystemManager_C");
static_assert(offsetof(ABP_GameSystemManager_C, UberGraphFrame) == 0x000230, "Member 'ABP_GameSystemManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameSystemManager_C, BP_VibrationComponent) == 0x000238, "Member 'ABP_GameSystemManager_C::BP_VibrationComponent' has a wrong offset!");
static_assert(offsetof(ABP_GameSystemManager_C, BP_PostProcessVolumeAccess) == 0x000240, "Member 'ABP_GameSystemManager_C::BP_PostProcessVolumeAccess' has a wrong offset!");
static_assert(offsetof(ABP_GameSystemManager_C, CalcCustomTimeDilation) == 0x000248, "Member 'ABP_GameSystemManager_C::CalcCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(ABP_GameSystemManager_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_GameSystemManager_C::DefaultSceneRoot' has a wrong offset!");

}

