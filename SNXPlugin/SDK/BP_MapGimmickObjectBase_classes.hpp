#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapGimmickObjectBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PsychicObjectSizeParameter_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_ui_pk_weight_gauge_button_structs.hpp"
#include "Enum_ui_pk_weight_gauge_size_structs.hpp"
#include "PsyObjType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapGimmickObjectBase.BP_MapGimmickObjectBase_C
// 0x0330 (0x0950 - 0x0620)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_MapGimmickObjectBase_C : public AMapGimmickObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0620(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_UniqueEffectComponent_C*            BP_UniqueEffectComponent;                          // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeOutline_Fade_4326C6A042BDA8526C02688141850BEB; // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeOutline__Direction_4326C6A042BDA8526C02688141850BEB; // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7045[0x3];                                     // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeOutline;                                       // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SearchDistanceMin;                                 // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7046[0x4];                                     // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_Action_Sas_C*                    Icon;                                              // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventCameraRoot_C*                  SeqUniqueRoot;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventCameraRoot_C*                  SeqUniqueCameraRoot;                               // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventCameraRoot_C*                  SeqUniquePlayerRoot;                               // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         HudMain;                                           // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ui_pk_weight_gauge_button                GaugeButtonType;                                   // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ui_pk_weight_gauge_size                  GaugeIconSize;                                     // 0x0671(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7047[0x6];                                     // 0x0672(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACineCameraActor*                       SeqUniqueCamera;                                   // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultChargeStartLoopPlayerAnim;                  // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultChargeStartEndPlayerAnim;                   // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CameraTransStartSequence;                          // 0x0690(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstFrameInSeq;                                 // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7048[0x3];                                     // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerCameraBeginFOV;                              // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TmpDelayNextState;                                 // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TmpDelayNextCancelState;                           // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EditorDebug;                                       // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsStencilOn;                                       // 0x06D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7049[0x2];                                     // 0x06DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StencilValue;                                      // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LastCameraTransform;                               // 0x06E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstFrameInEndCameraSeq;                        // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_704A[0x7];                                     // 0x0711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        CameraOwner;                                       // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraUniqueObjectParameter           UniqueCameraParameter;                             // 0x0720(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   UniqueCameraParamName;                             // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         CameraShake;                                       // 0x0780(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class ABP_EffectBackground_C*>         ExtraParticles;                                    // 0x0790(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	struct FPsychicObjectSizeParameter            SizeParameter;                                     // 0x07A0(0x0138)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectID             PsychicObjectID;                                   // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_704B[0x3];                                     // 0x08D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UseDistance;                                       // 0x08DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaceAdjustMoveScale;                              // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_704C[0x4];                                     // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraTriggerInfo                     NearGimmickCameraInfo;                             // 0x08E8(0x0028)(Edit, BlueprintVisible)
	bool                                          UseCameraSocketType;                               // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_704D[0x7];                                     // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 GateMeshComponent;                                 // 0x0918(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<E_SASKindNative>                       NeedSasForGate;                                    // 0x0928(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          IsControlEndCameraEnd;                             // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsControlCameraStart;                              // 0x0939(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_704E[0x2];                                     // 0x093A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtNear;                                        // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtFar;                                         // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCheckCaptureCancel;                              // 0x0944(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUnqObjCamStarted;                                // 0x0945(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NotPlayBraintalkInPlayInKizunaEpisode;             // 0x0946(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeightGaugeCheck;                                // 0x0947(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MapGimmickObjectBase(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void DelayFadeOutAndDestloy(float Duration);
	void CheckUseSasGateDelay();
	void InitializeUniqueCameraParam();
	void DelayIconOn();
	void FadeOutAndDestroy();
	void EventInitializePsychicObject();
	void OnStateEndFunction(class FName StateName);
	void OnStateBeginFunction(class FName StateName);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void EventCameraEnd();
	void EventCameraStart();
	void EndPlaybackCameraSequence();
	void EnableAttackCollision(bool Enable);
	void EnablePhysics(bool Enable);
	void DelayAttackEffectOff(float Delay);
	void ChangeStateInCancelWithDelay(float DelaySec);
	void ChangeToNextStateWithDelay(float DelaySec);
	void ChangeStateWithDelay(float DelaySec, class FName NextStateName);
	void SetPsychicObjectVisibility(bool Flag_in, bool Is_mesh_only);
	void SetPsychicObjectActive(bool Param_IsActive);
	void SetTownSetting(bool Flag);
	void SetMaterialParameter(class FName ParamName, float ParamValue);
	void FadeOutline__UpdateFunc();
	void FadeOutline__FinishedFunc();
	void MakeStateFromDataTable();
	void InitializeIcon();
	bool SetIconVisible(bool Visible, bool IsSuccess, bool IsCancel);
	void GetSequencePlayer(class FName StateName, class ARSLevelSequenceActor** Actor, class ULevelSequencePlayer** Player, bool* Error);
	void OnFinishSequenceEnablePhysics();
	void PlayStateSequenceWithCallback(class FName StateName, const TDelegate<void()>& OnFinishedFunc, bool* Error);
	void PlayStateSequence(class FName StateName);
	class ULevelSequencePlayer* CreateRSLevelSequencerPlayer(class ULevelSequence* LevelSequence, const struct FMovieSceneSequencePlaybackSettings& Settings, class ARSLevelSequenceActor** Actor);
	void InitializeSequenceUniqueActor();
	void FinishPlayProc();
	void SetupSequencePlay(class FName StateName);
	void GetHUD(class AHUDMainGame_C** Param_HudMain);
	bool UpdateWidgetGauge();
	void UpdateBeginCameraInterp(const struct FTransform& CurTrans, struct FTransform* InterpTrans);
	void UpdateSeqRoot(const struct FTransform& CurTrans, struct FTransform* InterpTrans);
	void GetCurrentChargeRate(float* Rate);
	void GetFocalLengthFromFovDegree(float SensorWidth, float FovDegree, float* FocalLength);
	void SetCineCameraFov(float FovDegree);
	void GetFocalLengthFromFovRadian(float SensorWidth, float FovRadian, float* FocalLength);
	bool OnBeginTriggerVolumeOverlap();
	bool OnEndTriggerVolumeOverlap();
	void GetStateLevelSequence(const class FName& StateName, class ULevelSequence** Sequence, bool* Found);
	void GetSeqCameraReverceTransform(struct FTransform* RevTrans);
	void BackupBeforeSequencePlay();
	void IsExistStateLevelSequence(class FName StateName, bool* Exist);
	void OnAnimationEndDefaultFunc();
	void StopStateSequence(class FName StateName);
	void PlayFinishAnimation();
	void PlayFinishAnimationRaw(EMapGimmickFinishDir Dir);
	void GetPlayerToGimmickDir(EMapGimmickFinishDir* Dir);
	void DefaultChargeFunc(EMapGimmickStatusFunc Status, float DeltaSeconds, class FName StateName, bool* Result);
	void UpdateSequenceCameraFunc();
	void RegisterToManager();
	void GetPlayerFinishAnimation(class UAnimMontage** AnimMontage);
	void SetOutline(bool On);
	bool SetEffectFocus(bool Flag);
	void SetFadeoutMIParameter(float Fade);
	void MoveShock1();
	void DebugCallActivate();
	void StartCamera();
	void EndCamera(bool Force, bool Capture_cancel);
	void ResetCamera();
	void ShakeCamera(int32 No);
	void PlayEffectBackgrounds();
	void DebugTestEffectCaptureStart();
	void DebugTestEffectCaptureEnd();
	void DebugTestEffectAttackStart();
	void DebugTestEffectAttackEnd();
	void EffectAttackStart();
	void EffectAttackEnd();
	void EffectCaptureStart();
	void EffectCaptureEnd();
	void EffectDestroy();
	void EffectCaptureStop();
	void PlayExtraParticles();
	void DebugStateReset();
	void ResetCameraLerp();
	void DebugEnableUse();
	void AddUseTime();
	void OnGimmickUse();
	void PlayHintBrainTalk(const class FString& GimmickBrainTalkId, EBrainTalkGimmickCondition BrainTalkConditionId);
	void GetHintBrainTalkWaitTime(const class FString& GimmickBrainTalkId, EBrainTalkGimmickCondition BrainTalkConditionId, float* WaitSec);
	void PlayHintBrainTalkWithWait(const class FString& GimmickBrainTalkId, EBrainTalkGimmickCondition BrainTalkConditionId, float WaitSec);
	void PlaySE(class USoundAtomCue* Sound);
	bool Set_Icon_Gauge_Enable(bool Enable);
	void DebugTestEffectStop();
	void EffectAttackStop();
	void CalcFinishAnimMoveDistance(float* Length);
	void GetActorToPlayerDistance(float* Distance);
	void SetPlayerRootMoveScale(float Scale);
	void IsInCapture(bool* Capturing);
	void SetNotUseVisible(bool Visible);
	void OnBeginOverlapBossMapGimmickArea();
	void OnEndOverlapBossMapGimmickArea();
	void SetNearCameraParameter(bool In);
	void CalcAnimMoveDistance(class UAnimMontage* Anim, float* Length);
	void OnBeginOverlapTriggerCommon();
	void OnEndOverlapTriggerCommon();
	void Check_Use_Gate_by_Sas();
	void AdjustPlayRateSameAsPlayer();
	void SetCameraControl(bool OnStart, bool OnEnd);
	bool OnBeginForceIconVisibleOverlap();
	bool OnEndForceIconVisibleOverlap();
	bool SetLimitIconVisible(bool Visible, bool Limit, bool IsSuccess);
	bool OnBeginUseLimitIconVisibleOverlap();
	bool OnEndUseLimitIconVisibleOverlap();
	bool SetIconGaugeEnableProxy(bool Enable);
	bool IsSkipCheckRendered();
	void CheckInKizunaEp(bool* PlayOk);
	void DebugCheckKizunaEp();
	void GetPsychicObjectCentrePos(struct FVector* Centre_pos);
	void GetPsychicObjectWeightGaugePos(struct FVector* Weight_gauge_pos);
	void GetPsychicObjectType(EPsyObjType* Psychic_object_type);
	void IsPsychicObject(bool* bResult);
	void IsPsychicObjectActive(bool* Param_IsActive);
	void GetPsychicObjectVhsParam(class UCurveVector** ParamCurve, class UCurveVector** ColorCurve, float* VhsSeconds);
	void CanUseMapGimmick(bool* UseOk);
	bool SetPlayerCameraViewTarget(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp);
	bool SetPlayerCameraRotation(const struct FRotator& Rot);
	bool SetPlayerCameraMode(EPlayerCameraMode Mode);
	bool SetPlayerCameraLocation(const struct FVector& Pos);
	bool SetPlayerCameraFieldOfView(float FOV);
	bool SetPlayerCameraDirection(const struct FVector& Pos);
	struct FRotator GetPlayerCameraRotation();
	EPlayerCameraMode GetPlayerCameraMode();
	struct FVector GetPlayerCameraLocation();
	float GetPlayerCameraFieldOfView();
	struct FVector GetPlayerCameraDirection();
	struct FVector GetCameraLookAtPos();
	struct FRotator GetRemoteActorRotation();
	struct FVector GetRemoteActorLocation();
	bool RequestEndUniqueObjectState(class AActor* PActor);
	bool IsUniqueObject();
	bool IsPsychicObjectActiveC();
	bool IsCopyPsychicObject();
	bool InitializeCopyPsychicObject();
	struct FVector GetUnqObjMoveVelocity();
	struct FVector GetUnqObjCamTargetPos();
	struct FRotator GetUniqueObjectCameraOwnerRotation();
	struct FVector GetUniqueObjectCameraLookAtPos(float LookAtRate);
	bool GetDebrisEffectData(class UParticleSystem** ParticleTemplate, class UMaterialInterface** OverrideMaterial);
	bool GetDebrisEffect(EEffectObjectDebrisType* Type, class UMaterialInterface** OverrideMaterial);
	bool IsSwingType();
	EPsychicObjectSizeType GetPsychicObjectSize();
	bool SetUniqueObjectC(bool Flag);
	bool SetSwingTypeC(bool Flag);
	bool SetPsychicObjectTickC(class FName RefName, bool Flag);
	bool SetPsychicObjectInUseC(bool Flag);
	bool SetPsychicObjectActiveC(bool Flag);
	bool SetBrainFieldObjectC(bool Flag);
	bool IsUniqueObjectC();
	bool IsSwingTypeC();
	bool IsPsychicObjectTickC();
	bool IsPsychicObjectInUseC();
	bool IsBrainFieldObjectC();
	bool CheckPsychicObjectIdC(BattlePrototype::EPsychicObjectID CheckId);
	bool IsPsychicObjectRegisterableC();
	bool SetDuelPoleType(bool bDuelType);
	bool SetPsychicObjectRenderC(bool Flag);
	bool IsPsychicObjectRenderC();
	bool SetPsychicObjectSimulateControlC(bool Flag);
	bool IsPsychicObjectSimulateControlEnableC();
	bool IsPsychicObjectSimulateC();
	bool GetPsychicObjectSimulateControlDistanceSqC(float* DistSq);
	bool CheckPsychicObjectSimulateC(const struct FVector& PosPly);
	bool IsFloatObjectC();
	bool ResetPsychicObjectArrangeTransformC();
	bool SetPsychicObjectEventC(bool bStart, bool bTick, bool bVisibility);

	bool OnMapGimmickChargeCancel(class AMapGimmickObject* GimmickActor) const;
	bool OnMapGimmickChargeEnd(class AMapGimmickObject* GimmickActor) const;
	bool OnMapGimmickChargeStart(class AMapGimmickObject* GimmickActor) const;
	void CalcLerpLookAtPosition(class USceneComponent* NearLookAt, class USceneComponent* FarLookAt, struct FVector* LookAtPos) const;
	void IsPsychicComboAttack(bool* bComboAttack) const;
	void GetUniqueObjectCaptureMontage(EPlayerID PlayerId, bool bBack, bool bLeft, bool* bUseBlend, class UAnimMontage** StartMontage, class UAnimMontage** CancelMontage) const;
	void IsKarenUniqueObject(bool* bKaren) const;
	void GetMapGimmickType(EMapGimmickType* Type) const;
	struct FMeshTriangleData GetMeshTriangleData() const;
	int32 GetDataRevision() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapGimmickObjectBase_C">();
	}
	static class ABP_MapGimmickObjectBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapGimmickObjectBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_MapGimmickObjectBase_C) == 0x000010, "Wrong alignment on ABP_MapGimmickObjectBase_C");
static_assert(sizeof(ABP_MapGimmickObjectBase_C) == 0x000950, "Wrong size on ABP_MapGimmickObjectBase_C");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, UberGraphFrame) == 0x000620, "Member 'ABP_MapGimmickObjectBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, BP_UniqueEffectComponent) == 0x000628, "Member 'ABP_MapGimmickObjectBase_C::BP_UniqueEffectComponent' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, FadeOutline_Fade_4326C6A042BDA8526C02688141850BEB) == 0x000630, "Member 'ABP_MapGimmickObjectBase_C::FadeOutline_Fade_4326C6A042BDA8526C02688141850BEB' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, FadeOutline__Direction_4326C6A042BDA8526C02688141850BEB) == 0x000634, "Member 'ABP_MapGimmickObjectBase_C::FadeOutline__Direction_4326C6A042BDA8526C02688141850BEB' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, FadeOutline) == 0x000638, "Member 'ABP_MapGimmickObjectBase_C::FadeOutline' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, SearchDistanceMin) == 0x000640, "Member 'ABP_MapGimmickObjectBase_C::SearchDistanceMin' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, Icon) == 0x000648, "Member 'ABP_MapGimmickObjectBase_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, SeqUniqueRoot) == 0x000650, "Member 'ABP_MapGimmickObjectBase_C::SeqUniqueRoot' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, SeqUniqueCameraRoot) == 0x000658, "Member 'ABP_MapGimmickObjectBase_C::SeqUniqueCameraRoot' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, SeqUniquePlayerRoot) == 0x000660, "Member 'ABP_MapGimmickObjectBase_C::SeqUniquePlayerRoot' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, HudMain) == 0x000668, "Member 'ABP_MapGimmickObjectBase_C::HudMain' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, GaugeButtonType) == 0x000670, "Member 'ABP_MapGimmickObjectBase_C::GaugeButtonType' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, GaugeIconSize) == 0x000671, "Member 'ABP_MapGimmickObjectBase_C::GaugeIconSize' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, SeqUniqueCamera) == 0x000678, "Member 'ABP_MapGimmickObjectBase_C::SeqUniqueCamera' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, DefaultChargeStartLoopPlayerAnim) == 0x000680, "Member 'ABP_MapGimmickObjectBase_C::DefaultChargeStartLoopPlayerAnim' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, DefaultChargeStartEndPlayerAnim) == 0x000688, "Member 'ABP_MapGimmickObjectBase_C::DefaultChargeStartEndPlayerAnim' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, CameraTransStartSequence) == 0x000690, "Member 'ABP_MapGimmickObjectBase_C::CameraTransStartSequence' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsFirstFrameInSeq) == 0x0006C0, "Member 'ABP_MapGimmickObjectBase_C::IsFirstFrameInSeq' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, PlayerCameraBeginFOV) == 0x0006C4, "Member 'ABP_MapGimmickObjectBase_C::PlayerCameraBeginFOV' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, TmpDelayNextState) == 0x0006C8, "Member 'ABP_MapGimmickObjectBase_C::TmpDelayNextState' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, TmpDelayNextCancelState) == 0x0006D0, "Member 'ABP_MapGimmickObjectBase_C::TmpDelayNextCancelState' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, EditorDebug) == 0x0006D8, "Member 'ABP_MapGimmickObjectBase_C::EditorDebug' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsStencilOn) == 0x0006D9, "Member 'ABP_MapGimmickObjectBase_C::IsStencilOn' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, StencilValue) == 0x0006DC, "Member 'ABP_MapGimmickObjectBase_C::StencilValue' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, LastCameraTransform) == 0x0006E0, "Member 'ABP_MapGimmickObjectBase_C::LastCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsFirstFrameInEndCameraSeq) == 0x000710, "Member 'ABP_MapGimmickObjectBase_C::IsFirstFrameInEndCameraSeq' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, CameraOwner) == 0x000718, "Member 'ABP_MapGimmickObjectBase_C::CameraOwner' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, UniqueCameraParameter) == 0x000720, "Member 'ABP_MapGimmickObjectBase_C::UniqueCameraParameter' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, UniqueCameraParamName) == 0x000778, "Member 'ABP_MapGimmickObjectBase_C::UniqueCameraParamName' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, CameraShake) == 0x000780, "Member 'ABP_MapGimmickObjectBase_C::CameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, ExtraParticles) == 0x000790, "Member 'ABP_MapGimmickObjectBase_C::ExtraParticles' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, SizeParameter) == 0x0007A0, "Member 'ABP_MapGimmickObjectBase_C::SizeParameter' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, PsychicObjectID) == 0x0008D8, "Member 'ABP_MapGimmickObjectBase_C::PsychicObjectID' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, UseDistance) == 0x0008DC, "Member 'ABP_MapGimmickObjectBase_C::UseDistance' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, PlaceAdjustMoveScale) == 0x0008E0, "Member 'ABP_MapGimmickObjectBase_C::PlaceAdjustMoveScale' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, NearGimmickCameraInfo) == 0x0008E8, "Member 'ABP_MapGimmickObjectBase_C::NearGimmickCameraInfo' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, UseCameraSocketType) == 0x000910, "Member 'ABP_MapGimmickObjectBase_C::UseCameraSocketType' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, GateMeshComponent) == 0x000918, "Member 'ABP_MapGimmickObjectBase_C::GateMeshComponent' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, NeedSasForGate) == 0x000928, "Member 'ABP_MapGimmickObjectBase_C::NeedSasForGate' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsControlEndCameraEnd) == 0x000938, "Member 'ABP_MapGimmickObjectBase_C::IsControlEndCameraEnd' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsControlCameraStart) == 0x000939, "Member 'ABP_MapGimmickObjectBase_C::IsControlCameraStart' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, LookAtNear) == 0x00093C, "Member 'ABP_MapGimmickObjectBase_C::LookAtNear' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, LookAtFar) == 0x000940, "Member 'ABP_MapGimmickObjectBase_C::LookAtFar' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsCheckCaptureCancel) == 0x000944, "Member 'ABP_MapGimmickObjectBase_C::IsCheckCaptureCancel' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsUnqObjCamStarted) == 0x000945, "Member 'ABP_MapGimmickObjectBase_C::IsUnqObjCamStarted' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, NotPlayBraintalkInPlayInKizunaEpisode) == 0x000946, "Member 'ABP_MapGimmickObjectBase_C::NotPlayBraintalkInPlayInKizunaEpisode' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickObjectBase_C, IsWeightGaugeCheck) == 0x000947, "Member 'ABP_MapGimmickObjectBase_C::IsWeightGaugeCheck' has a wrong offset!");

}

