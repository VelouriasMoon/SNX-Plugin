#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_co0102

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "REDAnimationNode_structs.hpp"
#include "ESASCodeAnimType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_co0102.ABP_co0102_C
// 0x1160 (0x1460 - 0x0300)
class UABP_co0102_C final : public URSCableAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	uint8                                         Pad_8429[0x8];                                     // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBodyRedCustom           AnimGraphNode_RigidBodyRedCustom_1;                // 0x0310(0x0610)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x0920(0x00C8)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x09E8(0x0020)()
	struct FAnimNode_MeshSpaceRefPose             AnimGraphNode_MeshRefPose_1;                       // 0x0A08(0x0010)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0A18(0x0030)()
	struct FAnimNode_MeshSpaceRefPose             AnimGraphNode_MeshRefPose;                         // 0x0A48(0x0010)()
	uint8                                         Pad_842A[0x8];                                     // 0x0A58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBodyRedCustom           AnimGraphNode_RigidBodyRedCustom;                  // 0x0A60(0x0610)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x1070(0x0020)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x1090(0x00B0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1140(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1168(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1190(0x0078)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1208(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1238(0x0078)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x12B0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x12E0(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1390(0x0048)()
	float                                         PhysicsAlpha;                                      // 0x13D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartAnim;                                        // 0x13DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_842B[0x3];                                     // 0x13DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             PhysicsAlphaTimer;                                 // 0x13E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PARAM_PhysicsAlphaTime;                            // 0x13EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim01;                                            // 0x13F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim02;                                            // 0x13F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim03;                                            // 0x1400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim04;                                            // 0x1408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim05;                                            // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              SASAnimType;                                       // 0x1418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_842C[0x3];                                     // 0x1419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             OverrideGravityTimer;                              // 0x141C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_CableBase_C*                        CableActor;                                        // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideGravity;                                  // 0x1430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_842D[0x3];                                     // 0x1431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PARAM_OverrideGravityTime;                         // 0x1434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OverrideGravity;                                   // 0x1438(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             DisableOverrideGravityTimer;                       // 0x1444(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ERSCableGravityType                           GravityType;                                       // 0x1450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           GravityTypeLow;                                    // 0x1451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_co0102(int32 EntryPoint);
	void AnimNotify_OnBeginStartAnim();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_co0102_AnimGraphNode_SequencePlayer_12097FA643F80EE22C808E837458AD6E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_co0102_AnimGraphNode_SequencePlayer_98D43F0E47FBD8FA4EFD92A1F72FFFB9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_co0102_AnimGraphNode_TwoWayBlend_F813ED304EA33E0904218291C51EC2B0();
	void Start(bool bRestart, ESASCodeAnimType AnimType);
	void SetOwnerCableActor(class ABP_CableBase_C* OwnerActor);
	bool BeginOverrideGravity(ERSCableGravityType Type);
	bool EndOverrideGravity(ERSCableGravityType Type);
	void SetPhysicsDirect();
	void StartPhysics();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_co0102_C">();
	}
	static class UABP_co0102_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_co0102_C>();
	}
};
static_assert(alignof(UABP_co0102_C) == 0x000010, "Wrong alignment on UABP_co0102_C");
static_assert(sizeof(UABP_co0102_C) == 0x001460, "Wrong size on UABP_co0102_C");
static_assert(offsetof(UABP_co0102_C, UberGraphFrame) == 0x000300, "Member 'UABP_co0102_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_RigidBodyRedCustom_1) == 0x000310, "Member 'UABP_co0102_C::AnimGraphNode_RigidBodyRedCustom_1' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_TwoWayBlend) == 0x000920, "Member 'UABP_co0102_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0009E8, "Member 'UABP_co0102_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_MeshRefPose_1) == 0x000A08, "Member 'UABP_co0102_C::AnimGraphNode_MeshRefPose_1' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_Root) == 0x000A18, "Member 'UABP_co0102_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_MeshRefPose) == 0x000A48, "Member 'UABP_co0102_C::AnimGraphNode_MeshRefPose' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_RigidBodyRedCustom) == 0x000A60, "Member 'UABP_co0102_C::AnimGraphNode_RigidBodyRedCustom' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_ComponentToLocalSpace) == 0x001070, "Member 'UABP_co0102_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_BlendListByEnum) == 0x001090, "Member 'UABP_co0102_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_TransitionResult_1) == 0x001140, "Member 'UABP_co0102_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_TransitionResult) == 0x001168, "Member 'UABP_co0102_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_SequencePlayer_1) == 0x001190, "Member 'UABP_co0102_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_StateResult_1) == 0x001208, "Member 'UABP_co0102_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_SequencePlayer) == 0x001238, "Member 'UABP_co0102_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_StateResult) == 0x0012B0, "Member 'UABP_co0102_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_StateMachine) == 0x0012E0, "Member 'UABP_co0102_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, AnimGraphNode_Slot) == 0x001390, "Member 'UABP_co0102_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, PhysicsAlpha) == 0x0013D8, "Member 'UABP_co0102_C::PhysicsAlpha' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, bStartAnim) == 0x0013DC, "Member 'UABP_co0102_C::bStartAnim' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, PhysicsAlphaTimer) == 0x0013E0, "Member 'UABP_co0102_C::PhysicsAlphaTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, PARAM_PhysicsAlphaTime) == 0x0013EC, "Member 'UABP_co0102_C::PARAM_PhysicsAlphaTime' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, Anim01) == 0x0013F0, "Member 'UABP_co0102_C::Anim01' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, Anim02) == 0x0013F8, "Member 'UABP_co0102_C::Anim02' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, Anim03) == 0x001400, "Member 'UABP_co0102_C::Anim03' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, Anim04) == 0x001408, "Member 'UABP_co0102_C::Anim04' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, Anim05) == 0x001410, "Member 'UABP_co0102_C::Anim05' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, SASAnimType) == 0x001418, "Member 'UABP_co0102_C::SASAnimType' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, OverrideGravityTimer) == 0x00141C, "Member 'UABP_co0102_C::OverrideGravityTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, CableActor) == 0x001428, "Member 'UABP_co0102_C::CableActor' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, bOverrideGravity) == 0x001430, "Member 'UABP_co0102_C::bOverrideGravity' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, PARAM_OverrideGravityTime) == 0x001434, "Member 'UABP_co0102_C::PARAM_OverrideGravityTime' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, OverrideGravity) == 0x001438, "Member 'UABP_co0102_C::OverrideGravity' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, DisableOverrideGravityTimer) == 0x001444, "Member 'UABP_co0102_C::DisableOverrideGravityTimer' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, GravityType) == 0x001450, "Member 'UABP_co0102_C::GravityType' has a wrong offset!");
static_assert(offsetof(UABP_co0102_C, GravityTypeLow) == 0x001451, "Member 'UABP_co0102_C::GravityTypeLow' has a wrong offset!");

}

