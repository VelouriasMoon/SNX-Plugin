#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyBattleLog

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyBattleLog.BP_EnemyBattleLog_C
// 0x0088 (0x0148 - 0x00C0)
class UBP_EnemyBattleLog_C final : public UActorComponent
{
public:
	float                                         ActiveTime;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableActiveTimer;                                 // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_320A[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         Tag;                                               // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPrintToScScreen;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPrintToLog;                                       // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_320B[0x2];                                     // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x00EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlooded;                                         // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOil;                                             // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlame;                                           // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsElectric;                                        // 0x0103(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         FloodedCount;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OilCount;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FlameCount;                                        // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ElectricCount;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320C[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFallbackStruct>                DamageParam;                                       // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         FlameDamage;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320D[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnemyName;                                         // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SetActiveTimer(float DeltaSec, bool* Dummy);
	void StartActiveTimer(bool* Dummy);
	void EndActiveTimer(bool* Dummy);
	void OutputLog_Action(const class FString& ActionName, bool* Dummy);
	void CheckEnableOutput(bool* IsEnable);
	void GetTagString(int32 TagNo, class FString* TagString);
	void GetTimeString(class FString* TimeString);
	void OutputLog_Find(bool* Dummy);
	void OutputLog_Lost(bool* Dummy);
	void OutputLog_ArmorBreak(bool* Dummy);
	void OutputLog_CrashChanceStart(bool* Dummy);
	void OutputLog_CrashChanceEnd(bool* Dummy);
	void OutputLog_BrainCrash(bool* Dummy);
	void OutputLog_BadState(class UCharactersParameterComponent* CharactersParameter, bool* Dummy);
	void OutputLog_Reaction(bool IsSmall, bool* Dummy);
	void OutputLog_DamageDown(bool* Dummy);
	void OutputLog_Dead(bool* Dummy);
	void SetDamageParam(const struct FHCHitResult& HitResult, int32 Damage, bool* Dummy);
	void MainTick(float DeltaSeconds, class UEnemyScriptComponent* EnemyScript, class UCharactersParameterComponent* CharactersParameter);
	void SetEnemyName(const class FString& Param_Name, bool* Dummy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyBattleLog_C">();
	}
	static class UBP_EnemyBattleLog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyBattleLog_C>();
	}
};
static_assert(alignof(UBP_EnemyBattleLog_C) == 0x000008, "Wrong alignment on UBP_EnemyBattleLog_C");
static_assert(sizeof(UBP_EnemyBattleLog_C) == 0x000148, "Wrong size on UBP_EnemyBattleLog_C");
static_assert(offsetof(UBP_EnemyBattleLog_C, ActiveTime) == 0x0000C0, "Member 'UBP_EnemyBattleLog_C::ActiveTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, EnableActiveTimer) == 0x0000C4, "Member 'UBP_EnemyBattleLog_C::EnableActiveTimer' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, Prefix) == 0x0000C8, "Member 'UBP_EnemyBattleLog_C::Prefix' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, Tag) == 0x0000D8, "Member 'UBP_EnemyBattleLog_C::Tag' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, bPrintToScScreen) == 0x0000E8, "Member 'UBP_EnemyBattleLog_C::bPrintToScScreen' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, bPrintToLog) == 0x0000E9, "Member 'UBP_EnemyBattleLog_C::bPrintToLog' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, TextColor) == 0x0000EC, "Member 'UBP_EnemyBattleLog_C::TextColor' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, Duration) == 0x0000FC, "Member 'UBP_EnemyBattleLog_C::Duration' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, IsFlooded) == 0x000100, "Member 'UBP_EnemyBattleLog_C::IsFlooded' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, IsOil) == 0x000101, "Member 'UBP_EnemyBattleLog_C::IsOil' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, IsFlame) == 0x000102, "Member 'UBP_EnemyBattleLog_C::IsFlame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, IsElectric) == 0x000103, "Member 'UBP_EnemyBattleLog_C::IsElectric' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, FloodedCount) == 0x000104, "Member 'UBP_EnemyBattleLog_C::FloodedCount' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, OilCount) == 0x000108, "Member 'UBP_EnemyBattleLog_C::OilCount' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, FlameCount) == 0x00010C, "Member 'UBP_EnemyBattleLog_C::FlameCount' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, ElectricCount) == 0x000110, "Member 'UBP_EnemyBattleLog_C::ElectricCount' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, DamageParam) == 0x000118, "Member 'UBP_EnemyBattleLog_C::DamageParam' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, FlameDamage) == 0x000128, "Member 'UBP_EnemyBattleLog_C::FlameDamage' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, EnemyName) == 0x000130, "Member 'UBP_EnemyBattleLog_C::EnemyName' has a wrong offset!");
static_assert(offsetof(UBP_EnemyBattleLog_C, IsDead) == 0x000140, "Member 'UBP_EnemyBattleLog_C::IsDead' has a wrong offset!");

}

