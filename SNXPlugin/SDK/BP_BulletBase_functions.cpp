#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BulletBase

#include "Basic.hpp"

#include "BP_BulletBase_classes.hpp"
#include "BP_BulletBase_parameters.hpp"


namespace SDK
{

// Function BP_BulletBase.BP_BulletBase_C.ExecuteUbergraph_BP_BulletBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletBase_C::ExecuteUbergraph_BP_BulletBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "ExecuteUbergraph_BP_BulletBase");

	Params::BP_BulletBase_C_ExecuteUbergraph_BP_BulletBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletBase.BP_BulletBase_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FHCHitResult                     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ABP_BulletBase_C::BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature");

	Params::BP_BulletBase_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletBase.BP_BulletBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "ReceiveEndPlay");

	Params::BP_BulletBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletBase.BP_BulletBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "ReceiveTick");

	Params::BP_BulletBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletBase.BP_BulletBase_C.ParallelTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletBase_C::ParallelTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "ParallelTick");

	Params::BP_BulletBase_C_ParallelTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletBase.BP_BulletBase_C.PostParallelTick
// (Event, Public, BlueprintEvent)

void ABP_BulletBase_C::PostParallelTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "PostParallelTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BulletBase.BP_BulletBase_C.PreParallelTick
// (Event, Public, BlueprintEvent)

void ABP_BulletBase_C::PreParallelTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "PreParallelTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BulletBase.BP_BulletBase_C.Fire
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_AttackOwner                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_FirePoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dir                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttackCollisionInfoBP           Param_CollisionInfo                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Param_bDisableImpactParticle                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::Fire(class AActor* Param_AttackOwner, const struct FVector& Param_FirePoint, const struct FVector& Dir, struct FAttackCollisionInfoBP& Param_CollisionInfo, bool Param_bDisableImpactParticle, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "Fire");

	Params::BP_BulletBase_C_Fire Parms{};

	Parms.Param_AttackOwner = Param_AttackOwner;
	Parms.Param_FirePoint = std::move(Param_FirePoint);
	Parms.Dir = std::move(Dir);
	Parms.Param_CollisionInfo = std::move(Param_CollisionInfo);
	Parms.Param_bDisableImpactParticle = Param_bDisableImpactParticle;

	UObject::ProcessEvent(Func, &Parms);

	Param_CollisionInfo = std::move(Parms.Param_CollisionInfo);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_BulletBase.BP_BulletBase_C.OnAttackEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::OnAttackEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "OnAttackEnd");

	Params::BP_BulletBase_C_OnAttackEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_BulletBase.BP_BulletBase_C.OnUpdate
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::OnUpdate(float DeltaSeconds, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "OnUpdate");

	Params::BP_BulletBase_C_OnUpdate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_BulletBase.BP_BulletBase_C.AttackEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BulletBase_C::AttackEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "AttackEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BulletBase.BP_BulletBase_C.SetBulletVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dunnmy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::SetBulletVisibility(bool On, bool* Dunnmy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "SetBulletVisibility");

	Params::BP_BulletBase_C_SetBulletVisibility Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);

	if (Dunnmy != nullptr)
		*Dunnmy = Parms.Dunnmy;
}


// Function BP_BulletBase.BP_BulletBase_C.OnMoveUpdate
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ResultLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Param_bImpactLand                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::OnMoveUpdate(float DeltaSeconds, struct FVector* ResultLocation, bool* bEnd, bool* Param_bImpactLand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "OnMoveUpdate");

	Params::BP_BulletBase_C_OnMoveUpdate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (ResultLocation != nullptr)
		*ResultLocation = std::move(Parms.ResultLocation);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;

	if (Param_bImpactLand != nullptr)
		*Param_bImpactLand = Parms.Param_bImpactLand;
}


// Function BP_BulletBase.BP_BulletBase_C.MoveUpdate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_BulletBase_C::MoveUpdate(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "MoveUpdate");

	Params::BP_BulletBase_C_MoveUpdate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletBase.BP_BulletBase_C.PostMove
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BulletBase_C::PostMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "PostMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BulletBase.BP_BulletBase_C.PrevCheckOnAttackActorHit
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::PrevCheckOnAttackActorHit(const struct FHCHitResult& HitResult, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "PrevCheckOnAttackActorHit");

	Params::BP_BulletBase_C_PrevCheckOnAttackActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_BulletBase.BP_BulletBase_C.OnAttackActorHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::OnAttackActorHit(struct FHCHitResult& HitResult, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "OnAttackActorHit");

	Params::BP_BulletBase_C_OnAttackActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_BulletBase.BP_BulletBase_C.UpdateDilation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BulletBase_C::UpdateDilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "UpdateDilation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BulletBase.BP_BulletBase_C.SetAttackDelayTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AttackCollisionDelayTime                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletBase_C::SetAttackDelayTime(float AttackCollisionDelayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "SetAttackDelayTime");

	Params::BP_BulletBase_C_SetAttackDelayTime Parms{};

	Parms.AttackCollisionDelayTime = AttackCollisionDelayTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletBase.BP_BulletBase_C.ForceEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::ForceEnd(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "ForceEnd");

	Params::BP_BulletBase_C_ForceEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_BulletBase.BP_BulletBase_C.IsEnableParallelTick
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BulletBase_C::IsEnableParallelTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "IsEnableParallelTick");

	Params::BP_BulletBase_C_IsEnableParallelTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletBase.BP_BulletBase_C.GetParallelTiming
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSParallelTiming                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ERSParallelTiming ABP_BulletBase_C::GetParallelTiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "GetParallelTiming");

	Params::BP_BulletBase_C_GetParallelTiming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletBase.BP_BulletBase_C.InterceptAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             Intercepter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattleCharacter_C*             NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::InterceptAttack(class ARSBattleCharacter_C* Intercepter, class ARSBattleCharacter_C* NewTarget, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "InterceptAttack");

	Params::BP_BulletBase_C_InterceptAttack Parms{};

	Parms.Intercepter = Intercepter;
	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_BulletBase.BP_BulletBase_C.InterceptReserve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::InterceptReserve(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "InterceptReserve");

	Params::BP_BulletBase_C_InterceptReserve Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_BulletBase.BP_BulletBase_C.InterceptCancel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::InterceptCancel(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "InterceptCancel");

	Params::BP_BulletBase_C_InterceptCancel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_BulletBase.BP_BulletBase_C.IsInterceptFail
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFail                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::IsInterceptFail(bool* bFail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "IsInterceptFail");

	Params::BP_BulletBase_C_IsInterceptFail Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFail != nullptr)
		*bFail = Parms.bFail;
}


// Function BP_BulletBase.BP_BulletBase_C.IsAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bAttack                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletBase_C::IsAttack(bool* Param_bAttack) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletBase_C", "IsAttack");

	Params::BP_BulletBase_C_IsAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bAttack != nullptr)
		*Param_bAttack = Parms.Param_bAttack;
}

}

