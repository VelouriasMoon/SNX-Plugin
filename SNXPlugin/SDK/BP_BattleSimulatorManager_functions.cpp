#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleSimulatorManager

#include "Basic.hpp"

#include "BP_BattleSimulatorManager_classes.hpp"
#include "BP_BattleSimulatorManager_parameters.hpp"


namespace SDK
{

// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.ExecuteUbergraph_BP_BattleSimulatorManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleSimulatorManager_C::ExecuteUbergraph_BP_BattleSimulatorManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "ExecuteUbergraph_BP_BattleSimulatorManager");

	Params::BP_BattleSimulatorManager_C_ExecuteUbergraph_BP_BattleSimulatorManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.OnFinishMissionBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleSimulatorManager_C::OnFinishMissionBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "OnFinishMissionBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.OnCancelMission
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleSimulatorManager_C::OnCancelMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "OnCancelMission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.OnSetPauseTimer
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleSimulatorManager_C::OnSetPauseTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "OnSetPauseTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.AddEndMissionEventCommand
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleSimulatorManager_C::AddEndMissionEventCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "AddEndMissionEventCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.IsDebugBattleSimulatorAccesFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleSimulatorManager_C::IsDebugBattleSimulatorAccesFlag(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "IsDebugBattleSimulatorAccesFlag");

	Params::BP_BattleSimulatorManager_C_IsDebugBattleSimulatorAccesFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_BattleSimulatorManager.BP_BattleSimulatorManager_C.IsOpenBattleSimulator
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattleSimulatorManager_C::IsOpenBattleSimulator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleSimulatorManager_C", "IsOpenBattleSimulator");

	Params::BP_BattleSimulatorManager_C_IsOpenBattleSimulator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

