#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerFixParamater

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerFixParamater.BP_PlayerFixParamater_C
// 0x0468 (0x0528 - 0x00C0)
class UBP_PlayerFixParamater_C final : public UActorComponent
{
public:
	float                                         INPUT_STICK_DODGE;                                 // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         INPUT_STICK_DEADZONE;                              // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_DISTANCE_SCALE;                              // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         THROW_OBJ_IGNORE_TIME_SECONDS;                     // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         THROW_OBJ_SLOW_RATE;                               // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintCameraLength;                                // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintCurveMaxAngle;                               // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JUMP_STEP_IN;                                      // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FORWARD_THROW_ANGLE;                               // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LR_THROW_ANGLE;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_ATTACK_ACCEPT_TIME;                          // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JUMP_ATTACK_INTERVAL;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DOWN_TIME_MIN;                                     // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DOWN_TIME_MAX;                                     // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_TARGET_ROTATE_ANGLE_NEAR;                    // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_TARGET_ROTATE_ANGLE_FAR;                     // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_TARGET_ROTATE_DIST_NEAR;                     // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_TARGET_ROTATE_DIST_FAR;                      // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         THROW_LOOP_SECONDS;                                // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FALL_LOOP_SECONDS;                                 // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COMBO_TIME;                                        // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_MOVE_SECONDS;                               // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_MOVE_SECONDS_REMOVE_STICK;                  // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_PARAM_RESET_ANGLE;                          // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BORING_IDLE_TRANSITION_TIME;                       // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BankPower;                                         // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_CAMERA_HEIGHT;                              // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_SEARCH_DISTANCE;                            // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_SEARCH_YAW;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_SEARCH_PITCH;                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_MOB_DISTANCE;                               // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_DISTANCE;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_TRACE_2ND_Z_OFFSET;                         // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BankBackPower;                                     // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BARRAGE_ATTACK_INPUT_INTERVAL;                     // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RUN_THROW_LOOP_SECONDS;                            // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RUN_FALL_LOOP_SECONDS;                             // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   InterpIK_Type;                                     // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4181[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LAND_EFFECT_SWITCH_SPEED;                          // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_TRACKING_ENABLE_ANGLE;                      // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_TRACKING_INTERP_SECONDS;                    // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_TRACKING_MAX_SPEED;                         // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_TRACKING_UPPER_PITCH;                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_TRACKING_LOWER_PITCH;                       // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAPTURE_CAMERA_LENGTH;                             // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAPTURE_CAMERA_INTERP_SECONDS;                     // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_DEFAULT_HEIGHT;                             // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SPRINT_JUMP_SPEED;                                 // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_ANGLE_PLAY;                                 // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_RANGE_NEAR;                                    // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_RANGE_FAR;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FLOOTED_DODGE_DISTANCE_RATE;                       // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_PITCH_MAX_UP_ANGLE;                         // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_PITCH_MAX_LOW_ANGLE;                        // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockonForceStopLength;                             // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockonForceStopRadius;                             // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockonForceStopAngle;                              // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockonNoInputDirAdjustAngle;                       // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockonDodgeForceStopLength;                        // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CONFUSION_CURE_RATE;                               // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CONFUSION_FRIEND_TARGET_PRIORITY_OFFSET;           // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_TELEPO_DISTANCE_RATE;                        // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicWeakHitStopRate;                            // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicWeakHitStopSeconds;                         // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialChangeWeakHitStopRate;                     // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialChangeWeakHitStopSeconds;                  // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyBadStatusHitStopRate;                         // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyBadStatusHitStopSeconds;                      // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashTriggerStopRate;                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashTriggerStopSeconds;                      // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmorBreakStopRate;                                // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmorBreakStopSeconds;                             // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerBadStatusHitStopRate;                        // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerBadStatusHitStopSeconds;                     // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponMaterialBattleClaimantName;                  // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_TIME_DEFAULT;                                 // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_TIME_ATTACK;                                  // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        BulletOffset;                                      // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FRotator>                       BulletRotator;                                     // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BulletRotatorRundomMin;                            // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletRotatorRundomMax;                            // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_PRTICLE_TIME_RATE;                            // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_OBJ_DELAY_TIME;                               // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_OBJ_ATTACK_RATE;                              // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthAttackBoostRate;                            // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_FPRCE_WARP_DISTANCE;                           // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_FPRCE_WARP_DISTANCE_BATTLE;                    // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_WARY_HP_RATE_1;                                // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_WARY_HP_RATE_2;                                // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_WARY_PROBABILITY_DOWN_1;                       // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_WARY_PROBABILITY_DOWN_2;                       // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageCutRate;                               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenKeepTime;                                    // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenIntervalTime;                                // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackD1WaitTime;                                  // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         INTERCEPT_RANGE;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AutoCounterRate;                                   // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoCounterRadiusRate;                             // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoCounterHalfHeightRate;                         // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoCounterCoolDownTimeMin;                        // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoCounterCoolDownTimeMax;                        // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         INPUT_STICK_WALK;                                  // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         INPUT_STICK_RUN;                                   // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOCKON_ANGLE_PLAY_CAMERAMOVE;                      // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_ATTACK_PROBABILITY_UP_TIME_1;                  // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_ATTACK_PROBABILITY_UP_TIME_2;                  // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_ATTACK_PROBABILITY_UP_VALUE_1;                 // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_ATTACK_PROBABILITY_UP_VALUE_2;                 // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_MOVE_PROBABILITY_DOWN_TIME;                    // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_MOVE_PROBABILITY_DOWN_VALUE;                   // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_OBJ_ATTACK_RATE_COMBO;                        // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_TIME_OFF;                                     // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExPsychicWeakHitStopRate;                          // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExPsychicWeakHitStopSeconds;                       // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExPsychicHitStopRate;                              // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExPsychicHitStopSeconds;                           // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllThrowPsychicHitStopRate;                        // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllThrowPsychicHitStopSeconds;                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDeadNormalAttackHitStopRate;                  // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDeadNormalAttackHitStopSeconds;               // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDeadPsychicAttackHitStopRate;                 // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDeadPsychicAttackHitStopSeconds;              // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectHitStopRate;                           // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectHitStopSeconds;                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnablePsychicAttackHitStopRate;                    // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnablePsychicAttackHitStopSeconds;                 // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableNormalAttackHitStopRate;                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableNormalAttackHitStopSeconds;                  // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComboPsychicAttackHitStopRate;                     // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComboPsychicAttackHitStopSeconds;                  // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectShotHitStopRate;                             // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectShotHitStopSeconds;                          // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptAttackHitStopRate;                        // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptAttackHitStopSeconds;                     // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EDeadPsychicAttackDelayTime;                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EDeadNormalAttackDelayTime;                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmorBreakDelayTime;                               // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashTriggerDelayTime;                        // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EBadStatusDelayTime;                               // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllThrowPsychicDelayTime;                          // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectDelayTime;                             // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnablePsychicAttackDelayTime;                      // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableNormalAttackDelayTime;                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComboPsychicAttackDelayTime;                       // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectShotDelayTime;                               // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptAttackDelayTime;                          // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PBadStatusDelayTime;                               // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyUniqueAttackHitStopRate;                      // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyUniqueAttackHitStopSeconds;                   // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDownHitStopRate;                              // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDownHitStopSeconds;                           // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyReactionLHitStopRate;                         // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyReactionLHitStopSeconds;                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BONDS_LEVEL_MIN;                                   // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BONDS_LEVEL_MAX;                                   // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyNormalAttackHitStopRate;                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyNormalAttackHitStopSeconds;                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitStopStartDelayTime;                             // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyBlowHitStopRate;                              // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyBlowHitStopSeconds;                           // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyAddDamageHitStopRate;                         // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyAddDamageHitStopSeconds;                      // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitStopMDelayTime;                                 // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitStopLDelayTime;                                 // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4182[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HitStopDelayTypeList;                              // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         EnemyDownPsychicHitStopRate;                       // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDownPsychicHitStopSeconds;                    // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyReactionLPsychicHitStopRate;                  // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyReactionLPsychicHitStopSeconds;               // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCReactionSRate;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCReactionSSec;                                  // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCUniqueReactionRate;                            // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCUniqueReactionSec;                             // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteWinceBonus;                                   // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteKnockBackBonus;                               // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteDownBonus;                                    // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageRateMin;                               // 0x03AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageRateMax;                               // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageSubTimeMin;                            // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageSubTimeMax;                            // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageRateMin_NPC;                           // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageRateMax_NPC;                           // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageSubTimeMin_NPC;                        // 0x03C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageSubTimeMax_NPC;                        // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageRateMin_EM;                            // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageRateMax_EM;                            // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageSubTimeMin_EM;                         // 0x03D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HardenDamageSubTimeMax_EM;                         // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COVER_DAMAGE_HP_RATE;                              // 0x03DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 COVER_DAMAGE_PROBABILITY_LETHAL;                   // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 COVER_DAMAGE_PROBABILITY_DAMAGE;                   // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         COVER_DAMAGE_INTERVAL;                             // 0x0400(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoStealthWithCh0700;                             // 0x0404(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCNormalAttackRate;                              // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCNormalAttackSec;                               // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_ATTACK_RATE;                                  // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_ATTACK_RATE_PLAYER;                           // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BRAIN_CRASH_ATTACK_PERCENT;                        // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnpcSpTriggerAttackStopRate;                       // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnpcSpTriggerAttackStopSec;                        // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PSYCHIC_COST;                                      // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PSYCHIC_UNIQUE_COST;                               // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4183[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPlayerHitStopType>                    PsychicObjPullAttackCauseTypeList;                 // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PSYCHIC_GAUGE_MAX_DEFAULT;                         // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PSYCHIC_GAUGE_AUTO_RECOVERY;                       // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PSYCHIC_GAUGE_AUTO_RECOVERY_BATTLE;                // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4184[0x4];                                     // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ITEM_COOL_TIME_LIST;                               // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PSYCHIC_GAUGE_ADD_DEFEATED;                        // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PSYCHIC_GAUGE_ADD_DEFEATED_BRAINCRASH;             // 0x0464(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicObjSlamHitStopRate;                         // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicObjSlamHitStopSeconds;                      // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerHitStopType>                    BrainFieldPsychicObjAttackCauseTypeList;           // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BrainfieldDropPsychicAttackRate;                   // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainfieldDropPsychicAttackSec;                    // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PLAYER_DYING_HP_RATE;                              // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RESSURRECT_HP_RATE;                                // 0x048C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AUTO_RESSURRECT_HP_RATE;                           // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AUTO_RESSURRECT_TIME;                              // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_HERO_CRASH_RATE;                               // 0x0498(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssassinAttackFailedPowerRate;                     // 0x049C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_ASSIST_ATTACK_PROBABILITY_UP_VALUE;            // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_INVINCIBLE_TIME;                             // 0x04A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_ATTACK_DAMAGE_RATE;                            // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_DEFENCE_DAMAGE_RATE;                           // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NOT_BATTLE_EXP_RATE;                               // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ADD_BONDS_KILL_ENEMY;                              // 0x04B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         STRONG_ENEMY_LV;                                   // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         STRONG_ENEMY_LV_DIFF;                              // 0x04BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         STRONG_BOSS_LV_DIFF;                               // 0x04C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_REVIVE_DISTANCE;                               // 0x04C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BRAINTALK_SAS_COMBO_CH0100;                        // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BRAINTALK_SAS_COMBO_CH0200;                        // 0x04CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BRAINTALK_SAS_COMBO_INTERVAL_CH0100;               // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BRAINTALK_SAS_COMBO_INTERVAL_CH0200;               // 0x04D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_REVIVE_DISTANCE_FAR;                           // 0x04D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BRAINTALK_FALL_HEIGHT;                             // 0x04DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SAS_EXTENDSTEALTH_TIME;                            // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SAS_EXTENDSTEALTH_TIME_LONG;                       // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PSYCHIC_COMBO_COST;                                // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EM8010_METAMORPHOSIS_ATTACK_SCALE;                 // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerHitStopType>                    UniqueObjHitInvincibleCauseTypeList;               // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         FLYING_ACTION_LIMIT_DISTANCE;                      // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_REACTION_RATE;                                // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COPY_BADSTATUS_RATE;                               // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_LIMIT_DAMAGE_RATE;                             // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_LIMIT_CRASH_RATE;                              // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         COMBINATIONVISION_PENALTY_RATE;                    // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_DEFENCE_DAMAGE_RATE_VISIONSIMULATOR;           // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BadStatusCablePlayVoiceDelayTime;                  // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoverAfterInvalidDamageTime;                     // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerFixParamater_C">();
	}
	static class UBP_PlayerFixParamater_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerFixParamater_C>();
	}
};
static_assert(alignof(UBP_PlayerFixParamater_C) == 0x000008, "Wrong alignment on UBP_PlayerFixParamater_C");
static_assert(sizeof(UBP_PlayerFixParamater_C) == 0x000528, "Wrong size on UBP_PlayerFixParamater_C");
static_assert(offsetof(UBP_PlayerFixParamater_C, INPUT_STICK_DODGE) == 0x0000C0, "Member 'UBP_PlayerFixParamater_C::INPUT_STICK_DODGE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, INPUT_STICK_DEADZONE) == 0x0000C4, "Member 'UBP_PlayerFixParamater_C::INPUT_STICK_DEADZONE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_DISTANCE_SCALE) == 0x0000C8, "Member 'UBP_PlayerFixParamater_C::DODGE_DISTANCE_SCALE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, THROW_OBJ_IGNORE_TIME_SECONDS) == 0x0000CC, "Member 'UBP_PlayerFixParamater_C::THROW_OBJ_IGNORE_TIME_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, THROW_OBJ_SLOW_RATE) == 0x0000D0, "Member 'UBP_PlayerFixParamater_C::THROW_OBJ_SLOW_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, SprintCameraLength) == 0x0000D4, "Member 'UBP_PlayerFixParamater_C::SprintCameraLength' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, SprintCurveMaxAngle) == 0x0000D8, "Member 'UBP_PlayerFixParamater_C::SprintCurveMaxAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, JUMP_STEP_IN) == 0x0000DC, "Member 'UBP_PlayerFixParamater_C::JUMP_STEP_IN' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, FORWARD_THROW_ANGLE) == 0x0000E0, "Member 'UBP_PlayerFixParamater_C::FORWARD_THROW_ANGLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LR_THROW_ANGLE) == 0x0000E4, "Member 'UBP_PlayerFixParamater_C::LR_THROW_ANGLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_ATTACK_ACCEPT_TIME) == 0x0000E8, "Member 'UBP_PlayerFixParamater_C::DODGE_ATTACK_ACCEPT_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, JUMP_ATTACK_INTERVAL) == 0x0000EC, "Member 'UBP_PlayerFixParamater_C::JUMP_ATTACK_INTERVAL' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DOWN_TIME_MIN) == 0x0000F0, "Member 'UBP_PlayerFixParamater_C::DOWN_TIME_MIN' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DOWN_TIME_MAX) == 0x0000F4, "Member 'UBP_PlayerFixParamater_C::DOWN_TIME_MAX' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_TARGET_ROTATE_ANGLE_NEAR) == 0x0000F8, "Member 'UBP_PlayerFixParamater_C::DODGE_TARGET_ROTATE_ANGLE_NEAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_TARGET_ROTATE_ANGLE_FAR) == 0x0000FC, "Member 'UBP_PlayerFixParamater_C::DODGE_TARGET_ROTATE_ANGLE_FAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_TARGET_ROTATE_DIST_NEAR) == 0x000100, "Member 'UBP_PlayerFixParamater_C::DODGE_TARGET_ROTATE_DIST_NEAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_TARGET_ROTATE_DIST_FAR) == 0x000104, "Member 'UBP_PlayerFixParamater_C::DODGE_TARGET_ROTATE_DIST_FAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, THROW_LOOP_SECONDS) == 0x000108, "Member 'UBP_PlayerFixParamater_C::THROW_LOOP_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, FALL_LOOP_SECONDS) == 0x00010C, "Member 'UBP_PlayerFixParamater_C::FALL_LOOP_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COMBO_TIME) == 0x000110, "Member 'UBP_PlayerFixParamater_C::COMBO_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_MOVE_SECONDS) == 0x000114, "Member 'UBP_PlayerFixParamater_C::LOCKON_MOVE_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_MOVE_SECONDS_REMOVE_STICK) == 0x000118, "Member 'UBP_PlayerFixParamater_C::LOCKON_MOVE_SECONDS_REMOVE_STICK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_PARAM_RESET_ANGLE) == 0x00011C, "Member 'UBP_PlayerFixParamater_C::LOCKON_PARAM_RESET_ANGLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BORING_IDLE_TRANSITION_TIME) == 0x000120, "Member 'UBP_PlayerFixParamater_C::BORING_IDLE_TRANSITION_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BankPower) == 0x000124, "Member 'UBP_PlayerFixParamater_C::BankPower' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_CAMERA_HEIGHT) == 0x000128, "Member 'UBP_PlayerFixParamater_C::LOCKON_CAMERA_HEIGHT' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_SEARCH_DISTANCE) == 0x00012C, "Member 'UBP_PlayerFixParamater_C::LOCKON_SEARCH_DISTANCE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_SEARCH_YAW) == 0x000130, "Member 'UBP_PlayerFixParamater_C::LOCKON_SEARCH_YAW' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_SEARCH_PITCH) == 0x000134, "Member 'UBP_PlayerFixParamater_C::LOCKON_SEARCH_PITCH' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_MOB_DISTANCE) == 0x000138, "Member 'UBP_PlayerFixParamater_C::LOCKON_MOB_DISTANCE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_DISTANCE) == 0x00013C, "Member 'UBP_PlayerFixParamater_C::LOCKON_DISTANCE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_TRACE_2ND_Z_OFFSET) == 0x000140, "Member 'UBP_PlayerFixParamater_C::LOCKON_TRACE_2ND_Z_OFFSET' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BankBackPower) == 0x000144, "Member 'UBP_PlayerFixParamater_C::BankBackPower' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BARRAGE_ATTACK_INPUT_INTERVAL) == 0x000148, "Member 'UBP_PlayerFixParamater_C::BARRAGE_ATTACK_INPUT_INTERVAL' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RUN_THROW_LOOP_SECONDS) == 0x00014C, "Member 'UBP_PlayerFixParamater_C::RUN_THROW_LOOP_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RUN_FALL_LOOP_SECONDS) == 0x000150, "Member 'UBP_PlayerFixParamater_C::RUN_FALL_LOOP_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, InterpIK_Type) == 0x000154, "Member 'UBP_PlayerFixParamater_C::InterpIK_Type' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LAND_EFFECT_SWITCH_SPEED) == 0x000158, "Member 'UBP_PlayerFixParamater_C::LAND_EFFECT_SWITCH_SPEED' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_TRACKING_ENABLE_ANGLE) == 0x00015C, "Member 'UBP_PlayerFixParamater_C::CAMERA_TRACKING_ENABLE_ANGLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_TRACKING_INTERP_SECONDS) == 0x000160, "Member 'UBP_PlayerFixParamater_C::CAMERA_TRACKING_INTERP_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_TRACKING_MAX_SPEED) == 0x000164, "Member 'UBP_PlayerFixParamater_C::CAMERA_TRACKING_MAX_SPEED' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_TRACKING_UPPER_PITCH) == 0x000168, "Member 'UBP_PlayerFixParamater_C::CAMERA_TRACKING_UPPER_PITCH' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_TRACKING_LOWER_PITCH) == 0x00016C, "Member 'UBP_PlayerFixParamater_C::CAMERA_TRACKING_LOWER_PITCH' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAPTURE_CAMERA_LENGTH) == 0x000170, "Member 'UBP_PlayerFixParamater_C::CAPTURE_CAMERA_LENGTH' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAPTURE_CAMERA_INTERP_SECONDS) == 0x000174, "Member 'UBP_PlayerFixParamater_C::CAPTURE_CAMERA_INTERP_SECONDS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_DEFAULT_HEIGHT) == 0x000178, "Member 'UBP_PlayerFixParamater_C::CAMERA_DEFAULT_HEIGHT' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, SPRINT_JUMP_SPEED) == 0x00017C, "Member 'UBP_PlayerFixParamater_C::SPRINT_JUMP_SPEED' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_ANGLE_PLAY) == 0x000180, "Member 'UBP_PlayerFixParamater_C::LOCKON_ANGLE_PLAY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_RANGE_NEAR) == 0x000184, "Member 'UBP_PlayerFixParamater_C::NPC_RANGE_NEAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_RANGE_FAR) == 0x000188, "Member 'UBP_PlayerFixParamater_C::NPC_RANGE_FAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, FLOOTED_DODGE_DISTANCE_RATE) == 0x00018C, "Member 'UBP_PlayerFixParamater_C::FLOOTED_DODGE_DISTANCE_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_PITCH_MAX_UP_ANGLE) == 0x000190, "Member 'UBP_PlayerFixParamater_C::CAMERA_PITCH_MAX_UP_ANGLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CAMERA_PITCH_MAX_LOW_ANGLE) == 0x000194, "Member 'UBP_PlayerFixParamater_C::CAMERA_PITCH_MAX_LOW_ANGLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LockonForceStopLength) == 0x000198, "Member 'UBP_PlayerFixParamater_C::LockonForceStopLength' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LockonForceStopRadius) == 0x00019C, "Member 'UBP_PlayerFixParamater_C::LockonForceStopRadius' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LockonForceStopAngle) == 0x0001A0, "Member 'UBP_PlayerFixParamater_C::LockonForceStopAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LockonNoInputDirAdjustAngle) == 0x0001A4, "Member 'UBP_PlayerFixParamater_C::LockonNoInputDirAdjustAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LockonDodgeForceStopLength) == 0x0001A8, "Member 'UBP_PlayerFixParamater_C::LockonDodgeForceStopLength' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CONFUSION_CURE_RATE) == 0x0001AC, "Member 'UBP_PlayerFixParamater_C::CONFUSION_CURE_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, CONFUSION_FRIEND_TARGET_PRIORITY_OFFSET) == 0x0001B0, "Member 'UBP_PlayerFixParamater_C::CONFUSION_FRIEND_TARGET_PRIORITY_OFFSET' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_TELEPO_DISTANCE_RATE) == 0x0001B4, "Member 'UBP_PlayerFixParamater_C::DODGE_TELEPO_DISTANCE_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PsychicWeakHitStopRate) == 0x0001B8, "Member 'UBP_PlayerFixParamater_C::PsychicWeakHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PsychicWeakHitStopSeconds) == 0x0001BC, "Member 'UBP_PlayerFixParamater_C::PsychicWeakHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, MaterialChangeWeakHitStopRate) == 0x0001C0, "Member 'UBP_PlayerFixParamater_C::MaterialChangeWeakHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, MaterialChangeWeakHitStopSeconds) == 0x0001C4, "Member 'UBP_PlayerFixParamater_C::MaterialChangeWeakHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyBadStatusHitStopRate) == 0x0001C8, "Member 'UBP_PlayerFixParamater_C::EnemyBadStatusHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyBadStatusHitStopSeconds) == 0x0001CC, "Member 'UBP_PlayerFixParamater_C::EnemyBadStatusHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BrainCrashTriggerStopRate) == 0x0001D0, "Member 'UBP_PlayerFixParamater_C::BrainCrashTriggerStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BrainCrashTriggerStopSeconds) == 0x0001D4, "Member 'UBP_PlayerFixParamater_C::BrainCrashTriggerStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ArmorBreakStopRate) == 0x0001D8, "Member 'UBP_PlayerFixParamater_C::ArmorBreakStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ArmorBreakStopSeconds) == 0x0001DC, "Member 'UBP_PlayerFixParamater_C::ArmorBreakStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PlayerBadStatusHitStopRate) == 0x0001E0, "Member 'UBP_PlayerFixParamater_C::PlayerBadStatusHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PlayerBadStatusHitStopSeconds) == 0x0001E4, "Member 'UBP_PlayerFixParamater_C::PlayerBadStatusHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, WeaponMaterialBattleClaimantName) == 0x0001E8, "Member 'UBP_PlayerFixParamater_C::WeaponMaterialBattleClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_TIME_DEFAULT) == 0x0001F0, "Member 'UBP_PlayerFixParamater_C::COPY_TIME_DEFAULT' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_TIME_ATTACK) == 0x0001F4, "Member 'UBP_PlayerFixParamater_C::COPY_TIME_ATTACK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BulletOffset) == 0x0001F8, "Member 'UBP_PlayerFixParamater_C::BulletOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BulletRotator) == 0x000208, "Member 'UBP_PlayerFixParamater_C::BulletRotator' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BulletRotatorRundomMin) == 0x000218, "Member 'UBP_PlayerFixParamater_C::BulletRotatorRundomMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BulletRotatorRundomMax) == 0x00021C, "Member 'UBP_PlayerFixParamater_C::BulletRotatorRundomMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_PRTICLE_TIME_RATE) == 0x000220, "Member 'UBP_PlayerFixParamater_C::COPY_PRTICLE_TIME_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_OBJ_DELAY_TIME) == 0x000224, "Member 'UBP_PlayerFixParamater_C::COPY_OBJ_DELAY_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_OBJ_ATTACK_RATE) == 0x000228, "Member 'UBP_PlayerFixParamater_C::COPY_OBJ_ATTACK_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, StealthAttackBoostRate) == 0x00022C, "Member 'UBP_PlayerFixParamater_C::StealthAttackBoostRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_FPRCE_WARP_DISTANCE) == 0x000230, "Member 'UBP_PlayerFixParamater_C::NPC_FPRCE_WARP_DISTANCE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_FPRCE_WARP_DISTANCE_BATTLE) == 0x000234, "Member 'UBP_PlayerFixParamater_C::NPC_FPRCE_WARP_DISTANCE_BATTLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_WARY_HP_RATE_1) == 0x000238, "Member 'UBP_PlayerFixParamater_C::NPC_WARY_HP_RATE_1' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_WARY_HP_RATE_2) == 0x00023C, "Member 'UBP_PlayerFixParamater_C::NPC_WARY_HP_RATE_2' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_WARY_PROBABILITY_DOWN_1) == 0x000240, "Member 'UBP_PlayerFixParamater_C::NPC_WARY_PROBABILITY_DOWN_1' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_WARY_PROBABILITY_DOWN_2) == 0x000244, "Member 'UBP_PlayerFixParamater_C::NPC_WARY_PROBABILITY_DOWN_2' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageCutRate) == 0x000248, "Member 'UBP_PlayerFixParamater_C::HardenDamageCutRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenKeepTime) == 0x00024C, "Member 'UBP_PlayerFixParamater_C::HardenKeepTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenIntervalTime) == 0x000250, "Member 'UBP_PlayerFixParamater_C::HardenIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AttackD1WaitTime) == 0x000254, "Member 'UBP_PlayerFixParamater_C::AttackD1WaitTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, INTERCEPT_RANGE) == 0x000258, "Member 'UBP_PlayerFixParamater_C::INTERCEPT_RANGE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AutoCounterRate) == 0x00025C, "Member 'UBP_PlayerFixParamater_C::AutoCounterRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AutoCounterRadiusRate) == 0x000260, "Member 'UBP_PlayerFixParamater_C::AutoCounterRadiusRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AutoCounterHalfHeightRate) == 0x000264, "Member 'UBP_PlayerFixParamater_C::AutoCounterHalfHeightRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AutoCounterCoolDownTimeMin) == 0x000268, "Member 'UBP_PlayerFixParamater_C::AutoCounterCoolDownTimeMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AutoCounterCoolDownTimeMax) == 0x00026C, "Member 'UBP_PlayerFixParamater_C::AutoCounterCoolDownTimeMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, INPUT_STICK_WALK) == 0x000270, "Member 'UBP_PlayerFixParamater_C::INPUT_STICK_WALK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, INPUT_STICK_RUN) == 0x000274, "Member 'UBP_PlayerFixParamater_C::INPUT_STICK_RUN' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, LOCKON_ANGLE_PLAY_CAMERAMOVE) == 0x000278, "Member 'UBP_PlayerFixParamater_C::LOCKON_ANGLE_PLAY_CAMERAMOVE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_ATTACK_PROBABILITY_UP_TIME_1) == 0x00027C, "Member 'UBP_PlayerFixParamater_C::NPC_ATTACK_PROBABILITY_UP_TIME_1' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_ATTACK_PROBABILITY_UP_TIME_2) == 0x000280, "Member 'UBP_PlayerFixParamater_C::NPC_ATTACK_PROBABILITY_UP_TIME_2' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_ATTACK_PROBABILITY_UP_VALUE_1) == 0x000284, "Member 'UBP_PlayerFixParamater_C::NPC_ATTACK_PROBABILITY_UP_VALUE_1' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_ATTACK_PROBABILITY_UP_VALUE_2) == 0x000288, "Member 'UBP_PlayerFixParamater_C::NPC_ATTACK_PROBABILITY_UP_VALUE_2' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_MOVE_PROBABILITY_DOWN_TIME) == 0x00028C, "Member 'UBP_PlayerFixParamater_C::NPC_MOVE_PROBABILITY_DOWN_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_MOVE_PROBABILITY_DOWN_VALUE) == 0x000290, "Member 'UBP_PlayerFixParamater_C::NPC_MOVE_PROBABILITY_DOWN_VALUE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_OBJ_ATTACK_RATE_COMBO) == 0x000294, "Member 'UBP_PlayerFixParamater_C::COPY_OBJ_ATTACK_RATE_COMBO' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_TIME_OFF) == 0x000298, "Member 'UBP_PlayerFixParamater_C::COPY_TIME_OFF' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ExPsychicWeakHitStopRate) == 0x00029C, "Member 'UBP_PlayerFixParamater_C::ExPsychicWeakHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ExPsychicWeakHitStopSeconds) == 0x0002A0, "Member 'UBP_PlayerFixParamater_C::ExPsychicWeakHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ExPsychicHitStopRate) == 0x0002A4, "Member 'UBP_PlayerFixParamater_C::ExPsychicHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ExPsychicHitStopSeconds) == 0x0002A8, "Member 'UBP_PlayerFixParamater_C::ExPsychicHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AllThrowPsychicHitStopRate) == 0x0002AC, "Member 'UBP_PlayerFixParamater_C::AllThrowPsychicHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AllThrowPsychicHitStopSeconds) == 0x0002B0, "Member 'UBP_PlayerFixParamater_C::AllThrowPsychicHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDeadNormalAttackHitStopRate) == 0x0002B4, "Member 'UBP_PlayerFixParamater_C::EnemyDeadNormalAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDeadNormalAttackHitStopSeconds) == 0x0002B8, "Member 'UBP_PlayerFixParamater_C::EnemyDeadNormalAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDeadPsychicAttackHitStopRate) == 0x0002BC, "Member 'UBP_PlayerFixParamater_C::EnemyDeadPsychicAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDeadPsychicAttackHitStopSeconds) == 0x0002C0, "Member 'UBP_PlayerFixParamater_C::EnemyDeadPsychicAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, UniqueObjectHitStopRate) == 0x0002C4, "Member 'UBP_PlayerFixParamater_C::UniqueObjectHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, UniqueObjectHitStopSeconds) == 0x0002C8, "Member 'UBP_PlayerFixParamater_C::UniqueObjectHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnablePsychicAttackHitStopRate) == 0x0002CC, "Member 'UBP_PlayerFixParamater_C::EnablePsychicAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnablePsychicAttackHitStopSeconds) == 0x0002D0, "Member 'UBP_PlayerFixParamater_C::EnablePsychicAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnableNormalAttackHitStopRate) == 0x0002D4, "Member 'UBP_PlayerFixParamater_C::EnableNormalAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnableNormalAttackHitStopSeconds) == 0x0002D8, "Member 'UBP_PlayerFixParamater_C::EnableNormalAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ComboPsychicAttackHitStopRate) == 0x0002DC, "Member 'UBP_PlayerFixParamater_C::ComboPsychicAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ComboPsychicAttackHitStopSeconds) == 0x0002E0, "Member 'UBP_PlayerFixParamater_C::ComboPsychicAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DirectShotHitStopRate) == 0x0002E4, "Member 'UBP_PlayerFixParamater_C::DirectShotHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DirectShotHitStopSeconds) == 0x0002E8, "Member 'UBP_PlayerFixParamater_C::DirectShotHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, InterceptAttackHitStopRate) == 0x0002EC, "Member 'UBP_PlayerFixParamater_C::InterceptAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, InterceptAttackHitStopSeconds) == 0x0002F0, "Member 'UBP_PlayerFixParamater_C::InterceptAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EDeadPsychicAttackDelayTime) == 0x0002F4, "Member 'UBP_PlayerFixParamater_C::EDeadPsychicAttackDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EDeadNormalAttackDelayTime) == 0x0002F8, "Member 'UBP_PlayerFixParamater_C::EDeadNormalAttackDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ArmorBreakDelayTime) == 0x0002FC, "Member 'UBP_PlayerFixParamater_C::ArmorBreakDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BrainCrashTriggerDelayTime) == 0x000300, "Member 'UBP_PlayerFixParamater_C::BrainCrashTriggerDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EBadStatusDelayTime) == 0x000304, "Member 'UBP_PlayerFixParamater_C::EBadStatusDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AllThrowPsychicDelayTime) == 0x000308, "Member 'UBP_PlayerFixParamater_C::AllThrowPsychicDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, UniqueObjectDelayTime) == 0x00030C, "Member 'UBP_PlayerFixParamater_C::UniqueObjectDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnablePsychicAttackDelayTime) == 0x000310, "Member 'UBP_PlayerFixParamater_C::EnablePsychicAttackDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnableNormalAttackDelayTime) == 0x000314, "Member 'UBP_PlayerFixParamater_C::EnableNormalAttackDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ComboPsychicAttackDelayTime) == 0x000318, "Member 'UBP_PlayerFixParamater_C::ComboPsychicAttackDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DirectShotDelayTime) == 0x00031C, "Member 'UBP_PlayerFixParamater_C::DirectShotDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, InterceptAttackDelayTime) == 0x000320, "Member 'UBP_PlayerFixParamater_C::InterceptAttackDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PBadStatusDelayTime) == 0x000324, "Member 'UBP_PlayerFixParamater_C::PBadStatusDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyUniqueAttackHitStopRate) == 0x000328, "Member 'UBP_PlayerFixParamater_C::EnemyUniqueAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyUniqueAttackHitStopSeconds) == 0x00032C, "Member 'UBP_PlayerFixParamater_C::EnemyUniqueAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDownHitStopRate) == 0x000330, "Member 'UBP_PlayerFixParamater_C::EnemyDownHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDownHitStopSeconds) == 0x000334, "Member 'UBP_PlayerFixParamater_C::EnemyDownHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyReactionLHitStopRate) == 0x000338, "Member 'UBP_PlayerFixParamater_C::EnemyReactionLHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyReactionLHitStopSeconds) == 0x00033C, "Member 'UBP_PlayerFixParamater_C::EnemyReactionLHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BONDS_LEVEL_MIN) == 0x000340, "Member 'UBP_PlayerFixParamater_C::BONDS_LEVEL_MIN' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BONDS_LEVEL_MAX) == 0x000344, "Member 'UBP_PlayerFixParamater_C::BONDS_LEVEL_MAX' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyNormalAttackHitStopRate) == 0x000348, "Member 'UBP_PlayerFixParamater_C::EnemyNormalAttackHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyNormalAttackHitStopSeconds) == 0x00034C, "Member 'UBP_PlayerFixParamater_C::EnemyNormalAttackHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HitStopStartDelayTime) == 0x000350, "Member 'UBP_PlayerFixParamater_C::HitStopStartDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyBlowHitStopRate) == 0x000354, "Member 'UBP_PlayerFixParamater_C::EnemyBlowHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyBlowHitStopSeconds) == 0x000358, "Member 'UBP_PlayerFixParamater_C::EnemyBlowHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyAddDamageHitStopRate) == 0x00035C, "Member 'UBP_PlayerFixParamater_C::EnemyAddDamageHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyAddDamageHitStopSeconds) == 0x000360, "Member 'UBP_PlayerFixParamater_C::EnemyAddDamageHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HitStopMDelayTime) == 0x000364, "Member 'UBP_PlayerFixParamater_C::HitStopMDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HitStopLDelayTime) == 0x000368, "Member 'UBP_PlayerFixParamater_C::HitStopLDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HitStopDelayTypeList) == 0x000370, "Member 'UBP_PlayerFixParamater_C::HitStopDelayTypeList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDownPsychicHitStopRate) == 0x000380, "Member 'UBP_PlayerFixParamater_C::EnemyDownPsychicHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyDownPsychicHitStopSeconds) == 0x000384, "Member 'UBP_PlayerFixParamater_C::EnemyDownPsychicHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyReactionLPsychicHitStopRate) == 0x000388, "Member 'UBP_PlayerFixParamater_C::EnemyReactionLPsychicHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnemyReactionLPsychicHitStopSeconds) == 0x00038C, "Member 'UBP_PlayerFixParamater_C::EnemyReactionLPsychicHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ENPCReactionSRate) == 0x000390, "Member 'UBP_PlayerFixParamater_C::ENPCReactionSRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ENPCReactionSSec) == 0x000394, "Member 'UBP_PlayerFixParamater_C::ENPCReactionSSec' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ENPCUniqueReactionRate) == 0x000398, "Member 'UBP_PlayerFixParamater_C::ENPCUniqueReactionRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ENPCUniqueReactionSec) == 0x00039C, "Member 'UBP_PlayerFixParamater_C::ENPCUniqueReactionSec' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RouteWinceBonus) == 0x0003A0, "Member 'UBP_PlayerFixParamater_C::RouteWinceBonus' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RouteKnockBackBonus) == 0x0003A4, "Member 'UBP_PlayerFixParamater_C::RouteKnockBackBonus' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RouteDownBonus) == 0x0003A8, "Member 'UBP_PlayerFixParamater_C::RouteDownBonus' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageRateMin) == 0x0003AC, "Member 'UBP_PlayerFixParamater_C::HardenDamageRateMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageRateMax) == 0x0003B0, "Member 'UBP_PlayerFixParamater_C::HardenDamageRateMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageSubTimeMin) == 0x0003B4, "Member 'UBP_PlayerFixParamater_C::HardenDamageSubTimeMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageSubTimeMax) == 0x0003B8, "Member 'UBP_PlayerFixParamater_C::HardenDamageSubTimeMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageRateMin_NPC) == 0x0003BC, "Member 'UBP_PlayerFixParamater_C::HardenDamageRateMin_NPC' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageRateMax_NPC) == 0x0003C0, "Member 'UBP_PlayerFixParamater_C::HardenDamageRateMax_NPC' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageSubTimeMin_NPC) == 0x0003C4, "Member 'UBP_PlayerFixParamater_C::HardenDamageSubTimeMin_NPC' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageSubTimeMax_NPC) == 0x0003C8, "Member 'UBP_PlayerFixParamater_C::HardenDamageSubTimeMax_NPC' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageRateMin_EM) == 0x0003CC, "Member 'UBP_PlayerFixParamater_C::HardenDamageRateMin_EM' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageRateMax_EM) == 0x0003D0, "Member 'UBP_PlayerFixParamater_C::HardenDamageRateMax_EM' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageSubTimeMin_EM) == 0x0003D4, "Member 'UBP_PlayerFixParamater_C::HardenDamageSubTimeMin_EM' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, HardenDamageSubTimeMax_EM) == 0x0003D8, "Member 'UBP_PlayerFixParamater_C::HardenDamageSubTimeMax_EM' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COVER_DAMAGE_HP_RATE) == 0x0003DC, "Member 'UBP_PlayerFixParamater_C::COVER_DAMAGE_HP_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COVER_DAMAGE_PROBABILITY_LETHAL) == 0x0003E0, "Member 'UBP_PlayerFixParamater_C::COVER_DAMAGE_PROBABILITY_LETHAL' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COVER_DAMAGE_PROBABILITY_DAMAGE) == 0x0003F0, "Member 'UBP_PlayerFixParamater_C::COVER_DAMAGE_PROBABILITY_DAMAGE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COVER_DAMAGE_INTERVAL) == 0x000400, "Member 'UBP_PlayerFixParamater_C::COVER_DAMAGE_INTERVAL' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AutoStealthWithCh0700) == 0x000404, "Member 'UBP_PlayerFixParamater_C::AutoStealthWithCh0700' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ENPCNormalAttackRate) == 0x000408, "Member 'UBP_PlayerFixParamater_C::ENPCNormalAttackRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ENPCNormalAttackSec) == 0x00040C, "Member 'UBP_PlayerFixParamater_C::ENPCNormalAttackSec' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_ATTACK_RATE) == 0x000410, "Member 'UBP_PlayerFixParamater_C::COPY_ATTACK_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_ATTACK_RATE_PLAYER) == 0x000414, "Member 'UBP_PlayerFixParamater_C::COPY_ATTACK_RATE_PLAYER' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BRAIN_CRASH_ATTACK_PERCENT) == 0x000418, "Member 'UBP_PlayerFixParamater_C::BRAIN_CRASH_ATTACK_PERCENT' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnpcSpTriggerAttackStopRate) == 0x00041C, "Member 'UBP_PlayerFixParamater_C::EnpcSpTriggerAttackStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EnpcSpTriggerAttackStopSec) == 0x000420, "Member 'UBP_PlayerFixParamater_C::EnpcSpTriggerAttackStopSec' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_COST) == 0x000424, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_COST' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_UNIQUE_COST) == 0x000428, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_UNIQUE_COST' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PsychicObjPullAttackCauseTypeList) == 0x000430, "Member 'UBP_PlayerFixParamater_C::PsychicObjPullAttackCauseTypeList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_GAUGE_MAX_DEFAULT) == 0x000440, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_GAUGE_MAX_DEFAULT' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_GAUGE_AUTO_RECOVERY) == 0x000444, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_GAUGE_AUTO_RECOVERY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_GAUGE_AUTO_RECOVERY_BATTLE) == 0x000448, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_GAUGE_AUTO_RECOVERY_BATTLE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ITEM_COOL_TIME_LIST) == 0x000450, "Member 'UBP_PlayerFixParamater_C::ITEM_COOL_TIME_LIST' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_GAUGE_ADD_DEFEATED) == 0x000460, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_GAUGE_ADD_DEFEATED' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_GAUGE_ADD_DEFEATED_BRAINCRASH) == 0x000464, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_GAUGE_ADD_DEFEATED_BRAINCRASH' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PsychicObjSlamHitStopRate) == 0x000468, "Member 'UBP_PlayerFixParamater_C::PsychicObjSlamHitStopRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PsychicObjSlamHitStopSeconds) == 0x00046C, "Member 'UBP_PlayerFixParamater_C::PsychicObjSlamHitStopSeconds' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BrainFieldPsychicObjAttackCauseTypeList) == 0x000470, "Member 'UBP_PlayerFixParamater_C::BrainFieldPsychicObjAttackCauseTypeList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BrainfieldDropPsychicAttackRate) == 0x000480, "Member 'UBP_PlayerFixParamater_C::BrainfieldDropPsychicAttackRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BrainfieldDropPsychicAttackSec) == 0x000484, "Member 'UBP_PlayerFixParamater_C::BrainfieldDropPsychicAttackSec' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PLAYER_DYING_HP_RATE) == 0x000488, "Member 'UBP_PlayerFixParamater_C::PLAYER_DYING_HP_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RESSURRECT_HP_RATE) == 0x00048C, "Member 'UBP_PlayerFixParamater_C::RESSURRECT_HP_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AUTO_RESSURRECT_HP_RATE) == 0x000490, "Member 'UBP_PlayerFixParamater_C::AUTO_RESSURRECT_HP_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AUTO_RESSURRECT_TIME) == 0x000494, "Member 'UBP_PlayerFixParamater_C::AUTO_RESSURRECT_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_HERO_CRASH_RATE) == 0x000498, "Member 'UBP_PlayerFixParamater_C::NPC_HERO_CRASH_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, AssassinAttackFailedPowerRate) == 0x00049C, "Member 'UBP_PlayerFixParamater_C::AssassinAttackFailedPowerRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_ASSIST_ATTACK_PROBABILITY_UP_VALUE) == 0x0004A0, "Member 'UBP_PlayerFixParamater_C::NPC_ASSIST_ATTACK_PROBABILITY_UP_VALUE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, DODGE_INVINCIBLE_TIME) == 0x0004A4, "Member 'UBP_PlayerFixParamater_C::DODGE_INVINCIBLE_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_ATTACK_DAMAGE_RATE) == 0x0004A8, "Member 'UBP_PlayerFixParamater_C::NPC_ATTACK_DAMAGE_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_DEFENCE_DAMAGE_RATE) == 0x0004AC, "Member 'UBP_PlayerFixParamater_C::NPC_DEFENCE_DAMAGE_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NOT_BATTLE_EXP_RATE) == 0x0004B0, "Member 'UBP_PlayerFixParamater_C::NOT_BATTLE_EXP_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, ADD_BONDS_KILL_ENEMY) == 0x0004B4, "Member 'UBP_PlayerFixParamater_C::ADD_BONDS_KILL_ENEMY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, STRONG_ENEMY_LV) == 0x0004B8, "Member 'UBP_PlayerFixParamater_C::STRONG_ENEMY_LV' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, STRONG_ENEMY_LV_DIFF) == 0x0004BC, "Member 'UBP_PlayerFixParamater_C::STRONG_ENEMY_LV_DIFF' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, STRONG_BOSS_LV_DIFF) == 0x0004C0, "Member 'UBP_PlayerFixParamater_C::STRONG_BOSS_LV_DIFF' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_REVIVE_DISTANCE) == 0x0004C4, "Member 'UBP_PlayerFixParamater_C::NPC_REVIVE_DISTANCE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BRAINTALK_SAS_COMBO_CH0100) == 0x0004C8, "Member 'UBP_PlayerFixParamater_C::BRAINTALK_SAS_COMBO_CH0100' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BRAINTALK_SAS_COMBO_CH0200) == 0x0004CC, "Member 'UBP_PlayerFixParamater_C::BRAINTALK_SAS_COMBO_CH0200' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BRAINTALK_SAS_COMBO_INTERVAL_CH0100) == 0x0004D0, "Member 'UBP_PlayerFixParamater_C::BRAINTALK_SAS_COMBO_INTERVAL_CH0100' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BRAINTALK_SAS_COMBO_INTERVAL_CH0200) == 0x0004D4, "Member 'UBP_PlayerFixParamater_C::BRAINTALK_SAS_COMBO_INTERVAL_CH0200' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_REVIVE_DISTANCE_FAR) == 0x0004D8, "Member 'UBP_PlayerFixParamater_C::NPC_REVIVE_DISTANCE_FAR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BRAINTALK_FALL_HEIGHT) == 0x0004DC, "Member 'UBP_PlayerFixParamater_C::BRAINTALK_FALL_HEIGHT' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, SAS_EXTENDSTEALTH_TIME) == 0x0004E0, "Member 'UBP_PlayerFixParamater_C::SAS_EXTENDSTEALTH_TIME' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, SAS_EXTENDSTEALTH_TIME_LONG) == 0x0004E4, "Member 'UBP_PlayerFixParamater_C::SAS_EXTENDSTEALTH_TIME_LONG' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, PSYCHIC_COMBO_COST) == 0x0004E8, "Member 'UBP_PlayerFixParamater_C::PSYCHIC_COMBO_COST' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, EM8010_METAMORPHOSIS_ATTACK_SCALE) == 0x0004EC, "Member 'UBP_PlayerFixParamater_C::EM8010_METAMORPHOSIS_ATTACK_SCALE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, UniqueObjHitInvincibleCauseTypeList) == 0x0004F0, "Member 'UBP_PlayerFixParamater_C::UniqueObjHitInvincibleCauseTypeList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, FLYING_ACTION_LIMIT_DISTANCE) == 0x000500, "Member 'UBP_PlayerFixParamater_C::FLYING_ACTION_LIMIT_DISTANCE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_REACTION_RATE) == 0x000504, "Member 'UBP_PlayerFixParamater_C::COPY_REACTION_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COPY_BADSTATUS_RATE) == 0x000508, "Member 'UBP_PlayerFixParamater_C::COPY_BADSTATUS_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, MAX_LIMIT_DAMAGE_RATE) == 0x00050C, "Member 'UBP_PlayerFixParamater_C::MAX_LIMIT_DAMAGE_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, MAX_LIMIT_CRASH_RATE) == 0x000510, "Member 'UBP_PlayerFixParamater_C::MAX_LIMIT_CRASH_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, COMBINATIONVISION_PENALTY_RATE) == 0x000514, "Member 'UBP_PlayerFixParamater_C::COMBINATIONVISION_PENALTY_RATE' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, NPC_DEFENCE_DAMAGE_RATE_VISIONSIMULATOR) == 0x000518, "Member 'UBP_PlayerFixParamater_C::NPC_DEFENCE_DAMAGE_RATE_VISIONSIMULATOR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, BadStatusCablePlayVoiceDelayTime) == 0x00051C, "Member 'UBP_PlayerFixParamater_C::BadStatusCablePlayVoiceDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFixParamater_C, RecoverAfterInvalidDamageTime) == 0x000520, "Member 'UBP_PlayerFixParamater_C::RecoverAfterInvalidDamageTime' has a wrong offset!");

}

