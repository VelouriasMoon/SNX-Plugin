#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotifyState_AutoAimBP

#include "Basic.hpp"

#include "ECharaExecuteNotifyKind_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnimNotifyState_AutoAimBP.AnimNotifyState_AutoAimBP_C
// 0x0030 (0x0060 - 0x0030)
class UAnimNotifyState_AutoAimBP_C final : public UAnimNotifyState
{
public:
	float                                         AimSpeed;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimSpeedInternalLock;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAimAngle;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToTargetBrainCrash;                                // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInternalLock;                                    // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsToCamera;                                        // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsToWeakPoint;                                     // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSocketRotation;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5124[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bToTalkLocation;                                   // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharaExecuteNotifyKind                       ExecuteKind;                                       // 0x004E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5125[0x1];                                     // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetDegree;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDirectionOfRotation                          DirectionOfRotate;                                 // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5126[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrontDegree;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCharacterRate;                                 // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FindTargetWhenNoTarget;                            // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDetectTargetChange;                              // 0x005E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration) const;
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotifyState_AutoAimBP_C">();
	}
	static class UAnimNotifyState_AutoAimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_AutoAimBP_C>();
	}
};
static_assert(alignof(UAnimNotifyState_AutoAimBP_C) == 0x000008, "Wrong alignment on UAnimNotifyState_AutoAimBP_C");
static_assert(sizeof(UAnimNotifyState_AutoAimBP_C) == 0x000060, "Wrong size on UAnimNotifyState_AutoAimBP_C");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, AimSpeed) == 0x000030, "Member 'UAnimNotifyState_AutoAimBP_C::AimSpeed' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, AimSpeedInternalLock) == 0x000034, "Member 'UAnimNotifyState_AutoAimBP_C::AimSpeedInternalLock' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, MaxAimAngle) == 0x000038, "Member 'UAnimNotifyState_AutoAimBP_C::MaxAimAngle' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, ToTargetBrainCrash) == 0x00003C, "Member 'UAnimNotifyState_AutoAimBP_C::ToTargetBrainCrash' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, IsInternalLock) == 0x00003D, "Member 'UAnimNotifyState_AutoAimBP_C::IsInternalLock' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, IsToCamera) == 0x00003E, "Member 'UAnimNotifyState_AutoAimBP_C::IsToCamera' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, IsToWeakPoint) == 0x00003F, "Member 'UAnimNotifyState_AutoAimBP_C::IsToWeakPoint' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, IsSocketRotation) == 0x000040, "Member 'UAnimNotifyState_AutoAimBP_C::IsSocketRotation' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, SocketName) == 0x000044, "Member 'UAnimNotifyState_AutoAimBP_C::SocketName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, bHologram) == 0x00004C, "Member 'UAnimNotifyState_AutoAimBP_C::bHologram' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, bToTalkLocation) == 0x00004D, "Member 'UAnimNotifyState_AutoAimBP_C::bToTalkLocation' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, ExecuteKind) == 0x00004E, "Member 'UAnimNotifyState_AutoAimBP_C::ExecuteKind' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, OffsetDegree) == 0x000050, "Member 'UAnimNotifyState_AutoAimBP_C::OffsetDegree' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, DirectionOfRotate) == 0x000054, "Member 'UAnimNotifyState_AutoAimBP_C::DirectionOfRotate' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, FrontDegree) == 0x000058, "Member 'UAnimNotifyState_AutoAimBP_C::FrontDegree' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, bUseCharacterRate) == 0x00005C, "Member 'UAnimNotifyState_AutoAimBP_C::bUseCharacterRate' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, FindTargetWhenNoTarget) == 0x00005D, "Member 'UAnimNotifyState_AutoAimBP_C::FindTargetWhenNoTarget' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_AutoAimBP_C, IsDetectTargetChange) == 0x00005E, "Member 'UAnimNotifyState_AutoAimBP_C::IsDetectTargetChange' has a wrong offset!");

}

