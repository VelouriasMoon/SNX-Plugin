#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SceneManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_SceneManagerStatus_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "E_SceneType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SceneManager.BP_SceneManager_C
// 0x00F8 (0x03C0 - 0x02C8)
class ABP_SceneManager_C final : public ASceneManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelManager_C*                     LevelManager;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitialized;                                      // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8286[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         HUDManager;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLocationID;                                 // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAreaID;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPortalID;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentVariationID;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CurrentSceneArgs;                                  // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         BeforeLocationID;                                  // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeforeAreaID;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SceneManagerStatus                          CurrentStatus;                                     // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8287[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeforePortalID;                                    // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELoadingScreenType                            LoadingScreenType;                                 // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8288[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoadingScreenParam;                                // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeforeVariationID;                                 // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8289[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFinishWaitAreaVisible;                           // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class Ubp_ui_map_icon_manager_C*              UiMapIconManager;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DebugStartedScenerioJumpRowName;                   // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastPortalName;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_828A[0x8];                                     // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastPortalTransform;                               // 0x0360(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	TArray<class APlayerStart*>                   AllPlayerStart;                                    // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          IsToOtherLocationFlagForDispatcher;                // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_828B[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaitedCountUnloadDynamicLevels;                    // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalledForceGCUnloadDynamicLevels;                  // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_828C[0x3];                                     // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoreSimulatorMissionName;                         // 0x03AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpenBattleSimulatorStartTips;                    // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnFinishWaitAreaVisible__DelegateSignature();
	void ExecuteUbergraph_BP_SceneManager(int32 EntryPoint);
	void RequestChangeSceneBattleSimulator(class FName BattleSimulatorRowName);
	void CallFuncFromCode_UpdateAllTownPeopleState();
	void DelayBeginPlay();
	void Event_ReVisibleNaviLevel();
	void SetAreaSoundSetting();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Debug_Set_Current_Status(E_SceneManagerStatus Param_CurrentStatus);
	void InitBoot();
	void ChangeSceneManagerStatus(E_SceneManagerStatus Status);
	void TickWaitAreaLoading();
	void TickWaitAreaVisible();
	void TickSceneStarting();
	void TickInScene();
	void TickInitialize();
	void TickWaitFadeOut();
	void SetAreaSoundSetting_();
	void TickStartFade();
	void TickStartNoFade();
	void InitOnStartFade();
	void InitBeforeLoadLevels();
	void GetNextAreaInfo(int32 LocationId, int32 AreaId, int32 PortalID, class FName* AreaName, class FName* PortalName);
	void InitBoot_();
	void RequestChapterJump(class FName ChapterName, bool Debug, bool* Error);
	void GetChapterInfo(class FName RowName, struct FS_ScenarioJump* Info, bool* Found);
	void RequestChangeSceneImmediate(int32 LocationId, int32 AreaId, int32 VariationID, int32 PortalID, TArray<class FName>& SceneArgs, bool NoFade, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam, bool IsSaveDataLoadFlow, bool* Error);
	void SetCurrentArea(int32 Location, int32 Area, int32 Variation, int32 Portal, bool UpdateBeforeID);
	void CurrentAreaName(class FName* AreaName);
	void RequestChangeSceneImmediateByName(class FName AreaInfoName, int32 PortalID, TArray<class FName>& SceneArgs, bool NoFade, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam);
	void Tick_Wait_Event_Asset_Load();
	void DeleteAllWalkingNPC();
	void RequestChangeScene(int32 LocationId, int32 AreaId, int32 PortalID, const TArray<class FName>& SceneArgs, bool NoFade, bool* Error, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam, bool IsAutoSaveEnable, class FName BattleSimulatorLevelInfosName);
	void IsStatusInScene(bool* IsInScene);
	void UpdateAllTownPeopleState();
	void IsWaitLoadScene(bool* IsWaitLoad);
	void SelectLoadingUI(int32 LocationId, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam);
	void GetCurrentLocationAndArea(int32* LocationId, int32* AreaId);
	void Tick_Wait_Unload_Dynamic_Levels();
	void GetPreviousLocationAndArea(int32* LocationId, int32* AreaId, int32* PortalID);
	void GetStartPortalName(class FName* PortalName);
	void GetBeforeLocationAndArea(int32* LocationId, int32* AreaId);
	void MovePlayerAtNewArea();
	void TickWaitAreaLBPortalLevelLoading();
	void GetPortalTransform(int32 LocationNo, int32 AreaNo, class FName PortalName, struct FTransform* Transform, bool* Found);
	void TickWaitAreaLBPortalLevelVisible();
	void CheckPlayerInEventTrigger(bool* InEvent);
	void GetDebugStartedScenarioJumpRowName(class FName* ScenerioJumpRowName);
	void SetDebugStartedScenarioJumpRowName(class FName ScenerioJumpRowName);
	void IsDebugAlphaROMScenerio(bool* bAlphaScenerio);
	void SetLastPlayerSpawnInfo(class FName PortalName, const struct FTransform& LastSpawnTransform);
	bool EventManagerStart(bool EnableTick, bool Visibility);
	bool EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility);
	void InitializeAjito();
	void IsLocationAjito(bool* InAjito);
	void UpdateLiftFloorAtLoad();
	void MoveLiftFloorForce(int32 Floor);
	void IsLocationRestaurant(bool* InAjito);
	bool OnEndGameMenu();
	void IsAcceptRequest(bool* IsAccept);
	void StartLoadingChara_Local(class AHUDMainGame_C*& Param_HUDManager, int32 NextLocation);
	void Debug_Set_Current_Status_Internal(E_SceneManagerStatus Param_CurrentStatus);
	class FName GetBeforeLocationName();
	void GetCurrentLocationInfo(int32* LocationId, int32* AreaId, int32* VariationID, int32* PortalID);
	class FName GetCurrentLocationName();
	bool IsNeedFrameWait();
	void ResetGimmickScenarioFlag();
	void Is_Coat_Moat(bool* Need);
	void BeforeAreaName(class FName* AreaName);
	void IsLastDungeon(bool* LastDungeon);
	void InitBattleSimulatorRetry();
	void IRequestChangeSceneImmediate(int32 LocationId, int32 AreaId, int32 VariationID, int32 PortalID, const TArray<class FName>& SceneArgs, const bool NoFade, ELoadingScreenType Param_LoadingScreenType, int32 Param_LoadingScreenParam, bool IsSaveDataLoadFlow, bool* Error);
	E_SceneManagerStatus GetCurrentStatus();
	void GetCurrentLocationID(int32* LocationId);

	bool IsChangeLocation_Internal() const;
	void IsInitialized(bool* Initialized) const;
	bool IsChangeLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SceneManager_C">();
	}
	static class ABP_SceneManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SceneManager_C>();
	}
};
static_assert(alignof(ABP_SceneManager_C) == 0x000010, "Wrong alignment on ABP_SceneManager_C");
static_assert(sizeof(ABP_SceneManager_C) == 0x0003C0, "Wrong size on ABP_SceneManager_C");
static_assert(offsetof(ABP_SceneManager_C, UberGraphFrame) == 0x0002C8, "Member 'ABP_SceneManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_SceneManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, LevelManager) == 0x0002D8, "Member 'ABP_SceneManager_C::LevelManager' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, bInitialized) == 0x0002E0, "Member 'ABP_SceneManager_C::bInitialized' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, HUDManager) == 0x0002E8, "Member 'ABP_SceneManager_C::HUDManager' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CurrentLocationID) == 0x0002F0, "Member 'ABP_SceneManager_C::CurrentLocationID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CurrentAreaID) == 0x0002F4, "Member 'ABP_SceneManager_C::CurrentAreaID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CurrentPortalID) == 0x0002F8, "Member 'ABP_SceneManager_C::CurrentPortalID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CurrentVariationID) == 0x0002FC, "Member 'ABP_SceneManager_C::CurrentVariationID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CurrentSceneArgs) == 0x000300, "Member 'ABP_SceneManager_C::CurrentSceneArgs' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, BeforeLocationID) == 0x000310, "Member 'ABP_SceneManager_C::BeforeLocationID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, BeforeAreaID) == 0x000314, "Member 'ABP_SceneManager_C::BeforeAreaID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CurrentStatus) == 0x000318, "Member 'ABP_SceneManager_C::CurrentStatus' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, BeforePortalID) == 0x00031C, "Member 'ABP_SceneManager_C::BeforePortalID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, LoadingScreenType) == 0x000320, "Member 'ABP_SceneManager_C::LoadingScreenType' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, LoadingScreenParam) == 0x000324, "Member 'ABP_SceneManager_C::LoadingScreenParam' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, BeforeVariationID) == 0x000328, "Member 'ABP_SceneManager_C::BeforeVariationID' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, OnFinishWaitAreaVisible) == 0x000330, "Member 'ABP_SceneManager_C::OnFinishWaitAreaVisible' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, UiMapIconManager) == 0x000340, "Member 'ABP_SceneManager_C::UiMapIconManager' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, DebugStartedScenerioJumpRowName) == 0x000348, "Member 'ABP_SceneManager_C::DebugStartedScenerioJumpRowName' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, LastPortalName) == 0x000350, "Member 'ABP_SceneManager_C::LastPortalName' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, LastPortalTransform) == 0x000360, "Member 'ABP_SceneManager_C::LastPortalTransform' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, AllPlayerStart) == 0x000390, "Member 'ABP_SceneManager_C::AllPlayerStart' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, IsToOtherLocationFlagForDispatcher) == 0x0003A0, "Member 'ABP_SceneManager_C::IsToOtherLocationFlagForDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, WaitedCountUnloadDynamicLevels) == 0x0003A4, "Member 'ABP_SceneManager_C::WaitedCountUnloadDynamicLevels' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, CalledForceGCUnloadDynamicLevels) == 0x0003A8, "Member 'ABP_SceneManager_C::CalledForceGCUnloadDynamicLevels' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, StoreSimulatorMissionName) == 0x0003AC, "Member 'ABP_SceneManager_C::StoreSimulatorMissionName' has a wrong offset!");
static_assert(offsetof(ABP_SceneManager_C, IsOpenBattleSimulatorStartTips) == 0x0003B4, "Member 'ABP_SceneManager_C::IsOpenBattleSimulatorStartTips' has a wrong offset!");

}

