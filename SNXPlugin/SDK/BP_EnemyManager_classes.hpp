#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyManager

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CopyCharacterParameterStruct_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_EnemySound_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyManager.BP_EnemyManager_C
// 0x0388 (0x0860 - 0x04D8)
class ABP_EnemyManager_C final : public AEnemyManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_EnemyFixParam_C*                    BP_EnemyFixParam;                                  // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         EnableRange;                                       // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableSpawnRange;                                  // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableViewAngle;                                   // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckEnemyIndex;                                   // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemySound                               EnemySound;                                        // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemySound                               EnemySoundCheck;                                   // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6022[0x6];                                     // 0x0502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               BrainCrashList_Old;                                // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         BattleEnemyList;                                   // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          IsStealthSee;                                      // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6023[0x7];                                     // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDeadDispatcher;                                  // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             GroupBattleStartDispatcher;                        // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UActorComponent*>                TickEnableComponentArray;                          // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         UpdateEnemyCount;                                  // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnemyCountMax;                                     // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckHeightDistance;                               // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugEnemyIndex;                                   // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ENPCTriggerTransform;                              // 0x0570(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             ENPCSpAttackTransform;                             // 0x05A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMap<EHCSkillAttribute, struct FEnemyStateDataCell> BadStateParams;                                    // 0x05D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxVisionFogRate;                                  // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            CurrentHitStopType;                                // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6024[0x3];                                     // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Em8300Manager;                                     // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCourtMort;                                       // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6025[0x7];                                     // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DebugUniqueEventDispatcher;                        // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FVisionFogAreaInfo>             VisionFogAreaList;                                 // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bVisionFogAction;                                  // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6026[0x3];                                     // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NotAcceptVisionFogActionTimer;                     // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           UniqueBrainCrashNotPlayedList;                     // 0x0660(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 CoutMort_Actor;                                    // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EndDuelPoleDispatcher;                             // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 Em1200_Actor;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattleEnemy_C*>               AreaCheckWaitList;                                 // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             AreaCheckTimer;                                    // 0x06A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         MaxEnemyMovingCountRate;                           // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DebugText;                                         // 0x06B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FCopyCharacterParameterStruct> Backup_ParameterList;                              // 0x06C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CheckOutRangeDistance;                             // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RepopOwnerNowLevel;                                // 0x071C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6027[0x4];                                     // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RepopOwnerObj;                                     // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowLocationId;                                     // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowAreaId;                                         // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattleEnemy_C*>               GroundCheckWaitList;                               // 0x0738(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UBP_EnemyVisionFogComponent_C*>  EndVisionFogCompList;                              // 0x0748(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bStartBattleEm8300;                                // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6028[0x7];                                     // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         EntryAvatarList;                                   // 0x0760(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         MaxAvatarNum;                                      // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6029[0x4];                                     // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, bool>                             PreCheckOutOfBattleFieldGroupId;                   // 0x0778(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   ActorLevelName;                                    // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActorLocationID;                                   // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActorAreaID;                                       // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         PauseBrainCrashList;                               // 0x07D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FBattleSimulatorRareSpawnCondisionData DebugRareSpawnCondision;                           // 0x07E8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 DebugRareSpawnCondisionResultString;               // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DebugIsRareSpawnFail;                              // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugNeedCreateRareSpawnFailText;                  // 0x0831(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_602A[0x6];                                     // 0x0832(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugRareSpawnCondisionEnemyName;                  // 0x0838(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               SimulatorStartStopList;                            // 0x0848(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SimulatorStartMoveDelaySec;                        // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayingEnpcSequencer;                             // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnDeadDispatcher__DelegateSignature(int32 GroupID, int32 SubGroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void GroupBattleStartDispatcher__DelegateSignature(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void DebugUniqueEventDispatcher__DelegateSignature(int32 EventNo);
	void EndDuelPoleDispatcher__DelegateSignature();
	void ExecuteUbergraph_BP_EnemyManager(int32 EntryPoint);
	void EventReturnFromPhotoMode(bool IsCameraCutPhotoMode);
	void DelayBeginPlay();
	void OnChangeAreaLoadStatus(EChangeAreaStatus Status, bool IsChangeLocation);
	void EventReturnFromPartyMenu();
	void StopEnemyAll_FromNative();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EventManagerRigitBodyEmptyUpdateSeconds(float RigitBodyEmptyUpdateSeconds);
	void OnBrainCrashTargetFloating();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnBrainCrashEnd(bool bBeginActor, class UAnimMontage* PlayerEndMontage);
	void OnBrainCrashDead();
	void OnBrainCrashDamage();
	void OnBrainCrashStart(bool bBeginActor);
	void OnBrainCrashStartUserMotion();
	void UpdateTick(float DeltaSeconds);
	void SetTickEnable(class AActor* Actor);
	void SetEnemySound();
	void SetEnemySoundCheck(class AActor* Actor);
	void GetEnemySound(Enum_EnemySound* Return);
	void EnemyRigitBodyEmptyUpdate(float RigitBodyEmptyUpdateSeconds);
	void AddBattleEnemyList(class AActor* Enemy);
	void SubBattleEnemyList(class AActor* Enemy);
	void SetStealthSeeEnable(bool On, bool ShadowChange);
	void IsStealthSeeEnable(bool* Return);
	void SetBrainCrashParam(float BrainCrashTimer, float BrainCrashMissScale);
	void GetEnemyHitObjectType(TArray<EObjectTypeQuery>* ObjectType);
	void GetGroupEnemyCount(int32 CheckGroupdID, int32* GroupCount);
	void GroupBattleStart(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly);
	void AddPsychicFlyObj(class ABP_PsychicObjectBasic_C* PsychicFlyObj);
	void CanUpdateEnemy(bool* CanUpdate);
	void IncrementUpdateEnemy();
	void DebugTargetEnemy(int32 Command);
	void DebugEnemySelectCommand(class ARSBattleEnemy_C* TargetEnemy, int32 Command);
	void DebugENPCSelectCommand(class ARSBattlePlayer_C* TargetENPC, int32 Command);
	void DebugUpdate(class AActor* EnemyActor, int32 EnemyIndex);
	void GetSubGroupEnemyCount(int32 CheckGroupdID, int32 CheckSubGroupID, bool CheckSpawnConditionNow, int32* GroupCount);
	void SpawnAllEnemiesInSubGroup(int32 GroupID, int32 SubGroupID);
	void SpawnEnemyByName(class FName EnemyName);
	void SpawnOneEnemyInSubGroup(int32 GroupID, int32 SubGroupID, bool* SpawnOK);
	void SpawnAllEnemiesInGroup(int32 GroupID, int32 SubGroupID);
	void KillEnemy(class ARSCharacterBase* Actor);
	void KillAllEnemiesInGroup(int32 GroupID, int32 SubGroupID);
	void KillAllEnemiesInSubGroup(int32 GroupID, int32 SubGroupID);
	void CheckSeeEnemy(class AActor* Actor, const struct FVector& TargetLocation, bool* IsSeeEnemy);
	void EntryBrainCrashAccess(class ARSBattleCharacter_C* Character, bool* Dummy);
	void LeaveBrainCrashAccess(class ARSBattleCharacter_C* Character, bool* Dummy);
	void SelectBrainCrashCharacter(class ARSBattleCharacter_C** TargetCharacter);
	void SetBrainCrashHUDTarget(class ARSBattleCharacter_C* BattleChara, bool bEnablePlayer, bool* Dummy);
	void Usable_Brain_Crash_Lock_Target(class ARSBattleCharacter_C** TargetCharacter);
	void DebugSetAddDamageBlendWeight(float Value);
	void DebugResetAddDamageBlendWeight();
	void SetENPCStartTransformbyID(ECutsceneRootTransformID ID, const struct FTransform& Transform);
	void GetENPCStartTransformbyID(ECutsceneRootTransformID ID, struct FTransform* Transform);
	void InitBadStateMaterialParam(bool* Dummy);
	void GetBadStateMaterialParam(EHCSkillAttribute Attribute, struct FEnemyStateDataCell* Param, bool* Find);
	void DebugDrawTargetingList();
	void DebugDrawAttackingList();
	void UpdateEnemyVisionFog(float DeltaSec);
	void DebugSetHpImmediate(float Value, bool* Dummy);
	void DebugSetHpRate(float Value, bool* Dummy);
	void StopEnemyAll();
	void SetEm8300Manager(class AActor* Manager);
	void IsBattleCourtMort(bool* Param_IsCourtMort);
	void SetBattleCourtMort(bool Param_IsCourtMort);
	void SetCourtMortActor(class AActor* Actor);
	void GetCourtMortActor(class AActor** Actor);
	void DebugCallUniqueEvent(int32 EventNo, bool* Dummy);
	void RegisterVisionFogArea(const struct FVector& Location, float Radius, const class FString& Param_Name);
	void UnregisterVisionFogArea(const class FString& Param_Name);
	void GetVisionFogAreaList(TArray<struct FVisionFogAreaInfo>* Param_VisionFogAreaList);
	void SetVisionFogAction(bool bAction);
	void IsVisionFogAction(bool* bAction);
	void SetNotAcceptVisionFogAction();
	void CheckUniqueBrainCrash(bool* IsBoss, bool* IsGeneral, bool* RequestJudgmentUniqueCoolTime, bool* RequestJudgmentSearchSafePoint);
	void InitializeUniqueBrainCrashPlayedList();
	void CreateUniqueBrainCrashPlayedListKeyName(class ARSCharacterBase* TargetEnemy, class FName* KeyName);
	void UpdateUniqueBrainCrashPlayedList();
	void UpdateUniqueBrainCrashFlag(bool IsUnique);
	void SelectBrainCrashMultiCharacters(class ARSBattleCharacter_C* LockTarget, TArray<class ARSBattleCharacter_C*>* TargetCharactersList);
	void StartCourtMortBattle();
	void GetAddedEnemy(TArray<class ARSBattleCharacter_C*>& LocalSelectCharacters, TArray<class ARSBattleCharacter_C*>* DifferenceCharacters);
	void NotifyEndDuelPole();
	void SetNaomiActor(class AActor* Actor);
	void NaomiChangePhaseParamSetting();
	void RepopEntry(float Time, float Range, int32 Probability, const class FString& ClassBpPath, const struct FVector& InitPos, float MoveArea, class FName LevelName, int32 Group, int32 SubGroup, class FName UniqueId, class FName Level, int32 DropId, class ARSCharacterBase* NewParam);
	void RepopUpdate(float DeltaSeconds);
	void CheckEventBrainCrash(bool* IsEvent);
	void GetBrainCrashEvent(class UClass** Event);
	void GetBrainCrashTargetChara(class ARSCharacterBase** TargetChara);
	void RepopClear();
	void RepopCheckInsideCamera(const struct FVector& MyPos, bool* IsInside);
	void EntryAreaCheck(class ARSBattleEnemy_C* Target);
	void UpdateAreaCheck(float DeltaSec);
	void EndAreaCheck(class ARSBattleEnemy_C* Target);
	void SetBrainCrashEventFlag();
	void SetEnableOutOfBattleField(bool SetEnable, int32 GroupID);
	void InitDropItem(bool* Dummy);
	void OnReturnFromPartyMenu(bool* Dummy);
	void BackupCharacterParameterToTagName(class FName TagName);
	void RestoreCharacterParameterToTagName(class FName TagName);
	bool SetBrainCrashHUDTarget_Window(class ARSCharacterBase* TargetChara, bool EnablePlayer);
	void DestroyEnemyWithTagName(class FName TagName);
	void CheckRepopCharaInList(class FName CharaUniqueId, bool* Inlist);
	void SetRepopOwner(class ARSBattleEnemy_C* Param_Owner);
	bool RepopSpawn_FromNative(const struct FEnemyRepopInfo& EnemyRepopInfo, int32 Group, int32 SubGroup);
	void OnChangeArea(EChangeAreaStatus ChangeState, bool IsChange);
	void GetBattleBossEnemyUniqueName(bool* bExist, class FName* UniqueName);
	void EntryGroundCheck(class ARSBattleEnemy_C* Target);
	void UpdateGroundCheck(float DeltaSec);
	void EndGroundCheck(class ARSBattleEnemy_C* Target);
	void RegisterEndVisionFogComp(class UBP_EnemyVisionFogComponent_C* InVisionFogComp);
	void UpdateEndVisionFogComp(float DeltaSec);
	void PreCheckSetEnableOutOfBattlefield(int32 GroupID, bool* NewParam);
	void SetStartBattleEm8300(bool bStart, bool* bDummy);
	void ClearCourtMortBattle();
	void DebugDispDamageLog();
	void Check_Create_Avatar(class AActor* NewParam1, bool* NewParam);
	void EntryCreateAvatar(class AActor* NewParam);
	void RemoveCreateAvatar(class AActor* NewParam);
	void ChangeEnpcUniqueThinkTable();
	void IsBossBattlefield(int32 GroupID, bool* InBoss);
	bool GetCanPlayCutSceneFromNative();
	bool IsNeedFrameWait();
	void DebugDispTIckControl();
	void DebugDispSettingInfo();
	bool SetRepopExtendInList_FromNative(struct FEnemyRepopExtendInfo& EnemyRepopExtendInfo, class ARSCharacterBase* RepopTarget);
	void DebugDispGroupInfo();
	void UpdateTriggerEffect();
	void EnableUniqueBrainCrashPlayedListFromActor(class ARSCharacterBase* CrashEnemy);
	void UpdatePauseBrainCrash();
	void CheckPauseBrainCrash(class AActor* PauseActor);
	void IsAbleCountSpawnCondition(class ARSBattleCharacter_C* EnemyActor, bool IsConditionCheckNow, bool* IsCountOK);
	void DebugDispRareSpawnCondisionInfo();
	void Start_Crash_Vision_Hit_Effect(TArray<class AActor*>& ActorList);
	void Start_Crash_Vision_Hit_UniqueEffect(TArray<class AActor*>& ActorList);
	void StartCrashVisionDead(TArray<class AActor*>& ActorList);
	void DebugCallEnemyRarePopLocationSpawn();
	void SimulatorStartOpen();
	void SimulatorStartClose();
	void CallHiddenBossCutScene(bool Hidden);
	bool SimulatorCancelMission();
	bool IsBattleCourtMortNative();
	void SetPlayingEnpcSequence(bool Playing);
	void IsPlayingEnpcSequence(bool* bPlaying);
	void GetBrainCrashDamageLocation(struct FVector* WorldLocation);
	bool EventManagerStart(bool EnableTick, bool Visibility);
	bool EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility);

	void IsBrainCrashAccessEnable(bool* Return) const;
	void GetBrainCrashTarget(TArray<class ARSCharacterBase*>* TargetsList) const;
	void DebugDrawInfomation(bool* Dummy) const;
	void GetEm8300Manager(class AActor** Manager) const;
	void IsStartBattleEm8300(bool* bStart) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyManager_C">();
	}
	static class ABP_EnemyManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EnemyManager_C>();
	}
};
static_assert(alignof(ABP_EnemyManager_C) == 0x000010, "Wrong alignment on ABP_EnemyManager_C");
static_assert(sizeof(ABP_EnemyManager_C) == 0x000860, "Wrong size on ABP_EnemyManager_C");
static_assert(offsetof(ABP_EnemyManager_C, UberGraphFrame) == 0x0004D8, "Member 'ABP_EnemyManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, BP_EnemyFixParam) == 0x0004E0, "Member 'ABP_EnemyManager_C::BP_EnemyFixParam' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DefaultSceneRoot) == 0x0004E8, "Member 'ABP_EnemyManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EnableRange) == 0x0004F0, "Member 'ABP_EnemyManager_C::EnableRange' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EnableSpawnRange) == 0x0004F4, "Member 'ABP_EnemyManager_C::EnableSpawnRange' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EnableViewAngle) == 0x0004F8, "Member 'ABP_EnemyManager_C::EnableViewAngle' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, CheckEnemyIndex) == 0x0004FC, "Member 'ABP_EnemyManager_C::CheckEnemyIndex' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EnemySound) == 0x000500, "Member 'ABP_EnemyManager_C::EnemySound' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EnemySoundCheck) == 0x000501, "Member 'ABP_EnemyManager_C::EnemySoundCheck' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, BrainCrashList_Old) == 0x000508, "Member 'ABP_EnemyManager_C::BrainCrashList_Old' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, BattleEnemyList) == 0x000518, "Member 'ABP_EnemyManager_C::BattleEnemyList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, IsStealthSee) == 0x000528, "Member 'ABP_EnemyManager_C::IsStealthSee' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, OnDeadDispatcher) == 0x000530, "Member 'ABP_EnemyManager_C::OnDeadDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, GroupBattleStartDispatcher) == 0x000540, "Member 'ABP_EnemyManager_C::GroupBattleStartDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, TickEnableComponentArray) == 0x000550, "Member 'ABP_EnemyManager_C::TickEnableComponentArray' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, UpdateEnemyCount) == 0x000560, "Member 'ABP_EnemyManager_C::UpdateEnemyCount' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EnemyCountMax) == 0x000564, "Member 'ABP_EnemyManager_C::EnemyCountMax' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, CheckHeightDistance) == 0x000568, "Member 'ABP_EnemyManager_C::CheckHeightDistance' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugEnemyIndex) == 0x00056C, "Member 'ABP_EnemyManager_C::DebugEnemyIndex' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, ENPCTriggerTransform) == 0x000570, "Member 'ABP_EnemyManager_C::ENPCTriggerTransform' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, ENPCSpAttackTransform) == 0x0005A0, "Member 'ABP_EnemyManager_C::ENPCSpAttackTransform' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, BadStateParams) == 0x0005D0, "Member 'ABP_EnemyManager_C::BadStateParams' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, MaxVisionFogRate) == 0x000620, "Member 'ABP_EnemyManager_C::MaxVisionFogRate' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, CurrentHitStopType) == 0x000624, "Member 'ABP_EnemyManager_C::CurrentHitStopType' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, Em8300Manager) == 0x000628, "Member 'ABP_EnemyManager_C::Em8300Manager' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, IsCourtMort) == 0x000630, "Member 'ABP_EnemyManager_C::IsCourtMort' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugUniqueEventDispatcher) == 0x000638, "Member 'ABP_EnemyManager_C::DebugUniqueEventDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, VisionFogAreaList) == 0x000648, "Member 'ABP_EnemyManager_C::VisionFogAreaList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, bVisionFogAction) == 0x000658, "Member 'ABP_EnemyManager_C::bVisionFogAction' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, NotAcceptVisionFogActionTimer) == 0x00065C, "Member 'ABP_EnemyManager_C::NotAcceptVisionFogActionTimer' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, UniqueBrainCrashNotPlayedList) == 0x000660, "Member 'ABP_EnemyManager_C::UniqueBrainCrashNotPlayedList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, CoutMort_Actor) == 0x000670, "Member 'ABP_EnemyManager_C::CoutMort_Actor' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EndDuelPoleDispatcher) == 0x000678, "Member 'ABP_EnemyManager_C::EndDuelPoleDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, Em1200_Actor) == 0x000688, "Member 'ABP_EnemyManager_C::Em1200_Actor' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, AreaCheckWaitList) == 0x000690, "Member 'ABP_EnemyManager_C::AreaCheckWaitList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, AreaCheckTimer) == 0x0006A0, "Member 'ABP_EnemyManager_C::AreaCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, MaxEnemyMovingCountRate) == 0x0006AC, "Member 'ABP_EnemyManager_C::MaxEnemyMovingCountRate' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugText) == 0x0006B0, "Member 'ABP_EnemyManager_C::DebugText' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, Backup_ParameterList) == 0x0006C8, "Member 'ABP_EnemyManager_C::Backup_ParameterList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, CheckOutRangeDistance) == 0x000718, "Member 'ABP_EnemyManager_C::CheckOutRangeDistance' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, RepopOwnerNowLevel) == 0x00071C, "Member 'ABP_EnemyManager_C::RepopOwnerNowLevel' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, RepopOwnerObj) == 0x000728, "Member 'ABP_EnemyManager_C::RepopOwnerObj' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, NowLocationId) == 0x000730, "Member 'ABP_EnemyManager_C::NowLocationId' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, NowAreaId) == 0x000734, "Member 'ABP_EnemyManager_C::NowAreaId' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, GroundCheckWaitList) == 0x000738, "Member 'ABP_EnemyManager_C::GroundCheckWaitList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EndVisionFogCompList) == 0x000748, "Member 'ABP_EnemyManager_C::EndVisionFogCompList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, bStartBattleEm8300) == 0x000758, "Member 'ABP_EnemyManager_C::bStartBattleEm8300' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, EntryAvatarList) == 0x000760, "Member 'ABP_EnemyManager_C::EntryAvatarList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, MaxAvatarNum) == 0x000770, "Member 'ABP_EnemyManager_C::MaxAvatarNum' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, PreCheckOutOfBattleFieldGroupId) == 0x000778, "Member 'ABP_EnemyManager_C::PreCheckOutOfBattleFieldGroupId' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, ActorLevelName) == 0x0007C8, "Member 'ABP_EnemyManager_C::ActorLevelName' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, ActorLocationID) == 0x0007D0, "Member 'ABP_EnemyManager_C::ActorLocationID' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, ActorAreaID) == 0x0007D4, "Member 'ABP_EnemyManager_C::ActorAreaID' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, PauseBrainCrashList) == 0x0007D8, "Member 'ABP_EnemyManager_C::PauseBrainCrashList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugRareSpawnCondision) == 0x0007E8, "Member 'ABP_EnemyManager_C::DebugRareSpawnCondision' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugRareSpawnCondisionResultString) == 0x000820, "Member 'ABP_EnemyManager_C::DebugRareSpawnCondisionResultString' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugIsRareSpawnFail) == 0x000830, "Member 'ABP_EnemyManager_C::DebugIsRareSpawnFail' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugNeedCreateRareSpawnFailText) == 0x000831, "Member 'ABP_EnemyManager_C::DebugNeedCreateRareSpawnFailText' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, DebugRareSpawnCondisionEnemyName) == 0x000838, "Member 'ABP_EnemyManager_C::DebugRareSpawnCondisionEnemyName' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, SimulatorStartStopList) == 0x000848, "Member 'ABP_EnemyManager_C::SimulatorStartStopList' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, SimulatorStartMoveDelaySec) == 0x000858, "Member 'ABP_EnemyManager_C::SimulatorStartMoveDelaySec' has a wrong offset!");
static_assert(offsetof(ABP_EnemyManager_C, bPlayingEnpcSequencer) == 0x00085C, "Member 'ABP_EnemyManager_C::bPlayingEnpcSequencer' has a wrong offset!");

}

