#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateDodge

#include "Basic.hpp"

#include "BP_PlayerActionStateDodge_classes.hpp"
#include "BP_PlayerActionStateDodge_parameters.hpp"


namespace SDK
{

// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.ExecuteUbergraph_BP_PlayerActionStateDodge
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerActionStateDodge_C::ExecuteUbergraph_BP_PlayerActionStateDodge(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "ExecuteUbergraph_BP_PlayerActionStateDodge");

	Params::BP_PlayerActionStateDodge_C_ExecuteUbergraph_BP_PlayerActionStateDodge Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerActionStateDodge_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.RotateToTarget
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerActionStateDodge_C::RotateToTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "RotateToTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.CheckDodgeEnd
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::CheckDodgeEnd(bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "CheckDodgeEnd");

	Params::BP_PlayerActionStateDodge_C_CheckDodgeEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.Enter
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerActionStateDodge_C::Enter(int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "Enter");

	Params::BP_PlayerActionStateDodge_C_Enter Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.Update
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerActionStateDodge_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "Update");

	Params::BP_PlayerActionStateDodge_C_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.Transition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerActionStateDodge_C::Transition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "Transition");

	Params::BP_PlayerActionStateDodge_C_Transition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.Exit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextStateIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerActionStateDodge_C::Exit(int32 NextStateIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "Exit");

	Params::BP_PlayerActionStateDodge_C_Exit Parms{};

	Parms.NextStateIndex = NextStateIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.IsDodgeDiagonally
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::IsDodgeDiagonally(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "IsDodgeDiagonally");

	Params::BP_PlayerActionStateDodge_C_IsDodgeDiagonally Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.IsCheckTurnBack
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTurnBack                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::IsCheckTurnBack(bool* bTurnBack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "IsCheckTurnBack");

	Params::BP_PlayerActionStateDodge_C_IsCheckTurnBack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTurnBack != nullptr)
		*bTurnBack = Parms.bTurnBack;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.SetInvalidDamage
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInvalid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::SetInvalidDamage(bool bInvalid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "SetInvalidDamage");

	Params::BP_PlayerActionStateDodge_C_SetInvalidDamage Parms{};

	Parms.bInvalid = bInvalid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.SetSuperArmor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::SetSuperArmor(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "SetSuperArmor");

	Params::BP_PlayerActionStateDodge_C_SetSuperArmor Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.IsRotateToTarget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InInputDir                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InTargetDir                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InForwardDir                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_bRotate                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::IsRotateToTarget(const struct FVector& InInputDir, const struct FVector& InTargetDir, const struct FVector& InForwardDir, bool* Param_bRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "IsRotateToTarget");

	Params::BP_PlayerActionStateDodge_C_IsRotateToTarget Parms{};

	Parms.InInputDir = std::move(InInputDir);
	Parms.InTargetDir = std::move(InTargetDir);
	Parms.InForwardDir = std::move(InForwardDir);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bRotate != nullptr)
		*Param_bRotate = Parms.Param_bRotate;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.CheckSprint
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bSprint                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::CheckSprint(bool* bSprint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "CheckSprint");

	Params::BP_PlayerActionStateDodge_C_CheckSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSprint != nullptr)
		*bSprint = Parms.bSprint;
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.CalcDodgeAnimDir
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          InDodgeDir                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InForwardDir                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAnimDir                          AnimDir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotate                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::CalcDodgeAnimDir(const struct FVector& InDodgeDir, const struct FVector& InForwardDir, EPlayerAnimDir* AnimDir, struct FRotator* Rotate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "CalcDodgeAnimDir");

	Params::BP_PlayerActionStateDodge_C_CalcDodgeAnimDir Parms{};

	Parms.InDodgeDir = std::move(InDodgeDir);
	Parms.InForwardDir = std::move(InForwardDir);

	UObject::ProcessEvent(Func, &Parms);

	if (AnimDir != nullptr)
		*AnimDir = Parms.AnimDir;

	if (Rotate != nullptr)
		*Rotate = std::move(Parms.Rotate);
}


// Function BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C.CheckTurnBack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bTurnBack                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDodge_C::CheckTurnBack(bool* bTurnBack) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDodge_C", "CheckTurnBack");

	Params::BP_PlayerActionStateDodge_C_CheckTurnBack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTurnBack != nullptr)
		*bTurnBack = Parms.bTurnBack;
}

}

