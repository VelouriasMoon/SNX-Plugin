#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerDriveComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "FAttackEmitterInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ED_PlayStart__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayStart;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature");
static_assert(sizeof(BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature) == 0x000010, "Wrong size on BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature");
static_assert(offsetof(BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature, User) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature::User' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature, bPlayStart) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ED_PlayStart__DelegateSignature::bPlayStart' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ED_PlayFinish__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayStart;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature");
static_assert(sizeof(BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature) == 0x000010, "Wrong size on BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature");
static_assert(offsetof(BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature, User) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature::User' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature, bPlayStart) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ED_PlayFinish__DelegateSignature::bPlayStart' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ExecuteUbergraph_BP_PlayerDriveComponent
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3156[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool bInterruption, bool bLocationChange)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3157[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent) == 0x000004, "Wrong alignment on BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent");
static_assert(sizeof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent) == 0x000048, "Wrong size on BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, CallFunc_IsControlAI_bAI) == 0x000004, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000006, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_Has_Been_Initd_Variable_1) == 0x000007, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_IsClosed_Variable_1) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_Has_Been_Initd_Variable_2) == 0x000009, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_IsClosed_Variable_2) == 0x00000A, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_Has_Been_Initd_Variable_3) == 0x00000B, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, K2Node_Event_DeltaSeconds) == 0x00000C, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, K2Node_Event_EndPlayReason) == 0x000010, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, Temp_bool_IsClosed_Variable_3) == 0x000034, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ExecuteUbergraph_BP_PlayerDriveComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_PlayerDriveComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerDriveComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerDriveComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerDriveComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerDriveComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.PlayStartSequence
// 0x0240 (0x0240 - 0x0000)
struct BP_PlayerDriveComponent_C_PlayStartSequence final
{
public:
	bool                                          HighDamage;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3158[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0020(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3159[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Attachment_C>     CallFunc_AttachmentVisibilityOffOnHead_self_CastInput; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AttachmentVisibilityOffOnHead_bDummy;     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315A[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      CallFunc_GetPlayerCameraFieldOfView_self_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPlayerCameraFieldOfView_ReturnValue;   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315B[0xC];                                     // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315C[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0168(0x0018)()
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315D[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_StoreLockTargetInterface_self_CastInput;  // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StoreLockTargetInterface_bDummy;          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315E[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface;             // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315F[0x3];                                     // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetPlayerCameraRotation_ReturnValue;      // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3160[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface_1;           // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3161[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPlayerCameraLocation_ReturnValue;      // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3162[0x2];                                     // 0x0206(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0208(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0218(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_PlayStartSequence) == 0x000010, "Wrong alignment on BP_PlayerDriveComponent_C_PlayStartSequence");
static_assert(sizeof(BP_PlayerDriveComponent_C_PlayStartSequence) == 0x000240, "Wrong size on BP_PlayerDriveComponent_C_PlayStartSequence");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, HighDamage) == 0x000000, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::HighDamage' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000018, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Format_ReturnValue) == 0x000020, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Conv_TextToString_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000050, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_AttachmentVisibilityOffOnHead_self_CastInput) == 0x000058, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_AttachmentVisibilityOffOnHead_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_AttachmentVisibilityOffOnHead_bDummy) == 0x000068, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_AttachmentVisibilityOffOnHead_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetPlayerCameraFieldOfView_self_CastInput) == 0x000070, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetPlayerCameraFieldOfView_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetPlayerCameraFieldOfView_ReturnValue) == 0x000080, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetPlayerCameraFieldOfView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetPlayerController_ReturnValue) == 0x0000C0, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000C8, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000150, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_MakeArray_Array_1) == 0x000158, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Format_ReturnValue_1) == 0x000168, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000180, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000190, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_StoreLockTargetInterface_self_CastInput) == 0x0001A0, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_StoreLockTargetInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_StoreLockTargetInterface_bDummy) == 0x0001B0, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_StoreLockTargetInterface_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_DynamicCast_AsCamera_Interface) == 0x0001B8, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_DynamicCast_AsCamera_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_DynamicCast_bSuccess) == 0x0001C8, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Array_Length_ReturnValue) == 0x0001CC, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetPlayerCameraRotation_ReturnValue) == 0x0001D0, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetPlayerCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Greater_IntInt_ReturnValue) == 0x0001DC, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_DynamicCast_AsCamera_Interface_1) == 0x0001E0, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_DynamicCast_AsCamera_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_GetPlayerCameraLocation_ReturnValue) == 0x0001F4, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_GetPlayerCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Array_Length_ReturnValue_1) == 0x000200, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_IsValid_ReturnValue_1) == 0x000204, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000205, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, K2Node_MakeArray_Array_2) == 0x000208, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Format_ReturnValue_2) == 0x000218, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayStartSequence, CallFunc_Conv_TextToString_ReturnValue_2) == 0x000230, "Member 'BP_PlayerDriveComponent_C_PlayStartSequence::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedInitialize
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedInitialize final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACameraActor*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3163[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedInitialize) == 0x000010, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedInitialize");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedInitialize) == 0x0000C0, "Wrong size on BP_PlayerDriveComponent_C_ProtectedInitialize");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_MakeTransform_ReturnValue_1) == 0x000030, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000060, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000068, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_FinishSpawningActor_ReturnValue) == 0x000070, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000078, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, K2Node_MakeArray_Array) == 0x000088, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, K2Node_DynamicCast_AsRSBattle_Player) == 0x000098, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_MakeLiteralByte_ReturnValue) == 0x0000A1, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_GetOwner_ReturnValue_1) == 0x0000A8, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedInitialize, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'BP_PlayerDriveComponent_C_ProtectedInitialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedFinalize
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedFinalize final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3164[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3165[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedFinalize) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedFinalize");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedFinalize) == 0x000038, "Wrong size on BP_PlayerDriveComponent_C_ProtectedFinalize");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, EndPlayReason) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_3) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_4) == 0x000019, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_5) == 0x00001A, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_6) == 0x000030, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedFinalize, CallFunc_IsValid_ReturnValue_7) == 0x000031, "Member 'BP_PlayerDriveComponent_C_ProtectedFinalize::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.LoadAsset
// 0x02F0 (0x02F0 - 0x0000)
struct BP_PlayerDriveComponent_C_LoadAsset final
{
public:
	EPlayerID                                     UserPlayerID;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MainPlayer;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3166[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3167[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3168[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DriveSequenceParameter_C*           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3169[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      K2Node_DynamicCast_AsMaterial_Instance;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316A[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316B[0x5];                                     // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue;            // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  K2Node_DynamicCast_AsPost_Process_Component;       // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316C[0xC];                                     // 0x00B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0108(0x0018)()
	class ABP_EventCameraRoot_C*                  CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0128(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0168(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0178(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316D[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316E[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessComponent*                  CallFunc_GetPerformPostProcess_PostProcess;        // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316F[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_1;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3170[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      K2Node_DynamicCast_AsMaterial_Instance_1;          // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3171[0x5];                                     // 0x01E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x01F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0210(0x0040)(HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  CallFunc_ProtectedGetLoadSequencerAsset_StartLevelSequences; // 0x0250(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  CallFunc_ProtectedGetLoadSequencerAsset_EndLevelSequences; // 0x0260(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0270(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0280(0x0018)()
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_2;             // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence;               // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3172[0x3];                                     // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3173[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_3;             // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3174[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence_1;             // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3175[0x3];                                     // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_LoadAsset) == 0x000010, "Wrong alignment on BP_PlayerDriveComponent_C_LoadAsset");
static_assert(sizeof(BP_PlayerDriveComponent_C_LoadAsset) == 0x0002F0, "Wrong size on BP_PlayerDriveComponent_C_LoadAsset");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, UserPlayerID) == 0x000000, "Member 'BP_PlayerDriveComponent_C_LoadAsset::UserPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, MainPlayer) == 0x000001, "Member 'BP_PlayerDriveComponent_C_LoadAsset::MainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_PlayerDriveComponent_C_LoadAsset::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_PlayerDriveComponent_C_LoadAsset::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000048, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_PlayerDriveComponent_C_LoadAsset::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, Temp_int_Array_Index_Variable_1) == 0x000060, "Member 'BP_PlayerDriveComponent_C_LoadAsset::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, Temp_int_Loop_Num_Variable_1) == 0x000064, "Member 'BP_PlayerDriveComponent_C_LoadAsset::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue) == 0x000070, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_AsMaterial_Instance) == 0x000078, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_AsMaterial_Instance' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000088, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000090, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValid_ReturnValue) == 0x000091, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValid_ReturnValue_1) == 0x000092, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_GetOwner_ReturnValue) == 0x000098, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_AddActorComponent_ReturnValue) == 0x0000A0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_AddActorComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_AsPost_Process_Component) == 0x0000A8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_AsPost_Process_Component' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValid_ReturnValue_2) == 0x0000B1, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValid_ReturnValue_3) == 0x0000B2, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_MakeLiteralByte_ReturnValue) == 0x0000B3, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_MakeTransform_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0000F0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000F8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Conv_StringToText_ReturnValue) == 0x000108, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000120, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_MakeStruct_FormatArgumentData) == 0x000128, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_MakeArray_Array) == 0x000168, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Format_ReturnValue) == 0x000178, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Conv_TextToString_ReturnValue) == 0x000190, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, Temp_int_Loop_Counter_Variable_1) == 0x0001A0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_GetPostProcessManager_Manager) == 0x0001A8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValid_ReturnValue_4) == 0x0001B0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_GetPerformPostProcess_PostProcess) == 0x0001B8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_GetPerformPostProcess_PostProcess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001C0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001C4, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue_1) == 0x0001C8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x0001D0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_AsMaterial_Instance_1) == 0x0001D8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_AsMaterial_Instance_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_bSuccess_2) == 0x0001E0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_IsValid_ReturnValue_5) == 0x0001E1, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x0001E2, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x0001E8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0001F8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_MakeStruct_FormatArgumentData_1) == 0x000210, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_ProtectedGetLoadSequencerAsset_StartLevelSequences) == 0x000250, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_ProtectedGetLoadSequencerAsset_StartLevelSequences' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_ProtectedGetLoadSequencerAsset_EndLevelSequences) == 0x000260, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_ProtectedGetLoadSequencerAsset_EndLevelSequences' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_MakeArray_Array_1) == 0x000270, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Format_ReturnValue_1) == 0x000280, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue_2) == 0x000298, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0002A0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_AsLevel_Sequence) == 0x0002B0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_AsLevel_Sequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_bSuccess_3) == 0x0002B8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Array_Add_ReturnValue) == 0x0002BC, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Array_Length_ReturnValue) == 0x0002C0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue_3) == 0x0002C8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Array_Length_ReturnValue_1) == 0x0002D0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_AsLevel_Sequence_1) == 0x0002D8, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_AsLevel_Sequence_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, K2Node_DynamicCast_bSuccess_4) == 0x0002E0, "Member 'BP_PlayerDriveComponent_C_LoadAsset::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_LoadAsset, CallFunc_Array_Add_ReturnValue_1) == 0x0002E4, "Member 'BP_PlayerDriveComponent_C_LoadAsset::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedGetLoadSequencerAsset
// 0x0090 (0x0090 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset final
{
public:
	EPlayerID                                     Param_PlayerId;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3176[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ULevelSequence>>  StartLevelSequences;                               // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  EndLevelSequences;                                 // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  K2Node_MakeArray_Array_2;                          // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  K2Node_MakeArray_Array_3;                          // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3177[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ULevelSequence>>  K2Node_MakeArray_Array_4;                          // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ULevelSequence>>  K2Node_MakeArray_Array_5;                          // 0x0080(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset) == 0x000090, "Wrong size on BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, Param_PlayerId) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::Param_PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, StartLevelSequences) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::StartLevelSequences' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, EndLevelSequences) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::EndLevelSequences' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, K2Node_MakeArray_Array_1) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, K2Node_MakeArray_Array_2) == 0x000048, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, K2Node_MakeArray_Array_3) == 0x000058, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, K2Node_MakeArray_Array_4) == 0x000070, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset, K2Node_MakeArray_Array_5) == 0x000080, "Member 'BP_PlayerDriveComponent_C_ProtectedGetLoadSequencerAsset::K2Node_MakeArray_Array_5' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedBindingSequence
// 0x0168 (0x0168 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedBindingSequence final
{
public:
	struct FMovieSceneObjectBindingID             BindingID;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3178[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBinding;     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBindingPlayer; // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBindingSASCode; // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBindingBrainCode; // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3179[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_BindingEventPlayerFromText_IsBindingWeapon; // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_SetActiveFromShotName_ReturnValue;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_317A[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0070(0x0018)()
	TArray<class FText>                           K2Node_MakeArray_Array_2;                          // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList; // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDList_IsFind;    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_317B[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_317C[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SetActiveFromShotName_ReturnValue_1;      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317D[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x00C0(0x0018)()
	TArray<class FText>                           K2Node_MakeArray_Array_3;                          // 0x00D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList_1; // 0x00E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDList_IsFind_1;  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_317E[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_317F[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3180[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_2;            // 0x0110(0x0018)()
	bool                                          CallFunc_GetSequenceObjectBindingID_IsFind;        // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3181[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             CallFunc_GetSequenceObjectBindingID_ReturnValue;   // 0x012C(0x0018)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3182[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_4;                          // 0x0148(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_5;                          // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedBindingSequence) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedBindingSequence");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedBindingSequence) == 0x000168, "Wrong size on BP_PlayerDriveComponent_C_ProtectedBindingSequence");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, BindingID) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::BindingID' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, Temp_int_Loop_Num_Variable_1) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, K2Node_MakeArray_Array_1) == 0x000040, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_BindingEventPlayerFromText_IsBinding) == 0x000050, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_BindingEventPlayerFromText_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_BindingEventPlayerFromText_IsBindingPlayer) == 0x000051, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_BindingEventPlayerFromText_IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_BindingEventPlayerFromText_IsBindingSASCode) == 0x000052, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_BindingEventPlayerFromText_IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_BindingEventPlayerFromText_IsBindingBrainCode) == 0x000053, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_BindingEventPlayerFromText_IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_BindingEventPlayerFromText_IsBindingWeapon) == 0x000058, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_BindingEventPlayerFromText_IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_SetActiveFromShotName_ReturnValue) == 0x000068, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_SetActiveFromShotName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_IsValid_ReturnValue) == 0x00006C, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_MakeLiteralText_ReturnValue) == 0x000070, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, K2Node_MakeArray_Array_2) == 0x000088, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList) == 0x000098, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_GetSequenceObjectBindingIDList_IsFind) == 0x0000A8, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_GetSequenceObjectBindingIDList_IsFind' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Array_Length_ReturnValue) == 0x0000AC, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, Temp_int_Array_Index_Variable_1) == 0x0000B0, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Not_PreBool_ReturnValue) == 0x0000B4, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_SetActiveFromShotName_ReturnValue_1) == 0x0000B8, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_SetActiveFromShotName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_MakeLiteralText_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, K2Node_MakeArray_Array_3) == 0x0000D8, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList_1) == 0x0000E8, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_GetSequenceObjectBindingIDList_IsFind_1) == 0x0000F8, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_GetSequenceObjectBindingIDList_IsFind_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_IsValid_ReturnValue_1) == 0x0000F9, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Array_Length_ReturnValue_1) == 0x0000FC, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_IsValid_ReturnValue_2) == 0x000100, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, Temp_int_Loop_Counter_Variable_1) == 0x000104, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Less_IntInt_ReturnValue_1) == 0x000108, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_Add_IntInt_ReturnValue_1) == 0x00010C, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_MakeLiteralText_ReturnValue_2) == 0x000110, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_MakeLiteralText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_GetSequenceObjectBindingID_IsFind) == 0x000128, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_GetSequenceObjectBindingID_IsFind' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, CallFunc_GetSequenceObjectBindingID_ReturnValue) == 0x00012C, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::CallFunc_GetSequenceObjectBindingID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, K2Node_MakeArray_Array_4) == 0x000148, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedBindingSequence, K2Node_MakeArray_Array_5) == 0x000158, "Member 'BP_PlayerDriveComponent_C_ProtectedBindingSequence::K2Node_MakeArray_Array_5' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedOnFinishSequencer
// 0x0180 (0x0180 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer final
{
public:
	class UBP_PlayerMaterialManageComponent_C*    PlayerMaterialManageComp;                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerEmissionComponent_C*          PlayerEmissionComp;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       Player;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      CallFunc_SetPlayerCameraViewTarget_self_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraViewTarget_ReturnValue;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3183[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_RestoreLockTargetInterface_self_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestoreLockTargetInterface_bDummy;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3184[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3185[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3186[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3187[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ProtectedGetSequencerAsset_Valid;         // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3188[0x6];                                     // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CallFunc_ProtectedGetSequencerAsset_LevelSequence; // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3189[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer) == 0x000010, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer) == 0x000180, "Wrong size on BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, PlayerMaterialManageComp) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::PlayerMaterialManageComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, PlayerEmissionComp) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::PlayerEmissionComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, Player) == 0x000010, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, PlayerList) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_SetPlayerCameraViewTarget_self_CastInput) == 0x000028, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_SetPlayerCameraViewTarget_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_SetPlayerCameraViewTarget_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_SetPlayerCameraViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_RestoreLockTargetInterface_self_CastInput) == 0x000040, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_RestoreLockTargetInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_RestoreLockTargetInterface_bDummy) == 0x000050, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_RestoreLockTargetInterface_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000054, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000070, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_IsValid_ReturnValue) == 0x000084, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, Temp_int_Variable) == 0x000088, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_IsValid_ReturnValue_1) == 0x00008C, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_GetTransform_ReturnValue) == 0x000090, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000C0, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000148, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_ProtectedGetSequencerAsset_Valid) == 0x000149, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_ProtectedGetSequencerAsset_Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_ProtectedGetSequencerAsset_LevelSequence) == 0x000150, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_ProtectedGetSequencerAsset_LevelSequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000158, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, K2Node_SwitchInteger_CmpSuccess) == 0x000160, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_GetSequencePlayer_ReturnValue) == 0x000168, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer, CallFunc_Add_IntInt_ReturnValue) == 0x000170, "Member 'BP_PlayerDriveComponent_C_ProtectedOnFinishSequencer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedPlaySequencer
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedPlaySequencer final
{
public:
	bool                                          CallFunc_ProtectedGetSequencerAsset_Valid;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CallFunc_ProtectedGetSequencerAsset_LevelSequence; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_1;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedPlaySequencer");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer) == 0x000040, "Wrong size on BP_PlayerDriveComponent_C_ProtectedPlaySequencer");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, CallFunc_ProtectedGetSequencerAsset_Valid) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::CallFunc_ProtectedGetSequencerAsset_Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, CallFunc_ProtectedGetSequencerAsset_LevelSequence) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::CallFunc_ProtectedGetSequencerAsset_LevelSequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, CallFunc_GetSequencePlayer_ReturnValue) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, CallFunc_GetSequencePlayer_ReturnValue_1) == 0x000030, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::CallFunc_GetSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedPlaySequencer, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedPlaySequencer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqStartInputPlayer
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_EventSeqStartInputPlayer final
{
public:
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EventSeqStartInputPlayer) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EventSeqStartInputPlayer");
static_assert(sizeof(BP_PlayerDriveComponent_C_EventSeqStartInputPlayer) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_EventSeqStartInputPlayer");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqStartInputPlayer, PlayerList) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EventSeqStartInputPlayer::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqStartInputPlayer, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000010, "Member 'BP_PlayerDriveComponent_C_EventSeqStartInputPlayer::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqDamageEnemy
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_EventSeqDamageEnemy final
{
public:
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_RestoreLockTargetInterface_self_CastInput; // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestoreLockTargetInterface_bDummy;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EventSeqDamageEnemy) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EventSeqDamageEnemy");
static_assert(sizeof(BP_PlayerDriveComponent_C_EventSeqDamageEnemy) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_EventSeqDamageEnemy");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqDamageEnemy, CallFunc_RestoreLockTargetInterface_self_CastInput) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EventSeqDamageEnemy::CallFunc_RestoreLockTargetInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqDamageEnemy, CallFunc_RestoreLockTargetInterface_bDummy) == 0x000010, "Member 'BP_PlayerDriveComponent_C_EventSeqDamageEnemy::CallFunc_RestoreLockTargetInterface_bDummy' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqSetVisibleUI
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerDriveComponent_C_EventSeqSetVisibleUI final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EventSeqSetVisibleUI");
static_assert(sizeof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI) == 0x000028, "Wrong size on BP_PlayerDriveComponent_C_EventSeqSetVisibleUI");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI, Enable) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EventSeqSetVisibleUI::Enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PlayerDriveComponent_C_EventSeqSetVisibleUI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_PlayerDriveComponent_C_EventSeqSetVisibleUI::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI, CallFunc_GetHUD_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_EventSeqSetVisibleUI::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI, K2Node_DynamicCast_AsHUDMain_Game) == 0x000018, "Member 'BP_PlayerDriveComponent_C_EventSeqSetVisibleUI::K2Node_DynamicCast_AsHUDMain_Game' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetVisibleUI, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerDriveComponent_C_EventSeqSetVisibleUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedSetSequenceActorEvent
// 0x0100 (0x0100 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent final
{
public:
	bool                                          SetPlayer;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetEnemy;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsStart;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDynamic;                                         // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       Character;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               EnemyList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318E[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318F[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_1;            // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerEnd_ReturnValue;           // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3190[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_2;            // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerStart_ReturnValue;         // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3191[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_3;            // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3192[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3193[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x00C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3194[0x2];                                     // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3195[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x00F0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent) == 0x000100, "Wrong size on BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, SetPlayer) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::SetPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, SetEnemy) == 0x000001, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::SetEnemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, IsStart) == 0x000002, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::IsStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, IsDynamic) == 0x000003, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::IsDynamic' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Character) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, EnemyList) == 0x000010, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, PlayerList) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_Array_Length_ReturnValue_1) == 0x000034, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Temp_int_Loop_Num_Variable) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Temp_int_Array_Index_Variable_1) == 0x000048, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Temp_int_Loop_Num_Variable_1) == 0x00004C, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_AsEvent_Interface) == 0x000058, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_AsEvent_Interface_1) == 0x000070, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_AsEvent_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_BattleSequencerEnd_ReturnValue) == 0x000081, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_BattleSequencerEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_EventEnd_ReturnValue) == 0x000082, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_EventEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_IsValid_ReturnValue) == 0x000083, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_AsEvent_Interface_2) == 0x000088, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_AsEvent_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_bSuccess_2) == 0x000098, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_BattleSequencerStart_ReturnValue) == 0x000099, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_BattleSequencerStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_AsEvent_Interface_3) == 0x0000A0, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_AsEvent_Interface_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_EventStart_ReturnValue) == 0x0000B1, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_EventStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_GetEnemyManager_EnemyManager) == 0x0000B8, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_IsValid_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_GetEnemyList_ReturnValue) == 0x0000C8, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_GetPlayerManager_PlayerManager) == 0x0000D8, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, Temp_int_Loop_Counter_Variable_1) == 0x0000E0, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_IsValid_ReturnValue_2) == 0x0000E4, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E5, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000E8, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent, CallFunc_GetPlayerList_ReturnValue) == 0x0000F0, "Member 'BP_PlayerDriveComponent_C_ProtectedSetSequenceActorEvent::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdate
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActivePostProcess_IsActive;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3196[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedUpdate) == 0x000004, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedUpdate");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedUpdate) == 0x000010, "Wrong size on BP_PlayerDriveComponent_C_ProtectedUpdate");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdate, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdate, CallFunc_IsActivePostProcess_IsActive) == 0x000004, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdate::CallFunc_IsActivePostProcess_IsActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdate, CallFunc_IsDriveMode_ReturnValue) == 0x000005, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdate::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdate, CallFunc_GetScalarParameterValue_ReturnValue) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdate::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdate, CallFunc_InRange_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdate::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.PlayEndSequence
// 0x0088 (0x0088 - 0x0000)
struct BP_PlayerDriveComponent_C_PlayEndSequence final
{
public:
	bool                                          bNoSequence;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3197[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0020(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3198[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0060(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_PlayEndSequence) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_PlayEndSequence");
static_assert(sizeof(BP_PlayerDriveComponent_C_PlayEndSequence) == 0x000088, "Wrong size on BP_PlayerDriveComponent_C_PlayEndSequence");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, bNoSequence) == 0x000000, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::bNoSequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000018, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_Format_ReturnValue) == 0x000020, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_Conv_TextToString_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00004A, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_IsValid_ReturnValue_1) == 0x00004B, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, K2Node_MakeArray_Array_1) == 0x000050, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_Format_ReturnValue_1) == 0x000060, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayEndSequence, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000078, "Member 'BP_PlayerDriveComponent_C_PlayEndSequence::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqPlayerOpenSwitch
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch final
{
public:
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch");
static_assert(sizeof(BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch) == 0x000008, "Wrong size on BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch, CallFunc_GetMovementComponent_ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EventSeqPlayerOpenSwitch::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EventSeqSetDriveMaterial
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial final
{
public:
	bool                                          EnableDrive;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3199[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerMaterialManageComponent_C*    PlayerMaterialManageComp;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial");
static_assert(sizeof(BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial, EnableDrive) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial::EnableDrive' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial, PlayerMaterialManageComp) == 0x000008, "Member 'BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial::PlayerMaterialManageComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_EventSeqSetDriveMaterial::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedGetSequencerAsset
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset final
{
public:
	bool                                          IsStart;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Valid;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         CallFunc_Array_Get_Item_1;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset) == 0x000028, "Wrong size on BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, IsStart) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::IsStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, Valid) == 0x000001, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, LevelSequence) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::LevelSequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000021, "Member 'BP_PlayerDriveComponent_C_ProtectedGetSequencerAsset::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdateSequenceParameter
// 0x0170 (0x0170 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter final
{
public:
	struct FVector                                TargetDirection;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      CallFunc_GetPlayerCameraFieldOfView_self_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPlayerCameraFieldOfView_ReturnValue;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      CallFunc_GetPlayerCameraRotation_self_CastInput;   // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetPlayerCameraRotation_ReturnValue;      // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface;             // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319D[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPlayerCameraLocation_ReturnValue;      // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319E[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319F[0xC];                                     // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter) == 0x000010, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter) == 0x000170, "Wrong size on BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, TargetDirection) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::TargetDirection' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_GetPlayerCameraFieldOfView_self_CastInput) == 0x000010, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_GetPlayerCameraFieldOfView_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_GetPlayerCameraFieldOfView_ReturnValue) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_GetPlayerCameraFieldOfView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_GetPlayerCameraRotation_self_CastInput) == 0x000028, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_GetPlayerCameraRotation_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_GetPlayerCameraRotation_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_GetPlayerCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_GetSocketLocation_ReturnValue) == 0x000050, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, K2Node_DynamicCast_AsCamera_Interface) == 0x000068, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::K2Node_DynamicCast_AsCamera_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_GetPlayerCameraLocation_ReturnValue) == 0x00007C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_GetPlayerCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_FindLookAtRotation_ReturnValue) == 0x00008C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_RInterpTo_ReturnValue) == 0x000098, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_MakeTransform_ReturnValue) == 0x0000B0, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000E0, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000168, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateSequenceParameter::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetupSequencePPM
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerDriveComponent_C_SetupSequencePPM final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       Character;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               EnemyList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A1[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A2[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_SetupSequencePPM) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_SetupSequencePPM");
static_assert(sizeof(BP_PlayerDriveComponent_C_SetupSequencePPM) == 0x000060, "Wrong size on BP_PlayerDriveComponent_C_SetupSequencePPM");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, Enable) == 0x000000, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::Enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, Character) == 0x000008, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, EnemyList) == 0x000010, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, PlayerList) == 0x000020, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000030, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000044, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetupSequencePPM, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1) == 0x000050, "Member 'BP_PlayerDriveComponent_C_SetupSequencePPM::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdatePostProcess
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               CallFunc_UseRenderingOptionPPMDrivePlane_Quality;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A3[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentParameterRate_ReturnValue;      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActivePostProcess_IsActive;             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A4[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               Temp_byte_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A5[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A6[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A7[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess) == 0x0000A0, "Wrong size on BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, Length) == 0x000004, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::Length' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, Color) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::Color' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, Temp_float_Variable) == 0x000018, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, Temp_float_Variable_1) == 0x00001C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_UseRenderingOptionPPMDrivePlane_Quality) == 0x000020, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_UseRenderingOptionPPMDrivePlane_Quality' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_GetCurrentParameterRate_ReturnValue) == 0x000024, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_GetCurrentParameterRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_FInterpTo_ReturnValue) == 0x000028, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_IsValid_ReturnValue_1) == 0x00002D, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_IsActivePostProcess_IsActive) == 0x00002E, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_IsActivePostProcess_IsActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, Temp_byte_Variable) == 0x00003C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_IsValid_ReturnValue_2) == 0x00003D, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003E, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, Temp_float_Variable_2) == 0x000040, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, K2Node_Select_Default) == 0x000044, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000050, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_FMax_ReturnValue) == 0x000060, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Add_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_FMin_ReturnValue) == 0x000068, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_BooleanAND_ReturnValue) == 0x00006C, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000070, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, K2Node_MakeStruct_LinearColor) == 0x000074, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_GetOwner_ReturnValue) == 0x000088, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdatePostProcess::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsActivePostProcess
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerDriveComponent_C_IsActivePostProcess final
{
public:
	bool                                          Param_IsActive;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsActivePostProcess) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_IsActivePostProcess");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsActivePostProcess) == 0x000003, "Wrong size on BP_PlayerDriveComponent_C_IsActivePostProcess");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsActivePostProcess, Param_IsActive) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsActivePostProcess::Param_IsActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsActivePostProcess, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PlayerDriveComponent_C_IsActivePostProcess::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsActivePostProcess, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_PlayerDriveComponent_C_IsActivePostProcess::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ClearPostProcess
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_ClearPostProcess final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ClearPostProcess) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_ClearPostProcess");
static_assert(sizeof(BP_PlayerDriveComponent_C_ClearPostProcess) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_ClearPostProcess");
static_assert(offsetof(BP_PlayerDriveComponent_C_ClearPostProcess, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ClearPostProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.TickDriveReady
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerDriveComponent_C_TickDriveReady final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LSimpleDirectionValue;                             // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveUsedFlag_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHologramOn_bOn;                         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DriveBeginFinalCheck_bOK;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DriveBeginFinalCheck_bOK_1;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDriveFullDirection_ReturnValue;   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSimpleDirectionTiming_bSImpleDirection; // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveReadyAble_bOK;                     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A8[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_TickDriveReady) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_TickDriveReady");
static_assert(sizeof(BP_PlayerDriveComponent_C_TickDriveReady) == 0x000038, "Wrong size on BP_PlayerDriveComponent_C_TickDriveReady");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, LSimpleDirectionValue) == 0x000004, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::LSimpleDirectionValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_GetPlayerManager_PlayerManager) == 0x000010, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_IsDriveUsedFlag_ReturnValue) == 0x000019, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_IsDriveUsedFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_IsHologramOn_bOn) == 0x00001A, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_IsHologramOn_bOn' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_DriveBeginFinalCheck_bOK) == 0x00001B, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_DriveBeginFinalCheck_bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_DriveBeginFinalCheck_bOK_1) == 0x00001C, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_DriveBeginFinalCheck_bOK_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_IsEnableDriveFullDirection_ReturnValue) == 0x00001D, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_IsEnableDriveFullDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_IsSimpleDirectionTiming_bSImpleDirection) == 0x00001E, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_IsSimpleDirectionTiming_bSImpleDirection' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001F, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_GetSASManager_SAS_Manager) == 0x000020, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_IsCutInPlaying_Playing) == 0x000028, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_IsDriveReadyAble_bOK) == 0x000029, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_IsDriveReadyAble_bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickDriveReady, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_PlayerDriveComponent_C_TickDriveReady::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ReadyDrive
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerDriveComponent_C_ReadyDrive final
{
public:
	bool                                          bAfterBrainCrash;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bManual;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveReadyAble_bOK;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ReadyDrive) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_ReadyDrive");
static_assert(sizeof(BP_PlayerDriveComponent_C_ReadyDrive) == 0x000005, "Wrong size on BP_PlayerDriveComponent_C_ReadyDrive");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReadyDrive, bAfterBrainCrash) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ReadyDrive::bAfterBrainCrash' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReadyDrive, bManual) == 0x000001, "Member 'BP_PlayerDriveComponent_C_ReadyDrive::bManual' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReadyDrive, CallFunc_IsDriveReadyAble_bOK) == 0x000002, "Member 'BP_PlayerDriveComponent_C_ReadyDrive::CallFunc_IsDriveReadyAble_bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReadyDrive, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerDriveComponent_C_ReadyDrive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ReadyDrive, CallFunc_Not_PreBool_ReturnValue_1) == 0x000004, "Member 'BP_PlayerDriveComponent_C_ReadyDrive::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.OnDriveEnd
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerDriveComponent_C_OnDriveEnd final
{
public:
	bool                                          bInterruption;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLocationChange;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_OnDriveEnd) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_OnDriveEnd");
static_assert(sizeof(BP_PlayerDriveComponent_C_OnDriveEnd) == 0x000002, "Wrong size on BP_PlayerDriveComponent_C_OnDriveEnd");
static_assert(offsetof(BP_PlayerDriveComponent_C_OnDriveEnd, bInterruption) == 0x000000, "Member 'BP_PlayerDriveComponent_C_OnDriveEnd::bInterruption' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_OnDriveEnd, bLocationChange) == 0x000001, "Member 'BP_PlayerDriveComponent_C_OnDriveEnd::bLocationChange' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirectionFlash
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AA[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue_1;     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash");
static_assert(sizeof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash) == 0x000060, "Wrong size on BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000018, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_IsControlAI_bAI) == 0x000020, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000024, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_SpawnSoundAtLocationRS_ReturnValue_1) == 0x000030, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_SpawnSoundAtLocationRS_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, K2Node_MakeStruct_LinearColor) == 0x000038, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000048, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000050, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionFlash::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EndSimpleDirection
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_EndSimpleDirection final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EndSimpleDirection) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EndSimpleDirection");
static_assert(sizeof(BP_PlayerDriveComponent_C_EndSimpleDirection) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_EndSimpleDirection");
static_assert(offsetof(BP_PlayerDriveComponent_C_EndSimpleDirection, bSuccess) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EndSimpleDirection::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EndSimpleDirection, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_EndSimpleDirection::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EndSimpleDirection, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_EndSimpleDirection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.TickSimpleDirection
// 0x0088 (0x0088 - 0x0000)
struct BP_PlayerDriveComponent_C_TickSimpleDirection final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LUpdateNum;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LUpdateSeconds;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LSimpleDirectionValue;                             // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MinValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MaxValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AD[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AE[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AF[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B0[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B1[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_TickSimpleDirection) == 0x000004, "Wrong alignment on BP_PlayerDriveComponent_C_TickSimpleDirection");
static_assert(sizeof(BP_PlayerDriveComponent_C_TickSimpleDirection) == 0x000088, "Wrong size on BP_PlayerDriveComponent_C_TickSimpleDirection");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, LUpdateNum) == 0x000004, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::LUpdateNum' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, LUpdateSeconds) == 0x000008, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::LUpdateSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, LSimpleDirectionValue) == 0x00000C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::LSimpleDirectionValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, K2Node_MathExpression_ReturnValue) == 0x000024, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_FCeil_ReturnValue) == 0x00002C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_GetValueRange_MinValue) == 0x000030, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_GetValueRange_MinValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_GetValueRange_MaxValue) == 0x000034, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_GetValueRange_MaxValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_X) == 0x00003C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_Y) == 0x000040, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_Z) == 0x000044, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Not_PreBool_ReturnValue_1) == 0x000049, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_X_1) == 0x00004C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_Y_1) == 0x000050, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_Z_1) == 0x000054, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000058, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Not_PreBool_ReturnValue_2) == 0x000059, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_X_2) == 0x00005C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_Y_2) == 0x000060, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_BreakVector_Z_2) == 0x000064, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x000068, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Not_PreBool_ReturnValue_3) == 0x000069, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, Temp_int_Variable) == 0x00006C, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000070, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_GetVectorValue_ReturnValue) == 0x000078, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_TickSimpleDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_PlayerDriveComponent_C_TickSimpleDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirection
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerDriveComponent_C_BeginSimpleDirection final
{
public:
	bool                                          IsSkipDirection;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B2[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B3[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_BeginSimpleDirection) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_BeginSimpleDirection");
static_assert(sizeof(BP_PlayerDriveComponent_C_BeginSimpleDirection) == 0x000030, "Wrong size on BP_PlayerDriveComponent_C_BeginSimpleDirection");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, IsSkipDirection) == 0x000000, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::IsSkipDirection' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, Temp_bool_Variable) == 0x000001, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, CallFunc_GetPlayerID_self_CastInput) == 0x000010, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, CallFunc_GetPlayerID_ReturnValue) == 0x000020, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, CallFunc_IsControlAI_bAI) == 0x000021, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirection, K2Node_Select_Default) == 0x000028, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirection::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetSimpleDirectionHood
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerDriveComponent_C_SetSimpleDirectionHood final
{
public:
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B4[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       CallFunc_SetHoodVisible_self_CastInput;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHoodVisible_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_SetSimpleDirectionHood");
static_assert(sizeof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood) == 0x000030, "Wrong size on BP_PlayerDriveComponent_C_SetSimpleDirectionHood");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000000, "Member 'BP_PlayerDriveComponent_C_SetSimpleDirectionHood::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000010, "Member 'BP_PlayerDriveComponent_C_SetSimpleDirectionHood::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood, CallFunc_IsControlAI_bAI) == 0x000011, "Member 'BP_PlayerDriveComponent_C_SetSimpleDirectionHood::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood, CallFunc_SetHoodVisible_self_CastInput) == 0x000018, "Member 'BP_PlayerDriveComponent_C_SetSimpleDirectionHood::CallFunc_SetHoodVisible_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetSimpleDirectionHood, CallFunc_SetHoodVisible_ReturnValue) == 0x000028, "Member 'BP_PlayerDriveComponent_C_SetSimpleDirectionHood::CallFunc_SetHoodVisible_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.DriveImpactAttack
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerDriveComponent_C_DriveImpactAttack final
{
public:
	TArray<struct FFAttackEmitterInfo>            LAttackInfo;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FFAttackEmitterInfo>            K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_DriveImpactAttack) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_DriveImpactAttack");
static_assert(sizeof(BP_PlayerDriveComponent_C_DriveImpactAttack) == 0x000020, "Wrong size on BP_PlayerDriveComponent_C_DriveImpactAttack");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveImpactAttack, LAttackInfo) == 0x000000, "Member 'BP_PlayerDriveComponent_C_DriveImpactAttack::LAttackInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveImpactAttack, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_PlayerDriveComponent_C_DriveImpactAttack::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.BeginSimpleDirectionSlow
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow");
static_assert(sizeof(BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow) == 0x000020, "Wrong size on BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow, Rate) == 0x000000, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow::Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow, CallFunc_GetGameSystemManager_Manager) == 0x000010, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000018, "Member 'BP_PlayerDriveComponent_C_BeginSimpleDirectionSlow::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.EndSimpleDirectionSlow
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_EndSimpleDirectionSlow final
{
public:
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_EndSimpleDirectionSlow) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_EndSimpleDirectionSlow");
static_assert(sizeof(BP_PlayerDriveComponent_C_EndSimpleDirectionSlow) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_EndSimpleDirectionSlow");
static_assert(offsetof(BP_PlayerDriveComponent_C_EndSimpleDirectionSlow, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000000, "Member 'BP_PlayerDriveComponent_C_EndSimpleDirectionSlow::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EndSimpleDirectionSlow, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_EndSimpleDirectionSlow::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_EndSimpleDirectionSlow, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000010, "Member 'BP_PlayerDriveComponent_C_EndSimpleDirectionSlow::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.DriveBeginFinalCheck
// 0x0058 (0x0058 - 0x0000)
struct BP_PlayerDriveComponent_C_DriveBeginFinalCheck final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbResult;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B6[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDisableDriveLastEnemyHpRate_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckExistBattleEnemy_bExistEnemy;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_CheckExistBattleEnemy_LastEnemy;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B8[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B9[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_DriveBeginFinalCheck");
static_assert(sizeof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck) == 0x000058, "Wrong size on BP_PlayerDriveComponent_C_DriveBeginFinalCheck");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, bOK) == 0x000000, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, LbResult) == 0x000001, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::LbResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_GetDisableDriveLastEnemyHpRate_ReturnValue) == 0x000004, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_GetDisableDriveLastEnemyHpRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_CheckExistBattleEnemy_bExistEnemy) == 0x000010, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_CheckExistBattleEnemy_bExistEnemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_CheckExistBattleEnemy_LastEnemy) == 0x000018, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_CheckExistBattleEnemy_LastEnemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000020, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000038, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_GetHPPercent_Percent) == 0x00004C, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_IsBossEnemy_bBoss) == 0x000050, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000051, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_DriveBeginFinalCheck, CallFunc_IsValid_ReturnValue) == 0x000052, "Member 'BP_PlayerDriveComponent_C_DriveBeginFinalCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetBrainFieldDrive
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerDriveComponent_C_SetBrainFieldDrive final
{
public:
	bool                                          bDrive;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_SetBrainFieldDrive) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_SetBrainFieldDrive");
static_assert(sizeof(BP_PlayerDriveComponent_C_SetBrainFieldDrive) == 0x000002, "Wrong size on BP_PlayerDriveComponent_C_SetBrainFieldDrive");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetBrainFieldDrive, bDrive) == 0x000000, "Member 'BP_PlayerDriveComponent_C_SetBrainFieldDrive::bDrive' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetBrainFieldDrive, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'BP_PlayerDriveComponent_C_SetBrainFieldDrive::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.PlayDriveVoice
// 0x0110 (0x0110 - 0x0000)
struct BP_PlayerDriveComponent_C_PlayDriveVoice final
{
public:
	EPlayerID                                     Param_PlayerId;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BA[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_8;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_9;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_10;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_11;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_12;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_13;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_14;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_15;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_16;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_17;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_18;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_19;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_20;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_21;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_22;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_23;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_24;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_25;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Temp_object_Variable_26;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          K2Node_Select_Default;                             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BB[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          CallFunc_ReplaceNotifySound_Native_ReturnValue;    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetSkeletalMeshFromActor_ReturnValue;     // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_PlayVoice_ReturnValue;                    // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_PlayDriveVoice) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_PlayDriveVoice");
static_assert(sizeof(BP_PlayerDriveComponent_C_PlayDriveVoice) == 0x000110, "Wrong size on BP_PlayerDriveComponent_C_PlayDriveVoice");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Param_PlayerId) == 0x000000, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Param_PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_byte_Variable) == 0x000001, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable) == 0x000008, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_1) == 0x000010, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_2) == 0x000018, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_3) == 0x000020, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_4) == 0x000028, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_5) == 0x000030, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_6) == 0x000038, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_7) == 0x000040, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_8) == 0x000048, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_9) == 0x000050, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_10) == 0x000058, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_11) == 0x000060, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_12) == 0x000068, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_13) == 0x000070, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_14) == 0x000078, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_15) == 0x000080, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_16) == 0x000088, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_17) == 0x000090, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_18) == 0x000098, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_19) == 0x0000A0, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_20) == 0x0000A8, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_21) == 0x0000B0, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_22) == 0x0000B8, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_23) == 0x0000C0, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_24) == 0x0000C8, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_25) == 0x0000D0, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, Temp_object_Variable_26) == 0x0000D8, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, CallFunc_GetSoundManager_SoundManager) == 0x0000E0, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, K2Node_Select_Default) == 0x0000E8, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, CallFunc_IsValid_ReturnValue) == 0x0000F0, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, CallFunc_ReplaceNotifySound_Native_ReturnValue) == 0x0000F8, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::CallFunc_ReplaceNotifySound_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, CallFunc_GetSkeletalMeshFromActor_ReturnValue) == 0x000100, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::CallFunc_GetSkeletalMeshFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_PlayDriveVoice, CallFunc_PlayVoice_ReturnValue) == 0x000108, "Member 'BP_PlayerDriveComponent_C_PlayDriveVoice::CallFunc_PlayVoice_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.UpdateDrivePlane
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerDriveComponent_C_UpdateDrivePlane final
{
public:
	float                                         EffectLength;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BC[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BD[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BE[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BF[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_UpdateDrivePlane) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_UpdateDrivePlane");
static_assert(sizeof(BP_PlayerDriveComponent_C_UpdateDrivePlane) == 0x000080, "Wrong size on BP_PlayerDriveComponent_C_UpdateDrivePlane");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, EffectLength) == 0x000000, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::EffectLength' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, PlayerLocation) == 0x000004, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::PlayerLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, Temp_bool_IsClosed_Variable) == 0x000010, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, Temp_bool_Has_Been_Initd_Variable) == 0x000011, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, K2Node_MakeStruct_LinearColor) == 0x00001C, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, K2Node_MakeStruct_LinearColor_1) == 0x00002C, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, K2Node_DynamicCast_AsRSBattle_Player) == 0x000048, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000054, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_GetSocketLocation_ReturnValue) == 0x000068, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_Vector_Distance_ReturnValue) == 0x000074, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_UpdateDrivePlane, CallFunc_IsValid_ReturnValue_1) == 0x000079, "Member 'BP_PlayerDriveComponent_C_UpdateDrivePlane::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.Shutdown DrivePlane
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_Shutdown_DrivePlane final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_Shutdown_DrivePlane) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_Shutdown_DrivePlane");
static_assert(sizeof(BP_PlayerDriveComponent_C_Shutdown_DrivePlane) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_Shutdown_DrivePlane");
static_assert(offsetof(BP_PlayerDriveComponent_C_Shutdown_DrivePlane, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_Shutdown_DrivePlane::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.SetBattling
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_SetBattling final
{
public:
	bool                                          Battliing;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_SetBattling) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_SetBattling");
static_assert(sizeof(BP_PlayerDriveComponent_C_SetBattling) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_SetBattling");
static_assert(offsetof(BP_PlayerDriveComponent_C_SetBattling, Battliing) == 0x000000, "Member 'BP_PlayerDriveComponent_C_SetBattling::Battliing' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.ProtectedUpdateBattling
// 0x000C (0x000C - 0x0000)
struct BP_PlayerDriveComponent_C_ProtectedUpdateBattling final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerDriveComponent_C_ProtectedUpdateBattling) == 0x000004, "Wrong alignment on BP_PlayerDriveComponent_C_ProtectedUpdateBattling");
static_assert(sizeof(BP_PlayerDriveComponent_C_ProtectedUpdateBattling) == 0x00000C, "Wrong size on BP_PlayerDriveComponent_C_ProtectedUpdateBattling");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateBattling, DeltaSeconds) == 0x000000, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateBattling::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateBattling, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateBattling::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_ProtectedUpdateBattling, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PlayerDriveComponent_C_ProtectedUpdateBattling::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsSimpleDirectionTiming
// 0x0066 (0x0066 - 0x0000)
struct BP_PlayerDriveComponent_C_IsSimpleDirectionTiming final
{
public:
	bool                                          bSImpleDirection;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSimpleDirection;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_50;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_51;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_52;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_53;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_54;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_55;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_56;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_57;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_58;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_59;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_60;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_61;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_62;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_63;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_64;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_65;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_66;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_67;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_68;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_69;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_70;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_71;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_72;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_73;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_74;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_75;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_76;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_77;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_78;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_79;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_80;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_81;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_82;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_83;                             // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_84;                             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_85;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_86;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_87;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_88;                             // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_89;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_90;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_91;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_92;                             // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_93;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_94;                             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_95;                             // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_IsSimpleDirectionTiming");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming) == 0x000066, "Wrong size on BP_PlayerDriveComponent_C_IsSimpleDirectionTiming");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, bSImpleDirection) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::bSImpleDirection' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, LbSimpleDirection) == 0x000001, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::LbSimpleDirection' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_byte_Variable) == 0x000002, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable) == 0x000003, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_1) == 0x000004, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_2) == 0x000005, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_3) == 0x000006, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_4) == 0x000007, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_5) == 0x000008, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_6) == 0x000009, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_7) == 0x00000A, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_8) == 0x00000B, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_9) == 0x00000C, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_10) == 0x00000D, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_11) == 0x00000E, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_12) == 0x00000F, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_13) == 0x000010, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_14) == 0x000011, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_15) == 0x000012, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_16) == 0x000013, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_17) == 0x000014, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_18) == 0x000015, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_19) == 0x000016, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_20) == 0x000017, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_21) == 0x000018, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_22) == 0x000019, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_23) == 0x00001A, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_24) == 0x00001B, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_25) == 0x00001C, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_26) == 0x00001D, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_27) == 0x00001E, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_28) == 0x00001F, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_29) == 0x000020, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_30) == 0x000021, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_31) == 0x000022, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_32) == 0x000023, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_33) == 0x000024, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_34) == 0x000025, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_35) == 0x000026, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_36) == 0x000027, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_37) == 0x000028, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_38) == 0x000029, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_39) == 0x00002A, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_40) == 0x00002B, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_41) == 0x00002C, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_42) == 0x00002D, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_43) == 0x00002E, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_44) == 0x00002F, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_45) == 0x000030, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_46) == 0x000031, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_47) == 0x000032, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_48) == 0x000033, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_49) == 0x000034, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_50) == 0x000035, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_50' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_51) == 0x000036, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_51' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_52) == 0x000037, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_52' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_53) == 0x000038, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_53' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_54) == 0x000039, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_54' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_55) == 0x00003A, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_55' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_56) == 0x00003B, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_56' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_57) == 0x00003C, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_57' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_58) == 0x00003D, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_58' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_59) == 0x00003E, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_59' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_60) == 0x00003F, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_60' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_61) == 0x000040, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_61' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_62) == 0x000041, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_62' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_63) == 0x000042, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_63' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_64) == 0x000043, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_64' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_65) == 0x000044, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_65' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_66) == 0x000045, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_66' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_67) == 0x000046, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_67' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_68) == 0x000047, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_68' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_69) == 0x000048, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_69' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_70) == 0x000049, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_70' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_71) == 0x00004A, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_71' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_72) == 0x00004B, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_72' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_73) == 0x00004C, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_73' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_74) == 0x00004D, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_74' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_75) == 0x00004E, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_75' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_76) == 0x00004F, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_76' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_77) == 0x000050, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_77' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_78) == 0x000051, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_78' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_79) == 0x000052, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_79' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_80) == 0x000053, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_80' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_81) == 0x000054, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_81' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_82) == 0x000055, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_82' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_83) == 0x000056, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_83' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_84) == 0x000057, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_84' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_85) == 0x000058, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_85' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_86) == 0x000059, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_86' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_87) == 0x00005A, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_87' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_88) == 0x00005B, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_88' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_89) == 0x00005C, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_89' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_90) == 0x00005D, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_90' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_91) == 0x00005E, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_91' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_92) == 0x00005F, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_92' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_93) == 0x000060, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_93' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_94) == 0x000061, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_94' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, Temp_bool_Variable_95) == 0x000062, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::Temp_bool_Variable_95' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, CallFunc_IsActionStatus_Result) == 0x000063, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x000064, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsSimpleDirectionTiming, K2Node_Select_Default) == 0x000065, "Member 'BP_PlayerDriveComponent_C_IsSimpleDirectionTiming::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsDebugInfiniteDrive
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_IsDebugInfiniteDrive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsDebugInfiniteDrive) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_IsDebugInfiniteDrive");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsDebugInfiniteDrive) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_IsDebugInfiniteDrive");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDebugInfiniteDrive, ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsDebugInfiniteDrive::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDebugInfiniteDrive, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_IsDebugInfiniteDrive::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDebugInfiniteDrive, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_IsDebugInfiniteDrive::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsDebugAlwaysDrive
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerDriveComponent_C_IsDebugAlwaysDrive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsDebugAlwaysDrive) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_IsDebugAlwaysDrive");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsDebugAlwaysDrive) == 0x000018, "Wrong size on BP_PlayerDriveComponent_C_IsDebugAlwaysDrive");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDebugAlwaysDrive, ReturnValue) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsDebugAlwaysDrive::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDebugAlwaysDrive, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_IsDebugAlwaysDrive::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDebugAlwaysDrive, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_IsDebugAlwaysDrive::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsPlayingSequence
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_IsPlayingSequence final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsPlayingSequence) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_IsPlayingSequence");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsPlayingSequence) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_IsPlayingSequence");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsPlayingSequence, IsPlaying) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsPlayingSequence::IsPlaying' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsInitialize
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_IsInitialize final
{
public:
	bool                                          IsInitialized;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsInitialize) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_IsInitialize");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsInitialize) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_IsInitialize");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsInitialize, IsInitialized) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsInitialize::IsInitialized' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsDriveReadyAble
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerDriveComponent_C_IsDriveReadyAble final
{
public:
	bool                                          bInManual;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LOK;                                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C3[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContentsOpened_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsBadStatusConfusion_self_CastInput;      // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsDriveReadyAble) == 0x000008, "Wrong alignment on BP_PlayerDriveComponent_C_IsDriveReadyAble");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsDriveReadyAble) == 0x000030, "Wrong size on BP_PlayerDriveComponent_C_IsDriveReadyAble");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, bInManual) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::bInManual' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, bOK) == 0x000001, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, LOK) == 0x000002, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::LOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsPlayerStatus_Result) == 0x000003, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsActionStatus_Result) == 0x000004, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsActionStatus_Result_1) == 0x000006, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsContentsOpened_ReturnValue) == 0x000011, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsContentsOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_Not_PreBool_ReturnValue_1) == 0x000012, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsDriveMode_ReturnValue) == 0x000013, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsBadStatusConfusion_self_CastInput) == 0x000018, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsBadStatusConfusion_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000028, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsDriveReadyAble, CallFunc_IsDisableAction_bEnable) == 0x000029, "Member 'BP_PlayerDriveComponent_C_IsDriveReadyAble::CallFunc_IsDisableAction_bEnable' has a wrong offset!");

// Function BP_PlayerDriveComponent.BP_PlayerDriveComponent_C.IsPlaySimpleDirection
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerDriveComponent_C_IsPlaySimpleDirection final
{
public:
	bool                                          bPlay;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerDriveComponent_C_IsPlaySimpleDirection) == 0x000001, "Wrong alignment on BP_PlayerDriveComponent_C_IsPlaySimpleDirection");
static_assert(sizeof(BP_PlayerDriveComponent_C_IsPlaySimpleDirection) == 0x000001, "Wrong size on BP_PlayerDriveComponent_C_IsPlaySimpleDirection");
static_assert(offsetof(BP_PlayerDriveComponent_C_IsPlaySimpleDirection, bPlay) == 0x000000, "Member 'BP_PlayerDriveComponent_C_IsPlaySimpleDirection::bPlay' has a wrong offset!");

}

