#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapGimmickManager

#include "Basic.hpp"

#include "BP_MapGimmickManager_classes.hpp"
#include "BP_MapGimmickManager_parameters.hpp"


namespace SDK
{

// Function BP_MapGimmickManager.BP_MapGimmickManager_C.ExecuteUbergraph_BP_MapGimmickManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapGimmickManager_C::ExecuteUbergraph_BP_MapGimmickManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "ExecuteUbergraph_BP_MapGimmickManager");

	Params::BP_MapGimmickManager_C_ExecuteUbergraph_BP_MapGimmickManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MapGimmickManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.AddMapGimmickUseTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMapGimmickObject*                Gimmick                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_MapGimmickManager_C::AddMapGimmickUseTime(class AMapGimmickObject* Gimmick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "AddMapGimmickUseTime");

	Params::BP_MapGimmickManager_C_AddMapGimmickUseTime Parms{};

	Parms.Gimmick = Gimmick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.AddMapGimmickUseTimeByType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMapGimmickType                         Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapGimmickManager_C::AddMapGimmickUseTimeByType(EMapGimmickType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "AddMapGimmickUseTimeByType");

	Params::BP_MapGimmickManager_C_AddMapGimmickUseTimeByType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.CheckUsedGimmickType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMapGimmickType                         Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Used                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapGimmickManager_C::CheckUsedGimmickType(EMapGimmickType Type, bool* Used)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "CheckUsedGimmickType");

	Params::BP_MapGimmickManager_C_CheckUsedGimmickType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Used != nullptr)
		*Used = Parms.Used;
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.CheckUsedGimmickAnyTypes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EMapGimmickType>                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Used                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapGimmickManager_C::CheckUsedGimmickAnyTypes(TArray<EMapGimmickType>& Type, bool* Used)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "CheckUsedGimmickAnyTypes");

	Params::BP_MapGimmickManager_C_CheckUsedGimmickAnyTypes Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	Type = std::move(Parms.Type);

	if (Used != nullptr)
		*Used = Parms.Used;
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.CheckInYuitoScenario
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsYuitoScenario                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapGimmickManager_C::CheckInYuitoScenario(bool* IsYuitoScenario)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "CheckInYuitoScenario");

	Params::BP_MapGimmickManager_C_CheckInYuitoScenario Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsYuitoScenario != nullptr)
		*IsYuitoScenario = Parms.IsYuitoScenario;
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.ResetMapGimmickUseTimesAll
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MapGimmickManager_C::ResetMapGimmickUseTimesAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "ResetMapGimmickUseTimesAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapGimmickManager.BP_MapGimmickManager_C.InitializeMapGimmickUse
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MapGimmickManager_C::InitializeMapGimmickUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapGimmickManager_C", "InitializeMapGimmickUse");

	UObject::ProcessEvent(Func, nullptr);
}

}

