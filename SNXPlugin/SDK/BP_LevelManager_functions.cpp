#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelManager

#include "Basic.hpp"

#include "BP_LevelManager_classes.hpp"
#include "BP_LevelManager_parameters.hpp"


namespace SDK
{

// Function BP_LevelManager.BP_LevelManager_C.EventFinishWaitAreaVisibleDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishWaitAreaVisibleDispatcher__DelegateSignature(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishWaitAreaVisibleDispatcher__DelegateSignature");

	Params::BP_LevelManager_C_EventFinishWaitAreaVisibleDispatcher__DelegateSignature Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishWaitAreaUnvisibleDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishWaitAreaUnvisibleDispatcher__DelegateSignature(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishWaitAreaUnvisibleDispatcher__DelegateSignature");

	Params::BP_LevelManager_C_EventFinishWaitAreaUnvisibleDispatcher__DelegateSignature Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadAssetAsync__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           LoadedAsset                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishLoadAssetAsync__DelegateSignature(TSoftObjectPtr<class UObject> LoadedAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishLoadAssetAsync__DelegateSignature");

	Params::BP_LevelManager_C_EventFinishLoadAssetAsync__DelegateSignature Parms{};

	Parms.LoadedAsset = LoadedAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.OnStartCheckLevelVisible__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::OnStartCheckLevelVisible__DelegateSignature(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "OnStartCheckLevelVisible__DelegateSignature");

	Params::BP_LevelManager_C_OnStartCheckLevelVisible__DelegateSignature Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.OnEndCheckLevelVisible__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::OnEndCheckLevelVisible__DelegateSignature(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "OnEndCheckLevelVisible__DelegateSignature");

	Params::BP_LevelManager_C_OnEndCheckLevelVisible__DelegateSignature Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.ExecuteUbergraph_BP_LevelManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::ExecuteUbergraph_BP_LevelManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ExecuteUbergraph_BP_LevelManager");

	Params::BP_LevelManager_C_ExecuteUbergraph_BP_LevelManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.CopyCurrentSimulatorLevelInfosName
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::CopyCurrentSimulatorLevelInfosName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CopyCurrentSimulatorLevelInfosName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.SyncUnloadStreamLevels
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::SyncUnloadStreamLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SyncUnloadStreamLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.ExecLevelCommand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LevelManagerCommand           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::ExecLevelCommand(const struct FS_LevelManagerCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ExecLevelCommand");

	Params::BP_LevelManager_C_ExecLevelCommand Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ReceiveTick");

	Params::BP_LevelManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LevelManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadLevelDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishLoadLevelDispatcher_Event_0(TSoftObjectPtr<class UObject> LevelName, class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishLoadLevelDispatcher_Event_0");

	Params::BP_LevelManager_C_EventFinishLoadLevelDispatcher_Event_0 Parms{};

	Parms.LevelName = LevelName;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishUnloadAreaDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishUnloadAreaDispatcher_Event_0(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishUnloadAreaDispatcher_Event_0");

	Params::BP_LevelManager_C_EventFinishUnloadAreaDispatcher_Event_0 Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishUnloadLevelDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishUnloadLevelDispatcher_Event_0(TSoftObjectPtr<class UObject> LevelName, class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishUnloadLevelDispatcher_Event_0");

	Params::BP_LevelManager_C_EventFinishUnloadLevelDispatcher_Event_0 Parms{};

	Parms.LevelName = LevelName;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.BindEventFinishLoadArea
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindEventFinishLoadArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindEventFinishLoadArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.BindOnEndCheckLevelVisible
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindOnEndCheckLevelVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindOnEndCheckLevelVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.OnEndCheckLevelVisible_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::OnEndCheckLevelVisible_Event(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "OnEndCheckLevelVisible_Event");

	Params::BP_LevelManager_C_OnEndCheckLevelVisible_Event Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.OnStartCheckLevelVisible_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::OnStartCheckLevelVisible_Event(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "OnStartCheckLevelVisible_Event");

	Params::BP_LevelManager_C_OnStartCheckLevelVisible_Event Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.BindOnStartCheckLevelVisible
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindOnStartCheckLevelVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindOnStartCheckLevelVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.EventInitBind
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::EventInitBind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventInitBind");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.CallbackSetAreaVisibleFinishedAndSetPlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::CallbackSetAreaVisibleFinishedAndSetPlayer(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CallbackSetAreaVisibleFinishedAndSetPlayer");

	Params::BP_LevelManager_C_CallbackSetAreaVisibleFinishedAndSetPlayer Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.BindSetPlayerStartAfterFinishAreaVisible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PortalName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_LevelManager_C::BindSetPlayerStartAfterFinishAreaVisible(const class FString& PortalName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindSetPlayerStartAfterFinishAreaVisible");

	Params::BP_LevelManager_C_BindSetPlayerStartAfterFinishAreaVisible Parms{};

	Parms.PortalName = std::move(PortalName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishUnloadPackDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Pack                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishUnloadPackDispatcher_Event_0(const struct FPrimaryAssetType& Pack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishUnloadPackDispatcher_Event_0");

	Params::BP_LevelManager_C_EventFinishUnloadPackDispatcher_Event_0 Parms{};

	Parms.Pack = std::move(Pack);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadPackDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Pack                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishLoadPackDispatcher_Event_0(const struct FPrimaryAssetType& Pack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishLoadPackDispatcher_Event_0");

	Params::BP_LevelManager_C_EventFinishLoadPackDispatcher_Event_0 Parms{};

	Parms.Pack = std::move(Pack);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadAreaDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::EventFinishLoadAreaDispatcher_Event_0(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "EventFinishLoadAreaDispatcher_Event_0");

	Params::BP_LevelManager_C_EventFinishLoadAreaDispatcher_Event_0 Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.BindEventFinishUnloadPack
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindEventFinishUnloadPack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindEventFinishUnloadPack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.BindEventFinishLoadPack
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindEventFinishLoadPack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindEventFinishLoadPack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.BindEventFinishUnloadLevel
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindEventFinishUnloadLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindEventFinishUnloadLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.BindEventFinishUnloadArea
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindEventFinishUnloadArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindEventFinishUnloadArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.BindEventFinishLoadLevel
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::BindEventFinishLoadLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "BindEventFinishLoadLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaImmediateByAreaName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEnemyLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestLoadAreaImmediateByAreaName(class FName AreaName, bool SetVisbleAfterLoad, bool SkipEnemyLevels, bool SkipEventLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestLoadAreaImmediateByAreaName");

	Params::BP_LevelManager_C_RequestLoadAreaImmediateByAreaName Parms{};

	Parms.AreaName = AreaName;
	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;
	Parms.SkipEnemyLevels = SkipEnemyLevels;
	Parms.SkipEventLevels = SkipEventLevels;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetCurrentArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetCurrentArea(class FName AreaName, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetCurrentArea");

	Params::BP_LevelManager_C_SetCurrentArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_LevelManager.BP_LevelManager_C.CleanLoadedAreaInfos
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::CleanLoadedAreaInfos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CleanLoadedAreaInfos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.GetCurrentLevelCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LevelManagerCommand           Command                                                (Parm, OutParm, HasGetValueTypeHash)
// bool                                    IsFound                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetCurrentLevelCommand(struct FS_LevelManagerCommand* Command, bool* IsFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetCurrentLevelCommand");

	Params::BP_LevelManager_C_GetCurrentLevelCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Command != nullptr)
		*Command = std::move(Parms.Command);

	if (IsFound != nullptr)
		*IsFound = Parms.IsFound;
}


// Function BP_LevelManager.BP_LevelManager_C.AddLevelCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_LevelManagerCommand                   Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ArgName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ArgName2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Flag                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Flag2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CommandNum                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::AddLevelCommand(E_LevelManagerCommand Command, class FName ArgName, class FName ArgName2, bool Flag, TSoftObjectPtr<class UObject> Asset, bool Flag2, int32* CommandNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "AddLevelCommand");

	Params::BP_LevelManager_C_AddLevelCommand Parms{};

	Parms.Command = Command;
	Parms.ArgName = ArgName;
	Parms.ArgName2 = ArgName2;
	Parms.Flag = Flag;
	Parms.Asset = Asset;
	Parms.Flag2 = Flag2;

	UObject::ProcessEvent(Func, &Parms);

	if (CommandNum != nullptr)
		*CommandNum = Parms.CommandNum;
}


// Function BP_LevelManager.BP_LevelManager_C.StartLevelCommand
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::StartLevelCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "StartLevelCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.FinishLevelCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsError                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::FinishLevelCommand(bool IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "FinishLevelCommand");

	Params::BP_LevelManager_C_FinishLevelCommand Parms{};

	Parms.IsError = IsError;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFound                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetAreaInfoFromDB(class FName AreaName, bool* IsFound, struct FS_AreaInfo* AreaInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAreaInfoFromDB");

	Params::BP_LevelManager_C_GetAreaInfoFromDB Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFound != nullptr)
		*IsFound = Parms.IsFound;

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);
}


// Function BP_LevelManager.BP_LevelManager_C.SetAreaVisibleFlag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::SetAreaVisibleFlag(bool Visible, class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetAreaVisibleFlag");

	Params::BP_LevelManager_C_SetAreaVisibleFlag Parms{};

	Parms.Visible = Visible;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Async                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetAreaVisible(class FName AreaName, bool Async, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetAreaVisible");

	Params::BP_LevelManager_C_RequestSetAreaVisible Parms{};

	Parms.AreaName = AreaName;
	Parms.Async = Async;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetLevelsVisibleFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_LevelManager_C::SetLevelsVisibleFlag(bool Visible, TArray<TSoftObjectPtr<class UObject>>& Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetLevelsVisibleFlag");

	Params::BP_LevelManager_C_SetLevelsVisibleFlag Parms{};

	Parms.Visible = Visible;
	Parms.Levels = std::move(Levels);

	UObject::ProcessEvent(Func, &Parms);

	Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.FullPathToLevelName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FullPath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LevelName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::FullPathToLevelName(class FName FullPath, class FName* LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "FullPathToLevelName");

	Params::BP_LevelManager_C_FullPathToLevelName Parms{};

	Parms.FullPath = FullPath;

	UObject::ProcessEvent(Func, &Parms);

	if (LevelName != nullptr)
		*LevelName = Parms.LevelName;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaInLoadedAreaInfosWithCondition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaInLoadedAreaInfosWithCondition(class FName AreaName, bool* IsLoaded, bool* IsExist, struct FS_AreaInfo* AreaInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaInLoadedAreaInfosWithCondition");

	Params::BP_LevelManager_C_IsAreaInLoadedAreaInfosWithCondition Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestUnloadAreaAsync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestUnloadAreaAsync(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestUnloadAreaAsync");

	Params::BP_LevelManager_C_RequestUnloadAreaAsync Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetAreaInfoStatus
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_LevelLoadStatus                       Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_LevelLoadStatus                       OldStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::SetAreaInfoStatus(class FName AreaName, E_LevelLoadStatus Status, bool* Error, E_LevelLoadStatus* OldStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetAreaInfoStatus");

	Params::BP_LevelManager_C_SetAreaInfoStatus Parms{};

	Parms.AreaName = AreaName;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;

	if (OldStatus != nullptr)
		*OldStatus = Parms.OldStatus;
}


// Function BP_LevelManager.BP_LevelManager_C.UpdateCurrentLevelCommandStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_LevelCommandStatus                    Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::UpdateCurrentLevelCommandStatus(E_LevelCommandStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UpdateCurrentLevelCommandStatus");

	Params::BP_LevelManager_C_UpdateCurrentLevelCommandStatus Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintArealInfoMap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::DebugPrintArealInfoMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintArealInfoMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RemoveLoadedAreaInfoForce
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RemoveLoadedAreaInfoForce(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RemoveLoadedAreaInfoForce");

	Params::BP_LevelManager_C_RemoveLoadedAreaInfoForce Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RemoveLoadedAreaInfo
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RemoveLoadedAreaInfo(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RemoveLoadedAreaInfo");

	Params::BP_LevelManager_C_RemoveLoadedAreaInfo Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetNotCurrentAreaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     AreaNames                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetNotCurrentAreaName(TArray<class FName>* AreaNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetNotCurrentAreaName");

	Params::BP_LevelManager_C_GetNotCurrentAreaName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AreaNames != nullptr)
		*AreaNames = std::move(Parms.AreaNames);
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelsUnloaded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    CheckRaw                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Unloaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelsUnloaded(TArray<TSoftObjectPtr<class UObject>>& Levels, bool CheckRaw, bool* Unloaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelsUnloaded");

	Params::BP_LevelManager_C_IsLevelsUnloaded Parms{};

	Parms.Levels = std::move(Levels);
	Parms.CheckRaw = CheckRaw;

	UObject::ProcessEvent(Func, &Parms);

	Levels = std::move(Parms.Levels);

	if (Unloaded != nullptr)
		*Unloaded = Parms.Unloaded;
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelsLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    CheckRaw                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelsLoaded(TArray<TSoftObjectPtr<class UObject>>& Levels, bool CheckRaw, bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelsLoaded");

	Params::BP_LevelManager_C_IsLevelsLoaded Parms{};

	Parms.Levels = std::move(Levels);
	Parms.CheckRaw = CheckRaw;

	UObject::ProcessEvent(Func, &Parms);

	Levels = std::move(Parms.Levels);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_LevelManager.BP_LevelManager_C.AddOrUpdateLoadedAreaInfo
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_AreaInfo                      AreaInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::AddOrUpdateLoadedAreaInfo(class FName Param_Name, const struct FS_AreaInfo& AreaInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "AddOrUpdateLoadedAreaInfo");

	Params::BP_LevelManager_C_AddOrUpdateLoadedAreaInfo Parms{};

	Parms.Param_Name = Param_Name;
	Parms.AreaInfo = std::move(AreaInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RemoveRedundantLevelCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RemoveRedundantLevelCommand(class FName LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RemoveRedundantLevelCommand");

	Params::BP_LevelManager_C_RemoveRedundantLevelCommand Parms{};

	Parms.LevelName = LevelName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaOnlyVisibleAsync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Async                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetAreaOnlyVisibleAsync(class FName AreaName, bool Async)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetAreaOnlyVisibleAsync");

	Params::BP_LevelManager_C_RequestSetAreaOnlyVisibleAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.Async = Async;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetNotCurrentLoadedAreaInfos
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_AreaInfo>              Infos                                                  (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetNotCurrentLoadedAreaInfos(class FName AreaName, TArray<struct FS_AreaInfo>* Infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetNotCurrentLoadedAreaInfos");

	Params::BP_LevelManager_C_GetNotCurrentLoadedAreaInfos Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Infos != nullptr)
		*Infos = std::move(Parms.Infos);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestWaitLoadArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Async                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestWaitLoadArea(class FName AreaName, bool Async)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestWaitLoadArea");

	Params::BP_LevelManager_C_RequestWaitLoadArea Parms{};

	Parms.AreaName = AreaName;
	Parms.Async = Async;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestWaitUnloadArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NextAreaName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Async                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestWaitUnloadArea(class FName AreaName, class FName NextAreaName, bool Async)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestWaitUnloadArea");

	Params::BP_LevelManager_C_RequestWaitUnloadArea Parms{};

	Parms.AreaName = AreaName;
	Parms.NextAreaName = NextAreaName;
	Parms.Async = Async;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.UpdateLoadedAreaInfoStatus
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::UpdateLoadedAreaInfoStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UpdateLoadedAreaInfoStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestChangeArea
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestChangeArea(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestChangeArea");

	Params::BP_LevelManager_C_RequestChangeArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C._RequestUnloadUnusedArea
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::_RequestUnloadUnusedArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_RequestUnloadUnusedArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C._RequestUnloadAllArea
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::_RequestUnloadAllArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_RequestUnloadAllArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsLoadedByAreaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      Area_Info                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaLevelsLoadedByAreaName(class FName AreaName, bool RawCheck, bool* IsLoaded, bool* IsError, struct FS_AreaInfo* Area_Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLevelsLoadedByAreaName");

	Params::BP_LevelManager_C_IsAreaLevelsLoadedByAreaName Parms{};

	Parms.AreaName = AreaName;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (IsError != nullptr)
		*IsError = Parms.IsError;

	if (Area_Info != nullptr)
		*Area_Info = std::move(Parms.Area_Info);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintStatus
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::DebugPrintStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintCommandQueue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::DebugPrintCommandQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintCommandQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelInLoadedAreaInfos
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelInLoadedAreaInfos(TSoftObjectPtr<class UObject> Level, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelInLoadedAreaInfos");

	Params::BP_LevelManager_C_IsLevelInLoadedAreaInfos Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelInLoadedAreaInfosWithExclude
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<class FName>                     ExcludeAreaName                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelInLoadedAreaInfosWithExclude(TSoftObjectPtr<class UObject> Level, TArray<class FName>& ExcludeAreaName, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelInLoadedAreaInfosWithExclude");

	Params::BP_LevelManager_C_IsLevelInLoadedAreaInfosWithExclude Parms{};

	Parms.Level = Level;
	Parms.ExcludeAreaName = std::move(ExcludeAreaName);

	UObject::ProcessEvent(Func, &Parms);

	ExcludeAreaName = std::move(Parms.ExcludeAreaName);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BP_LevelManager.BP_LevelManager_C.RegisterLevelToLoaded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAlreadyExists                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RegisterLevelToLoaded(TSoftObjectPtr<class UObject> Level, class FName AreaName, bool* IsAlreadyExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RegisterLevelToLoaded");

	Params::BP_LevelManager_C_RegisterLevelToLoaded Parms{};

	Parms.Level = Level;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlreadyExists != nullptr)
		*IsAlreadyExists = Parms.IsAlreadyExists;
}


// Function BP_LevelManager.BP_LevelManager_C.UnregisterLevelToLoaded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::UnregisterLevelToLoaded(TSoftObjectPtr<class UObject> Level, class FName AreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UnregisterLevelToLoaded");

	Params::BP_LevelManager_C_UnregisterLevelToLoaded Parms{};

	Parms.Level = Level;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LevelManager.BP_LevelManager_C.RegisterPackToLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAlreadyExists                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RegisterPackToLoaded(const struct FPrimaryAssetType& Param_Name, bool* IsAlreadyExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RegisterPackToLoaded");

	Params::BP_LevelManager_C_RegisterPackToLoaded Parms{};

	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlreadyExists != nullptr)
		*IsAlreadyExists = Parms.IsAlreadyExists;
}


// Function BP_LevelManager.BP_LevelManager_C.UnregisterPackToLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::UnregisterPackToLoaded(const struct FPrimaryAssetType& LevelName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UnregisterPackToLoaded");

	Params::BP_LevelManager_C_UnregisterPackToLoaded Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsLoadedByInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaLevelsLoadedByInfo(class FName AreaName, bool RawCheck, bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLevelsLoadedByInfo");

	Params::BP_LevelManager_C_IsAreaLevelsLoadedByInfo Parms{};

	Parms.AreaName = AreaName;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsUnloadedWithoutOtherAreaUsing
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUnloaded                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaLevelsUnloadedWithoutOtherAreaUsing(class FName AreaName, bool* IsUnloaded, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLevelsUnloadedWithoutOtherAreaUsing");

	Params::BP_LevelManager_C_IsAreaLevelsUnloadedWithoutOtherAreaUsing Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnloaded != nullptr)
		*IsUnloaded = Parms.IsUnloaded;

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelInOtherLoadedArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             ExcludeAreaName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelInOtherLoadedArea(TSoftObjectPtr<class UObject> Level, class FName ExcludeAreaName, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelInOtherLoadedArea");

	Params::BP_LevelManager_C_IsLevelInOtherLoadedArea Parms{};

	Parms.Level = Level;
	Parms.ExcludeAreaName = ExcludeAreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_LevelManager.BP_LevelManager_C.__RequestSetAreaVisibleAsync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::__RequestSetAreaVisibleAsync(class FName AreaName, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "__RequestSetAreaVisibleAsync");

	Params::BP_LevelManager_C___RequestSetAreaVisibleAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetAllLevelsVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetAllLevelsVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetAllLevelsVisible");

	Params::BP_LevelManager_C_SetAllLevelsVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C._SetAreaOnlyVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::_SetAreaOnlyVisible(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_SetAreaOnlyVisible");

	Params::BP_LevelManager_C__SetAreaOnlyVisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetSceneSystemLevels
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneType                             Scene                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetSceneSystemLevels(E_SceneType Scene, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetSceneSystemLevels");

	Params::BP_LevelManager_C_GetSceneSystemLevels Parms{};

	Parms.Scene = Scene;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAreaSystemLevelNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   LevelNames                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetAreaSystemLevelNames(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* LevelNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAreaSystemLevelNames");

	Params::BP_LevelManager_C_GetAreaSystemLevelNames Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (LevelNames != nullptr)
		*LevelNames = std::move(Parms.LevelNames);
}


// Function BP_LevelManager.BP_LevelManager_C.__IsPackInOtherLoadedArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                PAT                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             ExcludeAreaName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::__IsPackInOtherLoadedArea(const struct FPrimaryAssetType& PAT, class FName ExcludeAreaName, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "__IsPackInOtherLoadedArea");

	Params::BP_LevelManager_C___IsPackInOtherLoadedArea Parms{};

	Parms.PAT = std::move(PAT);
	Parms.ExcludeAreaName = ExcludeAreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_LevelManager.BP_LevelManager_C._RequestUnloadUnsedSystemLevelAsync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::_RequestUnloadUnsedSystemLevelAsync(class FName AreaName, bool SetVisbleAfterLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_RequestUnloadUnsedSystemLevelAsync");

	Params::BP_LevelManager_C__RequestUnloadUnsedSystemLevelAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetUnusedSystemLevelName
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WillUnloadAreaName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class UObject>           UnusedSystemLevel                                      (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetUnusedSystemLevelName(class FName WillUnloadAreaName, bool* Found, TSoftObjectPtr<class UObject>* UnusedSystemLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetUnusedSystemLevelName");

	Params::BP_LevelManager_C_GetUnusedSystemLevelName Parms{};

	Parms.WillUnloadAreaName = WillUnloadAreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (UnusedSystemLevel != nullptr)
		*UnusedSystemLevel = Parms.UnusedSystemLevel;
}


// Function BP_LevelManager.BP_LevelManager_C.GetSystemLevel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneType                             SceneType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UObject>           SystemLevel                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetSystemLevel(E_SceneType SceneType, TSoftObjectPtr<class UObject>* SystemLevel, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetSystemLevel");

	Params::BP_LevelManager_C_GetSystemLevel Parms{};

	Parms.SceneType = SceneType;

	UObject::ProcessEvent(Func, &Parms);

	if (SystemLevel != nullptr)
		*SystemLevel = Parms.SystemLevel;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaVisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllVisible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaVisible(class FName AreaName, bool* AllVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaVisible");

	Params::BP_LevelManager_C_IsAreaVisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (AllVisible != nullptr)
		*AllVisible = Parms.AllVisible;
}


// Function BP_LevelManager.BP_LevelManager_C.GetAllLevelInArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetAllLevelInArea(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* Levels, struct FS_AreaInfo* AreaInfo, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAllLevelInArea");

	Params::BP_LevelManager_C_GetAllLevelInArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaUnvisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllUnvisible                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaUnvisible(class FName AreaName, bool* AllUnvisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaUnvisible");

	Params::BP_LevelManager_C_IsAreaUnvisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (AllUnvisible != nullptr)
		*AllUnvisible = Parms.AllUnvisible;
}


// Function BP_LevelManager.BP_LevelManager_C.RequestWaitAreaVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestWaitAreaVisible(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestWaitAreaVisible");

	Params::BP_LevelManager_C_RequestWaitAreaVisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestWaitAreaUnvisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestWaitAreaUnvisible(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestWaitAreaUnvisible");

	Params::BP_LevelManager_C_RequestWaitAreaUnvisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintCommandInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LevelManagerCommand           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_LevelManager_C::DebugPrintCommandInfo(struct FS_LevelManagerCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintCommandInfo");

	Params::BP_LevelManager_C_DebugPrintCommandInfo Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);

	Command = std::move(Parms.Command);
}


// Function BP_LevelManager.BP_LevelManager_C._RequestCancelLoadAreaAsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::_RequestCancelLoadAreaAsync(class FName AreaName, bool SetVisbleAfterLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_RequestCancelLoadAreaAsync");

	Params::BP_LevelManager_C__RequestCancelLoadAreaAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C._RequestLoadAssetPackAsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetPackName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::_RequestLoadAssetPackAsync(class FName AssetPackName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_RequestLoadAssetPackAsync");

	Params::BP_LevelManager_C__RequestLoadAssetPackAsync Parms{};

	Parms.AssetPackName = AssetPackName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestLoadAssetAsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestLoadAssetAsync(TSoftObjectPtr<class UObject> Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestLoadAssetAsync");

	Params::BP_LevelManager_C_RequestLoadAssetAsync Parms{};

	Parms.Asset = Asset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAllLevelInAreaWithoutSystem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetAllLevelInAreaWithoutSystem(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* Levels, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAllLevelInAreaWithoutSystem");

	Params::BP_LevelManager_C_GetAllLevelInAreaWithoutSystem Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C.GetSceneSystemLevelsByArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetSceneSystemLevelsByArea(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetSceneSystemLevelsByArea");

	Params::BP_LevelManager_C_GetSceneSystemLevelsByArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.ResetPlayerTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::ResetPlayerTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ResetPlayerTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetCallbackPlayerStartAfterAreaVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PortalName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestSetCallbackPlayerStartAfterAreaVisible(const class FString& PortalName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetCallbackPlayerStartAfterAreaVisible");

	Params::BP_LevelManager_C_RequestSetCallbackPlayerStartAfterAreaVisible Parms{};

	Parms.PortalName = std::move(PortalName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.UpdateLoadedLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::UpdateLoadedLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UpdateLoadedLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelInLoadedLevelInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_LoadedLevelInfo               LevelInfoRef                                           (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Exist                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelInLoadedLevelInfo(TSoftObjectPtr<class UObject> Level, struct FS_LoadedLevelInfo* LevelInfoRef, bool* Exist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelInLoadedLevelInfo");

	Params::BP_LevelManager_C_IsLevelInLoadedLevelInfo Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);

	if (LevelInfoRef != nullptr)
		*LevelInfoRef = std::move(Parms.LevelInfoRef);

	if (Exist != nullptr)
		*Exist = Parms.Exist;
}


// Function BP_LevelManager.BP_LevelManager_C.RemoveLevelFromLevelInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::RemoveLevelFromLevelInfo(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RemoveLevelFromLevelInfo");

	Params::BP_LevelManager_C_RemoveLevelFromLevelInfo Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAllAreaInfoLevels
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AdditionalArea                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RemoveArea                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetAllAreaInfoLevels(class FName AdditionalArea, class FName RemoveArea, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAllAreaInfoLevels");

	Params::BP_LevelManager_C_GetAllAreaInfoLevels Parms{};

	Parms.AdditionalArea = AdditionalArea;
	Parms.RemoveArea = RemoveArea;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetUnusedLevelWhenUnloadArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             UnloadAreaName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NextAreaName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   ShouldUnloadLevels                                     (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetUnusedLevelWhenUnloadArea(class FName UnloadAreaName, class FName NextAreaName, TArray<TSoftObjectPtr<class UObject>>* ShouldUnloadLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetUnusedLevelWhenUnloadArea");

	Params::BP_LevelManager_C_GetUnusedLevelWhenUnloadArea Parms{};

	Parms.UnloadAreaName = UnloadAreaName;
	Parms.NextAreaName = NextAreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldUnloadLevels != nullptr)
		*ShouldUnloadLevels = std::move(Parms.ShouldUnloadLevels);
}


// Function BP_LevelManager.BP_LevelManager_C.SetStatToLoadedLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// E_LevelLoadStatus                       Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::SetStatToLoadedLevel(TSoftObjectPtr<class UObject> Level, E_LevelLoadStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetStatToLoadedLevel");

	Params::BP_LevelManager_C_SetStatToLoadedLevel Parms{};

	Parms.Level = Level;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.StartPlayerWithPortalName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PortalName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class APlayerStart*>             Portals                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_LevelManager_C::StartPlayerWithPortalName(const class FString& PortalName, TArray<class APlayerStart*>& Portals)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "StartPlayerWithPortalName");

	Params::BP_LevelManager_C_StartPlayerWithPortalName Parms{};

	Parms.PortalName = std::move(PortalName);
	Parms.Portals = std::move(Portals);

	UObject::ProcessEvent(Func, &Parms);

	Portals = std::move(Parms.Portals);
}


// Function BP_LevelManager.BP_LevelManager_C.StartPlayerAtActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Portal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::StartPlayerAtActor(class AActor* Portal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "StartPlayerAtActor");

	Params::BP_LevelManager_C_StartPlayerAtActor Parms{};

	Parms.Portal = Portal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelVisibleInLoadedLevelInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Visible                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelVisibleInLoadedLevelInfo(TSoftObjectPtr<class UObject> Level, bool* Visible, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelVisibleInLoadedLevelInfo");

	Params::BP_LevelManager_C_IsLevelVisibleInLoadedLevelInfo Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);

	if (Visible != nullptr)
		*Visible = Parms.Visible;

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C.SetLevelVisibleFlag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class UObject>           Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::SetLevelVisibleFlag(bool Visible, TSoftObjectPtr<class UObject> Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetLevelVisibleFlag");

	Params::BP_LevelManager_C_SetLevelVisibleFlag Parms{};

	Parms.Visible = Visible;
	Parms.Levels = Levels;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetVisibleLevelsAndWait
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetVisibleLevelsAndWait(TArray<TSoftObjectPtr<class UObject>>& Levels, class FName AreaName, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetVisibleLevelsAndWait");

	Params::BP_LevelManager_C_RequestSetVisibleLevelsAndWait Parms{};

	Parms.Levels = std::move(Levels);
	Parms.AreaName = AreaName;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaReadyForStart
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReady                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaReadyForStart(class FName AreaName, bool* IsReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaReadyForStart");

	Params::BP_LevelManager_C_IsAreaReadyForStart Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady != nullptr)
		*IsReady = Parms.IsReady;
}


// Function BP_LevelManager.BP_LevelManager_C.RequestWaitAreaPreloadVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestWaitAreaPreloadVisible(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestWaitAreaPreloadVisible");

	Params::BP_LevelManager_C_RequestWaitAreaPreloadVisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaPreloadOnlyVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Async                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetAreaPreloadOnlyVisible(class FName AreaName, bool Async)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetAreaPreloadOnlyVisible");

	Params::BP_LevelManager_C_RequestSetAreaPreloadOnlyVisible Parms{};

	Parms.AreaName = AreaName;
	Parms.Async = Async;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetPreloadLevelInArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetPreloadLevelInArea(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* Levels, struct FS_AreaInfo* AreaInfo, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetPreloadLevelInArea");

	Params::BP_LevelManager_C_GetPreloadLevelInArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C._IsAreaPreloadVisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllVisible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::_IsAreaPreloadVisible(class FName AreaName, bool* AllVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_IsAreaPreloadVisible");

	Params::BP_LevelManager_C__IsAreaPreloadVisible Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (AllVisible != nullptr)
		*AllVisible = Parms.AllVisible;
}


// Function BP_LevelManager.BP_LevelManager_C.RequestUnloadDynamicLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::RequestUnloadDynamicLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestUnloadDynamicLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetAllLevelUnvisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetAllLevelUnvisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetAllLevelUnvisible");

	Params::BP_LevelManager_C_RequestSetAllLevelUnvisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugFilterLevels
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   FilteredLevels                                         (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::DebugFilterLevels(TArray<TSoftObjectPtr<class UObject>>& Levels, TArray<TSoftObjectPtr<class UObject>>* FilteredLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugFilterLevels");

	Params::BP_LevelManager_C_DebugFilterLevels Parms{};

	Parms.Levels = std::move(Levels);

	UObject::ProcessEvent(Func, &Parms);

	Levels = std::move(Parms.Levels);

	if (FilteredLevels != nullptr)
		*FilteredLevels = std::move(Parms.FilteredLevels);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintLoadInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::DebugPrintLoadInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintLoadInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.AreaNameToID_Internal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::AreaNameToID_Internal(class FName AreaName, int32* LocationId, int32* AreaId, int32* VariationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "AreaNameToID_Internal");

	Params::BP_LevelManager_C_AreaNameToID_Internal Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;

	if (AreaId != nullptr)
		*AreaId = Parms.AreaId;

	if (VariationID != nullptr)
		*VariationID = Parms.VariationID;
}


// Function BP_LevelManager.BP_LevelManager_C.RequestUnloadAssetAsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestUnloadAssetAsync(TSoftObjectPtr<class UObject> Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestUnloadAssetAsync");

	Params::BP_LevelManager_C_RequestUnloadAssetAsync Parms{};

	Parms.Asset = Asset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaPreloadVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Async                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetAreaPreloadVisible(class FName AreaName, bool Async)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetAreaPreloadVisible");

	Params::BP_LevelManager_C_RequestSetAreaPreloadVisible Parms{};

	Parms.AreaName = AreaName;
	Parms.Async = Async;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetStreamSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::SetStreamSettings(class FName RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetStreamSettings");

	Params::BP_LevelManager_C_SetStreamSettings Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetStreamSettingsInGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::SetStreamSettingsInGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetStreamSettingsInGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.SetStreamSettingsInLoading
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::SetStreamSettingsInLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetStreamSettingsInLoading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.InitStreamingSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::InitStreamingSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "InitStreamingSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.TweakStreamSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRSStreamingSettings             Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_LevelManager_C::TweakStreamSettings(class FName Param_Name, const struct FRSStreamingSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "TweakStreamSettings");

	Params::BP_LevelManager_C_TweakStreamSettings Parms{};

	Parms.Param_Name = Param_Name;
	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.TweakStreamSettingsInLoading
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRSStreamingSettings             Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_LevelManager_C::TweakStreamSettingsInLoading(const struct FRSStreamingSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "TweakStreamSettingsInLoading");

	Params::BP_LevelManager_C_TweakStreamSettingsInLoading Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetStreamSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRSStreamingSettings             Settings                                               (Parm, OutParm)

void ABP_LevelManager_C::GetStreamSettings(class FName Param_Name, struct FRSStreamingSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetStreamSettings");

	Params::BP_LevelManager_C_GetStreamSettings Parms{};

	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = std::move(Parms.Settings);
}


// Function BP_LevelManager.BP_LevelManager_C.SetTextureStreaming
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetTextureStreaming(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetTextureStreaming");

	Params::BP_LevelManager_C_SetTextureStreaming Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.MakeAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::MakeAreaInfo(class FName AreaName, struct FS_AreaInfo* AreaInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "MakeAreaInfo");

	Params::BP_LevelManager_C_MakeAreaInfo Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromBGAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     BGAreaInfoNames                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   PreloadLevels                                          (Parm, OutParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   LbaAndPortalLevels                                     (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLevelsFromBGAreaInfo(TArray<class FName>& BGAreaInfoNames, TArray<TSoftObjectPtr<class UObject>>* PreloadLevels, TArray<TSoftObjectPtr<class UObject>>* Levels, TArray<TSoftObjectPtr<class UObject>>* LbaAndPortalLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLevelsFromBGAreaInfo");

	Params::BP_LevelManager_C_GetLevelsFromBGAreaInfo Parms{};

	Parms.BGAreaInfoNames = std::move(BGAreaInfoNames);

	UObject::ProcessEvent(Func, &Parms);

	BGAreaInfoNames = std::move(Parms.BGAreaInfoNames);

	if (PreloadLevels != nullptr)
		*PreloadLevels = std::move(Parms.PreloadLevels);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);

	if (LbaAndPortalLevels != nullptr)
		*LbaAndPortalLevels = std::move(Parms.LbaAndPortalLevels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromEnemyAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLevelsFromEnemyAreaInfo(TArray<class FName>& InfoNames, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLevelsFromEnemyAreaInfo");

	Params::BP_LevelManager_C_GetLevelsFromEnemyAreaInfo Parms{};

	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromEventAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLevelsFromEventAreaInfo(TArray<class FName>& InfoNames, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLevelsFromEventAreaInfo");

	Params::BP_LevelManager_C_GetLevelsFromEventAreaInfo Parms{};

	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromNObjAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLevelsFromNObjAreaInfo(TArray<class FName>& InfoNames, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLevelsFromNObjAreaInfo");

	Params::BP_LevelManager_C_GetLevelsFromNObjAreaInfo Parms{};

	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromNPCAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLevelsFromNPCAreaInfo(TArray<class FName>& InfoNames, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLevelsFromNPCAreaInfo");

	Params::BP_LevelManager_C_GetLevelsFromNPCAreaInfo Parms{};

	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetAreaInfo(class FName AreaName, bool SkipEnemyLevel, bool SkipEventLevel, struct FS_AreaInfo* AreaInfo, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAreaInfo");

	Params::BP_LevelManager_C_GetAreaInfo Parms{};

	Parms.AreaName = AreaName;
	Parms.SkipEnemyLevel = SkipEnemyLevel;
	Parms.SkipEventLevel = SkipEventLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Names                                                  (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetAreaInfoNames(TArray<class FName>* Names)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAreaInfoNames");

	Params::BP_LevelManager_C_GetAreaInfoNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Names != nullptr)
		*Names = std::move(Parms.Names);
}


// Function BP_LevelManager.BP_LevelManager_C.InitAreaInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::InitAreaInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "InitAreaInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsLoaded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      Area_Info                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaLevelsLoaded(int32 LocationId, int32 AreaId, int32 VariationID, bool RawCheck, bool* IsLoaded, bool* IsError, struct FS_AreaInfo* Area_Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLevelsLoaded");

	Params::BP_LevelManager_C_IsAreaLevelsLoaded Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (IsError != nullptr)
		*IsError = Parms.IsError;

	if (Area_Info != nullptr)
		*Area_Info = std::move(Parms.Area_Info);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoAfterTweak
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetAreaInfoAfterTweak(class FName AreaName, bool SkipEnemyLevel, bool SkipEventLevel, struct FS_AreaInfo* AreaInfo, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAreaInfoAfterTweak");

	Params::BP_LevelManager_C_GetAreaInfoAfterTweak Parms{};

	Parms.AreaName = AreaName;
	Parms.SkipEnemyLevel = SkipEnemyLevel;
	Parms.SkipEventLevel = SkipEventLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_LevelManager.BP_LevelManager_C.TweakAreaSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaSettingsInfo              Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_AreaSettingsInfo              OutSettings                                            (Parm, OutParm, HasGetValueTypeHash)
// TArray<bool>                            ConditionResults                                       (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::TweakAreaSettings(const struct FS_AreaSettingsInfo& Settings, struct FS_AreaSettingsInfo* OutSettings, TArray<bool>* ConditionResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "TweakAreaSettings");

	Params::BP_LevelManager_C_TweakAreaSettings Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);

	if (OutSettings != nullptr)
		*OutSettings = std::move(Parms.OutSettings);

	if (ConditionResults != nullptr)
		*ConditionResults = std::move(Parms.ConditionResults);
}


// Function BP_LevelManager.BP_LevelManager_C.CheckTweakAllConditions
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_AreaInfoTweakCondition>Conditions                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    AllOk                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::CheckTweakAllConditions(TArray<struct FS_AreaInfoTweakCondition>& Conditions, bool* AllOk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CheckTweakAllConditions");

	Params::BP_LevelManager_C_CheckTweakAllConditions Parms{};

	Parms.Conditions = std::move(Conditions);

	UObject::ProcessEvent(Func, &Parms);

	Conditions = std::move(Parms.Conditions);

	if (AllOk != nullptr)
		*AllOk = Parms.AllOk;
}


// Function BP_LevelManager.BP_LevelManager_C.CheckTweakCondition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaInfoTweakCondition        Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::CheckTweakCondition(struct FS_AreaInfoTweakCondition& Condition, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CheckTweakCondition");

	Params::BP_LevelManager_C_CheckTweakCondition Parms{};

	Parms.Condition = std::move(Condition);

	UObject::ProcessEvent(Func, &Parms);

	Condition = std::move(Parms.Condition);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweaks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaSettingsInfo              Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<struct FS_AreaInfoTweakExec>     TweakExecs                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// struct FS_AreaSettingsInfo              OutSettings                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::ExecAreaInfoTweaks(const struct FS_AreaSettingsInfo& Settings, TArray<struct FS_AreaInfoTweakExec>& TweakExecs, struct FS_AreaSettingsInfo* OutSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ExecAreaInfoTweaks");

	Params::BP_LevelManager_C_ExecAreaInfoTweaks Parms{};

	Parms.Settings = std::move(Settings);
	Parms.TweakExecs = std::move(TweakExecs);

	UObject::ProcessEvent(Func, &Parms);

	TweakExecs = std::move(Parms.TweakExecs);

	if (OutSettings != nullptr)
		*OutSettings = std::move(Parms.OutSettings);
}


// Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweakAdd
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaSettingsInfo              Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// EAreaInfoType                           AreaInfoType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// struct FS_AreaSettingsInfo              OutSettings                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::ExecAreaInfoTweakAdd(const struct FS_AreaSettingsInfo& Settings, EAreaInfoType AreaInfoType, TArray<class FName>& InfoNames, struct FS_AreaSettingsInfo* OutSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ExecAreaInfoTweakAdd");

	Params::BP_LevelManager_C_ExecAreaInfoTweakAdd Parms{};

	Parms.Settings = std::move(Settings);
	Parms.AreaInfoType = AreaInfoType;
	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (OutSettings != nullptr)
		*OutSettings = std::move(Parms.OutSettings);
}


// Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweakDelete
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaSettingsInfo              Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// EAreaInfoType                           AreaInfoType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// struct FS_AreaSettingsInfo              OutSettings                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::ExecAreaInfoTweakDelete(const struct FS_AreaSettingsInfo& Settings, EAreaInfoType AreaInfoType, TArray<class FName>& InfoNames, struct FS_AreaSettingsInfo* OutSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ExecAreaInfoTweakDelete");

	Params::BP_LevelManager_C_ExecAreaInfoTweakDelete Parms{};

	Parms.Settings = std::move(Settings);
	Parms.AreaInfoType = AreaInfoType;
	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (OutSettings != nullptr)
		*OutSettings = std::move(Parms.OutSettings);
}


// Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweakReplace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaSettingsInfo              Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// EAreaInfoType                           AreaInfoType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// E_SceneType                             SceneType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_AreaSettingsInfo              OutSettings                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::ExecAreaInfoTweakReplace(const struct FS_AreaSettingsInfo& Settings, EAreaInfoType AreaInfoType, TArray<class FName>& InfoNames, E_SceneType SceneType, struct FS_AreaSettingsInfo* OutSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ExecAreaInfoTweakReplace");

	Params::BP_LevelManager_C_ExecAreaInfoTweakReplace Parms{};

	Parms.Settings = std::move(Settings);
	Parms.AreaInfoType = AreaInfoType;
	Parms.InfoNames = std::move(InfoNames);
	Parms.SceneType = SceneType;

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (OutSettings != nullptr)
		*OutSettings = std::move(Parms.OutSettings);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetLevelVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestSetLevelVisible(bool Visible, TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetLevelVisible");

	Params::BP_LevelManager_C_RequestSetLevelVisible Parms{};

	Parms.Visible = Visible;
	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaImmediateAsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestLoadAreaImmediateAsync(bool SetVisbleAfterLoad, int32 LocationId, int32 AreaId, int32 VariationID, bool SkipEnemyLevels, bool SkipEventLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestLoadAreaImmediateAsync");

	Params::BP_LevelManager_C_RequestLoadAreaImmediateAsync Parms{};

	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;
	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;
	Parms.SkipEnemyLevels = SkipEnemyLevels;
	Parms.SkipEventLevels = SkipEventLevels;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.Request Load Area Async
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LoadLocationID                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadAreaID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadVariationID                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::Request_Load_Area_Async(bool SetVisbleAfterLoad, int32 LocationId, int32 AreaId, bool SkipEnemyLevels, bool SkipEventLevels, int32* LoadLocationID, int32* LoadAreaID, int32* LoadVariationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "Request Load Area Async");

	Params::BP_LevelManager_C_Request_Load_Area_Async Parms{};

	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;
	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.SkipEnemyLevels = SkipEnemyLevels;
	Parms.SkipEventLevels = SkipEventLevels;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadLocationID != nullptr)
		*LoadLocationID = Parms.LoadLocationID;

	if (LoadAreaID != nullptr)
		*LoadAreaID = Parms.LoadAreaID;

	if (LoadVariationID != nullptr)
		*LoadVariationID = Parms.LoadVariationID;
}


// Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaAsyncByShortAreaName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ShortAreaName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LoadLocationID                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadAreaID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadVariationID                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestLoadAreaAsyncByShortAreaName(bool SetVisbleAfterLoad, class FName ShortAreaName, bool SkipEnemyLevels, int32* LoadLocationID, int32* LoadAreaID, int32* LoadVariationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestLoadAreaAsyncByShortAreaName");

	Params::BP_LevelManager_C_RequestLoadAreaAsyncByShortAreaName Parms{};

	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;
	Parms.ShortAreaName = ShortAreaName;
	Parms.SkipEnemyLevels = SkipEnemyLevels;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadLocationID != nullptr)
		*LoadLocationID = Parms.LoadLocationID;

	if (LoadAreaID != nullptr)
		*LoadAreaID = Parms.LoadAreaID;

	if (LoadVariationID != nullptr)
		*LoadVariationID = Parms.LoadVariationID;
}


// Function BP_LevelManager.BP_LevelManager_C.MakeTweakedAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_AreaSettingsInfo              AreaSettings                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    SkipEnemyLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::MakeTweakedAreaInfo(const struct FS_AreaSettingsInfo& AreaSettings, bool SkipEnemyLevels, bool SkipEventLevels, struct FS_AreaInfo* AreaInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "MakeTweakedAreaInfo");

	Params::BP_LevelManager_C_MakeTweakedAreaInfo Parms{};

	Parms.AreaSettings = std::move(AreaSettings);
	Parms.SkipEnemyLevels = SkipEnemyLevels;
	Parms.SkipEventLevels = SkipEventLevels;

	UObject::ProcessEvent(Func, &Parms);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromArrangePointAreaInfo_0
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InfoNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLevelsFromArrangePointAreaInfo_0(TArray<class FName>& InfoNames, TArray<TSoftObjectPtr<class UObject>>* Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLevelsFromArrangePointAreaInfo_0");

	Params::BP_LevelManager_C_GetLevelsFromArrangePointAreaInfo_0 Parms{};

	Parms.InfoNames = std::move(InfoNames);

	UObject::ProcessEvent(Func, &Parms);

	InfoNames = std::move(Parms.InfoNames);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAllLevelInLoadedAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetAllLevelInLoadedAreaInfo(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* Levels, struct FS_AreaInfo* AreaInfo, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAllLevelInLoadedAreaInfo");

	Params::BP_LevelManager_C_GetAllLevelInLoadedAreaInfo Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrint_Levels
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   Objs                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class FText                             Header                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_LevelManager_C::DebugPrint_Levels(TArray<TSoftObjectPtr<class UObject>>& Objs, const class FText& Header)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrint_Levels");

	Params::BP_LevelManager_C_DebugPrint_Levels Parms{};

	Parms.Objs = std::move(Objs);
	Parms.Header = std::move(Header);

	UObject::ProcessEvent(Func, &Parms);

	Objs = std::move(Parms.Objs);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaInLoadedAreaInfos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaInLoadedAreaInfos(class FName AreaName, bool* IsLoaded, bool* IsExist, struct FS_AreaInfo* AreaInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaInLoadedAreaInfos");

	Params::BP_LevelManager_C_IsAreaInLoadedAreaInfos Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);
}


// Function BP_LevelManager.BP_LevelManager_C.IsExistAreaInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsExistAreaInfo(class FName AreaName, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsExistAreaInfo");

	Params::BP_LevelManager_C_IsExistAreaInfo Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_LevelManager.BP_LevelManager_C.LoadEventTriggerBoxAsset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::LoadEventTriggerBoxAsset(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "LoadEventTriggerBoxAsset");

	Params::BP_LevelManager_C_LoadEventTriggerBoxAsset Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.SetCurrentSceneType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneType                             SceneType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SceneType                             OldSceneType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::SetCurrentSceneType(E_SceneType SceneType, E_SceneType* OldSceneType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetCurrentSceneType");

	Params::BP_LevelManager_C_SetCurrentSceneType Parms{};

	Parms.SceneType = SceneType;

	UObject::ProcessEvent(Func, &Parms);

	if (OldSceneType != nullptr)
		*OldSceneType = Parms.OldSceneType;
}


// Function BP_LevelManager.BP_LevelManager_C.GetCurrentSceneType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneType                             SceneType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::GetCurrentSceneType(E_SceneType* SceneType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetCurrentSceneType");

	Params::BP_LevelManager_C_GetCurrentSceneType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SceneType != nullptr)
		*SceneType = Parms.SceneType;
}


// Function BP_LevelManager.BP_LevelManager_C.ResetCheckVisibleLevelAll
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::ResetCheckVisibleLevelAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "ResetCheckVisibleLevelAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.SetLevelInfoCheckVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    CheckVisible                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetLevelInfoCheckVisible(const TSoftObjectPtr<class UObject>& Level, bool CheckVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetLevelInfoCheckVisible");

	Params::BP_LevelManager_C_SetLevelInfoCheckVisible Parms{};

	Parms.Level = Level;
	Parms.CheckVisible = CheckVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.IsWaitingAnySetVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Waiting                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsWaitingAnySetVisibility(bool* Waiting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsWaitingAnySetVisibility");

	Params::BP_LevelManager_C_IsWaitingAnySetVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Waiting != nullptr)
		*Waiting = Parms.Waiting;
}


// Function BP_LevelManager.BP_LevelManager_C.IsWaitingLoadOrVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWaiting                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsWaitingLoadOrVisible(bool* IsWaiting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsWaitingLoadOrVisible");

	Params::BP_LevelManager_C_IsWaitingLoadOrVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsWaiting != nullptr)
		*IsWaiting = Parms.IsWaiting;
}


// Function BP_LevelManager.BP_LevelManager_C.GetLocationNameFromAreaName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LocationString                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_LevelManager_C::GetLocationNameFromAreaName(class FName AreaName, class FString* LocationString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLocationNameFromAreaName");

	Params::BP_LevelManager_C_GetLocationNameFromAreaName Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (LocationString != nullptr)
		*LocationString = std::move(Parms.LocationString);
}


// Function BP_LevelManager.BP_LevelManager_C._UnloadAllAreas
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::_UnloadAllAreas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "_UnloadAllAreas");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestUnloadAllLevel
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::RequestUnloadAllLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestUnloadAllLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestWaitAnyLoadEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::RequestWaitAnyLoadEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestWaitAnyLoadEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.UnloadAllLevels
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::UnloadAllLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UnloadAllLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.UnloadAreaAllLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::UnloadAreaAllLevels(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UnloadAreaAllLevels");

	Params::BP_LevelManager_C_UnloadAreaAllLevels Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.CheckExistQueueLoadCommand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Exist                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::CheckExistQueueLoadCommand(bool* Exist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CheckExistQueueLoadCommand");

	Params::BP_LevelManager_C_CheckExistQueueLoadCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Exist != nullptr)
		*Exist = Parms.Exist;
}


// Function BP_LevelManager.BP_LevelManager_C.CheckNeedLevelInLoadedLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::CheckNeedLevelInLoadedLevels(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CheckNeedLevelInLoadedLevels");

	Params::BP_LevelManager_C_CheckNeedLevelInLoadedLevels Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.AppendArrayUnique
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     DistNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     AppendNames                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_LevelManager_C::AppendArrayUnique(TArray<class FName>& DistNames, TArray<class FName>& AppendNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "AppendArrayUnique");

	Params::BP_LevelManager_C_AppendArrayUnique Parms{};

	Parms.DistNames = std::move(DistNames);
	Parms.AppendNames = std::move(AppendNames);

	UObject::ProcessEvent(Func, &Parms);

	DistNames = std::move(Parms.DistNames);
	AppendNames = std::move(Parms.AppendNames);
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintLoadedLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::DebugPrintLoadedLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintLoadedLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.GetCurrentCameraType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Camera_type                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetCurrentCameraType(class FName* Camera_type, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetCurrentCameraType");

	Params::BP_LevelManager_C_GetCurrentCameraType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Camera_type != nullptr)
		*Camera_type = Parms.Camera_type;

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_LevelManager.BP_LevelManager_C.DebugPrintAreaNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     AreaNames                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class FText                             DoText                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_LevelManager_C::DebugPrintAreaNames(TArray<class FName>& AreaNames, const class FText& DoText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "DebugPrintAreaNames");

	Params::BP_LevelManager_C_DebugPrintAreaNames Parms{};

	Parms.AreaNames = std::move(AreaNames);
	Parms.DoText = std::move(DoText);

	UObject::ProcessEvent(Func, &Parms);

	AreaNames = std::move(Parms.AreaNames);
}


// Function BP_LevelManager.BP_LevelManager_C.SetAreaInfoCacheDirty
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dirty                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetAreaInfoCacheDirty(bool Dirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetAreaInfoCacheDirty");

	Params::BP_LevelManager_C_SetAreaInfoCacheDirty Parms{};

	Parms.Dirty = Dirty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestLoadLevelAsync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestLoadLevelAsync(bool Visible, TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestLoadLevelAsync");

	Params::BP_LevelManager_C_RequestLoadLevelAsync Parms{};

	Parms.Visible = Visible;
	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestUnloadLevelAsync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestUnloadLevelAsync(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestUnloadLevelAsync");

	Params::BP_LevelManager_C_RequestUnloadLevelAsync Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.TweakStreamSettingsInGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRSStreamingSettings             Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_LevelManager_C::TweakStreamSettingsInGame(const struct FRSStreamingSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "TweakStreamSettingsInGame");

	Params::BP_LevelManager_C_TweakStreamSettingsInGame Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetLbAndPortalLevelInArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaInfo                      AreaInfo                                               (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetLbAndPortalLevelInArea(class FName AreaName, TArray<TSoftObjectPtr<class UObject>>* Levels, struct FS_AreaInfo* AreaInfo, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetLbAndPortalLevelInArea");

	Params::BP_LevelManager_C_GetLbAndPortalLevelInArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (Levels != nullptr)
		*Levels = std::move(Parms.Levels);

	if (AreaInfo != nullptr)
		*AreaInfo = std::move(Parms.AreaInfo);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LevelManager.BP_LevelManager_C.IsLBPortalLevelInLoadedAreaInfos
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLBPortalLevelInLoadedAreaInfos(TSoftObjectPtr<class UObject> Level, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLBPortalLevelInLoadedAreaInfos");

	Params::BP_LevelManager_C_IsLBPortalLevelInLoadedAreaInfos Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsLoadedByAreaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      Area_Info                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaLBPortalLevelsLoadedByAreaName(class FName AreaName, bool RawCheck, bool* IsLoaded, bool* IsError, struct FS_AreaInfo* Area_Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLBPortalLevelsLoadedByAreaName");

	Params::BP_LevelManager_C_IsAreaLBPortalLevelsLoadedByAreaName Parms{};

	Parms.AreaName = AreaName;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (IsError != nullptr)
		*IsError = Parms.IsError;

	if (Area_Info != nullptr)
		*Area_Info = std::move(Parms.Area_Info);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsLoadedByInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaLBPortalLevelsLoadedByInfo(class FName AreaName, bool RawCheck, bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLBPortalLevelsLoadedByInfo");

	Params::BP_LevelManager_C_IsAreaLBPortalLevelsLoadedByInfo Parms{};

	Parms.AreaName = AreaName;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsLoaded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      Area_Info                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaLBPortalLevelsLoaded(int32 LocationId, int32 AreaId, int32 VariationID, bool RawCheck, bool* IsLoaded, bool* IsError, struct FS_AreaInfo* Area_Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLBPortalLevelsLoaded");

	Params::BP_LevelManager_C_IsAreaLBPortalLevelsLoaded Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (IsError != nullptr)
		*IsError = Parms.IsError;

	if (Area_Info != nullptr)
		*Area_Info = std::move(Parms.Area_Info);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaLBPortalAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetVisbleAfterLoad                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevels                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LoadLocationID                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadAreaID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadVariationID                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestLoadAreaLBPortalAsync(bool SetVisbleAfterLoad, int32 LocationId, int32 AreaId, bool SkipEnemyLevels, int32* LoadLocationID, int32* LoadAreaID, int32* LoadVariationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestLoadAreaLBPortalAsync");

	Params::BP_LevelManager_C_RequestLoadAreaLBPortalAsync Parms{};

	Parms.SetVisbleAfterLoad = SetVisbleAfterLoad;
	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.SkipEnemyLevels = SkipEnemyLevels;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadLocationID != nullptr)
		*LoadLocationID = Parms.LoadLocationID;

	if (LoadAreaID != nullptr)
		*LoadAreaID = Parms.LoadAreaID;

	if (LoadVariationID != nullptr)
		*LoadVariationID = Parms.LoadVariationID;
}


// Function BP_LevelManager.BP_LevelManager_C.CheckUnloadLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::CheckUnloadLevels(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "CheckUnloadLevels");

	Params::BP_LevelManager_C_CheckUnloadLevels Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.StartPlayerAtTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::StartPlayerAtTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "StartPlayerAtTransform");

	Params::BP_LevelManager_C_StartPlayerAtTransform Parms{};

	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetVisibleAndWaitAreaLBPortal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestSetVisibleAndWaitAreaLBPortal(int32 LocationId, int32 AreaId, int32 VariationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetVisibleAndWaitAreaLBPortal");

	Params::BP_LevelManager_C_RequestSetVisibleAndWaitAreaLBPortal Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsVisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RawCheck                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsVisible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_AreaInfo                      Area_Info                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_LevelManager_C::IsAreaLBPortalLevelsVisible(int32 LocationId, int32 AreaId, int32 VariationID, bool RawCheck, bool* IsVisible, bool* IsError, struct FS_AreaInfo* Area_Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLBPortalLevelsVisible");

	Params::BP_LevelManager_C_IsAreaLBPortalLevelsVisible Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.VariationID = VariationID;
	Parms.RawCheck = RawCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsVisible != nullptr)
		*IsVisible = Parms.IsVisible;

	if (IsError != nullptr)
		*IsError = Parms.IsError;

	if (Area_Info != nullptr)
		*Area_Info = std::move(Parms.Area_Info);
}


// Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsVisibleByAreaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllVisible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsAreaLBPortalLevelsVisibleByAreaName(class FName AreaName, bool* AllVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsAreaLBPortalLevelsVisibleByAreaName");

	Params::BP_LevelManager_C_IsAreaLBPortalLevelsVisibleByAreaName Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (AllVisible != nullptr)
		*AllVisible = Parms.AllVisible;
}


// Function BP_LevelManager.BP_LevelManager_C.IsLevelsVisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    AllVisible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::IsLevelsVisible(TArray<TSoftObjectPtr<class UObject>>& Levels, bool* AllVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsLevelsVisible");

	Params::BP_LevelManager_C_IsLevelsVisible Parms{};

	Parms.Levels = std::move(Levels);

	UObject::ProcessEvent(Func, &Parms);

	Levels = std::move(Parms.Levels);

	if (AllVisible != nullptr)
		*AllVisible = Parms.AllVisible;
}


// Function BP_LevelManager.BP_LevelManager_C.SetAreaNaviLevelVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetAreaNaviLevelVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetAreaNaviLevelVisible");

	Params::BP_LevelManager_C_SetAreaNaviLevelVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetCurrentAreaCameraPreset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCameraPreset                     Camera_preset                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::GetCurrentAreaCameraPreset(EPlayerCameraPreset* Camera_preset, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetCurrentAreaCameraPreset");

	Params::BP_LevelManager_C_GetCurrentAreaCameraPreset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Camera_preset != nullptr)
		*Camera_preset = Parms.Camera_preset;

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_LevelManager.BP_LevelManager_C.SetLastSpawnPlayerInfo
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PortalName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::SetLastSpawnPlayerInfo(class FName PortalName, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "SetLastSpawnPlayerInfo");

	Params::BP_LevelManager_C_SetLastSpawnPlayerInfo Parms{};

	Parms.PortalName = PortalName;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.RequestSetBgAreaVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BgAreaName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelManager_C::RequestSetBgAreaVisible(class FName BgAreaName, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestSetBgAreaVisible");

	Params::BP_LevelManager_C_RequestSetBgAreaVisible Parms{};

	Parms.BgAreaName = BgAreaName;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoFromNative
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     OutLevenName                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_LevelManager_C::GetAreaInfoFromNative(class FName AreName, TArray<class FName>& OutLevenName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "GetAreaInfoFromNative");

	Params::BP_LevelManager_C_GetAreaInfoFromNative Parms{};

	Parms.AreName = AreName;
	Parms.OutLevenName = std::move(OutLevenName);

	UObject::ProcessEvent(Func, &Parms);

	OutLevenName = std::move(Parms.OutLevenName);

	return Parms.ReturnValue;
}


// Function BP_LevelManager.BP_LevelManager_C.UnvisibleEventSubQuestNPCLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::UnvisibleEventSubQuestNPCLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "UnvisibleEventSubQuestNPCLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.RestoreVisibleEventSubQuestNPCLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelManager_C::RestoreVisibleEventSubQuestNPCLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RestoreVisibleEventSubQuestNPCLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelManager.BP_LevelManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_LevelManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsNeedFrameWait");

	Params::BP_LevelManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_LevelManager.BP_LevelManager_C.RequestUnloadUnneedLevels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             UnloadAreaName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NextAreaName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::RequestUnloadUnneedLevels(class FName UnloadAreaName, class FName NextAreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "RequestUnloadUnneedLevels");

	Params::BP_LevelManager_C_RequestUnloadUnneedLevels Parms{};

	Parms.UnloadAreaName = UnloadAreaName;
	Parms.NextAreaName = NextAreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelManager.BP_LevelManager_C.IsValidCurrentSimulatorLevelInfosName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_LevelManager_C::IsValidCurrentSimulatorLevelInfosName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "IsValidCurrentSimulatorLevelInfosName");

	Params::BP_LevelManager_C_IsValidCurrentSimulatorLevelInfosName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_LevelManager.BP_LevelManager_C.AreaNameToID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LocationId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VariationID                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelManager_C::AreaNameToID(class FName AreaName, int32* LocationId, int32* AreaId, int32* VariationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelManager_C", "AreaNameToID");

	Params::BP_LevelManager_C_AreaNameToID Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (LocationId != nullptr)
		*LocationId = Parms.LocationId;

	if (AreaId != nullptr)
		*AreaId = Parms.AreaId;

	if (VariationID != nullptr)
		*VariationID = Parms.VariationID;
}

}

