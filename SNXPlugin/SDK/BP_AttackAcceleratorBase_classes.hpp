#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackAcceleratorBase

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SingleAttackComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C
// 0x00A0 (0x0288 - 0x01E8)
class UBP_AttackAcceleratorBase_C final : public USingleAttackComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AttackAcceleratorBase_C;         // 0x01E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDynamicMaterialControllerComponent*    DynamicMaterialCon;                                // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAccelerator;                                      // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A3[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClassName;                                         // 0x01FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSwitchAccel;                                      // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A4[0x3];                                     // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageCancellationCnt;                             // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingSeconds;                                  // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SearchRadiusMax;                                   // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85A5[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CaptureMaterial;                                   // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchAccelFrame;                                  // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A6[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectPower;                                       // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PPTime;                                            // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlurSpeed;                                         // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlurCenter;                                        // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerScreenVec;                                   // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlurCenterLimit;                                   // 0x0248(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      RegistAcceleratorParam;                            // 0x0254(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_SAS_PlayerState_C*                  SAS_PlayerState;                                   // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetupPP;                                           // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A7[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               PostProcessManager;                                // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             PPTimer;                                           // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AttackAcceleratorBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	bool OnChangeAttacking(bool bAttacking);
	bool OnCustomAttackTimingNotified(const class FString& CustomName);
	void ChangeAccelerator(bool bActive, const struct FAcceleratorParam& AccelParameter);
	void RegistAccelerator(float RemainTime, float MaxTime);
	void SwitchAccelerator();
	void OnDamage();
	void UpdateInAccelerator(float DeltaSecond);
	void SetPostProcessParam(float Value);
	void CalcPlayerScreenVec();
	void CalcBlurCenter(float DeltaTime);
	void UpdatePPTimer();
	void EventCancelPostProcess();

	void IsAccelerator(bool* Param_bAccelerator) const;
	void GetRemainingSeconds(float* RemainingSec) const;
	void GetAcceleratorSpeed(float* AcceleratorSpeed) const;
	void GetDamageCancellation(int32* DamageCancellation) const;
	void GetActiveSeconds(float* NewParam) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AttackAcceleratorBase_C">();
	}
	static class UBP_AttackAcceleratorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AttackAcceleratorBase_C>();
	}
};
static_assert(alignof(UBP_AttackAcceleratorBase_C) == 0x000008, "Wrong alignment on UBP_AttackAcceleratorBase_C");
static_assert(sizeof(UBP_AttackAcceleratorBase_C) == 0x000288, "Wrong size on UBP_AttackAcceleratorBase_C");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, UberGraphFrame_BP_AttackAcceleratorBase_C) == 0x0001E8, "Member 'UBP_AttackAcceleratorBase_C::UberGraphFrame_BP_AttackAcceleratorBase_C' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, DynamicMaterialCon) == 0x0001F0, "Member 'UBP_AttackAcceleratorBase_C::DynamicMaterialCon' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, bAccelerator) == 0x0001F8, "Member 'UBP_AttackAcceleratorBase_C::bAccelerator' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, ClassName) == 0x0001FC, "Member 'UBP_AttackAcceleratorBase_C::ClassName' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, bSwitchAccel) == 0x000204, "Member 'UBP_AttackAcceleratorBase_C::bSwitchAccel' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, DamageCancellationCnt) == 0x000208, "Member 'UBP_AttackAcceleratorBase_C::DamageCancellationCnt' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, RemainingSeconds) == 0x00020C, "Member 'UBP_AttackAcceleratorBase_C::RemainingSeconds' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, SearchRadiusMax) == 0x000210, "Member 'UBP_AttackAcceleratorBase_C::SearchRadiusMax' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, CaptureMaterial) == 0x000218, "Member 'UBP_AttackAcceleratorBase_C::CaptureMaterial' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, SwitchAccelFrame) == 0x000220, "Member 'UBP_AttackAcceleratorBase_C::SwitchAccelFrame' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, EffectPower) == 0x000224, "Member 'UBP_AttackAcceleratorBase_C::EffectPower' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, PPTime) == 0x000228, "Member 'UBP_AttackAcceleratorBase_C::PPTime' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, BlurSpeed) == 0x00022C, "Member 'UBP_AttackAcceleratorBase_C::BlurSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, BlurCenter) == 0x000230, "Member 'UBP_AttackAcceleratorBase_C::BlurCenter' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, PlayerScreenVec) == 0x00023C, "Member 'UBP_AttackAcceleratorBase_C::PlayerScreenVec' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, BlurCenterLimit) == 0x000248, "Member 'UBP_AttackAcceleratorBase_C::BlurCenterLimit' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, RegistAcceleratorParam) == 0x000254, "Member 'UBP_AttackAcceleratorBase_C::RegistAcceleratorParam' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, SAS_PlayerState) == 0x000260, "Member 'UBP_AttackAcceleratorBase_C::SAS_PlayerState' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, SetupPP) == 0x000268, "Member 'UBP_AttackAcceleratorBase_C::SetupPP' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, PostProcessManager) == 0x000270, "Member 'UBP_AttackAcceleratorBase_C::PostProcessManager' has a wrong offset!");
static_assert(offsetof(UBP_AttackAcceleratorBase_C, PPTimer) == 0x000278, "Member 'UBP_AttackAcceleratorBase_C::PPTimer' has a wrong offset!");

}

