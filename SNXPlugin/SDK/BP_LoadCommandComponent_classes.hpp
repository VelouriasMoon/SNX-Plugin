#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LoadCommandComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_LoadQueueCommand_structs.hpp"
#include "E_LoadQueueCommand_structs.hpp"
#include "E_LevelCommandStatus_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LoadCommandComponent.BP_LoadCommandComponent_C
// 0x00E8 (0x01A8 - 0x00C0)
class UBP_LoadCommandComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FS_LoadQueueCommand>            LoadCommandQueue;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsExecNextQueue;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5354[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCommandId;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EventFinishLoadAreaDispatcher;                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventFinishUnloadAreaDispatcher;                   // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_LevelManager_C*                     LevelManager;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EventFinishLoadLevelDispatcher;                    // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventFinishUnloadLevelDispatcher;                  // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventFinishLoadPackDispatcher;                     // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventFinishUnloadPackDispatcher;                   // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DebugVerbose;                                      // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5355[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventFinishVisibleLevelDispatcher;                 // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventFinishUnvisibleLevelDispatcher;               // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EventStartLoadLevel;                               // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<bool>                                  LoadingThread;                                     // 0x0180(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         MaxPararrelLoadNum;                                // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurLoadThreadNum;                                  // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UObject>>         LoadingLevels;                                     // 0x0198(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void EventFinishLoadAreaDispatcher__DelegateSignature(class FName AreaName);
	void EventFinishUnloadAreaDispatcher__DelegateSignature(class FName AreaName);
	void EventFinishLoadLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> LevelName, class FName AreaName);
	void EventFinishUnloadLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> LevelName, class FName AreaName);
	void EventFinishLoadPackDispatcher__DelegateSignature(const struct FPrimaryAssetType& Pack);
	void EventFinishUnloadPackDispatcher__DelegateSignature(const struct FPrimaryAssetType& Pack);
	void EventFinishVisibleLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> Level);
	void EventFinishUnvisibleLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> Level);
	void EventStartLoadLevel__DelegateSignature(const struct FS_LoadQueueCommand& Command);
	void ExecuteUbergraph_BP_LoadCommandComponent(int32 EntryPoint);
	void EventLoadAssetAsync(const struct FS_LoadQueueCommand& Command);
	void EventSetAreaVisible(const struct FS_LoadQueueCommand& Command);
	void EventSetCurrentArea(const struct FS_LoadQueueCommand& Command);
	void EventFinishLoadLevelDispatcher_Event(TSoftObjectPtr<class UObject> LevelName, class FName AreaName);
	void EventWaitLoadAreaAndSetVisible(const struct FS_LoadQueueCommand& Command, bool Visible);
	void EventUnloadPackAsync(const struct FS_LoadQueueCommand& Command);
	void EventLoadPackAsync(const struct FS_LoadQueueCommand& Command);
	void EventUnloadLevelAsync(const struct FS_LoadQueueCommand& Command);
	void EventLoadLevelAsync(const struct FS_LoadQueueCommand& Command, int32 LoadSlot);
	void ReceiveBeginPlay();
	void EventLoadThread3(const struct FS_LoadQueueCommand& Command);
	void EventLoadThread2(const struct FS_LoadQueueCommand& Command);
	void EventLoadThread1(const struct FS_LoadQueueCommand& Command);
	void EventLoadThread0(const struct FS_LoadQueueCommand& Command);
	void OnLoaded_733FDC874866DE4E2E262C86B89DFADF(class UObject* Loaded);
	void Completed_6A37619A4AAF51DD0A88479B9DF73E37(const TArray<class UObject*>& Loaded);
	void ExecLoadCommandQueue();
	void AddLoadCommandToQueue(E_LoadQueueCommand Command, class FName AreaName, class FName LevelName, const struct FPrimaryAssetType& PackName, TSoftObjectPtr<class UObject> Asset, class FName AssetPackName, bool Flag);
	void FinishWaitCommand();
	void FinishWaitCommandAndExecNext();
	void GetNewCommandID(int32* NewID);
	void FinishAsyncCommand(const struct FS_LoadQueueCommand& Command);
	void CommandUnloadLevelAsync(const struct FS_LoadQueueCommand& Command);
	void CommandLoadPackAsync(const struct FS_LoadQueueCommand& Command);
	void CommandUnloadPackAsync(const struct FS_LoadQueueCommand& Command);
	void _CommandWaitLoadArea(const struct FS_LoadQueueCommand& Command);
	void _CommandWaitUnloadArea(const struct FS_LoadQueueCommand& Command);
	void LDRequestLoadAreaAsync(class FName AreaName, bool SkipEnemyLevel, bool SkipEventLevel, bool* IsError);
	void LDRequestLoadLevelAsync(class FName AreaName, TSoftObjectPtr<class UObject> LevelRef, bool* IsError);
	void DebugPrintLoadCommandQueue();
	void DebugPrintLoadCommandLoading();
	void DebugPrintLoadCommand();
	void LDRequestUnloadAreaAsync(class FName AreaName, class FName NextAreaName, bool* IsError);
	void LDRequestUnloadLevelAsync(class FName AreaName, TSoftObjectPtr<class UObject> LevelRef, bool* IsError);
	void IsExistAreaCommandInQueueWithoutID(class FName AreaName, E_LoadQueueCommand Command, int32 ExcludeID, bool* IsExist);
	void UpdateLoadCommand();
	void LDRequestLoadPackAsync(const struct FPrimaryAssetType& Pack, bool* IsError);
	void LDRequestUnloadPackAsync(const struct FPrimaryAssetType& Pack);
	void IsExistAreaCommandInQueue(class FName AreaName, E_LoadQueueCommand Command, bool* IsExist);
	void __LDRequestWaitLoadAreaAsync(class FName AreaName, bool* IsError);
	void __LDRequestWaitUnloadAreaAsync(class FName AreaName, bool* IsError);
	void CommandLoadLevelAsync(const struct FS_LoadQueueCommand& Command);
	void RemoveLoadCommandQueueByID(int32 ID, bool* Error);
	void UpdateLoadCommandStatusInQueueByID(int32 ID, E_LevelCommandStatus Status, bool* Error);
	void StartLoadCommandQueue(int32 ID, bool* Error);
	void LDRequestSetVisibleAfterLoadAreaAsync(class FName AreaName, bool* IsError);
	void __CommandSetAreaVisibleAsync(const struct FS_LoadQueueCommand& Command);
	void CommandSetAreaVisible(const struct FS_LoadQueueCommand& Command);
	void LDRequestSetAreaVisible(class FName AreaName, bool Visible, bool* IsError);
	void LDRequestSetAreaOnlyVisible(class FName AreaName, bool Visible, bool* IsError);
	void LDDebugPrint(const class FString& Str);
	void CommandSetAreaOnlyVisible(const struct FS_LoadQueueCommand& Command);
	void LDRequestChangeArea(class FName AreaName, bool* IsError);
	void CommandChangeCurrentArea(const struct FS_LoadQueueCommand& Command);
	void MakePrimaryAssetIdDependencies(TArray<struct FPrimaryAssetId>& PAIs, TArray<class FName>* AssetNames);
	void CommandSetAreaVisibleAsync(const struct FS_LoadQueueCommand& Command);
	void __LDRequestSetAreaVisibleAsync(class FName AreaName, bool Visible, bool* IsError);
	void _CommandCancelLoadLevelAsync(const struct FS_LoadQueueCommand& Command);
	void CommandLoadAssetAsync(const struct FS_LoadQueueCommand& Command);
	void LDRequestLoadAssetAsync(TSoftObjectPtr<class UObject> Asset, class FName AssetListName, bool* IsError);
	void LDRequestLoadAssetListAsync(class FName AssetListName, bool* IsError);
	void LDRequestUnloadAssetAsync(TSoftObjectPtr<class UObject> Asset, class FName AssetListName, bool* IsError);
	void CommandUnloadAssetAsync(const struct FS_LoadQueueCommand& Command);
	void DebugSetLoadThreadNum(int32 LoadThreadNum);
	void IsLoadingAnyLevels(bool* IsLoading);
	void LDRequestLoadAreaLBPortalAsync(class FName AreaName, bool* IsError);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LoadCommandComponent_C">();
	}
	static class UBP_LoadCommandComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LoadCommandComponent_C>();
	}
};
static_assert(alignof(UBP_LoadCommandComponent_C) == 0x000008, "Wrong alignment on UBP_LoadCommandComponent_C");
static_assert(sizeof(UBP_LoadCommandComponent_C) == 0x0001A8, "Wrong size on UBP_LoadCommandComponent_C");
static_assert(offsetof(UBP_LoadCommandComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_LoadCommandComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, LoadCommandQueue) == 0x0000C8, "Member 'UBP_LoadCommandComponent_C::LoadCommandQueue' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, IsExecNextQueue) == 0x0000D8, "Member 'UBP_LoadCommandComponent_C::IsExecNextQueue' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, CurrentCommandId) == 0x0000DC, "Member 'UBP_LoadCommandComponent_C::CurrentCommandId' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishLoadAreaDispatcher) == 0x0000E0, "Member 'UBP_LoadCommandComponent_C::EventFinishLoadAreaDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishUnloadAreaDispatcher) == 0x0000F0, "Member 'UBP_LoadCommandComponent_C::EventFinishUnloadAreaDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, LevelManager) == 0x000100, "Member 'UBP_LoadCommandComponent_C::LevelManager' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishLoadLevelDispatcher) == 0x000108, "Member 'UBP_LoadCommandComponent_C::EventFinishLoadLevelDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishUnloadLevelDispatcher) == 0x000118, "Member 'UBP_LoadCommandComponent_C::EventFinishUnloadLevelDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishLoadPackDispatcher) == 0x000128, "Member 'UBP_LoadCommandComponent_C::EventFinishLoadPackDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishUnloadPackDispatcher) == 0x000138, "Member 'UBP_LoadCommandComponent_C::EventFinishUnloadPackDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, DebugVerbose) == 0x000148, "Member 'UBP_LoadCommandComponent_C::DebugVerbose' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishVisibleLevelDispatcher) == 0x000150, "Member 'UBP_LoadCommandComponent_C::EventFinishVisibleLevelDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventFinishUnvisibleLevelDispatcher) == 0x000160, "Member 'UBP_LoadCommandComponent_C::EventFinishUnvisibleLevelDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, EventStartLoadLevel) == 0x000170, "Member 'UBP_LoadCommandComponent_C::EventStartLoadLevel' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, LoadingThread) == 0x000180, "Member 'UBP_LoadCommandComponent_C::LoadingThread' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, MaxPararrelLoadNum) == 0x000190, "Member 'UBP_LoadCommandComponent_C::MaxPararrelLoadNum' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, CurLoadThreadNum) == 0x000194, "Member 'UBP_LoadCommandComponent_C::CurLoadThreadNum' has a wrong offset!");
static_assert(offsetof(UBP_LoadCommandComponent_C, LoadingLevels) == 0x000198, "Member 'UBP_LoadCommandComponent_C::LoadingLevels' has a wrong offset!");

}

