#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerHitStopComponent

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "FHitSlowDelayParam_structs.hpp"
#include "EHitSlowDelayType_structs.hpp"
#include "FHitSlowParam_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.ExecuteUbergraph_BP_PlayerHitStopComponent
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRedPaused_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent");
static_assert(sizeof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent) == 0x000030, "Wrong size on BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, Temp_bool_IsClosed_Variable) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, K2Node_Event_DeltaSeconds) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, CallFunc_GetRedPaused_ReturnValue) == 0x000024, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::CallFunc_GetRedPaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_ExecuteUbergraph_BP_PlayerHitStopComponent::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerHitStopComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerHitStopComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerHitStopComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerHitStopComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerHitStopComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.Update
// 0x001C (0x001C - 0x0000)
struct BP_PlayerHitStopComponent_C_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F50[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_4;       // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F51[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_Update) == 0x000004, "Wrong alignment on BP_PlayerHitStopComponent_C_Update");
static_assert(sizeof(BP_PlayerHitStopComponent_C_Update) == 0x00001C, "Wrong size on BP_PlayerHitStopComponent_C_Update");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, DeltaSeconds) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_Update::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x00000D, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x000014, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_4) == 0x000015, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.StartWeakHitStop
// 0x0120 (0x0120 - 0x0000)
struct BP_PlayerHitStopComponent_C_StartWeakHitStop final
{
public:
	EPlayerHitStopType                            HitType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F52[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Enemy;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitStopSeconds;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitStopRate;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAllThrow;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F53[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetHitStop;                                   // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InStartSlowOnce;                                   // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LStartHitStop;                                     // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F54[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                LGameSystemManager;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurPriority;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F55[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LHitStopName;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         LHitStopSeconds;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHitStopSpeedRate;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F56[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F57[0x6];                                     // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F58[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F59[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStopAble_bResult;                       // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5A[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player_1;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5B[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPriority_Priority;                     // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5C[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_PrivateGetMainPlayer_Player;              // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5D[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_StartWeakHitStop) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_StartWeakHitStop");
static_assert(sizeof(BP_PlayerHitStopComponent_C_StartWeakHitStop) == 0x000120, "Wrong size on BP_PlayerHitStopComponent_C_StartWeakHitStop");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, HitType) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::HitType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, Enemy) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::Enemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, Attacker) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::Attacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, HitStopSeconds) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::HitStopSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, HitStopRate) == 0x00001C, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::HitStopRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, IsAllThrow) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::IsAllThrow' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, Player) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, IsTargetHitStop) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::IsTargetHitStop' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, InStartSlowOnce) == 0x000031, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::InStartSlowOnce' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, LStartHitStop) == 0x000032, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::LStartHitStop' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, LGameSystemManager) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::LGameSystemManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CurPriority) == 0x000040, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CurPriority' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, TargetActor) == 0x000048, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, LHitStopName) == 0x000050, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::LHitStopName' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, LHitStopSeconds) == 0x000060, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::LHitStopSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, LHitStopSpeedRate) == 0x000064, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::LHitStopSpeedRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000069, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_SelectFloat_ReturnValue) == 0x00006C, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000070, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_BooleanOR_ReturnValue) == 0x000071, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetDebuggingManager_Manager) == 0x000078, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000088, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetPlayerManager_PlayerManager) == 0x000098, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetMainPlayer_Player) == 0x0000A8, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0000B0, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_IsValid_ReturnValue_2) == 0x0000C1, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetAccelerating_Accelerating) == 0x0000C2, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_IsStopAble_bResult) == 0x0000C3, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_IsStopAble_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetPlayerManager_PlayerManager_1) == 0x0000C8, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetMainPlayer_Player_1) == 0x0000D0, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetMainPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetCurrentTargetActor_TargetActor) == 0x0000D8, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E0, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000E1, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetPriority_Priority) == 0x0000E4, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetPriority_Priority' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetDebuggingManager_Manager_1) == 0x0000E8, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_IsValid_ReturnValue_3) == 0x0000F0, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GetGameSystemManager_Manager) == 0x0000F8, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_PrivateGetMainPlayer_Player) == 0x000100, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_PrivateGetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, K2Node_DynamicCast_AsRSBattle_Player) == 0x000108, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000111, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000112, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000113, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000114, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_StartWeakHitStop, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000118, "Member 'BP_PlayerHitStopComponent_C_StartWeakHitStop::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.IsTargetLockCanHitStop
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Enemy;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetHitStop;                                   // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5E[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop");
static_assert(sizeof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop) == 0x000040, "Wrong size on BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, TargetActor) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, Enemy) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::Enemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, Attacker) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::Attacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, IsTargetHitStop) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::IsTargetHitStop' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, CallFunc_GetMainPlayer_Player) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop, CallFunc_IsLockTarget_IsLockTarget) == 0x000039, "Member 'BP_PlayerHitStopComponent_C_IsTargetLockCanHitStop::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.Exit
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerHitStopComponent_C_Exit final
{
public:
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_Exit) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_Exit");
static_assert(sizeof(BP_PlayerHitStopComponent_C_Exit) == 0x000010, "Wrong size on BP_PlayerHitStopComponent_C_Exit");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Exit, CallFunc_GetEnemyManager_Manager) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_Exit::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Exit, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_Exit::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.Clear
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerHitStopComponent_C_Clear final
{
public:
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRegistName_IsFound;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F60[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsRegistName_CurrentCustomTimeDilation;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_Clear) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_Clear");
static_assert(sizeof(BP_PlayerHitStopComponent_C_Clear) == 0x000018, "Wrong size on BP_PlayerHitStopComponent_C_Clear");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Clear, CallFunc_GetGameSystemManager_Manager) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_Clear::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Clear, CallFunc_IsRegistName_IsFound) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_Clear::CallFunc_IsRegistName_IsFound' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Clear, CallFunc_IsRegistName_CurrentCustomTimeDilation) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_Clear::CallFunc_IsRegistName_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Clear, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_Clear::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.GetPriority
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerHitStopComponent_C_GetPriority final
{
public:
	EPlayerHitStopType                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F61[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Priority;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LCurPriority;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetHitSlowRowName_RowName;                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F62[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFHitSlowParam                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0020)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_GetPriority) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_GetPriority");
static_assert(sizeof(BP_PlayerHitStopComponent_C_GetPriority) == 0x000040, "Wrong size on BP_PlayerHitStopComponent_C_GetPriority");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPriority, Type) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_GetPriority::Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPriority, Param_Priority) == 0x000004, "Member 'BP_PlayerHitStopComponent_C_GetPriority::Param_Priority' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPriority, LCurPriority) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_GetPriority::LCurPriority' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPriority, CallFunc_GetHitSlowRowName_RowName) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_GetPriority::CallFunc_GetHitSlowRowName_RowName' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPriority, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_GetPriority::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPriority, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_GetPriority::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.GetHitStopParam
// 0x0058 (0x0058 - 0x0000)
struct BP_PlayerHitStopComponent_C_GetHitStopParam final
{
public:
	EPlayerHitStopType                            NewType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            CurrentType;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            SuccessType;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Seconds;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayTime;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LTry;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F63[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_num;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            L_Type;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F64[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_DelayTime;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_rate;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Seconds;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bSuccess;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F65[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetParamByType_Second;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamByType_Rate;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamByType_DelayTime;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetParamByType_Num;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPriority_Priority;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPriority_Priority_1;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_GetHitStopParam) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_GetHitStopParam");
static_assert(sizeof(BP_PlayerHitStopComponent_C_GetHitStopParam) == 0x000058, "Wrong size on BP_PlayerHitStopComponent_C_GetHitStopParam");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, NewType) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::NewType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CurrentType) == 0x000001, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CurrentType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, SuccessType) == 0x000002, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::SuccessType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, IsSuccess) == 0x000003, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::IsSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, Seconds) == 0x000004, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::Seconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, Rate) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, DelayTime) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::DelayTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, LTry) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::LTry' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, L_num) == 0x000014, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::L_num' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, L_Type) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::L_Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, L_DelayTime) == 0x00001C, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::L_DelayTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, L_rate) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::L_rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, L_Seconds) == 0x000024, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::L_Seconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, L_bSuccess) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::L_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetDebuggingManager_Manager) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_Array_Get_Item) == 0x000039, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00003A, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00003B, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetParamByType_Second) == 0x00003C, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetParamByType_Second' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetParamByType_Rate) == 0x000040, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetParamByType_Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetParamByType_DelayTime) == 0x000044, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetParamByType_DelayTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetParamByType_Num) == 0x000048, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetParamByType_Num' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetPriority_Priority) == 0x00004C, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetPriority_Priority' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GetPriority_Priority_1) == 0x000050, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GetPriority_Priority_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitStopParam, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'BP_PlayerHitStopComponent_C_GetHitStopParam::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.GetPlayerDamageType
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerHitStopComponent_C_GetPlayerDamageType final
{
public:
	EPlayerDamageKind                             DamageType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            HitStopType;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            L_HitStopType;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_GetPlayerDamageType) == 0x000001, "Wrong alignment on BP_PlayerHitStopComponent_C_GetPlayerDamageType");
static_assert(sizeof(BP_PlayerHitStopComponent_C_GetPlayerDamageType) == 0x000004, "Wrong size on BP_PlayerHitStopComponent_C_GetPlayerDamageType");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPlayerDamageType, DamageType) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_GetPlayerDamageType::DamageType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPlayerDamageType, HitStopType) == 0x000001, "Member 'BP_PlayerHitStopComponent_C_GetPlayerDamageType::HitStopType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPlayerDamageType, L_HitStopType) == 0x000002, "Member 'BP_PlayerHitStopComponent_C_GetPlayerDamageType::L_HitStopType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPlayerDamageType, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_PlayerHitStopComponent_C_GetPlayerDamageType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.SetStartDelay
// 0x0108 (0x0108 - 0x0000)
struct BP_PlayerHitStopComponent_C_SetStartDelay final
{
public:
	EPlayerHitStopType                            HitType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F66[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Enemy;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAllThrow;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CauseType;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTargetIgnore;                                     // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InPlaySlowOnce;                                    // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F67[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerHitStopType>                    LCauseTypeList;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LTry;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F68[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F69[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBattleEnemyInterface> K2Node_DynamicCast_AsBattle_Enemy_Interface;       // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvincible_Native_ReturnValue;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F6A[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F6B[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObject_ReturnValue;               // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F6C[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F6D[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F6E[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_Array_Get_Item;                           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F6F[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F70[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F71[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F72[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F73[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player_1;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F74[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor_1;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetLockCanHitStop_IsTargetHitStop;   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetLockCanHitStop_IsTargetHitStop_1; // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_GetHitStopParam_SuccessType;              // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IsSuccess;                // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHitStopParam_Seconds;                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_Rate;                     // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_DelayTime;                // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_SetStartDelay) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_SetStartDelay");
static_assert(sizeof(BP_PlayerHitStopComponent_C_SetStartDelay) == 0x000108, "Wrong size on BP_PlayerHitStopComponent_C_SetStartDelay");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, HitType) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::HitType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, Attacker) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::Attacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, Enemy) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::Enemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, IsAllThrow) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::IsAllThrow' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CauseType) == 0x000019, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CauseType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, bTargetIgnore) == 0x00001A, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::bTargetIgnore' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, InPlaySlowOnce) == 0x00001B, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::InPlaySlowOnce' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, LPlayerFixParam) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, LCauseTypeList) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::LCauseTypeList' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, LTry) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::LTry' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, Temp_bool_True_if_break_was_hit_Variable) == 0x000039, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, K2Node_DynamicCast_AsBattle_Enemy_Interface) == 0x000048, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::K2Node_DynamicCast_AsBattle_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsInvincible_Native_ReturnValue) == 0x00005A, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsInvincible_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue_1) == 0x00005B, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, Temp_bool_Variable) == 0x00005C, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetPlayerManager_PlayerManager) == 0x000060, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue_2) == 0x000068, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000070, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsUniqueObject_ReturnValue) == 0x000081, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsUniqueObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetMainPlayer_Player) == 0x000088, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue_3) == 0x000090, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000098, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000A0, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, K2Node_SwitchEnum_CmpSuccess) == 0x0000A1, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetPlayerFixParam_Param) == 0x0000A8, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue_4) == 0x0000B0, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_Array_Get_Item) == 0x0000B1, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_Array_Length_ReturnValue) == 0x0000B4, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, Temp_int_Loop_Counter_Variable) == 0x0000BC, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_BooleanAND_ReturnValue) == 0x0000C8, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetPlayerManager_PlayerManager_1) == 0x0000D0, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue_5) == 0x0000D8, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetMainPlayer_Player_1) == 0x0000E0, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetMainPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsValid_ReturnValue_6) == 0x0000E8, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetCurrentTargetActor_TargetActor_1) == 0x0000F0, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetCurrentTargetActor_TargetActor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsTargetLockCanHitStop_IsTargetHitStop) == 0x0000F8, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsTargetLockCanHitStop_IsTargetHitStop' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_IsTargetLockCanHitStop_IsTargetHitStop_1) == 0x0000F9, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_IsTargetLockCanHitStop_IsTargetHitStop_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetHitStopParam_SuccessType) == 0x0000FA, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetHitStopParam_SuccessType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetHitStopParam_IsSuccess) == 0x0000FB, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetHitStopParam_IsSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetHitStopParam_Seconds) == 0x0000FC, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetHitStopParam_Seconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetHitStopParam_Rate) == 0x000100, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetHitStopParam_Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_SetStartDelay, CallFunc_GetHitStopParam_DelayTime) == 0x000104, "Member 'BP_PlayerHitStopComponent_C_SetStartDelay::CallFunc_GetHitStopParam_DelayTime' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.GetPsychicObjHitStopType
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType final
{
public:
	EHCSkillExtraType                             ExtraType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            HitStopType;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            L_HitStopType;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType) == 0x000001, "Wrong alignment on BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType");
static_assert(sizeof(BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType) == 0x000004, "Wrong size on BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType, ExtraType) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType::ExtraType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType, HitStopType) == 0x000001, "Member 'BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType::HitStopType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType, L_HitStopType) == 0x000002, "Member 'BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType::L_HitStopType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_PlayerHitStopComponent_C_GetPsychicObjHitStopType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.GetParamByType
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerHitStopComponent_C_GetParamByType final
{
public:
	EPlayerHitStopType                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F75[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Second;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayTime;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitSlowDelayType                             LDelayType;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F76[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_DelayTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_num;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_rate;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Seconds;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               L_FixParam;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetHitSlowRowName_RowName;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFHitSlowDelayParam                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F77[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetHitSlowRowName_RowName_1;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFHitSlowParam                         CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0048(0x0020)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F78[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_GetParamByType) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_GetParamByType");
static_assert(sizeof(BP_PlayerHitStopComponent_C_GetParamByType) == 0x000080, "Wrong size on BP_PlayerHitStopComponent_C_GetParamByType");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, Type) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, Second) == 0x000004, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::Second' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, Rate) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, DelayTime) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::DelayTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, Num) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::Num' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, LDelayType) == 0x000014, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::LDelayType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, L_DelayTime) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::L_DelayTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, L_num) == 0x00001C, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::L_num' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, L_rate) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::L_rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, L_Seconds) == 0x000024, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::L_Seconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, L_FixParam) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::L_FixParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetHitSlowRowName_RowName) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetHitSlowRowName_RowName' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00003C, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetHitSlowRowName_RowName_1) == 0x000040, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetHitSlowRowName_RowName_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000048, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000068, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_GetPlayerFixParam_Param) == 0x000070, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetParamByType, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_PlayerHitStopComponent_C_GetParamByType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.IsStartCauseType
// 0x0238 (0x0238 - 0x0000)
struct BP_PlayerHitStopComponent_C_IsStartCauseType final
{
public:
	EPlayerHitStopType                            HitSlowType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           CauseType;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F79[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           HitResult;                                         // 0x0008(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bStart;                                            // 0x01C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LStart;                                            // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F7A[0x6];                                     // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPlayerHitStopType>                    LCauseTypeList;                                    // 0x01D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F7B[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F7C[0x3];                                     // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01FD(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F7D[0x2];                                     // 0x01FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBattleEnemyInterface> K2Node_DynamicCast_AsBattle_Enemy_Interface;       // 0x0200(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F7E[0x3];                                     // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInvincible_Native_ReturnValue;          // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F7F[0x5];                                     // 0x021B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_Array_Get_Item;                           // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x022B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_IsStartCauseType) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_IsStartCauseType");
static_assert(sizeof(BP_PlayerHitStopComponent_C_IsStartCauseType) == 0x000238, "Wrong size on BP_PlayerHitStopComponent_C_IsStartCauseType");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, HitSlowType) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::HitSlowType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CauseType) == 0x000001, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CauseType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, HitResult) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::HitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, bStart) == 0x0001C8, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::bStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, LStart) == 0x0001C9, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::LStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, LCauseTypeList) == 0x0001D0, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::LCauseTypeList' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, LPlayerFixParam) == 0x0001E0, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, Temp_bool_Variable) == 0x0001E8, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, Temp_int_Loop_Counter_Variable) == 0x0001EC, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_Add_IntInt_ReturnValue) == 0x0001F0, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, Temp_bool_True_if_break_was_hit_Variable) == 0x0001F4, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, Temp_int_Array_Index_Variable) == 0x0001F8, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_Not_PreBool_ReturnValue) == 0x0001FC, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, Temp_byte_Variable) == 0x0001FD, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, K2Node_DynamicCast_AsBattle_Enemy_Interface) == 0x000200, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::K2Node_DynamicCast_AsBattle_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, K2Node_DynamicCast_bSuccess) == 0x000210, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_Array_Find_ReturnValue) == 0x000214, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_IsInvincible_Native_ReturnValue) == 0x000218, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_IsInvincible_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000219, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_IsValid_ReturnValue) == 0x00021A, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_GetPlayerFixParam_Param) == 0x000220, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, K2Node_SwitchEnum_CmpSuccess) == 0x000228, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_IsValid_ReturnValue_1) == 0x000229, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_Array_Get_Item) == 0x00022A, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00022B, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_Array_Length_ReturnValue) == 0x00022C, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_Less_IntInt_ReturnValue) == 0x000230, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStartCauseType, CallFunc_BooleanAND_ReturnValue) == 0x000231, "Member 'BP_PlayerHitStopComponent_C_IsStartCauseType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.Initialize
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerHitStopComponent_C_Initialize final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F80[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F81[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames_1;       // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_PrivateGetMainPlayer_Player;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_Initialize) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_Initialize");
static_assert(sizeof(BP_PlayerHitStopComponent_C_Initialize) == 0x000048, "Wrong size on BP_PlayerHitStopComponent_C_Initialize");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_Initialize::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_Initialize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, CallFunc_GetDataTableRowNames_OutRowNames_1) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_Initialize::CallFunc_GetDataTableRowNames_OutRowNames_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, CallFunc_PrivateGetMainPlayer_Player) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_Initialize::CallFunc_PrivateGetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, K2Node_DynamicCast_AsRSBattle_Player) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_Initialize::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerHitStopComponent_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.GetHitSlowRowName
// 0x0058 (0x0058 - 0x0000)
struct BP_PlayerHitStopComponent_C_GetHitSlowRowName final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDelayTable;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F82[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LRowName;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F83[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_1;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F84[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F85[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_1;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_GetHitSlowRowName) == 0x000004, "Wrong alignment on BP_PlayerHitStopComponent_C_GetHitSlowRowName");
static_assert(sizeof(BP_PlayerHitStopComponent_C_GetHitSlowRowName) == 0x000058, "Wrong size on BP_PlayerHitStopComponent_C_GetHitSlowRowName");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, Type) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, bDelayTable) == 0x000001, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::bDelayTable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, RowName) == 0x000004, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::RowName' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, LRowName) == 0x00000C, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::LRowName' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, Temp_name_Variable) == 0x000014, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, Temp_bool_Variable) == 0x00001C, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, Temp_name_Variable_1) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, Temp_bool_Variable_1) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, CallFunc_Array_Get_Item) == 0x000034, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, CallFunc_Array_Get_Item_1) == 0x00003C, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000044, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000045, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, K2Node_Select_Default) == 0x000048, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_GetHitSlowRowName, K2Node_Select_Default_1) == 0x000050, "Member 'BP_PlayerHitStopComponent_C_GetHitSlowRowName::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.PhysicsIdling
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerHitStopComponent_C_PhysicsIdling final
{
public:
	class ARSCharacterBase*                       LMainPlayer;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F86[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F87[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_PhysicsIdling) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_PhysicsIdling");
static_assert(sizeof(BP_PlayerHitStopComponent_C_PhysicsIdling) == 0x000038, "Wrong size on BP_PlayerHitStopComponent_C_PhysicsIdling");
static_assert(offsetof(BP_PlayerHitStopComponent_C_PhysicsIdling, LMainPlayer) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_PhysicsIdling::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_PhysicsIdling, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_PhysicsIdling::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_PhysicsIdling, K2Node_DynamicCast_AsEvent_Interface) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_PhysicsIdling::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_PhysicsIdling, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_PhysicsIdling::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_PhysicsIdling, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_PhysicsIdling::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_PhysicsIdling, CallFunc_GetPlayer_ReturnValue) == 0x000030, "Member 'BP_PlayerHitStopComponent_C_PhysicsIdling::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.CheckPlayNexusDriveTelepoAttack
// 0x0410 (0x0410 - 0x0000)
struct BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bEnablePlay;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F88[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x01C8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            SlowType;                                          // 0x01D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           CauseType;                                         // 0x01D1(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreTarget;                                     // 0x01D2(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F89[0x5];                                     // 0x01D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x01D8(0x00F0)(Parm, OutParm)
	struct FHCSkillCommonInfo                     LSkill;                                            // 0x02C8(0x00F0)(Edit, BlueprintVisible)
	EHCHitStopCauseType                           LCauseType;                                        // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            LSlowType;                                         // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbCharge;                                          // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbTelepoAttack;                                    // 0x03BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F8A[0x4];                                     // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Temp_byte_Variable;                                // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x03C9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x03CA(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x03CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable_3;                              // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F8B[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_4;                              // 0x03DA(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F8C[0x1];                                     // 0x03DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class INexusDriveInterface>  K2Node_DynamicCast_AsNexus_Drive_Interface;        // 0x03E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F8D[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface;  // 0x03F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveNexusDriveSas_ReturnValue;        // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x040B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            K2Node_Select_Default;                             // 0x040D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack");
static_assert(sizeof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack) == 0x000410, "Wrong size on BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, HitResult) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::HitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, bEnablePlay) == 0x0001C0, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::bEnablePlay' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Attacker) == 0x0001C8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Attacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, SlowType) == 0x0001D0, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::SlowType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CauseType) == 0x0001D1, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CauseType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, bIgnoreTarget) == 0x0001D2, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::bIgnoreTarget' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Skill) == 0x0001D8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Skill' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, LSkill) == 0x0002C8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::LSkill' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, LCauseType) == 0x0003B8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::LCauseType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, LSlowType) == 0x0003B9, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::LSlowType' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, LbCharge) == 0x0003BA, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::LbCharge' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, LbTelepoAttack) == 0x0003BB, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::LbTelepoAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, LAttacker) == 0x0003C0, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::LAttacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_byte_Variable) == 0x0003C8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_byte_Variable_1) == 0x0003C9, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_byte_Variable_2) == 0x0003CA, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_bool_Variable) == 0x0003CB, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_byte_Variable_3) == 0x0003CC, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_Array_Find_ReturnValue) == 0x0003D0, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_Array_Find_ReturnValue_1) == 0x0003D4, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0003D8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0003D9, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_byte_Variable_4) == 0x0003DA, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_Array_AddUnique_ReturnValue) == 0x0003DC, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, K2Node_DynamicCast_AsNexus_Drive_Interface) == 0x0003E0, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::K2Node_DynamicCast_AsNexus_Drive_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, K2Node_DynamicCast_bSuccess) == 0x0003F0, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, K2Node_DynamicCast_AsTargetable_Object_Interface) == 0x0003F8, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::K2Node_DynamicCast_AsTargetable_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, K2Node_DynamicCast_bSuccess_1) == 0x000408, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_IsActiveNexusDriveSas_ReturnValue) == 0x000409, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_IsActiveNexusDriveSas_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_IsControlPlayer_ReturnValue) == 0x00040A, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, CallFunc_IsValid_ReturnValue) == 0x00040B, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, Temp_bool_Variable_1) == 0x00040C, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack, K2Node_Select_Default) == 0x00040D, "Member 'BP_PlayerHitStopComponent_C_CheckPlayNexusDriveTelepoAttack::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.IsStopAble
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerHitStopComponent_C_IsStopAble final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F8E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LMainPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F8F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingAny_IsPlaying;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F90[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F91[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F92[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingAnyBrainCrash_NowPlaying;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_IsStopAble) == 0x000008, "Wrong alignment on BP_PlayerHitStopComponent_C_IsStopAble");
static_assert(sizeof(BP_PlayerHitStopComponent_C_IsStopAble) == 0x000068, "Wrong size on BP_PlayerHitStopComponent_C_IsStopAble");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, bResult) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, LMainPlayer) == 0x000008, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_IsPlayingAny_IsPlaying) == 0x000020, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_IsPlayingAny_IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000028, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_GetPlayerManager_PlayerManager_1) == 0x000040, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_IsPlayerStatusAI_bResult) == 0x000048, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_GetPlayer_ReturnValue) == 0x000050, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_GetBrainCrashManager_Manager) == 0x000058, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsStopAble, CallFunc_IsPlayingAnyBrainCrash_NowPlaying) == 0x000060, "Member 'BP_PlayerHitStopComponent_C_IsStopAble::CallFunc_IsPlayingAnyBrainCrash_NowPlaying' has a wrong offset!");

// Function BP_PlayerHitStopComponent.BP_PlayerHitStopComponent_C.IsHitStopPlaying
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerHitStopComponent_C_IsHitStopPlaying final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHitStopComponent_C_IsHitStopPlaying) == 0x000001, "Wrong alignment on BP_PlayerHitStopComponent_C_IsHitStopPlaying");
static_assert(sizeof(BP_PlayerHitStopComponent_C_IsHitStopPlaying) == 0x000001, "Wrong size on BP_PlayerHitStopComponent_C_IsHitStopPlaying");
static_assert(offsetof(BP_PlayerHitStopComponent_C_IsHitStopPlaying, IsPlaying) == 0x000000, "Member 'BP_PlayerHitStopComponent_C_IsHitStopPlaying::IsPlaying' has a wrong offset!");

}

