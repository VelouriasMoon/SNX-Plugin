#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPPlayerManagerInterface

#include "Basic.hpp"

#include "BPPlayerManagerInterface_classes.hpp"
#include "BPPlayerManagerInterface_parameters.hpp"


namespace SDK
{

// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.InitializePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void IBPPlayerManagerInterface_C::InitializePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "InitializePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.AddSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            Skill_id_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPPlayerManagerInterface_C::AddSkill(EPlayerID Player_id_in, EPlayerSkill Skill_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "AddSkill");

	Params::BPPlayerManagerInterface_C_AddSkill Parms{};

	Parms.Player_id_in = Player_id_in;
	Parms.Skill_id_in = Skill_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.ResetSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPPlayerManagerInterface_C::ResetSkill(EPlayerID Player_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "ResetSkill");

	Params::BPPlayerManagerInterface_C_ResetSkill Parms{};

	Parms.Player_id_in = Player_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.ResetAssistThinkData
// (Public, BlueprintCallable, BlueprintEvent)

void IBPPlayerManagerInterface_C::ResetAssistThinkData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "ResetAssistThinkData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.IPresetAddPartyMember
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PresetName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCheckBattleMemberMain                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPPlayerManagerInterface_C::IPresetAddPartyMember(class FName PresetName, bool IsCheckBattleMemberMain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "IPresetAddPartyMember");

	Params::BPPlayerManagerInterface_C_IPresetAddPartyMember Parms{};

	Parms.PresetName = PresetName;
	Parms.IsCheckBattleMemberMain = IsCheckBattleMemberMain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.Set Assist Count
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BadStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Revive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPPlayerManagerInterface_C::Set_Assist_Count(int32 HP, int32 BadStatus, int32 Revive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "Set Assist Count");

	Params::BPPlayerManagerInterface_C_Set_Assist_Count Parms{};

	Parms.HP = HP;
	Parms.BadStatus = BadStatus;
	Parms.Revive = Revive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetCommandAccelerator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAcceleratorParam                Command                                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPPlayerManagerInterface_C::GetCommandAccelerator(struct FAcceleratorParam* Command, bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "GetCommandAccelerator");

	Params::BPPlayerManagerInterface_C_GetCommandAccelerator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Command != nullptr)
		*Command = std::move(Parms.Command);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetPlayerWeaponActorList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGetPlayerWeaponType                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   WeaponList                                             (Parm, OutParm, HasGetValueTypeHash)

void IBPPlayerManagerInterface_C::GetPlayerWeaponActorList(class AActor* OwnerPlayer, EGetPlayerWeaponType Type, TArray<class AActor*>* WeaponList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "GetPlayerWeaponActorList");

	Params::BPPlayerManagerInterface_C_GetPlayerWeaponActorList Parms{};

	Parms.OwnerPlayer = OwnerPlayer;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponList != nullptr)
		*WeaponList = std::move(Parms.WeaponList);
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetMainPlayerCostumeID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CostumeId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPPlayerManagerInterface_C::GetMainPlayerCostumeID(int32* CostumeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "GetMainPlayerCostumeID");

	Params::BPPlayerManagerInterface_C_GetMainPlayerCostumeID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CostumeId != nullptr)
		*CostumeId = Parms.CostumeId;
}


// Function BPPlayerManagerInterface.BPPlayerManagerInterface_C.GetCameraPitchMaxAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MaxLowAngle                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxUpAngle                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPPlayerManagerInterface_C::GetCameraPitchMaxAngle(float* MaxLowAngle, float* MaxUpAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPPlayerManagerInterface_C", "GetCameraPitchMaxAngle");

	Params::BPPlayerManagerInterface_C_GetCameraPitchMaxAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxLowAngle != nullptr)
		*MaxLowAngle = Parms.MaxLowAngle;

	if (MaxUpAngle != nullptr)
		*MaxUpAngle = Parms.MaxUpAngle;
}

}

