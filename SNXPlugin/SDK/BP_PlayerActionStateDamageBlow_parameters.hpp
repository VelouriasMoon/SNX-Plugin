#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateDamageBlow

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.ExecuteUbergraph_BP_PlayerActionStateDamageBlow
// 0x0024 (0x0024 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow) == 0x000004, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow) == 0x000024, "Wrong size on BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow, EntryPoint) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Enter
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_Enter final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Enter_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvalidDamage_bInvalidDamage;           // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46DC[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_LookAtInterface_C> CallFunc_SetLookAtEnable_self_CastInput;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageDir                              Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DD[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46DE[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageFront_bFront;                     // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_Enter) == 0x000008, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_Enter");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_Enter) == 0x000080, "Wrong size on BP_PlayerActionStateDamageBlow_C_Enter");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, Param) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, ReturnValue) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_Enter_ReturnValue) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_Enter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, Temp_float_Variable) == 0x00000C, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, Temp_float_Variable_1) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000014, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_IsInvalidDamage_bInvalidDamage) == 0x000015, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_IsInvalidDamage_bInvalidDamage' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_SetLookAtEnable_self_CastInput) == 0x000018, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_SetLookAtEnable_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_SetLookAtEnable_bResult) == 0x000028, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, Temp_byte_Variable) == 0x000029, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, K2Node_Select_Default) == 0x00002C, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00003C, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_BreakVector_X) == 0x00004C, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_BreakVector_Y) == 0x000050, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_BreakVector_Z) == 0x000054, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_Normal_ReturnValue) == 0x000064, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_MakeRotFromX_ReturnValue) == 0x000070, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_SetInvalidDamage_Dummy) == 0x00007C, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00007D, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Enter, CallFunc_IsDamageFront_bFront) == 0x00007E, "Member 'BP_PlayerActionStateDamageBlow_C_Enter::CallFunc_IsDamageFront_bFront' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Update
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_Update final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbLand;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TraceLandCheck_bLand;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46DF[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TraceLandCheck_LandHeight;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsASAnimPlayEnd_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIgnoreLandingCheck_bIgnoreLandingCheck; // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E1[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetProcess_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_Update) == 0x000004, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_Update");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_Update) == 0x000020, "Wrong size on BP_PlayerActionStateDamageBlow_C_Update");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, ReturnValue) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_Update::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, LbLand) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_Update::LbLand' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_TraceLandCheck_bLand) == 0x000005, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_TraceLandCheck_bLand' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_TraceLandCheck_LandHeight) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_TraceLandCheck_LandHeight' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_IsASAnimPlayEnd_ReturnValue) == 0x00000C, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_IsASAnimPlayEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_IsIgnoreLandingCheck_bIgnoreLandingCheck) == 0x000015, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_IsIgnoreLandingCheck_bIgnoreLandingCheck' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, CallFunc_GetProcess_ReturnValue) == 0x000018, "Member 'BP_PlayerActionStateDamageBlow_C_Update::CallFunc_GetProcess_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Update, K2Node_SwitchInteger_CmpSuccess) == 0x00001C, "Member 'BP_PlayerActionStateDamageBlow_C_Update::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Transition
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_Transition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerDownType                               LDownParam;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46E2[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageFront_bFront;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsBadStatusElectric_self_CastInput;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E4[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isEnableActionRecovery_Enable;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTrgRecovery_ReturnValue;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_Transition) == 0x000008, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_Transition");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_Transition) == 0x000038, "Wrong size on BP_PlayerActionStateDamageBlow_C_Transition");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, ReturnValue) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, LDownParam) == 0x000001, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::LDownParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, Temp_int_Variable) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_IsDamageFront_bFront) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_IsDamageFront_bFront' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, Temp_int_Variable_1) == 0x00000C, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_IsBadStatusElectric_self_CastInput) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_IsBadStatusElectric_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000020, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_IsActionStatus_Result) == 0x000021, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000024, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, Temp_bool_Variable) == 0x000028, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, K2Node_Select_Default) == 0x00002C, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_isEnableActionRecovery_Enable) == 0x000030, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_isEnableActionRecovery_Enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Transition, CallFunc_IsTrgRecovery_ReturnValue) == 0x000031, "Member 'BP_PlayerActionStateDamageBlow_C_Transition::CallFunc_IsTrgRecovery_ReturnValue' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Exit
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_Exit final
{
public:
	int32                                         NextStateIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Exit_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46E6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_LookAtInterface_C> CallFunc_SetLookAtEnable_self_CastInput;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_Exit) == 0x000008, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_Exit");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_Exit) == 0x000028, "Wrong size on BP_PlayerActionStateDamageBlow_C_Exit");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Exit, NextStateIndex) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_Exit::NextStateIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Exit, ReturnValue) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_Exit::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Exit, CallFunc_Exit_ReturnValue) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_Exit::CallFunc_Exit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Exit, CallFunc_SetLookAtEnable_self_CastInput) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_Exit::CallFunc_SetLookAtEnable_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Exit, CallFunc_SetLookAtEnable_bResult) == 0x000020, "Member 'BP_PlayerActionStateDamageBlow_C_Exit::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_Exit, CallFunc_SetInvalidDamage_Dummy) == 0x000021, "Member 'BP_PlayerActionStateDamageBlow_C_Exit::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.IsInvalidDamage
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_IsInvalidDamage final
{
public:
	EPlayerDamageKind                             DamageKind;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidDamage;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E7[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage) == 0x000008, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_IsInvalidDamage");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage) == 0x000038, "Wrong size on BP_PlayerActionStateDamageBlow_C_IsInvalidDamage");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, DamageKind) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::DamageKind' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, bInvalidDamage) == 0x000001, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::bInvalidDamage' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_byte_Variable) == 0x000002, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable) == 0x000003, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_1) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_2) == 0x000005, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_3) == 0x000006, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_4) == 0x000007, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_5) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_6) == 0x000009, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_7) == 0x00000A, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_8) == 0x00000B, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_9) == 0x00000C, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_10) == 0x00000D, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_11) == 0x00000E, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_12) == 0x00000F, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_13) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_14) == 0x000011, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_15) == 0x000012, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_16) == 0x000013, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_17) == 0x000014, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_18) == 0x000015, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_19) == 0x000016, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_20) == 0x000017, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_21) == 0x000018, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_22) == 0x000019, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, Temp_bool_Variable_23) == 0x00001A, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000020, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000030, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, K2Node_Select_Default) == 0x000031, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsInvalidDamage, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'BP_PlayerActionStateDamageBlow_C_IsInvalidDamage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.IsAerialBlow
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_IsAerialBlow final
{
public:
	EPlayerDamageKind                             DamageKind;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkip;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow) == 0x000001, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_IsAerialBlow");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow) == 0x000020, "Wrong size on BP_PlayerActionStateDamageBlow_C_IsAerialBlow");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, DamageKind) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::DamageKind' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, bSkip) == 0x000001, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::bSkip' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_byte_Variable) == 0x000002, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable) == 0x000003, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_1) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_2) == 0x000005, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_3) == 0x000006, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_4) == 0x000007, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_5) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_6) == 0x000009, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_7) == 0x00000A, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_8) == 0x00000B, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_9) == 0x00000C, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_10) == 0x00000D, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_11) == 0x00000E, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_12) == 0x00000F, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_13) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_14) == 0x000011, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_15) == 0x000012, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_16) == 0x000013, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_17) == 0x000014, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_18) == 0x000015, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_19) == 0x000016, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_20) == 0x000017, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_21) == 0x000018, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_22) == 0x000019, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_23) == 0x00001A, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_24) == 0x00001B, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_25) == 0x00001C, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_26) == 0x00001D, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, Temp_bool_Variable_27) == 0x00001E, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsAerialBlow, K2Node_Select_Default) == 0x00001F, "Member 'BP_PlayerActionStateDamageBlow_C_IsAerialBlow::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.OnBeginFall
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_OnBeginFall final
{
public:
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAerialBlow_bSkip;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_OnBeginFall) == 0x000004, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_OnBeginFall");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_OnBeginFall) == 0x000008, "Wrong size on BP_PlayerActionStateDamageBlow_C_OnBeginFall");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_OnBeginFall, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_OnBeginFall::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_OnBeginFall, CallFunc_IsAerialBlow_bSkip) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_OnBeginFall::CallFunc_IsAerialBlow_bSkip' has a wrong offset!");

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.IsDamageFront
// 0x001F (0x001F - 0x0000)
struct BP_PlayerActionStateDamageBlow_C_IsDamageFront final
{
public:
	bool                                          bFront;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerActionStateDamageBlow_C_IsDamageFront) == 0x000001, "Wrong alignment on BP_PlayerActionStateDamageBlow_C_IsDamageFront");
static_assert(sizeof(BP_PlayerActionStateDamageBlow_C_IsDamageFront) == 0x00001F, "Wrong size on BP_PlayerActionStateDamageBlow_C_IsDamageFront");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, bFront) == 0x000000, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::bFront' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_byte_Variable) == 0x000001, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable) == 0x000002, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_1) == 0x000003, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_2) == 0x000004, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_3) == 0x000005, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_4) == 0x000006, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_5) == 0x000007, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_6) == 0x000008, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_7) == 0x000009, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_8) == 0x00000A, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_9) == 0x00000B, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_10) == 0x00000C, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_11) == 0x00000D, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_12) == 0x00000E, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_13) == 0x00000F, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_14) == 0x000010, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_15) == 0x000011, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_16) == 0x000012, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_17) == 0x000013, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_18) == 0x000014, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_19) == 0x000015, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_20) == 0x000016, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_21) == 0x000017, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_22) == 0x000018, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_23) == 0x000019, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_24) == 0x00001A, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_25) == 0x00001B, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_26) == 0x00001C, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, Temp_bool_Variable_27) == 0x00001D, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerActionStateDamageBlow_C_IsDamageFront, K2Node_Select_Default) == 0x00001E, "Member 'BP_PlayerActionStateDamageBlow_C_IsDamageFront::K2Node_Select_Default' has a wrong offset!");

}

