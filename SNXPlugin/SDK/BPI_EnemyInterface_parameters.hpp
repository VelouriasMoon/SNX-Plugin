#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_EnemyInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_EnemyAiType_structs.hpp"
#include "Enum_EnemySound_structs.hpp"


namespace SDK::Params
{

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetEnemyInterfaceSound
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_GetEnemyInterfaceSound final
{
public:
	Enum_EnemySound                               Enum;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetEnemyInterfaceSound) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_GetEnemyInterfaceSound");
static_assert(sizeof(BPI_EnemyInterface_C_GetEnemyInterfaceSound) == 0x000001, "Wrong size on BPI_EnemyInterface_C_GetEnemyInterfaceSound");
static_assert(offsetof(BPI_EnemyInterface_C_GetEnemyInterfaceSound, Enum) == 0x000000, "Member 'BPI_EnemyInterface_C_GetEnemyInterfaceSound::Enum' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.BeginEnemyAttack
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_BeginEnemyAttack final
{
public:
	EnemyAttackAnimKind                           Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_BeginEnemyAttack) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_BeginEnemyAttack");
static_assert(sizeof(BPI_EnemyInterface_C_BeginEnemyAttack) == 0x000002, "Wrong size on BPI_EnemyInterface_C_BeginEnemyAttack");
static_assert(offsetof(BPI_EnemyInterface_C_BeginEnemyAttack, Attack) == 0x000000, "Member 'BPI_EnemyInterface_C_BeginEnemyAttack::Attack' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_BeginEnemyAttack, Bool) == 0x000001, "Member 'BPI_EnemyInterface_C_BeginEnemyAttack::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyAttack
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyAttack final
{
public:
	EnemyAttackAnimKind                           Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyAttack) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyAttack");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyAttack) == 0x000002, "Wrong size on BPI_EnemyInterface_C_IsEnemyAttack");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyAttack, Attack) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyAttack::Attack' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyAttack, Bool) == 0x000001, "Member 'BPI_EnemyInterface_C_IsEnemyAttack::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.BeginEnemyMove
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_BeginEnemyMove final
{
public:
	EnemyMoveAnimKind                             Move;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_BeginEnemyMove) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_BeginEnemyMove");
static_assert(sizeof(BPI_EnemyInterface_C_BeginEnemyMove) == 0x000002, "Wrong size on BPI_EnemyInterface_C_BeginEnemyMove");
static_assert(offsetof(BPI_EnemyInterface_C_BeginEnemyMove, Move) == 0x000000, "Member 'BPI_EnemyInterface_C_BeginEnemyMove::Move' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_BeginEnemyMove, Bool) == 0x000001, "Member 'BPI_EnemyInterface_C_BeginEnemyMove::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyMove
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyMove final
{
public:
	EnemyMoveAnimKind                             Move;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyMove) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyMove");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyMove) == 0x000002, "Wrong size on BPI_EnemyInterface_C_IsEnemyMove");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyMove, Move) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyMove::Move' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyMove, Bool) == 0x000001, "Member 'BPI_EnemyInterface_C_IsEnemyMove::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyDamageWince
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyDamageWince final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyDamageWince) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyDamageWince");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyDamageWince) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyDamageWince");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyDamageWince, Bool) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyDamageWince::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyDamageDown
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyDamageDown final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyDamageDown) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyDamageDown");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyDamageDown) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyDamageDown");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyDamageDown, Bool) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyDamageDown::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.BeginEnemyAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_BeginEnemyAction final
{
public:
	EnemyActionAnimKind                           Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_BeginEnemyAction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_BeginEnemyAction");
static_assert(sizeof(BPI_EnemyInterface_C_BeginEnemyAction) == 0x000002, "Wrong size on BPI_EnemyInterface_C_BeginEnemyAction");
static_assert(offsetof(BPI_EnemyInterface_C_BeginEnemyAction, Action) == 0x000000, "Member 'BPI_EnemyInterface_C_BeginEnemyAction::Action' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_BeginEnemyAction, Bool) == 0x000001, "Member 'BPI_EnemyInterface_C_BeginEnemyAction::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyAction final
{
public:
	EnemyActionAnimKind                           Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyAction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyAction");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyAction) == 0x000002, "Wrong size on BPI_EnemyInterface_C_IsEnemyAction");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyAction, Action) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyAction::Action' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyAction, Bool) == 0x000001, "Member 'BPI_EnemyInterface_C_IsEnemyAction::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.isEnemyDamageLaunch
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyDamageLaunch final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyDamageLaunch) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyDamageLaunch");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyDamageLaunch) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyDamageLaunch");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyDamageLaunch, Bool) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyDamageLaunch::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyDamageknockBack
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyDamageknockBack final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyDamageknockBack) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyDamageknockBack");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyDamageknockBack) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyDamageknockBack");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyDamageknockBack, Bool) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyDamageknockBack::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.isEnemyDamageBlow
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyDamageBlow final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyDamageBlow) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyDamageBlow");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyDamageBlow) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyDamageBlow");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyDamageBlow, Bool) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyDamageBlow::Bool' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyStateAttack
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyStateAttack final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyStateAttack) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyStateAttack");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyStateAttack) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyStateAttack");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyStateAttack, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyStateAttack::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyStateDamage
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyStateDamage final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyStateDamage) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyStateDamage");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyStateDamage) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyStateDamage");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyStateDamage, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyStateDamage::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyStateDamageDown
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyStateDamageDown final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyStateDamageDown) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyStateDamageDown");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyStateDamageDown) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyStateDamageDown");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyStateDamageDown, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyStateDamageDown::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyStateMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyStateMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyStateMove) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyStateMove");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyStateMove) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyStateMove");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyStateMove, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyStateMove::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyStateAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyStateAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyStateAction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyStateAction");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyStateAction) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyStateAction");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyStateAction, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyStateAction::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyBossActive
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyBossActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyBossActive) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyBossActive");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyBossActive) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyBossActive");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyBossActive, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyBossActive::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyBrainCrashPerformance
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance) == 0x000001, "Wrong size on BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyBrainCrashPerformance::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyTarget
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyTarget final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyTarget) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyTarget");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyTarget) == 0x000001, "Wrong size on BPI_EnemyInterface_C_SetEnemyTarget");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyTarget, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyTarget::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.ResetEnemyTarget
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_ResetEnemyTarget final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_ResetEnemyTarget) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_ResetEnemyTarget");
static_assert(sizeof(BPI_EnemyInterface_C_ResetEnemyTarget) == 0x000001, "Wrong size on BPI_EnemyInterface_C_ResetEnemyTarget");
static_assert(offsetof(BPI_EnemyInterface_C_ResetEnemyTarget, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_ResetEnemyTarget::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyDamageReaction
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyDamageReaction final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyDamageReaction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyDamageReaction");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyDamageReaction) == 0x000001, "Wrong size on BPI_EnemyInterface_C_SetEnemyDamageReaction");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyDamageReaction, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyDamageReaction::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyBrainFieldMoveInner
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner, MoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner::MoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner, Dummy) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldMoveInner::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyBrainFieldMoveNormal
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal, MoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal::MoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal, Dummy) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldMoveNormal::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyBrainFieldStart
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyBrainFieldStart final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyBrainFieldStart) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyBrainFieldStart");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyBrainFieldStart) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SetEnemyBrainFieldStart");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldStart, MoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldStart::MoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldStart, NewParam) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldStart::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyBrainFieldEnd
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyBrainFieldEnd final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyBrainFieldEnd) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyBrainFieldEnd");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyBrainFieldEnd) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SetEnemyBrainFieldEnd");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldEnd, MoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldEnd::MoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainFieldEnd, NewParam) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemyBrainFieldEnd::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetEnemyGroundTransform
// 0x0060 (0x0060 - 0x0000)
struct BPI_EnemyInterface_C_GetEnemyGroundTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             Return;                                            // 0x0030(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_GetEnemyGroundTransform) == 0x000010, "Wrong alignment on BPI_EnemyInterface_C_GetEnemyGroundTransform");
static_assert(sizeof(BPI_EnemyInterface_C_GetEnemyGroundTransform) == 0x000060, "Wrong size on BPI_EnemyInterface_C_GetEnemyGroundTransform");
static_assert(offsetof(BPI_EnemyInterface_C_GetEnemyGroundTransform, Transform) == 0x000000, "Member 'BPI_EnemyInterface_C_GetEnemyGroundTransform::Transform' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_GetEnemyGroundTransform, Return) == 0x000030, "Member 'BPI_EnemyInterface_C_GetEnemyGroundTransform::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyWait final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyWait) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyWait");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyWait) == 0x000001, "Wrong size on BPI_EnemyInterface_C_SetEnemyWait");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyWait, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyWait::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.ResetEnemyWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_ResetEnemyWait final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_ResetEnemyWait) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_ResetEnemyWait");
static_assert(sizeof(BPI_EnemyInterface_C_ResetEnemyWait) == 0x000001, "Wrong size on BPI_EnemyInterface_C_ResetEnemyWait");
static_assert(offsetof(BPI_EnemyInterface_C_ResetEnemyWait, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_ResetEnemyWait::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnSwitchVisibleBrainFieldLevel
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Unused;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel");
static_assert(sizeof(BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel) == 0x000002, "Wrong size on BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel");
static_assert(offsetof(BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel, Visible) == 0x000000, "Member 'BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel::Visible' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel, Unused) == 0x000001, "Member 'BPI_EnemyInterface_C_OnSwitchVisibleBrainFieldLevel::Unused' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyStealthSeeEnable
// 0x0003 (0x0003 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyStealthSeeEnable final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowChange;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyStealthSeeEnable) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyStealthSeeEnable");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyStealthSeeEnable) == 0x000003, "Wrong size on BPI_EnemyInterface_C_SetEnemyStealthSeeEnable");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyStealthSeeEnable, On) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyStealthSeeEnable::On' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyStealthSeeEnable, ShadowChange) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemyStealthSeeEnable::ShadowChange' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyStealthSeeEnable, Return) == 0x000002, "Member 'BPI_EnemyInterface_C_SetEnemyStealthSeeEnable::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyBrainCrashParam
// 0x000C (0x000C - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyBrainCrashParam final
{
public:
	float                                         BrainCrashTimer;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashMissScale;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyBrainCrashParam) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyBrainCrashParam");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyBrainCrashParam) == 0x00000C, "Wrong size on BPI_EnemyInterface_C_SetEnemyBrainCrashParam");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainCrashParam, BrainCrashTimer) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyBrainCrashParam::BrainCrashTimer' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainCrashParam, BrainCrashMissScale) == 0x000004, "Member 'BPI_EnemyInterface_C_SetEnemyBrainCrashParam::BrainCrashMissScale' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyBrainCrashParam, Return) == 0x000008, "Member 'BPI_EnemyInterface_C_SetEnemyBrainCrashParam::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnableEnemyMoveRange
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnableEnemyMoveRange final
{
public:
	bool                                          bReturn;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnableEnemyMoveRange) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnableEnemyMoveRange");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnableEnemyMoveRange) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnableEnemyMoveRange");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnableEnemyMoveRange, bReturn) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnableEnemyMoveRange::bReturn' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.PlayerActionForEnemyReaction
// 0x0014 (0x0014 - 0x0000)
struct BPI_EnemyInterface_C_PlayerActionForEnemyReaction final
{
public:
	BattlePrototype::EPsychicObjectAttackType     PsychicObjectType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88CF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PsychicObjLocation;                                // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_PlayerActionForEnemyReaction) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_PlayerActionForEnemyReaction");
static_assert(sizeof(BPI_EnemyInterface_C_PlayerActionForEnemyReaction) == 0x000014, "Wrong size on BPI_EnemyInterface_C_PlayerActionForEnemyReaction");
static_assert(offsetof(BPI_EnemyInterface_C_PlayerActionForEnemyReaction, PsychicObjectType) == 0x000000, "Member 'BPI_EnemyInterface_C_PlayerActionForEnemyReaction::PsychicObjectType' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_PlayerActionForEnemyReaction, PsychicObjLocation) == 0x000004, "Member 'BPI_EnemyInterface_C_PlayerActionForEnemyReaction::PsychicObjLocation' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_PlayerActionForEnemyReaction, Dummy) == 0x000010, "Member 'BPI_EnemyInterface_C_PlayerActionForEnemyReaction::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.EnemyDataDrop
// 0x001C (0x001C - 0x0000)
struct BPI_EnemyInterface_C_EnemyDataDrop final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnDir;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrop;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_EnemyDataDrop) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_EnemyDataDrop");
static_assert(sizeof(BPI_EnemyInterface_C_EnemyDataDrop) == 0x00001C, "Wrong size on BPI_EnemyInterface_C_EnemyDataDrop");
static_assert(offsetof(BPI_EnemyInterface_C_EnemyDataDrop, SpawnLocation) == 0x000000, "Member 'BPI_EnemyInterface_C_EnemyDataDrop::SpawnLocation' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_EnemyDataDrop, SpawnDir) == 0x00000C, "Member 'BPI_EnemyInterface_C_EnemyDataDrop::SpawnDir' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_EnemyDataDrop, IsDrop) == 0x000018, "Member 'BPI_EnemyInterface_C_EnemyDataDrop::IsDrop' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemySpawn
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemySpawn final
{
public:
	bool                                          Spawn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemySpawn) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemySpawn");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemySpawn) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SetEnemySpawn");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemySpawn, Spawn) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemySpawn::Spawn' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemySpawn, Return) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemySpawn::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SpawnStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_SpawnStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SpawnStart) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SpawnStart");
static_assert(sizeof(BPI_EnemyInterface_C_SpawnStart) == 0x000001, "Wrong size on BPI_EnemyInterface_C_SpawnStart");
static_assert(offsetof(BPI_EnemyInterface_C_SpawnStart, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_SpawnStart::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsHideWeak
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsHideWeak final
{
public:
	bool                                          Param_IsHideWeak;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsHideWeak) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsHideWeak");
static_assert(sizeof(BPI_EnemyInterface_C_IsHideWeak) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsHideWeak");
static_assert(offsetof(BPI_EnemyInterface_C_IsHideWeak, Param_IsHideWeak) == 0x000000, "Member 'BPI_EnemyInterface_C_IsHideWeak::Param_IsHideWeak' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.ReturnStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_ReturnStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_ReturnStart) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_ReturnStart");
static_assert(sizeof(BPI_EnemyInterface_C_ReturnStart) == 0x000001, "Wrong size on BPI_EnemyInterface_C_ReturnStart");
static_assert(offsetof(BPI_EnemyInterface_C_ReturnStart, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_ReturnStart::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsAttacking final
{
public:
	bool                                          IsAttack;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsAttacking) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsAttacking");
static_assert(sizeof(BPI_EnemyInterface_C_IsAttacking) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsAttacking");
static_assert(offsetof(BPI_EnemyInterface_C_IsAttacking, IsAttack) == 0x000000, "Member 'BPI_EnemyInterface_C_IsAttacking::IsAttack' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetTargetKind
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_GetTargetKind final
{
public:
	ERSPartyPlayerKind                            TargetKind;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetTargetKind) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_GetTargetKind");
static_assert(sizeof(BPI_EnemyInterface_C_GetTargetKind) == 0x000001, "Wrong size on BPI_EnemyInterface_C_GetTargetKind");
static_assert(offsetof(BPI_EnemyInterface_C_GetTargetKind, TargetKind) == 0x000000, "Member 'BPI_EnemyInterface_C_GetTargetKind::TargetKind' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetBrainCore
// 0x0008 (0x0008 - 0x0000)
struct BPI_EnemyInterface_C_GetBrainCore final
{
public:
	class ABP_co2000Base_C*                       CoreObject;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetBrainCore) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_GetBrainCore");
static_assert(sizeof(BPI_EnemyInterface_C_GetBrainCore) == 0x000008, "Wrong size on BPI_EnemyInterface_C_GetBrainCore");
static_assert(offsetof(BPI_EnemyInterface_C_GetBrainCore, CoreObject) == 0x000000, "Member 'BPI_EnemyInterface_C_GetBrainCore::CoreObject' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyStateFloating
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyStateFloating final
{
public:
	bool                                          IsFloating;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyStateFloating) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyStateFloating");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyStateFloating) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyStateFloating");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyStateFloating, IsFloating) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyStateFloating::IsFloating' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.CalcCameraShake
// 0x0028 (0x0028 - 0x0000)
struct BPI_EnemyInterface_C_CalcCameraShake final
{
public:
	class UClass*                                 InputShakeClass;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputScale;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OutputShakeClass;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutputScale;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_CalcCameraShake) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_CalcCameraShake");
static_assert(sizeof(BPI_EnemyInterface_C_CalcCameraShake) == 0x000028, "Wrong size on BPI_EnemyInterface_C_CalcCameraShake");
static_assert(offsetof(BPI_EnemyInterface_C_CalcCameraShake, InputShakeClass) == 0x000000, "Member 'BPI_EnemyInterface_C_CalcCameraShake::InputShakeClass' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_CalcCameraShake, InputScale) == 0x000008, "Member 'BPI_EnemyInterface_C_CalcCameraShake::InputScale' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_CalcCameraShake, ShakeLocation) == 0x00000C, "Member 'BPI_EnemyInterface_C_CalcCameraShake::ShakeLocation' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_CalcCameraShake, OutputShakeClass) == 0x000018, "Member 'BPI_EnemyInterface_C_CalcCameraShake::OutputShakeClass' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_CalcCameraShake, OutputScale) == 0x000020, "Member 'BPI_EnemyInterface_C_CalcCameraShake::OutputScale' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyPressDownEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyPressDownEnd final
{
public:
	bool                                          Dammy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyPressDownEnd) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyPressDownEnd");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyPressDownEnd) == 0x000001, "Wrong size on BPI_EnemyInterface_C_SetEnemyPressDownEnd");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyPressDownEnd, Dammy) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyPressDownEnd::Dammy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.EndUniqueObjState
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_EndUniqueObjState final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_EndUniqueObjState) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_EndUniqueObjState");
static_assert(sizeof(BPI_EnemyInterface_C_EndUniqueObjState) == 0x000001, "Wrong size on BPI_EnemyInterface_C_EndUniqueObjState");
static_assert(offsetof(BPI_EnemyInterface_C_EndUniqueObjState, Dummy) == 0x000000, "Member 'BPI_EnemyInterface_C_EndUniqueObjState::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.StartUniqueObjState
// 0x0010 (0x0010 - 0x0000)
struct BPI_EnemyInterface_C_StartUniqueObjState final
{
public:
	class ABP_PsychicObjectBasic_C*               AttackObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_StartUniqueObjState) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_StartUniqueObjState");
static_assert(sizeof(BPI_EnemyInterface_C_StartUniqueObjState) == 0x000010, "Wrong size on BPI_EnemyInterface_C_StartUniqueObjState");
static_assert(offsetof(BPI_EnemyInterface_C_StartUniqueObjState, AttackObject) == 0x000000, "Member 'BPI_EnemyInterface_C_StartUniqueObjState::AttackObject' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_StartUniqueObjState, Dummy) == 0x000008, "Member 'BPI_EnemyInterface_C_StartUniqueObjState::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.CheckUniqueObjState
// 0x01C8 (0x01C8 - 0x0000)
struct BPI_EnemyInterface_C_CheckUniqueObjState final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_CheckUniqueObjState) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_CheckUniqueObjState");
static_assert(sizeof(BPI_EnemyInterface_C_CheckUniqueObjState) == 0x0001C8, "Wrong size on BPI_EnemyInterface_C_CheckUniqueObjState");
static_assert(offsetof(BPI_EnemyInterface_C_CheckUniqueObjState, HitResult) == 0x000000, "Member 'BPI_EnemyInterface_C_CheckUniqueObjState::HitResult' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_CheckUniqueObjState, Dummy) == 0x0001C0, "Member 'BPI_EnemyInterface_C_CheckUniqueObjState::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsUniqueObjState
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsUniqueObjState final
{
public:
	bool                                          ReturnState;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsUniqueObjState) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsUniqueObjState");
static_assert(sizeof(BPI_EnemyInterface_C_IsUniqueObjState) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsUniqueObjState");
static_assert(offsetof(BPI_EnemyInterface_C_IsUniqueObjState, ReturnState) == 0x000000, "Member 'BPI_EnemyInterface_C_IsUniqueObjState::ReturnState' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SwitchDispCore
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SwitchDispCore final
{
public:
	bool                                          DisplayOn;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SwitchDispCore) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SwitchDispCore");
static_assert(sizeof(BPI_EnemyInterface_C_SwitchDispCore) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SwitchDispCore");
static_assert(offsetof(BPI_EnemyInterface_C_SwitchDispCore, DisplayOn) == 0x000000, "Member 'BPI_EnemyInterface_C_SwitchDispCore::DisplayOn' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SwitchDispCore, Dummy) == 0x000001, "Member 'BPI_EnemyInterface_C_SwitchDispCore::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnStartCrashChance
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_OnStartCrashChance final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnStartCrashChance) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnStartCrashChance");
static_assert(sizeof(BPI_EnemyInterface_C_OnStartCrashChance) == 0x000001, "Wrong size on BPI_EnemyInterface_C_OnStartCrashChance");
static_assert(offsetof(BPI_EnemyInterface_C_OnStartCrashChance, bStart) == 0x000000, "Member 'BPI_EnemyInterface_C_OnStartCrashChance::bStart' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnEndCrashChance
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_OnEndCrashChance final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnEndCrashChance) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnEndCrashChance");
static_assert(sizeof(BPI_EnemyInterface_C_OnEndCrashChance) == 0x000001, "Wrong size on BPI_EnemyInterface_C_OnEndCrashChance");
static_assert(offsetof(BPI_EnemyInterface_C_OnEndCrashChance, bEnd) == 0x000000, "Member 'BPI_EnemyInterface_C_OnEndCrashChance::bEnd' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsPossibleTargetAttack
// 0x0010 (0x0010 - 0x0000)
struct BPI_EnemyInterface_C_IsPossibleTargetAttack final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsPossibleTargetAttack) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_IsPossibleTargetAttack");
static_assert(sizeof(BPI_EnemyInterface_C_IsPossibleTargetAttack) == 0x000010, "Wrong size on BPI_EnemyInterface_C_IsPossibleTargetAttack");
static_assert(offsetof(BPI_EnemyInterface_C_IsPossibleTargetAttack, Attacker) == 0x000000, "Member 'BPI_EnemyInterface_C_IsPossibleTargetAttack::Attacker' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_IsPossibleTargetAttack, bPossible) == 0x000008, "Member 'BPI_EnemyInterface_C_IsPossibleTargetAttack::bPossible' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsDisableLostAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsDisableLostAction final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsDisableLostAction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsDisableLostAction");
static_assert(sizeof(BPI_EnemyInterface_C_IsDisableLostAction) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsDisableLostAction");
static_assert(offsetof(BPI_EnemyInterface_C_IsDisableLostAction, bDisable) == 0x000000, "Member 'BPI_EnemyInterface_C_IsDisableLostAction::bDisable' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetCoreCollision
// 0x0008 (0x0008 - 0x0000)
struct BPI_EnemyInterface_C_GetCoreCollision final
{
public:
	class UDamagePartCollisionComponent*          CoreCollision;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetCoreCollision) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_GetCoreCollision");
static_assert(sizeof(BPI_EnemyInterface_C_GetCoreCollision) == 0x000008, "Wrong size on BPI_EnemyInterface_C_GetCoreCollision");
static_assert(offsetof(BPI_EnemyInterface_C_GetCoreCollision, CoreCollision) == 0x000000, "Member 'BPI_EnemyInterface_C_GetCoreCollision::CoreCollision' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnSpawnMoveStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_OnSpawnMoveStart final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnSpawnMoveStart) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnSpawnMoveStart");
static_assert(sizeof(BPI_EnemyInterface_C_OnSpawnMoveStart) == 0x000001, "Wrong size on BPI_EnemyInterface_C_OnSpawnMoveStart");
static_assert(offsetof(BPI_EnemyInterface_C_OnSpawnMoveStart, Dummy) == 0x000000, "Member 'BPI_EnemyInterface_C_OnSpawnMoveStart::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnEnemyBrainFieldResetAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReset;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction");
static_assert(sizeof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction) == 0x000002, "Wrong size on BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction, bMoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction, bReset) == 0x000001, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldResetAction::bReset' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnEnemyBrainFieldFinishWeapon
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon");
static_assert(sizeof(BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon) == 0x000002, "Wrong size on BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon, bMoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon, Dummy) == 0x000001, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldFinishWeapon::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnEnemyBrainFieldResetStatus
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus");
static_assert(sizeof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus) == 0x000002, "Wrong size on BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus, bMoveBrainField) == 0x000000, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus, Dummy) == 0x000001, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldResetStatus::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.OnEnemyBrainFieldCutChange
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange");
static_assert(sizeof(BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange) == 0x000001, "Wrong size on BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange");
static_assert(offsetof(BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange, Dummy) == 0x000000, "Member 'BPI_EnemyInterface_C_OnEnemyBrainFieldCutChange::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.ChangeAiType
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_ChangeAiType final
{
public:
	Enum_EnemyAiType                              Param_ChangeAiType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFailed;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_ChangeAiType) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_ChangeAiType");
static_assert(sizeof(BPI_EnemyInterface_C_ChangeAiType) == 0x000002, "Wrong size on BPI_EnemyInterface_C_ChangeAiType");
static_assert(offsetof(BPI_EnemyInterface_C_ChangeAiType, Param_ChangeAiType) == 0x000000, "Member 'BPI_EnemyInterface_C_ChangeAiType::Param_ChangeAiType' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_ChangeAiType, bFailed) == 0x000001, "Member 'BPI_EnemyInterface_C_ChangeAiType::bFailed' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.CheckChangeAiTypeForHpRate
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate");
static_assert(sizeof(BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate) == 0x000001, "Wrong size on BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate");
static_assert(offsetof(BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate, Failed) == 0x000000, "Member 'BPI_EnemyInterface_C_CheckChangeAiTypeForHpRate::Failed' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsChangeAiTypeAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_IsChangeAiTypeAction final
{
public:
	Enum_EnemyAiType                              InAiType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsChangeAiTypeAction) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsChangeAiTypeAction");
static_assert(sizeof(BPI_EnemyInterface_C_IsChangeAiTypeAction) == 0x000002, "Wrong size on BPI_EnemyInterface_C_IsChangeAiTypeAction");
static_assert(offsetof(BPI_EnemyInterface_C_IsChangeAiTypeAction, InAiType) == 0x000000, "Member 'BPI_EnemyInterface_C_IsChangeAiTypeAction::InAiType' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_IsChangeAiTypeAction, bPossible) == 0x000001, "Member 'BPI_EnemyInterface_C_IsChangeAiTypeAction::bPossible' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.em1200_ChangePhaseParamSetting
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting");
static_assert(sizeof(BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting) == 0x000001, "Wrong size on BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting");
static_assert(offsetof(BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting, Dummy) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1200_ChangePhaseParamSetting::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.em1210_AddPSychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               FlyObj;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj");
static_assert(sizeof(BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj) == 0x000010, "Wrong size on BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj");
static_assert(offsetof(BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj, FlyObj) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj::FlyObj' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj, Dummy) == 0x000008, "Member 'BPI_EnemyInterface_C_Em1210_AddPSychicFlyObj::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.StartReactionDilation
// 0x0003 (0x0003 - 0x0000)
struct BPI_EnemyInterface_C_StartReactionDilation final
{
public:
	uint8                                         ReactionKind;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddDamage;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_StartReactionDilation) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_StartReactionDilation");
static_assert(sizeof(BPI_EnemyInterface_C_StartReactionDilation) == 0x000003, "Wrong size on BPI_EnemyInterface_C_StartReactionDilation");
static_assert(offsetof(BPI_EnemyInterface_C_StartReactionDilation, ReactionKind) == 0x000000, "Member 'BPI_EnemyInterface_C_StartReactionDilation::ReactionKind' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_StartReactionDilation, AddDamage) == 0x000001, "Member 'BPI_EnemyInterface_C_StartReactionDilation::AddDamage' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_StartReactionDilation, Return) == 0x000002, "Member 'BPI_EnemyInterface_C_StartReactionDilation::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyDiscoveredOnceInterface
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface final
{
public:
	bool                                          bDiscoverd;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface, bDiscoverd) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyDiscoveredOnceInterface::bDiscoverd' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em0700_EnableInvalidDamage
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_Em0700_EnableInvalidDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em0700_EnableInvalidDamage) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_Em0700_EnableInvalidDamage");
static_assert(sizeof(BPI_EnemyInterface_C_Em0700_EnableInvalidDamage) == 0x000001, "Wrong size on BPI_EnemyInterface_C_Em0700_EnableInvalidDamage");
static_assert(offsetof(BPI_EnemyInterface_C_Em0700_EnableInvalidDamage, bEnable) == 0x000000, "Member 'BPI_EnemyInterface_C_Em0700_EnableInvalidDamage::bEnable' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em1400_StartDither
// 0x0008 (0x0008 - 0x0000)
struct BPI_EnemyInterface_C_Em1400_StartDither final
{
public:
	float                                         TotalDuration;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1400_StartDither) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_Em1400_StartDither");
static_assert(sizeof(BPI_EnemyInterface_C_Em1400_StartDither) == 0x000008, "Wrong size on BPI_EnemyInterface_C_Em1400_StartDither");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_StartDither, TotalDuration) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1400_StartDither::TotalDuration' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_StartDither, Return) == 0x000004, "Member 'BPI_EnemyInterface_C_Em1400_StartDither::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em1400_EndDither
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_Em1400_EndDither final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1400_EndDither) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_Em1400_EndDither");
static_assert(sizeof(BPI_EnemyInterface_C_Em1400_EndDither) == 0x000001, "Wrong size on BPI_EnemyInterface_C_Em1400_EndDither");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_EndDither, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1400_EndDither::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em1400_UpdateDither
// 0x000C (0x000C - 0x0000)
struct BPI_EnemyInterface_C_Em1400_UpdateDither final
{
public:
	EEasingFunc                                   EasingFunc;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88D0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSec;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1400_UpdateDither) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_Em1400_UpdateDither");
static_assert(sizeof(BPI_EnemyInterface_C_Em1400_UpdateDither) == 0x00000C, "Wrong size on BPI_EnemyInterface_C_Em1400_UpdateDither");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_UpdateDither, EasingFunc) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1400_UpdateDither::EasingFunc' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_UpdateDither, DeltaSec) == 0x000004, "Member 'BPI_EnemyInterface_C_Em1400_UpdateDither::DeltaSec' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_UpdateDither, Return) == 0x000008, "Member 'BPI_EnemyInterface_C_Em1400_UpdateDither::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em1400_SetSpawnTransform
// 0x0040 (0x0040 - 0x0000)
struct BPI_EnemyInterface_C_Em1400_SetSpawnTransform final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1400_SetSpawnTransform) == 0x000010, "Wrong alignment on BPI_EnemyInterface_C_Em1400_SetSpawnTransform");
static_assert(sizeof(BPI_EnemyInterface_C_Em1400_SetSpawnTransform) == 0x000040, "Wrong size on BPI_EnemyInterface_C_Em1400_SetSpawnTransform");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_SetSpawnTransform, SpawnTransform) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1400_SetSpawnTransform::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_SetSpawnTransform, Return) == 0x000030, "Member 'BPI_EnemyInterface_C_Em1400_SetSpawnTransform::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em1400_GetSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct BPI_EnemyInterface_C_Em1400_GetSpawnTransform final
{
public:
	struct FTransform                             SpawTransform;                                     // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1400_GetSpawnTransform) == 0x000010, "Wrong alignment on BPI_EnemyInterface_C_Em1400_GetSpawnTransform");
static_assert(sizeof(BPI_EnemyInterface_C_Em1400_GetSpawnTransform) == 0x000030, "Wrong size on BPI_EnemyInterface_C_Em1400_GetSpawnTransform");
static_assert(offsetof(BPI_EnemyInterface_C_Em1400_GetSpawnTransform, SpawTransform) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1400_GetSpawnTransform::SpawTransform' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsBrainFieldEnemyAlive
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsBrainFieldEnemyAlive final
{
public:
	bool                                          bEnemyAlive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsBrainFieldEnemyAlive) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsBrainFieldEnemyAlive");
static_assert(sizeof(BPI_EnemyInterface_C_IsBrainFieldEnemyAlive) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsBrainFieldEnemyAlive");
static_assert(offsetof(BPI_EnemyInterface_C_IsBrainFieldEnemyAlive, bEnemyAlive) == 0x000000, "Member 'BPI_EnemyInterface_C_IsBrainFieldEnemyAlive::bEnemyAlive' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsSwitchAttackCollisionInfo
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo final
{
public:
	bool                                          IsSwitch;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo");
static_assert(sizeof(BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo");
static_assert(offsetof(BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo, IsSwitch) == 0x000000, "Member 'BPI_EnemyInterface_C_IsSwitchAttackCollisionInfo::IsSwitch' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.SetEnemyUpDownWait
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_SetEnemyUpDownWait final
{
public:
	bool                                          DownWait;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_SetEnemyUpDownWait) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_SetEnemyUpDownWait");
static_assert(sizeof(BPI_EnemyInterface_C_SetEnemyUpDownWait) == 0x000002, "Wrong size on BPI_EnemyInterface_C_SetEnemyUpDownWait");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyUpDownWait, DownWait) == 0x000000, "Member 'BPI_EnemyInterface_C_SetEnemyUpDownWait::DownWait' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_SetEnemyUpDownWait, Dummy) == 0x000001, "Member 'BPI_EnemyInterface_C_SetEnemyUpDownWait::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyUpDownWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyUpDownWait final
{
public:
	bool                                          bUpDownWait;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyUpDownWait) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyUpDownWait");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyUpDownWait) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyUpDownWait");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyUpDownWait, bUpDownWait) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyUpDownWait::bUpDownWait' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.StartCriticalHitSlow
// 0x01C8 (0x01C8 - 0x0000)
struct BPI_EnemyInterface_C_StartCriticalHitSlow final
{
public:
	struct FHCHitResult                           InHitResult;                                       // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_StartCriticalHitSlow) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_StartCriticalHitSlow");
static_assert(sizeof(BPI_EnemyInterface_C_StartCriticalHitSlow) == 0x0001C8, "Wrong size on BPI_EnemyInterface_C_StartCriticalHitSlow");
static_assert(offsetof(BPI_EnemyInterface_C_StartCriticalHitSlow, InHitResult) == 0x000000, "Member 'BPI_EnemyInterface_C_StartCriticalHitSlow::InHitResult' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_StartCriticalHitSlow, Return) == 0x0001C0, "Member 'BPI_EnemyInterface_C_StartCriticalHitSlow::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.em1130_EnableWeak
// 0x0002 (0x0002 - 0x0000)
struct BPI_EnemyInterface_C_Em1130_EnableWeak final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em1130_EnableWeak) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_Em1130_EnableWeak");
static_assert(sizeof(BPI_EnemyInterface_C_Em1130_EnableWeak) == 0x000002, "Wrong size on BPI_EnemyInterface_C_Em1130_EnableWeak");
static_assert(offsetof(BPI_EnemyInterface_C_Em1130_EnableWeak, bEnable) == 0x000000, "Member 'BPI_EnemyInterface_C_Em1130_EnableWeak::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_Em1130_EnableWeak, Return) == 0x000001, "Member 'BPI_EnemyInterface_C_Em1130_EnableWeak::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetEnemySpawnConditionCheck
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_GetEnemySpawnConditionCheck final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_GetEnemySpawnConditionCheck) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_GetEnemySpawnConditionCheck");
static_assert(sizeof(BPI_EnemyInterface_C_GetEnemySpawnConditionCheck) == 0x000001, "Wrong size on BPI_EnemyInterface_C_GetEnemySpawnConditionCheck");
static_assert(offsetof(BPI_EnemyInterface_C_GetEnemySpawnConditionCheck, IsSpawnOK) == 0x000000, "Member 'BPI_EnemyInterface_C_GetEnemySpawnConditionCheck::IsSpawnOK' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.StartEnemyCrashVisionHitEffect
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect");
static_assert(sizeof(BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect) == 0x000001, "Wrong size on BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect");
static_assert(offsetof(BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_StartEnemyCrashVisionHitEffect::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.StartEnemyCrashVisionHitUniqueEffect
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect");
static_assert(sizeof(BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect) == 0x000001, "Wrong size on BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect");
static_assert(offsetof(BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_StartEnemyCrashVisionHitUniqueEffect::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.BindingCrashVisionEnemy
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_BindingCrashVisionEnemy final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_BindingCrashVisionEnemy) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_BindingCrashVisionEnemy");
static_assert(sizeof(BPI_EnemyInterface_C_BindingCrashVisionEnemy) == 0x000001, "Wrong size on BPI_EnemyInterface_C_BindingCrashVisionEnemy");
static_assert(offsetof(BPI_EnemyInterface_C_BindingCrashVisionEnemy, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_BindingCrashVisionEnemy::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.em8300_DeadBattleSimulator
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_Em8300_DeadBattleSimulator final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em8300_DeadBattleSimulator) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_Em8300_DeadBattleSimulator");
static_assert(sizeof(BPI_EnemyInterface_C_Em8300_DeadBattleSimulator) == 0x000001, "Wrong size on BPI_EnemyInterface_C_Em8300_DeadBattleSimulator");
static_assert(offsetof(BPI_EnemyInterface_C_Em8300_DeadBattleSimulator, Dummy) == 0x000000, "Member 'BPI_EnemyInterface_C_Em8300_DeadBattleSimulator::Dummy' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyRepop
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyRepop final
{
public:
	bool                                          Repop;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyRepop) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyRepop");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyRepop) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyRepop");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyRepop, Repop) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyRepop::Repop' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyActive
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyActive) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyActive");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyActive) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyActive");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyActive, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyActive::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsBossEnemy
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsBossEnemy final
{
public:
	bool                                          bBoss;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsBossEnemy) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsBossEnemy");
static_assert(sizeof(BPI_EnemyInterface_C_IsBossEnemy) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsBossEnemy");
static_assert(offsetof(BPI_EnemyInterface_C_IsBossEnemy, bBoss) == 0x000000, "Member 'BPI_EnemyInterface_C_IsBossEnemy::bBoss' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetDistanceToPlayer
// 0x0004 (0x0004 - 0x0000)
struct BPI_EnemyInterface_C_GetDistanceToPlayer final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetDistanceToPlayer) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_GetDistanceToPlayer");
static_assert(sizeof(BPI_EnemyInterface_C_GetDistanceToPlayer) == 0x000004, "Wrong size on BPI_EnemyInterface_C_GetDistanceToPlayer");
static_assert(offsetof(BPI_EnemyInterface_C_GetDistanceToPlayer, Distance) == 0x000000, "Member 'BPI_EnemyInterface_C_GetDistanceToPlayer::Distance' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct BPI_EnemyInterface_C_GetTargetDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetTargetDistance) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_GetTargetDistance");
static_assert(sizeof(BPI_EnemyInterface_C_GetTargetDistance) == 0x000004, "Wrong size on BPI_EnemyInterface_C_GetTargetDistance");
static_assert(offsetof(BPI_EnemyInterface_C_GetTargetDistance, Distance) == 0x000000, "Member 'BPI_EnemyInterface_C_GetTargetDistance::Distance' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetEnemySpawn
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_GetEnemySpawn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_GetEnemySpawn) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_GetEnemySpawn");
static_assert(sizeof(BPI_EnemyInterface_C_GetEnemySpawn) == 0x000001, "Wrong size on BPI_EnemyInterface_C_GetEnemySpawn");
static_assert(offsetof(BPI_EnemyInterface_C_GetEnemySpawn, Return) == 0x000000, "Member 'BPI_EnemyInterface_C_GetEnemySpawn::Return' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetHeightCheckFlag
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_GetHeightCheckFlag final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_GetHeightCheckFlag) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_GetHeightCheckFlag");
static_assert(sizeof(BPI_EnemyInterface_C_GetHeightCheckFlag) == 0x000001, "Wrong size on BPI_EnemyInterface_C_GetHeightCheckFlag");
static_assert(offsetof(BPI_EnemyInterface_C_GetHeightCheckFlag, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_GetHeightCheckFlag::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsFlyEnemyCheck
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsFlyEnemyCheck final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsFlyEnemyCheck) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsFlyEnemyCheck");
static_assert(sizeof(BPI_EnemyInterface_C_IsFlyEnemyCheck) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsFlyEnemyCheck");
static_assert(offsetof(BPI_EnemyInterface_C_IsFlyEnemyCheck, NewParam) == 0x000000, "Member 'BPI_EnemyInterface_C_IsFlyEnemyCheck::NewParam' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetBrainCrashSequence
// 0x0010 (0x0010 - 0x0000)
struct BPI_EnemyInterface_C_GetBrainCrashSequence final
{
public:
	bool                                          IsUnique;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88D1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Sequence;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetBrainCrashSequence) == 0x000008, "Wrong alignment on BPI_EnemyInterface_C_GetBrainCrashSequence");
static_assert(sizeof(BPI_EnemyInterface_C_GetBrainCrashSequence) == 0x000010, "Wrong size on BPI_EnemyInterface_C_GetBrainCrashSequence");
static_assert(offsetof(BPI_EnemyInterface_C_GetBrainCrashSequence, IsUnique) == 0x000000, "Member 'BPI_EnemyInterface_C_GetBrainCrashSequence::IsUnique' has a wrong offset!");
static_assert(offsetof(BPI_EnemyInterface_C_GetBrainCrashSequence, Sequence) == 0x000008, "Member 'BPI_EnemyInterface_C_GetBrainCrashSequence::Sequence' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetMoveToTargetAnim
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_GetMoveToTargetAnim final
{
public:
	EnemyMoveAnimKind                             MoveAnim;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetMoveToTargetAnim) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_GetMoveToTargetAnim");
static_assert(sizeof(BPI_EnemyInterface_C_GetMoveToTargetAnim) == 0x000001, "Wrong size on BPI_EnemyInterface_C_GetMoveToTargetAnim");
static_assert(offsetof(BPI_EnemyInterface_C_GetMoveToTargetAnim, MoveAnim) == 0x000000, "Member 'BPI_EnemyInterface_C_GetMoveToTargetAnim::MoveAnim' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.GetMainPlayerDistance
// 0x0004 (0x0004 - 0x0000)
struct BPI_EnemyInterface_C_GetMainPlayerDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EnemyInterface_C_GetMainPlayerDistance) == 0x000004, "Wrong alignment on BPI_EnemyInterface_C_GetMainPlayerDistance");
static_assert(sizeof(BPI_EnemyInterface_C_GetMainPlayerDistance) == 0x000004, "Wrong size on BPI_EnemyInterface_C_GetMainPlayerDistance");
static_assert(offsetof(BPI_EnemyInterface_C_GetMainPlayerDistance, Distance) == 0x000000, "Member 'BPI_EnemyInterface_C_GetMainPlayerDistance::Distance' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsRealThings
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsRealThings final
{
public:
	bool                                          bReal;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsRealThings) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsRealThings");
static_assert(sizeof(BPI_EnemyInterface_C_IsRealThings) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsRealThings");
static_assert(offsetof(BPI_EnemyInterface_C_IsRealThings, bReal) == 0x000000, "Member 'BPI_EnemyInterface_C_IsRealThings::bReal' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemySpawnNow
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemySpawnNow final
{
public:
	bool                                          SpawnNow;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemySpawnNow) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemySpawnNow");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemySpawnNow) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemySpawnNow");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemySpawnNow, SpawnNow) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemySpawnNow::SpawnNow' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsNotFindPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsNotFindPlayer final
{
public:
	bool                                          bNotFind;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsNotFindPlayer) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsNotFindPlayer");
static_assert(sizeof(BPI_EnemyInterface_C_IsNotFindPlayer) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsNotFindPlayer");
static_assert(offsetof(BPI_EnemyInterface_C_IsNotFindPlayer, bNotFind) == 0x000000, "Member 'BPI_EnemyInterface_C_IsNotFindPlayer::bNotFind' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.IsEnemyTickDisableCondition
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_IsEnemyTickDisableCondition final
{
public:
	bool                                          bDisableCondition;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_IsEnemyTickDisableCondition) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_IsEnemyTickDisableCondition");
static_assert(sizeof(BPI_EnemyInterface_C_IsEnemyTickDisableCondition) == 0x000001, "Wrong size on BPI_EnemyInterface_C_IsEnemyTickDisableCondition");
static_assert(offsetof(BPI_EnemyInterface_C_IsEnemyTickDisableCondition, bDisableCondition) == 0x000000, "Member 'BPI_EnemyInterface_C_IsEnemyTickDisableCondition::bDisableCondition' has a wrong offset!");

// Function BPI_EnemyInterface.BPI_EnemyInterface_C.Em8310_IsMaskMan
// 0x0001 (0x0001 - 0x0000)
struct BPI_EnemyInterface_C_Em8310_IsMaskMan final
{
public:
	bool                                          bMaskMan;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EnemyInterface_C_Em8310_IsMaskMan) == 0x000001, "Wrong alignment on BPI_EnemyInterface_C_Em8310_IsMaskMan");
static_assert(sizeof(BPI_EnemyInterface_C_Em8310_IsMaskMan) == 0x000001, "Wrong size on BPI_EnemyInterface_C_Em8310_IsMaskMan");
static_assert(offsetof(BPI_EnemyInterface_C_Em8310_IsMaskMan, bMaskMan) == 0x000000, "Member 'BPI_EnemyInterface_C_Em8310_IsMaskMan::bMaskMan' has a wrong offset!");

}

