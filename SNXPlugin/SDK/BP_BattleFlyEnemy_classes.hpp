#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleFlyEnemy

#include "Basic.hpp"

#include "RSBattleEnemy_classes.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleFlyEnemy.BP_BattleFlyEnemy_C
// 0x0060 (0x2290 - 0x2230)
class ABP_BattleFlyEnemy_C final : public ARSBattleEnemy_C
{
public:
	uint8                                         Pad_11D4[0x3];                                     // 0x2225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BattleFlyEnemy_C;                // 0x2228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_FlyEnemyPawnBase_C*                 FlyEnemyPawn;                                      // 0x2230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChildMove;                                         // 0x2238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D5[0x3];                                     // 0x2239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldLocation;                                       // 0x223C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlyState;                                        // 0x2248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFloating;                                        // 0x2249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D6[0x2];                                     // 0x224A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyLowerHeight;                                    // 0x224C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyHighestHeight;                                  // 0x2250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlyAdjust;                                         // 0x2254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D7[0x3];                                     // 0x2255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyModeChangeIgnoreSeconds;                        // 0x2258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyModeChangeIgnoreTime;                           // 0x225C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlyMoveSlopeRestore;                               // 0x2260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D8[0x3];                                     // 0x2261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyMoveSlopeRestoreSeconds;                        // 0x2264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotPow;                                            // 0x2268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyAdjustSpeed;                                    // 0x226C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             GroundCheckTimer;                                  // 0x2270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         GroundCheckTime;                                   // 0x227C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeforeFlyPawnZ;                                    // 0x2280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnyMoreDifferentHeightUpdate;                      // 0x2284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnyMoreDifferentLocationUpdatePawn;                // 0x2288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BattleFlyEnemy(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void MainTick(float DeltaSeconds, bool* Dummy);
	void SetFlying(bool Param_IsFlying);
	void FlyHeightAdjust(float DeltaSeconds, float FlyBaseZ);
	void InitializeHeight(float LowerHeight, float HightestHeight, bool* Dummy);
	void IsCanFlyModeChange(bool* IsFlyModeChange);
	void IsFlyHeightAdjust(bool* Param_IsFlyHeightAdjust);
	void LaunchDown(bool* IsEnd);
	void ScaleMaxSpeed(float Scale, class FName ClaimantName, bool* Result);
	void Initialize_Max_Speed(float MaxSpeed);
	bool SetActorAllTickEnabled(bool bEnabled);
	void SetFlyModeChangeIgnoreSeconds(float Param_FlyModeChangeIgnoreSeconds);
	void SetAreaOutActorLocation(const struct FVector& NewLocation, bool* Return);

	void GetEnemyBaseLocation(struct FVector* baseLocation) const;
	void IsFlyEnemyCheck(bool* NewParam) const;
	struct FVector GetCharacterMovementLocationSimple() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleFlyEnemy_C">();
	}
	static class ABP_BattleFlyEnemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleFlyEnemy_C>();
	}
};
static_assert(alignof(ABP_BattleFlyEnemy_C) == 0x000010, "Wrong alignment on ABP_BattleFlyEnemy_C");
static_assert(sizeof(ABP_BattleFlyEnemy_C) == 0x002290, "Wrong size on ABP_BattleFlyEnemy_C");
static_assert(offsetof(ABP_BattleFlyEnemy_C, UberGraphFrame_BP_BattleFlyEnemy_C) == 0x002228, "Member 'ABP_BattleFlyEnemy_C::UberGraphFrame_BP_BattleFlyEnemy_C' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyEnemyPawn) == 0x002230, "Member 'ABP_BattleFlyEnemy_C::FlyEnemyPawn' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, ChildMove) == 0x002238, "Member 'ABP_BattleFlyEnemy_C::ChildMove' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, OldLocation) == 0x00223C, "Member 'ABP_BattleFlyEnemy_C::OldLocation' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, IsFlyState) == 0x002248, "Member 'ABP_BattleFlyEnemy_C::IsFlyState' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, IsFloating) == 0x002249, "Member 'ABP_BattleFlyEnemy_C::IsFloating' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyLowerHeight) == 0x00224C, "Member 'ABP_BattleFlyEnemy_C::FlyLowerHeight' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyHighestHeight) == 0x002250, "Member 'ABP_BattleFlyEnemy_C::FlyHighestHeight' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyAdjust) == 0x002254, "Member 'ABP_BattleFlyEnemy_C::FlyAdjust' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyModeChangeIgnoreSeconds) == 0x002258, "Member 'ABP_BattleFlyEnemy_C::FlyModeChangeIgnoreSeconds' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyModeChangeIgnoreTime) == 0x00225C, "Member 'ABP_BattleFlyEnemy_C::FlyModeChangeIgnoreTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyMoveSlopeRestore) == 0x002260, "Member 'ABP_BattleFlyEnemy_C::FlyMoveSlopeRestore' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyMoveSlopeRestoreSeconds) == 0x002264, "Member 'ABP_BattleFlyEnemy_C::FlyMoveSlopeRestoreSeconds' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, RotPow) == 0x002268, "Member 'ABP_BattleFlyEnemy_C::RotPow' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, FlyAdjustSpeed) == 0x00226C, "Member 'ABP_BattleFlyEnemy_C::FlyAdjustSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, GroundCheckTimer) == 0x002270, "Member 'ABP_BattleFlyEnemy_C::GroundCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, GroundCheckTime) == 0x00227C, "Member 'ABP_BattleFlyEnemy_C::GroundCheckTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, BeforeFlyPawnZ) == 0x002280, "Member 'ABP_BattleFlyEnemy_C::BeforeFlyPawnZ' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, AnyMoreDifferentHeightUpdate) == 0x002284, "Member 'ABP_BattleFlyEnemy_C::AnyMoreDifferentHeightUpdate' has a wrong offset!");
static_assert(offsetof(ABP_BattleFlyEnemy_C, AnyMoreDifferentLocationUpdatePawn) == 0x002288, "Member 'ABP_BattleFlyEnemy_C::AnyMoreDifferentLocationUpdatePawn' has a wrong offset!");

}

