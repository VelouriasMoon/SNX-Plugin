#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CounterComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CounterComponent.BP_CounterComponent_C
// 0x0040 (0x0100 - 0x00C0)
class UBP_CounterComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHitCheckComponent*                     HitCheck;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckAnim;                                        // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCounterAnim;                                      // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAutoCounter;                                      // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAutoCounterSuccess;                               // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThinkCounter;                                     // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThinkCounterSuccess;                              // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCoolDown;                                         // 0x00DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0D[0x1];                                     // 0x00DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             CoolDownTimer;                                     // 0x00E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CounterRate;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRaidusRate;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeightRate;                             // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CooldownTimeMin;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CooldownTimeMax;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CounterComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Initialize(int32 Auto_counter_rate_in, float Auto_counter_radius_rate_in, float Auto_counter_half_height_rate_in, float Cool_down_time_min_in, float Cool_down_time_max_in);
	void Update();
	void Finalize();
	void CheckAutoCounter(bool* Return);
	void SetAutoCounter(bool On);
	void IsAutoCounterSuccess(bool* Return);
	void SetCounterAnimEnable();
	void IsCounterAnimEnable(bool* Return);
	void SetThinkCounter(bool Flag_in);
	void SetThinkCounterSuccess();
	void IsThinkCounterSuccess(bool* Return);
	void IsThinkCounter(bool* bCounter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CounterComponent_C">();
	}
	static class UBP_CounterComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CounterComponent_C>();
	}
};
static_assert(alignof(UBP_CounterComponent_C) == 0x000008, "Wrong alignment on UBP_CounterComponent_C");
static_assert(sizeof(UBP_CounterComponent_C) == 0x000100, "Wrong size on UBP_CounterComponent_C");
static_assert(offsetof(UBP_CounterComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_CounterComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, OwnerPlayer) == 0x0000C8, "Member 'UBP_CounterComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, HitCheck) == 0x0000D0, "Member 'UBP_CounterComponent_C::HitCheck' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bCheckAnim) == 0x0000D8, "Member 'UBP_CounterComponent_C::bCheckAnim' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bCounterAnim) == 0x0000D9, "Member 'UBP_CounterComponent_C::bCounterAnim' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bAutoCounter) == 0x0000DA, "Member 'UBP_CounterComponent_C::bAutoCounter' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bAutoCounterSuccess) == 0x0000DB, "Member 'UBP_CounterComponent_C::bAutoCounterSuccess' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bThinkCounter) == 0x0000DC, "Member 'UBP_CounterComponent_C::bThinkCounter' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bThinkCounterSuccess) == 0x0000DD, "Member 'UBP_CounterComponent_C::bThinkCounterSuccess' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, bCoolDown) == 0x0000DE, "Member 'UBP_CounterComponent_C::bCoolDown' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, CoolDownTimer) == 0x0000E0, "Member 'UBP_CounterComponent_C::CoolDownTimer' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, CounterRate) == 0x0000EC, "Member 'UBP_CounterComponent_C::CounterRate' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, CapsuleRaidusRate) == 0x0000F0, "Member 'UBP_CounterComponent_C::CapsuleRaidusRate' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, CapsuleHalfHeightRate) == 0x0000F4, "Member 'UBP_CounterComponent_C::CapsuleHalfHeightRate' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, CooldownTimeMin) == 0x0000F8, "Member 'UBP_CounterComponent_C::CooldownTimeMin' has a wrong offset!");
static_assert(offsetof(UBP_CounterComponent_C, CooldownTimeMax) == 0x0000FC, "Member 'UBP_CounterComponent_C::CooldownTimeMax' has a wrong offset!");

}

