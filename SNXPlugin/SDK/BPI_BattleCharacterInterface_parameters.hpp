#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCharacterInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "FNotifyAttackData_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCharacterVisibility
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetCharacterVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetCharacterVisibility) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_SetCharacterVisibility");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetCharacterVisibility) == 0x000002, "Wrong size on BPI_BattleCharacterInterface_C_SetCharacterVisibility");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetCharacterVisibility, bVisibility) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetCharacterVisibility::bVisibility' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetCharacterVisibility, bDummy) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_SetCharacterVisibility::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCounterWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetCounterWait final
{
public:
	bool                                          Wait_on_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetCounterWait) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_SetCounterWait");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetCounterWait) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_SetCounterWait");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetCounterWait, Wait_on_in) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetCounterWait::Wait_on_in' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsCounterSuccess
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsCounterSuccess final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsCounterSuccess) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsCounterSuccess");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsCounterSuccess) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsCounterSuccess");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsCounterSuccess, Success) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsCounterSuccess::Success' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.StartVisionFog
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_StartVisionFog final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_StartVisionFog) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_StartVisionFog");
static_assert(sizeof(BPI_BattleCharacterInterface_C_StartVisionFog) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_StartVisionFog");
static_assert(offsetof(BPI_BattleCharacterInterface_C_StartVisionFog, Dummy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_StartVisionFog::Dummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetActorStartPoint
// 0x000C (0x000C - 0x0000)
struct BPI_BattleCharacterInterface_C_GetActorStartPoint final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetActorStartPoint) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetActorStartPoint");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetActorStartPoint) == 0x00000C, "Wrong size on BPI_BattleCharacterInterface_C_GetActorStartPoint");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetActorStartPoint, StartLocation) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetActorStartPoint::StartLocation' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetNotifyAttackData
// 0x0014 (0x0014 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetNotifyAttackData final
{
public:
	struct FFNotifyAttackData                     Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetNotifyAttackData) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_SetNotifyAttackData");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetNotifyAttackData) == 0x000014, "Wrong size on BPI_BattleCharacterInterface_C_SetNotifyAttackData");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetNotifyAttackData, Data) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetNotifyAttackData::Data' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetNotifyAttackData, Dummy) == 0x000010, "Member 'BPI_BattleCharacterInterface_C_SetNotifyAttackData::Dummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetLockOnTargetInterface
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetLockOnTargetInterface final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetLockOnTargetInterface) == 0x000008, "Wrong alignment on BPI_BattleCharacterInterface_C_GetLockOnTargetInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetLockOnTargetInterface) == 0x000008, "Wrong size on BPI_BattleCharacterInterface_C_GetLockOnTargetInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetLockOnTargetInterface, TargetActor) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetLockOnTargetInterface::TargetActor' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetAccelerating
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetAccelerating) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_GetAccelerating");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetAccelerating) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_GetAccelerating");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetAccelerating, Accelerating) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetAccelerating::Accelerating' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetAccelerating
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dammy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetAccelerating) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_SetAccelerating");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetAccelerating) == 0x000002, "Wrong size on BPI_BattleCharacterInterface_C_SetAccelerating");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetAccelerating, Accelerating) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetAccelerating::Accelerating' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetAccelerating, Dammy) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_SetAccelerating::Dammy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.MeshFitGround
// 0x000C (0x000C - 0x0000)
struct BPI_BattleCharacterInterface_C_MeshFitGround final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleLimit;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndFit;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_MeshFitGround) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_MeshFitGround");
static_assert(sizeof(BPI_BattleCharacterInterface_C_MeshFitGround) == 0x00000C, "Wrong size on BPI_BattleCharacterInterface_C_MeshFitGround");
static_assert(offsetof(BPI_BattleCharacterInterface_C_MeshFitGround, InterpSpeed) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_MeshFitGround::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_MeshFitGround, AngleLimit) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_MeshFitGround::AngleLimit' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_MeshFitGround, bEndFit) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_MeshFitGround::bEndFit' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_MeshFitGround, bDummy) == 0x000009, "Member 'BPI_BattleCharacterInterface_C_MeshFitGround::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetMeshFitGroundCheckLocation
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckHeight;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation) == 0x000010, "Wrong size on BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation, Location) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation::Location' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation, CheckHeight) == 0x00000C, "Member 'BPI_BattleCharacterInterface_C_GetMeshFitGroundCheckLocation::CheckHeight' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.CancelMeshFitGround
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_CancelMeshFitGround final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_CancelMeshFitGround) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_CancelMeshFitGround");
static_assert(sizeof(BPI_BattleCharacterInterface_C_CancelMeshFitGround) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_CancelMeshFitGround");
static_assert(offsetof(BPI_BattleCharacterInterface_C_CancelMeshFitGround, bDummy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_CancelMeshFitGround::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.StartSASChance
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCharacterInterface_C_StartSASChance final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dammy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_StartSASChance) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_StartSASChance");
static_assert(sizeof(BPI_BattleCharacterInterface_C_StartSASChance) == 0x000008, "Wrong size on BPI_BattleCharacterInterface_C_StartSASChance");
static_assert(offsetof(BPI_BattleCharacterInterface_C_StartSASChance, Time) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_StartSASChance::Time' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_StartSASChance, Dammy) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_StartSASChance::Dammy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EndSASChance
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_EndSASChance final
{
public:
	bool                                          Dammy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_EndSASChance) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_EndSASChance");
static_assert(sizeof(BPI_BattleCharacterInterface_C_EndSASChance) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_EndSASChance");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EndSASChance, Dammy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_EndSASChance::Dammy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetHitStopInterface
// 0x0003 (0x0003 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetHitStopInterface final
{
public:
	EHCRestictedHitStopType                       HitStopType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCritical;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetHitStopInterface) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_SetHitStopInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetHitStopInterface) == 0x000003, "Wrong size on BPI_BattleCharacterInterface_C_SetHitStopInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetHitStopInterface, HitStopType) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetHitStopInterface::HitStopType' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetHitStopInterface, bCritical) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_SetHitStopInterface::bCritical' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetHitStopInterface, bDummy) == 0x000002, "Member 'BPI_BattleCharacterInterface_C_SetHitStopInterface::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.UpdateCameraDither
// 0x000C (0x000C - 0x0000)
struct BPI_BattleCharacterInterface_C_UpdateCameraDither final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDither;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B66[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraDither;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_UpdateCameraDither) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_UpdateCameraDither");
static_assert(sizeof(BPI_BattleCharacterInterface_C_UpdateCameraDither) == 0x00000C, "Wrong size on BPI_BattleCharacterInterface_C_UpdateCameraDither");
static_assert(offsetof(BPI_BattleCharacterInterface_C_UpdateCameraDither, DeltaSeconds) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_UpdateCameraDither::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_UpdateCameraDither, UseDither) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_UpdateCameraDither::UseDither' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_UpdateCameraDither, CameraDither) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_UpdateCameraDither::CameraDither' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCameraDither
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetCameraDither final
{
public:
	float                                         SetDitherValue;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetCameraDither) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_SetCameraDither");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetCameraDither) == 0x000008, "Wrong size on BPI_BattleCharacterInterface_C_SetCameraDither");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetCameraDither, SetDitherValue) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetCameraDither::SetDitherValue' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetCameraDither, Dummy) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_SetCameraDither::Dummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetUseCameraDither
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetUseCameraDither final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetUseCameraDither) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_SetUseCameraDither");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetUseCameraDither) == 0x000002, "Wrong size on BPI_BattleCharacterInterface_C_SetUseCameraDither");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetUseCameraDither, bUse) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetUseCameraDither::bUse' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetUseCameraDither, bDummy) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_SetUseCameraDither::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsCounterWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsCounterWait final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsCounterWait) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsCounterWait");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsCounterWait) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsCounterWait");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsCounterWait, bWait) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsCounterWait::bWait' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.RequestDie
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_RequestDie final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_RequestDie) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_RequestDie");
static_assert(sizeof(BPI_BattleCharacterInterface_C_RequestDie) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_RequestDie");
static_assert(offsetof(BPI_BattleCharacterInterface_C_RequestDie, bDummy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_RequestDie::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EndVisionFog
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_EndVisionFog final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_EndVisionFog) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_EndVisionFog");
static_assert(sizeof(BPI_BattleCharacterInterface_C_EndVisionFog) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_EndVisionFog");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EndVisionFog, Dummy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_EndVisionFog::Dummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EnableReactionCoefficient
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleCharacterInterface_C_EnableReactionCoefficient final
{
public:
	bool                                          bNormalAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychicAttack;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B67[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionSRate;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionLRate;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRate;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashRate;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAcceptAll;                                        // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_EnableReactionCoefficient");
static_assert(sizeof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient) == 0x000018, "Wrong size on BPI_BattleCharacterInterface_C_EnableReactionCoefficient");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, bNormalAttack) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::bNormalAttack' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, bPsychicAttack) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::bPsychicAttack' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, ReactionSRate) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::ReactionSRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, ReactionLRate) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::ReactionLRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, DownRate) == 0x00000C, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::DownRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, CrashRate) == 0x000010, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::CrashRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, bAcceptAll) == 0x000014, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::bAcceptAll' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EnableReactionCoefficient, Return) == 0x000015, "Member 'BPI_BattleCharacterInterface_C_EnableReactionCoefficient::Return' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.DisableReactionCoefficient
// 0x0003 (0x0003 - 0x0000)
struct BPI_BattleCharacterInterface_C_DisableReactionCoefficient final
{
public:
	bool                                          bNormalAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychicAttack;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_DisableReactionCoefficient) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_DisableReactionCoefficient");
static_assert(sizeof(BPI_BattleCharacterInterface_C_DisableReactionCoefficient) == 0x000003, "Wrong size on BPI_BattleCharacterInterface_C_DisableReactionCoefficient");
static_assert(offsetof(BPI_BattleCharacterInterface_C_DisableReactionCoefficient, bNormalAttack) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_DisableReactionCoefficient::bNormalAttack' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_DisableReactionCoefficient, bPsychicAttack) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_DisableReactionCoefficient::bPsychicAttack' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_DisableReactionCoefficient, Return) == 0x000002, "Member 'BPI_BattleCharacterInterface_C_DisableReactionCoefficient::Return' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SpawnSequencerEffectInterface
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class FName                                   AttachName;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface) == 0x000010, "Wrong alignment on BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface) == 0x000050, "Wrong size on BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface, ClaimantName) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface, Template) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface::Template' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface, Transform) == 0x000010, "Member 'BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface::Transform' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface, AttachName) == 0x000040, "Member 'BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface::AttachName' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface, Return) == 0x000048, "Member 'BPI_BattleCharacterInterface_C_SpawnSequencerEffectInterface::Return' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EndSequencerEffectInterface
// 0x000C (0x000C - 0x0000)
struct BPI_BattleCharacterInterface_C_EndSequencerEffectInterface final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_EndSequencerEffectInterface) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_EndSequencerEffectInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_EndSequencerEffectInterface) == 0x00000C, "Wrong size on BPI_BattleCharacterInterface_C_EndSequencerEffectInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EndSequencerEffectInterface, ClaimantName) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_EndSequencerEffectInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_EndSequencerEffectInterface, Return) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_EndSequencerEffectInterface::Return' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.UpdateSequencerEffectInterface
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface) == 0x000008, "Wrong size on BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface, DeltaSec) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface::DeltaSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface, Return) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_UpdateSequencerEffectInterface::Return' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsInScreen
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsInScreen final
{
public:
	bool                                          InScreen;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsInScreen) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsInScreen");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsInScreen) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsInScreen");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsInScreen, InScreen) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsInScreen::InScreen' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.Get Event Bind Mesh Component
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component final
{
public:
	TArray<class UStaticMeshComponent*>           MeshComponent;                                     // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component) == 0x000008, "Wrong alignment on BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component");
static_assert(sizeof(BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component) == 0x000010, "Wrong size on BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component");
static_assert(offsetof(BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component, MeshComponent) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_Get_Event_Bind_Mesh_Component::MeshComponent' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.RegisterBrainFieldNormalTransform
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform final
{
public:
	struct FTransform                             InNormalTransform;                                 // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform) == 0x000010, "Wrong alignment on BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform");
static_assert(sizeof(BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform) == 0x000040, "Wrong size on BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform");
static_assert(offsetof(BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform, InNormalTransform) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform::InNormalTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform, Return) == 0x000030, "Member 'BPI_BattleCharacterInterface_C_RegisterBrainFieldNormalTransform::Return' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.CheckNoDamagePopUpFromAttacker
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker final
{
public:
	bool                                          bNoPopUp;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker");
static_assert(sizeof(BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker");
static_assert(offsetof(BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker, bNoPopUp) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_CheckNoDamagePopUpFromAttacker::bNoPopUp' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetGroupIDInterface
// 0x000C (0x000C - 0x0000)
struct BPI_BattleCharacterInterface_C_GetGroupIDInterface final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B68[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupID;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SubGroupID;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetGroupIDInterface) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetGroupIDInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetGroupIDInterface) == 0x00000C, "Wrong size on BPI_BattleCharacterInterface_C_GetGroupIDInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetGroupIDInterface, bSuccess) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetGroupIDInterface::bSuccess' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetGroupIDInterface, GroupID) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_GetGroupIDInterface::GroupID' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetGroupIDInterface, SubGroupID) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_GetGroupIDInterface::SubGroupID' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.StopMovementImmediately
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_StopMovementImmediately final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_StopMovementImmediately) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_StopMovementImmediately");
static_assert(sizeof(BPI_BattleCharacterInterface_C_StopMovementImmediately) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_StopMovementImmediately");
static_assert(offsetof(BPI_BattleCharacterInterface_C_StopMovementImmediately, bDummy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_StopMovementImmediately::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetPsychicObjectThrowParameter
// 0x0024 (0x0024 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter final
{
public:
	bool                                          Apply;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B69[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Directshot_throw_speed;                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Directshot_homing_speed;                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combo_throw_speed;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combo_homing_speed;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainfield_throw_speed;                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainfield_homing_speed;                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intercept_throw_speed;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intercept_homing_speed;                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter) == 0x000024, "Wrong size on BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Apply) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Apply' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Directshot_throw_speed) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Directshot_throw_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Directshot_homing_speed) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Directshot_homing_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Combo_throw_speed) == 0x00000C, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Combo_throw_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Combo_homing_speed) == 0x000010, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Combo_homing_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, brainfield_throw_speed) == 0x000014, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::brainfield_throw_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, brainfield_homing_speed) == 0x000018, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::brainfield_homing_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Intercept_throw_speed) == 0x00001C, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Intercept_throw_speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter, Intercept_homing_speed) == 0x000020, "Member 'BPI_BattleCharacterInterface_C_GetPsychicObjectThrowParameter::Intercept_homing_speed' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetCharacterSkillTableWithReplace
// 0x0100 (0x0100 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace final
{
public:
	class UDataTable*                             OrgTable;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillCommonInfo;                                   // 0x0010(0x00F0)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace) == 0x000008, "Wrong alignment on BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace) == 0x000100, "Wrong size on BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace, OrgTable) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace::OrgTable' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace, SkillName) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace::SkillName' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace, SkillCommonInfo) == 0x000010, "Member 'BPI_BattleCharacterInterface_C_GetCharacterSkillTableWithReplace::SkillCommonInfo' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.ReserveCrashVisionShockWave
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave final
{
public:
	float                                         EffectDelayTime;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave");
static_assert(sizeof(BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave) == 0x000008, "Wrong size on BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave");
static_assert(offsetof(BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave, EffectDelayTime) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave::EffectDelayTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave, bDummy) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_ReserveCrashVisionShockWave::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetIgnoreVisionSimulatorScore
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore");
static_assert(sizeof(BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore) == 0x000002, "Wrong size on BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore, bIgnore) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore::bIgnore' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore, bDummy) == 0x000001, "Member 'BPI_BattleCharacterInterface_C_SetIgnoreVisionSimulatorScore::bDummy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.isForceCritical
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsForceCritical final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsForceCritical) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsForceCritical");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsForceCritical) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsForceCritical");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsForceCritical, bResult) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsForceCritical::bResult' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetTeam final
{
public:
	ETeamKind                                     Team;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetTeam) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_GetTeam");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetTeam) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_GetTeam");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetTeam, Team) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetTeam::Team' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsPlayer final
{
public:
	bool                                          bPlayer;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsPlayer) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsPlayer");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsPlayer) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsPlayer");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsPlayer, bPlayer) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsPlayer::bPlayer' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsEnemy
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsEnemy final
{
public:
	bool                                          bEnemy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsEnemy) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsEnemy");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsEnemy) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsEnemy");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnemy, bEnemy) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsEnemy::bEnemy' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsMetalMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsMetalMode final
{
public:
	bool                                          bMetal;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsMetalMode) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsMetalMode");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsMetalMode) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsMetalMode");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsMetalMode, bMetal) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsMetalMode::bMetal' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetWeakTargetPoint
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetWeakTargetPoint final
{
public:
	struct FVector                                AttackerPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetWeakTargetPoint) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetWeakTargetPoint");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetWeakTargetPoint) == 0x000018, "Wrong size on BPI_BattleCharacterInterface_C_GetWeakTargetPoint");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetWeakTargetPoint, AttackerPos) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetWeakTargetPoint::AttackerPos' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetWeakTargetPoint, Point) == 0x00000C, "Member 'BPI_BattleCharacterInterface_C_GetWeakTargetPoint::Point' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetTopTargetPoint
// 0x000C (0x000C - 0x0000)
struct BPI_BattleCharacterInterface_C_GetTopTargetPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetTopTargetPoint) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetTopTargetPoint");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetTopTargetPoint) == 0x00000C, "Wrong size on BPI_BattleCharacterInterface_C_GetTopTargetPoint");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetTopTargetPoint, Point) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetTopTargetPoint::Point' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetWeakUIPoint
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetWeakUIPoint final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetWeakUIPoint) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetWeakUIPoint");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetWeakUIPoint) == 0x000010, "Wrong size on BPI_BattleCharacterInterface_C_GetWeakUIPoint");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetWeakUIPoint, Param_Index) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetWeakUIPoint::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetWeakUIPoint, Point) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_GetWeakUIPoint::Point' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetWeakTargetComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetWeakTargetComponent final
{
public:
	class USceneComponent*                        WeakComponent;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetWeakTargetComponent) == 0x000008, "Wrong alignment on BPI_BattleCharacterInterface_C_GetWeakTargetComponent");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetWeakTargetComponent) == 0x000008, "Wrong size on BPI_BattleCharacterInterface_C_GetWeakTargetComponent");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetWeakTargetComponent, WeakComponent) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetWeakTargetComponent::WeakComponent' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetNotifyAttackData
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetNotifyAttackData final
{
public:
	struct FFNotifyAttackData                     Data;                                              // 0x0000(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetNotifyAttackData) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetNotifyAttackData");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetNotifyAttackData) == 0x000010, "Wrong size on BPI_BattleCharacterInterface_C_GetNotifyAttackData");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetNotifyAttackData, Data) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetNotifyAttackData::Data' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.CanTakeBrainField
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_CanTakeBrainField final
{
public:
	bool                                          CanTake;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_CanTakeBrainField) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_CanTakeBrainField");
static_assert(sizeof(BPI_BattleCharacterInterface_C_CanTakeBrainField) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_CanTakeBrainField");
static_assert(offsetof(BPI_BattleCharacterInterface_C_CanTakeBrainField, CanTake) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_CanTakeBrainField::CanTake' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsHitWeak_ChangeDefaultEffect
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect final
{
public:
	bool                                          ChangeDefault;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect, ChangeDefault) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsHitWeak_ChangeDefaultEffect::ChangeDefault' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsEnableSlashEffect
// 0x01C8 (0x01C8 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsEnableSlashEffect final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bEnable;                                           // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsEnableSlashEffect) == 0x000008, "Wrong alignment on BPI_BattleCharacterInterface_C_IsEnableSlashEffect");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsEnableSlashEffect) == 0x0001C8, "Wrong size on BPI_BattleCharacterInterface_C_IsEnableSlashEffect");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableSlashEffect, HitResult) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsEnableSlashEffect::HitResult' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableSlashEffect, bEnable) == 0x0001C0, "Member 'BPI_BattleCharacterInterface_C_IsEnableSlashEffect::bEnable' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsBrainCrashAccessInterface
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface, bAccess) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsBrainCrashAccessInterface::bAccess' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetAutoAimRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetAutoAimRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetAutoAimRate) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetAutoAimRate");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetAutoAimRate) == 0x000004, "Wrong size on BPI_BattleCharacterInterface_C_GetAutoAimRate");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetAutoAimRate, Rate) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetAutoAimRate::Rate' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetCharacterLV
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetCharacterLV final
{
public:
	int32                                         LV;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetCharacterLV) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_GetCharacterLV");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetCharacterLV) == 0x000004, "Wrong size on BPI_BattleCharacterInterface_C_GetCharacterLV");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetCharacterLV, LV) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetCharacterLV::LV' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsEnableReactionCoefficient
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B6A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionSRate;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionLRate;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRate;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashRate;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAcceptAll;                                        // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient) == 0x000004, "Wrong alignment on BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient) == 0x000018, "Wrong size on BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient, bEnable) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient, ReactionSRate) == 0x000004, "Member 'BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient::ReactionSRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient, ReactionLRate) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient::ReactionLRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient, DownRate) == 0x00000C, "Member 'BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient::DownRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient, CrashRate) == 0x000010, "Member 'BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient::CrashRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient, bAcceptAll) == 0x000014, "Member 'BPI_BattleCharacterInterface_C_IsEnableReactionCoefficient::bAcceptAll' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsAttackerMainPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCharacterInterface_C_IsAttackerMainPlayer final
{
public:
	bool                                          bMainPlayer;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_IsAttackerMainPlayer) == 0x000001, "Wrong alignment on BPI_BattleCharacterInterface_C_IsAttackerMainPlayer");
static_assert(sizeof(BPI_BattleCharacterInterface_C_IsAttackerMainPlayer) == 0x000001, "Wrong size on BPI_BattleCharacterInterface_C_IsAttackerMainPlayer");
static_assert(offsetof(BPI_BattleCharacterInterface_C_IsAttackerMainPlayer, bMainPlayer) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_IsAttackerMainPlayer::bMainPlayer' has a wrong offset!");

// Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetCharacterReplaceSkillTable
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable final
{
public:
	class UDataTable*                             Original;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             SkillTable;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable) == 0x000008, "Wrong alignment on BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable");
static_assert(sizeof(BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable) == 0x000010, "Wrong size on BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable, Original) == 0x000000, "Member 'BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable::Original' has a wrong offset!");
static_assert(offsetof(BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable, SkillTable) == 0x000008, "Member 'BPI_BattleCharacterInterface_C_GetCharacterReplaceSkillTable::SkillTable' has a wrong offset!");

}

