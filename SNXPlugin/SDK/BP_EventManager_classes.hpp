#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FEventTriggerCommandData_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "FCapCharaBGData_structs.hpp"
#include "FRenderTargetData_structs.hpp"
#include "FEventInitSettingData_structs.hpp"
#include "MovieScene_structs.hpp"
#include "FEventCaptureFuncData_structs.hpp"
#include "FEventHiddenActorForTagNameData_structs.hpp"
#include "UMG_structs.hpp"
#include "ECharaCapChangeSpeedType_structs.hpp"
#include "ERenderTargetType_structs.hpp"
#include "EShadaAnimeType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventManager.BP_EventManager_C
// 0x2A58 (0x2DA0 - 0x0348)
class ABP_EventManager_C final : public AEventManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_OptimizeSwitchMaterialPlayer_C*    BPC_OptimizeSwitchMaterialStaticFace;              // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSFrameGrabberComponent*               RSFrameGrabberToStatic;                            // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSFrameGrabberComponent*               RSFrameGrabberToDynamic;                           // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSSceneCaptureComponent2D*             SeamlessCaptureComponent2D;                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_EventBindingPlayers_C*             BPC_EventBindingPlayers;                           // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSSceneCaptureComponent2D*             StaticCutSceneCapture;                             // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EventAssetPoolComponent_C*          BP_EventAssetPoolComponent;                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             CaptureDirectionalLightComp;                       // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicToInGameInterp_Interp_CE5F0FB44F167C0C66498F890F64A58A; // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DynamicToInGameInterp__Direction_CE5F0FB44F167C0C66498F890F64A58A; // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A3[0x3];                                     // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DynamicToInGameInterp;                             // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGScreenFadeTimeline_Alpha_C3870689477E87E3CCC458AA92AEB318; // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BGScreenFadeTimeline__Direction_C3870689477E87E3CCC458AA92AEB318; // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A4[0x3];                                     // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BGScreenFadeTimeline;                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StopStreamPPTimeline_Track_8062AEA34AD8F2E88D0C1BBA12F24C12; // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StopStreamPPTimeline__Direction_8062AEA34AD8F2E88D0C1BBA12F24C12; // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A5[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StopStreamPPTimeline;                              // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PPMMoveBlurTimeline_Rate_9E44A655488D3CA7FA5FE0AC19441E01; // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PPMMoveBlurTimeline__Direction_9E44A655488D3CA7FA5FE0AC19441E01; // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A6[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PPMMoveBlurTimeline;                               // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionStaticToInGameTimeline_Track_98F59090477C1504072378B2FFFCF5A0; // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TransitionStaticToInGameTimeline__Direction_98F59090477C1504072378B2FFFCF5A0; // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A7[0x3];                                     // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TransitionStaticToInGameTimeline;                  // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ED_Finish;                                         // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ED_PlayStart;                                      // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUserWidget*                            BGScreenWidget;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEventType                                    EventType;                                         // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A8[0x7];                                     // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APostProcessVolume*>             RestorePPV;                                        // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABPCaptureActor_C*>              CaptureActorList;                                  // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UREDLuaScriptComponent*                 REDLuaScriptComponent;                             // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       CineCameraActor;                                   // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerHiddenFlag;                                  // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A9[0x4];                                     // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABPSpecialCaptureActor_C*>       SpecialCaptureActorList;                           // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 SpecialStaticNodeActor;                            // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         EventActorList;                                    // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MoveBlurMaterial;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AA[0x8];                                     // 0x0488(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   DefaultSpecialCaptureActorPPSetting;               // 0x0490(0x0780)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class ABP_CaptureBG_C*                        CaptureBG;                                         // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRunLua;                                          // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32AB[0x7];                                     // 0x0C19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   DefaultBGCaptureActorPPSetting;                    // 0x0C20(0x0780)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<struct FTransform>                     LastSpecialCaptureCameraTransform;                 // 0x13A0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     LastSpecialCapturePlayerTransform;                 // 0x13B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         StaticToInGameFinalSpecialIndex;                   // 0x13C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StaticToInGameCameraLocation;                      // 0x13C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             StaticToInGameBeforeCameraTransform;               // 0x13D0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             StaticToInGamePlayerTransform;                     // 0x1400(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseStaticToInGameCameraLocation;                   // 0x1430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseStaticToInGamePlayerTransform;                  // 0x1431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32AC[0x6];                                     // 0x1432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraActor*                           StaticToInGameCamera;                              // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStaticToInGame;                                 // 0x1440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32AD[0xF];                                     // 0x1441(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransitionStartCameraTransform;                    // 0x1450(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TransitionStartCameraFOV;                          // 0x1480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AE[0x4];                                     // 0x1484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LightDataTable;                                    // 0x1488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventSettings_C*                    EventSettings;                                     // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CaptureSkyMesh;                                    // 0x1498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 StaticEventSkyMesh;                                // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisRightX;                                        // 0x14A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisRightY;                                        // 0x14AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRotate;                                         // 0x14B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraDistance;                                    // 0x14B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lua;                                               // 0x14B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32AF[0x7];                                     // 0x14B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BGScreenWidgetClassAsset;                          // 0x14C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 BGScreenWidgetClassObject;                         // 0x14E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   BossNameWidgetClassAsset;                          // 0x14F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CharaNameWidgetClassAsset;                         // 0x1518(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         StaticCutBGParticleAsset;                          // 0x1540(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 BossNameWidgetClassObject;                         // 0x1568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CharaNameWidgetClassObject;                        // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        StaticCutBGParticleObject;                         // 0x1578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             StaticCapSkyAsset;                                 // 0x1580(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMesh*                            StaticCapSkyObject;                                // 0x15A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              VignetteMaskDefaultTextureAsset;                   // 0x15B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture2D*                             VignetteMaskDefualtTextureObject;                  // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              GlitchDefaultTextureAsset;                         // 0x15E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   BP_StaticSkyClassAsset;                            // 0x1608(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture2D*                             GlitchDefualtTextureObject;                        // 0x1630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BP_StaticSkyClass;                                 // 0x1638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   BPFaceCapSkyClassAsset;                            // 0x1640(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   BP_SpecialStaticNodeActorClassAsset;               // 0x1668(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 BPFaceCapSkyClass;                                 // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BP_SpecialStaticNodeActorClass;                    // 0x1698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequence>           AS_ec9999_001_Default_Asset;                       // 0x16A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequence*                          AS_ec9999_001_Default_Object;                      // 0x16C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      SepiaMaterialAsset;                                // 0x16D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMScreenLightAsset;                        // 0x16F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      MonoMaterialAsset;                                 // 0x1720(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      VignetteMaterialAsset;                             // 0x1748(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      GlitchMaterialAsset;                               // 0x1770(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      LinearToSRGBMaterialAsset;                         // 0x1798(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_RedStringMeshSpawner_C*>     RedStringsList;                                    // 0x17C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CurrentRedStringIndex;                             // 0x17D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxRedString;                                      // 0x17D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStaticEventType                              StaticEventType;                                   // 0x17D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B0[0x7];                                     // 0x17D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ShowDestinationActor_C*>     ArrayShowDestinationActor;                         // 0x17E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnChangeDestinationActor;                          // 0x17F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class UMaterialInterface>      MoveBlurMaterialAsset;                             // 0x1800(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     MoveBlurMaterialObject;                            // 0x1828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CaptureDataTable;                                  // 0x1830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class USkeletalMesh*>       CaptureDataTableCharaMeshObject;                   // 0x1838(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             TextureDataTable;                                  // 0x1888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UTexture*>            TextureDataTableTextureObject;                     // 0x1890(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class UManaTexture*>        MovieTextureDataTableMovieTextureObject;           // 0x18E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             MovieTextureDataTable;                             // 0x1930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            BossNameWidget;                                    // 0x1938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CharaNameWidget;                                   // 0x1940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStaticToInGameBeforeCameraTransform;            // 0x1948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B1[0x3];                                     // 0x1949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticToInGameBeforeCameraFOV;                     // 0x194C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CaptureCineCameraActor_C*           CutSceneSequencerCamera;                           // 0x1950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMAcceleratorAsset;                        // 0x1958(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMSeeThroughAsset;                         // 0x1980(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMVisionFogAsset;                          // 0x19A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMRadialBlurAsset;                         // 0x19D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_SC_BG_C*                            BP_SC_BG;                                          // 0x19F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EventBoardParamCurveTimeline;                      // 0x1A00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTextureRenderTarget2D*                 SavedRenderTarget;                                 // 0x1A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinishSequencer;                                 // 0x1A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B2[0x7];                                     // 0x1A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFRenderTargetData>             FaceRenderTargetList;                              // 0x1A20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FFRenderTargetData>             SequencerRenderTargetList;                         // 0x1A30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FFRenderTargetData                     CrossFadeFaceRT;                                   // 0x1A40(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFRenderTargetData                     CrossFadeSeqRT;                                    // 0x1A58(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  ActiveCapturePPMs;                                 // 0x1A70(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTransform                             CameraActorLocation;                               // 0x1A80(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCameraComponent*                       NewVar_3;                                          // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StoreIsBlendCamera;                                // 0x1AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B3[0x3];                                     // 0x1AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCaptureActorIndex;                          // 0x1ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpeak;                                           // 0x1AC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B4[0x7];                                     // 0x1AC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ShowDestinationData;                               // 0x1AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NewStaticNodeActor_C*>       NewStaticActorList;                                // 0x1AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_NewStaticNodeActor_C*               CurrentNewStaticNode;                              // 0x1AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_NewStaticNodeActor_C*               BeforeNewStaticNode;                               // 0x1AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEventInitSettingData                 CurrentEventSettingData;                           // 0x1AF0(0x0006)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B5[0x2];                                     // 0x1AF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  PostProcessSequencer;                              // 0x1AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSpeakerActorIndex;                          // 0x1B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B6[0x4];                                     // 0x1B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABPCaptureActor_C*>              EveryFrameCaptureActorList;                        // 0x1B08(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             CapCharaBGDataTable;                               // 0x1B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFCapCharaBGData>               LeftCharaBGDataList;                               // 0x1B20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FFCapCharaBGData>               RightCharaBGDataList;                              // 0x1B30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FFCapCharaBGData>               CenterCharaBGDataList;                             // 0x1B40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMovieSceneObjectBindingID             CameraBindingID;                                   // 0x1B50(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UShowDestinationDBAsset*                ShowDestinationDB;                                 // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnBeforeChangeProgressID;                          // 0x1B70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnAfterChangeProgressID;                           // 0x1B80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsDynamicSeamlessInGame;                           // 0x1B90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B7[0x7];                                     // 0x1B91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMScreenMask;                              // 0x1B98(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       SoftFocusMaterialAsset;                            // 0x1BC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       HeartBeatMaterialAsset;                            // 0x1BE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UseSequencerStaticToInGame;                        // 0x1C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B8[0x3];                                     // 0x1C11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InGameCapActorIndex;                               // 0x1C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundPressureThreshold;                            // 0x1C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B9[0x4];                                     // 0x1C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       AlphaMovieMaterialAsset;                           // 0x1C20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       DiffusionMaterialAsset;                            // 0x1C48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FFEventCaptureFuncData>         SequenceCaptureFuncList;                           // 0x1C70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         RegistPsychicObjectList;                           // 0x1C80(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMFishEyeAsset;                            // 0x1C90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsCallOnSequencerFinished;                         // 0x1CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32BA[0x7];                                     // 0x1CB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPostProcessSettings>           CaptureAddPPS;                                     // 0x1CC0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<int32>                                 CaptureAddPPSHandle;                               // 0x1CD0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         CaptureAddPPSHandleIndex;                          // 0x1CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_32BB[0x4];                                     // 0x1CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMScreenMaskAfterDOF;                      // 0x1CE8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_Event3DWidgetActor_C*>       ThreeDWidgetList;                                  // 0x1D10(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UWB_ui_BrainMes_C*                      WB_ui_BrainMes;                                    // 0x1D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WB_UI_BrainMesClass;                               // 0x1D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   WBUIBrainMesSoftClass;                             // 0x1D30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMGradScreenMask;                          // 0x1D58(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CapturePPMGradScreenMaskAfterDOF;                  // 0x1D80(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      KaiiFilterMaterialAsset;                           // 0x1DA8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsCalledStartBlendPlayerCamera;                    // 0x1DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32BC[0x7];                                     // 0x1DD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CaptureCineCameraActor_C*           CutSceneSequencerBlendCamera;                      // 0x1DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ActorVisibleChangeBase_C*           _ActorVisibleChange;                               // 0x1DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       BothSideLimMaterialAsset;                          // 0x1DE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             PlayObstructActionTimer;                           // 0x1E10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ObstructActionCount;                               // 0x1E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartCameraCutDynamic;                           // 0x1E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsValidMessageVoice;                               // 0x1E21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32BD[0x6];                                     // 0x1E22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UMaterialInstance>> LightUpMaterialAsset;                              // 0x1E28(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       FuturePredictionMaterialAsset;                     // 0x1E38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsResetNewStaticNode;                              // 0x1E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32BE[0xF];                                     // 0x1E61(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraSocketTransform;                             // 0x1E70(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<TSoftObjectPtr<class UMaterialInstance>> FieldBlurMaterialAsset;                            // 0x1EA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       LightShaftMaterialAsset;                           // 0x1EB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       OutlineAfterimageMaterialAsset;                    // 0x1ED8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FPostProcessSettings                   DynamicSequencerCameraPPS;                         // 0x1F00(0x0780)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UMaterialInterface*                     LinearToSRGBMaterial;                              // 0x2680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFEventTriggerCommandData>      EventTriggerCommandDataArray;                      // 0x2688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       ShadowmapMaterialAsset;                            // 0x2698(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               BindEnemyList;                                     // 0x26C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       StreamMaterialAsset;                               // 0x26D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PostProcessSeqFrameDuration;                       // 0x26F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BF[0x4];                                     // 0x26FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ShaderMontageDataTable;                            // 0x2700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             EventPlAttachAssetDataTable;                       // 0x2708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             ForceBTCameraTable;                                // 0x2710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             RipSyncCharaTable;                                 // 0x2718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicSequencerCameraDoFFstop;                    // 0x2720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DynamicSequencerCameraDoFFstopOverride;            // 0x2724(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C0[0x3];                                     // 0x2725(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DynamicSpawnableActors;                            // 0x2728(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignACBeatAsset;                         // 0x2738(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignBeardingAsset;                       // 0x2760(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignDotCrawAsset;                        // 0x2788(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignDropoutAsset;                        // 0x27B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignGhostingAsset;                       // 0x27D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignStrobingAsset;                       // 0x2800(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignTapeDistortionAsset;                 // 0x2828(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       REDStringsSignYIQManipulationAsset;                // 0x2850(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DebugCaptureRetry;                                 // 0x2878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugCaptureRetryOneSkip;                          // 0x2879(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C1[0x6];                                     // 0x287A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventPPStream_C*                    EventPPStream;                                     // 0x2880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GeneralParticleHandle;                             // 0x2888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C2[0x4];                                     // 0x288C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASequencerParticle*>             GeneralParticle1;                                  // 0x2890(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ASequencerParticle*>             GeneralParticle2;                                  // 0x28A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ASequencerParticle*>             GeneralParticle3;                                  // 0x28B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  GeneralParticleActive;                             // 0x28C0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	EEventType                                    PreviousEventType;                                 // 0x28D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C3[0x7];                                     // 0x28D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CaptureCineCameraActor_C*           InGameCineCameraActor;                             // 0x28D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventPostUpdateTask_C*              PostUpdateWork;                                    // 0x28E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugDisableUsePrestreamTextures;                  // 0x28E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C4[0x7];                                     // 0x28E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       KarenMemoryMaterialAsset;                          // 0x28F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DebugDisableTAAStaticGeneral;                      // 0x2918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C5[0x7];                                     // 0x2919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PadVibrationTimer;                                 // 0x2920(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PPCDynamicToInGameInterp;                          // 0x2928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugDisableMaterialOptimize;                      // 0x2930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEventENPCBattleReady;                            // 0x2931(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C6[0x2];                                     // 0x2932(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhaseAnimSkipSpeed;                                // 0x2934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UMaterialInstance>> SoftFocusMaterialAssetList;                        // 0x2938(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      REDStringsSignTapeDistortionVerticalAsset;         // 0x2948(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class URSAtomComponentBase*, class FName> MessageVoiceRipSyncInfoList;                       // 0x2970(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FFEventTriggerCommandData>      StartWaitingHPCheckEventCommandList;               // 0x29C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UIUnlockFlag;                                      // 0x29D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C7[0x7];                                     // 0x29D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CreditEventManager;                                // 0x29D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CaptureExcludePPM;                                 // 0x29E0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<int32>                                 CaptureExcludePPMHandle;                           // 0x29F0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TMap<class ARSCharacterBase*, int32>          OptCustomStencilCachesPlayer;                      // 0x2A00(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	TMap<class ABP_WeaponBase_C*, int32>          OptCustomStencilCachesWeapon;                      // 0x2A50(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	TMap<class FString, class UObject*>           LoadMakeEventList;                                 // 0x2AA0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLoadingMakeEvent;                                // 0x2AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C8[0x7];                                     // 0x2AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LoadingMakeEventPathList;                          // 0x2AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnStartCutScene;                                   // 0x2B08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnEndCutScene;                                     // 0x2B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class AActor*>                         SpawndMeshList;                                    // 0x2B28(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          EventCommandWeaponVisibility;                      // 0x2B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugCaptureLog;                                   // 0x2B39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugDisableFrameDrop;                             // 0x2B3A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPlControl;                                       // 0x2B3B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C9[0x4];                                     // 0x2B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               NoBindingInGamePlayers;                            // 0x2B40(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bEventEndAreaChangeWarp;                           // 0x2B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32CA[0x7];                                     // 0x2B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Store1_1PlMesh;                                    // 0x2B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Store16_9PlMesh;                                   // 0x2B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseFlag;                                         // 0x2B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32CB[0x7];                                     // 0x2B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             SkipENPCCameraTable;                               // 0x2B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraInterpSpeed;                                 // 0x2B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAxiaRightX;                                 // 0x2B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAxisRightY;                                 // 0x2B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EaseInOutInterpSpeed;                              // 0x2B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EaseInOutExp;                                      // 0x2B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEaseInOutRotate;                                 // 0x2B8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32CC[0x3];                                     // 0x2B8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticCameraControlDataParam*          DA_STCameraControlParam;                           // 0x2B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOptionCameraPitch                            OptionCameraPitch;                                 // 0x2B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOptionCameraYaw                              OptionCameraYaw;                                   // 0x2B99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CD[0x6];                                     // 0x2B9A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundAtomCue*>                  PhaseAnimSEList;                                   // 0x2BA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         NoRipSyncSDPressureTime;                           // 0x2BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoSDPressureTimeThreshold;                         // 0x2BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EventHiddenNeonWire;                               // 0x2BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32CE[0x3];                                     // 0x2BB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StaticHighResDelay;                                // 0x2BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASkeletalMeshActor*>             StaticGhostTrailCacheActor;                        // 0x2BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         StaticGhostTrailCacheID;                           // 0x2BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CF[0x4];                                     // 0x2BD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         StaticGhostTrailCacheMeshComps;                    // 0x2BD8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UPoseableMeshComponent*>         StaticGhostTrailCachePosableMeshComps;             // 0x2BE8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UPoseableMeshComponent*>         StaticGhostTrailCachePosableMeshComps2;            // 0x2BF8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         StaticGhostTrailCachePoseableLayer;                // 0x2C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CrossFadePreparationRequired;                      // 0x2C0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D0[0x3];                                     // 0x2C0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NameWidgetActor_C*                  NameWidgetActor;                                   // 0x2C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFindPlayerFacial;                                // 0x2C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D1[0x7];                                     // 0x2C19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFEventHiddenActorForTagNameData> HiddenActorForTagNameDataList;                     // 0x2C20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DispatchHiddenSetoMask;                            // 0x2C30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SetSaveSequencerCharaTransform;                    // 0x2C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SetSaveSequencerCameraTransform;                   // 0x2C41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D2[0x6];                                     // 0x2C42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CacheSaveSequencerCharaTransformPlayer;            // 0x2C48(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     CacheSaveSequencerCharaTransformEnemy;             // 0x2C58(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_32D3[0x8];                                     // 0x2C68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CacheSaveSequencerCameraTransform;                 // 0x2C70(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMap<class FName, struct FEventCacheActorHiddenInGame> ActorHiddenInGameFromTagNameCache;                 // 0x2CA0(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsCalledSetupStaticScene;                          // 0x2CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D4[0x7];                                     // 0x2CF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  EventPlayerDefaultCostume;                         // 0x2CF8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  EventPlayerNoAttachments;                          // 0x2D08(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsNoStopMoviePhaseChange;                          // 0x2D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableStaticCameraControl;                        // 0x2D19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCalledStartStaticEvent;                          // 0x2D1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCalledStartCameraCutDynamic;                     // 0x2D1B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoAddEventTriggerCmdFlag;                          // 0x2D1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D5[0x3];                                     // 0x2D1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, TSoftObjectPtr<class ULevelSequence>> AjitoStayRandomDataList;                           // 0x2D20(0x0050)(Edit, BlueprintVisible)
	bool                                          IsLockOpenMenuFlag;                                // 0x2D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D6[0x7];                                     // 0x2D71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSLevelSequenceActor*>          PresentSequencerList;                              // 0x2D78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   CharaBGTextureName;                                // 0x2D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStoreNameWidgetVisible;                           // 0x2D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESlateVisibility                              StoreCharaNameVisibility;                          // 0x2D91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              StoreBossNameVisibility;                           // 0x2D92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEventBindEnemyTickOffFlag;                        // 0x2D93(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ED_Finish__DelegateSignature();
	void ED_PlayStart__DelegateSignature();
	void OnChangeDestinationActor__DelegateSignature(bool DestinationDispFlag);
	void EventBoardParamCurveTimeline__DelegateSignature(class ABPCaptureActor_C* CaptureActor, class FName XParamName, class FName YParamName, class UCurveFloat* XCurve, class UCurveFloat* YCurve, float Speed, float XParamRate, float YParamRate);
	void OnBeforeChangeProgressID__DelegateSignature();
	void OnAfterChangeProgressID__DelegateSignature();
	void OnStartCutScene__DelegateSignature();
	void OnEndCutScene__DelegateSignature();
	void DispatchHiddenSetoMask__DelegateSignature(bool Param_bHidden);
	void ExecuteUbergraph_BP_EventManager(int32 EntryPoint);
	void AddBattleSimulatorEndEvent(class UClass* EventObject);
	void OnDelaySequencerFinished();
	void GetReadyForCrossFadeCharaCapture(float DelayTime, int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, class FName LightPresetName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName CharaPartsDTRowName, ECharaCapChangeSpeedType ChangeSpeedType, bool IsSimpleCrossFade);
	void DelayBeginPlay();
	void CheckAndSetTalkEventPlayerRipSync(const class FString& MessageLabel, class URSAtomComponentBase* PAtomComponent);
	void SetupStaticSceneForTexture(class FName TextureRowName);
	void OnLoadedMakeEvent(class UObject* Loaded);
	void LoadMakeEvent_Internal(const class FString& MakeEventPathString);
	void SetupStaticSceneForBrainCrash();
	void EndWork();
	void SetProgressIDNative(int32 Param_ProgressId);
	void SubMessageVoiceRipSyncInfoList(class URSAtomComponentBase* AtomComp);
	void AddMessageVoiceRipSyncInfoList(class URSAtomComponentBase* AtomComp, class FName RipSyncBoardJointID);
	void HideBGEffect();
	void EndTalkEvent();
	void StartTalkEvent();
	void ChangeBrainFieldPlayer();
	void PlayVoice(const class FString& VoiceFileName);
	void RemoveBGScreenWidget(bool UseFade);
	void EndGrabFrameStaticToDynamic();
	void StartGrabFrameStaticToDynamic();
	void StopStreamPP(class UCurveFloat* NewFloatCurve);
	void AppearNoBindPartyPlayer();
	void SetSequenceEnd();
	void StartEventFadeOut(const struct FLinearColor& Color, bool IsUnderCaption, float Second);
	void SetHiddenInGameForTagName(class FName TagName, bool IsHiddenInGame);
	void SetLevelVisible(bool Visible, const TArray<TSoftObjectPtr<class UObject>>& LevelList);
	void StartBlendPlayerCamera(float Blend_Time, EViewTargetBlendFunction Blend_Function, float Blend_Exp);
	void ChangeSpeakerToVoice(class URSAtomComponentBase* Voice);
	void SaveSequencerCharaTransform();
	void SequencerStopBrainTalk();
	void SequencerStartBrainTalk(class FName BrainTalkID, EBrainTalkCategory Category, bool IsEventCallEnable, bool SkipVisionSimulator);
	void FinishSequencer();
	void EventStoreCameraTransform();
	void EventBoardParamTimeline_Event(class ABPCaptureActor_C* CaptureActor, class FName XParamName, class FName YParamName, class UCurveFloat* XCurve, class UCurveFloat* YCurve, float Speed, float XParamRate, float YParamRate);
	void SequencerDrawCharaName(const class FString& CharaID);
	void SequencerDrawTownName(int32 LocationId);
	void SequencerDrawBossName(const class FString& bossId);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StartDynamicCutsceneFromAsset(class ULevelSequence* Sequence, bool IsSeamlessInGame);
	void ResetNearClip();
	void NearClip(float Length);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void ReceiveTick(float DeltaSeconds);
	void SetupStaticScene();
	void StartDynamicCutscene(const class FString& CutsceneName);
	void UnloadMessage(const class FString& MessageTableName);
	void LoadMessage(const TSoftObjectPtr<class UDataTable>& DataTable);
	void DrawMessage(int32 WindowType, const class FString& MessageLabel, bool Skipable, float DrawSecond, bool IsVoiceOnlyMessage, bool IsSkipVoiceEnd);
	void BindingActor(const struct FSEventBindingParameter& Parameter);
	void SpawnActor(const struct FSEventSpawnParameter& Parameter);
	void EndDynamic();
	void StartDynamic();
	void EndStatic();
	void StartStatic();
	void ScreenCapture();
	void ReceiveBeginPlay();
	void PrivateClearTemporalRenderTargets();
	void Inner_DynamicToInGameInterp(float BlendTime);
	void SimulateBeginPlay();
	void SimulateTick();
	void PrivatePPMMoveBlurTimeline();
	void Inner_TransitionPlayerCamera();
	void Inner_PopCameraRotationLag(class USpringArmComponent* SpringArm);
	void Inner_PopCameraLag(class USpringArmComponent* SpringArm);
	void Inner_LoadSequencerFinish(class UObject* Loaded);
	void Inner_LoadSequencer(const class FString& AssetPath);
	void SetEventPause(bool IsPause);
	void AddEventTriggerCommandByPath(EEventTriggerCheckType TriggerType, const class FString& TriggerCommandPath, float TriggerWaitTime, int32 EventPriority);
	void LoadMakeEvent(const class FString& MakeEventPathString);
	void AddEventTriggerCommand(const struct FFEventTriggerCommand& TriggerCommand);
	void ISetProgressID(int32 Param_ProgressId);
	void BGScreenFadeTimeline__UpdateFunc();
	void BGScreenFadeTimeline__FinishedFunc();
	void StopStreamPPTimeline__UpdateFunc();
	void StopStreamPPTimeline__FinishedFunc();
	void DynamicToInGameInterp__UpdateFunc();
	void DynamicToInGameInterp__FinishedFunc();
	void PPMMoveBlurTimeline__UpdateFunc();
	void PPMMoveBlurTimeline__FinishedFunc();
	void TransitionStaticToInGameTimeline__UpdateFunc();
	void TransitionStaticToInGameTimeline__FinishedFunc();
	void UserConstructionScript();
	void StartCutScene(const class FString& CutsceneName, bool IsBPEvent);
	void DebugEvent();
	void OnSequencerFinished();
	void OnLoadSequencerFinish(class ULevelSequence* Level_Sequence);
	void OnPlayStartStaticCutScene();
	void OnFinishStaticCutScene();
	void OnPlayStartDynamicCutScene();
	void OnFinishDynamicCutScene();
	void GameScreenCapture();
	void GetScreenCaptureTexture(class UTextureRenderTarget2D** RenderTarget);
	void CalcMainScenePostProcess(const struct FVector& Location, struct FPostProcessSettings* PostProcessSetting);
	void SetupBinding();
	void SettingCapture(int32 CaptureActorIndex, int32 BoadMeshIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsUseSaveTexture, bool IsSeamlessInGameCapture, bool IsHiddenPlFrameEffect, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, EEventCaptureRenderType RenderType, float ToneMapCounterValue);
	void PlayBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, bool IsLoop, class FName SocketName, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData);
	void EndCutScene(bool IsEndEvent, float PlayerCameraBlendTime, EViewTargetBlendFunction PlayerCameraBlendFunc, float PlayerCameraBlendExp, class FName SkipENPCCamRowName);
	void AddBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, bool IsLoop);
	void CameraAnimation(int32 CamAnimIndex);
	void CaptureScene(int32 CaptureActorIndex);
	void GetCaptureActor(int32 CaptureActorIndex, class ABPCaptureActor_C** ReturnCaptureActor);
	bool IsEndDynamicCutscene();
	void SettingSpecialCapture(int32 CaptureActorIndex, int32 BoadMeshIndex);
	void SettingSpecialCamera(int32 CaptureActorIndex, const struct FTransform& CameraTransform, float CameraFov);
	void CaptureSceneSpecial(int32 SpecialCaptureActorIndex);
	void AttachToSpecialCaptureActor(int32 SpecialCaptureActorIndex, class FName AttachPointName);
	void PlaySpecialNodeAnimation(const class FString& SpecialNodeAnimNamePath, bool IsLoop);
	void AddSpecialNodeAnimation(const class FString& SpecialNodeAnimNamePath, bool IsLoop);
	void GetSpecialStaticNodeActor(class AActor** ReturnSpecialStaticNodeActor);
	void InitializePostProcess();
	void SetupDynamicPostProcess(bool Enable);
	void EffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop);
	void SpecialEffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop);
	void LuaStartStatic();
	void LuaEndStatic(bool IsRestoreTransform);
	void CaptureSceneBG(bool* IsSuccess);
	void SetTransformCaptureBG(const struct FTransform& PlaneTransform);
	void SetTransformCaptureBGCamera(const struct FTransform& CameraTransform);
	void SetLocationInGameCamera(const struct FVector& Location);
	void SetTransformInGamePlayer(const struct FTransform& Transform);
	void BGEffectNoise(class UCurveFloat* Curve, bool IsLoop);
	void TransitionStaticToInGame();
	void SetFinalSpecialIDInGame(int32 SpecialCaptureActorIndex);
	void SetUseTransitionInGame(bool UseTransition);
	void PlayBoardBGAnimation(const class FString& BoardAnimNamePath, bool IsLoop);
	void AddBoardBGAnimation(const class FString& BoardAnimNamePath, bool IsLoop);
	void GetCaptureBGActor(class ABP_CaptureBG_C** ReturnLocalCaptureBG);
	void SetDirectionalLight(class FName LightPresetName);
	void BGEffectGlitch(class UCurveFloat* Curve, bool IsLoop);
	void BGEffectFringe(class UCurveFloat* Curve, bool IsLoop);
	void BGEffectScanline(class UCurveFloat* Curve, bool IsLoop);
	class AEventCaptureActorBase* GetCaptureActorBase(int32 Param_Index);
	void StartFade(const struct FVector& Color, float Time);
	void EndFade(const struct FVector& Color, float Time);
	bool IsFadeAnimation();
	void StartupCutscene(bool IsPartyPlayerBattleReady, bool IsENPCBattleReady);
	class UEventAssetPoolComponent* GetAssetPool();
	void IsCutSceneEvent(bool* Param_IsCutSceneEvent);
	void UpdatePostProcessMaterial(bool ForceUpdate);
	void SetVignetteMaskTexture(class UTexture2D* Texture);
	void ResetVignetteMaskTexture();
	void NotifyFinishWaitMode();
	void StartAutoBoardAnimation(int32 CaptureActorIndex, const class FString& boardAnimationName, class UAnimMontage* AddBordAnimMontage, EStaticPlType StaticPlType, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData);
	void LoadAsset();
	void AddEventTriggerCommand_Internal(const struct FFEventTriggerCommand& TriggerCommand);
	void ProccessTime(struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent);
	void ProccessEnemyAllDie(bool* IsStartEvent);
	void StartBPEvent(bool IsStartSubBPEvent, const struct FFEventTriggerCommandData& EventTriggerCommandData);
	void GetProgressID_Internal(int32* Param_ProgressId);
	void SetProgressID(int32 Param_ProgressId);
	void AttachRedStringMeshs(class AActor* ParentActor, class FName SocketName);
	void PlayGeneralBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, bool IsLoop, class FName SocketName, int32 AttachBoardIndex, class UAnimMontage* AddAnimMontage, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData);
	void SetAnimMontageTransform(int32 CaptureActorIndex, const class FString& BoardAnimName);
	void AttachToBoadActor(int32 AttachBoardNum, class AActor* ParentActor);
	void ProccessEnemyNumCheck(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent);
	void SettingEasyStaticForGeneralStatic(int32 CaptureActorIndex);
	void SetVisibleShowDestinationActor(bool IsVisible);
	void SetEventPause_Internal(bool IsPause);
	void SetEventEnableUIMenu(bool EnableFlag);
	void ProccessEndBrainTalk(bool* IsStartEvent);
	void StartPPMMoveBlur(const struct FVector2D& Vector, TSoftObjectPtr<class UCurveFloat> TimelineCurve);
	void LoadEventAsset();
	void IsLoadedEventAsset(bool* IsLoaded);
	bool IsPlayBeforeBoardAnimation();
	void StartEventBossName(int32 CaptureActorIndex, bool IsSpecialCaptureIndex, class FName SocketName, const class FString& bossId, const struct FVector& Scale, EBossNameMode Mode, float FreeFixedDrawSecond);
	void StartEventCharaName(int32 CaptureActorIndex, bool IsSpecialCaptureIndex, class FName SocketName, const class FString& CharaID, const struct FVector& Scale);
	void CalcSceneCapturePostProcessSettings(class USceneCaptureComponent2D* SceneCapture, const struct FVector& Location, struct FPostProcessSettings* Settings);
	void GetDefaultSceneCapturePostProcessSetting(struct FPostProcessSettings* PPS);
	void SetInGameBeforeCamera(const struct FTransform& Transform, class UCurveFloat* InGameCurve, float CameraFov);
	void StartCameraCutDynamic(class ULevelSequence* Level_Sequence, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool IsEndCameraBlendPlayerCamera);
	void OnCameraCutFinishd();
	void GetEventType(EEventType* Param_EventType);
	void AppendSceneCapturePostProcess(class USceneCaptureComponent2D* SceneCapture);
	void SetStaticCapturePPMAccelerator(float Rate, const struct FVector& BlurCenter);
	void SetStaticCapturePPMSeeThrough(float Rate, float BlurPower);
	void SetStaticCapturePPMVisionFog(float Rate, float FogNear, float FogFar, const struct FVector& CenterLocation);
	void SetStaticCapturePPMRadialBlur(float Rate, float BlurSize, const struct FVector& BlurCenter, const struct FVector& BlurColor);
	void SettingCaptureCrossFade(int32 BoadMeshIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, class ABPCaptureActor_C* CaptureActor, bool IsSeamlessInGameCapture, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, bool IsSimpleCrossFade);
	void SaveCaptureActorTexture(int32 CaptureActorIndex);
	bool IsValidChangeLevelAfterEventComand();
	void GetFaceRenderTarget(struct FFRenderTargetData* RenderTargetData);
	void GetSequencerRenderTarget(struct FFRenderTargetData* RenderTargetData);
	void GetRenderTargetForArray(TArray<struct FFRenderTargetData>& RenderTargetArray, struct FFRenderTargetData* RenderTargetData);
	void InitEventRenderTarget();
	void ClearEventRenderTarget();
	void Private_Get_Static_Cature_PPM_Once(EEventPostProcessID EventPostProcessID, bool Load, class UMaterialInstanceDynamic** PPM);
	void SetActiveStaticCapturePPM(EEventPostProcessID EventPostProcessID, bool Activate);
	void PrivateActivateStaticCaturePPM(EEventPostProcessID EventPostProcessID);
	void PrivateDeactivateStaticCaturePPM(EEventPostProcessID EventPostProcessID);
	void PrivateIsStaticCaturePPMActive(EEventPostProcessID EventPostProcessID, bool* Active);
	void AppendSceneCapturePostProcessPPC(class UPostProcessComponent* PostProcessComponent);
	void SetupStaticCapturePPMVignetteMask(class UTexture2D* Texture);
	void PrivateSetVignetteMaskTexture(class UTexture2D* Texture, class UMaterialInstanceDynamic* Material);
	void ResetStaticCapturePPMVignetteMask();
	void PrivateSetGlitchPatternTexture(class UTexture2D* Texture, class UMaterialInstanceDynamic* Material);
	void SetupStaticCapturePPMGlitch(class UTexture2D* Texture);
	void ResetStaticCapturePPMGlitch();
	void SetGlitchTexture(class UTexture2D* Texture);
	void ResetGlitchTexture();
	void AddEventRenderTarget(const struct FFRenderTargetData& AddRenderTargetData);
	void SettingChangeSpecialStatic(class FName BeforeStaticAttachJointName);
	void IsWorldMapShowDestinationForAreaName(int32 LocationId, int32 AreaId, bool* IsShow);
	void IsWorldMapShowDestinationForLocationName(int32 LocationId, bool* IsShow);
	void SetStaticCapturePPMScreenLight(const struct FLinearColor& _1__Color, float _1__CenterU, float _1__CenterV, float _1__Size, float _1__Intensity, float _1_method, float _1_ReverceEffect, const struct FLinearColor& _2__Color, float _2__CenterU, float _2__CenterV, float _2__Size, float _2__Intensity, float _2_method, float _2_ReverceEffect, float GradationPower, float GlobalRate);
	void AttachCapActorForSpecialNodeActor(int32 CaptureActorIndex, class FName AttachPointName);
	void ResetAttachSPCapActorToNodeActor(int32 ParentSPCapActorIndex);
	void PlaySpecialNodeAnimMontage(const class FString& SpecialNodeAnimNamePath);
	void ClearSpecialStatic(int32 SpecialCaptureActorIndex);
	void ChangeSpeakerStaticPl(TArray<class FName>& FrontCharaPlBoneNameList);
	void ResetAttachAllCapActor(class ABPCaptureActor_C* ParentActor);
	void ResetAttachCapActorToNodeActor(int32 ParentSPCapActorIndex);
	void AttachCapActorForCapActor(int32 ParentCapActorIndex, int32 ChildCapActorIndex, class FName AttachPointName);
	void StartNewStaticInGeneral(const class FString& InAnimMontagePath, EShadaAnimeType ShaderAnimType, class FName SelectShaderAnimeDTRowName, bool NoPlaySE);
	void AttachCapActorForPhaseNodeMesh(int32 CaptureActorIndex, class FName SocketName, bool NewVisibility);
	void PlayPhaseNodeAnimation(const class FString& AnimMontagePath);
	void SetNextNewStaticNode();
	void ClearChildCapActor(EPhaseAlphaCurveType AlphaFadeType);
	void PlayPostProcessSequencer(class ULevelSequence* Sequence, bool IsLoop, bool IsLockOpenMenu);
	void EffectBokeh(int32 CaptureActorIndex, class UCurveFloat* Curve, bool CurveReverse);
	void AddEveryFrameCapActorList(const class ABPCaptureActor_C*& CaptureActor);
	void SubEveryFrameCapActorList(const class ABPCaptureActor_C*& CaptureActor, bool* IsRemove);
	void UpdateEveryCapture();
	void GetCharaBGDataToCharaPresetName(class FName CharaPresetName, struct FFCapCharaBGData* CharaBGData);
	void GetShowDestCheckListForActorName(class FName ActorName, TArray<struct FShowDestinationDBDataCell>* ReturnShowCheckList);
	void SetupStaticCapturePPMScreenMask(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF);
	void SetScreenMaskParameter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF);
	void SetUseSequencerStaticInGame(bool UseInGame);
	void SequencerStaticToInGame();
	void GetVoiceCharaName(const class FString& CharaID, class FString* VoiceCharaName);
	void SettingNoRipSync(class ABPCaptureActor_C* CaptureActor, bool IsDefaultCapture);
	void SettingRipSync(class ABPCaptureActor_C* CaptureActor);
	void UpdateRipSync(class ABPCaptureActor_C* CaptureActor);
	bool IsPlayingNewStaticPhaseAnimation();
	bool IsPlayingNewStaticBaseAnimation();
	void SetPhaseAnimCurveInfo(TArray<struct FEventPlAnimationCurveParam>& CurrentPlAnimationCurveDataList);
	void GetCurrentStaticNodeCurveValueToCurveName(class FName CurveName, float* CurveValue);
	void UpdateCheckSequenceCapFunc();
	void CaptureEventBeforeInGame();
	bool IsEmptySeqCaptureFuncList();
	void IsWorldMapShowDestinationForAreaName2(int32 LocationId, int32 AreaId, int32 PortalID, EShowDestinationApplicationType ApplicationType, bool* IsShow, int32* VisibleWeight);
	void PlayPresentSequencer(class ULevelSequence* Sequence, class AAjitoMember* BindForCharaActor, float PlayRate);
	void OnPresentSequencerFinished();
	void EndPresentSequencer(class AAjitoMember* BindForCharaActor);
	void AddStaticCapturePPS(struct FPostProcessSettings& PPS, int32* Handle);
	void RemoveStaticCapturePPS(int32 Handle);
	void UpdateStaticCapturePPS(int32 Handle, const struct FPostProcessSettings& PPS);
	void BoardEffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop);
	void SpecialBoardEffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop);
	void UpdateCapturePPM(class AActor* EventActor);
	void StorePsychicObject();
	void RestorePsychicObject();
	void SetScreenCapture(class USceneCaptureComponent2D* Scene_Capture_Comp, bool Save);
	void DebugSetupDynamicPostProcess(bool Enable);
	void CaptureSceneBGForLevelSequencer(class ULevelSequence* InSequence, float NewPlaybackPosition);
	bool IsWaitSequencerCaptureBG();
	bool IsNowSettingSeqCaptureBrainMes();
	void Update3DWidget(float InDeltaTime);
	void SetupStaticCapturePPMGradScreenMask(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF, const struct FLinearColor& BeginColor, const struct FLinearColor& EndColor, const struct FLinearColor& BeginPos, const struct FLinearColor& EndPos, const struct FLinearColor& Center, float Radius, bool IsRadiusGrad, int32 BlendMode);
	void SetGradScreenMaskParameter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF, const struct FLinearColor& BeginColor, const struct FLinearColor& EndColor, const struct FLinearColor& BeginPos, const struct FLinearColor& EndPos, const struct FLinearColor& Center, float Radius, bool IsRadiusGrad, int32 BlendMode);
	void SetKaiiFilterParameter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF);
	void SetupStaticCapturePPMKaiiFilter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF);
	void SetLevelActorVisible(bool IsVisible, const struct FVector& Position, float Range);
	void ProccessTriggerPlayerAnimMontage(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent);
	void SetTimerByPlayObstructAction(float Time);
	void UpdateTimerByPlayObstructAction();
	void CancelTimerByPlayObstructAction();
	void ProccessObstructActionNumOrTime(struct FFEventTriggerCommandData& EventTriggerCommandData, bool* IsStartEvent);
	void AddObstructActionCount();
	void ResetRipSync();
	void UpdateDynamic();
	void UpdateFacialNormal(bool UseCache);
	void IsReadyStartEvents(bool* IsCanStartEvents);
	void CheckStartWinOrLoseEvent(bool* IsStartEvent);
	void AddEventTriggerCommandToPriority(const struct FFEventTriggerCommand& TriggerCommand);
	void ClearEventComanndListToUnderPriority(const struct FFEventTriggerCommandData& TriggerCommandData);
	void EventStartBPCheck(struct FFEventTriggerCommandData& EventTriggerCommandData, bool* IsStartEvent);
	void CheckEventCommandArray();
	void IsValidEventCommandType(EEventTriggerCheckType EventCommandType, bool CheckBrainTalkEvent, class UClass* ExclusionMakeEvent, bool* IsValid, struct FFEventTriggerCommandData* EventTriggerCommandData);
	void CheckStartTagEnemyHpRateCheckEvent(class AActor* BattleActor, bool CheckOnly, bool* IsStartEvent);
	bool IsCutSceneEventNative();
	void UpdatePostProcessMaterialInternal(class UPostProcessComponent* TargetPPC, bool IsDynamic);
	void FinishedPostProcessSequencer();
	bool OnWaitInputFinishEvent();
	void UnLoadPPM(EEventPostProcessID EventPostProcessID);
	void Private_Get_Dynamic_Cut_PPM_Once(EEventPostProcessID EventPostProcessID, bool Load, class UMaterialInstanceDynamic** PPM);
	void PrivateAddOrUpdateDynamicCutPPMValueIndex(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, float Value, int32 SubIndex, bool IsDynamic, bool EnableMinusValue);
	void PrivateAddOrUpdateDynamicCutPPMValueIndexList(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, float Value, TArray<int32>& SubIndex, bool IsDynamic, bool EnableMunusValue);
	void PrivateAddOrUpdateDynamicCutPPMValueALL(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, float Value, bool IsDynamic, bool EnableMinusValue);
	void PrivateAddOrUpdateDynamicCutPPMScalarValueIndex(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, class FName ParamName, int32 SubIndex, bool IsDynamic, bool EnableMinusValue);
	void CreateEventPlAttachAsset(class FName RowName, int32 CaptureActorIndex, const struct FTransform& OffsetTransform);
	void GetCaptureActorVoiceCharaName(class ABPCaptureActor_C* CaptureActor, class FString* VoiceCharaName);
	void StopPostProcessSequencer();
	void StopAddSpecialNodeAnimMontage();
	void PlayAddSpecialNodeAnimMontage(const class FString& SpecialNodeAnimNamePath);
	void OnCameraCutChangeDynamic(class UCameraComponent* Camea);
	void SetupDynamicSpawnableActors(TArray<class AActor*>& Actors);
	void SetupStaticCapturePPMRedStringsSign(struct FEventPPMRedStringsSingParam& Param);
	void SetPPMRedStringsSignParameter(struct FEventPPMRedStringsSingParam& Param, bool bVertical);
	void Private_Set_PPMRed_Strings_Sign_Parameter_Internal(struct FEventPPMRedStringsSingParam& Param, class UMaterialInstanceDynamic* PPMAcBeat, class UMaterialInstanceDynamic* PPMBearding, class UMaterialInstanceDynamic* PPMDotCraw, class UMaterialInstanceDynamic* PPMDropout, class UMaterialInstanceDynamic* PPMGhosting, class UMaterialInstanceDynamic* PPMStrobing, class UMaterialInstanceDynamic* PPMTapeDistortion, class UMaterialInstanceDynamic* PPMYIQManipulation);
	void DebugCheckCaptureRetry(bool* Retry);
	void DebugSetCaptureRetry(bool Retry);
	void DebugSetCaptureRetryOneSkip(bool OneSkip);
	void ProccessDimensionTangleCheck(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent);
	void SetEventStreamPP(float PerspectiveScaleLeft, float PerspectiveScaleRight, float Rotate, float VisibleLineArea, float EmissivePower);
	void InitializeGeneralParticles();
	void RestartGeneralParticles(int32 Handle, class ARSLevelSequenceActor* LevelSequenceActor, TArray<struct FMovieSceneObjectBindingID>& BindingIDList);
	void GetGeneralParticlesHandle(int32* Handle);
	void BindingGeneralParticles(int32 Handle, class ARSLevelSequenceActor* Param_Sequencer, TArray<struct FMovieSceneObjectBindingID>& BindingIDList);
	void GetGeneralParticlesInternal(int32 Handle, TArray<class ASequencerParticle*>* GeneralParticles);
	void StopHideGeneralParticles(int32 Handle);
	void ClearGeneralParticles(int32 Handle);
	void IsGeneralParticlesActive(int32 Handle, bool* Active);
	void FinishPostProcessSeqLoop();
	void Setup_Event_Prestream_Textures(class AActor* EventActor, bool* UsePrestream);
	void DebugSetPrestreamTextures(bool UsePrestream);
	void Reset_Event_Prestream_Textures();
	bool IsCurrentZeroEP();
	void IsWireVisibleOffEvent(bool* IsOffWireEvent);
	void Proccess_Brain_Field_Close_Check(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent);
	void Public_Set_PPMRed_Strings_Sign_Parameter_Internal(const struct FEventPPMRedStringsSingParam& Param, class UMaterialInstanceDynamic* PPMTapeDistortion, class UMaterialInstanceDynamic* PPMYIQManipulation);
	void StartPadVibration(class UForceFeedbackEffect* VibrationParameterAsset, bool IsLoop, float LoopTime);
	void StopPadVibration();
	void StartCutsceneOptimize();
	void EndCutsceneOptimize();
	bool IsEndPostProcessSequencer();
	void SetupOptimizeMaterialStaticFace(class USkeletalMeshComponent* SkelMeshComp);
	void InitCapturePPM();
	void IsLoadPPM(EEventPostProcessID EventPostProcessID, bool* Loaded);
	void PrivateAddOrUpdateDynamicCutPPMScalarValueIndexList(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, class FName ParamName, TArray<int32>& SubIndex, bool IsDynamic, bool EnableMinusValue);
	void PrivateAddOrUpdateDynamicCutPPMScalarValueALL(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, class FName ParamName);
	void SetSequencerPause(class ALevelSequenceActor* Param_Sequencer, bool IsPause);
	void IsRipSyncJointID(class URSAtomComponentBase* VoiceAtom, class FName JointID, bool* IsRipSync);
	void EndCutsceneRestoreMaterial();
	bool Is_Play_Enable_Rip_Sync_Montage(class UAnimMontage* PlayRipSyncMontage, class UAnimInstance* AnimInstance);
	void SetupCutsceneMaterial(bool Start);
	void StartWaitingHPCheckEvent();
	void ClearEventComanndList();
	void IsValidEventCommandTypeFromNative(EEventTriggerCheckType EventCommandType, bool CheckBrainTalkEvent, bool* IsValid);
	void StartCreditEvent();
	void EndCreditEvent();
	bool IsCurrentCreditEvent();
	void AddExcludeStaticCapturePPS(class UMaterialInterface* ExcludeMaterial, int32* Handle);
	void RemoveExcludeStaticCapturePPS(int32 Handle);
	void AddOptimizeCacheCustomStencil();
	void ClearOptimizeCacheCustomStencil();
	void GetOptimizeCacheCustomStencilPlayer(class ARSCharacterBase* Player, bool* IsFind, bool* UseCustomDepth);
	void GetOptimizeCacheCustomStencilWeapon(class ABP_WeaponBase_C* Weapon, bool* IsFind, bool* UseCustomDepth);
	void SetOptimizeCustomStencilPlayer(class ARSCharacterBase* Player, bool WithWeapon, bool Enable);
	void IsFindLoadMakeEvent(const class FString& BPFilePath, bool* IsFind);
	void ClearLoadedMakeEvent(const class FString& ObjectName, bool* Remove);
	void Is_Find_Loading_Make_Event(const class FString& ObjectName, bool* IsFind, class FString* ReturnObjectName);
	void RemoveLoadingMakeEventList(const class FString& ObjectName);
	bool IsLoadingMakeEventAsset();
	void PlayAjitoTVSequencer(class ULevelSequence* Sequence, class AActor* BindAjitoTVBP);
	void OnAjitoTVSequencerFinished();
	void EndAjitoTVSequencer(class AAjitoMember* BindForAjitoTVBP);
	TArray<class FString> GetLoadedAndLoadingMakeEventPathList();
	bool OnSkipInput();
	void UpdateSimulate();
	void SetWeaponVisibility(bool Visibility, bool NoApply);
	void IsWeaponVisibility(bool* Visibillity);
	void ProccessEnpcBrainFieldTimeLimitEndCheck(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent);
	void Get_Message_Label_Facial(const class FString& MessageLabel, struct FFMessageIDFacialData* Facial);
	void ResetEventRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget);
	void Set_Camera_After_Change_Player();
	void SetUIUnlockFlag(bool UiUnlock);
	void IsCameraYawNormal(bool* IsNormal);
	void IsCameraPitchNormal(bool* IsNormal);
	void IsWorldMapShowDesSubQuestForAreaName(int32 LocationId, int32 AreaId, int32 PortalID, EShowDestinationApplicationType ApplicationType, bool NotOrderCheck, bool* IsShow, int32* VisibleWeight);
	void SetEventHiddenNeonWire(bool Hidden);
	void IsEventHiddenNeonWire(bool* Hidden);
	void SetStaticHighResDelay(int32 DelayFrame);
	void GetStaticHighResDelay(int32* DelayFrame);
	void EnableTickNewStaticActor(bool Enabled);
	bool IsCurrentEventOffSkipEndFade();
	void SetStaticGhostTrailCache(EPlayerID Player, int32 ControlId, int32 Num);
	void ResetStaticGhostTrailCache();
	void GetMatchStaticGhostTrailCache(int32 ControlId, TArray<class ASkeletalMeshActor*>* Param_StaticGhostTrailCacheActor, TArray<class USkeletalMeshComponent*>* Param_StaticGhostTrailCacheMeshComps, int32* MeshNum, TArray<class UPoseableMeshComponent*>* Param_StaticGhostTrailCachePosableMeshComps, int32* Layer);
	bool IsNeedFrameWait();
	void Set_Capture_Actor_Hidden_in_Game(class ABPCaptureActor_C* CaptureActor, bool NewHidden);
	void Set_All_Capture_Actor_Hidden_in_Game(bool NewHidden);
	void InitRipSync(class ABPCaptureActor_C* CaptureActor);
	void GetSoundPressureThreshold(float* Value);
	void SetHiddenActorForTagName(bool FlagIn, bool IsHiddenInGame, class FName TagName, bool IsKeepHidden);
	void GetTeleportTransformAndSweepLocation(const struct FTransform& TransformIn, class UCapsuleComponent* CapsuleComponentIn, struct FTransform* OutTransform, struct FVector* OutSweepLocation);
	void ProcessBrainFieldRemainingTimeCheck(const struct FFEventTriggerCommandData& EventTriggerCommandData, bool* Result);
	void HiddenSetoMask(bool Param_bHidden);
	void ChangeCurrentMontageToEndPos();
	void ClearHiddenActorforTagName();
	void PrivateSaveSequencerCharaTransform(bool SetupActor);
	void SetCacheActorHiddenInGameFromTagName(class FName TagName, bool IsHiddenInGame, TArray<class AActor*>& Actors);
	void Clear_Cache_Actor_Hidden_in_Game_from_Tag_Name(class FName TagName);
	void SetPlayerCostumeSettings(EPlayerID PlayerId, bool DefaultCostume, bool NoAttachments);
	void ClearAllPlayerCostumeSettings(bool ResetBindingActors);
	void GetPlayerCostumeSettings(EPlayerID PlayerId, bool* DefaultCostume, bool* NoAttachments);
	bool CheckScenarioFlagListC(const TArray<struct FShowDestinationFlgCheck>& FlgCheckList);
	bool CheckProgressID(int32 MinProgressID, int32 MaxProgressID);
	void ResetPreviousEventType();
	bool IsVisibleCharaNameForProgressID(EPlayerID PlayerId);
	bool IsValidEventCommand();
	bool IsEndPresentSequencer();
	void PlayAjitoStaySequencer(class ULevelSequence* Sequence, class AAjitoMember* BindForCharaActor, class AAjitoMember* BindFromCharaActor, float PlayRate);
	void EndAjitoStaySequencer(class AAjitoMember* BindForCharaActor, class AAjitoMember* BindFromCharaActor);
	void OnAjitoStaySequencerFinished();
	void InitAjitoStayRandomData();
	void IsValidEventCommandEnemyExterminationEvent(bool* IsValid, struct FFEventTriggerCommandData* EventTriggerCommandData);
	bool OnBattleFieldEnd();
	void SetStaticMainPlayerCastShadow(EPlayerID PlayerId, bool EnableFlag);
	void GetPresentSequencer(class ARSLevelSequenceActor** PresentSequencer);
	void SpawnPresentSequencer();
	void DestroyPresentSequencer();
	void IsValidBattleSimulatorSystemEventCommand(bool* IsValid, struct FFEventTriggerCommandData* EventTriggerCommandData);
	bool SetStaticEventSkyPause(bool Pause);
	bool HiddenEventName3DWidget();
	bool RestoreVisibilityEventName3DWidget();
	bool IsValidTimerEventCommand(bool CheckBrainTalkEvent, float WithinTime);
	void GetProgressID(int32* Param_ProgressId);
	void IsEventPause(bool* IsPause);
	void GetEventTriggerCommendNum(EEventTriggerCheckType CheckType, int32* Count);
	void SetENPCPresetPlayerCamera(bool Enable, EPlayerCameraPreset Preset_Basic, bool* Ret);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventManager_C">();
	}
	static class ABP_EventManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventManager_C>();
	}
};
static_assert(alignof(ABP_EventManager_C) == 0x000010, "Wrong alignment on ABP_EventManager_C");
static_assert(sizeof(ABP_EventManager_C) == 0x002DA0, "Wrong size on ABP_EventManager_C");
static_assert(offsetof(ABP_EventManager_C, UberGraphFrame) == 0x000348, "Member 'ABP_EventManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BPC_OptimizeSwitchMaterialStaticFace) == 0x000350, "Member 'ABP_EventManager_C::BPC_OptimizeSwitchMaterialStaticFace' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RSFrameGrabberToStatic) == 0x000358, "Member 'ABP_EventManager_C::RSFrameGrabberToStatic' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RSFrameGrabberToDynamic) == 0x000360, "Member 'ABP_EventManager_C::RSFrameGrabberToDynamic' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SeamlessCaptureComponent2D) == 0x000368, "Member 'ABP_EventManager_C::SeamlessCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BPC_EventBindingPlayers) == 0x000370, "Member 'ABP_EventManager_C::BPC_EventBindingPlayers' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticCutSceneCapture) == 0x000378, "Member 'ABP_EventManager_C::StaticCutSceneCapture' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BP_EventAssetPoolComponent) == 0x000380, "Member 'ABP_EventManager_C::BP_EventAssetPoolComponent' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureDirectionalLightComp) == 0x000388, "Member 'ABP_EventManager_C::CaptureDirectionalLightComp' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DefaultSceneRoot) == 0x000390, "Member 'ABP_EventManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicToInGameInterp_Interp_CE5F0FB44F167C0C66498F890F64A58A) == 0x000398, "Member 'ABP_EventManager_C::DynamicToInGameInterp_Interp_CE5F0FB44F167C0C66498F890F64A58A' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicToInGameInterp__Direction_CE5F0FB44F167C0C66498F890F64A58A) == 0x00039C, "Member 'ABP_EventManager_C::DynamicToInGameInterp__Direction_CE5F0FB44F167C0C66498F890F64A58A' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicToInGameInterp) == 0x0003A0, "Member 'ABP_EventManager_C::DynamicToInGameInterp' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BGScreenFadeTimeline_Alpha_C3870689477E87E3CCC458AA92AEB318) == 0x0003A8, "Member 'ABP_EventManager_C::BGScreenFadeTimeline_Alpha_C3870689477E87E3CCC458AA92AEB318' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BGScreenFadeTimeline__Direction_C3870689477E87E3CCC458AA92AEB318) == 0x0003AC, "Member 'ABP_EventManager_C::BGScreenFadeTimeline__Direction_C3870689477E87E3CCC458AA92AEB318' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BGScreenFadeTimeline) == 0x0003B0, "Member 'ABP_EventManager_C::BGScreenFadeTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StopStreamPPTimeline_Track_8062AEA34AD8F2E88D0C1BBA12F24C12) == 0x0003B8, "Member 'ABP_EventManager_C::StopStreamPPTimeline_Track_8062AEA34AD8F2E88D0C1BBA12F24C12' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StopStreamPPTimeline__Direction_8062AEA34AD8F2E88D0C1BBA12F24C12) == 0x0003BC, "Member 'ABP_EventManager_C::StopStreamPPTimeline__Direction_8062AEA34AD8F2E88D0C1BBA12F24C12' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StopStreamPPTimeline) == 0x0003C0, "Member 'ABP_EventManager_C::StopStreamPPTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PPMMoveBlurTimeline_Rate_9E44A655488D3CA7FA5FE0AC19441E01) == 0x0003C8, "Member 'ABP_EventManager_C::PPMMoveBlurTimeline_Rate_9E44A655488D3CA7FA5FE0AC19441E01' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PPMMoveBlurTimeline__Direction_9E44A655488D3CA7FA5FE0AC19441E01) == 0x0003CC, "Member 'ABP_EventManager_C::PPMMoveBlurTimeline__Direction_9E44A655488D3CA7FA5FE0AC19441E01' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PPMMoveBlurTimeline) == 0x0003D0, "Member 'ABP_EventManager_C::PPMMoveBlurTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TransitionStaticToInGameTimeline_Track_98F59090477C1504072378B2FFFCF5A0) == 0x0003D8, "Member 'ABP_EventManager_C::TransitionStaticToInGameTimeline_Track_98F59090477C1504072378B2FFFCF5A0' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TransitionStaticToInGameTimeline__Direction_98F59090477C1504072378B2FFFCF5A0) == 0x0003DC, "Member 'ABP_EventManager_C::TransitionStaticToInGameTimeline__Direction_98F59090477C1504072378B2FFFCF5A0' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TransitionStaticToInGameTimeline) == 0x0003E0, "Member 'ABP_EventManager_C::TransitionStaticToInGameTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ED_Finish) == 0x0003E8, "Member 'ABP_EventManager_C::ED_Finish' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ED_PlayStart) == 0x0003F8, "Member 'ABP_EventManager_C::ED_PlayStart' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BGScreenWidget) == 0x000408, "Member 'ABP_EventManager_C::BGScreenWidget' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventType) == 0x000410, "Member 'ABP_EventManager_C::EventType' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RestorePPV) == 0x000418, "Member 'ABP_EventManager_C::RestorePPV' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureActorList) == 0x000428, "Member 'ABP_EventManager_C::CaptureActorList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDLuaScriptComponent) == 0x000438, "Member 'ABP_EventManager_C::REDLuaScriptComponent' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CineCameraActor) == 0x000440, "Member 'ABP_EventManager_C::CineCameraActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PlayerHiddenFlag) == 0x000448, "Member 'ABP_EventManager_C::PlayerHiddenFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SpecialCaptureActorList) == 0x000450, "Member 'ABP_EventManager_C::SpecialCaptureActorList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SpecialStaticNodeActor) == 0x000460, "Member 'ABP_EventManager_C::SpecialStaticNodeActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventActorList) == 0x000468, "Member 'ABP_EventManager_C::EventActorList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MoveBlurMaterial) == 0x000478, "Member 'ABP_EventManager_C::MoveBlurMaterial' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PostProcess) == 0x000480, "Member 'ABP_EventManager_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DefaultSpecialCaptureActorPPSetting) == 0x000490, "Member 'ABP_EventManager_C::DefaultSpecialCaptureActorPPSetting' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureBG) == 0x000C10, "Member 'ABP_EventManager_C::CaptureBG' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsRunLua) == 0x000C18, "Member 'ABP_EventManager_C::IsRunLua' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DefaultBGCaptureActorPPSetting) == 0x000C20, "Member 'ABP_EventManager_C::DefaultBGCaptureActorPPSetting' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LastSpecialCaptureCameraTransform) == 0x0013A0, "Member 'ABP_EventManager_C::LastSpecialCaptureCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LastSpecialCapturePlayerTransform) == 0x0013B0, "Member 'ABP_EventManager_C::LastSpecialCapturePlayerTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticToInGameFinalSpecialIndex) == 0x0013C0, "Member 'ABP_EventManager_C::StaticToInGameFinalSpecialIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticToInGameCameraLocation) == 0x0013C4, "Member 'ABP_EventManager_C::StaticToInGameCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticToInGameBeforeCameraTransform) == 0x0013D0, "Member 'ABP_EventManager_C::StaticToInGameBeforeCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticToInGamePlayerTransform) == 0x001400, "Member 'ABP_EventManager_C::StaticToInGamePlayerTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, UseStaticToInGameCameraLocation) == 0x001430, "Member 'ABP_EventManager_C::UseStaticToInGameCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, UseStaticToInGamePlayerTransform) == 0x001431, "Member 'ABP_EventManager_C::UseStaticToInGamePlayerTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticToInGameCamera) == 0x001438, "Member 'ABP_EventManager_C::StaticToInGameCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, UseStaticToInGame) == 0x001440, "Member 'ABP_EventManager_C::UseStaticToInGame' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TransitionStartCameraTransform) == 0x001450, "Member 'ABP_EventManager_C::TransitionStartCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TransitionStartCameraFOV) == 0x001480, "Member 'ABP_EventManager_C::TransitionStartCameraFOV' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LightDataTable) == 0x001488, "Member 'ABP_EventManager_C::LightDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventSettings) == 0x001490, "Member 'ABP_EventManager_C::EventSettings' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureSkyMesh) == 0x001498, "Member 'ABP_EventManager_C::CaptureSkyMesh' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticEventSkyMesh) == 0x0014A0, "Member 'ABP_EventManager_C::StaticEventSkyMesh' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, AxisRightX) == 0x0014A8, "Member 'ABP_EventManager_C::AxisRightX' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, AxisRightY) == 0x0014AC, "Member 'ABP_EventManager_C::AxisRightY' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MaxRotate) == 0x0014B0, "Member 'ABP_EventManager_C::MaxRotate' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CameraDistance) == 0x0014B4, "Member 'ABP_EventManager_C::CameraDistance' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, Lua) == 0x0014B8, "Member 'ABP_EventManager_C::Lua' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BGScreenWidgetClassAsset) == 0x0014C0, "Member 'ABP_EventManager_C::BGScreenWidgetClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BGScreenWidgetClassObject) == 0x0014E8, "Member 'ABP_EventManager_C::BGScreenWidgetClassObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BossNameWidgetClassAsset) == 0x0014F0, "Member 'ABP_EventManager_C::BossNameWidgetClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CharaNameWidgetClassAsset) == 0x001518, "Member 'ABP_EventManager_C::CharaNameWidgetClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticCutBGParticleAsset) == 0x001540, "Member 'ABP_EventManager_C::StaticCutBGParticleAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BossNameWidgetClassObject) == 0x001568, "Member 'ABP_EventManager_C::BossNameWidgetClassObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CharaNameWidgetClassObject) == 0x001570, "Member 'ABP_EventManager_C::CharaNameWidgetClassObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticCutBGParticleObject) == 0x001578, "Member 'ABP_EventManager_C::StaticCutBGParticleObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticCapSkyAsset) == 0x001580, "Member 'ABP_EventManager_C::StaticCapSkyAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticCapSkyObject) == 0x0015A8, "Member 'ABP_EventManager_C::StaticCapSkyObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, VignetteMaskDefaultTextureAsset) == 0x0015B0, "Member 'ABP_EventManager_C::VignetteMaskDefaultTextureAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, VignetteMaskDefualtTextureObject) == 0x0015D8, "Member 'ABP_EventManager_C::VignetteMaskDefualtTextureObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GlitchDefaultTextureAsset) == 0x0015E0, "Member 'ABP_EventManager_C::GlitchDefaultTextureAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BP_StaticSkyClassAsset) == 0x001608, "Member 'ABP_EventManager_C::BP_StaticSkyClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GlitchDefualtTextureObject) == 0x001630, "Member 'ABP_EventManager_C::GlitchDefualtTextureObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BP_StaticSkyClass) == 0x001638, "Member 'ABP_EventManager_C::BP_StaticSkyClass' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BPFaceCapSkyClassAsset) == 0x001640, "Member 'ABP_EventManager_C::BPFaceCapSkyClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BP_SpecialStaticNodeActorClassAsset) == 0x001668, "Member 'ABP_EventManager_C::BP_SpecialStaticNodeActorClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BPFaceCapSkyClass) == 0x001690, "Member 'ABP_EventManager_C::BPFaceCapSkyClass' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BP_SpecialStaticNodeActorClass) == 0x001698, "Member 'ABP_EventManager_C::BP_SpecialStaticNodeActorClass' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, AS_ec9999_001_Default_Asset) == 0x0016A0, "Member 'ABP_EventManager_C::AS_ec9999_001_Default_Asset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, AS_ec9999_001_Default_Object) == 0x0016C8, "Member 'ABP_EventManager_C::AS_ec9999_001_Default_Object' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SepiaMaterialAsset) == 0x0016D0, "Member 'ABP_EventManager_C::SepiaMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMScreenLightAsset) == 0x0016F8, "Member 'ABP_EventManager_C::CapturePPMScreenLightAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MonoMaterialAsset) == 0x001720, "Member 'ABP_EventManager_C::MonoMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, VignetteMaterialAsset) == 0x001748, "Member 'ABP_EventManager_C::VignetteMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GlitchMaterialAsset) == 0x001770, "Member 'ABP_EventManager_C::GlitchMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LinearToSRGBMaterialAsset) == 0x001798, "Member 'ABP_EventManager_C::LinearToSRGBMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RedStringsList) == 0x0017C0, "Member 'ABP_EventManager_C::RedStringsList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentRedStringIndex) == 0x0017D0, "Member 'ABP_EventManager_C::CurrentRedStringIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MaxRedString) == 0x0017D4, "Member 'ABP_EventManager_C::MaxRedString' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticEventType) == 0x0017D8, "Member 'ABP_EventManager_C::StaticEventType' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ArrayShowDestinationActor) == 0x0017E0, "Member 'ABP_EventManager_C::ArrayShowDestinationActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OnChangeDestinationActor) == 0x0017F0, "Member 'ABP_EventManager_C::OnChangeDestinationActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MoveBlurMaterialAsset) == 0x001800, "Member 'ABP_EventManager_C::MoveBlurMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MoveBlurMaterialObject) == 0x001828, "Member 'ABP_EventManager_C::MoveBlurMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureDataTable) == 0x001830, "Member 'ABP_EventManager_C::CaptureDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureDataTableCharaMeshObject) == 0x001838, "Member 'ABP_EventManager_C::CaptureDataTableCharaMeshObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TextureDataTable) == 0x001888, "Member 'ABP_EventManager_C::TextureDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, TextureDataTableTextureObject) == 0x001890, "Member 'ABP_EventManager_C::TextureDataTableTextureObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MovieTextureDataTableMovieTextureObject) == 0x0018E0, "Member 'ABP_EventManager_C::MovieTextureDataTableMovieTextureObject' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MovieTextureDataTable) == 0x001930, "Member 'ABP_EventManager_C::MovieTextureDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BossNameWidget) == 0x001938, "Member 'ABP_EventManager_C::BossNameWidget' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CharaNameWidget) == 0x001940, "Member 'ABP_EventManager_C::CharaNameWidget' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, UseStaticToInGameBeforeCameraTransform) == 0x001948, "Member 'ABP_EventManager_C::UseStaticToInGameBeforeCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticToInGameBeforeCameraFOV) == 0x00194C, "Member 'ABP_EventManager_C::StaticToInGameBeforeCameraFOV' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CutSceneSequencerCamera) == 0x001950, "Member 'ABP_EventManager_C::CutSceneSequencerCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMAcceleratorAsset) == 0x001958, "Member 'ABP_EventManager_C::CapturePPMAcceleratorAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMSeeThroughAsset) == 0x001980, "Member 'ABP_EventManager_C::CapturePPMSeeThroughAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMVisionFogAsset) == 0x0019A8, "Member 'ABP_EventManager_C::CapturePPMVisionFogAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMRadialBlurAsset) == 0x0019D0, "Member 'ABP_EventManager_C::CapturePPMRadialBlurAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BP_SC_BG) == 0x0019F8, "Member 'ABP_EventManager_C::BP_SC_BG' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventBoardParamCurveTimeline) == 0x001A00, "Member 'ABP_EventManager_C::EventBoardParamCurveTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SavedRenderTarget) == 0x001A10, "Member 'ABP_EventManager_C::SavedRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsFinishSequencer) == 0x001A18, "Member 'ABP_EventManager_C::IsFinishSequencer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, FaceRenderTargetList) == 0x001A20, "Member 'ABP_EventManager_C::FaceRenderTargetList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SequencerRenderTargetList) == 0x001A30, "Member 'ABP_EventManager_C::SequencerRenderTargetList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CrossFadeFaceRT) == 0x001A40, "Member 'ABP_EventManager_C::CrossFadeFaceRT' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CrossFadeSeqRT) == 0x001A58, "Member 'ABP_EventManager_C::CrossFadeSeqRT' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ActiveCapturePPMs) == 0x001A70, "Member 'ABP_EventManager_C::ActiveCapturePPMs' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CameraActorLocation) == 0x001A80, "Member 'ABP_EventManager_C::CameraActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NewVar_3) == 0x001AB0, "Member 'ABP_EventManager_C::NewVar_3' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StoreIsBlendCamera) == 0x001AB8, "Member 'ABP_EventManager_C::StoreIsBlendCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentCaptureActorIndex) == 0x001ABC, "Member 'ABP_EventManager_C::CurrentCaptureActorIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsSpeak) == 0x001AC0, "Member 'ABP_EventManager_C::IsSpeak' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ShowDestinationData) == 0x001AC8, "Member 'ABP_EventManager_C::ShowDestinationData' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NewStaticActorList) == 0x001AD0, "Member 'ABP_EventManager_C::NewStaticActorList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentNewStaticNode) == 0x001AE0, "Member 'ABP_EventManager_C::CurrentNewStaticNode' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BeforeNewStaticNode) == 0x001AE8, "Member 'ABP_EventManager_C::BeforeNewStaticNode' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentEventSettingData) == 0x001AF0, "Member 'ABP_EventManager_C::CurrentEventSettingData' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PostProcessSequencer) == 0x001AF8, "Member 'ABP_EventManager_C::PostProcessSequencer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentSpeakerActorIndex) == 0x001B00, "Member 'ABP_EventManager_C::CurrentSpeakerActorIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EveryFrameCaptureActorList) == 0x001B08, "Member 'ABP_EventManager_C::EveryFrameCaptureActorList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapCharaBGDataTable) == 0x001B18, "Member 'ABP_EventManager_C::CapCharaBGDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LeftCharaBGDataList) == 0x001B20, "Member 'ABP_EventManager_C::LeftCharaBGDataList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RightCharaBGDataList) == 0x001B30, "Member 'ABP_EventManager_C::RightCharaBGDataList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CenterCharaBGDataList) == 0x001B40, "Member 'ABP_EventManager_C::CenterCharaBGDataList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CameraBindingID) == 0x001B50, "Member 'ABP_EventManager_C::CameraBindingID' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ShowDestinationDB) == 0x001B68, "Member 'ABP_EventManager_C::ShowDestinationDB' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OnBeforeChangeProgressID) == 0x001B70, "Member 'ABP_EventManager_C::OnBeforeChangeProgressID' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OnAfterChangeProgressID) == 0x001B80, "Member 'ABP_EventManager_C::OnAfterChangeProgressID' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsDynamicSeamlessInGame) == 0x001B90, "Member 'ABP_EventManager_C::IsDynamicSeamlessInGame' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMScreenMask) == 0x001B98, "Member 'ABP_EventManager_C::CapturePPMScreenMask' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SoftFocusMaterialAsset) == 0x001BC0, "Member 'ABP_EventManager_C::SoftFocusMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, HeartBeatMaterialAsset) == 0x001BE8, "Member 'ABP_EventManager_C::HeartBeatMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, UseSequencerStaticToInGame) == 0x001C10, "Member 'ABP_EventManager_C::UseSequencerStaticToInGame' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, InGameCapActorIndex) == 0x001C14, "Member 'ABP_EventManager_C::InGameCapActorIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SoundPressureThreshold) == 0x001C18, "Member 'ABP_EventManager_C::SoundPressureThreshold' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, AlphaMovieMaterialAsset) == 0x001C20, "Member 'ABP_EventManager_C::AlphaMovieMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DiffusionMaterialAsset) == 0x001C48, "Member 'ABP_EventManager_C::DiffusionMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SequenceCaptureFuncList) == 0x001C70, "Member 'ABP_EventManager_C::SequenceCaptureFuncList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RegistPsychicObjectList) == 0x001C80, "Member 'ABP_EventManager_C::RegistPsychicObjectList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMFishEyeAsset) == 0x001C90, "Member 'ABP_EventManager_C::CapturePPMFishEyeAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsCallOnSequencerFinished) == 0x001CB8, "Member 'ABP_EventManager_C::IsCallOnSequencerFinished' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureAddPPS) == 0x001CC0, "Member 'ABP_EventManager_C::CaptureAddPPS' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureAddPPSHandle) == 0x001CD0, "Member 'ABP_EventManager_C::CaptureAddPPSHandle' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureAddPPSHandleIndex) == 0x001CE0, "Member 'ABP_EventManager_C::CaptureAddPPSHandleIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMScreenMaskAfterDOF) == 0x001CE8, "Member 'ABP_EventManager_C::CapturePPMScreenMaskAfterDOF' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ThreeDWidgetList) == 0x001D10, "Member 'ABP_EventManager_C::ThreeDWidgetList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, WB_ui_BrainMes) == 0x001D20, "Member 'ABP_EventManager_C::WB_ui_BrainMes' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, WB_UI_BrainMesClass) == 0x001D28, "Member 'ABP_EventManager_C::WB_UI_BrainMesClass' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, WBUIBrainMesSoftClass) == 0x001D30, "Member 'ABP_EventManager_C::WBUIBrainMesSoftClass' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMGradScreenMask) == 0x001D58, "Member 'ABP_EventManager_C::CapturePPMGradScreenMask' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CapturePPMGradScreenMaskAfterDOF) == 0x001D80, "Member 'ABP_EventManager_C::CapturePPMGradScreenMaskAfterDOF' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, KaiiFilterMaterialAsset) == 0x001DA8, "Member 'ABP_EventManager_C::KaiiFilterMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsCalledStartBlendPlayerCamera) == 0x001DD0, "Member 'ABP_EventManager_C::IsCalledStartBlendPlayerCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CutSceneSequencerBlendCamera) == 0x001DD8, "Member 'ABP_EventManager_C::CutSceneSequencerBlendCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, _ActorVisibleChange) == 0x001DE0, "Member 'ABP_EventManager_C::_ActorVisibleChange' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BothSideLimMaterialAsset) == 0x001DE8, "Member 'ABP_EventManager_C::BothSideLimMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PlayObstructActionTimer) == 0x001E10, "Member 'ABP_EventManager_C::PlayObstructActionTimer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ObstructActionCount) == 0x001E1C, "Member 'ABP_EventManager_C::ObstructActionCount' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsStartCameraCutDynamic) == 0x001E20, "Member 'ABP_EventManager_C::IsStartCameraCutDynamic' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsValidMessageVoice) == 0x001E21, "Member 'ABP_EventManager_C::IsValidMessageVoice' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LightUpMaterialAsset) == 0x001E28, "Member 'ABP_EventManager_C::LightUpMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, FuturePredictionMaterialAsset) == 0x001E38, "Member 'ABP_EventManager_C::FuturePredictionMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsResetNewStaticNode) == 0x001E60, "Member 'ABP_EventManager_C::IsResetNewStaticNode' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CameraSocketTransform) == 0x001E70, "Member 'ABP_EventManager_C::CameraSocketTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, FieldBlurMaterialAsset) == 0x001EA0, "Member 'ABP_EventManager_C::FieldBlurMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LightShaftMaterialAsset) == 0x001EB0, "Member 'ABP_EventManager_C::LightShaftMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OutlineAfterimageMaterialAsset) == 0x001ED8, "Member 'ABP_EventManager_C::OutlineAfterimageMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicSequencerCameraPPS) == 0x001F00, "Member 'ABP_EventManager_C::DynamicSequencerCameraPPS' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LinearToSRGBMaterial) == 0x002680, "Member 'ABP_EventManager_C::LinearToSRGBMaterial' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventTriggerCommandDataArray) == 0x002688, "Member 'ABP_EventManager_C::EventTriggerCommandDataArray' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ShadowmapMaterialAsset) == 0x002698, "Member 'ABP_EventManager_C::ShadowmapMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, BindEnemyList) == 0x0026C0, "Member 'ABP_EventManager_C::BindEnemyList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StreamMaterialAsset) == 0x0026D0, "Member 'ABP_EventManager_C::StreamMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PostProcessSeqFrameDuration) == 0x0026F8, "Member 'ABP_EventManager_C::PostProcessSeqFrameDuration' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ShaderMontageDataTable) == 0x002700, "Member 'ABP_EventManager_C::ShaderMontageDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventPlAttachAssetDataTable) == 0x002708, "Member 'ABP_EventManager_C::EventPlAttachAssetDataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ForceBTCameraTable) == 0x002710, "Member 'ABP_EventManager_C::ForceBTCameraTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, RipSyncCharaTable) == 0x002718, "Member 'ABP_EventManager_C::RipSyncCharaTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicSequencerCameraDoFFstop) == 0x002720, "Member 'ABP_EventManager_C::DynamicSequencerCameraDoFFstop' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicSequencerCameraDoFFstopOverride) == 0x002724, "Member 'ABP_EventManager_C::DynamicSequencerCameraDoFFstopOverride' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DynamicSpawnableActors) == 0x002728, "Member 'ABP_EventManager_C::DynamicSpawnableActors' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignACBeatAsset) == 0x002738, "Member 'ABP_EventManager_C::REDStringsSignACBeatAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignBeardingAsset) == 0x002760, "Member 'ABP_EventManager_C::REDStringsSignBeardingAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignDotCrawAsset) == 0x002788, "Member 'ABP_EventManager_C::REDStringsSignDotCrawAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignDropoutAsset) == 0x0027B0, "Member 'ABP_EventManager_C::REDStringsSignDropoutAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignGhostingAsset) == 0x0027D8, "Member 'ABP_EventManager_C::REDStringsSignGhostingAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignStrobingAsset) == 0x002800, "Member 'ABP_EventManager_C::REDStringsSignStrobingAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignTapeDistortionAsset) == 0x002828, "Member 'ABP_EventManager_C::REDStringsSignTapeDistortionAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignYIQManipulationAsset) == 0x002850, "Member 'ABP_EventManager_C::REDStringsSignYIQManipulationAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugCaptureRetry) == 0x002878, "Member 'ABP_EventManager_C::DebugCaptureRetry' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugCaptureRetryOneSkip) == 0x002879, "Member 'ABP_EventManager_C::DebugCaptureRetryOneSkip' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventPPStream) == 0x002880, "Member 'ABP_EventManager_C::EventPPStream' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GeneralParticleHandle) == 0x002888, "Member 'ABP_EventManager_C::GeneralParticleHandle' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GeneralParticle1) == 0x002890, "Member 'ABP_EventManager_C::GeneralParticle1' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GeneralParticle2) == 0x0028A0, "Member 'ABP_EventManager_C::GeneralParticle2' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GeneralParticle3) == 0x0028B0, "Member 'ABP_EventManager_C::GeneralParticle3' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, GeneralParticleActive) == 0x0028C0, "Member 'ABP_EventManager_C::GeneralParticleActive' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PreviousEventType) == 0x0028D0, "Member 'ABP_EventManager_C::PreviousEventType' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, InGameCineCameraActor) == 0x0028D8, "Member 'ABP_EventManager_C::InGameCineCameraActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PostUpdateWork) == 0x0028E0, "Member 'ABP_EventManager_C::PostUpdateWork' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugDisableUsePrestreamTextures) == 0x0028E8, "Member 'ABP_EventManager_C::DebugDisableUsePrestreamTextures' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, KarenMemoryMaterialAsset) == 0x0028F0, "Member 'ABP_EventManager_C::KarenMemoryMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugDisableTAAStaticGeneral) == 0x002918, "Member 'ABP_EventManager_C::DebugDisableTAAStaticGeneral' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PadVibrationTimer) == 0x002920, "Member 'ABP_EventManager_C::PadVibrationTimer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PPCDynamicToInGameInterp) == 0x002928, "Member 'ABP_EventManager_C::PPCDynamicToInGameInterp' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugDisableMaterialOptimize) == 0x002930, "Member 'ABP_EventManager_C::DebugDisableMaterialOptimize' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsEventENPCBattleReady) == 0x002931, "Member 'ABP_EventManager_C::IsEventENPCBattleReady' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PhaseAnimSkipSpeed) == 0x002934, "Member 'ABP_EventManager_C::PhaseAnimSkipSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SoftFocusMaterialAssetList) == 0x002938, "Member 'ABP_EventManager_C::SoftFocusMaterialAssetList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, REDStringsSignTapeDistortionVerticalAsset) == 0x002948, "Member 'ABP_EventManager_C::REDStringsSignTapeDistortionVerticalAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, MessageVoiceRipSyncInfoList) == 0x002970, "Member 'ABP_EventManager_C::MessageVoiceRipSyncInfoList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StartWaitingHPCheckEventCommandList) == 0x0029C0, "Member 'ABP_EventManager_C::StartWaitingHPCheckEventCommandList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, UIUnlockFlag) == 0x0029D0, "Member 'ABP_EventManager_C::UIUnlockFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CreditEventManager) == 0x0029D8, "Member 'ABP_EventManager_C::CreditEventManager' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureExcludePPM) == 0x0029E0, "Member 'ABP_EventManager_C::CaptureExcludePPM' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CaptureExcludePPMHandle) == 0x0029F0, "Member 'ABP_EventManager_C::CaptureExcludePPMHandle' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OptCustomStencilCachesPlayer) == 0x002A00, "Member 'ABP_EventManager_C::OptCustomStencilCachesPlayer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OptCustomStencilCachesWeapon) == 0x002A50, "Member 'ABP_EventManager_C::OptCustomStencilCachesWeapon' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LoadMakeEventList) == 0x002AA0, "Member 'ABP_EventManager_C::LoadMakeEventList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsLoadingMakeEvent) == 0x002AF0, "Member 'ABP_EventManager_C::IsLoadingMakeEvent' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, LoadingMakeEventPathList) == 0x002AF8, "Member 'ABP_EventManager_C::LoadingMakeEventPathList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OnStartCutScene) == 0x002B08, "Member 'ABP_EventManager_C::OnStartCutScene' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OnEndCutScene) == 0x002B18, "Member 'ABP_EventManager_C::OnEndCutScene' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SpawndMeshList) == 0x002B28, "Member 'ABP_EventManager_C::SpawndMeshList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventCommandWeaponVisibility) == 0x002B38, "Member 'ABP_EventManager_C::EventCommandWeaponVisibility' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugCaptureLog) == 0x002B39, "Member 'ABP_EventManager_C::DebugCaptureLog' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DebugDisableFrameDrop) == 0x002B3A, "Member 'ABP_EventManager_C::DebugDisableFrameDrop' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsPlControl) == 0x002B3B, "Member 'ABP_EventManager_C::IsPlControl' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NoBindingInGamePlayers) == 0x002B40, "Member 'ABP_EventManager_C::NoBindingInGamePlayers' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, bEventEndAreaChangeWarp) == 0x002B50, "Member 'ABP_EventManager_C::bEventEndAreaChangeWarp' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, Store1_1PlMesh) == 0x002B58, "Member 'ABP_EventManager_C::Store1_1PlMesh' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, Store16_9PlMesh) == 0x002B60, "Member 'ABP_EventManager_C::Store16_9PlMesh' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PauseFlag) == 0x002B68, "Member 'ABP_EventManager_C::PauseFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SkipENPCCameraTable) == 0x002B70, "Member 'ABP_EventManager_C::SkipENPCCameraTable' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CameraInterpSpeed) == 0x002B78, "Member 'ABP_EventManager_C::CameraInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentAxiaRightX) == 0x002B7C, "Member 'ABP_EventManager_C::CurrentAxiaRightX' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CurrentAxisRightY) == 0x002B80, "Member 'ABP_EventManager_C::CurrentAxisRightY' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EaseInOutInterpSpeed) == 0x002B84, "Member 'ABP_EventManager_C::EaseInOutInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EaseInOutExp) == 0x002B88, "Member 'ABP_EventManager_C::EaseInOutExp' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsEaseInOutRotate) == 0x002B8C, "Member 'ABP_EventManager_C::IsEaseInOutRotate' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DA_STCameraControlParam) == 0x002B90, "Member 'ABP_EventManager_C::DA_STCameraControlParam' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OptionCameraPitch) == 0x002B98, "Member 'ABP_EventManager_C::OptionCameraPitch' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, OptionCameraYaw) == 0x002B99, "Member 'ABP_EventManager_C::OptionCameraYaw' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PhaseAnimSEList) == 0x002BA0, "Member 'ABP_EventManager_C::PhaseAnimSEList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NoRipSyncSDPressureTime) == 0x002BB0, "Member 'ABP_EventManager_C::NoRipSyncSDPressureTime' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NoSDPressureTimeThreshold) == 0x002BB4, "Member 'ABP_EventManager_C::NoSDPressureTimeThreshold' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventHiddenNeonWire) == 0x002BB8, "Member 'ABP_EventManager_C::EventHiddenNeonWire' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticHighResDelay) == 0x002BBC, "Member 'ABP_EventManager_C::StaticHighResDelay' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticGhostTrailCacheActor) == 0x002BC0, "Member 'ABP_EventManager_C::StaticGhostTrailCacheActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticGhostTrailCacheID) == 0x002BD0, "Member 'ABP_EventManager_C::StaticGhostTrailCacheID' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticGhostTrailCacheMeshComps) == 0x002BD8, "Member 'ABP_EventManager_C::StaticGhostTrailCacheMeshComps' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticGhostTrailCachePosableMeshComps) == 0x002BE8, "Member 'ABP_EventManager_C::StaticGhostTrailCachePosableMeshComps' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticGhostTrailCachePosableMeshComps2) == 0x002BF8, "Member 'ABP_EventManager_C::StaticGhostTrailCachePosableMeshComps2' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StaticGhostTrailCachePoseableLayer) == 0x002C08, "Member 'ABP_EventManager_C::StaticGhostTrailCachePoseableLayer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CrossFadePreparationRequired) == 0x002C0C, "Member 'ABP_EventManager_C::CrossFadePreparationRequired' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NameWidgetActor) == 0x002C10, "Member 'ABP_EventManager_C::NameWidgetActor' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsFindPlayerFacial) == 0x002C18, "Member 'ABP_EventManager_C::IsFindPlayerFacial' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, HiddenActorForTagNameDataList) == 0x002C20, "Member 'ABP_EventManager_C::HiddenActorForTagNameDataList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DispatchHiddenSetoMask) == 0x002C30, "Member 'ABP_EventManager_C::DispatchHiddenSetoMask' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SetSaveSequencerCharaTransform) == 0x002C40, "Member 'ABP_EventManager_C::SetSaveSequencerCharaTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, SetSaveSequencerCameraTransform) == 0x002C41, "Member 'ABP_EventManager_C::SetSaveSequencerCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CacheSaveSequencerCharaTransformPlayer) == 0x002C48, "Member 'ABP_EventManager_C::CacheSaveSequencerCharaTransformPlayer' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CacheSaveSequencerCharaTransformEnemy) == 0x002C58, "Member 'ABP_EventManager_C::CacheSaveSequencerCharaTransformEnemy' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CacheSaveSequencerCameraTransform) == 0x002C70, "Member 'ABP_EventManager_C::CacheSaveSequencerCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, ActorHiddenInGameFromTagNameCache) == 0x002CA0, "Member 'ABP_EventManager_C::ActorHiddenInGameFromTagNameCache' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsCalledSetupStaticScene) == 0x002CF0, "Member 'ABP_EventManager_C::IsCalledSetupStaticScene' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventPlayerDefaultCostume) == 0x002CF8, "Member 'ABP_EventManager_C::EventPlayerDefaultCostume' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, EventPlayerNoAttachments) == 0x002D08, "Member 'ABP_EventManager_C::EventPlayerNoAttachments' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsNoStopMoviePhaseChange) == 0x002D18, "Member 'ABP_EventManager_C::IsNoStopMoviePhaseChange' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, DisableStaticCameraControl) == 0x002D19, "Member 'ABP_EventManager_C::DisableStaticCameraControl' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsCalledStartStaticEvent) == 0x002D1A, "Member 'ABP_EventManager_C::IsCalledStartStaticEvent' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsCalledStartCameraCutDynamic) == 0x002D1B, "Member 'ABP_EventManager_C::IsCalledStartCameraCutDynamic' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, NoAddEventTriggerCmdFlag) == 0x002D1C, "Member 'ABP_EventManager_C::NoAddEventTriggerCmdFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, AjitoStayRandomDataList) == 0x002D20, "Member 'ABP_EventManager_C::AjitoStayRandomDataList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, IsLockOpenMenuFlag) == 0x002D70, "Member 'ABP_EventManager_C::IsLockOpenMenuFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, PresentSequencerList) == 0x002D78, "Member 'ABP_EventManager_C::PresentSequencerList' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, CharaBGTextureName) == 0x002D88, "Member 'ABP_EventManager_C::CharaBGTextureName' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, bStoreNameWidgetVisible) == 0x002D90, "Member 'ABP_EventManager_C::bStoreNameWidgetVisible' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StoreCharaNameVisibility) == 0x002D91, "Member 'ABP_EventManager_C::StoreCharaNameVisibility' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, StoreBossNameVisibility) == 0x002D92, "Member 'ABP_EventManager_C::StoreBossNameVisibility' has a wrong offset!");
static_assert(offsetof(ABP_EventManager_C, bEventBindEnemyTickOffFlag) == 0x002D93, "Member 'ABP_EventManager_C::bEventBindEnemyTickOffFlag' has a wrong offset!");

}

