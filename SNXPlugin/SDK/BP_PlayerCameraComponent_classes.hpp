#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerCameraComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerCameraComponent.BP_PlayerCameraComponent_C
// 0x01D0 (0x16F0 - 0x1520)
class UBP_PlayerCameraComponent_C final : public UPlayerCameraComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x1528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerController;                                  // 0x1530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x1538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       PlayerCameraComponent;                             // 0x1540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    PlayerSpringArmComponent;                          // 0x1548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftX;                                             // 0x1550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftY;                                             // 0x1554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightX;                                            // 0x1558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightY;                                            // 0x155C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HzSign;                                            // 0x1560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VtSign;                                            // 0x1564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTablePresetBasic;                              // 0x1568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTablePresetOffset;                             // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FPlayerCameraPreset> CameraPresetList;                                  // 0x1578(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DefaultAngleVt;                                    // 0x15C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAngleVtNew;                                 // 0x15CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAngleHz;                                    // 0x15D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinSpeedVt;                                       // 0x15D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinSpeedVtNew;                                    // 0x15D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinAccelVt;                                       // 0x15DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinDecelVt;                                       // 0x15E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinSpeedHz;                                       // 0x15E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinSpeedHzNew;                                    // 0x15E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinAccelHz;                                       // 0x15EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinDecelHz;                                       // 0x15F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleMinVt;                                        // 0x15F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleMinVtNew;                                     // 0x15F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleMaxVt;                                        // 0x15FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleMaxVtNew;                                     // 0x1600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputSpinRateHz;                               // 0x1604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputSpinDecelHz;                              // 0x1608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputAngleMinVt;                               // 0x160C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputAngleMaxVt;                               // 0x1610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CamCollRadius;                                     // 0x1614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CamDistLerpAccel;                                  // 0x1618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CamDistLerpSpeedMax;                               // 0x161C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootHeightDistY;                             // 0x1620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootHeightDistK;                             // 0x1624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootLerpDistMin;                             // 0x1628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootLerpDistMax;                             // 0x162C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootHeightAngleDistY;                        // 0x1630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootHeightAngleDistK;                        // 0x1634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootLerpAngleMin;                            // 0x1638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AssistRootLerpAngleMax;                            // 0x163C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawTriggerInfo;                             // 0x1640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40D5[0x7];                                     // 0x1641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CameraTriggerBox_C*>         DbTriggerBoxList;                                  // 0x1648(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             DebugDrawTimer;                                    // 0x1658(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DebugDrawTime;                                     // 0x1664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             DebugUpdateTimer;                                  // 0x1668(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DebugUpdateTime;                                   // 0x1674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FPlayerCameraPreset> CameraOffsetList;                                  // 0x1678(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bSuspendFlag;                                      // 0x16C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugUseNewPreset;                                // 0x16C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugCheckNewPreset;                              // 0x16CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerCameraPreset                           DebugPreset;                                       // 0x16CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugPresetPriority;                               // 0x16CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 DebugRecordListRadius;                             // 0x16D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FColor>                         DebugRecordListColor;                              // 0x16E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerCameraComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InitializeComponent();
	void Update();
	void Finalize();
	bool GetCameraPreset(EPlayerCameraPreset PresetName, struct FPlayerCameraPreset* DstPreset, bool bOffset);
	void SetPlayerCameraViewTarget(float blend_time_in, EViewTargetBlendFunction blend_func_in, float blend_exp_in, bool* Return);
	void SetPlayerCameraLocation(const struct FVector& Pos_in, bool* Return);
	void SetPlayerCameraRotation(const struct FRotator& Rot_in, bool* Return);
	void SetPlayerCameraDirection(const struct FVector& Dir_in, bool* Return);
	void SetPlayerCameraFieldOfView(float FOV, bool* Return);
	void GetPlayerCameraLocation(struct FVector* Location);
	void GetPlayerCameraRotation(struct FRotator* Rotation);
	void GetPlayerCameraDirection(struct FVector* Direction);
	void GetPlayerCameraFieldOfView(float* FOV);
	void UpdateControlRotation();
	void CheckLockOn();
	void CheckInputOld();
	void InitializeDebug();
	void DebugSetNoDelay(bool Flag_in);
	void DebugDrawPresetInfo();
	void DebugUpdatePreset(EPlayerCameraPreset Preset_in);
	void SetDebugDrawTriggerBox(bool Flag_in);
	void DebugDrawTriggerBox();
	void DebugUpdatePresetInterval();
	void ConvCameraPresetToRowName(EPlayerCameraPreset Preset_in, class FString* Row_name);
	void DebugDrawCameraInfo();
	void DebugDraw();
	void SetDebugLockOnLimitRateHz(bool Flag_in, float Limit_rate_hz_in);
	void DebugDrawAssistMain();
	void DebugDrawAssistSub();
	void LoadDataTable(class FName Row_name_in);
	void SetRootLerpActionType(bool Flag_in, EPlayerCameraActionType Action_type_in, const class FString& Ref_name_in, EPlayerCameraActionPriority Prio_in, float Inerpolation_time_in);
	void SuspendCamera();
	void ResumeCamera();
	void AreaChange(bool End_in);
	void SetEvent(bool End_in);
	void DebugSetUseNewPreset(bool Flag_in);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerCameraComponent_C">();
	}
	static class UBP_PlayerCameraComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerCameraComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerCameraComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerCameraComponent_C");
static_assert(sizeof(UBP_PlayerCameraComponent_C) == 0x0016F0, "Wrong size on UBP_PlayerCameraComponent_C");
static_assert(offsetof(UBP_PlayerCameraComponent_C, UberGraphFrame) == 0x001520, "Member 'UBP_PlayerCameraComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, OwnerPlayer) == 0x001528, "Member 'UBP_PlayerCameraComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, PlayerController) == 0x001530, "Member 'UBP_PlayerCameraComponent_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, PlayerCameraManager) == 0x001538, "Member 'UBP_PlayerCameraComponent_C::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, PlayerCameraComponent) == 0x001540, "Member 'UBP_PlayerCameraComponent_C::PlayerCameraComponent' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, PlayerSpringArmComponent) == 0x001548, "Member 'UBP_PlayerCameraComponent_C::PlayerSpringArmComponent' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, LeftX) == 0x001550, "Member 'UBP_PlayerCameraComponent_C::LeftX' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, LeftY) == 0x001554, "Member 'UBP_PlayerCameraComponent_C::LeftY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, RightX) == 0x001558, "Member 'UBP_PlayerCameraComponent_C::RightX' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, RightY) == 0x00155C, "Member 'UBP_PlayerCameraComponent_C::RightY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, HzSign) == 0x001560, "Member 'UBP_PlayerCameraComponent_C::HzSign' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, VtSign) == 0x001564, "Member 'UBP_PlayerCameraComponent_C::VtSign' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DataTablePresetBasic) == 0x001568, "Member 'UBP_PlayerCameraComponent_C::DataTablePresetBasic' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DataTablePresetOffset) == 0x001570, "Member 'UBP_PlayerCameraComponent_C::DataTablePresetOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, CameraPresetList) == 0x001578, "Member 'UBP_PlayerCameraComponent_C::CameraPresetList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DefaultAngleVt) == 0x0015C8, "Member 'UBP_PlayerCameraComponent_C::DefaultAngleVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DefaultAngleVtNew) == 0x0015CC, "Member 'UBP_PlayerCameraComponent_C::DefaultAngleVtNew' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DefaultAngleHz) == 0x0015D0, "Member 'UBP_PlayerCameraComponent_C::DefaultAngleHz' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinSpeedVt) == 0x0015D4, "Member 'UBP_PlayerCameraComponent_C::SpinSpeedVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinSpeedVtNew) == 0x0015D8, "Member 'UBP_PlayerCameraComponent_C::SpinSpeedVtNew' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinAccelVt) == 0x0015DC, "Member 'UBP_PlayerCameraComponent_C::SpinAccelVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinDecelVt) == 0x0015E0, "Member 'UBP_PlayerCameraComponent_C::SpinDecelVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinSpeedHz) == 0x0015E4, "Member 'UBP_PlayerCameraComponent_C::SpinSpeedHz' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinSpeedHzNew) == 0x0015E8, "Member 'UBP_PlayerCameraComponent_C::SpinSpeedHzNew' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinAccelHz) == 0x0015EC, "Member 'UBP_PlayerCameraComponent_C::SpinAccelHz' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, SpinDecelHz) == 0x0015F0, "Member 'UBP_PlayerCameraComponent_C::SpinDecelHz' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AngleMinVt) == 0x0015F4, "Member 'UBP_PlayerCameraComponent_C::AngleMinVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AngleMinVtNew) == 0x0015F8, "Member 'UBP_PlayerCameraComponent_C::AngleMinVtNew' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AngleMaxVt) == 0x0015FC, "Member 'UBP_PlayerCameraComponent_C::AngleMaxVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AngleMaxVtNew) == 0x001600, "Member 'UBP_PlayerCameraComponent_C::AngleMaxVtNew' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, MoveInputSpinRateHz) == 0x001604, "Member 'UBP_PlayerCameraComponent_C::MoveInputSpinRateHz' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, MoveInputSpinDecelHz) == 0x001608, "Member 'UBP_PlayerCameraComponent_C::MoveInputSpinDecelHz' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, MoveInputAngleMinVt) == 0x00160C, "Member 'UBP_PlayerCameraComponent_C::MoveInputAngleMinVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, MoveInputAngleMaxVt) == 0x001610, "Member 'UBP_PlayerCameraComponent_C::MoveInputAngleMaxVt' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, CamCollRadius) == 0x001614, "Member 'UBP_PlayerCameraComponent_C::CamCollRadius' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, CamDistLerpAccel) == 0x001618, "Member 'UBP_PlayerCameraComponent_C::CamDistLerpAccel' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, CamDistLerpSpeedMax) == 0x00161C, "Member 'UBP_PlayerCameraComponent_C::CamDistLerpSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootHeightDistY) == 0x001620, "Member 'UBP_PlayerCameraComponent_C::AssistRootHeightDistY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootHeightDistK) == 0x001624, "Member 'UBP_PlayerCameraComponent_C::AssistRootHeightDistK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootLerpDistMin) == 0x001628, "Member 'UBP_PlayerCameraComponent_C::AssistRootLerpDistMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootLerpDistMax) == 0x00162C, "Member 'UBP_PlayerCameraComponent_C::AssistRootLerpDistMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootHeightAngleDistY) == 0x001630, "Member 'UBP_PlayerCameraComponent_C::AssistRootHeightAngleDistY' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootHeightAngleDistK) == 0x001634, "Member 'UBP_PlayerCameraComponent_C::AssistRootHeightAngleDistK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootLerpAngleMin) == 0x001638, "Member 'UBP_PlayerCameraComponent_C::AssistRootLerpAngleMin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, AssistRootLerpAngleMax) == 0x00163C, "Member 'UBP_PlayerCameraComponent_C::AssistRootLerpAngleMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, bDebugDrawTriggerInfo) == 0x001640, "Member 'UBP_PlayerCameraComponent_C::bDebugDrawTriggerInfo' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DbTriggerBoxList) == 0x001648, "Member 'UBP_PlayerCameraComponent_C::DbTriggerBoxList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugDrawTimer) == 0x001658, "Member 'UBP_PlayerCameraComponent_C::DebugDrawTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugDrawTime) == 0x001664, "Member 'UBP_PlayerCameraComponent_C::DebugDrawTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugUpdateTimer) == 0x001668, "Member 'UBP_PlayerCameraComponent_C::DebugUpdateTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugUpdateTime) == 0x001674, "Member 'UBP_PlayerCameraComponent_C::DebugUpdateTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, CameraOffsetList) == 0x001678, "Member 'UBP_PlayerCameraComponent_C::CameraOffsetList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, bSuspendFlag) == 0x0016C8, "Member 'UBP_PlayerCameraComponent_C::bSuspendFlag' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, bDebugUseNewPreset) == 0x0016C9, "Member 'UBP_PlayerCameraComponent_C::bDebugUseNewPreset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, bDebugCheckNewPreset) == 0x0016CA, "Member 'UBP_PlayerCameraComponent_C::bDebugCheckNewPreset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugPreset) == 0x0016CB, "Member 'UBP_PlayerCameraComponent_C::DebugPreset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugPresetPriority) == 0x0016CC, "Member 'UBP_PlayerCameraComponent_C::DebugPresetPriority' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugRecordListRadius) == 0x0016D0, "Member 'UBP_PlayerCameraComponent_C::DebugRecordListRadius' has a wrong offset!");
static_assert(offsetof(UBP_PlayerCameraComponent_C, DebugRecordListColor) == 0x0016E0, "Member 'UBP_PlayerCameraComponent_C::DebugRecordListColor' has a wrong offset!");

}

