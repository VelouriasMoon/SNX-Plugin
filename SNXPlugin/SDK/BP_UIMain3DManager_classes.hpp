#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UIMain3DManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "ERenderTargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UIMain3DManager.BP_UIMain3DManager_C
// 0x0210 (0x04C0 - 0x02B0)
class ABP_UIMain3DManager_C final : public AUIMain3DManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDirectionalLightComponent*             PlayerLight;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_UIMain3DPlayerCapture_C*>    PlayerCapture;                                     // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FName, class ABP_MenuPlayerBase_C*> MenuPlayer;                                        // 0x02D8(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<class FName, TSoftClassPtr<class UClass>> MenuPlayerAsset;                                   // 0x0328(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class ABP_UIMain3DBG_C*                       MenuBG;                                            // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APostProcessVolume*>             RestorePPV;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  RestorePPVEnabled;                                 // 0x0390(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FUIMain3DManagerEquipData>      EquipData;                                         // 0x03A0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SelectPlayerUniqueID;                              // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChangeTargetPlayerUniqueID;                        // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUIMain3DEquipCameraID                        EquipCameraID;                                     // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUIMain3DEquipSelectID                        EquipSelectID;                                     // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUIMain3DCharacterSceneID                     SelectSceneID;                                     // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9624[0x1];                                     // 0x03BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               GeneralPlayerLightRotation;                        // 0x03BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InViewMode;                                        // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9625[0x7];                                     // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ViewModeRestoreCameraTransform;                    // 0x03D0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ViewModeRestoreOverrideViewRect;                   // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9626[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewModeViewLocation;                              // 0x0404(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ViewModeViewLocationDefault;                       // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ViewModeCameraLocation;                            // 0x041C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewModeZoom;                                      // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewModeScreenLocationX;                           // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewModeScreenLocationY;                           // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUIMain3DViewModeSetting               ViewModeSetting;                                   // 0x0434(0x0024)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	FMulticastInlineDelegateProperty_             ED_OpenMenu;                                       // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                PlayerDTOffsetLocation;                            // 0x0468(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PlayerDTOffsetRotation;                            // 0x0474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsVaridCharaMove;                                  // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9627[0x3];                                     // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MouseRotation;                                     // 0x0484(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MouseLocation;                                     // 0x048C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 RectAngle;                                         // 0x0494(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	EOptionCameraYaw                              CameraYaw;                                         // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOptionCameraPitch                            CameraPitch;                                       // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          beforeAttachVisibility;                            // 0x04AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          beforeCharaVisibility;                             // 0x04AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ParamReverseRStickPitch;                           // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParamReverseRStickYaw;                             // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ED_OpenMenu__DelegateSignature();
	void ExecuteUbergraph_BP_UIMain3DManager(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void LoadAsset();
	void GetMenuPlayer(int32 PlayerUniqueID, class ABP_MenuPlayerBase_C** Param_MenuPlayer, bool* IsFind, int32* Param_Index);
	void PrivateSetPlayer(int32 PlayerUniqueID, class ABP_UIMain3DPlayerCapture_C* TargetCapture);
	void PrivateGetSelectCapture(class ABP_UIMain3DPlayerCapture_C** Capture);
	void PrivateGetChangeTargetCapture(class ABP_UIMain3DPlayerCapture_C** Capture);
	void Initialize();
	void SetScene(EUIMain3DCharacterSceneID SceneID);
	void GetSelectTexture(class UTextureRenderTarget2D** RenderTarget, class UTextureRenderTarget2D** RenderTargetAlpha);
	void GetChangeTargetTexture(class UTextureRenderTarget2D** RenderTarget, class UTextureRenderTarget2D** RenderTargetAlpha);
	void Start();
	void End();
	void SetSelectPlayer(int32 PlayerUniqueID);
	void SetChangeTargetPlayer(int32 PlayerUniqueID);
	void InitializePlayer();
	void InitializeBG();
	void ResetBGCameraParameter();
	void GetSelectNoiseRate(float* NoiseRate);
	void GetChangeTargetNoiseRate(float* NoiseRate);
	void PrivateSetupMenuPP();
	void PrivateRestoreScenePP();
	void StartSelectPlayerNoise(bool Reverse);
	void StartChangeTargetPlayerNoise();
	void ReloadGeneralSetting();
	void SetEquipWeapon(const struct FItemDataCell& ItemData);
	void SetEquipCostume(const struct FItemDataCell& ItemData);
	void SetEquipAttachment(int32 AttachmentIndex, const struct FItemDataCell& ItemData);
	void SetEquipSelected(EUIMain3DEquipSelectID InSelect, int32 AttachmentIndex);
	void StartViewMode();
	void EndViewMode();
	void PrivateGetEquipMenuPlayer(class ABP_MenuPlayerBase_C** Param_MenuPlayer, bool* IsFind, int32* Param_Index);
	void PrivateSetEquipCameraID(EUIMain3DEquipCameraID CameraID, bool ResetRotation);
	void DebugSetEquipCameraID(EUIMain3DEquipCameraID CameraID);
	void PrivateSetupEquipData(bool IsPosition, bool IsRotation);
	void PrivateUpdatePlayerLightRotation(const struct FRotator& Rotation);
	void PrivatePlayAnimation(class ABP_MenuPlayerBase_C* InMenuPlayer);
	void PrivateGetAnimationNo(EUIMain3DCharacterSceneID InSceneID, EUIMain3DEquipSelectID InEquipSelectID, EUIMain3DPlayerAnimationType* AnimType);
	void PrivatePlayAnimationFromNo(class ABP_MenuPlayerBase_C* InMenuPlayer, EUIMain3DPlayerAnimationType AnimType);
	void PrivatePlayAnimationCheckChange(class ABP_MenuPlayerBase_C* InMenuPlayer, EUIMain3DCharacterSceneID LastSceneID, EUIMain3DCharacterSceneID NowSceneID, EUIMain3DEquipSelectID LastEquipSelectID, EUIMain3DEquipSelectID NowEquipSelectID);
	void PrivateUpdateViewMode(float DeltaSeconds);
	void PrivateUpdateViewModeRotation(float DeltaSeconds, float InputX, float InputY);
	void PrivateUpdateViewModeLocation(float DeltaSeconds, float InputX, float InputY);
	void PrivateUpdateViewModeZoom(float DeltaSeconds, float InputIn, float InputOut);
	void PrivateResetViewModeCamera(bool IsCamera, bool IsCharaPosition, bool IsCharaRotation);
	void PrivateResetViewModeDataTable();
	void HideScene();
	void EventOpenMenu();
	void SetPlayerLocationAndRotation(const struct FVector& OuterOffsetLocation, const struct FRotator& OuterOffsetRotation);
	void PrivateUpdateInputRotation(float DeltaSeconds);
	void SetCharaMoveMode(bool CharaMoveFlag);
	void ResetDTOffset();
	void SetPlayerLocationAndRotationFromDataTable();
	void SetRect(const struct FBox2D& Param_RectAngle);
	void PrivateUpdateMouseInputRotation(float DeltaSeconds);
	void PrivateUpdateMouseInputLocation(float DeltaSeconds);
	void PrivateUpdateMouseInputZoom(float DeltaSeconds);
	void OptionParamUpdate();
	void SetEquipWeaponFromID(int32 ItemId);
	void SetEquipCostumeFromID(int32 ItemId);
	void SetEquipAttachmentFromID(int32 AttachmentIndex, int32 ItemId);
	void SetupEquipALL();
	void PrivateGetCurrentPlayerID(EPlayerID* Result);
	void PrivateUpdateDispEquipAll(const struct FPlayerInfo& PlayerInfo);
	void SetupEquipALL_SelectItem(int32 CursorCategory, int32 SelectID);
	void PrivateSetupCamera(EUIMain3DEquipSelectID InSelectID, int32 AttachmentIndex);
	void SetupEquipALL_SelectWeapon(int32 CursorCategory, int32 SelectID);
	void DebugGetSelectPlayerCapture(class ABP_UIMain3DPlayerCapture_C** Capture);
	void PrivateResetRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget);
	void SetupEquipALL_SelectItemAttachmentAll(int32 SelectAttachment0, int32 SelectAttachment1, int32 SelectAttachment2, int32 CameraTargetAttachmentNo);
	void ControlVisibilityAtTextureMip();
	void ControlGenmaWeponVisibility(class ABP_MenuPlayerBase_C* Param_MenuPlayer);

	void IsInViewMode(bool* IsViewMode) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UIMain3DManager_C">();
	}
	static class ABP_UIMain3DManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UIMain3DManager_C>();
	}
};
static_assert(alignof(ABP_UIMain3DManager_C) == 0x000010, "Wrong alignment on ABP_UIMain3DManager_C");
static_assert(sizeof(ABP_UIMain3DManager_C) == 0x0004C0, "Wrong size on ABP_UIMain3DManager_C");
static_assert(offsetof(ABP_UIMain3DManager_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_UIMain3DManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, PlayerLight) == 0x0002B8, "Member 'ABP_UIMain3DManager_C::PlayerLight' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_UIMain3DManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, PlayerCapture) == 0x0002C8, "Member 'ABP_UIMain3DManager_C::PlayerCapture' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, MenuPlayer) == 0x0002D8, "Member 'ABP_UIMain3DManager_C::MenuPlayer' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, MenuPlayerAsset) == 0x000328, "Member 'ABP_UIMain3DManager_C::MenuPlayerAsset' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, MenuBG) == 0x000378, "Member 'ABP_UIMain3DManager_C::MenuBG' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, RestorePPV) == 0x000380, "Member 'ABP_UIMain3DManager_C::RestorePPV' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, RestorePPVEnabled) == 0x000390, "Member 'ABP_UIMain3DManager_C::RestorePPVEnabled' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, EquipData) == 0x0003A0, "Member 'ABP_UIMain3DManager_C::EquipData' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, SelectPlayerUniqueID) == 0x0003B0, "Member 'ABP_UIMain3DManager_C::SelectPlayerUniqueID' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ChangeTargetPlayerUniqueID) == 0x0003B4, "Member 'ABP_UIMain3DManager_C::ChangeTargetPlayerUniqueID' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, EquipCameraID) == 0x0003B8, "Member 'ABP_UIMain3DManager_C::EquipCameraID' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, EquipSelectID) == 0x0003B9, "Member 'ABP_UIMain3DManager_C::EquipSelectID' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, SelectSceneID) == 0x0003BA, "Member 'ABP_UIMain3DManager_C::SelectSceneID' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, GeneralPlayerLightRotation) == 0x0003BC, "Member 'ABP_UIMain3DManager_C::GeneralPlayerLightRotation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, InViewMode) == 0x0003C8, "Member 'ABP_UIMain3DManager_C::InViewMode' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeRestoreCameraTransform) == 0x0003D0, "Member 'ABP_UIMain3DManager_C::ViewModeRestoreCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeRestoreOverrideViewRect) == 0x000400, "Member 'ABP_UIMain3DManager_C::ViewModeRestoreOverrideViewRect' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeViewLocation) == 0x000404, "Member 'ABP_UIMain3DManager_C::ViewModeViewLocation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeViewLocationDefault) == 0x000410, "Member 'ABP_UIMain3DManager_C::ViewModeViewLocationDefault' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeCameraLocation) == 0x00041C, "Member 'ABP_UIMain3DManager_C::ViewModeCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeZoom) == 0x000428, "Member 'ABP_UIMain3DManager_C::ViewModeZoom' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeScreenLocationX) == 0x00042C, "Member 'ABP_UIMain3DManager_C::ViewModeScreenLocationX' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeScreenLocationY) == 0x000430, "Member 'ABP_UIMain3DManager_C::ViewModeScreenLocationY' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ViewModeSetting) == 0x000434, "Member 'ABP_UIMain3DManager_C::ViewModeSetting' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ED_OpenMenu) == 0x000458, "Member 'ABP_UIMain3DManager_C::ED_OpenMenu' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, PlayerDTOffsetLocation) == 0x000468, "Member 'ABP_UIMain3DManager_C::PlayerDTOffsetLocation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, PlayerDTOffsetRotation) == 0x000474, "Member 'ABP_UIMain3DManager_C::PlayerDTOffsetRotation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, IsVaridCharaMove) == 0x000480, "Member 'ABP_UIMain3DManager_C::IsVaridCharaMove' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, MouseRotation) == 0x000484, "Member 'ABP_UIMain3DManager_C::MouseRotation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, MouseLocation) == 0x00048C, "Member 'ABP_UIMain3DManager_C::MouseLocation' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, RectAngle) == 0x000494, "Member 'ABP_UIMain3DManager_C::RectAngle' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, CameraYaw) == 0x0004A8, "Member 'ABP_UIMain3DManager_C::CameraYaw' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, CameraPitch) == 0x0004A9, "Member 'ABP_UIMain3DManager_C::CameraPitch' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, beforeAttachVisibility) == 0x0004AA, "Member 'ABP_UIMain3DManager_C::beforeAttachVisibility' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, beforeCharaVisibility) == 0x0004AB, "Member 'ABP_UIMain3DManager_C::beforeCharaVisibility' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ParamReverseRStickPitch) == 0x0004AC, "Member 'ABP_UIMain3DManager_C::ParamReverseRStickPitch' has a wrong offset!");
static_assert(offsetof(ABP_UIMain3DManager_C, ParamReverseRStickYaw) == 0x0004B0, "Member 'ABP_UIMain3DManager_C::ParamReverseRStickYaw' has a wrong offset!");

}

