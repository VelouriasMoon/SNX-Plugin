#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameSystemManager

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BP_GameSystemManager.BP_GameSystemManager_C.ExecuteUbergraph_BP_GameSystemManager
// 0x0004 (0x0004 - 0x0000)
struct BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager) == 0x000004, "Wrong alignment on BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager");
static_assert(sizeof(BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager) == 0x000004, "Wrong size on BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager");
static_assert(offsetof(BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager, EntryPoint) == 0x000000, "Member 'BP_GameSystemManager_C_ExecuteUbergraph_BP_GameSystemManager::EntryPoint' has a wrong offset!");

// Function BP_GameSystemManager.BP_GameSystemManager_C.InitializeManager
// 0x0002 (0x0002 - 0x0000)
struct BP_GameSystemManager_C_InitializeManager final
{
public:
	EManagerProcTiming                            Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSystemManager_C_InitializeManager) == 0x000001, "Wrong alignment on BP_GameSystemManager_C_InitializeManager");
static_assert(sizeof(BP_GameSystemManager_C_InitializeManager) == 0x000002, "Wrong size on BP_GameSystemManager_C_InitializeManager");
static_assert(offsetof(BP_GameSystemManager_C_InitializeManager, Timing) == 0x000000, "Member 'BP_GameSystemManager_C_InitializeManager::Timing' has a wrong offset!");
static_assert(offsetof(BP_GameSystemManager_C_InitializeManager, ReturnValue) == 0x000001, "Member 'BP_GameSystemManager_C_InitializeManager::ReturnValue' has a wrong offset!");

// Function BP_GameSystemManager.BP_GameSystemManager_C.FinalizeManager
// 0x0002 (0x0002 - 0x0000)
struct BP_GameSystemManager_C_FinalizeManager final
{
public:
	EManagerProcTiming                            Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSystemManager_C_FinalizeManager) == 0x000001, "Wrong alignment on BP_GameSystemManager_C_FinalizeManager");
static_assert(sizeof(BP_GameSystemManager_C_FinalizeManager) == 0x000002, "Wrong size on BP_GameSystemManager_C_FinalizeManager");
static_assert(offsetof(BP_GameSystemManager_C_FinalizeManager, Timing) == 0x000000, "Member 'BP_GameSystemManager_C_FinalizeManager::Timing' has a wrong offset!");
static_assert(offsetof(BP_GameSystemManager_C_FinalizeManager, ReturnValue) == 0x000001, "Member 'BP_GameSystemManager_C_FinalizeManager::ReturnValue' has a wrong offset!");

// Function BP_GameSystemManager.BP_GameSystemManager_C.IsNeedFrameWait
// 0x0001 (0x0001 - 0x0000)
struct BP_GameSystemManager_C_IsNeedFrameWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSystemManager_C_IsNeedFrameWait) == 0x000001, "Wrong alignment on BP_GameSystemManager_C_IsNeedFrameWait");
static_assert(sizeof(BP_GameSystemManager_C_IsNeedFrameWait) == 0x000001, "Wrong size on BP_GameSystemManager_C_IsNeedFrameWait");
static_assert(offsetof(BP_GameSystemManager_C_IsNeedFrameWait, ReturnValue) == 0x000000, "Member 'BP_GameSystemManager_C_IsNeedFrameWait::ReturnValue' has a wrong offset!");

}

