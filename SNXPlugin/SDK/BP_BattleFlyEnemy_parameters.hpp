#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleFlyEnemy

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.ExecuteUbergraph_BP_BattleFlyEnemy
// 0x0060 (0x0060 - 0x0000)
struct BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D9[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FlyEnemyPawnBase_C*                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy) == 0x000010, "Wrong alignment on BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy");
static_assert(sizeof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy) == 0x000060, "Wrong size on BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, EntryPoint) == 0x000000, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, CallFunc_MakeLiteralByte_ReturnValue) == 0x000050, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, K2Node_Event_EndPlayReason) == 0x000051, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy, CallFunc_IsValid_ReturnValue) == 0x000052, "Member 'BP_BattleFlyEnemy_C_ExecuteUbergraph_BP_BattleFlyEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleFlyEnemy_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_BattleFlyEnemy_C_ReceiveEndPlay");
static_assert(sizeof(BP_BattleFlyEnemy_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_BattleFlyEnemy_C_ReceiveEndPlay");
static_assert(offsetof(BP_BattleFlyEnemy_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_BattleFlyEnemy_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BattleFlyEnemy_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_ReceiveTick");
static_assert(sizeof(BP_BattleFlyEnemy_C_ReceiveTick) == 0x000004, "Wrong size on BP_BattleFlyEnemy_C_ReceiveTick");
static_assert(offsetof(BP_BattleFlyEnemy_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BattleFlyEnemy_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.MainTick
// 0x0190 (0x0190 - 0x0000)
struct BP_BattleFlyEnemy_C_MainTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11DA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LActorLocation;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbPossibleGroundCheck;                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11DB[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecideZ;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DC[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      GroundType;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         FlyPawnZ;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LRootLocation;                                     // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MainTick_Dummy;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11DD[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRootLocation_RootLocation;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11DE[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRootLocation_RootLocation_1;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateSetFlying_ReturnValue;              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11DF[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateFlyMoveSlopeRestoreSeconds_ReturnValue; // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashSuccess_ReturnValue;          // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateGroundCheckTimer_ReturnValue;       // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E0[0x9];                                     // 0x0087(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_BattleFlyEnemy_C_MainTick) == 0x000010, "Wrong alignment on BP_BattleFlyEnemy_C_MainTick");
static_assert(sizeof(BP_BattleFlyEnemy_C_MainTick) == 0x000190, "Wrong size on BP_BattleFlyEnemy_C_MainTick");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, DeltaSeconds) == 0x000000, "Member 'BP_BattleFlyEnemy_C_MainTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, Dummy) == 0x000004, "Member 'BP_BattleFlyEnemy_C_MainTick::Dummy' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, LActorLocation) == 0x000008, "Member 'BP_BattleFlyEnemy_C_MainTick::LActorLocation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, LbPossibleGroundCheck) == 0x000014, "Member 'BP_BattleFlyEnemy_C_MainTick::LbPossibleGroundCheck' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, DecideZ) == 0x000018, "Member 'BP_BattleFlyEnemy_C_MainTick::DecideZ' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, GroundType) == 0x000020, "Member 'BP_BattleFlyEnemy_C_MainTick::GroundType' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, FlyPawnZ) == 0x000030, "Member 'BP_BattleFlyEnemy_C_MainTick::FlyPawnZ' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, LRootLocation) == 0x000034, "Member 'BP_BattleFlyEnemy_C_MainTick::LRootLocation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_MainTick_Dummy) == 0x000040, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_MainTick_Dummy' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_GetRootLocation_RootLocation) == 0x000044, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_GetRootLocation_RootLocation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_IsDead_bDead) == 0x000050, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, K2Node_MakeArray_Array) == 0x000058, "Member 'BP_BattleFlyEnemy_C_MainTick::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_GetRootLocation_RootLocation_1) == 0x000068, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_GetRootLocation_RootLocation_1' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_UpdateSetFlying_ReturnValue) == 0x000074, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_UpdateSetFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000078, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_UpdateFlyMoveSlopeRestoreSeconds_ReturnValue) == 0x000084, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_UpdateFlyMoveSlopeRestoreSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_IsBrainCrashSuccess_ReturnValue) == 0x000085, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_IsBrainCrashSuccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_UpdateGroundCheckTimer_ReturnValue) == 0x000086, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_UpdateGroundCheckTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_GetTransform_ReturnValue) == 0x000090, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_BreakTransform_Rotation) == 0x0000CC, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E4, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_BreakVector_X) == 0x0000F0, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_BreakVector_Y) == 0x0000F4, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_BreakVector_Z) == 0x0000F8, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_MakeVector_ReturnValue) == 0x0000FC, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_MainTick, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000108, "Member 'BP_BattleFlyEnemy_C_MainTick::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.SetFlying
// 0x000C (0x000C - 0x0000)
struct BP_BattleFlyEnemy_C_SetFlying final
{
public:
	bool                                          Param_IsFlying;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LFlyName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_SetFlying) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_SetFlying");
static_assert(sizeof(BP_BattleFlyEnemy_C_SetFlying) == 0x00000C, "Wrong size on BP_BattleFlyEnemy_C_SetFlying");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetFlying, Param_IsFlying) == 0x000000, "Member 'BP_BattleFlyEnemy_C_SetFlying::Param_IsFlying' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetFlying, LFlyName) == 0x000004, "Member 'BP_BattleFlyEnemy_C_SetFlying::LFlyName' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.FlyHeightAdjust
// 0x002C (0x002C - 0x0000)
struct BP_BattleFlyEnemy_C_FlyHeightAdjust final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyBaseZ;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LActorLocation;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LNewHeight;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAddHeight;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHighestLimit;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LLowerLimit;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDir;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LActorLocationZ;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_FlyHeightAdjust) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_FlyHeightAdjust");
static_assert(sizeof(BP_BattleFlyEnemy_C_FlyHeightAdjust) == 0x00002C, "Wrong size on BP_BattleFlyEnemy_C_FlyHeightAdjust");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, DeltaSeconds) == 0x000000, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, FlyBaseZ) == 0x000004, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::FlyBaseZ' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LActorLocation) == 0x000008, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LActorLocation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LNewHeight) == 0x000014, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LNewHeight' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LAddHeight) == 0x000018, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LAddHeight' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LHighestLimit) == 0x00001C, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LHighestLimit' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LLowerLimit) == 0x000020, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LLowerLimit' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LDir) == 0x000024, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LDir' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_FlyHeightAdjust, LActorLocationZ) == 0x000028, "Member 'BP_BattleFlyEnemy_C_FlyHeightAdjust::LActorLocationZ' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.InitializeHeight
// 0x0014 (0x0014 - 0x0000)
struct BP_BattleFlyEnemy_C_InitializeHeight final
{
public:
	float                                         LowerHeight;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HightestHeight;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E2[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LFlyName;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_InitializeHeight) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_InitializeHeight");
static_assert(sizeof(BP_BattleFlyEnemy_C_InitializeHeight) == 0x000014, "Wrong size on BP_BattleFlyEnemy_C_InitializeHeight");
static_assert(offsetof(BP_BattleFlyEnemy_C_InitializeHeight, LowerHeight) == 0x000000, "Member 'BP_BattleFlyEnemy_C_InitializeHeight::LowerHeight' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_InitializeHeight, HightestHeight) == 0x000004, "Member 'BP_BattleFlyEnemy_C_InitializeHeight::HightestHeight' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_InitializeHeight, Dummy) == 0x000008, "Member 'BP_BattleFlyEnemy_C_InitializeHeight::Dummy' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_InitializeHeight, LFlyName) == 0x00000C, "Member 'BP_BattleFlyEnemy_C_InitializeHeight::LFlyName' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.IsCanFlyModeChange
// 0x0010 (0x0010 - 0x0000)
struct BP_BattleFlyEnemy_C_IsCanFlyModeChange final
{
public:
	bool                                          IsFlyModeChange;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LFlyName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_IsCanFlyModeChange) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_IsCanFlyModeChange");
static_assert(sizeof(BP_BattleFlyEnemy_C_IsCanFlyModeChange) == 0x000010, "Wrong size on BP_BattleFlyEnemy_C_IsCanFlyModeChange");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsCanFlyModeChange, IsFlyModeChange) == 0x000000, "Member 'BP_BattleFlyEnemy_C_IsCanFlyModeChange::IsFlyModeChange' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsCanFlyModeChange, LFlyName) == 0x000004, "Member 'BP_BattleFlyEnemy_C_IsCanFlyModeChange::LFlyName' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsCanFlyModeChange, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_BattleFlyEnemy_C_IsCanFlyModeChange::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.IsFlyHeightAdjust
// 0x0003 (0x0003 - 0x0000)
struct BP_BattleFlyEnemy_C_IsFlyHeightAdjust final
{
public:
	bool                                          Param_IsFlyHeightAdjust;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LFlyHeightAdjust;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyHeightAdjust_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_IsFlyHeightAdjust) == 0x000001, "Wrong alignment on BP_BattleFlyEnemy_C_IsFlyHeightAdjust");
static_assert(sizeof(BP_BattleFlyEnemy_C_IsFlyHeightAdjust) == 0x000003, "Wrong size on BP_BattleFlyEnemy_C_IsFlyHeightAdjust");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsFlyHeightAdjust, Param_IsFlyHeightAdjust) == 0x000000, "Member 'BP_BattleFlyEnemy_C_IsFlyHeightAdjust::Param_IsFlyHeightAdjust' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsFlyHeightAdjust, LFlyHeightAdjust) == 0x000001, "Member 'BP_BattleFlyEnemy_C_IsFlyHeightAdjust::LFlyHeightAdjust' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsFlyHeightAdjust, CallFunc_IsFlyHeightAdjust_ReturnValue) == 0x000002, "Member 'BP_BattleFlyEnemy_C_IsFlyHeightAdjust::CallFunc_IsFlyHeightAdjust_ReturnValue' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.LaunchDown
// 0x0002 (0x0002 - 0x0000)
struct BP_BattleFlyEnemy_C_LaunchDown final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LaunchDown_IsEnd;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_LaunchDown) == 0x000001, "Wrong alignment on BP_BattleFlyEnemy_C_LaunchDown");
static_assert(sizeof(BP_BattleFlyEnemy_C_LaunchDown) == 0x000002, "Wrong size on BP_BattleFlyEnemy_C_LaunchDown");
static_assert(offsetof(BP_BattleFlyEnemy_C_LaunchDown, IsEnd) == 0x000000, "Member 'BP_BattleFlyEnemy_C_LaunchDown::IsEnd' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_LaunchDown, CallFunc_LaunchDown_IsEnd) == 0x000001, "Member 'BP_BattleFlyEnemy_C_LaunchDown::CallFunc_LaunchDown_IsEnd' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.ScaleMaxSpeed
// 0x0010 (0x0010 - 0x0000)
struct BP_BattleFlyEnemy_C_ScaleMaxSpeed final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_ScaleMaxSpeed) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_ScaleMaxSpeed");
static_assert(sizeof(BP_BattleFlyEnemy_C_ScaleMaxSpeed) == 0x000010, "Wrong size on BP_BattleFlyEnemy_C_ScaleMaxSpeed");
static_assert(offsetof(BP_BattleFlyEnemy_C_ScaleMaxSpeed, Scale) == 0x000000, "Member 'BP_BattleFlyEnemy_C_ScaleMaxSpeed::Scale' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ScaleMaxSpeed, ClaimantName) == 0x000004, "Member 'BP_BattleFlyEnemy_C_ScaleMaxSpeed::ClaimantName' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ScaleMaxSpeed, Result) == 0x00000C, "Member 'BP_BattleFlyEnemy_C_ScaleMaxSpeed::Result' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ScaleMaxSpeed, CallFunc_ScaleMaxSpeed_Result) == 0x00000D, "Member 'BP_BattleFlyEnemy_C_ScaleMaxSpeed::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ScaleMaxSpeed, CallFunc_IsValid_ReturnValue) == 0x00000E, "Member 'BP_BattleFlyEnemy_C_ScaleMaxSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_ScaleMaxSpeed, CallFunc_IsValid_ReturnValue_1) == 0x00000F, "Member 'BP_BattleFlyEnemy_C_ScaleMaxSpeed::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.Initialize Max Speed
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleFlyEnemy_C_Initialize_Max_Speed final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_Initialize_Max_Speed) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_Initialize_Max_Speed");
static_assert(sizeof(BP_BattleFlyEnemy_C_Initialize_Max_Speed) == 0x000008, "Wrong size on BP_BattleFlyEnemy_C_Initialize_Max_Speed");
static_assert(offsetof(BP_BattleFlyEnemy_C_Initialize_Max_Speed, MaxSpeed) == 0x000000, "Member 'BP_BattleFlyEnemy_C_Initialize_Max_Speed::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_Initialize_Max_Speed, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_BattleFlyEnemy_C_Initialize_Max_Speed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_Initialize_Max_Speed, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'BP_BattleFlyEnemy_C_Initialize_Max_Speed::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.SetActorAllTickEnabled
// 0x0004 (0x0004 - 0x0000)
struct BP_BattleFlyEnemy_C_SetActorAllTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_SetActorAllTickEnabled) == 0x000001, "Wrong alignment on BP_BattleFlyEnemy_C_SetActorAllTickEnabled");
static_assert(sizeof(BP_BattleFlyEnemy_C_SetActorAllTickEnabled) == 0x000004, "Wrong size on BP_BattleFlyEnemy_C_SetActorAllTickEnabled");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetActorAllTickEnabled, bEnabled) == 0x000000, "Member 'BP_BattleFlyEnemy_C_SetActorAllTickEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetActorAllTickEnabled, ReturnValue) == 0x000001, "Member 'BP_BattleFlyEnemy_C_SetActorAllTickEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetActorAllTickEnabled, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000002, "Member 'BP_BattleFlyEnemy_C_SetActorAllTickEnabled::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_BattleFlyEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.SetFlyModeChangeIgnoreSeconds
// 0x0004 (0x0004 - 0x0000)
struct BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds final
{
public:
	float                                         Param_FlyModeChangeIgnoreSeconds;                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds");
static_assert(sizeof(BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds) == 0x000004, "Wrong size on BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds, Param_FlyModeChangeIgnoreSeconds) == 0x000000, "Member 'BP_BattleFlyEnemy_C_SetFlyModeChangeIgnoreSeconds::Param_FlyModeChangeIgnoreSeconds' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.SetAreaOutActorLocation
// 0x009C (0x009C - 0x0000)
struct BP_BattleFlyEnemy_C_SetAreaOutActorLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAreaOutActorLocation_Return;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E4[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_SetAreaOutActorLocation");
static_assert(sizeof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation) == 0x00009C, "Wrong size on BP_BattleFlyEnemy_C_SetAreaOutActorLocation");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation, NewLocation) == 0x000000, "Member 'BP_BattleFlyEnemy_C_SetAreaOutActorLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation, Return) == 0x00000C, "Member 'BP_BattleFlyEnemy_C_SetAreaOutActorLocation::Return' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation, CallFunc_SetAreaOutActorLocation_Return) == 0x00000D, "Member 'BP_BattleFlyEnemy_C_SetAreaOutActorLocation::CallFunc_SetAreaOutActorLocation_Return' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation, CallFunc_IsValid_ReturnValue) == 0x00000E, "Member 'BP_BattleFlyEnemy_C_SetAreaOutActorLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000010, "Member 'BP_BattleFlyEnemy_C_SetAreaOutActorLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_SetAreaOutActorLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000098, "Member 'BP_BattleFlyEnemy_C_SetAreaOutActorLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.GetEnemyBaseLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_BattleFlyEnemy_C_GetEnemyBaseLocation final
{
public:
	struct FVector                                baseLocation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_GetEnemyBaseLocation) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_GetEnemyBaseLocation");
static_assert(sizeof(BP_BattleFlyEnemy_C_GetEnemyBaseLocation) == 0x000018, "Wrong size on BP_BattleFlyEnemy_C_GetEnemyBaseLocation");
static_assert(offsetof(BP_BattleFlyEnemy_C_GetEnemyBaseLocation, baseLocation) == 0x000000, "Member 'BP_BattleFlyEnemy_C_GetEnemyBaseLocation::baseLocation' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_GetEnemyBaseLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_BattleFlyEnemy_C_GetEnemyBaseLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.IsFlyEnemyCheck
// 0x0002 (0x0002 - 0x0000)
struct BP_BattleFlyEnemy_C_IsFlyEnemyCheck final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BattleFlyEnemy_C_IsFlyEnemyCheck) == 0x000001, "Wrong alignment on BP_BattleFlyEnemy_C_IsFlyEnemyCheck");
static_assert(sizeof(BP_BattleFlyEnemy_C_IsFlyEnemyCheck) == 0x000002, "Wrong size on BP_BattleFlyEnemy_C_IsFlyEnemyCheck");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsFlyEnemyCheck, NewParam) == 0x000000, "Member 'BP_BattleFlyEnemy_C_IsFlyEnemyCheck::NewParam' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_IsFlyEnemyCheck, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000001, "Member 'BP_BattleFlyEnemy_C_IsFlyEnemyCheck::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");

// Function BP_BattleFlyEnemy.BP_BattleFlyEnemy_C.GetCharacterMovementLocationSimple
// 0x0024 (0x0024 - 0x0000)
struct BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple) == 0x000004, "Wrong alignment on BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple");
static_assert(sizeof(BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple) == 0x000024, "Wrong size on BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple");
static_assert(offsetof(BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple, ReturnValue) == 0x000000, "Member 'BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple, L_Location) == 0x00000C, "Member 'BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple::L_Location' has a wrong offset!");
static_assert(offsetof(BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_BattleFlyEnemy_C_GetCharacterMovementLocationSimple::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

}

