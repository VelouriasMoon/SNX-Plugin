#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CounterComponent

#include "Basic.hpp"

#include "BP_CounterComponent_classes.hpp"
#include "BP_CounterComponent_parameters.hpp"


namespace SDK
{

// Function BP_CounterComponent.BP_CounterComponent_C.ExecuteUbergraph_BP_CounterComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CounterComponent_C::ExecuteUbergraph_BP_CounterComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "ExecuteUbergraph_BP_CounterComponent");

	Params::BP_CounterComponent_C_ExecuteUbergraph_BP_CounterComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CounterComponent.BP_CounterComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CounterComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "ReceiveTick");

	Params::BP_CounterComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CounterComponent.BP_CounterComponent_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Auto_counter_rate_in                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Auto_counter_radius_rate_in                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Auto_counter_half_height_rate_in                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Cool_down_time_min_in                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Cool_down_time_max_in                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CounterComponent_C::Initialize(int32 Auto_counter_rate_in, float Auto_counter_radius_rate_in, float Auto_counter_half_height_rate_in, float Cool_down_time_min_in, float Cool_down_time_max_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "Initialize");

	Params::BP_CounterComponent_C_Initialize Parms{};

	Parms.Auto_counter_rate_in = Auto_counter_rate_in;
	Parms.Auto_counter_radius_rate_in = Auto_counter_radius_rate_in;
	Parms.Auto_counter_half_height_rate_in = Auto_counter_half_height_rate_in;
	Parms.Cool_down_time_min_in = Cool_down_time_min_in;
	Parms.Cool_down_time_max_in = Cool_down_time_max_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CounterComponent.BP_CounterComponent_C.Update
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CounterComponent_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CounterComponent.BP_CounterComponent_C.Finalize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CounterComponent_C::Finalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "Finalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CounterComponent.BP_CounterComponent_C.CheckAutoCounter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::CheckAutoCounter(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "CheckAutoCounter");

	Params::BP_CounterComponent_C_CheckAutoCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_CounterComponent.BP_CounterComponent_C.SetAutoCounter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::SetAutoCounter(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "SetAutoCounter");

	Params::BP_CounterComponent_C_SetAutoCounter Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CounterComponent.BP_CounterComponent_C.IsAutoCounterSuccess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::IsAutoCounterSuccess(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "IsAutoCounterSuccess");

	Params::BP_CounterComponent_C_IsAutoCounterSuccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_CounterComponent.BP_CounterComponent_C.SetCounterAnimEnable
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CounterComponent_C::SetCounterAnimEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "SetCounterAnimEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CounterComponent.BP_CounterComponent_C.IsCounterAnimEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::IsCounterAnimEnable(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "IsCounterAnimEnable");

	Params::BP_CounterComponent_C_IsCounterAnimEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_CounterComponent.BP_CounterComponent_C.SetThinkCounter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag_in                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::SetThinkCounter(bool Flag_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "SetThinkCounter");

	Params::BP_CounterComponent_C_SetThinkCounter Parms{};

	Parms.Flag_in = Flag_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CounterComponent.BP_CounterComponent_C.SetThinkCounterSuccess
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CounterComponent_C::SetThinkCounterSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "SetThinkCounterSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CounterComponent.BP_CounterComponent_C.IsThinkCounterSuccess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::IsThinkCounterSuccess(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "IsThinkCounterSuccess");

	Params::BP_CounterComponent_C_IsThinkCounterSuccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_CounterComponent.BP_CounterComponent_C.IsThinkCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCounter                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CounterComponent_C::IsThinkCounter(bool* bCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CounterComponent_C", "IsThinkCounter");

	Params::BP_CounterComponent_C_IsThinkCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCounter != nullptr)
		*bCounter = Parms.bCounter;
}

}

