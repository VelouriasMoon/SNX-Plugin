#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleController

#include "Basic.hpp"

#include "SimpleController_structs.hpp"


namespace SDK::Params
{

// Function SimpleController.SimpleControllerBPLibrary.breakDeviceForceFeedbackInfo
// 0x01A0 (0x01A0 - 0x0000)
struct SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(Parm, NativeAccessSpecifierPublic)
	bool                                          HasHaptic;                                         // 0x0180(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_CONSTANT;                            // 0x0181(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_SINE;                                // 0x0182(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_LEFTRIGHT;                           // 0x0183(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_TRIANGLE;                            // 0x0184(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_SAWTOOTHUP;                          // 0x0185(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_SAWTOOTHDOWN;                        // 0x0186(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_RAMP;                                // 0x0187(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_SPRING;                              // 0x0188(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_DAMPER;                              // 0x0189(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_INERTIA;                             // 0x018A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_FRICTION;                            // 0x018B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_CUSTOM;                              // 0x018C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_GAIN;                                // 0x018D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_AUTOCENTER;                          // 0x018E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_STATUS;                              // 0x018F(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_PAUSE;                               // 0x0190(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_POLAR;                               // 0x0191(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_CARTESIAN;                           // 0x0192(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_SPHERICAL;                           // 0x0193(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedback_INFINITY;                            // 0x0194(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140C[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSimultaneouslyEffects;                          // 0x0198(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140D[0x4];                                     // 0x019C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo");
static_assert(sizeof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo) == 0x0001A0, "Wrong size on SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, HasHaptic) == 0x000180, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::HasHaptic' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_CONSTANT) == 0x000181, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_CONSTANT' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_SINE) == 0x000182, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_SINE' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_LEFTRIGHT) == 0x000183, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_LEFTRIGHT' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_TRIANGLE) == 0x000184, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_TRIANGLE' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_SAWTOOTHUP) == 0x000185, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_SAWTOOTHUP' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_SAWTOOTHDOWN) == 0x000186, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_SAWTOOTHDOWN' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_RAMP) == 0x000187, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_RAMP' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_SPRING) == 0x000188, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_SPRING' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_DAMPER) == 0x000189, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_DAMPER' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_INERTIA) == 0x00018A, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_INERTIA' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_FRICTION) == 0x00018B, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_FRICTION' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_CUSTOM) == 0x00018C, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_CUSTOM' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_GAIN) == 0x00018D, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_GAIN' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_AUTOCENTER) == 0x00018E, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_AUTOCENTER' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_STATUS) == 0x00018F, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_STATUS' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_PAUSE) == 0x000190, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_PAUSE' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_POLAR) == 0x000191, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_POLAR' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_CARTESIAN) == 0x000192, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_CARTESIAN' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_SPHERICAL) == 0x000193, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_SPHERICAL' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, ForceFeedback_INFINITY) == 0x000194, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::ForceFeedback_INFINITY' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo, MaxSimultaneouslyEffects) == 0x000198, "Member 'SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo::MaxSimultaneouslyEffects' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.breakDeviceInfo
// 0x01D8 (0x01D8 - 0x0000)
struct SimpleControllerBPLibrary_breakDeviceInfo final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(Parm, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0180(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionIndex;                                   // 0x0184(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0188(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0198(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ControllerName;                                    // 0x01A8(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VendorID;                                          // 0x01B8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductID;                                         // 0x01BC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAxes;                                           // 0x01C0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumButtons;                                        // 0x01C4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDirectionalPadAxes;                             // 0x01C8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBalls;                                          // 0x01CC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasHaptic;                                         // 0x01D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140E[0x7];                                     // 0x01D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_breakDeviceInfo) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_breakDeviceInfo");
static_assert(sizeof(SimpleControllerBPLibrary_breakDeviceInfo) == 0x0001D8, "Wrong size on SimpleControllerBPLibrary_breakDeviceInfo");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, DeviceIndex) == 0x000180, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, ConnectionIndex) == 0x000184, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::ConnectionIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, DeviceID) == 0x000188, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, DeviceName) == 0x000198, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::DeviceName' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, ControllerName) == 0x0001A8, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::ControllerName' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, VendorID) == 0x0001B8, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::VendorID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, ProductID) == 0x0001BC, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::ProductID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, NumAxes) == 0x0001C0, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::NumAxes' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, NumButtons) == 0x0001C4, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::NumButtons' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, NumDirectionalPadAxes) == 0x0001C8, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::NumDirectionalPadAxes' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, NumBalls) == 0x0001CC, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::NumBalls' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakDeviceInfo, HasHaptic) == 0x0001D0, "Member 'SimpleControllerBPLibrary_breakDeviceInfo::HasHaptic' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.breakForceFeedbackEffect
// 0x0020 (0x0020 - 0x0000)
struct SimpleControllerBPLibrary_breakForceFeedbackEffect final
{
public:
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         EffectID;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140F[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_breakForceFeedbackEffect) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_breakForceFeedbackEffect");
static_assert(sizeof(SimpleControllerBPLibrary_breakForceFeedbackEffect) == 0x000020, "Wrong size on SimpleControllerBPLibrary_breakForceFeedbackEffect");
static_assert(offsetof(SimpleControllerBPLibrary_breakForceFeedbackEffect, ForceFeedbackEffect) == 0x000000, "Member 'SimpleControllerBPLibrary_breakForceFeedbackEffect::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakForceFeedbackEffect, EffectID) == 0x000018, "Member 'SimpleControllerBPLibrary_breakForceFeedbackEffect::EffectID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_breakForceFeedbackEffect, Successful) == 0x00001C, "Member 'SimpleControllerBPLibrary_breakForceFeedbackEffect::Successful' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.buttonIDToButton
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_buttonIDToButton final
{
public:
	int32                                         buttonID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimpleControllerButtons                      buttons;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1410[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_buttonIDToButton) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_buttonIDToButton");
static_assert(sizeof(SimpleControllerBPLibrary_buttonIDToButton) == 0x000008, "Wrong size on SimpleControllerBPLibrary_buttonIDToButton");
static_assert(offsetof(SimpleControllerBPLibrary_buttonIDToButton, buttonID) == 0x000000, "Member 'SimpleControllerBPLibrary_buttonIDToButton::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonIDToButton, buttons) == 0x000004, "Member 'SimpleControllerBPLibrary_buttonIDToButton::buttons' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.destroyForceFeedbackEffect
// 0x0018 (0x0018 - 0x0000)
struct SimpleControllerBPLibrary_DestroyForceFeedbackEffect final
{
public:
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DestroyForceFeedbackEffect) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DestroyForceFeedbackEffect");
static_assert(sizeof(SimpleControllerBPLibrary_DestroyForceFeedbackEffect) == 0x000018, "Wrong size on SimpleControllerBPLibrary_DestroyForceFeedbackEffect");
static_assert(offsetof(SimpleControllerBPLibrary_DestroyForceFeedbackEffect, ForceFeedbackEffect) == 0x000000, "Member 'SimpleControllerBPLibrary_DestroyForceFeedbackEffect::ForceFeedbackEffect' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.directinalPadValueToDirection
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_DirectinalPadValueToDirection final
{
public:
	int32                                         DirectionalPadValue;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimpleControllerDirectionalPad               Direction;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1411[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_DirectinalPadValueToDirection) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_DirectinalPadValueToDirection");
static_assert(sizeof(SimpleControllerBPLibrary_DirectinalPadValueToDirection) == 0x000008, "Wrong size on SimpleControllerBPLibrary_DirectinalPadValueToDirection");
static_assert(offsetof(SimpleControllerBPLibrary_DirectinalPadValueToDirection, DirectionalPadValue) == 0x000000, "Member 'SimpleControllerBPLibrary_DirectinalPadValueToDirection::DirectionalPadValue' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectinalPadValueToDirection, Direction) == 0x000004, "Member 'SimpleControllerBPLibrary_DirectinalPadValueToDirection::Direction' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.getSimpleControllerTarget
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_GetSimpleControllerTarget final
{
public:
	class USimpleControllerBPLibrary*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_GetSimpleControllerTarget) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_GetSimpleControllerTarget");
static_assert(sizeof(SimpleControllerBPLibrary_GetSimpleControllerTarget) == 0x000008, "Wrong size on SimpleControllerBPLibrary_GetSimpleControllerTarget");
static_assert(offsetof(SimpleControllerBPLibrary_GetSimpleControllerTarget, ReturnValue) == 0x000000, "Member 'SimpleControllerBPLibrary_GetSimpleControllerTarget::ReturnValue' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.simpleRumble
// 0x0190 (0x0190 - 0x0000)
struct SimpleControllerBPLibrary_SimpleRumble final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(Parm, NativeAccessSpecifierPublic)
	int32                                         Low_runble;                                        // 0x0180(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_rumble;                                       // 0x0184(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0188(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1412[0x4];                                     // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_SimpleRumble) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_SimpleRumble");
static_assert(sizeof(SimpleControllerBPLibrary_SimpleRumble) == 0x000190, "Wrong size on SimpleControllerBPLibrary_SimpleRumble");
static_assert(offsetof(SimpleControllerBPLibrary_SimpleRumble, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_SimpleRumble::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SimpleRumble, Low_runble) == 0x000180, "Member 'SimpleControllerBPLibrary_SimpleRumble::Low_runble' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SimpleRumble, High_rumble) == 0x000184, "Member 'SimpleControllerBPLibrary_SimpleRumble::High_rumble' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SimpleRumble, Duration) == 0x000188, "Member 'SimpleControllerBPLibrary_SimpleRumble::Duration' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.uploadAndRunForceFeedbackEffect
// 0x0050 (0x0050 - 0x0000)
struct SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect final
{
public:
	bool                                          Successful;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1413[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1414[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerForceFeedbackEffect   ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect");
static_assert(sizeof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect) == 0x000050, "Wrong size on SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect");
static_assert(offsetof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect, Successful) == 0x000000, "Member 'SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect::Successful' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect, ErrorMessage) == 0x000008, "Member 'SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect::ErrorMessage' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect, ForceFeedbackEffect) == 0x000018, "Member 'SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect, Iterations) == 0x000030, "Member 'SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect::Iterations' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect, ReturnValue) == 0x000038, "Member 'SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect::ReturnValue' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.axisMovedEventDelegate
// 0x01A0 (0x01A0 - 0x0000)
struct SimpleControllerBPLibrary_AxisMovedEventDelegate final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisID;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValue;                                         // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1415[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerDevice                Device;                                            // 0x0020(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_AxisMovedEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_AxisMovedEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_AxisMovedEventDelegate) == 0x0001A0, "Wrong size on SimpleControllerBPLibrary_AxisMovedEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate, AxisID) == 0x000010, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate::AxisID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate, AxisValue) == 0x000014, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate::AxisValue' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate, DeviceIndex) == 0x000018, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate, Device) == 0x000020, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.axisMovedEventDelegate__DelegateSignature
// 0x01A0 (0x01A0 - 0x0000)
struct SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1416[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerDevice                Device;                                            // 0x0020(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature) == 0x0001A0, "Wrong size on SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature, AxisID) == 0x000010, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature::AxisID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature, AxisValue) == 0x000014, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature::AxisValue' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature, DeviceIndex) == 0x000018, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature, Device) == 0x000020, "Member 'SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.ballMovedEventDelegate
// 0x01A0 (0x01A0 - 0x0000)
struct SimpleControllerBPLibrary_ballMovedEventDelegate final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ballID;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XRel;                                              // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YRel;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1417[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerDevice                Device;                                            // 0x0020(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ballMovedEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_ballMovedEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_ballMovedEventDelegate) == 0x0001A0, "Wrong size on SimpleControllerBPLibrary_ballMovedEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate, ballID) == 0x000010, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate::ballID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate, XRel) == 0x000014, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate::XRel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate, YRel) == 0x000018, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate::YRel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate, Device) == 0x000020, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.ballMovedEventDelegate__DelegateSignature
// 0x01A0 (0x01A0 - 0x0000)
struct SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ballID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XRel;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YRel;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1418[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerDevice                Device;                                            // 0x0020(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature) == 0x0001A0, "Wrong size on SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature, ballID) == 0x000010, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature::ballID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature, XRel) == 0x000014, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature::XRel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature, YRel) == 0x000018, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature::YRel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature, Device) == 0x000020, "Member 'SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.buttonDownEventDelegate
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_buttonDownEventDelegate final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonID;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_buttonDownEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_buttonDownEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_buttonDownEventDelegate) == 0x000198, "Wrong size on SimpleControllerBPLibrary_buttonDownEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate, buttonID) == 0x000010, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.buttonDownEventDelegate__DelegateSignature
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonID;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature) == 0x000198, "Wrong size on SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature, buttonID) == 0x000010, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.buttonUpEventDelegate
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_buttonUpEventDelegate final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonID;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_buttonUpEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_buttonUpEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_buttonUpEventDelegate) == 0x000198, "Wrong size on SimpleControllerBPLibrary_buttonUpEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate, buttonID) == 0x000010, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.buttonUpEventDelegate__DelegateSignature
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonID;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature) == 0x000198, "Wrong size on SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature, buttonID) == 0x000010, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.changeAxisMapping
// 0x000C (0x000C - 0x0000)
struct SimpleControllerBPLibrary_ChangeAxisMapping final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldAxisID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAxisID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ChangeAxisMapping) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ChangeAxisMapping");
static_assert(sizeof(SimpleControllerBPLibrary_ChangeAxisMapping) == 0x00000C, "Wrong size on SimpleControllerBPLibrary_ChangeAxisMapping");
static_assert(offsetof(SimpleControllerBPLibrary_ChangeAxisMapping, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ChangeAxisMapping::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ChangeAxisMapping, OldAxisID) == 0x000004, "Member 'SimpleControllerBPLibrary_ChangeAxisMapping::OldAxisID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ChangeAxisMapping, NewAxisID) == 0x000008, "Member 'SimpleControllerBPLibrary_ChangeAxisMapping::NewAxisID' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.changeButtonMapping
// 0x000C (0x000C - 0x0000)
struct SimpleControllerBPLibrary_ChangeButtonMapping final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldButtonID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewButtonID;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ChangeButtonMapping) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ChangeButtonMapping");
static_assert(sizeof(SimpleControllerBPLibrary_ChangeButtonMapping) == 0x00000C, "Wrong size on SimpleControllerBPLibrary_ChangeButtonMapping");
static_assert(offsetof(SimpleControllerBPLibrary_ChangeButtonMapping, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ChangeButtonMapping::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ChangeButtonMapping, OldButtonID) == 0x000004, "Member 'SimpleControllerBPLibrary_ChangeButtonMapping::OldButtonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ChangeButtonMapping, NewButtonID) == 0x000008, "Member 'SimpleControllerBPLibrary_ChangeButtonMapping::NewButtonID' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectCondition
// 0x01D8 (0x01D8 - 0x0000)
struct SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition final
{
public:
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1419[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0030(0x0180)(Parm, NativeAccessSpecifierPublic)
	ESimpleControllerForceFeedbackEffectConditionType ConditionType;                                     // 0x01B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDirectionX;                                     // 0x01B1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDirectionY;                                     // 0x01B2(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDirectionZ;                                     // 0x01B3(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x01B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x01B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightLevel;                                        // 0x01BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftLevel;                                         // 0x01C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightLevelIncreaseSpeed;                           // 0x01C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeftLevelIncreaseSpeed;                            // 0x01C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deadband;                                          // 0x01CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Center;                                            // 0x01D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141A[0x4];                                     // 0x01D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition");
static_assert(sizeof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition) == 0x0001D8, "Wrong size on SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, ForceFeedbackEffect) == 0x000000, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, Successful) == 0x000018, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::Successful' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, ErrorMessage) == 0x000020, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::ErrorMessage' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, Device) == 0x000030, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, ConditionType) == 0x0001B0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, UseDirectionX) == 0x0001B1, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::UseDirectionX' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, UseDirectionY) == 0x0001B2, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::UseDirectionY' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, UseDirectionZ) == 0x0001B3, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::UseDirectionZ' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, Length) == 0x0001B4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::Length' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, Delay) == 0x0001B8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::Delay' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, RightLevel) == 0x0001BC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::RightLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, LeftLevel) == 0x0001C0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::LeftLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, RightLevelIncreaseSpeed) == 0x0001C4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::RightLevelIncreaseSpeed' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, LeftLevelIncreaseSpeed) == 0x0001C8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::LeftLevelIncreaseSpeed' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, Deadband) == 0x0001CC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::Deadband' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition, Center) == 0x0001D0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition::Center' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectConstant
// 0x01E0 (0x01E0 - 0x0000)
struct SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant final
{
public:
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0030(0x0180)(Parm, NativeAccessSpecifierPublic)
	ESimpleControllerForceFeedbackDirectionType   DirectionType;                                     // 0x01B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141C[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DirectionX;                                        // 0x01B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionY;                                        // 0x01B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionZ;                                        // 0x01BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x01C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x01C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x01C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLength;                                      // 0x01CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackLevel;                                       // 0x01D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeLength;                                        // 0x01D4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeLevel;                                         // 0x01D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141D[0x4];                                     // 0x01DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant");
static_assert(sizeof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant) == 0x0001E0, "Wrong size on SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, ForceFeedbackEffect) == 0x000000, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, Successful) == 0x000018, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::Successful' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, ErrorMessage) == 0x000020, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::ErrorMessage' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, Device) == 0x000030, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, DirectionType) == 0x0001B0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::DirectionType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, DirectionX) == 0x0001B4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::DirectionX' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, DirectionY) == 0x0001B8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::DirectionY' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, DirectionZ) == 0x0001BC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::DirectionZ' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, Length) == 0x0001C0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::Length' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, Delay) == 0x0001C4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::Delay' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, Level) == 0x0001C8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::Level' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, AttackLength) == 0x0001CC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::AttackLength' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, AttackLevel) == 0x0001D0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::AttackLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, FadeLength) == 0x0001D4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::FadeLength' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant, FadeLevel) == 0x0001D8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant::FadeLevel' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectPeriodic
// 0x01E8 (0x01E8 - 0x0000)
struct SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic final
{
public:
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141E[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0030(0x0180)(Parm, NativeAccessSpecifierPublic)
	ESimpleControllerForceFeedbackEffectPeriodicType PeriodicType;                                      // 0x01B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimpleControllerForceFeedbackDirectionType   DirectionType;                                     // 0x01B1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141F[0x2];                                     // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DirectionX;                                        // 0x01B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionY;                                        // 0x01B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionZ;                                        // 0x01BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x01C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x01C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Period;                                            // 0x01C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x01CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x01D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x01D4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLength;                                      // 0x01D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackLevel;                                       // 0x01DC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeLength;                                        // 0x01E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeLevel;                                         // 0x01E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic");
static_assert(sizeof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic) == 0x0001E8, "Wrong size on SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, ForceFeedbackEffect) == 0x000000, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Successful) == 0x000018, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Successful' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, ErrorMessage) == 0x000020, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::ErrorMessage' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Device) == 0x000030, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, PeriodicType) == 0x0001B0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::PeriodicType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, DirectionType) == 0x0001B1, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::DirectionType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, DirectionX) == 0x0001B4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::DirectionX' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, DirectionY) == 0x0001B8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::DirectionY' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, DirectionZ) == 0x0001BC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::DirectionZ' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Length) == 0x0001C0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Length' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Delay) == 0x0001C4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Delay' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Period) == 0x0001C8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Period' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Magnitude) == 0x0001CC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Magnitude' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Offset) == 0x0001D0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Offset' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, Phase) == 0x0001D4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::Phase' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, AttackLength) == 0x0001D8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::AttackLength' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, AttackLevel) == 0x0001DC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::AttackLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, FadeLength) == 0x0001E0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::FadeLength' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic, FadeLevel) == 0x0001E4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic::FadeLevel' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectRamp
// 0x01E0 (0x01E0 - 0x0000)
struct SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp final
{
public:
	struct FSimpleControllerForceFeedbackEffect   ForceFeedbackEffect;                               // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1420[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0030(0x0180)(Parm, NativeAccessSpecifierPublic)
	ESimpleControllerForceFeedbackDirectionType   DirectionType;                                     // 0x01B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1421[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DirectionX;                                        // 0x01B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionY;                                        // 0x01B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionZ;                                        // 0x01BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x01C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x01C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLevel;                                        // 0x01C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndLevel;                                          // 0x01CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLength;                                      // 0x01D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackLevel;                                       // 0x01D4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeLength;                                        // 0x01D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeLevel;                                         // 0x01DC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp");
static_assert(sizeof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp) == 0x0001E0, "Wrong size on SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, ForceFeedbackEffect) == 0x000000, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, Successful) == 0x000018, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::Successful' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, ErrorMessage) == 0x000020, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::ErrorMessage' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, Device) == 0x000030, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, DirectionType) == 0x0001B0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::DirectionType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, DirectionX) == 0x0001B4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::DirectionX' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, DirectionY) == 0x0001B8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::DirectionY' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, DirectionZ) == 0x0001BC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::DirectionZ' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, Length) == 0x0001C0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::Length' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, Delay) == 0x0001C4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::Delay' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, StartLevel) == 0x0001C8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::StartLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, EndLevel) == 0x0001CC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::EndLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, AttackLength) == 0x0001D0, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::AttackLength' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, AttackLevel) == 0x0001D4, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::AttackLevel' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, FadeLength) == 0x0001D8, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::FadeLength' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp, FadeLevel) == 0x0001DC, "Member 'SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp::FadeLevel' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.deviceAttachedEventDelegate
// 0x0180 (0x0180 - 0x0000)
struct SimpleControllerBPLibrary_DeviceAttachedEventDelegate final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DeviceAttachedEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DeviceAttachedEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_DeviceAttachedEventDelegate) == 0x000180, "Wrong size on SimpleControllerBPLibrary_DeviceAttachedEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_DeviceAttachedEventDelegate, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_DeviceAttachedEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.deviceAttachedEventDelegate__DelegateSignature
// 0x0180 (0x0180 - 0x0000)
struct SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature) == 0x000180, "Wrong size on SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.deviceDetachedEventDelegate
// 0x0180 (0x0180 - 0x0000)
struct SimpleControllerBPLibrary_DeviceDetachedEventDelegate final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DeviceDetachedEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DeviceDetachedEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_DeviceDetachedEventDelegate) == 0x000180, "Wrong size on SimpleControllerBPLibrary_DeviceDetachedEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_DeviceDetachedEventDelegate, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_DeviceDetachedEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.deviceDetachedEventDelegate__DelegateSignature
// 0x0180 (0x0180 - 0x0000)
struct SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature final
{
public:
	struct FSimpleControllerDevice                Device;                                            // 0x0000(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature) == 0x000180, "Wrong size on SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature, Device) == 0x000000, "Member 'SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.directionalPadEventDelegate
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_DirectionalPadEventDelegate final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionalPadValue;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DirectionalPadEventDelegate) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DirectionalPadEventDelegate");
static_assert(sizeof(SimpleControllerBPLibrary_DirectionalPadEventDelegate) == 0x000198, "Wrong size on SimpleControllerBPLibrary_DirectionalPadEventDelegate");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate, DirectionalPadValue) == 0x000010, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate::DirectionalPadValue' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate::Device' has a wrong offset!");

// DelegateFunction SimpleController.SimpleControllerBPLibrary.directionalPadEventDelegate__DelegateSignature
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionalPadValue;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature");
static_assert(sizeof(SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature) == 0x000198, "Wrong size on SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature, DirectionalPadValue) == 0x000010, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature::DirectionalPadValue' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.findControllerByDeviceID
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_FindControllerByDeviceID final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1422[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerDevice                ReturnValue;                                       // 0x0018(0x0180)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_FindControllerByDeviceID) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_FindControllerByDeviceID");
static_assert(sizeof(SimpleControllerBPLibrary_FindControllerByDeviceID) == 0x000198, "Wrong size on SimpleControllerBPLibrary_FindControllerByDeviceID");
static_assert(offsetof(SimpleControllerBPLibrary_FindControllerByDeviceID, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_FindControllerByDeviceID::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_FindControllerByDeviceID, Found) == 0x000010, "Member 'SimpleControllerBPLibrary_FindControllerByDeviceID::Found' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_FindControllerByDeviceID, ReturnValue) == 0x000018, "Member 'SimpleControllerBPLibrary_FindControllerByDeviceID::ReturnValue' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.findControllerByDeviceIndex
// 0x0188 (0x0188 - 0x0000)
struct SimpleControllerBPLibrary_FindControllerByDeviceIndex final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Found;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1423[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleControllerDevice                ReturnValue;                                       // 0x0008(0x0180)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_FindControllerByDeviceIndex) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_FindControllerByDeviceIndex");
static_assert(sizeof(SimpleControllerBPLibrary_FindControllerByDeviceIndex) == 0x000188, "Wrong size on SimpleControllerBPLibrary_FindControllerByDeviceIndex");
static_assert(offsetof(SimpleControllerBPLibrary_FindControllerByDeviceIndex, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_FindControllerByDeviceIndex::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_FindControllerByDeviceIndex, Found) == 0x000004, "Member 'SimpleControllerBPLibrary_FindControllerByDeviceIndex::Found' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_FindControllerByDeviceIndex, ReturnValue) == 0x000008, "Member 'SimpleControllerBPLibrary_FindControllerByDeviceIndex::ReturnValue' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.getConnectedControllers
// 0x0010 (0x0010 - 0x0000)
struct SimpleControllerBPLibrary_GetConnectedControllers final
{
public:
	TArray<struct FSimpleControllerDevice>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_GetConnectedControllers) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_GetConnectedControllers");
static_assert(sizeof(SimpleControllerBPLibrary_GetConnectedControllers) == 0x000010, "Wrong size on SimpleControllerBPLibrary_GetConnectedControllers");
static_assert(offsetof(SimpleControllerBPLibrary_GetConnectedControllers, ReturnValue) == 0x000000, "Member 'SimpleControllerBPLibrary_GetConnectedControllers::ReturnValue' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.initController
// 0x0004 (0x0004 - 0x0000)
struct SimpleControllerBPLibrary_InitController final
{
public:
	float                                         RefreshRateButtonsAndAxis;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_InitController) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_InitController");
static_assert(sizeof(SimpleControllerBPLibrary_InitController) == 0x000004, "Wrong size on SimpleControllerBPLibrary_InitController");
static_assert(offsetof(SimpleControllerBPLibrary_InitController, RefreshRateButtonsAndAxis) == 0x000000, "Member 'SimpleControllerBPLibrary_InitController::RefreshRateButtonsAndAxis' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.invertAxis
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_InvertAxis final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_InvertAxis) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_InvertAxis");
static_assert(sizeof(SimpleControllerBPLibrary_InvertAxis) == 0x000008, "Wrong size on SimpleControllerBPLibrary_InvertAxis");
static_assert(offsetof(SimpleControllerBPLibrary_InvertAxis, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_InvertAxis::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_InvertAxis, AxisID) == 0x000004, "Member 'SimpleControllerBPLibrary_InvertAxis::AxisID' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.loadMapping
// 0x0020 (0x0020 - 0x0000)
struct SimpleControllerBPLibrary_LoadMapping final
{
public:
	ESimpleControllerDirectoryType                DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1424[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeviceIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNameWithPath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1425[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_LoadMapping) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_LoadMapping");
static_assert(sizeof(SimpleControllerBPLibrary_LoadMapping) == 0x000020, "Wrong size on SimpleControllerBPLibrary_LoadMapping");
static_assert(offsetof(SimpleControllerBPLibrary_LoadMapping, DirectoryType) == 0x000000, "Member 'SimpleControllerBPLibrary_LoadMapping::DirectoryType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_LoadMapping, DeviceIndex) == 0x000004, "Member 'SimpleControllerBPLibrary_LoadMapping::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_LoadMapping, FileNameWithPath) == 0x000008, "Member 'SimpleControllerBPLibrary_LoadMapping::FileNameWithPath' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_LoadMapping, ReturnValue) == 0x000018, "Member 'SimpleControllerBPLibrary_LoadMapping::ReturnValue' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.OnButtonDownEvent
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_OnButtonDownEvent final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonID;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_OnButtonDownEvent) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_OnButtonDownEvent");
static_assert(sizeof(SimpleControllerBPLibrary_OnButtonDownEvent) == 0x000198, "Wrong size on SimpleControllerBPLibrary_OnButtonDownEvent");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonDownEvent, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_OnButtonDownEvent::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonDownEvent, buttonID) == 0x000010, "Member 'SimpleControllerBPLibrary_OnButtonDownEvent::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonDownEvent, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_OnButtonDownEvent::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonDownEvent, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_OnButtonDownEvent::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.OnButtonUpEvent
// 0x0198 (0x0198 - 0x0000)
struct SimpleControllerBPLibrary_OnButtonUpEvent final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonID;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_OnButtonUpEvent) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_OnButtonUpEvent");
static_assert(sizeof(SimpleControllerBPLibrary_OnButtonUpEvent) == 0x000198, "Wrong size on SimpleControllerBPLibrary_OnButtonUpEvent");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonUpEvent, DeviceID) == 0x000000, "Member 'SimpleControllerBPLibrary_OnButtonUpEvent::DeviceID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonUpEvent, buttonID) == 0x000010, "Member 'SimpleControllerBPLibrary_OnButtonUpEvent::buttonID' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonUpEvent, DeviceIndex) == 0x000014, "Member 'SimpleControllerBPLibrary_OnButtonUpEvent::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_OnButtonUpEvent, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_OnButtonUpEvent::Device' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.resetAllAxisInverting
// 0x0004 (0x0004 - 0x0000)
struct SimpleControllerBPLibrary_ResetAllAxisInverting final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ResetAllAxisInverting) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ResetAllAxisInverting");
static_assert(sizeof(SimpleControllerBPLibrary_ResetAllAxisInverting) == 0x000004, "Wrong size on SimpleControllerBPLibrary_ResetAllAxisInverting");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAllAxisInverting, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ResetAllAxisInverting::DeviceIndex' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.resetAllAxisToDefaultMapping
// 0x0004 (0x0004 - 0x0000)
struct SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping");
static_assert(sizeof(SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping) == 0x000004, "Wrong size on SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping::DeviceIndex' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.resetAllButtonsToDefaultMapping
// 0x0004 (0x0004 - 0x0000)
struct SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping");
static_assert(sizeof(SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping) == 0x000004, "Wrong size on SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping::DeviceIndex' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.resetAxisInverting
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_ResetAxisInverting final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ResetAxisInverting) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ResetAxisInverting");
static_assert(sizeof(SimpleControllerBPLibrary_ResetAxisInverting) == 0x000008, "Wrong size on SimpleControllerBPLibrary_ResetAxisInverting");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAxisInverting, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ResetAxisInverting::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAxisInverting, AxisID) == 0x000004, "Member 'SimpleControllerBPLibrary_ResetAxisInverting::AxisID' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.resetAxisToDefaultMapping
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_ResetAxisToDefaultMapping final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldAxisID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ResetAxisToDefaultMapping) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ResetAxisToDefaultMapping");
static_assert(sizeof(SimpleControllerBPLibrary_ResetAxisToDefaultMapping) == 0x000008, "Wrong size on SimpleControllerBPLibrary_ResetAxisToDefaultMapping");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAxisToDefaultMapping, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ResetAxisToDefaultMapping::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ResetAxisToDefaultMapping, OldAxisID) == 0x000004, "Member 'SimpleControllerBPLibrary_ResetAxisToDefaultMapping::OldAxisID' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.resetButtonToDefaultMapping
// 0x0008 (0x0008 - 0x0000)
struct SimpleControllerBPLibrary_ResetButtonToDefaultMapping final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldButtonID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleControllerBPLibrary_ResetButtonToDefaultMapping) == 0x000004, "Wrong alignment on SimpleControllerBPLibrary_ResetButtonToDefaultMapping");
static_assert(sizeof(SimpleControllerBPLibrary_ResetButtonToDefaultMapping) == 0x000008, "Wrong size on SimpleControllerBPLibrary_ResetButtonToDefaultMapping");
static_assert(offsetof(SimpleControllerBPLibrary_ResetButtonToDefaultMapping, DeviceIndex) == 0x000000, "Member 'SimpleControllerBPLibrary_ResetButtonToDefaultMapping::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_ResetButtonToDefaultMapping, OldButtonID) == 0x000004, "Member 'SimpleControllerBPLibrary_ResetButtonToDefaultMapping::OldButtonID' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.rumble
// 0x01A8 (0x01A8 - 0x0000)
struct SimpleControllerBPLibrary_Rumble final
{
public:
	bool                                          Successful;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1426[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleControllerDevice                Device;                                            // 0x0018(0x0180)(Parm, NativeAccessSpecifierPublic)
	float                                         StrengthSmallMotor;                                // 0x0198(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthLargeMotor;                                // 0x019C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthInMilliseconds;                              // 0x01A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1427[0x4];                                     // 0x01A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_Rumble) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_Rumble");
static_assert(sizeof(SimpleControllerBPLibrary_Rumble) == 0x0001A8, "Wrong size on SimpleControllerBPLibrary_Rumble");
static_assert(offsetof(SimpleControllerBPLibrary_Rumble, Successful) == 0x000000, "Member 'SimpleControllerBPLibrary_Rumble::Successful' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_Rumble, ErrorMessage) == 0x000008, "Member 'SimpleControllerBPLibrary_Rumble::ErrorMessage' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_Rumble, Device) == 0x000018, "Member 'SimpleControllerBPLibrary_Rumble::Device' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_Rumble, StrengthSmallMotor) == 0x000198, "Member 'SimpleControllerBPLibrary_Rumble::StrengthSmallMotor' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_Rumble, StrengthLargeMotor) == 0x00019C, "Member 'SimpleControllerBPLibrary_Rumble::StrengthLargeMotor' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_Rumble, LengthInMilliseconds) == 0x0001A0, "Member 'SimpleControllerBPLibrary_Rumble::LengthInMilliseconds' has a wrong offset!");

// Function SimpleController.SimpleControllerBPLibrary.saveMapping
// 0x0020 (0x0020 - 0x0000)
struct SimpleControllerBPLibrary_SaveMapping final
{
public:
	ESimpleControllerDirectoryType                DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1428[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeviceIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNameWithPath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateDirectory;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1429[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleControllerBPLibrary_SaveMapping) == 0x000008, "Wrong alignment on SimpleControllerBPLibrary_SaveMapping");
static_assert(sizeof(SimpleControllerBPLibrary_SaveMapping) == 0x000020, "Wrong size on SimpleControllerBPLibrary_SaveMapping");
static_assert(offsetof(SimpleControllerBPLibrary_SaveMapping, DirectoryType) == 0x000000, "Member 'SimpleControllerBPLibrary_SaveMapping::DirectoryType' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SaveMapping, DeviceIndex) == 0x000004, "Member 'SimpleControllerBPLibrary_SaveMapping::DeviceIndex' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SaveMapping, FileNameWithPath) == 0x000008, "Member 'SimpleControllerBPLibrary_SaveMapping::FileNameWithPath' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SaveMapping, CreateDirectory) == 0x000018, "Member 'SimpleControllerBPLibrary_SaveMapping::CreateDirectory' has a wrong offset!");
static_assert(offsetof(SimpleControllerBPLibrary_SaveMapping, ReturnValue) == 0x000019, "Member 'SimpleControllerBPLibrary_SaveMapping::ReturnValue' has a wrong offset!");

}

