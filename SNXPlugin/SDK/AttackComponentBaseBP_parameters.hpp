#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttackComponentBaseBP

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "EWeaponAttackAnimStopType_structs.hpp"
#include "EHologramKind_structs.hpp"
#include "FAttackEffectData_structs.hpp"


namespace SDK::Params
{

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.ExecuteUbergraph_AttackComponentBaseBP
// 0x0058 (0x0058 - 0x0000)
struct AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UAnimMontage* Montage, bool bInterrupted)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_81EF[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81F0[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_CustomEvent_Montage;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bInterrupted;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnMontageBlendingOut_ReturnValue;         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttacking_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81F1[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoPlayerTick_bDummy;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP");
static_assert(sizeof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP) == 0x000058, "Wrong size on AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, EntryPoint) == 0x000000, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_DynamicCast_AsRSBattle_Player) == 0x000030, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_CustomEvent_Montage) == 0x000040, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_CustomEvent_Montage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_CustomEvent_bInterrupted) == 0x000048, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_CustomEvent_bInterrupted' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, CallFunc_OnMontageBlendingOut_ReturnValue) == 0x000049, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::CallFunc_OnMontageBlendingOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, CallFunc_IsAttacking_ReturnValue) == 0x00004A, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::CallFunc_IsAttacking_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, K2Node_CustomEvent_DeltaSeconds) == 0x00004C, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP, CallFunc_DoPlayerTick_bDummy) == 0x000050, "Member 'AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP::CallFunc_DoPlayerTick_bDummy' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.OnPlayerTickEvent
// 0x0004 (0x0004 - 0x0000)
struct AttackComponentBaseBP_C_OnPlayerTickEvent final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_OnPlayerTickEvent) == 0x000004, "Wrong alignment on AttackComponentBaseBP_C_OnPlayerTickEvent");
static_assert(sizeof(AttackComponentBaseBP_C_OnPlayerTickEvent) == 0x000004, "Wrong size on AttackComponentBaseBP_C_OnPlayerTickEvent");
static_assert(offsetof(AttackComponentBaseBP_C_OnPlayerTickEvent, DeltaSeconds) == 0x000000, "Member 'AttackComponentBaseBP_C_OnPlayerTickEvent::DeltaSeconds' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.EventMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct AttackComponentBaseBP_C_EventMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_EventMontageBlendingOut) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_EventMontageBlendingOut");
static_assert(sizeof(AttackComponentBaseBP_C_EventMontageBlendingOut) == 0x000010, "Wrong size on AttackComponentBaseBP_C_EventMontageBlendingOut");
static_assert(offsetof(AttackComponentBaseBP_C_EventMontageBlendingOut, Montage) == 0x000000, "Member 'AttackComponentBaseBP_C_EventMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EventMontageBlendingOut, bInterrupted) == 0x000008, "Member 'AttackComponentBaseBP_C_EventMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.StartSwordFade
// 0x0040 (0x0040 - 0x0000)
struct AttackComponentBaseBP_C_StartSwordFade final
{
public:
	bool                                          bin;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81F2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMaterialControllerComponent*    MatCon_l;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81F3[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDynamicMaterialControllerComponent*    CallFunc_GetDynamicMaterialControllerComponent_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_StartSwordFade) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_StartSwordFade");
static_assert(sizeof(AttackComponentBaseBP_C_StartSwordFade) == 0x000040, "Wrong size on AttackComponentBaseBP_C_StartSwordFade");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, bin) == 0x000000, "Member 'AttackComponentBaseBP_C_StartSwordFade::bin' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, MatCon_l) == 0x000008, "Member 'AttackComponentBaseBP_C_StartSwordFade::MatCon_l' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, Temp_int_Array_Index_Variable) == 0x000014, "Member 'AttackComponentBaseBP_C_StartSwordFade::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'AttackComponentBaseBP_C_StartSwordFade::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_GetDynamicMaterialControllerComponent_ReturnValue) == 0x000028, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_GetDynamicMaterialControllerComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_Array_Get_Item) == 0x000030, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StartSwordFade, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'AttackComponentBaseBP_C_StartSwordFade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SetAttackState
// 0x0050 (0x0050 - 0x0000)
struct AttackComponentBaseBP_C_SetAttackState final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81F4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponMontage;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddComboCount;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponAttackAnimStopType                     WeaponAnimStopType;                                // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81F5[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81F6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CopyPlayerOff_bDummy;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetAttackInputKind_ReturnValue;           // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81F7[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttackInputComponent*                  CallFunc_GetAttackInputComponent_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81F8[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PreSetAttackState_bDummy;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_SetAttackState) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_SetAttackState");
static_assert(sizeof(AttackComponentBaseBP_C_SetAttackState) == 0x000050, "Wrong size on AttackComponentBaseBP_C_SetAttackState");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, Param) == 0x000000, "Member 'AttackComponentBaseBP_C_SetAttackState::Param' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, Montage) == 0x000008, "Member 'AttackComponentBaseBP_C_SetAttackState::Montage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, WeaponMontage) == 0x000010, "Member 'AttackComponentBaseBP_C_SetAttackState::WeaponMontage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, bAddComboCount) == 0x000018, "Member 'AttackComponentBaseBP_C_SetAttackState::bAddComboCount' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, WeaponAnimStopType) == 0x000019, "Member 'AttackComponentBaseBP_C_SetAttackState::WeaponAnimStopType' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, Temp_int_Variable) == 0x00001C, "Member 'AttackComponentBaseBP_C_SetAttackState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, Temp_int_Variable_1) == 0x000020, "Member 'AttackComponentBaseBP_C_SetAttackState::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_GetPlayerFixParam_Param) == 0x000028, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_CopyPlayerOff_bDummy) == 0x000030, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_CopyPlayerOff_bDummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_IsActionStatus_Result) == 0x000031, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_IsActionStatus_Result_1) == 0x000032, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_GetAttackInputKind_ReturnValue) == 0x000033, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_GetAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_GetAttackInputComponent_ReturnValue) == 0x000038, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_GetAttackInputComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, Temp_bool_Variable) == 0x000040, "Member 'AttackComponentBaseBP_C_SetAttackState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, K2Node_Select_Default) == 0x000044, "Member 'AttackComponentBaseBP_C_SetAttackState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SetAttackState, CallFunc_PreSetAttackState_bDummy) == 0x000048, "Member 'AttackComponentBaseBP_C_SetAttackState::CallFunc_PreSetAttackState_bDummy' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SetBranchMode
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_SetBranchMode final
{
public:
	bool                                          bBranch;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_SetBranchMode) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_SetBranchMode");
static_assert(sizeof(AttackComponentBaseBP_C_SetBranchMode) == 0x000001, "Wrong size on AttackComponentBaseBP_C_SetBranchMode");
static_assert(offsetof(AttackComponentBaseBP_C_SetBranchMode, bBranch) == 0x000000, "Member 'AttackComponentBaseBP_C_SetBranchMode::bBranch' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SetIgnoreCheckStartAttack
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_SetIgnoreCheckStartAttack final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_SetIgnoreCheckStartAttack) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_SetIgnoreCheckStartAttack");
static_assert(sizeof(AttackComponentBaseBP_C_SetIgnoreCheckStartAttack) == 0x000001, "Wrong size on AttackComponentBaseBP_C_SetIgnoreCheckStartAttack");
static_assert(offsetof(AttackComponentBaseBP_C_SetIgnoreCheckStartAttack, bIgnore) == 0x000000, "Member 'AttackComponentBaseBP_C_SetIgnoreCheckStartAttack::bIgnore' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SpawnEffect
// 0x0068 (0x0068 - 0x0000)
struct AttackComponentBaseBP_C_SpawnEffect final
{
public:
	struct FFAttackEffectData                     Data;                                              // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81F9[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList;         // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81FA[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81FB[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_SpawnEffect) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_SpawnEffect");
static_assert(sizeof(AttackComponentBaseBP_C_SpawnEffect) == 0x000068, "Wrong size on AttackComponentBaseBP_C_SpawnEffect");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, Data) == 0x000000, "Member 'AttackComponentBaseBP_C_SpawnEffect::Data' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'AttackComponentBaseBP_C_SpawnEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, Temp_int_Loop_Num_Variable) == 0x000034, "Member 'AttackComponentBaseBP_C_SpawnEffect::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_GetCopyPlayerList_CopyPlayerList) == 0x000038, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_GetCopyPlayerList_CopyPlayerList' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, Temp_int_Array_Index_Variable) == 0x000050, "Member 'AttackComponentBaseBP_C_SpawnEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000058, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_SpawnEffect, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'AttackComponentBaseBP_C_SpawnEffect::CallFunc_GetOwner_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.StopEffect
// 0x0058 (0x0058 - 0x0000)
struct AttackComponentBaseBP_C_StopEffect final
{
public:
	struct FFAttackEffectData                     Data;                                              // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81FC[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81FD[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList;         // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_StopEffect) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_StopEffect");
static_assert(sizeof(AttackComponentBaseBP_C_StopEffect) == 0x000058, "Wrong size on AttackComponentBaseBP_C_StopEffect");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, Data) == 0x000000, "Member 'AttackComponentBaseBP_C_StopEffect::Data' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, Temp_int_Loop_Num_Variable) == 0x000028, "Member 'AttackComponentBaseBP_C_StopEffect::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'AttackComponentBaseBP_C_StopEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'AttackComponentBaseBP_C_StopEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'AttackComponentBaseBP_C_StopEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'AttackComponentBaseBP_C_StopEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'AttackComponentBaseBP_C_StopEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, CallFunc_GetCopyPlayerList_CopyPlayerList) == 0x000040, "Member 'AttackComponentBaseBP_C_StopEffect::CallFunc_GetCopyPlayerList_CopyPlayerList' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_StopEffect, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'AttackComponentBaseBP_C_StopEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.EndAttack
// 0x0058 (0x0058 - 0x0000)
struct AttackComponentBaseBP_C_EndAttack final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81FE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LFovCurve;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81FF[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ch0200_C>         K2Node_DynamicCast_AsBPI_Ch_0200;                  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IdleWeaponAnimInterface_bDummy;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CameraAttentionEnd_Dummy;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEndAttack_bDummy;                       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8200[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CopyPlayerOn_bDummy;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8201[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_IsActiveSAS_Copy_self_CastInput;          // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Copy_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttacking_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ThrowWeaponEnd_bDummy;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBranchMode_bBranchFlag;                 // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_EndAttack) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_EndAttack");
static_assert(sizeof(AttackComponentBaseBP_C_EndAttack) == 0x000058, "Wrong size on AttackComponentBaseBP_C_EndAttack");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, Dummy) == 0x000000, "Member 'AttackComponentBaseBP_C_EndAttack::Dummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, LFovCurve) == 0x000008, "Member 'AttackComponentBaseBP_C_EndAttack::LFovCurve' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'AttackComponentBaseBP_C_EndAttack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IsFlying_ReturnValue) == 0x000011, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IsFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, K2Node_DynamicCast_AsBPI_Ch_0200) == 0x000018, "Member 'AttackComponentBaseBP_C_EndAttack::K2Node_DynamicCast_AsBPI_Ch_0200' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AttackComponentBaseBP_C_EndAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IdleWeaponAnimInterface_bDummy) == 0x000029, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IdleWeaponAnimInterface_bDummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_CameraAttentionEnd_Dummy) == 0x00002B, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_CameraAttentionEnd_Dummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_DoEndAttack_bDummy) == 0x00002C, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_DoEndAttack_bDummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_GetPlayerFixParam_Param) == 0x000030, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_CopyPlayerOn_bDummy) == 0x000038, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_CopyPlayerOn_bDummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IsPlayerStatus_Result) == 0x000039, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IsActiveSAS_Copy_self_CastInput) == 0x000040, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IsActiveSAS_Copy_self_CastInput' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IsActiveSAS_Copy_ReturnValue) == 0x000050, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IsActiveSAS_Copy_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_Not_PreBool_ReturnValue_1) == 0x000051, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IsAttacking_ReturnValue) == 0x000052, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IsAttacking_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_ThrowWeaponEnd_bDummy) == 0x000053, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_ThrowWeaponEnd_bDummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EndAttack, CallFunc_IsBranchMode_bBranchFlag) == 0x000054, "Member 'AttackComponentBaseBP_C_EndAttack::CallFunc_IsBranchMode_bBranchFlag' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.EnableTick
// 0x0014 (0x0014 - 0x0000)
struct AttackComponentBaseBP_C_EnableTick final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8202[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_EnableTick) == 0x000004, "Wrong alignment on AttackComponentBaseBP_C_EnableTick");
static_assert(sizeof(AttackComponentBaseBP_C_EnableTick) == 0x000014, "Wrong size on AttackComponentBaseBP_C_EnableTick");
static_assert(offsetof(AttackComponentBaseBP_C_EnableTick, ClaimantName) == 0x000000, "Member 'AttackComponentBaseBP_C_EnableTick::ClaimantName' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EnableTick, bEnable) == 0x000008, "Member 'AttackComponentBaseBP_C_EnableTick::bEnable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EnableTick, Temp_bool_Variable) == 0x000009, "Member 'AttackComponentBaseBP_C_EnableTick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EnableTick, CallFunc_Map_Length_ReturnValue) == 0x00000C, "Member 'AttackComponentBaseBP_C_EnableTick::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EnableTick, CallFunc_Map_Remove_ReturnValue) == 0x000010, "Member 'AttackComponentBaseBP_C_EnableTick::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_EnableTick, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000011, "Member 'AttackComponentBaseBP_C_EnableTick::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.PreSetAttackState
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_PreSetAttackState final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_PreSetAttackState) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_PreSetAttackState");
static_assert(sizeof(AttackComponentBaseBP_C_PreSetAttackState) == 0x000001, "Wrong size on AttackComponentBaseBP_C_PreSetAttackState");
static_assert(offsetof(AttackComponentBaseBP_C_PreSetAttackState, bDummy) == 0x000000, "Member 'AttackComponentBaseBP_C_PreSetAttackState::bDummy' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.CopyPlayMontage
// 0x0008 (0x0008 - 0x0000)
struct AttackComponentBaseBP_C_CopyPlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_CopyPlayMontage) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_CopyPlayMontage");
static_assert(sizeof(AttackComponentBaseBP_C_CopyPlayMontage) == 0x000008, "Wrong size on AttackComponentBaseBP_C_CopyPlayMontage");
static_assert(offsetof(AttackComponentBaseBP_C_CopyPlayMontage, Montage) == 0x000000, "Member 'AttackComponentBaseBP_C_CopyPlayMontage::Montage' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsNameCurrentSection
// 0x0038 (0x0038 - 0x0000)
struct AttackComponentBaseBP_C_IsNameCurrentSection final
{
public:
	class FName                                   SearchName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMatch;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8203[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8204[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_Montage;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8205[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Montage_GetCurrentSection_ReturnValue;    // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsNameCurrentSection) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_IsNameCurrentSection");
static_assert(sizeof(AttackComponentBaseBP_C_IsNameCurrentSection) == 0x000038, "Wrong size on AttackComponentBaseBP_C_IsNameCurrentSection");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, SearchName) == 0x000000, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::SearchName' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, IsMatch) == 0x000008, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::IsMatch' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, L_result) == 0x000009, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::L_result' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_IsValid_ReturnValue_1) == 0x00000B, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_GetCurrentMontage_Montage) == 0x000020, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_GetCurrentMontage_Montage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_IsValid_ReturnValue_3) == 0x000028, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_Montage_GetCurrentSection_ReturnValue) == 0x00002C, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_Montage_GetCurrentSection_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsNameCurrentSection, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000034, "Member 'AttackComponentBaseBP_C_IsNameCurrentSection::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.PlayHologramAnimation
// 0x0038 (0x0038 - 0x0000)
struct AttackComponentBaseBP_C_PlayHologramAnimation final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8206[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponMontage;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologramRootMotion;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8207[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MotionIndex;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHologramKind                                 HologramKind;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8208[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_PlayHologramAnimation) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_PlayHologramAnimation");
static_assert(sizeof(AttackComponentBaseBP_C_PlayHologramAnimation) == 0x000038, "Wrong size on AttackComponentBaseBP_C_PlayHologramAnimation");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, PlayerId) == 0x000000, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::PlayerId' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, Montage) == 0x000008, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::Montage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, WeaponMontage) == 0x000010, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::WeaponMontage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, bHologramRootMotion) == 0x000018, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::bHologramRootMotion' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, MotionIndex) == 0x00001C, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::MotionIndex' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, HologramKind) == 0x000020, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::HologramKind' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayHologramAnimation, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'AttackComponentBaseBP_C_PlayHologramAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.PlayAttackMontage
// 0x0060 (0x0060 - 0x0000)
struct AttackComponentBaseBP_C_PlayAttackMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           UpperAnimMontage;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponAnimMontage;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SectionName;                                       // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponAttackAnimStopType                     WeaponAnimStopType;                                // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8209[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LPlayRate;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_820A[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ch0200_C>         K2Node_DynamicCast_AsBPI_Ch_0200;                  // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponAnimStateInterface_bDummy;       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_820B[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttackMotionPlayRate_PlayRate;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_PlayAttackMontage) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_PlayAttackMontage");
static_assert(sizeof(AttackComponentBaseBP_C_PlayAttackMontage) == 0x000060, "Wrong size on AttackComponentBaseBP_C_PlayAttackMontage");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, AnimMontage) == 0x000000, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, UpperAnimMontage) == 0x000008, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::UpperAnimMontage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, WeaponAnimMontage) == 0x000010, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::WeaponAnimMontage' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, PlayRate) == 0x000018, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, SectionName) == 0x00001C, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::SectionName' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, WeaponAnimStopType) == 0x000024, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::WeaponAnimStopType' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, LPlayRate) == 0x000028, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::LPlayRate' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, Temp_bool_Variable) == 0x00002C, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, Temp_float_Variable) == 0x000030, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, CallFunc_IsValid_ReturnValue) == 0x000035, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, Temp_bool_Variable_1) == 0x000036, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, CallFunc_IsValid_ReturnValue_1) == 0x000037, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, K2Node_Select_Default) == 0x000038, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, K2Node_DynamicCast_AsBPI_Ch_0200) == 0x000040, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::K2Node_DynamicCast_AsBPI_Ch_0200' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, CallFunc_SetWeaponAnimStateInterface_bDummy) == 0x000051, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::CallFunc_SetWeaponAnimStateInterface_bDummy' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, CallFunc_GetAttackMotionPlayRate_PlayRate) == 0x000054, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::CallFunc_GetAttackMotionPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, K2Node_Select_Default_1) == 0x000058, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_PlayAttackMontage, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'AttackComponentBaseBP_C_PlayAttackMontage::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.DoEndAttack
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_DoEndAttack final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_DoEndAttack) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_DoEndAttack");
static_assert(sizeof(AttackComponentBaseBP_C_DoEndAttack) == 0x000001, "Wrong size on AttackComponentBaseBP_C_DoEndAttack");
static_assert(offsetof(AttackComponentBaseBP_C_DoEndAttack, bDummy) == 0x000000, "Member 'AttackComponentBaseBP_C_DoEndAttack::bDummy' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.DoPlayerTick
// 0x0008 (0x0008 - 0x0000)
struct AttackComponentBaseBP_C_DoPlayerTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_DoPlayerTick) == 0x000004, "Wrong alignment on AttackComponentBaseBP_C_DoPlayerTick");
static_assert(sizeof(AttackComponentBaseBP_C_DoPlayerTick) == 0x000008, "Wrong size on AttackComponentBaseBP_C_DoPlayerTick");
static_assert(offsetof(AttackComponentBaseBP_C_DoPlayerTick, DeltaSeconds) == 0x000000, "Member 'AttackComponentBaseBP_C_DoPlayerTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_DoPlayerTick, bDummy) == 0x000004, "Member 'AttackComponentBaseBP_C_DoPlayerTick::bDummy' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.ChangeCharacterCollisionPriority
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_ChangeCharacterCollisionPriority final
{
public:
	ECharacterHitPriority                         Priority;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_ChangeCharacterCollisionPriority) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_ChangeCharacterCollisionPriority");
static_assert(sizeof(AttackComponentBaseBP_C_ChangeCharacterCollisionPriority) == 0x000001, "Wrong size on AttackComponentBaseBP_C_ChangeCharacterCollisionPriority");
static_assert(offsetof(AttackComponentBaseBP_C_ChangeCharacterCollisionPriority, Priority) == 0x000000, "Member 'AttackComponentBaseBP_C_ChangeCharacterCollisionPriority::Priority' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsComboCheck
// 0x0002 (0x0002 - 0x0000)
struct AttackComponentBaseBP_C_IsComboCheck final
{
public:
	bool                                          bCombo;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackCombo_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsComboCheck) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_IsComboCheck");
static_assert(sizeof(AttackComponentBaseBP_C_IsComboCheck) == 0x000002, "Wrong size on AttackComponentBaseBP_C_IsComboCheck");
static_assert(offsetof(AttackComponentBaseBP_C_IsComboCheck, bCombo) == 0x000000, "Member 'AttackComponentBaseBP_C_IsComboCheck::bCombo' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsComboCheck, CallFunc_IsAttackCombo_ReturnValue) == 0x000001, "Member 'AttackComponentBaseBP_C_IsComboCheck::CallFunc_IsAttackCombo_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.isReserve
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_IsReserve final
{
public:
	bool                                          bReserve;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsReserve) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_IsReserve");
static_assert(sizeof(AttackComponentBaseBP_C_IsReserve) == 0x000001, "Wrong size on AttackComponentBaseBP_C_IsReserve");
static_assert(offsetof(AttackComponentBaseBP_C_IsReserve, bReserve) == 0x000000, "Member 'AttackComponentBaseBP_C_IsReserve::bReserve' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsEnableAcceptInputAttack
// 0x0002 (0x0002 - 0x0000)
struct AttackComponentBaseBP_C_IsEnableAcceptInputAttack final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyInputAttack_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsEnableAcceptInputAttack) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_IsEnableAcceptInputAttack");
static_assert(sizeof(AttackComponentBaseBP_C_IsEnableAcceptInputAttack) == 0x000002, "Wrong size on AttackComponentBaseBP_C_IsEnableAcceptInputAttack");
static_assert(offsetof(AttackComponentBaseBP_C_IsEnableAcceptInputAttack, bEnable) == 0x000000, "Member 'AttackComponentBaseBP_C_IsEnableAcceptInputAttack::bEnable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsEnableAcceptInputAttack, CallFunc_IsNotifyInputAttack_ReturnValue) == 0x000001, "Member 'AttackComponentBaseBP_C_IsEnableAcceptInputAttack::CallFunc_IsNotifyInputAttack_ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsEnableAttack
// 0x0003 (0x0003 - 0x0000)
struct AttackComponentBaseBP_C_IsEnableAttack final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyEnableAttackOptionNotComboEnd_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsEnableAttack) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_IsEnableAttack");
static_assert(sizeof(AttackComponentBaseBP_C_IsEnableAttack) == 0x000003, "Wrong size on AttackComponentBaseBP_C_IsEnableAttack");
static_assert(offsetof(AttackComponentBaseBP_C_IsEnableAttack, bEnable) == 0x000000, "Member 'AttackComponentBaseBP_C_IsEnableAttack::bEnable' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsEnableAttack, CallFunc_IsNotifyEnableAttackOptionNotComboEnd_ReturnValue) == 0x000001, "Member 'AttackComponentBaseBP_C_IsEnableAttack::CallFunc_IsNotifyEnableAttackOptionNotComboEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(AttackComponentBaseBP_C_IsEnableAttack, CallFunc_IsEnableActionAttack_bEnable) == 0x000002, "Member 'AttackComponentBaseBP_C_IsEnableAttack::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsBranchMode
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_IsBranchMode final
{
public:
	bool                                          Param_bBranchFlag;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsBranchMode) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_IsBranchMode");
static_assert(sizeof(AttackComponentBaseBP_C_IsBranchMode) == 0x000001, "Wrong size on AttackComponentBaseBP_C_IsBranchMode");
static_assert(offsetof(AttackComponentBaseBP_C_IsBranchMode, Param_bBranchFlag) == 0x000000, "Member 'AttackComponentBaseBP_C_IsBranchMode::Param_bBranchFlag' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsIgnoreCheckStartAttack
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_IsIgnoreCheckStartAttack final
{
public:
	bool                                          Param_bIgnoreCheckStartAttack;                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AttackComponentBaseBP_C_IsIgnoreCheckStartAttack) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_IsIgnoreCheckStartAttack");
static_assert(sizeof(AttackComponentBaseBP_C_IsIgnoreCheckStartAttack) == 0x000001, "Wrong size on AttackComponentBaseBP_C_IsIgnoreCheckStartAttack");
static_assert(offsetof(AttackComponentBaseBP_C_IsIgnoreCheckStartAttack, Param_bIgnoreCheckStartAttack) == 0x000000, "Member 'AttackComponentBaseBP_C_IsIgnoreCheckStartAttack::Param_bIgnoreCheckStartAttack' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.GetCurrentMontage
// 0x0008 (0x0008 - 0x0000)
struct AttackComponentBaseBP_C_GetCurrentMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_GetCurrentMontage) == 0x000008, "Wrong alignment on AttackComponentBaseBP_C_GetCurrentMontage");
static_assert(sizeof(AttackComponentBaseBP_C_GetCurrentMontage) == 0x000008, "Wrong size on AttackComponentBaseBP_C_GetCurrentMontage");
static_assert(offsetof(AttackComponentBaseBP_C_GetCurrentMontage, Montage) == 0x000000, "Member 'AttackComponentBaseBP_C_GetCurrentMontage::Montage' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.GetBranchComboAttackInputKind
// 0x0001 (0x0001 - 0x0000)
struct AttackComponentBaseBP_C_GetBranchComboAttackInputKind final
{
public:
	ERSAttackInputKind                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_GetBranchComboAttackInputKind) == 0x000001, "Wrong alignment on AttackComponentBaseBP_C_GetBranchComboAttackInputKind");
static_assert(sizeof(AttackComponentBaseBP_C_GetBranchComboAttackInputKind) == 0x000001, "Wrong size on AttackComponentBaseBP_C_GetBranchComboAttackInputKind");
static_assert(offsetof(AttackComponentBaseBP_C_GetBranchComboAttackInputKind, ReturnValue) == 0x000000, "Member 'AttackComponentBaseBP_C_GetBranchComboAttackInputKind::ReturnValue' has a wrong offset!");

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.GetBranchComboCount
// 0x0004 (0x0004 - 0x0000)
struct AttackComponentBaseBP_C_GetBranchComboCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackComponentBaseBP_C_GetBranchComboCount) == 0x000004, "Wrong alignment on AttackComponentBaseBP_C_GetBranchComboCount");
static_assert(sizeof(AttackComponentBaseBP_C_GetBranchComboCount) == 0x000004, "Wrong size on AttackComponentBaseBP_C_GetBranchComboCount");
static_assert(offsetof(AttackComponentBaseBP_C_GetBranchComboCount, ReturnValue) == 0x000000, "Member 'AttackComponentBaseBP_C_GetBranchComboCount::ReturnValue' has a wrong offset!");

}

