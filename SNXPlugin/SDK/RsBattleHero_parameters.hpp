#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RsBattleHero

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "F_SASParam_structs.hpp"
#include "FPsychicDitherData_structs.hpp"
#include "EPlayerUseItemSpeed_structs.hpp"
#include "EPlayerPsychicActionParam_structs.hpp"
#include "EPsychicDitherType_structs.hpp"
#include "FSASCommand_structs.hpp"
#include "Engine_structs.hpp"
#include "F_SASInputData_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "FSASElectricParam_structs.hpp"
#include "FSASFireParam_structs.hpp"
#include "FSASTelepoParam_structs.hpp"
#include "FSASSeeThroughParam_structs.hpp"
#include "FSASMetalParam_structs.hpp"
#include "FSASStealthParam_structs.hpp"
#include "FSASCopyParam_structs.hpp"
#include "FSASPsychicParam_structs.hpp"


namespace SDK::Params
{

// Function RsBattleHero.RsBattleHero_C.DispatchPsychicUniqueSuccess__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature) == 0x000008, "Wrong size on RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature, Montage) == 0x000000, "Member 'RsBattleHero_C_DispatchPsychicUniqueSuccess__DelegateSignature::Montage' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DispatchPsychicCaptureCompleted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature final
{
public:
	class UAnimMontage*                           FirstAttackMontage;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature) == 0x000008, "Wrong size on RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature, FirstAttackMontage) == 0x000000, "Member 'RsBattleHero_C_DispatchPsychicCaptureCompleted__DelegateSignature::FirstAttackMontage' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DispatchPsychicUniqueAimBegin__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature final
{
public:
	class ABP_PsychicObjectBasic_C*               PsychicObject;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature) == 0x000008, "Wrong size on RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature, PsychicObject) == 0x000000, "Member 'RsBattleHero_C_DispatchPsychicUniqueAimBegin__DelegateSignature::PsychicObject' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ExecuteUbergraph_RsBattleHero
// 0x09E0 (0x09E0 - 0x0000)
struct RsBattleHero_C_ExecuteUbergraph_RsBattleHero final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5496[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_Event_HitResult_1;                          // 0x0008(0x01C0)(ConstParm, ContainsInstancedReference)
	bool                                          K2Node_Event_bCopyPlayer;                          // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5497[0x2];                                     // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttackHitHealRate_ReturnValue;         // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               K2Node_ComponentBoundEvent_SasKind_1;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bActivate;              // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               K2Node_ComponentBoundEvent_SasKind;                // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_1;   // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkTuto_tutorial_m_F_ReturnValue;   // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkTuto_tutorial_f_F_ReturnValue;   // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5498[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_2;   // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_2;                // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkTuto_tutorial_f_G_ReturnValue;   // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkTuto_tutorial_m_G_ReturnValue;   // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate;              // 0x01FC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5499[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFindTargetBrainTalkType>              K2Node_CustomEvent_Type;                           // 0x0210(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549A[0x3];                                     // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFindTargetBrainTalkType                      CallFunc_Array_Get_Item;                           // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549B[0x2];                                     // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_3;   // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0238(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DiscStrEn_ReturnValue;        // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549C[0x7];                                     // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_4;   // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_5;   // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue;   // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_1; // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549D[0x6];                                     // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_6;   // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_7;   // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_2; // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_3; // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549E[0x6];                                     // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_8;   // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x0288(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_4; // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549F[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_9;   // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_10;  // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_5; // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_6; // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A0[0x6];                                     // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_11;  // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_7; // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A1[0x6];                                     // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_12;  // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_13;  // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_SasCombo_ReturnValue;         // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DiscQuestEnemy_ReturnValue;   // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartSASCode_bDummy;                      // 0x02DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerActionSAS_bDummy;                // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A2[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54A3[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A4[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0330(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstanceFromName_Particle_ReturnValue; // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstanceFromName_Particle_ReturnValue_1; // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A5[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetSASLogoTexture_Texture;                // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A6[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0370(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A7[0x3];                                     // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp_1;                 // 0x0380(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CameraAttentionStart_Dummy;               // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x038A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CameraAttentionEnd_Dummy;                 // 0x038B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x038D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A8[0x2];                                     // 0x038E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp_2;                 // 0x0390(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0398(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A9[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds_2;                 // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54AA[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_DeltaSeconds;           // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBrainFieldState                        K2Node_ComponentBoundEvent_State;                  // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldState                        K2Node_ComponentBoundEvent_PrevState;              // 0x03BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54AB[0x5];                                     // 0x03BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldDanger                       K2Node_ComponentBoundEvent_DangerLV;               // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFirstBrainField;       // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBrainFieldLunaticBrainTalk_bOK;      // 0x03CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bChangeDirection;       // 0x03CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionBrainCrash_Enable;          // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBrainCrash_CanBrainCrash;              // 0x03CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x03CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x03CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInterceptAble_bAble;                    // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASButton                                   CallFunc_GetButtonLeft_Button;                     // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASButton                                   CallFunc_GetButtonRight_Button;                    // 0x03D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASButton                                   CallFunc_GetButtonUp_Button;                       // 0x03D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASButton                                   CallFunc_GetButtonDown_Button;                     // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x03D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCommon_bEnable;             // 0x03D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54AC[0x1];                                     // 0x03D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetResurrectAblePlayer_DeadPlayer;        // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x03E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x03EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x03EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventBrainCrash_IsEvent;                // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyEnableAction_ReturnValue;         // 0x03ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x03EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54AD[0x1];                                     // 0x03EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_ComponentBoundEvent_unique_montage_1;       // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_ComponentBoundEvent_unique_montage;         // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54AE[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_PsychicComboLevel_1;    // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54AF[0x6];                                     // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager_1;          // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_PsychicComboLevel;      // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B0[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue;   // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue;         // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_2;                        // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_input_success_in;       // 0x0433(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_3;                        // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B1[0x3];                                     // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bON;                                  // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B2[0x3];                                     // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ClaimantName;                         // 0x0444(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54B3[0x4];                                     // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_ComponentBoundEvent_psy_obj_in;             // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_4;                        // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_5;                        // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x045A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B4[0x5];                                     // 0x045B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager_1;           // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaSeconds_1;                 // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54B5[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager_2;           // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_6;                        // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B6[0x7];                                     // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Event_Montage_1;                            // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Interrupted_1;                        // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B7[0x7];                                     // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Event_Montage;                              // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Interrupted;                          // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputPsychic_ReturnValue;        // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x049A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B8[0x5];                                     // 0x049B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x04AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_6;               // 0x04AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CopyPlayerOff_bDummy;                     // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CopyPlayerOn_bDummy;                      // 0x04AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetWeaponEmissiveColor_bDummy;          // 0x04AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetWeaponEmissiveColor_bDummy_1;        // 0x04AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponEmissiveColor_bDummy;            // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponEmissiveColor_bDummy_1;          // 0x04B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54B9[0x2];                                     // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      K2Node_Event_Parameter_1;                          // 0x04B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_17;                             // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram_1;                          // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54BA[0x3];                                     // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      K2Node_Event_Parameter;                            // 0x04CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_16;                             // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_8;                         // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram;                            // 0x04E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x04E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x04E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASElectricParam                     K2Node_Event_param_15;                             // 0x04E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_15;                             // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASElectricParam                     K2Node_Event_param_14;                             // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54BB[0x7];                                     // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_14;                             // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_7;                         // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0505(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASFireParam                         K2Node_Event_param_13;                             // 0x0506(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54BC[0x1];                                     // 0x0507(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_13;                             // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASFireParam                         K2Node_Event_param_12;                             // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54BD[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_12;                             // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_6;                         // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0524(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0525(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASTelepoParam                       K2Node_Event_param_11;                             // 0x0526(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54BE[0x1];                                     // 0x0527(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_11;                             // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_10;                             // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54BF[0x7];                                     // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_10;                             // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_5;                         // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x0545(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASMetalParam                        K2Node_Event_param_9;                              // 0x0546(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C0[0x1];                                     // 0x0547(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_9;                              // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASMetalParam                        K2Node_Event_param_8;                              // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C1[0x7];                                     // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_8;                              // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_4;                         // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_8;    // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_9;    // 0x0565(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASSeeThroughParam                   K2Node_Event_param_7;                              // 0x0566(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C2[0x1];                                     // 0x0567(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_7;                              // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_6;                              // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C3[0x7];                                     // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_6;                              // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_3;                         // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_10;   // 0x0584(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_11;   // 0x0585(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASStealthParam                      K2Node_Event_param_5;                              // 0x0586(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C4[0x1];                                     // 0x0587(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_5;                              // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param_4;                              // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C5[0x7];                                     // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_4;                              // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_2;                         // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_12;   // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_13;   // 0x05A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASCopyParam                         K2Node_Event_param_3;                              // 0x05A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C6[0x1];                                     // 0x05A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_3;                              // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_2;                              // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C7[0x7];                                     // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_2;                              // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_1;                         // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_14;   // 0x05C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_15;   // 0x05C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASPsychicParam                      K2Node_Event_param_1;                              // 0x05C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C8[0x1];                                     // 0x05C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_1;                              // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_16;   // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASPsychicParam                      K2Node_Event_param;                                // 0x05D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C9[0x6];                                     // 0x05D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner;                                // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime;                           // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_17;   // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAccelerating_Dammy;                    // 0x05E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAccelerating_Dammy_1;                  // 0x05E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54CA[0x1];                                     // 0x05E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetSeeThroughSetting_bDummy;              // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSeeThroughSetting_bDummy_1;            // 0x05F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASButton                                   K2Node_Event_Button;                               // 0x05F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               K2Node_Event_kind;                                 // 0x05F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54CB[0x4];                                     // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_1;             // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               CallFunc_GetSASKindForButton_SASKind;              // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0605(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0606(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0607(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0614(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_6;                     // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_7;               // 0x0621(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54CC[0x2];                                     // 0x0622(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x0624(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54CD[0x4];                                     // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0630(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54CE[0x7];                                     // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_PlaySoundAttachedRS_ReturnValue;          // 0x0640(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_8;               // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsStart;                        // 0x0649(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54CF[0x2];                                     // 0x064A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x064C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP_1;                               // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   K2Node_Event_bad;                                  // 0x0654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54D0[0x3];                                     // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHCHitResult>                   K2Node_Event_Result;                               // 0x0658(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDisableGameOver_bDisableGameOver;       // 0x066C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Initialize_dummy;                         // 0x066D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x066E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54D1[0x1];                                     // 0x066F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapGimmickManager*                     CallFunc_GetMapGimmickManager_MapGimmickManager;   // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0679(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D2[0x2];                                     // 0x067A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AMapGimmickObject* Gimmick, const struct FVector& LookAtPos)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x067C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AMapGimmickObject* Gimmick)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x068C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_7;                        // 0x069C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D3[0x3];                                     // 0x069D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_2;             // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_2;                  // 0x06A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_7;                     // 0x06AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D4[0x1];                                     // 0x06AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentParameterRate_ReturnValue;      // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentDriveTimeRate_ReturnValue;      // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x06B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D5[0x3];                                     // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDriveGaugeRate_ReturnValue;            // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_8;                        // 0x06C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D6[0x3];                                     // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x06C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x06D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckStartWinOrLoseEvent_IsStartEvent;    // 0x06D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CreateRedCode_NewParam;                   // 0x06D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D7[0x5];                                     // 0x06D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager_1;           // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckStartWinOrLoseEvent_IsStartEvent_1;  // 0x06E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D8[0x6];                                     // 0x06E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_Event_HitResult;                            // 0x06E8(0x01C0)(ContainsInstancedReference)
	float                                         K2Node_Event_DamageValue;                          // 0x08A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_9;                        // 0x08AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D9[0x3];                                     // 0x08AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x08B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x08C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x08C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x08C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHitStopInterface_bDummy;               // 0x08C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x08C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHitStopInterface_bDummy_1;             // 0x08C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54DA[0x2];                                     // 0x08C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1; // 0x08C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x08D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHitStopInterface_bDummy_2;             // 0x08DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_8;                     // 0x08DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPlayerIndex_Index;                     // 0x08DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_10;                       // 0x08E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x08E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x08E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54DB[0x1];                                     // 0x08E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBrainFieldTimeRate_ReturnValue;        // 0x08E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x08E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveBrainFieldGameOverTimer_ReturnValue; // 0x08EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54DC[0x3];                                     // 0x08ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBrainFieldGameOverTimeRate_ReturnValue; // 0x08F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBrainFieldRemainTime_ReturnValue;      // 0x08F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x08F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x08FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_11;                       // 0x0900(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_12;                       // 0x0901(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_13;                       // 0x0902(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54DD[0x5];                                     // 0x0903(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0908(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_3;                // 0x0911(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_4;                // 0x0912(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0913(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54DE[0x4];                                     // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_ComponentBoundEvent_Target;                 // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bLockOn;                // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bLostTarget;            // 0x0921(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0922(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_14;                       // 0x0923(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_9;               // 0x0924(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54DF[0x3];                                     // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFindTargetBrainTalkType>              CallFunc_CheckFindBrainTalk_ReturnValue;           // 0x0928(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_5;                // 0x0941(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0942(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54E0[0x5];                                     // 0x0943(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFinishMoveManager_FinishMove_Manager;  // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54E1[0x7];                                     // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FinishMoveActorManager_C*           K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager; // 0x0958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0961(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0962(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_10;              // 0x0963(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x0964(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x0965(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54E2[0x2];                                     // 0x0966(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0968(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_54E3[0x8];                                     // 0x0978(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0980(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UBP_SASHologramAttackCheck_C*           CallFunc_AddComponent_ReturnValue;                 // 0x09B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x09B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     K2Node_Event_PlayerID_3;                           // 0x09B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Event_PlayerID_2;                           // 0x09BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_9;                     // 0x09BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54E4[0x4];                                     // 0x09BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x09C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_10;                    // 0x09C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x09C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54E5[0x6];                                     // 0x09CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeepenTheBondsParamManager*            CallFunc_GetDeepenTheBondsParamManager_ReturnValue; // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x09D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     K2Node_Event_PlayerID_1;                           // 0x09D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Event_PlayerID;                             // 0x09DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero) == 0x000010, "Wrong alignment on RsBattleHero_C_ExecuteUbergraph_RsBattleHero");
static_assert(sizeof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero) == 0x0009E0, "Wrong size on RsBattleHero_C_ExecuteUbergraph_RsBattleHero");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, EntryPoint) == 0x000000, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::EntryPoint' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_HitResult_1) == 0x000008, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_HitResult_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_bCopyPlayer) == 0x0001C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_bCopyPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Not_PreBool_ReturnValue) == 0x0001C9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetAttackHitHealRate_ReturnValue) == 0x0001CC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetAttackHitHealRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_SasKind_1) == 0x0001D0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_SasKind_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001D1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_bActivate) == 0x0001D2, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_bActivate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_SasKind) == 0x0001D3, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerID_ReturnValue) == 0x0001D4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerID_ReturnValue_1) == 0x0001D5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D6, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001D7, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x0001D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_1) == 0x0001E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkTuto_tutorial_m_F_ReturnValue) == 0x0001E8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkTuto_tutorial_m_F_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkTuto_tutorial_f_F_ReturnValue) == 0x0001E9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkTuto_tutorial_f_F_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_2) == 0x0001F0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerID_ReturnValue_2) == 0x0001F8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkTuto_tutorial_f_G_ReturnValue) == 0x0001F9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkTuto_tutorial_f_G_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001FA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkTuto_tutorial_m_G_ReturnValue) == 0x0001FB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkTuto_tutorial_m_G_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CreateDelegate_OutputDelegate) == 0x0001FC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CustomEvent_Type) == 0x000210, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CustomEvent_Type' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Array_LastIndex_ReturnValue) == 0x000220, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000224, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000228, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Array_Get_Item) == 0x00022C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_SwitchEnum_CmpSuccess) == 0x00022D, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_3) == 0x000230, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CreateDelegate_OutputDelegate_1) == 0x000238, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscStrEn_ReturnValue) == 0x000248, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscStrEn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_4) == 0x000250, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_5) == 0x000258, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue) == 0x000260, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_1) == 0x000261, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_6) == 0x000268, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_7) == 0x000270, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_2) == 0x000278, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_3) == 0x000279, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_8) == 0x000280, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CreateDelegate_OutputDelegate_2) == 0x000288, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_4) == 0x000298, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_9) == 0x0002A0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_10) == 0x0002A8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_5) == 0x0002B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_6) == 0x0002B1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_11) == 0x0002B8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_7) == 0x0002C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0002C1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_12) == 0x0002C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainTalkManager_BrainTalkManager_13) == 0x0002D0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainTalkManager_BrainTalkManager_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_SasCombo_ReturnValue) == 0x0002D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_SasCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BrainTalkBt_DiscQuestEnemy_ReturnValue) == 0x0002D9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BrainTalkBt_DiscQuestEnemy_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable) == 0x0002DA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_StartSASCode_bDummy) == 0x0002DB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_StartSASCode_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetPlayerActionSAS_bDummy) == 0x0002DC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetPlayerActionSAS_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0002F0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Add_VectorVector_ReturnValue) == 0x0002F8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetCameraRotation_ReturnValue) == 0x000304, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BreakRotator_Roll) == 0x000310, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BreakRotator_Pitch) == 0x000314, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_BreakRotator_Yaw) == 0x000318, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Add_FloatFloat_ReturnValue) == 0x00031C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_MakeRotator_ReturnValue) == 0x000320, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000330, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CreateDynamicMaterialInstanceFromName_Particle_ReturnValue) == 0x000338, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CreateDynamicMaterialInstanceFromName_Particle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CreateDynamicMaterialInstanceFromName_Particle_ReturnValue_1) == 0x000340, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CreateDynamicMaterialInstanceFromName_Particle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue) == 0x000348, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetSASManager_SAS_Manager) == 0x000350, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetGameSystemManager_Manager) == 0x000358, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetSASLogoTexture_Texture) == 0x000360, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetSASLogoTexture_Texture' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_1) == 0x000368, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetEnpcComp_ReturnComp) == 0x000370, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000378, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_2) == 0x00037C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetEnpcComp_ReturnComp_1) == 0x000380, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetEnpcComp_ReturnComp_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CameraAttentionStart_Dummy) == 0x000388, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CameraAttentionStart_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_3) == 0x000389, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable) == 0x00038A, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CameraAttentionEnd_Dummy) == 0x00038B, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CameraAttentionEnd_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_1) == 0x00038C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_2) == 0x00038D, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetEnpcComp_ReturnComp_2) == 0x000390, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetEnpcComp_ReturnComp_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000398, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_4) == 0x0003A0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CustomEvent_DeltaSeconds_2) == 0x0003A4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CustomEvent_DeltaSeconds_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x0003A8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0003AC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0003B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_DeltaSeconds) == 0x0003B4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_1) == 0x0003B8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_State) == 0x0003B9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_PrevState) == 0x0003BA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_PrevState' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetHUDMainGame_HUDMainGame) == 0x0003C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_DangerLV) == 0x0003C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_DangerLV' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_bFirstBrainField) == 0x0003C9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_bFirstBrainField' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CheckBrainFieldLunaticBrainTalk_bOK) == 0x0003CA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CheckBrainFieldLunaticBrainTalk_bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_bChangeDirection) == 0x0003CB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_bChangeDirection' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableActionBrainCrash_Enable) == 0x0003CC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableActionBrainCrash_Enable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CanBrainCrash_CanBrainCrash) == 0x0003CD, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CanBrainCrash_CanBrainCrash' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_2) == 0x0003CE, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_3) == 0x0003CF, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsInterceptAble_bAble) == 0x0003D0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsInterceptAble_bAble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetButtonLeft_Button) == 0x0003D1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetButtonLeft_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetButtonRight_Button) == 0x0003D2, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetButtonRight_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetButtonUp_Button) == 0x0003D3, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetButtonUp_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetButtonDown_Button) == 0x0003D4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetButtonDown_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_3) == 0x0003D5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableActionCommon_bEnable) == 0x0003D6, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableActionCommon_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerManager_PlayerManager) == 0x0003D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetResurrectAblePlayer_DeadPlayer) == 0x0003E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetResurrectAblePlayer_DeadPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_5) == 0x0003E8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI) == 0x0003E9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_InputAttack_return) == 0x0003EA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsPlayerStatus_Result) == 0x0003EB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEventBrainCrash_IsEvent) == 0x0003EC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEventBrainCrash_IsEvent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsNotifyEnableAction_ReturnValue) == 0x0003ED, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsNotifyEnableAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsPlayerInAerial_ReturnValue) == 0x0003EE, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_unique_montage_1) == 0x0003F0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_unique_montage_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_unique_montage) == 0x0003F8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_unique_montage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_1) == 0x000400, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_PsychicComboLevel_1) == 0x000404, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_PsychicComboLevel_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_4) == 0x000408, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Greater_IntInt_ReturnValue) == 0x000409, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPostProcessManager_Manager) == 0x000410, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPostProcessManager_Manager_1) == 0x000418, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPostProcessManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_PsychicComboLevel) == 0x000420, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_PsychicComboLevel' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000424, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetFlyingPsychicComboLevel_ReturnValue) == 0x000428, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetFlyingPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPsychicComboLevel_ReturnValue) == 0x00042C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000430, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000431, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_2) == 0x000432, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_input_success_in) == 0x000433, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_input_success_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_3) == 0x000434, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_MakeLiteralName_ReturnValue) == 0x000438, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_bON) == 0x000440, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_bON' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_ClaimantName) == 0x000444, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_ClaimantName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_psy_obj_in) == 0x000450, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_psy_obj_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_4) == 0x000458, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_5) == 0x000459, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_5) == 0x00045A, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetGameSystemManager_Manager_1) == 0x000460, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetGameSystemManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CustomEvent_DeltaSeconds_1) == 0x000468, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CustomEvent_DeltaSeconds_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetGameSystemManager_Manager_2) == 0x000470, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetGameSystemManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_6) == 0x000478, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Montage_1) == 0x000480, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Montage_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Interrupted_1) == 0x000488, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Interrupted_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Montage) == 0x000490, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Montage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Interrupted) == 0x000498, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Interrupted' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsPrecedeInputPsychic_ReturnValue) == 0x000499, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsPrecedeInputPsychic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00049A, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetDebuggingManager_Manager) == 0x0004A0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_6) == 0x0004A8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_4) == 0x0004A9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_5) == 0x0004AA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_6) == 0x0004AB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CopyPlayerOff_bDummy) == 0x0004AC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CopyPlayerOff_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CopyPlayerOn_bDummy) == 0x0004AD, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CopyPlayerOn_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_ResetWeaponEmissiveColor_bDummy) == 0x0004AE, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_ResetWeaponEmissiveColor_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_ResetWeaponEmissiveColor_bDummy_1) == 0x0004AF, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_ResetWeaponEmissiveColor_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetWeaponEmissiveColor_bDummy) == 0x0004B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetWeaponEmissiveColor_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetWeaponEmissiveColor_bDummy_1) == 0x0004B1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetWeaponEmissiveColor_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Parameter_1) == 0x0004B4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Parameter_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_17) == 0x0004C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_bHologram_1) == 0x0004C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_bHologram_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Parameter) == 0x0004CC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Parameter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_16) == 0x0004D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_8) == 0x0004E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_bHologram) == 0x0004E4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_bHologram' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0004E5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0004E6, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_15) == 0x0004E7, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_15) == 0x0004E8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_14) == 0x0004F0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_14) == 0x0004F8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_7) == 0x000500, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000504, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000505, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_13) == 0x000506, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_13) == 0x000508, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_12) == 0x000510, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_12) == 0x000518, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_6) == 0x000520, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000524, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000525, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_11) == 0x000526, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_11) == 0x000528, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_10) == 0x000530, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_10) == 0x000538, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_5) == 0x000540, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x000544, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x000545, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_9) == 0x000546, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_9) == 0x000548, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_8) == 0x000550, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_8) == 0x000558, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_4) == 0x000560, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_8) == 0x000564, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_9) == 0x000565, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_7) == 0x000566, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_7) == 0x000568, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_6) == 0x000570, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_6) == 0x000578, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_3) == 0x000580, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_10) == 0x000584, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_11) == 0x000585, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_5) == 0x000586, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_5) == 0x000588, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_4) == 0x000590, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_4) == 0x000598, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_2) == 0x0005A0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_12) == 0x0005A4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_13) == 0x0005A5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_3) == 0x0005A6, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_3) == 0x0005A8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_2) == 0x0005B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_2) == 0x0005B8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime_1) == 0x0005C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_14) == 0x0005C4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_15) == 0x0005C5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param_1) == 0x0005C6, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner_1) == 0x0005C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_16) == 0x0005D0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_param) == 0x0005D1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Owner) == 0x0005D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_RemainTime) == 0x0005E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_RemainTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ObjectObject_ReturnValue_17) == 0x0005E4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ObjectObject_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetAccelerating_Dammy) == 0x0005E5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetAccelerating_Dammy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetAccelerating_Dammy_1) == 0x0005E6, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetAccelerating_Dammy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_MakeLiteralName_ReturnValue_1) == 0x0005E8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetSeeThroughSetting_bDummy) == 0x0005F0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetSeeThroughSetting_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetSeeThroughSetting_bDummy_1) == 0x0005F1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetSeeThroughSetting_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Button) == 0x0005F2, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_kind) == 0x0005F3, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetHUDMainGame_HUDMainGame_1) == 0x0005F8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetHUDMainGame_HUDMainGame_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000600, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetSASKindForButton_SASKind) == 0x000604, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetSASKindForButton_SASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Conv_IntToByte_ReturnValue) == 0x000605, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetValidValue_ReturnValue) == 0x000606, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableSASEffect_bEnable) == 0x000607, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableSASEffect_Param0) == 0x000608, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableSASEffect_Param1) == 0x00060C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableSASEffect_Param2) == 0x000610, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnableSASEffect_Param3) == 0x000614, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000618, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_6) == 0x000620, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_7) == 0x000621, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CustomEvent_DeltaSeconds) == 0x000624, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000628, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000630, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsPlayerStatus_Result_1) == 0x000638, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_PlaySoundAttachedRS_ReturnValue) == 0x000640, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_PlaySoundAttachedRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_8) == 0x000648, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CustomEvent_IsStart) == 0x000649, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CustomEvent_IsStart' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetHP_HP) == 0x00064C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetHP_HP_1) == 0x000650, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetHP_HP_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_bad) == 0x000654, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_bad' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_Result) == 0x000658, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetHPPercent_ReturnValue) == 0x000668, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsDisableGameOver_bDisableGameOver) == 0x00066C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsDisableGameOver_bDisableGameOver' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Initialize_dummy) == 0x00066D, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Initialize_dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x00066E, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetMapGimmickManager_MapGimmickManager) == 0x000670, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetMapGimmickManager_MapGimmickManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000678, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_7) == 0x000679, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CreateDelegate_OutputDelegate_3) == 0x00067C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CreateDelegate_OutputDelegate_4) == 0x00068C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_7) == 0x00069C, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetHUDMainGame_HUDMainGame_2) == 0x0006A0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetHUDMainGame_HUDMainGame_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_8) == 0x0006A8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsPlayerStatus_Result_2) == 0x0006A9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsPlayerStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_7) == 0x0006AA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetCurrentParameterRate_ReturnValue) == 0x0006AC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetCurrentParameterRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetCurrentDriveTimeRate_ReturnValue) == 0x0006B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetCurrentDriveTimeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsDriveMode_ReturnValue) == 0x0006B4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0006B8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_FClamp_ReturnValue) == 0x0006BC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetDriveGaugeRate_ReturnValue) == 0x0006C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetDriveGaugeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_8) == 0x0006C4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetEventManager_EventManager) == 0x0006C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_9) == 0x0006D0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CheckStartWinOrLoseEvent_IsStartEvent) == 0x0006D1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CheckStartWinOrLoseEvent_IsStartEvent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CreateRedCode_NewParam) == 0x0006D2, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CreateRedCode_NewParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetEventManager_EventManager_1) == 0x0006D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetEventManager_EventManager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_10) == 0x0006E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CheckStartWinOrLoseEvent_IsStartEvent_1) == 0x0006E1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CheckStartWinOrLoseEvent_IsStartEvent_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_HitResult) == 0x0006E8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_DamageValue) == 0x0008A8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_DamageValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_9) == 0x0008AC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0008B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_DynamicCast_bSuccess) == 0x0008C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_11) == 0x0008C1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0008C2, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetHitStopInterface_bDummy) == 0x0008C3, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetHitStopInterface_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0008C4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetHitStopInterface_bDummy_1) == 0x0008C5, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetHitStopInterface_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1) == 0x0008C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_DynamicCast_bSuccess_1) == 0x0008D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_12) == 0x0008D9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_SetHitStopInterface_bDummy_2) == 0x0008DA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_SetHitStopInterface_bDummy_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_8) == 0x0008DB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerIndex_Index) == 0x0008DC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerIndex_Index' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_10) == 0x0008E0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0008E1, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_13) == 0x0008E2, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainFieldTimeRate_ReturnValue) == 0x0008E4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainFieldTimeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0008E8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsActiveBrainFieldGameOverTimer_ReturnValue) == 0x0008EC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsActiveBrainFieldGameOverTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainFieldGameOverTimeRate_ReturnValue) == 0x0008F0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainFieldGameOverTimeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainFieldRemainTime_ReturnValue) == 0x0008F4, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainFieldRemainTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0008F8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_FCeil_ReturnValue) == 0x0008FC, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_11) == 0x000900, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_12) == 0x000901, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_13) == 0x000902, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainFieldManager_Manager) == 0x000908, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_14) == 0x000910, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerID_ReturnValue_3) == 0x000911, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerID_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerID_ReturnValue_4) == 0x000912, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerID_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_15) == 0x000913, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_Target) == 0x000918, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_Target' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_bLockOn) == 0x000920, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_bLockOn' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_ComponentBoundEvent_bLostTarget) == 0x000921, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_ComponentBoundEvent_bLostTarget' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_16) == 0x000922, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsControlAI_bAI_14) == 0x000923, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsControlAI_bAI_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_9) == 0x000924, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_CheckFindBrainTalk_ReturnValue) == 0x000928, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_CheckFindBrainTalk_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetBrainCrashManager_Manager) == 0x000938, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_17) == 0x000940, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetPlayerID_ReturnValue_5) == 0x000941, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetPlayerID_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000942, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetFinishMoveManager_FinishMove_Manager) == 0x000948, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetFinishMoveManager_FinishMove_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_18) == 0x000950, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager) == 0x000958, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_DynamicCast_bSuccess_2) == 0x000960, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_EndPlayReason) == 0x000961, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000962, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_Has_Been_Initd_Variable_10) == 0x000963, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_Has_Been_Initd_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_19) == 0x000964, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_20) == 0x000965, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_CreateDelegate_OutputDelegate_5) == 0x000968, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_struct_Variable) == 0x000980, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_AddComponent_ReturnValue) == 0x0009B0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsMainPlayer_bMainPlayer) == 0x0009B8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_PlayerID_3) == 0x0009B9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_PlayerID_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_PlayerID_2) == 0x0009BA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_PlayerID_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_9) == 0x0009BB, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetUserParamManager_UserParamManager) == 0x0009C0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, Temp_bool_IsClosed_Variable_10) == 0x0009C8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::Temp_bool_IsClosed_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_21) == 0x0009C9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_GetDeepenTheBondsParamManager_ReturnValue) == 0x0009D0, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_GetDeepenTheBondsParamManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, CallFunc_IsValid_ReturnValue_22) == 0x0009D8, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_PlayerID_1) == 0x0009D9, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_PlayerID_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ExecuteUbergraph_RsBattleHero, K2Node_Event_PlayerID) == 0x0009DA, "Member 'RsBattleHero_C_ExecuteUbergraph_RsBattleHero::K2Node_Event_PlayerID' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.UnregisterDelayDriveEnd
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_UnregisterDelayDriveEnd final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_UnregisterDelayDriveEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_UnregisterDelayDriveEnd");
static_assert(sizeof(RsBattleHero_C_UnregisterDelayDriveEnd) == 0x000001, "Wrong size on RsBattleHero_C_UnregisterDelayDriveEnd");
static_assert(offsetof(RsBattleHero_C_UnregisterDelayDriveEnd, PlayerId) == 0x000000, "Member 'RsBattleHero_C_UnregisterDelayDriveEnd::PlayerId' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.RegisterDelayDriveEnd
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_RegisterDelayDriveEnd final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_RegisterDelayDriveEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_RegisterDelayDriveEnd");
static_assert(sizeof(RsBattleHero_C_RegisterDelayDriveEnd) == 0x000001, "Wrong size on RsBattleHero_C_RegisterDelayDriveEnd");
static_assert(offsetof(RsBattleHero_C_RegisterDelayDriveEnd, PlayerId) == 0x000000, "Member 'RsBattleHero_C_RegisterDelayDriveEnd::PlayerId' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.UnregisterNpcDriveForNexusDrive
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_UnregisterNpcDriveForNexusDrive final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_UnregisterNpcDriveForNexusDrive) == 0x000001, "Wrong alignment on RsBattleHero_C_UnregisterNpcDriveForNexusDrive");
static_assert(sizeof(RsBattleHero_C_UnregisterNpcDriveForNexusDrive) == 0x000001, "Wrong size on RsBattleHero_C_UnregisterNpcDriveForNexusDrive");
static_assert(offsetof(RsBattleHero_C_UnregisterNpcDriveForNexusDrive, PlayerId) == 0x000000, "Member 'RsBattleHero_C_UnregisterNpcDriveForNexusDrive::PlayerId' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.RegisterNpcDriveForNexusDrive
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_RegisterNpcDriveForNexusDrive final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_RegisterNpcDriveForNexusDrive) == 0x000001, "Wrong alignment on RsBattleHero_C_RegisterNpcDriveForNexusDrive");
static_assert(sizeof(RsBattleHero_C_RegisterNpcDriveForNexusDrive) == 0x000001, "Wrong size on RsBattleHero_C_RegisterNpcDriveForNexusDrive");
static_assert(offsetof(RsBattleHero_C_RegisterNpcDriveForNexusDrive, PlayerId) == 0x000000, "Member 'RsBattleHero_C_RegisterNpcDriveForNexusDrive::PlayerId' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on RsBattleHero_C_ReceiveEndPlay");
static_assert(sizeof(RsBattleHero_C_ReceiveEndPlay) == 0x000001, "Wrong size on RsBattleHero_C_ReceiveEndPlay");
static_assert(offsetof(RsBattleHero_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'RsBattleHero_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature final
{
public:
	class ARSCharacterBase*                       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOn;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLostTarget;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature) == 0x000010, "Wrong size on RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature, Target) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature::Target' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature, bLockOn) == 0x000008, "Member 'RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature::bLockOn' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature, bLostTarget) == 0x000009, "Member 'RsBattleHero_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature::bLostTarget' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnDamageingForPlayer
// 0x01C8 (0x01C8 - 0x0000)
struct RsBattleHero_C_OnDamageingForPlayer final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	float                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnDamageingForPlayer) == 0x000008, "Wrong alignment on RsBattleHero_C_OnDamageingForPlayer");
static_assert(sizeof(RsBattleHero_C_OnDamageingForPlayer) == 0x0001C8, "Wrong size on RsBattleHero_C_OnDamageingForPlayer");
static_assert(offsetof(RsBattleHero_C_OnDamageingForPlayer, HitResult) == 0x000000, "Member 'RsBattleHero_C_OnDamageingForPlayer::HitResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDamageingForPlayer, DamageValue) == 0x0001C0, "Member 'RsBattleHero_C_OnDamageingForPlayer::DamageValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DamageAfter
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_DamageAfter final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_DamageAfter) == 0x000008, "Wrong alignment on RsBattleHero_C_DamageAfter");
static_assert(sizeof(RsBattleHero_C_DamageAfter) == 0x000010, "Wrong size on RsBattleHero_C_DamageAfter");
static_assert(offsetof(RsBattleHero_C_DamageAfter, Result) == 0x000000, "Member 'RsBattleHero_C_DamageAfter::Result' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BadStateEffectOn
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_BadStateEffectOn final
{
public:
	EHCBadState                                   bad;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BadStateEffectOn) == 0x000001, "Wrong alignment on RsBattleHero_C_BadStateEffectOn");
static_assert(sizeof(RsBattleHero_C_BadStateEffectOn) == 0x000001, "Wrong size on RsBattleHero_C_BadStateEffectOn");
static_assert(offsetof(RsBattleHero_C_BadStateEffectOn, bad) == 0x000000, "Member 'RsBattleHero_C_BadStateEffectOn::bad' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetupPhychicCaptureMaterial
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_SetupPhychicCaptureMaterial final
{
public:
	bool                                          IsStart;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SetupPhychicCaptureMaterial) == 0x000001, "Wrong alignment on RsBattleHero_C_SetupPhychicCaptureMaterial");
static_assert(sizeof(RsBattleHero_C_SetupPhychicCaptureMaterial) == 0x000001, "Wrong size on RsBattleHero_C_SetupPhychicCaptureMaterial");
static_assert(offsetof(RsBattleHero_C_SetupPhychicCaptureMaterial, IsStart) == 0x000000, "Member 'RsBattleHero_C_SetupPhychicCaptureMaterial::IsStart' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.TickDelaySasRecoveryEffect
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_TickDelaySasRecoveryEffect final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_TickDelaySasRecoveryEffect) == 0x000004, "Wrong alignment on RsBattleHero_C_TickDelaySasRecoveryEffect");
static_assert(sizeof(RsBattleHero_C_TickDelaySasRecoveryEffect) == 0x000004, "Wrong size on RsBattleHero_C_TickDelaySasRecoveryEffect");
static_assert(offsetof(RsBattleHero_C_TickDelaySasRecoveryEffect, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_TickDelaySasRecoveryEffect::DeltaSeconds' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnEquipSAS
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_OnEquipSAS final
{
public:
	E_SASButton                                   Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Kind;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnEquipSAS) == 0x000001, "Wrong alignment on RsBattleHero_C_OnEquipSAS");
static_assert(sizeof(RsBattleHero_C_OnEquipSAS) == 0x000002, "Wrong size on RsBattleHero_C_OnEquipSAS");
static_assert(offsetof(RsBattleHero_C_OnEquipSAS, Button) == 0x000000, "Member 'RsBattleHero_C_OnEquipSAS::Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEquipSAS, Kind) == 0x000001, "Member 'RsBattleHero_C_OnEquipSAS::Kind' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnPsychicEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnPsychicEnd final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54E6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnPsychicEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnPsychicEnd");
static_assert(sizeof(RsBattleHero_C_OnPsychicEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnPsychicEnd");
static_assert(offsetof(RsBattleHero_C_OnPsychicEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnPsychicEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnPsychicEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnPsychicEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnPsychicEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnPsychicEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnPsychicStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnPsychicStart final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54E7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnPsychicStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnPsychicStart");
static_assert(sizeof(RsBattleHero_C_OnPsychicStart) == 0x000010, "Wrong size on RsBattleHero_C_OnPsychicStart");
static_assert(offsetof(RsBattleHero_C_OnPsychicStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnPsychicStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnPsychicStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnPsychicStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnCopyEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnCopyEnd final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54E8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnCopyEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnCopyEnd");
static_assert(sizeof(RsBattleHero_C_OnCopyEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnCopyEnd");
static_assert(offsetof(RsBattleHero_C_OnCopyEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnCopyEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCopyEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnCopyEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCopyEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnCopyEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnCopyStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnCopyStart final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54E9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnCopyStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnCopyStart");
static_assert(sizeof(RsBattleHero_C_OnCopyStart) == 0x000010, "Wrong size on RsBattleHero_C_OnCopyStart");
static_assert(offsetof(RsBattleHero_C_OnCopyStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnCopyStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCopyStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnCopyStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnStealthEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnStealthEnd final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54EA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnStealthEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnStealthEnd");
static_assert(sizeof(RsBattleHero_C_OnStealthEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnStealthEnd");
static_assert(offsetof(RsBattleHero_C_OnStealthEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnStealthEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnStealthEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnStealthEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnStealthEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnStealthEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnStealthStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnStealthStart final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54EB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnStealthStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnStealthStart");
static_assert(sizeof(RsBattleHero_C_OnStealthStart) == 0x000010, "Wrong size on RsBattleHero_C_OnStealthStart");
static_assert(offsetof(RsBattleHero_C_OnStealthStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnStealthStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnStealthStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnStealthStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnSeeThroughEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnSeeThroughEnd final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54EC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnSeeThroughEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnSeeThroughEnd");
static_assert(sizeof(RsBattleHero_C_OnSeeThroughEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnSeeThroughEnd");
static_assert(offsetof(RsBattleHero_C_OnSeeThroughEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnSeeThroughEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnSeeThroughEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnSeeThroughEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnSeeThroughEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnSeeThroughEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnSeeThroughStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnSeeThroughStart final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54ED[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnSeeThroughStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnSeeThroughStart");
static_assert(sizeof(RsBattleHero_C_OnSeeThroughStart) == 0x000010, "Wrong size on RsBattleHero_C_OnSeeThroughStart");
static_assert(offsetof(RsBattleHero_C_OnSeeThroughStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnSeeThroughStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnSeeThroughStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnSeeThroughStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnMetalEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnMetalEnd final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54EE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnMetalEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnMetalEnd");
static_assert(sizeof(RsBattleHero_C_OnMetalEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnMetalEnd");
static_assert(offsetof(RsBattleHero_C_OnMetalEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnMetalEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnMetalEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnMetalEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnMetalEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnMetalEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnMetalStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnMetalStart final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54EF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnMetalStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnMetalStart");
static_assert(sizeof(RsBattleHero_C_OnMetalStart) == 0x000010, "Wrong size on RsBattleHero_C_OnMetalStart");
static_assert(offsetof(RsBattleHero_C_OnMetalStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnMetalStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnMetalStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnMetalStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnTelepoEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnTelepoEnd final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnTelepoEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnTelepoEnd");
static_assert(sizeof(RsBattleHero_C_OnTelepoEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnTelepoEnd");
static_assert(offsetof(RsBattleHero_C_OnTelepoEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnTelepoEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnTelepoEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnTelepoEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnTelepoEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnTelepoEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnTelepoStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnTelepoStart final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnTelepoStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnTelepoStart");
static_assert(sizeof(RsBattleHero_C_OnTelepoStart) == 0x000010, "Wrong size on RsBattleHero_C_OnTelepoStart");
static_assert(offsetof(RsBattleHero_C_OnTelepoStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnTelepoStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnTelepoStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnTelepoStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnFireEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnFireEnd final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnFireEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnFireEnd");
static_assert(sizeof(RsBattleHero_C_OnFireEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnFireEnd");
static_assert(offsetof(RsBattleHero_C_OnFireEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnFireEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnFireEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnFireEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnFireEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnFireEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnFireStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnFireStart final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnFireStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnFireStart");
static_assert(sizeof(RsBattleHero_C_OnFireStart) == 0x000010, "Wrong size on RsBattleHero_C_OnFireStart");
static_assert(offsetof(RsBattleHero_C_OnFireStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnFireStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnFireStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnFireStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnElectricEnd
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnElectricEnd final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnElectricEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnElectricEnd");
static_assert(sizeof(RsBattleHero_C_OnElectricEnd) == 0x000018, "Wrong size on RsBattleHero_C_OnElectricEnd");
static_assert(offsetof(RsBattleHero_C_OnElectricEnd, Param) == 0x000000, "Member 'RsBattleHero_C_OnElectricEnd::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnElectricEnd, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnElectricEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnElectricEnd, RemainTime) == 0x000010, "Member 'RsBattleHero_C_OnElectricEnd::RemainTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnElectricStart
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnElectricStart final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnElectricStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnElectricStart");
static_assert(sizeof(RsBattleHero_C_OnElectricStart) == 0x000010, "Wrong size on RsBattleHero_C_OnElectricStart");
static_assert(offsetof(RsBattleHero_C_OnElectricStart, Param) == 0x000000, "Member 'RsBattleHero_C_OnElectricStart::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnElectricStart, Param_Owner) == 0x000008, "Member 'RsBattleHero_C_OnElectricStart::Param_Owner' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnAcceleratorEnd
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_OnAcceleratorEnd final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnAcceleratorEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_OnAcceleratorEnd");
static_assert(sizeof(RsBattleHero_C_OnAcceleratorEnd) == 0x000020, "Wrong size on RsBattleHero_C_OnAcceleratorEnd");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorEnd, Parameter) == 0x000000, "Member 'RsBattleHero_C_OnAcceleratorEnd::Parameter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorEnd, Param_Owner) == 0x000010, "Member 'RsBattleHero_C_OnAcceleratorEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorEnd, RemainTime) == 0x000018, "Member 'RsBattleHero_C_OnAcceleratorEnd::RemainTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorEnd, bHologram) == 0x00001C, "Member 'RsBattleHero_C_OnAcceleratorEnd::bHologram' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnAcceleratorStart
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_OnAcceleratorStart final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnAcceleratorStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnAcceleratorStart");
static_assert(sizeof(RsBattleHero_C_OnAcceleratorStart) == 0x000020, "Wrong size on RsBattleHero_C_OnAcceleratorStart");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorStart, Parameter) == 0x000000, "Member 'RsBattleHero_C_OnAcceleratorStart::Parameter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorStart, Param_Owner) == 0x000010, "Member 'RsBattleHero_C_OnAcceleratorStart::Param_Owner' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAcceleratorStart, bHologram) == 0x000018, "Member 'RsBattleHero_C_OnAcceleratorStart::bHologram' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ReceiveMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_ReceiveMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_ReceiveMontageBlendingOut) == 0x000008, "Wrong alignment on RsBattleHero_C_ReceiveMontageBlendingOut");
static_assert(sizeof(RsBattleHero_C_ReceiveMontageBlendingOut) == 0x000010, "Wrong size on RsBattleHero_C_ReceiveMontageBlendingOut");
static_assert(offsetof(RsBattleHero_C_ReceiveMontageBlendingOut, Montage) == 0x000000, "Member 'RsBattleHero_C_ReceiveMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ReceiveMontageBlendingOut, Interrupted) == 0x000008, "Member 'RsBattleHero_C_ReceiveMontageBlendingOut::Interrupted' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ReceiveMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_ReceiveMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_ReceiveMontageEnded) == 0x000008, "Wrong alignment on RsBattleHero_C_ReceiveMontageEnded");
static_assert(sizeof(RsBattleHero_C_ReceiveMontageEnded) == 0x000010, "Wrong size on RsBattleHero_C_ReceiveMontageEnded");
static_assert(offsetof(RsBattleHero_C_ReceiveMontageEnded, Montage) == 0x000000, "Member 'RsBattleHero_C_ReceiveMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ReceiveMontageEnded, Interrupted) == 0x000008, "Member 'RsBattleHero_C_ReceiveMontageEnded::Interrupted' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.TickCaptureVibration
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_TickCaptureVibration final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_TickCaptureVibration) == 0x000004, "Wrong alignment on RsBattleHero_C_TickCaptureVibration");
static_assert(sizeof(RsBattleHero_C_TickCaptureVibration) == 0x000004, "Wrong size on RsBattleHero_C_TickCaptureVibration");
static_assert(offsetof(RsBattleHero_C_TickCaptureVibration, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_TickCaptureVibration::DeltaSeconds' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature final
{
public:
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature) == 0x000008, "Wrong size on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature, Psy_obj_in) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature::Psy_obj_in' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetPsychicEmissionInterface
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_SetPsychicEmissionInterface final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54F8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetPsychicEmissionInterface) == 0x000004, "Wrong alignment on RsBattleHero_C_SetPsychicEmissionInterface");
static_assert(sizeof(RsBattleHero_C_SetPsychicEmissionInterface) == 0x00000C, "Wrong size on RsBattleHero_C_SetPsychicEmissionInterface");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmissionInterface, bON) == 0x000000, "Member 'RsBattleHero_C_SetPsychicEmissionInterface::bON' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmissionInterface, ClaimantName) == 0x000004, "Member 'RsBattleHero_C_SetPsychicEmissionInterface::ClaimantName' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature final
{
public:
	bool                                          Input_success_in;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature) == 0x000001, "Wrong size on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature, Input_success_in) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature::Input_success_in' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature final
{
public:
	int32                                         PsychicComboLevel;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature) == 0x000004, "Wrong size on RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature, PsychicComboLevel) == 0x000000, "Member 'RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature::PsychicComboLevel' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature final
{
public:
	int32                                         PsychicComboLevel;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature) == 0x000004, "Wrong size on RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature, PsychicComboLevel) == 0x000000, "Member 'RsBattleHero_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature::PsychicComboLevel' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature final
{
public:
	class UAnimMontage*                           Unique_montage;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature) == 0x000008, "Wrong size on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature, Unique_montage) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature::Unique_montage' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature final
{
public:
	class UAnimMontage*                           Unique_montage;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature) == 0x000008, "Wrong alignment on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature) == 0x000008, "Wrong size on RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature, Unique_montage) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature::Unique_montage' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature final
{
public:
	bool                                          bChangeDirection;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature) == 0x000001, "Wrong size on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature, bChangeDirection) == 0x000000, "Member 'RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature::bChangeDirection' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature final
{
public:
	EPlayerBrainFieldDanger                       DangerLV;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirstBrainField;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature) == 0x000002, "Wrong size on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature, DangerLV) == 0x000000, "Member 'RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature::DangerLV' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature, bFirstBrainField) == 0x000001, "Member 'RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature::bFirstBrainField' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature final
{
public:
	EPlayerBrainFieldState                        State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldState                        PrevState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature) == 0x000002, "Wrong size on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature, State) == 0x000000, "Member 'RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature::State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature, PrevState) == 0x000001, "Member 'RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature::PrevState' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature) == 0x000004, "Wrong size on RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature::DeltaSeconds' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnEnpcSasTimeDilationTick
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_OnEnpcSasTimeDilationTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnEnpcSasTimeDilationTick) == 0x000004, "Wrong alignment on RsBattleHero_C_OnEnpcSasTimeDilationTick");
static_assert(sizeof(RsBattleHero_C_OnEnpcSasTimeDilationTick) == 0x000004, "Wrong size on RsBattleHero_C_OnEnpcSasTimeDilationTick");
static_assert(offsetof(RsBattleHero_C_OnEnpcSasTimeDilationTick, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_OnEnpcSasTimeDilationTick::DeltaSeconds' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BrainTalk_FindTarget
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_BrainTalk_FindTarget final
{
public:
	TArray<EFindTargetBrainTalkType>              Type;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BrainTalk_FindTarget) == 0x000008, "Wrong alignment on RsBattleHero_C_BrainTalk_FindTarget");
static_assert(sizeof(RsBattleHero_C_BrainTalk_FindTarget) == 0x000010, "Wrong size on RsBattleHero_C_BrainTalk_FindTarget");
static_assert(offsetof(RsBattleHero_C_BrainTalk_FindTarget, Type) == 0x000000, "Member 'RsBattleHero_C_BrainTalk_FindTarget::Type' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature) == 0x000001, "Wrong size on RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature, SasKind) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature::SasKind' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature) == 0x000001, "Wrong size on RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature, bActivate) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature::bActivate' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature) == 0x000001, "Wrong alignment on RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature");
static_assert(sizeof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature) == 0x000001, "Wrong size on RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature");
static_assert(offsetof(RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature, SasKind) == 0x000000, "Member 'RsBattleHero_C_BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature::SasKind' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.NexusDriveAttackHitRecovery
// 0x01C8 (0x01C8 - 0x0000)
struct RsBattleHero_C_NexusDriveAttackHitRecovery final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bCopyPlayer;                                       // 0x01C0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_NexusDriveAttackHitRecovery) == 0x000008, "Wrong alignment on RsBattleHero_C_NexusDriveAttackHitRecovery");
static_assert(sizeof(RsBattleHero_C_NexusDriveAttackHitRecovery) == 0x0001C8, "Wrong size on RsBattleHero_C_NexusDriveAttackHitRecovery");
static_assert(offsetof(RsBattleHero_C_NexusDriveAttackHitRecovery, HitResult) == 0x000000, "Member 'RsBattleHero_C_NexusDriveAttackHitRecovery::HitResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_NexusDriveAttackHitRecovery, bCopyPlayer) == 0x0001C0, "Member 'RsBattleHero_C_NexusDriveAttackHitRecovery::bCopyPlayer' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckInputPsychic
// 0x00A0 (0x00A0 - 0x0000)
struct RsBattleHero_C_CheckInputPsychic final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     LPsychicParam;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54F9[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54FA[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_2;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_3;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_4;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_5;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_6;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     Temp_byte_Variable_7;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     Temp_byte_Variable_8;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     Temp_byte_Variable_9;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54FB[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_1;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_2;            // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue_1;           // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNormalObjectCapture_return;             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy_1;   // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy_2;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54FC[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54FD[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     Temp_byte_Variable_10;                             // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54FE[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevelMax_ReturnValue;      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue;   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54FF[0x1];                                     // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue_1; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            K2Node_Select_Default;                             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5500[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue_1;       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return;                       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default_1;                           // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     Temp_byte_Variable_11;                             // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionPsychic_bEnable;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State_1;     // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNormalObjectCapture_return_1;           // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_3;            // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_4;            // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     K2Node_Select_Default_2;                           // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     Temp_byte_Variable_12;                             // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     K2Node_Select_Default_3;                           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     K2Node_Select_Default_4;                           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return_2;                     // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     K2Node_Select_Default_5;                           // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CheckInputPsychic) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckInputPsychic");
static_assert(sizeof(RsBattleHero_C_CheckInputPsychic) == 0x0000A0, "Wrong size on RsBattleHero_C_CheckInputPsychic");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Dummy) == 0x000000, "Member 'RsBattleHero_C_CheckInputPsychic::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, LPsychicParam) == 0x000001, "Member 'RsBattleHero_C_CheckInputPsychic::LPsychicParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_int_Variable) == 0x000004, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable) == 0x000008, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_1) == 0x000009, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_int_Variable_1) == 0x00000C, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_2) == 0x000010, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_3) == 0x000011, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_4) == 0x000012, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_5) == 0x000013, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_6) == 0x000014, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_bool_Variable) == 0x000015, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_7) == 0x000016, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_8) == 0x000017, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_bool_Variable_1) == 0x000018, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_9) == 0x000019, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsUpperActionStatus_bResult) == 0x00001A, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetCapturePsychicObjectState_State) == 0x00001B, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsPlayerInAerial_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_SwitchEnum_CmpSuccess) == 0x00001D, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsUpperActionStatus_bResult_1) == 0x000025, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsUpperActionStatus_bResult_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsUpperActionStatus_bResult_2) == 0x000026, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsUpperActionStatus_bResult_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_bool_Variable_2) == 0x000027, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000028, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000030, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsEnemyDamageDown_bool) == 0x000042, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsPlayerInAerial_ReturnValue_1) == 0x000043, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsPlayerInAerial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsControlAI_bAI) == 0x000044, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsNormalObjectCapture_return) == 0x000045, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsNormalObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x000046, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_SetActionStateObstructPsychic_bDummy_1) == 0x000047, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_SetActionStateObstructPsychic_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_SetActionStateObstructPsychic_bDummy_2) == 0x000048, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_SetActionStateObstructPsychic_bDummy_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetDebuggingManager_Manager) == 0x000050, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetDebuggingManager_Manager_1) == 0x000060, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsValid_ReturnValue_2) == 0x000068, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_10) == 0x000069, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue) == 0x00006C, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetPsychicComboLevelMax_ReturnValue) == 0x000070, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetPsychicComboLevelMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetPsychicComboLevel_ReturnValue) == 0x000074, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetFlyingPsychicComboLevel_ReturnValue) == 0x000078, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetFlyingPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007D, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_bool_Variable_3) == 0x00007E, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetFlyingPsychicComboLevel_ReturnValue_1) == 0x000080, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetFlyingPsychicComboLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_Select_Default) == 0x000084, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetPsychicComboLevel_ReturnValue_1) == 0x000088, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetPsychicComboLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_InputAttack_return) == 0x00008C, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_Select_Default_1) == 0x00008D, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_11) == 0x00008E, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_InputAttack_return_1) == 0x00008F, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsEnableActionPsychic_bEnable) == 0x000090, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsEnableActionPsychic_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_GetCapturePsychicObjectState_State_1) == 0x000091, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_GetCapturePsychicObjectState_State_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000092, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsNormalObjectCapture_return_1) == 0x000093, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsNormalObjectCapture_return_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsUpperActionStatus_bResult_3) == 0x000094, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsUpperActionStatus_bResult_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_IsUpperActionStatus_bResult_4) == 0x000095, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_IsUpperActionStatus_bResult_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_Select_Default_2) == 0x000096, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, Temp_byte_Variable_12) == 0x000097, "Member 'RsBattleHero_C_CheckInputPsychic::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_Select_Default_3) == 0x000098, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_Select_Default_4) == 0x000099, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, CallFunc_InputAttack_return_2) == 0x00009A, "Member 'RsBattleHero_C_CheckInputPsychic::CallFunc_InputAttack_return_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckInputPsychic, K2Node_Select_Default_5) == 0x00009B, "Member 'RsBattleHero_C_CheckInputPsychic::K2Node_Select_Default_5' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputBrainCrash
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_InputBrainCrash final
{
public:
	int32                                         LBrainCrashState;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5501[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5502[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_InputBrainCrash) == 0x000008, "Wrong alignment on RsBattleHero_C_InputBrainCrash");
static_assert(sizeof(RsBattleHero_C_InputBrainCrash) == 0x000020, "Wrong size on RsBattleHero_C_InputBrainCrash");
static_assert(offsetof(RsBattleHero_C_InputBrainCrash, LBrainCrashState) == 0x000000, "Member 'RsBattleHero_C_InputBrainCrash::LBrainCrashState' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputBrainCrash, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x000004, "Member 'RsBattleHero_C_InputBrainCrash::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputBrainCrash, CallFunc_GetBrainCrashManager_Manager) == 0x000008, "Member 'RsBattleHero_C_InputBrainCrash::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputBrainCrash, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_InputBrainCrash::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputBrainCrash, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_InputBrainCrash::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.StartSAS
// 0x0108 (0x0108 - 0x0000)
struct RsBattleHero_C_StartSAS final
{
public:
	E_SASButton                                   Sas_button;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5503[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRemainTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       SASManager;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     SAS_Kind;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5504[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_CancelSAS_self_CastInput;                 // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5505[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_CancelSAS_self_CastInput_1;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success_1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Fire_ReturnValue;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Electric_ReturnValue;         // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5506[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_CancelSAS_self_CastInput_2;               // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success_2;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5507[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5508[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentGaugeRate_SASGaugeRate;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_SASInputData                        K2Node_MakeStruct_F_SASInputData;                  // 0x0068(0x0002)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5509[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_550A[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSASTimeParameter_RecastSec;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_ActivationSec;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_550B[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_CancelSAS_self_CastInput_3;               // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success_3;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_550C[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSASCommand                           K2Node_MakeStruct_FSASCommand;                     // 0x00A0(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_550D[0x4];                                     // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_Start_self_CastInput;                     // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Start_Success;                            // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_550E[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               CallFunc_GetSASKindForButton_SASKind;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_550F[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugPlayerSASInfinity_bInfinity;       // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_StartSAS) == 0x000008, "Wrong alignment on RsBattleHero_C_StartSAS");
static_assert(sizeof(RsBattleHero_C_StartSAS) == 0x000108, "Wrong size on RsBattleHero_C_StartSAS");
static_assert(offsetof(RsBattleHero_C_StartSAS, Sas_button) == 0x000000, "Member 'RsBattleHero_C_StartSAS::Sas_button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, LRemainTime) == 0x000004, "Member 'RsBattleHero_C_StartSAS::LRemainTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, SASManager) == 0x000008, "Member 'RsBattleHero_C_StartSAS::SASManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, SAS_Kind) == 0x000010, "Member 'RsBattleHero_C_StartSAS::SAS_Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_self_CastInput) == 0x000018, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_Success) == 0x000028, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_Success' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_self_CastInput_1) == 0x000030, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_Success_1) == 0x000040, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_Success_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_IsActiveSAS_Fire_ReturnValue) == 0x000041, "Member 'RsBattleHero_C_StartSAS::CallFunc_IsActiveSAS_Fire_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_IsActiveSAS_Electric_ReturnValue) == 0x000042, "Member 'RsBattleHero_C_StartSAS::CallFunc_IsActiveSAS_Electric_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, K2Node_SwitchEnum_CmpSuccess) == 0x000043, "Member 'RsBattleHero_C_StartSAS::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_self_CastInput_2) == 0x000048, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_Success_2) == 0x000058, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_Success_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'RsBattleHero_C_StartSAS::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'RsBattleHero_C_StartSAS::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetCurrentGaugeRate_SASGaugeRate) == 0x000064, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetCurrentGaugeRate_SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, K2Node_MakeStruct_F_SASInputData) == 0x000068, "Member 'RsBattleHero_C_StartSAS::K2Node_MakeStruct_F_SASInputData' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Array_Add_ReturnValue) == 0x00006C, "Member 'RsBattleHero_C_StartSAS::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetSASManager_SAS_Manager) == 0x000070, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'RsBattleHero_C_StartSAS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, K2Node_SwitchEnum_CmpSuccess_1) == 0x000079, "Member 'RsBattleHero_C_StartSAS::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetSASTimeParameter_RecastSec) == 0x00007C, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetSASTimeParameter_RecastSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetSASTimeParameter_ActivationSec) == 0x000080, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetSASTimeParameter_ActivationSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_self_CastInput_3) == 0x000088, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_CancelSAS_Success_3) == 0x000098, "Member 'RsBattleHero_C_StartSAS::CallFunc_CancelSAS_Success_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, K2Node_MakeStruct_FSASCommand) == 0x0000A0, "Member 'RsBattleHero_C_StartSAS::K2Node_MakeStruct_FSASCommand' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D0, "Member 'RsBattleHero_C_StartSAS::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Start_self_CastInput) == 0x0000D8, "Member 'RsBattleHero_C_StartSAS::CallFunc_Start_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Start_Success) == 0x0000E8, "Member 'RsBattleHero_C_StartSAS::CallFunc_Start_Success' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetDebuggingManager_Manager) == 0x0000F0, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetSASKindForButton_SASKind) == 0x0000F8, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetSASKindForButton_SASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_IsValid_ReturnValue_1) == 0x0000F9, "Member 'RsBattleHero_C_StartSAS::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0000FC, "Member 'RsBattleHero_C_StartSAS::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_Conv_IntToByte_ReturnValue) == 0x000100, "Member 'RsBattleHero_C_StartSAS::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_IsDebugPlayerSASInfinity_bInfinity) == 0x000101, "Member 'RsBattleHero_C_StartSAS::CallFunc_IsDebugPlayerSASInfinity_bInfinity' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS, CallFunc_GetValidValue_ReturnValue) == 0x000102, "Member 'RsBattleHero_C_StartSAS::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnAttackActorHit
// 0x0340 (0x0340 - 0x0000)
struct RsBattleHero_C_OnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5510[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LAddPsychicGauge;                                  // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbNoBonus;                                         // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5511[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LHitActor;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSASCopy;                                         // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicBFUp;                                     // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicBFRight;                                  // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicBFLeft;                                   // 0x01DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicComboFinish;                              // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicAttack;                                   // 0x01DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicUnique;                                   // 0x01DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5512[0x1];                                     // 0x01DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01E0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LbPsychicCombo;                                    // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5513[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LComboCount;                                       // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Stealth_ReturnValue;          // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5514[0x1];                                     // 0x01FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActiveSecondsFromKind_ActiveSeconds;   // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_MaxTime;         // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveNexusDriveSas_ReturnValue;        // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5515[0x3];                                     // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_ActiveSeconds_1; // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_MaxTime_1;       // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5516[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAcceleratorExtendTime_ReturnValue;     // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5517[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSubAttackButtonAttack_ReturnValue;      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5518[0x2];                                     // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackAutoLockOn                             Temp_byte_Variable;                                // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue; // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue_1; // 0x0236(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x0237(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOptionParam*                           CallFunc_GetOptionParam_ReturnValue;               // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackAutoLockOn                             CallFunc_GetAttackAutoLockOn_ReturnValue;          // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x0249(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5519[0x6];                                     // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0250(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551A[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551B[0x2];                                     // 0x026E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0283(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551C[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base;             // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetableCharacter_ReturnValue;     // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551D[0x1];                                     // 0x0293(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551E[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessInterface_bAccess;      // 0x02B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x02B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551F[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5520[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1; // 0x02E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDiscoveredOnceInterface_bDiscoverd; // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessInterface_bAccess_1;    // 0x02F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_3;                              // 0x02F3(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5521[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_2; // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5522[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0312(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0313(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5523[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_4;                              // 0x0321(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5524[0x2];                                     // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_5;                              // 0x032A(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5525[0x1];                                     // 0x032B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_4;                 // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0332(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0333(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5526[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x033D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x033E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x033F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnAttackActorHit) == 0x000008, "Wrong alignment on RsBattleHero_C_OnAttackActorHit");
static_assert(sizeof(RsBattleHero_C_OnAttackActorHit) == 0x000340, "Wrong size on RsBattleHero_C_OnAttackActorHit");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, HitResult) == 0x000000, "Member 'RsBattleHero_C_OnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Dummy) == 0x0001C0, "Member 'RsBattleHero_C_OnAttackActorHit::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LAddPsychicGauge) == 0x0001C4, "Member 'RsBattleHero_C_OnAttackActorHit::LAddPsychicGauge' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbNoBonus) == 0x0001C8, "Member 'RsBattleHero_C_OnAttackActorHit::LbNoBonus' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LHitActor) == 0x0001D0, "Member 'RsBattleHero_C_OnAttackActorHit::LHitActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbSASCopy) == 0x0001D8, "Member 'RsBattleHero_C_OnAttackActorHit::LbSASCopy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicBFUp) == 0x0001D9, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicBFUp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicBFRight) == 0x0001DA, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicBFRight' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicBFLeft) == 0x0001DB, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicBFLeft' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicComboFinish) == 0x0001DC, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicComboFinish' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicAttack) == 0x0001DD, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicAttack' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicUnique) == 0x0001DE, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicUnique' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LExtraType) == 0x0001E0, "Member 'RsBattleHero_C_OnAttackActorHit::LExtraType' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LbPsychicCombo) == 0x0001F0, "Member 'RsBattleHero_C_OnAttackActorHit::LbPsychicCombo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, LComboCount) == 0x0001F4, "Member 'RsBattleHero_C_OnAttackActorHit::LComboCount' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_OnAttackActorHit_Dummy) == 0x0001F8, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsValid_ReturnValue) == 0x0001F9, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsActiveSAS_Stealth_ReturnValue) == 0x0001FA, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsActiveSAS_Stealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetActiveSecondsFromKind_ActiveSeconds) == 0x0001FC, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetActiveSecondsFromKind_ActiveSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetActiveSecondsFromKind_MaxTime) == 0x000200, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetActiveSecondsFromKind_MaxTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsActiveNexusDriveSas_ReturnValue) == 0x000204, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsActiveNexusDriveSas_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000208, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetActiveSecondsFromKind_ActiveSeconds_1) == 0x00020C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetActiveSecondsFromKind_ActiveSeconds_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetActiveSecondsFromKind_MaxTime_1) == 0x000210, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetActiveSecondsFromKind_MaxTime_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000214, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000218, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetAcceleratorExtendTime_ReturnValue) == 0x00021C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetAcceleratorExtendTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000220, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_int_Loop_Num_Variable) == 0x000224, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsSubAttackButtonAttack_ReturnValue) == 0x000228, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsSubAttackButtonAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000229, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetPlayerAccessoryEffect_Param) == 0x00022C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_MathExpression_ReturnValue) == 0x000230, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_byte_Variable) == 0x000234, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue) == 0x000235, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue_1) == 0x000236, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_byte_Variable_1) == 0x000237, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetUserParamManager_UserParamManager) == 0x000238, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetOptionParam_ReturnValue) == 0x000240, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetOptionParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetAttackAutoLockOn_ReturnValue) == 0x000248, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetAttackAutoLockOn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_byte_Variable_2) == 0x000249, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000250, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess) == 0x000260, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue) == 0x000264, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetHP_HP) == 0x000268, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00026C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00026D, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000270, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess_1) == 0x000280, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsBossEnemy_bBoss) == 0x000281, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000282, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000283, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsRSCharacter_Base) == 0x000288, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsRSCharacter_Base' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess_2) == 0x000290, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_CheckTargetableCharacter_ReturnValue) == 0x000291, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_CheckTargetableCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsLockTarget_IsLockTarget) == 0x000292, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_int_Array_Index_Variable) == 0x000294, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_1) == 0x000298, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0002A0, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess_3) == 0x0002B0, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0002B1, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsBrainCrashAccessInterface_bAccess) == 0x0002B2, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsBrainCrashAccessInterface_bAccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnableSASEffect_bEnable) == 0x0002B3, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnableSASEffect_Param0) == 0x0002B4, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnableSASEffect_Param1) == 0x0002B8, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnableSASEffect_Param2) == 0x0002BC, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnableSASEffect_Param3) == 0x0002C0, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x0002C8, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess_4) == 0x0002D8, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1) == 0x0002E0, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess_5) == 0x0002F0, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnemyDiscoveredOnceInterface_bDiscoverd) == 0x0002F1, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnemyDiscoveredOnceInterface_bDiscoverd' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsBrainCrashAccessInterface_bAccess_1) == 0x0002F2, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsBrainCrashAccessInterface_bAccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_byte_Variable_3) == 0x0002F3, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_2) == 0x0002F8, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_DynamicCast_bSuccess_6) == 0x000308, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_2) == 0x00030C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsEnemy_bEnemy) == 0x000310, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Less_IntInt_ReturnValue) == 0x000311, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsPlayerStatus_Result) == 0x000312, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsControlAI_bAI) == 0x000313, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_int_Loop_Counter_Variable) == 0x000314, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Less_IntInt_ReturnValue_1) == 0x000318, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Add_IntInt_ReturnValue) == 0x00031C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_IsPlayerStatus_Result_1) == 0x000320, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_byte_Variable_4) == 0x000321, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_3) == 0x000324, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x000328, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Not_PreBool_ReturnValue) == 0x000329, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_byte_Variable_5) == 0x00032A, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_4) == 0x00032C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_bool_Variable) == 0x000330, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000331, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_GetPlayerID_ReturnValue) == 0x000332, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_SwitchEnum_CmpSuccess) == 0x000333, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_SwitchEnum_CmpSuccess_1) == 0x000334, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_Array_Length_ReturnValue) == 0x000338, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00033C, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, Temp_bool_Variable_1) == 0x00033D, "Member 'RsBattleHero_C_OnAttackActorHit::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, K2Node_Select_Default) == 0x00033E, "Member 'RsBattleHero_C_OnAttackActorHit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAttackActorHit, CallFunc_SetSasStealth_dummy) == 0x00033F, "Member 'RsBattleHero_C_OnAttackActorHit::CallFunc_SetSasStealth_dummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PostTick
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_PostTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PostTick_Dummy;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_PostTick) == 0x000004, "Wrong alignment on RsBattleHero_C_PostTick");
static_assert(sizeof(RsBattleHero_C_PostTick) == 0x000008, "Wrong size on RsBattleHero_C_PostTick");
static_assert(offsetof(RsBattleHero_C_PostTick, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_PostTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PostTick, Dummy) == 0x000004, "Member 'RsBattleHero_C_PostTick::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PostTick, CallFunc_PostTick_Dummy) == 0x000005, "Member 'RsBattleHero_C_PostTick::CallFunc_PostTick_Dummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.MainTick
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_MainTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MainTick_Dummy;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdatePsychicDither_bDummy;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_2;                     // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_2;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_MainTick) == 0x000008, "Wrong alignment on RsBattleHero_C_MainTick");
static_assert(sizeof(RsBattleHero_C_MainTick) == 0x000028, "Wrong size on RsBattleHero_C_MainTick");
static_assert(offsetof(RsBattleHero_C_MainTick, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_MainTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, Dummy) == 0x000004, "Member 'RsBattleHero_C_MainTick::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_MainTick_Dummy) == 0x000005, "Member 'RsBattleHero_C_MainTick::CallFunc_MainTick_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_IsOver_ReturnValue) == 0x000006, "Member 'RsBattleHero_C_MainTick::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_IsEnable_ReturnValue) == 0x000007, "Member 'RsBattleHero_C_MainTick::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_GetRate_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_MainTick::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_MainTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_GetPostProcessManager_Manager) == 0x000010, "Member 'RsBattleHero_C_MainTick::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_IsOver_ReturnValue_1) == 0x000018, "Member 'RsBattleHero_C_MainTick::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_IsEnable_ReturnValue_1) == 0x000019, "Member 'RsBattleHero_C_MainTick::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_UpdatePsychicDither_bDummy) == 0x00001A, "Member 'RsBattleHero_C_MainTick::CallFunc_UpdatePsychicDither_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00001B, "Member 'RsBattleHero_C_MainTick::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_SetInvalidDamage_Dummy) == 0x00001C, "Member 'RsBattleHero_C_MainTick::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_IsOver_ReturnValue_2) == 0x00001D, "Member 'RsBattleHero_C_MainTick::CallFunc_IsOver_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, CallFunc_IsEnable_ReturnValue_2) == 0x00001E, "Member 'RsBattleHero_C_MainTick::CallFunc_IsEnable_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, Temp_bool_Variable) == 0x00001F, "Member 'RsBattleHero_C_MainTick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_MainTick, K2Node_Select_Default) == 0x000020, "Member 'RsBattleHero_C_MainTick::K2Node_Select_Default' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.UpdateBrainField
// 0x00B0 (0x00B0 - 0x0000)
struct RsBattleHero_C_UpdateBrainField final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NeckLocation;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableGameOver_bDisableGameOver;       // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5527[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5528[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimKind_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5529[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_1; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventStartup_IsEvent;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPadEffectPlaying_ReturnValue;           // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_UpdateBrainField) == 0x000008, "Wrong alignment on RsBattleHero_C_UpdateBrainField");
static_assert(sizeof(RsBattleHero_C_UpdateBrainField) == 0x0000B0, "Wrong size on RsBattleHero_C_UpdateBrainField");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_UpdateBrainField::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, NeckLocation) == 0x000004, "Member 'RsBattleHero_C_UpdateBrainField::NeckLocation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RsBattleHero_C_UpdateBrainField::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RsBattleHero_C_UpdateBrainField::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'RsBattleHero_C_UpdateBrainField::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'RsBattleHero_C_UpdateBrainField::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsDisableGameOver_bDisableGameOver) == 0x000032, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsDisableGameOver_bDisableGameOver' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsPlayerStatus_Result) == 0x000033, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000038, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsAnimKind_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_1) == 0x000058, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetBrainFieldManager_Manager) == 0x000060, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsValid_ReturnValue_2) == 0x000068, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsEventStartup_IsEvent) == 0x000069, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsEventStartup_IsEvent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsPadEffectPlaying_ReturnValue) == 0x00006A, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsPadEffectPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_IsControlAI_bAI) == 0x00006B, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, Temp_int_Array_Index_Variable_1) == 0x00006C, "Member 'RsBattleHero_C_UpdateBrainField::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetBrainCodeActorList_CodeList) == 0x000070, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetSocketLocation_ReturnValue) == 0x000084, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_GetSASCodeActorList_CodeList) == 0x000090, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, Temp_int_Loop_Num_Variable_1) == 0x0000A4, "Member 'RsBattleHero_C_UpdateBrainField::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateBrainField, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A8, "Member 'RsBattleHero_C_UpdateBrainField::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.Set Cable Brain Field Mode
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_Set_Cable_Brain_Field_Mode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_552D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_Set_Cable_Brain_Field_Mode) == 0x000008, "Wrong alignment on RsBattleHero_C_Set_Cable_Brain_Field_Mode");
static_assert(sizeof(RsBattleHero_C_Set_Cable_Brain_Field_Mode) == 0x000058, "Wrong size on RsBattleHero_C_Set_Cable_Brain_Field_Mode");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, bEnable) == 0x000000, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, Temp_int_Loop_Num_Variable_1) == 0x000018, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_Less_IntInt_ReturnValue_1) == 0x000024, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_GetBrainCodeActorList_CodeList) == 0x000030, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_GetSASCodeActorList_CodeList) == 0x000040, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_Set_Cable_Brain_Field_Mode, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'RsBattleHero_C_Set_Cable_Brain_Field_Mode::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableBrainField
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_IsEnableBrainField final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckOperationRestrictionFlag_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExistBattleEnemy_bExist;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionBrainFieldOpen_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainFieldInterval_ReturnValue;         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552F[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableBrainField_ReturnValue;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAbleTransitionBrainField_bOK;           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableBrainField) == 0x000008, "Wrong alignment on RsBattleHero_C_IsEnableBrainField");
static_assert(sizeof(RsBattleHero_C_IsEnableBrainField) == 0x000028, "Wrong size on RsBattleHero_C_IsEnableBrainField");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, bEnable) == 0x000000, "Member 'RsBattleHero_C_IsEnableBrainField::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_CheckOperationRestrictionFlag_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_CheckOperationRestrictionFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsExistBattleEnemy_bExist) == 0x000010, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsExistBattleEnemy_bExist' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsEnableActionBrainFieldOpen_ReturnValue) == 0x000011, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsEnableActionBrainFieldOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsBrainFieldInterval_ReturnValue) == 0x000012, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsBrainFieldInterval_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_GetDebuggingManager_Manager) == 0x000018, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsEnableBrainField_ReturnValue) == 0x000022, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsEnableBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsAbleTransitionBrainField_bOK) == 0x000023, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsAbleTransitionBrainField_bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBrainField, CallFunc_IsBattling_bBatting) == 0x000024, "Member 'RsBattleHero_C_IsEnableBrainField::CallFunc_IsBattling_bBatting' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetBrainFieldTimeRate
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_GetBrainFieldTimeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBrainFieldTimeRate_ReturnValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetBrainFieldTimeRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetBrainFieldTimeRate");
static_assert(sizeof(RsBattleHero_C_GetBrainFieldTimeRate) == 0x000008, "Wrong size on RsBattleHero_C_GetBrainFieldTimeRate");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldTimeRate, Rate) == 0x000000, "Member 'RsBattleHero_C_GetBrainFieldTimeRate::Rate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldTimeRate, CallFunc_GetBrainFieldTimeRate_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_GetBrainFieldTimeRate::CallFunc_GetBrainFieldTimeRate_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.StartSAS_UI
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_StartSAS_UI final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5530[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_StartSAS_UI) == 0x000004, "Wrong alignment on RsBattleHero_C_StartSAS_UI");
static_assert(sizeof(RsBattleHero_C_StartSAS_UI) == 0x000008, "Wrong size on RsBattleHero_C_StartSAS_UI");
static_assert(offsetof(RsBattleHero_C_StartSAS_UI, SASButton) == 0x000000, "Member 'RsBattleHero_C_StartSAS_UI::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS_UI, Temp_bool_Variable) == 0x000001, "Member 'RsBattleHero_C_StartSAS_UI::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StartSAS_UI, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_StartSAS_UI::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnChangeBattleReady
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_OnChangeBattleReady final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnChangeBattleReady_bDummy;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnChangeBattleReady) == 0x000001, "Wrong alignment on RsBattleHero_C_OnChangeBattleReady");
static_assert(sizeof(RsBattleHero_C_OnChangeBattleReady) == 0x000004, "Wrong size on RsBattleHero_C_OnChangeBattleReady");
static_assert(offsetof(RsBattleHero_C_OnChangeBattleReady, bBattle) == 0x000000, "Member 'RsBattleHero_C_OnChangeBattleReady::bBattle' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnChangeBattleReady, bDummy) == 0x000001, "Member 'RsBattleHero_C_OnChangeBattleReady::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnChangeBattleReady, CallFunc_OnChangeBattleReady_bDummy) == 0x000002, "Member 'RsBattleHero_C_OnChangeBattleReady::CallFunc_OnChangeBattleReady_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnChangeBattleReady, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_OnChangeBattleReady::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CalcDamageByAttack
// 0x0030 (0x0030 - 0x0000)
struct RsBattleHero_C_CalcDamageByAttack final
{
public:
	float                                         RefPhysicsDamage;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefObjDamage;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlameDamage;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectricDamage;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCriticalDamageRate;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5531[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5532[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LDriveAttackRate;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcDamageByAttack_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcDamageByAttack_ForHero_ReturnValue;   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CalcDamageByAttack) == 0x000008, "Wrong alignment on RsBattleHero_C_CalcDamageByAttack");
static_assert(sizeof(RsBattleHero_C_CalcDamageByAttack) == 0x000030, "Wrong size on RsBattleHero_C_CalcDamageByAttack");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, RefPhysicsDamage) == 0x000000, "Member 'RsBattleHero_C_CalcDamageByAttack::RefPhysicsDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, RefObjDamage) == 0x000004, "Member 'RsBattleHero_C_CalcDamageByAttack::RefObjDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, RefFlameDamage) == 0x000008, "Member 'RsBattleHero_C_CalcDamageByAttack::RefFlameDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, RefElectricDamage) == 0x00000C, "Member 'RsBattleHero_C_CalcDamageByAttack::RefElectricDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, RefCriticalDamageRate) == 0x000010, "Member 'RsBattleHero_C_CalcDamageByAttack::RefCriticalDamageRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, DefenseActor) == 0x000018, "Member 'RsBattleHero_C_CalcDamageByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, ReturnValue) == 0x000020, "Member 'RsBattleHero_C_CalcDamageByAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, LDriveAttackRate) == 0x000024, "Member 'RsBattleHero_C_CalcDamageByAttack::LDriveAttackRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, CallFunc_CalcDamageByAttack_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_CalcDamageByAttack::CallFunc_CalcDamageByAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcDamageByAttack, CallFunc_CalcDamageByAttack_ForHero_ReturnValue) == 0x000029, "Member 'RsBattleHero_C_CalcDamageByAttack::CallFunc_CalcDamageByAttack_ForHero_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetPsychicObjectEnableRange
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_SetPsychicObjectEnableRange final
{
public:
	bool                                          Is_Brain_Field_in;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5533[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetPsychicObjectEnableRange) == 0x000004, "Wrong alignment on RsBattleHero_C_SetPsychicObjectEnableRange");
static_assert(sizeof(RsBattleHero_C_SetPsychicObjectEnableRange) == 0x000008, "Wrong size on RsBattleHero_C_SetPsychicObjectEnableRange");
static_assert(offsetof(RsBattleHero_C_SetPsychicObjectEnableRange, Is_Brain_Field_in) == 0x000000, "Member 'RsBattleHero_C_SetPsychicObjectEnableRange::Is_Brain_Field_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicObjectEnableRange, Range) == 0x000004, "Member 'RsBattleHero_C_SetPsychicObjectEnableRange::Range' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CalcFinalDamageByAttack
// 0x0110 (0x0110 - 0x0000)
struct RsBattleHero_C_CalcFinalDamageByAttack final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5534[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0010(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDamage;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByAttack_ReturnValue;      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByAttack_ForHero_ReturnValue; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CalcFinalDamageByAttack) == 0x000008, "Wrong alignment on RsBattleHero_C_CalcFinalDamageByAttack");
static_assert(sizeof(RsBattleHero_C_CalcFinalDamageByAttack) == 0x000110, "Wrong size on RsBattleHero_C_CalcFinalDamageByAttack");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, Damage) == 0x000000, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::Damage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, DefenseActor) == 0x000008, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, SkillInfo) == 0x000010, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::SkillInfo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, ReturnValue) == 0x000100, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, LDamage) == 0x000104, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::LDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, CallFunc_CalcFinalDamageByAttack_ReturnValue) == 0x000108, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::CallFunc_CalcFinalDamageByAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByAttack, CallFunc_CalcFinalDamageByAttack_ForHero_ReturnValue) == 0x00010C, "Member 'RsBattleHero_C_CalcFinalDamageByAttack::CallFunc_CalcFinalDamageByAttack_ForHero_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OverwriteAttackCollisionInfo
// 0x0198 (0x0198 - 0x0000)
struct RsBattleHero_C_OverwriteAttackCollisionInfo final
{
public:
	struct FHCCollisionCommonInfo                 RefCommonInfo;                                     // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHCSkillCommonInfo                     RefSkill;                                          // 0x0070(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5535[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LElectricPower;                                    // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LFlamePower;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPower;                                            // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LCrash;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPsychicBoost;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LObjPower;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5536[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_OverwriteAttackCollisionInfo_ReturnValue; // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OverwriteAttackCollisionInfo_ForHero_ReturnValue; // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OverwriteAttackCollisionInfo) == 0x000008, "Wrong alignment on RsBattleHero_C_OverwriteAttackCollisionInfo");
static_assert(sizeof(RsBattleHero_C_OverwriteAttackCollisionInfo) == 0x000198, "Wrong size on RsBattleHero_C_OverwriteAttackCollisionInfo");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, RefCommonInfo) == 0x000000, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::RefCommonInfo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, RefSkill) == 0x000070, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::RefSkill' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, ReturnValue) == 0x000160, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LElectricPower) == 0x000164, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LElectricPower' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LFlamePower) == 0x000168, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LFlamePower' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LPower) == 0x00016C, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LPower' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LCrash) == 0x000170, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LCrash' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LPsychicBoost) == 0x000174, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LPsychicBoost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LObjPower) == 0x000178, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LObjPower' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, LExtraType) == 0x000180, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::LExtraType' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, CallFunc_OverwriteAttackCollisionInfo_ReturnValue) == 0x000190, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::CallFunc_OverwriteAttackCollisionInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OverwriteAttackCollisionInfo, CallFunc_OverwriteAttackCollisionInfo_ForHero_ReturnValue) == 0x000191, "Member 'RsBattleHero_C_OverwriteAttackCollisionInfo::CallFunc_OverwriteAttackCollisionInfo_ForHero_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetCanAnimOverrideSASColor
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_SetCanAnimOverrideSASColor final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SetCanAnimOverrideSASColor) == 0x000001, "Wrong alignment on RsBattleHero_C_SetCanAnimOverrideSASColor");
static_assert(sizeof(RsBattleHero_C_SetCanAnimOverrideSASColor) == 0x000002, "Wrong size on RsBattleHero_C_SetCanAnimOverrideSASColor");
static_assert(offsetof(RsBattleHero_C_SetCanAnimOverrideSASColor, Enable) == 0x000000, "Member 'RsBattleHero_C_SetCanAnimOverrideSASColor::Enable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCanAnimOverrideSASColor, Dummy) == 0x000001, "Member 'RsBattleHero_C_SetCanAnimOverrideSASColor::Dummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetCanAnimOverrideSASColor
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_GetCanAnimOverrideSASColor final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetCanAnimOverrideSASColor) == 0x000001, "Wrong alignment on RsBattleHero_C_GetCanAnimOverrideSASColor");
static_assert(sizeof(RsBattleHero_C_GetCanAnimOverrideSASColor) == 0x000001, "Wrong size on RsBattleHero_C_GetCanAnimOverrideSASColor");
static_assert(offsetof(RsBattleHero_C_GetCanAnimOverrideSASColor, Enabled) == 0x000000, "Member 'RsBattleHero_C_GetCanAnimOverrideSASColor::Enabled' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PreTick
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_PreTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreTick_Dummy;                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_PreTick) == 0x000004, "Wrong alignment on RsBattleHero_C_PreTick");
static_assert(sizeof(RsBattleHero_C_PreTick) == 0x000008, "Wrong size on RsBattleHero_C_PreTick");
static_assert(offsetof(RsBattleHero_C_PreTick, DeltaSeconds) == 0x000000, "Member 'RsBattleHero_C_PreTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PreTick, Dummy) == 0x000004, "Member 'RsBattleHero_C_PreTick::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PreTick, CallFunc_PreTick_Dummy) == 0x000005, "Member 'RsBattleHero_C_PreTick::CallFunc_PreTick_Dummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetSasStealth
// 0x0034 (0x0034 - 0x0000)
struct RsBattleHero_C_SetSasStealth final
{
public:
	bool                                          Stealth_on_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hero_order_in;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_delay;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_ignore;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_sas_cancel_in;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          From_event_in;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bHeroOrder;                                      // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         L_DelayTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bDelay;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHideSASOutline_bDummy;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable_1;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5537[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetSasStealth) == 0x000004, "Wrong alignment on RsBattleHero_C_SetSasStealth");
static_assert(sizeof(RsBattleHero_C_SetSasStealth) == 0x000034, "Wrong size on RsBattleHero_C_SetSasStealth");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, Stealth_on_in) == 0x000000, "Member 'RsBattleHero_C_SetSasStealth::Stealth_on_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, Hero_order_in) == 0x000001, "Member 'RsBattleHero_C_SetSasStealth::Hero_order_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, Check_delay) == 0x000002, "Member 'RsBattleHero_C_SetSasStealth::Check_delay' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, Check_ignore) == 0x000003, "Member 'RsBattleHero_C_SetSasStealth::Check_ignore' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, No_sas_cancel_in) == 0x000004, "Member 'RsBattleHero_C_SetSasStealth::No_sas_cancel_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, From_event_in) == 0x000005, "Member 'RsBattleHero_C_SetSasStealth::From_event_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, Dummy) == 0x000006, "Member 'RsBattleHero_C_SetSasStealth::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, L_bHeroOrder) == 0x000007, "Member 'RsBattleHero_C_SetSasStealth::L_bHeroOrder' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, L_DelayTime) == 0x000008, "Member 'RsBattleHero_C_SetSasStealth::L_DelayTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, L_bDelay) == 0x00000C, "Member 'RsBattleHero_C_SetSasStealth::L_bDelay' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00000D, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsMainPlayer_bMainPlayer) == 0x00000E, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_bEnable) == 0x00000F, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param0) == 0x000010, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param1) == 0x000014, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param2) == 0x000018, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param3) == 0x00001C, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_SetHideSASOutline_bDummy) == 0x000020, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_SetHideSASOutline_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_SetSasStealth_dummy) == 0x000021, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_SetSasStealth_dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_bEnable_1) == 0x000022, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_bEnable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param0_1) == 0x000024, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param0_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param1_1) == 0x000028, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param1_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param2_1) == 0x00002C, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSasStealth, CallFunc_IsEnableSASEffect_Param3_1) == 0x000030, "Member 'RsBattleHero_C_SetSasStealth::CallFunc_IsEnableSASEffect_Param3_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetHideSASOutline
// 0x001C (0x001C - 0x0000)
struct RsBattleHero_C_SetHideSASOutline final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5538[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5539[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553A[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetHideSASOutline) == 0x000004, "Wrong alignment on RsBattleHero_C_SetHideSASOutline");
static_assert(sizeof(RsBattleHero_C_SetHideSASOutline) == 0x00001C, "Wrong size on RsBattleHero_C_SetHideSASOutline");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, bHide) == 0x000000, "Member 'RsBattleHero_C_SetHideSASOutline::bHide' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, ClaimantName) == 0x000004, "Member 'RsBattleHero_C_SetHideSASOutline::ClaimantName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, bDummy) == 0x00000C, "Member 'RsBattleHero_C_SetHideSASOutline::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_SetHideSASOutline::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_SetHideSASOutline::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, CallFunc_Array_RemoveItem_ReturnValue) == 0x000015, "Member 'RsBattleHero_C_SetHideSASOutline::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetHideSASOutline, CallFunc_Array_AddUnique_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_SetHideSASOutline::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CopyPlayerOn
// 0x002C (0x002C - 0x0000)
struct RsBattleHero_C_CopyPlayerOn final
{
public:
	float                                         AppearTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CopyPlayerOnIndex_bDummy;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553B[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CopyPlayerOnIndex_bDummy_1;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable_1;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553C[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CopyPlayerOn) == 0x000004, "Wrong alignment on RsBattleHero_C_CopyPlayerOn");
static_assert(sizeof(RsBattleHero_C_CopyPlayerOn) == 0x00002C, "Wrong size on RsBattleHero_C_CopyPlayerOn");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, AppearTime) == 0x000000, "Member 'RsBattleHero_C_CopyPlayerOn::AppearTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, bDummy) == 0x000004, "Member 'RsBattleHero_C_CopyPlayerOn::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_CopyPlayerOnIndex_bDummy) == 0x000005, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_CopyPlayerOnIndex_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_bEnable) == 0x000006, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param0) == 0x000008, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param1) == 0x00000C, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param2) == 0x000010, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param3) == 0x000014, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_CopyPlayerOnIndex_bDummy_1) == 0x000018, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_CopyPlayerOnIndex_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_bEnable_1) == 0x000019, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_bEnable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param0_1) == 0x00001C, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param0_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param1_1) == 0x000020, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param1_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param2_1) == 0x000024, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CopyPlayerOn, CallFunc_IsEnableSASEffect_Param3_1) == 0x000028, "Member 'RsBattleHero_C_CopyPlayerOn::CallFunc_IsEnableSASEffect_Param3_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InitializeSAS
// 0x0040 (0x0040 - 0x0000)
struct RsBattleHero_C_InitializeSAS final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_553E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_553F[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSet_bValid;                        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5540[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               CallFunc_GetEquipSAS_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5541[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_2;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_InitializeSAS) == 0x000008, "Wrong alignment on RsBattleHero_C_InitializeSAS");
static_assert(sizeof(RsBattleHero_C_InitializeSAS) == 0x000040, "Wrong size on RsBattleHero_C_InitializeSAS");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, bDummy) == 0x000000, "Member 'RsBattleHero_C_InitializeSAS::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, Temp_int_Variable) == 0x000004, "Member 'RsBattleHero_C_InitializeSAS::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, Temp_int_Variable_1) == 0x000008, "Member 'RsBattleHero_C_InitializeSAS::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_GetValidValue_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000015, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000016, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_MakeLiteralInt_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_IsValidSet_bValid) == 0x000021, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_IsValidSet_bValid' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_IsControlAI_bAI) == 0x000022, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_GetEquipSAS_ReturnValue) == 0x000031, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_GetEquipSAS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000034, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_Conv_IntToByte_ReturnValue_2) == 0x000038, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_Conv_IntToByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeSAS, CallFunc_GetValidValue_ReturnValue_1) == 0x000039, "Member 'RsBattleHero_C_InitializeSAS::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnDestroy
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_OnDestroy final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Finalize_dummy;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDestroy_bDummy;                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnDestroy) == 0x000001, "Wrong alignment on RsBattleHero_C_OnDestroy");
static_assert(sizeof(RsBattleHero_C_OnDestroy) == 0x000003, "Wrong size on RsBattleHero_C_OnDestroy");
static_assert(offsetof(RsBattleHero_C_OnDestroy, bDummy) == 0x000000, "Member 'RsBattleHero_C_OnDestroy::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDestroy, CallFunc_Finalize_dummy) == 0x000001, "Member 'RsBattleHero_C_OnDestroy::CallFunc_Finalize_dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDestroy, CallFunc_OnDestroy_bDummy) == 0x000002, "Member 'RsBattleHero_C_OnDestroy::CallFunc_OnDestroy_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SAS_CommonStart
// 0x0098 (0x0098 - 0x0000)
struct RsBattleHero_C_SAS_CommonStart final
{
public:
	struct FFSASCommand                           SAS_Command;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHelpTutorial                                 LSasTips;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               LSASKindNative;                                    // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     LSASKindPlayer;                                    // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     LSASKind;                                          // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable;                                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_1;                              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_2;                              // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_3;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_4;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_5;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_6;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_7;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_8;                              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5542[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_9;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5543[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5544[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_ConvertSAStoPlayerID_ReturnValue;         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplySasEffectActive_bDummy;              // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHelpTutorial                                 Temp_byte_Variable_10;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5545[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_2;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_2;              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5546[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetEnumeratorName_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_11;                             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5547[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHelpTutorial                                 Temp_byte_Variable_12;                             // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 K2Node_Select_Default;                             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 Temp_byte_Variable_13;                             // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHelpTutorial                                 K2Node_Select_Default_1;                           // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASButton                                   CallFunc_SearchSASButtonFromKind_SASButton;        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHelpTutorial                                 K2Node_Select_Default_2;                           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5548[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SAS_CommonStart) == 0x000008, "Wrong alignment on RsBattleHero_C_SAS_CommonStart");
static_assert(sizeof(RsBattleHero_C_SAS_CommonStart) == 0x000098, "Wrong size on RsBattleHero_C_SAS_CommonStart");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, SAS_Command) == 0x000000, "Member 'RsBattleHero_C_SAS_CommonStart::SAS_Command' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Dummy) == 0x000030, "Member 'RsBattleHero_C_SAS_CommonStart::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, LSasTips) == 0x000031, "Member 'RsBattleHero_C_SAS_CommonStart::LSasTips' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, LSASKindNative) == 0x000032, "Member 'RsBattleHero_C_SAS_CommonStart::LSASKindNative' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, LSASKindPlayer) == 0x000033, "Member 'RsBattleHero_C_SAS_CommonStart::LSASKindPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, LSASKind) == 0x000034, "Member 'RsBattleHero_C_SAS_CommonStart::LSASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable) == 0x000035, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_1) == 0x000036, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_2) == 0x000037, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_3) == 0x000038, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_4) == 0x000039, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_5) == 0x00003A, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_6) == 0x00003B, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_7) == 0x00003C, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_8) == 0x00003D, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_9) == 0x000044, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Conv_IntToByte_ReturnValue) == 0x000045, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_GetValidValue_ReturnValue) == 0x000046, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_GetPlayerID_ReturnValue) == 0x000047, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000054, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000058, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_ConvertSAStoPlayerID_ReturnValue) == 0x000059, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_ConvertSAStoPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_GetValidValue_ReturnValue_1) == 0x00005A, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_ApplySasEffectActive_bDummy) == 0x00005B, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_ApplySasEffectActive_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_10) == 0x00005C, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000060, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Conv_IntToByte_ReturnValue_2) == 0x000064, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Conv_IntToByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_GetValidValue_ReturnValue_2) == 0x000065, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_GetValidValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_GetEnumeratorName_ReturnValue) == 0x000068, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_GetEnumeratorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_11) == 0x000070, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_GetPlayerManager_PlayerManager) == 0x000078, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_bool_Variable) == 0x000081, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, K2Node_SwitchEnum_CmpSuccess) == 0x000082, "Member 'RsBattleHero_C_SAS_CommonStart::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_12) == 0x000083, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, K2Node_Select_Default) == 0x000084, "Member 'RsBattleHero_C_SAS_CommonStart::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_byte_Variable_13) == 0x000085, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, Temp_bool_Variable_1) == 0x000086, "Member 'RsBattleHero_C_SAS_CommonStart::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, K2Node_Select_Default_1) == 0x000087, "Member 'RsBattleHero_C_SAS_CommonStart::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_SearchSASButtonFromKind_SASButton) == 0x000088, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_SearchSASButtonFromKind_SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, K2Node_Select_Default_2) == 0x000089, "Member 'RsBattleHero_C_SAS_CommonStart::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Array_LastIndex_ReturnValue) == 0x00008C, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonStart, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000090, "Member 'RsBattleHero_C_SAS_CommonStart::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SAS_CommonEnd
// 0x00B0 (0x00B0 - 0x0000)
struct RsBattleHero_C_SAS_CommonEnd final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCancelSASCost;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5549[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainTime;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LRemoveIndex;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRemainTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASButton                                   CallFunc_SearchSASButtonFromKind_SASButton;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplySasEffectActive_bDummy;              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_554A[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_554B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_554C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRegisterActiveSasKindAny_ReturnValue;   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_554D[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_554E[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_554F[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_2;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_2;              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5550[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetEnumeratorName_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5551[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5552[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5553[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5554[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSASTimeParameter_RecastSec;            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_ActivationSec;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSeconds_ActiveSeconds;           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SAS_CommonEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_SAS_CommonEnd");
static_assert(sizeof(RsBattleHero_C_SAS_CommonEnd) == 0x0000B0, "Wrong size on RsBattleHero_C_SAS_CommonEnd");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, SAS_Kind) == 0x000000, "Member 'RsBattleHero_C_SAS_CommonEnd::SAS_Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, bCancelSASCost) == 0x000001, "Member 'RsBattleHero_C_SAS_CommonEnd::bCancelSASCost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, bDummy) == 0x000002, "Member 'RsBattleHero_C_SAS_CommonEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, RemainTime) == 0x000004, "Member 'RsBattleHero_C_SAS_CommonEnd::RemainTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, LRemoveIndex) == 0x000008, "Member 'RsBattleHero_C_SAS_CommonEnd::LRemoveIndex' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, LRemainTime) == 0x00000C, "Member 'RsBattleHero_C_SAS_CommonEnd::LRemainTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000014, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Conv_IntToByte_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000019, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetValidValue_ReturnValue) == 0x00001A, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetValidValue_ReturnValue_1) == 0x00001B, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_SearchSASButtonFromKind_SASButton) == 0x00001C, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_SearchSASButtonFromKind_SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_ApplySasEffectActive_bDummy) == 0x00001D, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_ApplySasEffectActive_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_bool_True_if_break_was_hit_Variable) == 0x00001E, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_int_Loop_Num_Variable) == 0x000028, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetSASCodeActorList_CodeList) == 0x000030, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_IsRegisterActiveSasKindAny_ReturnValue) == 0x000044, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_IsRegisterActiveSasKindAny_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_BooleanAND_ReturnValue) == 0x000054, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_int_Loop_Num_Variable_1) == 0x000058, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x00005C, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_int_Array_Index_Variable_1) == 0x000060, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Conv_IntToByte_ReturnValue_2) == 0x000064, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Conv_IntToByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetValidValue_ReturnValue_2) == 0x000065, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetValidValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetEnumeratorName_ReturnValue) == 0x000068, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetEnumeratorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, Temp_int_Loop_Counter_Variable_1) == 0x000074, "Member 'RsBattleHero_C_SAS_CommonEnd::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000080, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000088, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Array_Length_ReturnValue_1) == 0x00008C, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000090, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetSASTimeParameter_RecastSec) == 0x000094, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetSASTimeParameter_RecastSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetSASTimeParameter_ActivationSec) == 0x000098, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetSASTimeParameter_ActivationSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00009C, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A0, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_FClamp_ReturnValue) == 0x0000A4, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SAS_CommonEnd, CallFunc_GetActiveSeconds_ActiveSeconds) == 0x0000A8, "Member 'RsBattleHero_C_SAS_CommonEnd::CallFunc_GetActiveSeconds_ActiveSeconds' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckHardenRestriction
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_CheckHardenRestriction final
{
public:
	EPlayerActionKind                             Action_kind_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckHardenRestriction) == 0x000001, "Wrong alignment on RsBattleHero_C_CheckHardenRestriction");
static_assert(sizeof(RsBattleHero_C_CheckHardenRestriction) == 0x000002, "Wrong size on RsBattleHero_C_CheckHardenRestriction");
static_assert(offsetof(RsBattleHero_C_CheckHardenRestriction, Action_kind_in) == 0x000000, "Member 'RsBattleHero_C_CheckHardenRestriction::Action_kind_in' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckHardenRestriction, Dummy) == 0x000001, "Member 'RsBattleHero_C_CheckHardenRestriction::Dummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OpenBrainFieldSetting
// 0x0088 (0x0088 - 0x0000)
struct RsBattleHero_C_OpenBrainFieldSetting final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5555[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class UClearGetterManager*                    CallFunc_GetClearGetterManager_ClearGetterManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5556[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5557[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNpcBrainFieldDrive_bDummy;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5558[0x1];                                     // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5559[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenBrainFieldSetting_bDummy;             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OpenBrainFieldSetting) == 0x000008, "Wrong alignment on RsBattleHero_C_OpenBrainFieldSetting");
static_assert(sizeof(RsBattleHero_C_OpenBrainFieldSetting) == 0x000088, "Wrong size on RsBattleHero_C_OpenBrainFieldSetting");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, bDummy) == 0x000000, "Member 'RsBattleHero_C_OpenBrainFieldSetting::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, LPlayerList) == 0x000008, "Member 'RsBattleHero_C_OpenBrainFieldSetting::LPlayerList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_GetClearGetterManager_ClearGetterManager) == 0x000018, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_GetClearGetterManager_ClearGetterManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_GetMaxHP_MaxHP) == 0x000020, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_SetHP_bDummy) == 0x000024, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, Temp_int_Array_Index_Variable) == 0x000028, "Member 'RsBattleHero_C_OpenBrainFieldSetting::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'RsBattleHero_C_OpenBrainFieldSetting::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_GetPlayerList_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_GetDebuggingManager_Manager) == 0x000040, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_IsControlAI_bAI) == 0x000049, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000050, "Member 'RsBattleHero_C_OpenBrainFieldSetting::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'RsBattleHero_C_OpenBrainFieldSetting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_SetNpcBrainFieldDrive_bDummy) == 0x000061, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_SetNpcBrainFieldDrive_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000062, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'RsBattleHero_C_OpenBrainFieldSetting::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000070, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000078, "Member 'RsBattleHero_C_OpenBrainFieldSetting::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'RsBattleHero_C_OpenBrainFieldSetting::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OpenBrainFieldSetting, CallFunc_OpenBrainFieldSetting_bDummy) == 0x000081, "Member 'RsBattleHero_C_OpenBrainFieldSetting::CallFunc_OpenBrainFieldSetting_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CloseBrainFieldSetting
// 0x0070 (0x0070 - 0x0000)
struct RsBattleHero_C_CloseBrainFieldSetting final
{
public:
	EBrainFieldEndType                            EndType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          CallFunc_CloseBrainFieldSetting_bDummy;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainFieldInterval_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555B[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNpcBrainFieldDrive_bDummy;             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555C[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555D[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555E[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CloseBrainFieldSetting) == 0x000008, "Wrong alignment on RsBattleHero_C_CloseBrainFieldSetting");
static_assert(sizeof(RsBattleHero_C_CloseBrainFieldSetting) == 0x000070, "Wrong size on RsBattleHero_C_CloseBrainFieldSetting");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, EndType) == 0x000000, "Member 'RsBattleHero_C_CloseBrainFieldSetting::EndType' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, bDummy) == 0x000001, "Member 'RsBattleHero_C_CloseBrainFieldSetting::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, LPlayerList) == 0x000008, "Member 'RsBattleHero_C_CloseBrainFieldSetting::LPlayerList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_CloseBrainFieldSetting_bDummy) == 0x000018, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_CloseBrainFieldSetting_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_IsBrainFieldInterval_ReturnValue) == 0x000019, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_IsBrainFieldInterval_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'RsBattleHero_C_CloseBrainFieldSetting::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RsBattleHero_C_CloseBrainFieldSetting::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000028, "Member 'RsBattleHero_C_CloseBrainFieldSetting::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RsBattleHero_C_CloseBrainFieldSetting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_SetNpcBrainFieldDrive_bDummy) == 0x000039, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_SetNpcBrainFieldDrive_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00003A, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_GetPlayerList_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_IsControlAI_bAI) == 0x000050, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'RsBattleHero_C_CloseBrainFieldSetting::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000058, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000060, "Member 'RsBattleHero_C_CloseBrainFieldSetting::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'RsBattleHero_C_CloseBrainFieldSetting::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CloseBrainFieldSetting, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'RsBattleHero_C_CloseBrainFieldSetting::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.isEnableActionRecovery
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_IsEnableActionRecovery final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isEnableActionRecovery_Enable;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableActionRecovery) == 0x000001, "Wrong alignment on RsBattleHero_C_IsEnableActionRecovery");
static_assert(sizeof(RsBattleHero_C_IsEnableActionRecovery) == 0x000003, "Wrong size on RsBattleHero_C_IsEnableActionRecovery");
static_assert(offsetof(RsBattleHero_C_IsEnableActionRecovery, Enable) == 0x000000, "Member 'RsBattleHero_C_IsEnableActionRecovery::Enable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableActionRecovery, CallFunc_isEnableActionRecovery_Enable) == 0x000001, "Member 'RsBattleHero_C_IsEnableActionRecovery::CallFunc_isEnableActionRecovery_Enable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableActionRecovery, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_IsEnableActionRecovery::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PsychicObjectThrow
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_PsychicObjectThrow final
{
public:
	bool                                          bSlam;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFocusPsychicObjectUnique_return;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcPsychicCost_Cost;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5560[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AttackCaptureObject_return;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_PsychicObjectThrow) == 0x000008, "Wrong alignment on RsBattleHero_C_PsychicObjectThrow");
static_assert(sizeof(RsBattleHero_C_PsychicObjectThrow) == 0x000020, "Wrong size on RsBattleHero_C_PsychicObjectThrow");
static_assert(offsetof(RsBattleHero_C_PsychicObjectThrow, bSlam) == 0x000000, "Member 'RsBattleHero_C_PsychicObjectThrow::bSlam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectThrow, CallFunc_IsFocusPsychicObjectUnique_return) == 0x000001, "Member 'RsBattleHero_C_PsychicObjectThrow::CallFunc_IsFocusPsychicObjectUnique_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectThrow, CallFunc_CalcPsychicCost_Cost) == 0x000004, "Member 'RsBattleHero_C_PsychicObjectThrow::CallFunc_CalcPsychicCost_Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectThrow, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_PsychicObjectThrow::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectThrow, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000010, "Member 'RsBattleHero_C_PsychicObjectThrow::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectThrow, CallFunc_AttackCaptureObject_return) == 0x000018, "Member 'RsBattleHero_C_PsychicObjectThrow::CallFunc_AttackCaptureObject_return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PsychicObjectCombo
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_PsychicObjectCombo final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttractTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AirCombo;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnemyDirectShot;                                   // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFocusPsychicObjectUnique_return;        // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAttackComponentBase*                   CallFunc_FindAttackingComponent_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcPsychicCost_Cost;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5561[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5562[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PsychicAttackComponent_C*           K2Node_DynamicCast_AsBP_Psychic_Attack_Component;  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5563[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetObjectAnimation_Animation;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5564[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AttackComboCaptureObject_return;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_PsychicObjectCombo) == 0x000008, "Wrong alignment on RsBattleHero_C_PsychicObjectCombo");
static_assert(sizeof(RsBattleHero_C_PsychicObjectCombo) == 0x000058, "Wrong size on RsBattleHero_C_PsychicObjectCombo");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, Level) == 0x000000, "Member 'RsBattleHero_C_PsychicObjectCombo::Level' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, Param_Index) == 0x000004, "Member 'RsBattleHero_C_PsychicObjectCombo::Param_Index' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, AttractTime) == 0x000008, "Member 'RsBattleHero_C_PsychicObjectCombo::AttractTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, AirCombo) == 0x00000C, "Member 'RsBattleHero_C_PsychicObjectCombo::AirCombo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, EnemyDirectShot) == 0x00000D, "Member 'RsBattleHero_C_PsychicObjectCombo::EnemyDirectShot' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x00000E, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_IsFocusPsychicObjectUnique_return) == 0x00000F, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_IsFocusPsychicObjectUnique_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_FindAttackingComponent_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_FindAttackingComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_CalcPsychicCost_Cost) == 0x000018, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_CalcPsychicCost_Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, K2Node_DynamicCast_AsBP_Psychic_Attack_Component) == 0x000028, "Member 'RsBattleHero_C_PsychicObjectCombo::K2Node_DynamicCast_AsBP_Psychic_Attack_Component' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'RsBattleHero_C_PsychicObjectCombo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_GetObjectAnimation_Animation) == 0x000038, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_GetObjectAnimation_Animation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_IsPlayerStatus_Result) == 0x000041, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000048, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PsychicObjectCombo, CallFunc_AttackComboCaptureObject_return) == 0x000050, "Member 'RsBattleHero_C_PsychicObjectCombo::CallFunc_AttackComboCaptureObject_return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetCaptureAction
// 0x0068 (0x0068 - 0x0000)
struct RsBattleHero_C_SetCaptureAction final
{
public:
	bool                                          LbForceAerial;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     LCaptureStateParam;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     Temp_byte_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5565[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0018(0x0040)(ConstParm)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     Temp_byte_Variable_3;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_1;            // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_2;            // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerPsychicActionParam                     K2Node_Select_Default;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     K2Node_Select_Default_1;                           // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     K2Node_Select_Default_2;                           // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetCaptureAction) == 0x000008, "Wrong alignment on RsBattleHero_C_SetCaptureAction");
static_assert(sizeof(RsBattleHero_C_SetCaptureAction) == 0x000068, "Wrong size on RsBattleHero_C_SetCaptureAction");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, LbForceAerial) == 0x000000, "Member 'RsBattleHero_C_SetCaptureAction::LbForceAerial' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, LCaptureStateParam) == 0x000001, "Member 'RsBattleHero_C_SetCaptureAction::LCaptureStateParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_bool_Variable) == 0x000002, "Member 'RsBattleHero_C_SetCaptureAction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_byte_Variable) == 0x000003, "Member 'RsBattleHero_C_SetCaptureAction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_bool_Variable_1) == 0x000008, "Member 'RsBattleHero_C_SetCaptureAction::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_byte_Variable_1) == 0x000009, "Member 'RsBattleHero_C_SetCaptureAction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_byte_Variable_2) == 0x00000A, "Member 'RsBattleHero_C_SetCaptureAction::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_GetCapturePsychicObjectState_State) == 0x00000B, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'RsBattleHero_C_SetCaptureAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_bool_Variable_2) == 0x00000D, "Member 'RsBattleHero_C_SetCaptureAction::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_GetPsychicObject_return) == 0x000010, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_GetAsyncResult_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000058, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00005A, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_InputAttack_return) == 0x00005B, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, Temp_byte_Variable_3) == 0x00005C, "Member 'RsBattleHero_C_SetCaptureAction::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_IsUpperActionStatus_bResult) == 0x00005D, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_IsUpperActionStatus_bResult_1) == 0x00005E, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_IsUpperActionStatus_bResult_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, CallFunc_IsUpperActionStatus_bResult_2) == 0x00005F, "Member 'RsBattleHero_C_SetCaptureAction::CallFunc_IsUpperActionStatus_bResult_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, K2Node_Select_Default) == 0x000060, "Member 'RsBattleHero_C_SetCaptureAction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, K2Node_Select_Default_1) == 0x000061, "Member 'RsBattleHero_C_SetCaptureAction::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetCaptureAction, K2Node_Select_Default_2) == 0x000062, "Member 'RsBattleHero_C_SetCaptureAction::K2Node_Select_Default_2' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerPsychic
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_InputTriggerPsychic final
{
public:
	bool                                          bUnique;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbFailedPsychic;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPsychicCombo;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableInputPsychicCombo_bEnable;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5566[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayPsychicComboCaptureSE_bDummy;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContentsOpen_bOpen;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackedFlyingCombo_ReturnValue;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReserveIntercept_bReserve;              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInterceptAble_bAble;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CaptureFocusObject_return;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAIPsychicObject_bOK;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyInputPsychic_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionPsychic_bEnable;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNormalObjectCapture_return;             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5567[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcPsychicCost_Cost;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueObjectCapture_return;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsComboInterval_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5568[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMapGimmickFocus_return;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjectFocus_return;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNormalObjectFocus_return;               // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5569[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPsychicGauge_Value;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputTriggerPsychic) == 0x000008, "Wrong alignment on RsBattleHero_C_InputTriggerPsychic");
static_assert(sizeof(RsBattleHero_C_InputTriggerPsychic) == 0x000058, "Wrong size on RsBattleHero_C_InputTriggerPsychic");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, bUnique) == 0x000000, "Member 'RsBattleHero_C_InputTriggerPsychic::bUnique' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, LbFailedPsychic) == 0x000001, "Member 'RsBattleHero_C_InputTriggerPsychic::LbFailedPsychic' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, LbPsychicCombo) == 0x000002, "Member 'RsBattleHero_C_InputTriggerPsychic::LbPsychicCombo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsEnableInputPsychicCombo_bEnable) == 0x000003, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsEnableInputPsychicCombo_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_PlayPsychicComboCaptureSE_bDummy) == 0x000020, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_PlayPsychicComboCaptureSE_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsContentsOpen_bOpen) == 0x000021, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsContentsOpen_bOpen' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsAttackedFlyingCombo_ReturnValue) == 0x000022, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsAttackedFlyingCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsReserveIntercept_bReserve) == 0x000023, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsReserveIntercept_bReserve' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsInterceptAble_bAble) == 0x000025, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsInterceptAble_bAble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_Not_PreBool_ReturnValue_1) == 0x000026, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsActionStatus_Result) == 0x000027, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_CaptureFocusObject_return) == 0x000028, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_CaptureFocusObject_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsControlAI_bAI) == 0x000029, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_CheckAIPsychicObject_bOK) == 0x00002A, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_CheckAIPsychicObject_bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsControlAI_bAI_1) == 0x00002B, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_Not_PreBool_ReturnValue_2) == 0x00002C, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsActionStatus_Result_1) == 0x00002D, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_Not_PreBool_ReturnValue_3) == 0x00002E, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_Not_PreBool_ReturnValue_4) == 0x00002F, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsNotifyInputPsychic_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsNotifyInputPsychic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsEnableActionPsychic_bEnable) == 0x000031, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsEnableActionPsychic_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsNormalObjectCapture_return) == 0x000032, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsNormalObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_CalcPsychicCost_Cost) == 0x000034, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_CalcPsychicCost_Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsUniqueObjectCapture_return) == 0x000038, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsUniqueObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsComboInterval_ReturnValue) == 0x000039, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsComboInterval_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000040, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsMapGimmickFocus_return) == 0x000048, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsMapGimmickFocus_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsUniqueObjectFocus_return) == 0x000049, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsUniqueObjectFocus_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsNormalObjectFocus_return) == 0x00004A, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsNormalObjectFocus_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_IsDisableAction_bEnable) == 0x00004B, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_IsDisableAction_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_Not_PreBool_ReturnValue_5) == 0x00004C, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_GetPsychicGauge_Value) == 0x000050, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_GetPsychicGauge_Value' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerPsychic, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000054, "Member 'RsBattleHero_C_InputTriggerPsychic::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputReleasePsychic
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_InputReleasePsychic final
{
public:
	bool                                          bUnique;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopPsychicComboCaptureSE_bDummy;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNormalObjectCapture_return;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjectCapture_return;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputReleasePsychic) == 0x000001, "Wrong alignment on RsBattleHero_C_InputReleasePsychic");
static_assert(sizeof(RsBattleHero_C_InputReleasePsychic) == 0x000008, "Wrong size on RsBattleHero_C_InputReleasePsychic");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, bUnique) == 0x000000, "Member 'RsBattleHero_C_InputReleasePsychic::bUnique' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, CallFunc_InputAttack_return) == 0x000001, "Member 'RsBattleHero_C_InputReleasePsychic::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, CallFunc_StopPsychicComboCaptureSE_bDummy) == 0x000002, "Member 'RsBattleHero_C_InputReleasePsychic::CallFunc_StopPsychicComboCaptureSE_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, CallFunc_IsPlayerStatus_Result) == 0x000003, "Member 'RsBattleHero_C_InputReleasePsychic::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, CallFunc_IsNormalObjectCapture_return) == 0x000004, "Member 'RsBattleHero_C_InputReleasePsychic::CallFunc_IsNormalObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, CallFunc_IsUniqueObjectCapture_return) == 0x000005, "Member 'RsBattleHero_C_InputReleasePsychic::CallFunc_IsUniqueObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, CallFunc_GetCapturePsychicObjectState_State) == 0x000006, "Member 'RsBattleHero_C_InputReleasePsychic::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleasePsychic, K2Node_SwitchEnum_CmpSuccess) == 0x000007, "Member 'RsBattleHero_C_InputReleasePsychic::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetPsychicEmission
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_SetPsychicEmission final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbPrevOn;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnBattleParticle_ReturnValue;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556B[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556C[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Set_Length_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SetPsychicEmission) == 0x000004, "Wrong alignment on RsBattleHero_C_SetPsychicEmission");
static_assert(sizeof(RsBattleHero_C_SetPsychicEmission) == 0x000020, "Wrong size on RsBattleHero_C_SetPsychicEmission");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, bON) == 0x000000, "Member 'RsBattleHero_C_SetPsychicEmission::bON' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, ClaimantName) == 0x000004, "Member 'RsBattleHero_C_SetPsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, LbPrevOn) == 0x00000C, "Member 'RsBattleHero_C_SetPsychicEmission::LbPrevOn' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_ClearBattleParticle_ReturnValue) == 0x00000D, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_ClearBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_SpawnBattleParticle_ReturnValue) == 0x00000E, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_SpawnBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_Set_Length_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_Set_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_Set_Remove_ReturnValue) == 0x000015, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000016, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_Set_Length_ReturnValue_1) == 0x000018, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_Set_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetPsychicEmission, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00001C, "Member 'RsBattleHero_C_SetPsychicEmission::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetUniquePsychicAttackLevel
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_SetUniquePsychicAttackLevel final
{
public:
	int32                                         Param_UniquePsychicBonusLevel;                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetUniquePsychicAttackLevel) == 0x000004, "Wrong alignment on RsBattleHero_C_SetUniquePsychicAttackLevel");
static_assert(sizeof(RsBattleHero_C_SetUniquePsychicAttackLevel) == 0x000004, "Wrong size on RsBattleHero_C_SetUniquePsychicAttackLevel");
static_assert(offsetof(RsBattleHero_C_SetUniquePsychicAttackLevel, Param_UniquePsychicBonusLevel) == 0x000000, "Member 'RsBattleHero_C_SetUniquePsychicAttackLevel::Param_UniquePsychicBonusLevel' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBeginOverlapMapGimmick
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnBeginOverlapMapGimmick final
{
public:
	class AMapGimmickObject*                      Gimmick;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtPos;                                         // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnBeginOverlapMapGimmick) == 0x000008, "Wrong alignment on RsBattleHero_C_OnBeginOverlapMapGimmick");
static_assert(sizeof(RsBattleHero_C_OnBeginOverlapMapGimmick) == 0x000018, "Wrong size on RsBattleHero_C_OnBeginOverlapMapGimmick");
static_assert(offsetof(RsBattleHero_C_OnBeginOverlapMapGimmick, Gimmick) == 0x000000, "Member 'RsBattleHero_C_OnBeginOverlapMapGimmick::Gimmick' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginOverlapMapGimmick, LookAtPos) == 0x000008, "Member 'RsBattleHero_C_OnBeginOverlapMapGimmick::LookAtPos' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnEndOverlapMapGimmick
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_OnEndOverlapMapGimmick final
{
public:
	class AMapGimmickObject*                      Gimmick;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnEndOverlapMapGimmick) == 0x000008, "Wrong alignment on RsBattleHero_C_OnEndOverlapMapGimmick");
static_assert(sizeof(RsBattleHero_C_OnEndOverlapMapGimmick) == 0x000008, "Wrong size on RsBattleHero_C_OnEndOverlapMapGimmick");
static_assert(offsetof(RsBattleHero_C_OnEndOverlapMapGimmick, Gimmick) == 0x000000, "Member 'RsBattleHero_C_OnEndOverlapMapGimmick::Gimmick' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputMapGimmick
// 0x0040 (0x0040 - 0x0000)
struct RsBattleHero_C_InputMapGimmick final
{
public:
	bool                                          bPress;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNormalObjectCapture_return;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjectCapture_return;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556D[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapGimmickManager*                     CallFunc_GetMapGimmickManager_MapGimmickManager;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanChargeMapGimmick_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MapGimmickObjectBase_C*             CallFunc_GetFocusMapGimmick_MapGimmick;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMapGimmickFocus_return;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcPsychicCost_Cost;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionPsychic_bEnable;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5570[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPsychicGauge_Value;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputMapGimmick) == 0x000008, "Wrong alignment on RsBattleHero_C_InputMapGimmick");
static_assert(sizeof(RsBattleHero_C_InputMapGimmick) == 0x000040, "Wrong size on RsBattleHero_C_InputMapGimmick");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, bPress) == 0x000000, "Member 'RsBattleHero_C_InputMapGimmick::bPress' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsNormalObjectCapture_return) == 0x000001, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsNormalObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsUniqueObjectCapture_return) == 0x000002, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsUniqueObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsActionStatus_Result) == 0x000003, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_GetMapGimmickManager_MapGimmickManager) == 0x000008, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_GetMapGimmickManager_MapGimmickManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_CanChargeMapGimmick_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_CanChargeMapGimmick_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_GetFocusMapGimmick_MapGimmick) == 0x000018, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_GetFocusMapGimmick_MapGimmick' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsMapGimmickFocus_return) == 0x000020, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsMapGimmickFocus_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000028, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_CalcPsychicCost_Cost) == 0x000030, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_CalcPsychicCost_Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsEnableActionPsychic_bEnable) == 0x000034, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsEnableActionPsychic_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_GetPsychicGauge_Value) == 0x000038, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_GetPsychicGauge_Value' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputMapGimmick, CallFunc_IsValid_ReturnValue) == 0x00003D, "Member 'RsBattleHero_C_InputMapGimmick::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CancelMapGimmick
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_CancelMapGimmick final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5571[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapGimmickManager*                     CallFunc_GetMapGimmickManager_MapGimmickManager;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestToMapGimmick_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CancelMapGimmick) == 0x000008, "Wrong alignment on RsBattleHero_C_CancelMapGimmick");
static_assert(sizeof(RsBattleHero_C_CancelMapGimmick) == 0x000018, "Wrong size on RsBattleHero_C_CancelMapGimmick");
static_assert(offsetof(RsBattleHero_C_CancelMapGimmick, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RsBattleHero_C_CancelMapGimmick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelMapGimmick, CallFunc_GetMapGimmickManager_MapGimmickManager) == 0x000008, "Member 'RsBattleHero_C_CancelMapGimmick::CallFunc_GetMapGimmickManager_MapGimmickManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelMapGimmick, CallFunc_RequestToMapGimmick_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_CancelMapGimmick::CallFunc_RequestToMapGimmick_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CaptureMapGimmick
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_CaptureMapGimmick final
{
public:
	class AMapGimmickManager*                     CallFunc_GetMapGimmickManager_MapGimmickManager;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestToMapGimmick_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CaptureMapGimmick) == 0x000008, "Wrong alignment on RsBattleHero_C_CaptureMapGimmick");
static_assert(sizeof(RsBattleHero_C_CaptureMapGimmick) == 0x000010, "Wrong size on RsBattleHero_C_CaptureMapGimmick");
static_assert(offsetof(RsBattleHero_C_CaptureMapGimmick, CallFunc_GetMapGimmickManager_MapGimmickManager) == 0x000000, "Member 'RsBattleHero_C_CaptureMapGimmick::CallFunc_GetMapGimmickManager_MapGimmickManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CaptureMapGimmick, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_CaptureMapGimmick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CaptureMapGimmick, CallFunc_RequestToMapGimmick_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_CaptureMapGimmick::CallFunc_RequestToMapGimmick_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetAttackMotionPlayRate
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_GetAttackMotionPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPlayRate;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5572[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttackAnimationPlayRate_ReturnValue;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttackMotionPlayRate_PlayRate;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetAttackMotionPlayRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetAttackMotionPlayRate");
static_assert(sizeof(RsBattleHero_C_GetAttackMotionPlayRate) == 0x000014, "Wrong size on RsBattleHero_C_GetAttackMotionPlayRate");
static_assert(offsetof(RsBattleHero_C_GetAttackMotionPlayRate, PlayRate) == 0x000000, "Member 'RsBattleHero_C_GetAttackMotionPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAttackMotionPlayRate, LPlayRate) == 0x000004, "Member 'RsBattleHero_C_GetAttackMotionPlayRate::LPlayRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAttackMotionPlayRate, CallFunc_IsPlayerStatus_Result) == 0x000008, "Member 'RsBattleHero_C_GetAttackMotionPlayRate::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAttackMotionPlayRate, CallFunc_IsDriveMode_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_GetAttackMotionPlayRate::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAttackMotionPlayRate, CallFunc_GetAttackAnimationPlayRate_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_GetAttackMotionPlayRate::CallFunc_GetAttackAnimationPlayRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAttackMotionPlayRate, CallFunc_GetAttackMotionPlayRate_PlayRate) == 0x000010, "Member 'RsBattleHero_C_GetAttackMotionPlayRate::CallFunc_GetAttackMotionPlayRate_PlayRate' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerBrainField
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_InputTriggerBrainField final
{
public:
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDrive_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy_1;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenBrainField_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableBrainField_bEnable;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputTriggerBrainField) == 0x000004, "Wrong alignment on RsBattleHero_C_InputTriggerBrainField");
static_assert(sizeof(RsBattleHero_C_InputTriggerBrainField) == 0x00000C, "Wrong size on RsBattleHero_C_InputTriggerBrainField");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x000000, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_IsDriveMode_bDrive) == 0x000001, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_IsEnableDrive_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_IsEnableDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000003, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000004, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_SetActionStateObstructPsychic_bDummy_1) == 0x000008, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_SetActionStateObstructPsychic_bDummy_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_OpenBrainField_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_OpenBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainField, CallFunc_IsEnableBrainField_bEnable) == 0x00000A, "Member 'RsBattleHero_C_InputTriggerBrainField::CallFunc_IsEnableBrainField_bEnable' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBeginDrive
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_OnBeginDrive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5573[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBrainFieldCount_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRecoveryBadStatus_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5574[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSASCharge_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBeginDrive_Dummy;                       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBeginDrive) == 0x000008, "Wrong alignment on RsBattleHero_C_OnBeginDrive");
static_assert(sizeof(RsBattleHero_C_OnBeginDrive) == 0x000020, "Wrong size on RsBattleHero_C_OnBeginDrive");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, Dummy) == 0x000000, "Member 'RsBattleHero_C_OnBeginDrive::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_GetBrainFieldCount_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_GetBrainFieldCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_IsRecoveryBadStatus_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_IsRecoveryBadStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_IsControlAI_bAI) == 0x00000A, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000010, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_IsSASCharge_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_IsSASCharge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBeginDrive, CallFunc_OnBeginDrive_Dummy) == 0x000019, "Member 'RsBattleHero_C_OnBeginDrive::CallFunc_OnBeginDrive_Dummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnEndDrive
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnEndDrive final
{
public:
	bool                                          bInterruption;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLocationChange;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEndDrive_Dummy;                         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5575[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_OnEndDrive) == 0x000008, "Wrong alignment on RsBattleHero_C_OnEndDrive");
static_assert(sizeof(RsBattleHero_C_OnEndDrive) == 0x000010, "Wrong size on RsBattleHero_C_OnEndDrive");
static_assert(offsetof(RsBattleHero_C_OnEndDrive, bInterruption) == 0x000000, "Member 'RsBattleHero_C_OnEndDrive::bInterruption' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEndDrive, bLocationChange) == 0x000001, "Member 'RsBattleHero_C_OnEndDrive::bLocationChange' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEndDrive, Dummy) == 0x000002, "Member 'RsBattleHero_C_OnEndDrive::Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEndDrive, CallFunc_OnEndDrive_Dummy) == 0x000003, "Member 'RsBattleHero_C_OnEndDrive::CallFunc_OnEndDrive_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEndDrive, CallFunc_IsControlAI_bAI) == 0x000004, "Member 'RsBattleHero_C_OnEndDrive::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEndDrive, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000008, "Member 'RsBattleHero_C_OnEndDrive::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckCaptureAnimPattern
// 0x0120 (0x0120 - 0x0000)
struct RsBattleHero_C_CheckCaptureAnimPattern final
{
public:
	struct FVector                                ObjectLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomFront;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Pattern;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     LPattern;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEndLeft;                                         // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbObjectLeft;                                      // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbObjectRight;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5576[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         COS60;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LObjectDirDot;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbFrontRightFoot;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5577[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LFootDir;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_1;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_2;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_3;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_4;                              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_5;                              // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_6;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_7;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_8;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_9;                              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5578[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_10;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5579[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     K2Node_Select_Default;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     K2Node_Select_Default_1;                           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     K2Node_Select_Default_2;                           // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     K2Node_Select_Default_3;                           // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     K2Node_Select_Default_4;                           // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     Temp_byte_Variable_11;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_557A[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_557B[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCaptureAnimPattern                     K2Node_Select_Default_5;                           // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_557C[0x1];                                     // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_557D[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_557E[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CheckCaptureAnimPattern) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckCaptureAnimPattern");
static_assert(sizeof(RsBattleHero_C_CheckCaptureAnimPattern) == 0x000120, "Wrong size on RsBattleHero_C_CheckCaptureAnimPattern");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, ObjectLocation) == 0x000000, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::ObjectLocation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, RandomFront) == 0x00000C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::RandomFront' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Pattern) == 0x000010, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Pattern' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LPattern) == 0x000011, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LPattern' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LbEndLeft) == 0x000012, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LbEndLeft' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LbObjectLeft) == 0x000013, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LbObjectLeft' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LbObjectRight) == 0x000014, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LbObjectRight' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, COS60) == 0x000018, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::COS60' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LObjectDirDot) == 0x00001C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LObjectDirDot' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LbFrontRightFoot) == 0x000020, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LbFrontRightFoot' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, LFootDir) == 0x000024, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::LFootDir' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable) == 0x000030, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_1) == 0x000031, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_bool_Variable) == 0x000032, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_2) == 0x000033, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_3) == 0x000034, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_bool_Variable_1) == 0x000035, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_4) == 0x000036, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_5) == 0x000037, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_bool_Variable_2) == 0x000038, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_6) == 0x000039, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_7) == 0x00003A, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_bool_Variable_3) == 0x00003B, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_8) == 0x00003C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_9) == 0x00003D, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_bool_Variable_4) == 0x00003E, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GetDebuggingManager_Manager) == 0x000040, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_10) == 0x000049, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Conv_IntToByte_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000051, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GetValidValue_ReturnValue) == 0x000052, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, K2Node_Select_Default) == 0x000053, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, K2Node_Select_Default_1) == 0x000054, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, K2Node_Select_Default_2) == 0x000055, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, K2Node_Select_Default_3) == 0x000056, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, K2Node_Select_Default_4) == 0x000057, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_byte_Variable_11) == 0x000058, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00005C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Clamp_ReturnValue) == 0x000064, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000068, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, Temp_bool_Variable_5) == 0x00006C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00006D, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, K2Node_Select_Default_5) == 0x00006E, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Less_FloatFloat_ReturnValue) == 0x000074, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000075, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GetActorRightVector_ReturnValue) == 0x000078, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000084, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000090, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GetActorForwardVector_ReturnValue) == 0x00009C, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_BreakVector_X) == 0x0000A8, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_BreakVector_Y) == 0x0000AC, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000B4, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_MakeVector_ReturnValue) == 0x0000B8, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000C4, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Normal_ReturnValue) == 0x0000C8, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000D4, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GetSocketLocation_ReturnValue) == 0x0000D8, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_GetSocketLocation_ReturnValue_1) == 0x0000E4, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_BreakVector_X_1) == 0x0000FC, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_BreakVector_Y_1) == 0x000100, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_BreakVector_Z_1) == 0x000104, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_MakeVector_ReturnValue_1) == 0x000108, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureAnimPattern, CallFunc_Normal_ReturnValue_1) == 0x000114, "Member 'RsBattleHero_C_CheckCaptureAnimPattern::CallFunc_Normal_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputSAS
// 0x0060 (0x0060 - 0x0000)
struct RsBattleHero_C_InputSAS final
{
public:
	E_SASButton                                   Sas_button;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSASActive;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_557F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LRemoveIndex;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     LCancelSAS;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbCancel;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5580[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_forButton_IsSAS;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5581[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5582[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager_1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_CancelSAS_self_CastInput;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success;                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASInput_bEnable;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5583[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5584[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCanSAS_Use_IsSASUse;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputSAS) == 0x000008, "Wrong alignment on RsBattleHero_C_InputSAS");
static_assert(sizeof(RsBattleHero_C_InputSAS) == 0x000060, "Wrong size on RsBattleHero_C_InputSAS");
static_assert(offsetof(RsBattleHero_C_InputSAS, Sas_button) == 0x000000, "Member 'RsBattleHero_C_InputSAS::Sas_button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, LbSASActive) == 0x000001, "Member 'RsBattleHero_C_InputSAS::LbSASActive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, LRemoveIndex) == 0x000004, "Member 'RsBattleHero_C_InputSAS::LRemoveIndex' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, LCancelSAS) == 0x000008, "Member 'RsBattleHero_C_InputSAS::LCancelSAS' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, LbCancel) == 0x000009, "Member 'RsBattleHero_C_InputSAS::LbCancel' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RsBattleHero_C_InputSAS::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_IsActiveSAS_forButton_IsSAS) == 0x000010, "Member 'RsBattleHero_C_InputSAS::CallFunc_IsActiveSAS_forButton_IsSAS' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RsBattleHero_C_InputSAS::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_GetSASManager_SAS_Manager) == 0x000018, "Member 'RsBattleHero_C_InputSAS::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_IsCutInPlaying_Playing) == 0x000020, "Member 'RsBattleHero_C_InputSAS::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000021, "Member 'RsBattleHero_C_InputSAS::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'RsBattleHero_C_InputSAS::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'RsBattleHero_C_InputSAS::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000024, "Member 'RsBattleHero_C_InputSAS::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000025, "Member 'RsBattleHero_C_InputSAS::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_GetSASManager_SAS_Manager_1) == 0x000028, "Member 'RsBattleHero_C_InputSAS::CallFunc_GetSASManager_SAS_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_CancelSAS_self_CastInput) == 0x000030, "Member 'RsBattleHero_C_InputSAS::CallFunc_CancelSAS_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_CancelSAS_Success) == 0x000040, "Member 'RsBattleHero_C_InputSAS::CallFunc_CancelSAS_Success' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Not_PreBool_ReturnValue_1) == 0x000041, "Member 'RsBattleHero_C_InputSAS::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, Temp_bool_True_if_break_was_hit_Variable) == 0x000042, "Member 'RsBattleHero_C_InputSAS::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Not_PreBool_ReturnValue_2) == 0x000043, "Member 'RsBattleHero_C_InputSAS::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RsBattleHero_C_InputSAS::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000048, "Member 'RsBattleHero_C_InputSAS::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_IsEnableSASInput_bEnable) == 0x000049, "Member 'RsBattleHero_C_InputSAS::CallFunc_IsEnableSASInput_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'RsBattleHero_C_InputSAS::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_InputSAS::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'RsBattleHero_C_InputSAS::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_BooleanAND_ReturnValue_1) == 0x000058, "Member 'RsBattleHero_C_InputSAS::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x000059, "Member 'RsBattleHero_C_InputSAS::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSAS, CallFunc_IsCanSAS_Use_IsSASUse) == 0x00005A, "Member 'RsBattleHero_C_InputSAS::CallFunc_IsCanSAS_Use_IsSASUse' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ClearPrecedeInput
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_ClearPrecedeInput final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearPrecedeInput_bDummy;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_ClearPrecedeInput) == 0x000001, "Wrong alignment on RsBattleHero_C_ClearPrecedeInput");
static_assert(sizeof(RsBattleHero_C_ClearPrecedeInput) == 0x000002, "Wrong size on RsBattleHero_C_ClearPrecedeInput");
static_assert(offsetof(RsBattleHero_C_ClearPrecedeInput, bDummy) == 0x000000, "Member 'RsBattleHero_C_ClearPrecedeInput::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ClearPrecedeInput, CallFunc_ClearPrecedeInput_bDummy) == 0x000001, "Member 'RsBattleHero_C_ClearPrecedeInput::CallFunc_ClearPrecedeInput_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckFriendCoverDamage
// 0x0040 (0x0040 - 0x0000)
struct RsBattleHero_C_CheckFriendCoverDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbDebugSuccess;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbIntervalOK;                                      // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     LCoverPlayerID;                                    // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerID>                             LLotList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	EPlayerID                                     LSelfPlayerID;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbCover;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageCollisionInvincible_bInvincible;  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFriendLotType                                Temp_byte_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFriendLotType                                Temp_byte_Variable_1;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCoverDamagePlayer_bSuccess;            // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActivateDamageCover_bActivate;       // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActivateDamageCover_bLethalDamage;   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActivateDamageCover_bLargeDamage;    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5585[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFriendLotType                                K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_LotFriendPlayer_ReturnValue;              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckFriendCoverDamage) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckFriendCoverDamage");
static_assert(sizeof(RsBattleHero_C_CheckFriendCoverDamage) == 0x000040, "Wrong size on RsBattleHero_C_CheckFriendCoverDamage");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, DamageValue) == 0x000000, "Member 'RsBattleHero_C_CheckFriendCoverDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, ReturnValue) == 0x000004, "Member 'RsBattleHero_C_CheckFriendCoverDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, LbDebugSuccess) == 0x000005, "Member 'RsBattleHero_C_CheckFriendCoverDamage::LbDebugSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, LbIntervalOK) == 0x000006, "Member 'RsBattleHero_C_CheckFriendCoverDamage::LbIntervalOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, LCoverPlayerID) == 0x000007, "Member 'RsBattleHero_C_CheckFriendCoverDamage::LCoverPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, LLotList) == 0x000008, "Member 'RsBattleHero_C_CheckFriendCoverDamage::LLotList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, LSelfPlayerID) == 0x000018, "Member 'RsBattleHero_C_CheckFriendCoverDamage::LSelfPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, LbCover) == 0x000019, "Member 'RsBattleHero_C_CheckFriendCoverDamage::LbCover' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsDamageCollisionInvincible_bInvincible) == 0x00001A, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsDamageCollisionInvincible_bInvincible' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsDead_bDead) == 0x00001B, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, Temp_byte_Variable) == 0x00001C, "Member 'RsBattleHero_C_CheckFriendCoverDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, Temp_byte_Variable_1) == 0x00001D, "Member 'RsBattleHero_C_CheckFriendCoverDamage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsMetalMode_bMetal) == 0x00001E, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_SetCoverDamagePlayer_bSuccess) == 0x00001F, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_SetCoverDamagePlayer_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_GetDebuggingManager_Manager) == 0x000020, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsEnable_ReturnValue) == 0x000029, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_CheckActivateDamageCover_bActivate) == 0x00002A, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_CheckActivateDamageCover_bActivate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_CheckActivateDamageCover_bLethalDamage) == 0x00002B, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_CheckActivateDamageCover_bLethalDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_CheckActivateDamageCover_bLargeDamage) == 0x00002C, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_CheckActivateDamageCover_bLargeDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, Temp_bool_Variable) == 0x00002D, "Member 'RsBattleHero_C_CheckFriendCoverDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_GetDebuggingManager_Manager_1) == 0x000030, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, K2Node_Select_Default) == 0x000038, "Member 'RsBattleHero_C_CheckFriendCoverDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_LotFriendPlayer_ReturnValue) == 0x00003A, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_LotFriendPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00003B, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00003C, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckFriendCoverDamage, CallFunc_IsControlAI_bAI) == 0x00003D, "Member 'RsBattleHero_C_CheckFriendCoverDamage::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckActivateDamageCover
// 0x0038 (0x0038 - 0x0000)
struct RsBattleHero_C_CheckActivateDamageCover final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActivate;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLethalDamage;                                     // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLargeDamage;                                      // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbLarge;                                           // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbLethal;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5586[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5587[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckActivateDamageCover) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckActivateDamageCover");
static_assert(sizeof(RsBattleHero_C_CheckActivateDamageCover) == 0x000038, "Wrong size on RsBattleHero_C_CheckActivateDamageCover");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, DamageValue) == 0x000000, "Member 'RsBattleHero_C_CheckActivateDamageCover::DamageValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, bActivate) == 0x000004, "Member 'RsBattleHero_C_CheckActivateDamageCover::bActivate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, bLethalDamage) == 0x000005, "Member 'RsBattleHero_C_CheckActivateDamageCover::bLethalDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, bLargeDamage) == 0x000006, "Member 'RsBattleHero_C_CheckActivateDamageCover::bLargeDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, LbLarge) == 0x000007, "Member 'RsBattleHero_C_CheckActivateDamageCover::LbLarge' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, LbLethal) == 0x000008, "Member 'RsBattleHero_C_CheckActivateDamageCover::LbLethal' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_GetMaxHP_MaxHP) == 0x00000C, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_GetHP_HP) == 0x000010, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000018, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_GetDebuggingManager_Manager) == 0x000028, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckActivateDamageCover, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000031, "Member 'RsBattleHero_C_CheckActivateDamageCover::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckCoverDamageAblePlayer
// 0x0138 (0x0138 - 0x0000)
struct RsBattleHero_C_CheckCoverDamageAblePlayer final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5588[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LTempPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LHp;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbOK;                                              // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5589[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0018(0x00D0)(NoDestructor)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_558A[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_558B[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater_1;    // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_558C[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP_1;                               // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_1;                  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_1;    // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckCoverDamageAblePlayer) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckCoverDamageAblePlayer");
static_assert(sizeof(RsBattleHero_C_CheckCoverDamageAblePlayer) == 0x000138, "Wrong size on RsBattleHero_C_CheckCoverDamageAblePlayer");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, InPlayerID) == 0x000000, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::InPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, bOK) == 0x000001, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, LTempPlayer) == 0x000008, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::LTempPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, LHp) == 0x000010, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::LHp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, LbOK) == 0x000014, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::LbOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000015, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_Greater_IntInt_ReturnValue) == 0x000016, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x0000E8, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetHP_HP) == 0x0000FC, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetPlayer_ReturnValue) == 0x000100, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000108, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000109, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, K2Node_DynamicCast_AsBPI_Character_Paramater_1) == 0x000110, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::K2Node_DynamicCast_AsBPI_Character_Paramater_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, K2Node_DynamicCast_bSuccess_1) == 0x000120, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetHP_HP_1) == 0x000124, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetHP_HP_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetPlayer_ReturnValue_1) == 0x000128, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_IsExistPartyMember_ReturnValue) == 0x000131, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetBattleMemberPlayerID_ReturnValue_1) == 0x000132, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetBattleMemberPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000133, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_IsValid_ReturnValue_1) == 0x000134, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_GetPlayerID_ReturnValue) == 0x000135, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCoverDamageAblePlayer, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000136, "Member 'RsBattleHero_C_CheckCoverDamageAblePlayer::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SearchAIPsychicObject
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_SearchAIPsychicObject final
{
public:
	bool                                          bFiound;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SearchNpcObject_return;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SearchAIPsychicObject) == 0x000001, "Wrong alignment on RsBattleHero_C_SearchAIPsychicObject");
static_assert(sizeof(RsBattleHero_C_SearchAIPsychicObject) == 0x000002, "Wrong size on RsBattleHero_C_SearchAIPsychicObject");
static_assert(offsetof(RsBattleHero_C_SearchAIPsychicObject, bFiound) == 0x000000, "Member 'RsBattleHero_C_SearchAIPsychicObject::bFiound' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchAIPsychicObject, CallFunc_SearchNpcObject_return) == 0x000001, "Member 'RsBattleHero_C_SearchAIPsychicObject::CallFunc_SearchNpcObject_return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckAIPsychicObject
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_CheckAIPsychicObject final
{
public:
	bool                                          bCapture;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAttack;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOK;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNpcObject_return;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckAIPsychicObject) == 0x000001, "Wrong alignment on RsBattleHero_C_CheckAIPsychicObject");
static_assert(sizeof(RsBattleHero_C_CheckAIPsychicObject) == 0x000004, "Wrong size on RsBattleHero_C_CheckAIPsychicObject");
static_assert(offsetof(RsBattleHero_C_CheckAIPsychicObject, bCapture) == 0x000000, "Member 'RsBattleHero_C_CheckAIPsychicObject::bCapture' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAIPsychicObject, bAttack) == 0x000001, "Member 'RsBattleHero_C_CheckAIPsychicObject::bAttack' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAIPsychicObject, bOK) == 0x000002, "Member 'RsBattleHero_C_CheckAIPsychicObject::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAIPsychicObject, CallFunc_CheckNpcObject_return) == 0x000003, "Member 'RsBattleHero_C_CheckAIPsychicObject::CallFunc_CheckNpcObject_return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DamageBefore
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_DamageBefore final
{
public:
	bool                                          IgnoreAutoSasMetal;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DamageBefore_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DamageBefore) == 0x000001, "Wrong alignment on RsBattleHero_C_DamageBefore");
static_assert(sizeof(RsBattleHero_C_DamageBefore) == 0x000003, "Wrong size on RsBattleHero_C_DamageBefore");
static_assert(offsetof(RsBattleHero_C_DamageBefore, IgnoreAutoSasMetal) == 0x000000, "Member 'RsBattleHero_C_DamageBefore::IgnoreAutoSasMetal' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DamageBefore, bDummy) == 0x000001, "Member 'RsBattleHero_C_DamageBefore::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DamageBefore, CallFunc_DamageBefore_bDummy) == 0x000002, "Member 'RsBattleHero_C_DamageBefore::CallFunc_DamageBefore_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SubHardenTime
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_SubHardenTime final
{
public:
	float                                         SubTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SubHardenTime_bDummy;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SubHardenTime) == 0x000004, "Wrong alignment on RsBattleHero_C_SubHardenTime");
static_assert(sizeof(RsBattleHero_C_SubHardenTime) == 0x000008, "Wrong size on RsBattleHero_C_SubHardenTime");
static_assert(offsetof(RsBattleHero_C_SubHardenTime, SubTime) == 0x000000, "Member 'RsBattleHero_C_SubHardenTime::SubTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubHardenTime, bDummy) == 0x000004, "Member 'RsBattleHero_C_SubHardenTime::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubHardenTime, CallFunc_SubHardenTime_bDummy) == 0x000005, "Member 'RsBattleHero_C_SubHardenTime::CallFunc_SubHardenTime_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubHardenTime, CallFunc_IsControlAI_bAI) == 0x000006, "Member 'RsBattleHero_C_SubHardenTime::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckAutoStealth
// 0x0048 (0x0048 - 0x0000)
struct RsBattleHero_C_CheckAutoStealth final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_558D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LProbability;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_558E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_1;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_558F[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5590[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5591[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5592[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckAutoStealth) == 0x000004, "Wrong alignment on RsBattleHero_C_CheckAutoStealth");
static_assert(sizeof(RsBattleHero_C_CheckAutoStealth) == 0x000048, "Wrong size on RsBattleHero_C_CheckAutoStealth");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, bSuccess) == 0x000000, "Member 'RsBattleHero_C_CheckAutoStealth::bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, LProbability) == 0x000004, "Member 'RsBattleHero_C_CheckAutoStealth::LProbability' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, LbSuccess) == 0x000008, "Member 'RsBattleHero_C_CheckAutoStealth::LbSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_GetBattleMemberPlayerID_ReturnValue_1) == 0x000011, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_GetBattleMemberPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000013, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsStealthMode_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsDead_bDead) == 0x000015, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_RandomFloatInRange_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_GetHPPercent_Percent) == 0x000024, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsEnableSASEffect_bEnable) == 0x000028, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsEnableSASEffect_Param0) == 0x00002C, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsEnableSASEffect_Param1) == 0x000030, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsEnableSASEffect_Param2) == 0x000034, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsEnableSASEffect_Param3) == 0x000038, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_IsEnable_ReturnValue) == 0x00003C, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000040, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAutoStealth, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000044, "Member 'RsBattleHero_C_CheckAutoStealth::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.UpdateAutoStealth
// 0x0005 (0x0005 - 0x0000)
struct RsBattleHero_C_UpdateAutoStealth final
{
public:
	bool                                          CallFunc_IsActiveSAS_Stealth_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_UpdateAutoStealth) == 0x000001, "Wrong alignment on RsBattleHero_C_UpdateAutoStealth");
static_assert(sizeof(RsBattleHero_C_UpdateAutoStealth) == 0x000005, "Wrong size on RsBattleHero_C_UpdateAutoStealth");
static_assert(offsetof(RsBattleHero_C_UpdateAutoStealth, CallFunc_IsActiveSAS_Stealth_ReturnValue) == 0x000000, "Member 'RsBattleHero_C_UpdateAutoStealth::CallFunc_IsActiveSAS_Stealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAutoStealth, CallFunc_IsEnable_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_UpdateAutoStealth::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAutoStealth, CallFunc_IsOver_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_UpdateAutoStealth::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAutoStealth, CallFunc_IsOver_ReturnValue_1) == 0x000003, "Member 'RsBattleHero_C_UpdateAutoStealth::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAutoStealth, CallFunc_IsEnable_ReturnValue_1) == 0x000004, "Member 'RsBattleHero_C_UpdateAutoStealth::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DebugGetObjectAnimationName
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_DebugGetObjectAnimationName final
{
public:
	class FText                                   AnimationName;                                     // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   LName;                                             // 0x0018(0x0018)(Edit, BlueprintVisible)
	class ABP_PsychicObjectBasic_C*               CallFunc_GetPsychicObject_return;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5593[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0040(0x0018)()
};
static_assert(alignof(RsBattleHero_C_DebugGetObjectAnimationName) == 0x000008, "Wrong alignment on RsBattleHero_C_DebugGetObjectAnimationName");
static_assert(sizeof(RsBattleHero_C_DebugGetObjectAnimationName) == 0x000058, "Wrong size on RsBattleHero_C_DebugGetObjectAnimationName");
static_assert(offsetof(RsBattleHero_C_DebugGetObjectAnimationName, AnimationName) == 0x000000, "Member 'RsBattleHero_C_DebugGetObjectAnimationName::AnimationName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DebugGetObjectAnimationName, LName) == 0x000018, "Member 'RsBattleHero_C_DebugGetObjectAnimationName::LName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DebugGetObjectAnimationName, CallFunc_GetPsychicObject_return) == 0x000030, "Member 'RsBattleHero_C_DebugGetObjectAnimationName::CallFunc_GetPsychicObject_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DebugGetObjectAnimationName, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RsBattleHero_C_DebugGetObjectAnimationName::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DebugGetObjectAnimationName, CallFunc_Conv_StringToText_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_DebugGetObjectAnimationName::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerSASHologramAttack
// 0x0098 (0x0098 - 0x0000)
struct RsBattleHero_C_InputTriggerSASHologramAttack final
{
public:
	bool                                          bManual;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     LPlayerID;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            LInputKind;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_50;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_51;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_52;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_53;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_54;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_55;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_56;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_57;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_58;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_59;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_60;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_61;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_62;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_63;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_64;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_65;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_66;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_67;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_68;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_69;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_70;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_71;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_72;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_73;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_74;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_75;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_76;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_77;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_78;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_79;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_80;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_81;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_82;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_83;                             // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_84;                             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_85;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_86;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_87;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_88;                             // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_89;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_90;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_91;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_1;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_2;                              // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_3;                              // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_4;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_5;                              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_6;                              // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_7;                              // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_8;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_9;                              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_10;                             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_11;                             // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_12;                             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_13;                             // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_14;                             // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_15;                             // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_16;                             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_17;                             // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_18;                             // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_19;                             // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_20;                             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_21;                             // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_22;                             // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_23;                             // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_24;                             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_25;                             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_26;                             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_27;                             // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_92;                             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackInputAccept_ReturnValue;          // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearPrecedeInput_bDummy;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_93;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistCall_ReturnValue;                  // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_94;                             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default;                             // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetManualHologramAttackPlayerID_PlayerID; // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable_28;                             // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanBrainCrash_CanBrainCrash;              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_95;                             // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistCall_ReturnValue_1;                // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDoneCallPlayer_ReturnValue;             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetCallPlayer_ReturnValue;                // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_InputTriggerSASHologramAttack) == 0x000004, "Wrong alignment on RsBattleHero_C_InputTriggerSASHologramAttack");
static_assert(sizeof(RsBattleHero_C_InputTriggerSASHologramAttack) == 0x000098, "Wrong size on RsBattleHero_C_InputTriggerSASHologramAttack");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, bManual) == 0x000000, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::bManual' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, LPlayerID) == 0x000001, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::LPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, LInputKind) == 0x000002, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::LInputKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable) == 0x000003, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_1) == 0x000004, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_2) == 0x000005, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_3) == 0x000006, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_4) == 0x000007, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_5) == 0x000008, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_6) == 0x000009, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_7) == 0x00000A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_8) == 0x00000B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_9) == 0x00000C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_10) == 0x00000D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_11) == 0x00000E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_12) == 0x00000F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_13) == 0x000010, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_14) == 0x000011, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_15) == 0x000012, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_16) == 0x000013, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_17) == 0x000014, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_18) == 0x000015, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_19) == 0x000016, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_20) == 0x000017, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_21) == 0x000018, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_22) == 0x000019, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_23) == 0x00001A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_24) == 0x00001B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_25) == 0x00001C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_26) == 0x00001D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_27) == 0x00001E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_28) == 0x00001F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_29) == 0x000020, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_30) == 0x000021, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_31) == 0x000022, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_32) == 0x000023, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_33) == 0x000024, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_34) == 0x000025, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_35) == 0x000026, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_36) == 0x000027, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_37) == 0x000028, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_38) == 0x000029, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_39) == 0x00002A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_40) == 0x00002B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_41) == 0x00002C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_42) == 0x00002D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_43) == 0x00002E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_44) == 0x00002F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_45) == 0x000030, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_46) == 0x000031, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_47) == 0x000032, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_48) == 0x000033, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_49) == 0x000034, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_50) == 0x000035, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_50' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_51) == 0x000036, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_51' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_52) == 0x000037, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_52' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_53) == 0x000038, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_53' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_54) == 0x000039, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_54' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_55) == 0x00003A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_55' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_56) == 0x00003B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_56' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_57) == 0x00003C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_57' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_58) == 0x00003D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_58' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_59) == 0x00003E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_59' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_60) == 0x00003F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_60' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_61) == 0x000040, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_61' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_62) == 0x000041, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_62' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_63) == 0x000042, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_63' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_64) == 0x000043, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_64' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_65) == 0x000044, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_65' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_66) == 0x000045, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_66' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_67) == 0x000046, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_67' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_68) == 0x000047, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_68' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_69) == 0x000048, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_69' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_70) == 0x000049, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_70' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_71) == 0x00004A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_71' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_72) == 0x00004B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_72' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_73) == 0x00004C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_73' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_74) == 0x00004D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_74' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_75) == 0x00004E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_75' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_76) == 0x00004F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_76' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_77) == 0x000050, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_77' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_78) == 0x000051, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_78' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_79) == 0x000052, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_79' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_80) == 0x000053, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_80' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_81) == 0x000054, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_81' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_82) == 0x000055, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_82' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_83) == 0x000056, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_83' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_84) == 0x000057, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_84' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_85) == 0x000058, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_85' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_86) == 0x000059, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_86' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_87) == 0x00005A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_87' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_88) == 0x00005B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_88' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_89) == 0x00005C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_89' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_90) == 0x00005D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_90' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_91) == 0x00005E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_91' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00005F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable) == 0x000060, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_1) == 0x000061, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_2) == 0x000062, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_3) == 0x000063, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_4) == 0x000064, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_5) == 0x000065, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_6) == 0x000066, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_7) == 0x000067, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_8) == 0x000068, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_9) == 0x000069, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_10) == 0x00006A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_11) == 0x00006B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_12) == 0x00006C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_13) == 0x00006D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_14) == 0x00006E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_15) == 0x00006F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_16) == 0x000070, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_17) == 0x000071, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_18) == 0x000072, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_19) == 0x000073, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_20) == 0x000074, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_21) == 0x000075, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_22) == 0x000076, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_23) == 0x000077, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_24) == 0x000078, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_25) == 0x000079, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_25' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_26) == 0x00007A, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_26' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_27) == 0x00007B, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_27' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_92) == 0x00007C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_92' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x00007D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsEnableActionAttack_bEnable) == 0x00007E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsAttackInputAccept_ReturnValue) == 0x00007F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsAttackInputAccept_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_ClearPrecedeInput_bDummy) == 0x000080, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_ClearPrecedeInput_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_93) == 0x000081, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_93' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsValid_ReturnValue) == 0x000082, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsExistCall_ReturnValue) == 0x000083, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsExistCall_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_94) == 0x000084, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_94' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, K2Node_Select_Default) == 0x000085, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_GetManualHologramAttackPlayerID_PlayerID) == 0x000086, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_GetManualHologramAttackPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000087, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000088, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00008C, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_byte_Variable_28) == 0x00008D, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_byte_Variable_28' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_CanBrainCrash_CanBrainCrash) == 0x00008E, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_CanBrainCrash_CanBrainCrash' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, Temp_bool_Variable_95) == 0x00008F, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::Temp_bool_Variable_95' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_InputAttack_return) == 0x000090, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, K2Node_Select_Default_1) == 0x000091, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsValid_ReturnValue_1) == 0x000092, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsExistCall_ReturnValue_1) == 0x000093, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsExistCall_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_IsDoneCallPlayer_ReturnValue) == 0x000094, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_IsDoneCallPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerSASHologramAttack, CallFunc_GetCallPlayer_ReturnValue) == 0x000095, "Member 'RsBattleHero_C_InputTriggerSASHologramAttack::CallFunc_GetCallPlayer_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASActiveSeconds
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_GetSASActiveSeconds final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5594[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingSec;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSeconds_ActiveSeconds;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSASActiveSeconds) == 0x000004, "Wrong alignment on RsBattleHero_C_GetSASActiveSeconds");
static_assert(sizeof(RsBattleHero_C_GetSASActiveSeconds) == 0x00000C, "Wrong size on RsBattleHero_C_GetSASActiveSeconds");
static_assert(offsetof(RsBattleHero_C_GetSASActiveSeconds, SASButton) == 0x000000, "Member 'RsBattleHero_C_GetSASActiveSeconds::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASActiveSeconds, RemainingSec) == 0x000004, "Member 'RsBattleHero_C_GetSASActiveSeconds::RemainingSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASActiveSeconds, CallFunc_GetActiveSeconds_ActiveSeconds) == 0x000008, "Member 'RsBattleHero_C_GetSASActiveSeconds::CallFunc_GetActiveSeconds_ActiveSeconds' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetWeakNumber
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_GetWeakNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetWeakNumber) == 0x000004, "Wrong alignment on RsBattleHero_C_GetWeakNumber");
static_assert(sizeof(RsBattleHero_C_GetWeakNumber) == 0x000004, "Wrong size on RsBattleHero_C_GetWeakNumber");
static_assert(offsetof(RsBattleHero_C_GetWeakNumber, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_GetWeakNumber::ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoEventStart
// 0x0006 (0x0006 - 0x0000)
struct RsBattleHero_C_DoEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopPsychicComboCaptureSE_bDummy;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndPsychicDither_bDummy;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEventStart_bDummy;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoEventStart) == 0x000001, "Wrong alignment on RsBattleHero_C_DoEventStart");
static_assert(sizeof(RsBattleHero_C_DoEventStart) == 0x000006, "Wrong size on RsBattleHero_C_DoEventStart");
static_assert(offsetof(RsBattleHero_C_DoEventStart, bDummy) == 0x000000, "Member 'RsBattleHero_C_DoEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoEventStart, CallFunc_StopPsychicComboCaptureSE_bDummy) == 0x000001, "Member 'RsBattleHero_C_DoEventStart::CallFunc_StopPsychicComboCaptureSE_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoEventStart, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RsBattleHero_C_DoEventStart::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoEventStart, CallFunc_IsControlAI_bAI) == 0x000003, "Member 'RsBattleHero_C_DoEventStart::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoEventStart, CallFunc_EndPsychicDither_bDummy) == 0x000004, "Member 'RsBattleHero_C_DoEventStart::CallFunc_EndPsychicDither_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoEventStart, CallFunc_DoEventStart_bDummy) == 0x000005, "Member 'RsBattleHero_C_DoEventStart::CallFunc_DoEventStart_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoStaticEventStart
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_DoStaticEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSASCodeVisible_Dummy;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventStart_bDummy;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoStaticEventStart) == 0x000001, "Wrong alignment on RsBattleHero_C_DoStaticEventStart");
static_assert(sizeof(RsBattleHero_C_DoStaticEventStart) == 0x000003, "Wrong size on RsBattleHero_C_DoStaticEventStart");
static_assert(offsetof(RsBattleHero_C_DoStaticEventStart, bDummy) == 0x000000, "Member 'RsBattleHero_C_DoStaticEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoStaticEventStart, CallFunc_SetSASCodeVisible_Dummy) == 0x000001, "Member 'RsBattleHero_C_DoStaticEventStart::CallFunc_SetSASCodeVisible_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoStaticEventStart, CallFunc_DoStaticEventStart_bDummy) == 0x000002, "Member 'RsBattleHero_C_DoStaticEventStart::CallFunc_DoStaticEventStart_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoStaticEventEnd
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_DoStaticEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventEnd_bDummy;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoStaticEventEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_DoStaticEventEnd");
static_assert(sizeof(RsBattleHero_C_DoStaticEventEnd) == 0x000002, "Wrong size on RsBattleHero_C_DoStaticEventEnd");
static_assert(offsetof(RsBattleHero_C_DoStaticEventEnd, bDummy) == 0x000000, "Member 'RsBattleHero_C_DoStaticEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoStaticEventEnd, CallFunc_DoStaticEventEnd_bDummy) == 0x000001, "Member 'RsBattleHero_C_DoStaticEventEnd::CallFunc_DoStaticEventEnd_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoDynamicEventStart
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_DoDynamicEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSASCodeVisible_Dummy;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventStart_bDummy;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoDynamicEventStart) == 0x000001, "Wrong alignment on RsBattleHero_C_DoDynamicEventStart");
static_assert(sizeof(RsBattleHero_C_DoDynamicEventStart) == 0x000003, "Wrong size on RsBattleHero_C_DoDynamicEventStart");
static_assert(offsetof(RsBattleHero_C_DoDynamicEventStart, bDummy) == 0x000000, "Member 'RsBattleHero_C_DoDynamicEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoDynamicEventStart, CallFunc_SetSASCodeVisible_Dummy) == 0x000001, "Member 'RsBattleHero_C_DoDynamicEventStart::CallFunc_SetSASCodeVisible_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoDynamicEventStart, CallFunc_DoDynamicEventStart_bDummy) == 0x000002, "Member 'RsBattleHero_C_DoDynamicEventStart::CallFunc_DoDynamicEventStart_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoDynamicEventEnd
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_DoDynamicEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventEnd_bDummy;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoDynamicEventEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_DoDynamicEventEnd");
static_assert(sizeof(RsBattleHero_C_DoDynamicEventEnd) == 0x000002, "Wrong size on RsBattleHero_C_DoDynamicEventEnd");
static_assert(offsetof(RsBattleHero_C_DoDynamicEventEnd, bDummy) == 0x000000, "Member 'RsBattleHero_C_DoDynamicEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoDynamicEventEnd, CallFunc_DoDynamicEventEnd_bDummy) == 0x000001, "Member 'RsBattleHero_C_DoDynamicEventEnd::CallFunc_DoDynamicEventEnd_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoApplySkill
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_DoApplySkill final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     LPlayerID;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoApplySkill_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoApplySkill) == 0x000001, "Wrong alignment on RsBattleHero_C_DoApplySkill");
static_assert(sizeof(RsBattleHero_C_DoApplySkill) == 0x000003, "Wrong size on RsBattleHero_C_DoApplySkill");
static_assert(offsetof(RsBattleHero_C_DoApplySkill, bDummy) == 0x000000, "Member 'RsBattleHero_C_DoApplySkill::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoApplySkill, LPlayerID) == 0x000001, "Member 'RsBattleHero_C_DoApplySkill::LPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoApplySkill, CallFunc_DoApplySkill_bDummy) == 0x000002, "Member 'RsBattleHero_C_DoApplySkill::CallFunc_DoApplySkill_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplySkillAction
// 0x0040 (0x0040 - 0x0000)
struct RsBattleHero_C_ApplySkillAction final
{
public:
	EPlayerID                                     LPlayerID;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5595[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5596[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5597[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_1;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5598[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_1;     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_1;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_2;      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5599[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_2;     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_2;    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ApplySkillAction) == 0x000004, "Wrong alignment on RsBattleHero_C_ApplySkillAction");
static_assert(sizeof(RsBattleHero_C_ApplySkillAction) == 0x000040, "Wrong size on RsBattleHero_C_ApplySkillAction");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, LPlayerID) == 0x000000, "Member 'RsBattleHero_C_ApplySkillAction::LPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, Temp_bool_Variable) == 0x000008, "Member 'RsBattleHero_C_ApplySkillAction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, Temp_int_Variable) == 0x00000C, "Member 'RsBattleHero_C_ApplySkillAction::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, Temp_int_Variable_1) == 0x000010, "Member 'RsBattleHero_C_ApplySkillAction::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_bLearned) == 0x000014, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_Parameter) == 0x000018, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x00001C, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_bLearned_1) == 0x000020, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_bLearned_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_Parameter_1) == 0x000024, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_Parameter_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_Parameter2_1) == 0x000028, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_Parameter2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, Temp_int_Variable_2) == 0x00002C, "Member 'RsBattleHero_C_ApplySkillAction::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetPlayerID_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_bLearned_2) == 0x000031, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_bLearned_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_Parameter_2) == 0x000034, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_Parameter_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, CallFunc_GetLearnedSkillParameter_Parameter2_2) == 0x000038, "Member 'RsBattleHero_C_ApplySkillAction::CallFunc_GetLearnedSkillParameter_Parameter2_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAction, K2Node_Select_Default) == 0x00003C, "Member 'RsBattleHero_C_ApplySkillAction::K2Node_Select_Default' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplySkillAttack
// 0x00DC (0x00DC - 0x0000)
struct RsBattleHero_C_ApplySkillAttack final
{
public:
	EPlayerID                                     LPlayerID;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_559A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_1;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559C[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_1;     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_1;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_2;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559D[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_2;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_2;    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_3;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_3;     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_3;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_4;      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559F[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_4;     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_4;    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_5;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A0[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_5;     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_5;    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_6;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A1[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_6;     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_6;    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_7;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A2[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_7;     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_7;    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_8;      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A3[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_8;     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_8;    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_9;      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A4[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_9;     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_9;    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_10;     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A5[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_10;    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_10;   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_11;     // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A6[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_11;    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_11;   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_12;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A7[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_12;    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_12;   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_13;     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A8[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_13;    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_13;   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_14;     // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A9[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_14;    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_14;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ApplySkillAttack) == 0x000004, "Wrong alignment on RsBattleHero_C_ApplySkillAttack");
static_assert(sizeof(RsBattleHero_C_ApplySkillAttack) == 0x0000DC, "Wrong size on RsBattleHero_C_ApplySkillAttack");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, LPlayerID) == 0x000000, "Member 'RsBattleHero_C_ApplySkillAttack::LPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, Temp_int_Variable) == 0x000004, "Member 'RsBattleHero_C_ApplySkillAttack::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned) == 0x000008, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter) == 0x00000C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x000010, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_Add_IntInt_ReturnValue_2) == 0x00001C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, Temp_bool_Variable) == 0x000020, "Member 'RsBattleHero_C_ApplySkillAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_1) == 0x000021, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_1) == 0x000024, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_1) == 0x000028, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_2) == 0x00002C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_2) == 0x000030, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_2) == 0x000034, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_3) == 0x000038, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_3) == 0x00003C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_3) == 0x000040, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_4) == 0x000044, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_4) == 0x000048, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_4) == 0x00004C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_5) == 0x000050, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_5) == 0x000054, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_5) == 0x000058, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_6) == 0x00005C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_6) == 0x000060, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_6) == 0x000064, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_7) == 0x000068, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_7) == 0x00006C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_7) == 0x000070, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_8) == 0x000074, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_8) == 0x000078, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_8) == 0x00007C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, Temp_int_Variable_1) == 0x000080, "Member 'RsBattleHero_C_ApplySkillAttack::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_9) == 0x000084, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_9) == 0x000088, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_9) == 0x00008C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_10) == 0x000090, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_10) == 0x000094, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_10) == 0x000098, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_11) == 0x00009C, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_11) == 0x0000A0, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_11) == 0x0000A4, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, Temp_int_Variable_2) == 0x0000A8, "Member 'RsBattleHero_C_ApplySkillAttack::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, Temp_int_Variable_3) == 0x0000AC, "Member 'RsBattleHero_C_ApplySkillAttack::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_12) == 0x0000B0, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_12) == 0x0000B4, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_12) == 0x0000B8, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, Temp_int_Variable_4) == 0x0000BC, "Member 'RsBattleHero_C_ApplySkillAttack::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_13) == 0x0000C0, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_13) == 0x0000C4, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_13) == 0x0000C8, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, K2Node_Select_Default) == 0x0000CC, "Member 'RsBattleHero_C_ApplySkillAttack::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetPlayerID_ReturnValue) == 0x0000D0, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_bLearned_14) == 0x0000D1, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_bLearned_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter_14) == 0x0000D4, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillAttack, CallFunc_GetLearnedSkillParameter_Parameter2_14) == 0x0000D8, "Member 'RsBattleHero_C_ApplySkillAttack::CallFunc_GetLearnedSkillParameter_Parameter2_14' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBrainFieldMoveBrainField
// 0x0030 (0x0030 - 0x0000)
struct RsBattleHero_C_OnBrainFieldMoveBrainField final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AB[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldMoveBrainField_bDummy;        // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBrainFieldMoveBrainField) == 0x000008, "Wrong alignment on RsBattleHero_C_OnBrainFieldMoveBrainField");
static_assert(sizeof(RsBattleHero_C_OnBrainFieldMoveBrainField) == 0x000030, "Wrong size on RsBattleHero_C_OnBrainFieldMoveBrainField");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, bDummy) == 0x000000, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, CallFunc_GetPlayersAll_Player) == 0x000018, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::CallFunc_GetPlayersAll_Player' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveBrainField, CallFunc_OnBrainFieldMoveBrainField_bDummy) == 0x00002D, "Member 'RsBattleHero_C_OnBrainFieldMoveBrainField::CallFunc_OnBrainFieldMoveBrainField_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBrainFieldMoveNormalField
// 0x0030 (0x0030 - 0x0000)
struct RsBattleHero_C_OnBrainFieldMoveNormalField final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AD[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldMoveNormalField_bDummy;       // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBrainFieldMoveNormalField) == 0x000008, "Wrong alignment on RsBattleHero_C_OnBrainFieldMoveNormalField");
static_assert(sizeof(RsBattleHero_C_OnBrainFieldMoveNormalField) == 0x000030, "Wrong size on RsBattleHero_C_OnBrainFieldMoveNormalField");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, bDummy) == 0x000000, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, CallFunc_GetPlayersAll_Player) == 0x000018, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::CallFunc_GetPlayersAll_Player' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldMoveNormalField, CallFunc_OnBrainFieldMoveNormalField_bDummy) == 0x00002D, "Member 'RsBattleHero_C_OnBrainFieldMoveNormalField::CallFunc_OnBrainFieldMoveNormalField_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBrainFieldOpenEnd
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_OnBrainFieldOpenEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnBattleParticle_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldOpenEnd_bDummy;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBrainFieldOpenEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_OnBrainFieldOpenEnd");
static_assert(sizeof(RsBattleHero_C_OnBrainFieldOpenEnd) == 0x000004, "Wrong size on RsBattleHero_C_OnBrainFieldOpenEnd");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldOpenEnd, bDummy) == 0x000000, "Member 'RsBattleHero_C_OnBrainFieldOpenEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldOpenEnd, CallFunc_SetBattleParticleType_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_OnBrainFieldOpenEnd::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldOpenEnd, CallFunc_SpawnBattleParticle_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_OnBrainFieldOpenEnd::CallFunc_SpawnBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldOpenEnd, CallFunc_OnBrainFieldOpenEnd_bDummy) == 0x000003, "Member 'RsBattleHero_C_OnBrainFieldOpenEnd::CallFunc_OnBrainFieldOpenEnd_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBrainFieldCloseStart
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnBrainFieldCloseStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingAnyDead_Playing;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldCloseStart_bDummy;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBrainFieldCloseStart) == 0x000008, "Wrong alignment on RsBattleHero_C_OnBrainFieldCloseStart");
static_assert(sizeof(RsBattleHero_C_OnBrainFieldCloseStart) == 0x000018, "Wrong size on RsBattleHero_C_OnBrainFieldCloseStart");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, bDummy) == 0x000000, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000008, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, CallFunc_IsPlayingAnyDead_Playing) == 0x000010, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::CallFunc_IsPlayingAnyDead_Playing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, CallFunc_ClearBattleParticle_ReturnValue) == 0x000012, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::CallFunc_ClearBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, CallFunc_SetBattleParticleType_ReturnValue) == 0x000013, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldCloseStart, CallFunc_OnBrainFieldCloseStart_bDummy) == 0x000014, "Member 'RsBattleHero_C_OnBrainFieldCloseStart::CallFunc_OnBrainFieldCloseStart_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplySkillOther
// 0x01B8 (0x01B8 - 0x0000)
struct RsBattleHero_C_ApplySkillOther final
{
public:
	float                                         LBrainFieldExtendTime;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDriveExtendTime;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     LPlayerID;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AF[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_1;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_1;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_1;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_2;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B1[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_2;     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_2;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_3;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B2[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_3;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_3;    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_4;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B3[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_4;     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_4;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_5;      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B4[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_5;     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_5;    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_6;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B5[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_6;     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_6;    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_7;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B6[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_7;     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_7;    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_8;      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B7[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_8;     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_8;    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55B8[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillSASRecoverData                   K2Node_MakeStruct_SkillSASRecoverData;             // 0x0080(0x0018)()
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_9;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B9[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_9;     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_9;    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_10;     // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55BA[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_10;    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_10;   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_11;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55BB[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_11;    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_11;   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_12;     // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55BC[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_12;    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_12;   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_13;     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55BD[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_13;    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_13;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_14;     // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55BE[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_14;    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_14;   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_15;     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55BF[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_15;    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_15;   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_16;     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C0[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_16;    // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_16;   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_17;     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C1[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_17;    // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_17;   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_18;     // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C2[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_18;    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_18;   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_19;     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C3[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_19;    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_19;   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_20;     // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C4[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_20;    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_20;   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_21;     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C5[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_21;    // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_21;   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C6[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_22;     // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C7[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_22;    // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_22;   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C8[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillSASRecoverData                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0170(0x0018)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_23;     // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55C9[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_23;    // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_23;   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_24;     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55CA[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_24;    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_24;   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned_25;     // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55CB[0x2];                                     // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter_25;    // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2_25;   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_8;             // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ApplySkillOther) == 0x000008, "Wrong alignment on RsBattleHero_C_ApplySkillOther");
static_assert(sizeof(RsBattleHero_C_ApplySkillOther) == 0x0001B8, "Wrong size on RsBattleHero_C_ApplySkillOther");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, LBrainFieldExtendTime) == 0x000000, "Member 'RsBattleHero_C_ApplySkillOther::LBrainFieldExtendTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, LDriveExtendTime) == 0x000004, "Member 'RsBattleHero_C_ApplySkillOther::LDriveExtendTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, LPlayerID) == 0x000008, "Member 'RsBattleHero_C_ApplySkillOther::LPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned) == 0x000009, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter) == 0x00000C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x000010, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_1) == 0x000014, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_1) == 0x000018, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_1) == 0x00001C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_2) == 0x000020, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_2) == 0x000024, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_2) == 0x000028, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_3) == 0x00002C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_3) == 0x000030, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_3) == 0x000034, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_4) == 0x000038, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_4) == 0x00003C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_4) == 0x000040, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_5) == 0x000044, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_5) == 0x000048, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_5) == 0x00004C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_6) == 0x000050, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_6) == 0x000054, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_6) == 0x000058, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue) == 0x00005C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_7) == 0x000060, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_7) == 0x000064, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_7) == 0x000068, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_8) == 0x00006C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_8) == 0x000070, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_8) == 0x000074, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000078, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, K2Node_MakeStruct_SkillSASRecoverData) == 0x000080, "Member 'RsBattleHero_C_ApplySkillOther::K2Node_MakeStruct_SkillSASRecoverData' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_9) == 0x000098, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_9) == 0x00009C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_9) == 0x0000A0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_10) == 0x0000A4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_10) == 0x0000A8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_10) == 0x0000AC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_11) == 0x0000B0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_11) == 0x0000B4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_11) == 0x0000B8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000BC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000C0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_12) == 0x0000C4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_12) == 0x0000C8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_12) == 0x0000CC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_13) == 0x0000D0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_13) == 0x0000D4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_13) == 0x0000D8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_14) == 0x0000DC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_14) == 0x0000E0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_14) == 0x0000E4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_15) == 0x0000E8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_15) == 0x0000EC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_15) == 0x0000F0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x0000F4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_16) == 0x0000F8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_16) == 0x0000FC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_16) == 0x000100, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000104, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_17) == 0x000108, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_17) == 0x00010C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_17) == 0x000110, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_18) == 0x000114, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_18) == 0x000118, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_18) == 0x00011C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_19) == 0x000120, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_19) == 0x000124, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_19) == 0x000128, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_20) == 0x00012C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_20) == 0x000130, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_20) == 0x000134, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000138, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, Temp_float_Variable) == 0x00013C, "Member 'RsBattleHero_C_ApplySkillOther::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_21) == 0x000140, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_21) == 0x000144, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_21) == 0x000148, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x00014C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, Temp_bool_Variable) == 0x000150, "Member 'RsBattleHero_C_ApplySkillOther::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000154, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, K2Node_Select_Default) == 0x000158, "Member 'RsBattleHero_C_ApplySkillOther::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_22) == 0x00015C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_22) == 0x000160, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_22) == 0x000164, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000168, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetDataTableRowFromName_OutRow) == 0x000170, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000188, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_23) == 0x000189, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_23' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_23) == 0x00018C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_23' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_23) == 0x000190, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_23' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x000194, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_24) == 0x000198, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_24' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_24) == 0x00019C, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_24' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_24) == 0x0001A0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_24' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x0001A4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetPlayerID_ReturnValue) == 0x0001A8, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_bLearned_25) == 0x0001A9, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_bLearned_25' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter_25) == 0x0001AC, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter_25' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_GetLearnedSkillParameter_Parameter2_25) == 0x0001B0, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_GetLearnedSkillParameter_Parameter2_25' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySkillOther, CallFunc_Add_FloatFloat_ReturnValue_8) == 0x0001B4, "Member 'RsBattleHero_C_ApplySkillOther::CallFunc_Add_FloatFloat_ReturnValue_8' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetActionStateObstructPsychic
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_SetActionStateObstructPsychic final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SetActionStateObstructPsychic) == 0x000001, "Wrong alignment on RsBattleHero_C_SetActionStateObstructPsychic");
static_assert(sizeof(RsBattleHero_C_SetActionStateObstructPsychic) == 0x000002, "Wrong size on RsBattleHero_C_SetActionStateObstructPsychic");
static_assert(offsetof(RsBattleHero_C_SetActionStateObstructPsychic, bDummy) == 0x000000, "Member 'RsBattleHero_C_SetActionStateObstructPsychic::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetActionStateObstructPsychic, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x000001, "Member 'RsBattleHero_C_SetActionStateObstructPsychic::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSASHologramAttack
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_IsEnableSASHologramAttack final
{
public:
	ESASHologramAttackTiming                      Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55CC[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Performance_Sequencer_IsPerform;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseHologram_bUse;                       // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingSequence_IsPlaying;              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESASHologramAttackTiming                      Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBrainCrash_CanBrainCrash;              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableSASHologramAttack) == 0x000008, "Wrong alignment on RsBattleHero_C_IsEnableSASHologramAttack");
static_assert(sizeof(RsBattleHero_C_IsEnableSASHologramAttack) == 0x000028, "Wrong size on RsBattleHero_C_IsEnableSASHologramAttack");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Timing) == 0x000000, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Timing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable) == 0x000002, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable_1) == 0x000003, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable_2) == 0x000004, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable_3) == 0x000005, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable_4) == 0x000006, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsVisible_ReturnValue) == 0x000007, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable_5) == 0x000008, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_GetBrainFieldManager_Manager) == 0x000010, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_Is_Performance_Sequencer_IsPerform) == 0x000018, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_Is_Performance_Sequencer_IsPerform' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsActionStatus_Result) == 0x000019, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_bool_Variable_6) == 0x00001A, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00001D, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsUseHologram_bUse) == 0x00001E, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsUseHologram_bUse' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsPlayingSequence_IsPlaying) == 0x00001F, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsPlayingSequence_IsPlaying' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, Temp_byte_Variable) == 0x000020, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x000021, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, K2Node_Select_Default) == 0x000022, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000023, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsActionStatus_Result_1) == 0x000024, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsDisableAction_bEnable) == 0x000025, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsDisableAction_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000026, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASHologramAttack, CallFunc_CanBrainCrash_CanBrainCrash) == 0x000027, "Member 'RsBattleHero_C_IsEnableSASHologramAttack::CallFunc_CanBrainCrash_CanBrainCrash' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.AreaChangeBegin
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_AreaChangeBegin final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AreaChangeBegin_bDummy;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_AreaChangeBegin) == 0x000001, "Wrong alignment on RsBattleHero_C_AreaChangeBegin");
static_assert(sizeof(RsBattleHero_C_AreaChangeBegin) == 0x000002, "Wrong size on RsBattleHero_C_AreaChangeBegin");
static_assert(offsetof(RsBattleHero_C_AreaChangeBegin, bDummy) == 0x000000, "Member 'RsBattleHero_C_AreaChangeBegin::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_AreaChangeBegin, CallFunc_AreaChangeBegin_bDummy) == 0x000001, "Member 'RsBattleHero_C_AreaChangeBegin::CallFunc_AreaChangeBegin_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.AreaChangeEnd
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_AreaChangeEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AreaChangeEnd_bDummy;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_AreaChangeEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_AreaChangeEnd");
static_assert(sizeof(RsBattleHero_C_AreaChangeEnd) == 0x000002, "Wrong size on RsBattleHero_C_AreaChangeEnd");
static_assert(offsetof(RsBattleHero_C_AreaChangeEnd, bDummy) == 0x000000, "Member 'RsBattleHero_C_AreaChangeEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_AreaChangeEnd, CallFunc_AreaChangeEnd_bDummy) == 0x000001, "Member 'RsBattleHero_C_AreaChangeEnd::CallFunc_AreaChangeEnd_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableInputPsychicCombo
// 0x00F4 (0x00F4 - 0x0000)
struct RsBattleHero_C_IsEnableInputPsychicCombo final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_50;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_51;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_52;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_53;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_54;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_55;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_56;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_57;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_58;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_59;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_60;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_61;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_62;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_63;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_64;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_65;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_66;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_67;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_68;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_69;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_70;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_71;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_72;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_73;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_74;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_75;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_76;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_77;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_78;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_79;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_80;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_81;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_82;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_83;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_84;                             // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_85;                             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_86;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_87;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_88;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_89;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_90;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_91;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_92;                             // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_93;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_94;                             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_95;                             // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_96;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_97;                             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_98;                             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_99;                             // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_100;                            // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_101;                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_102;                            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_103;                            // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_104;                            // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_105;                            // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_106;                            // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_107;                            // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_108;                            // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_109;                            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_110;                            // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_111;                            // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_112;                            // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_113;                            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_114;                            // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_115;                            // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_116;                            // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_117;                            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_118;                            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_119;                            // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_120;                            // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_121;                            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_122;                            // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_123;                            // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_124;                            // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_125;                            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_126;                            // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_127;                            // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_128;                            // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_129;                            // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_130;                            // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_131;                            // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_132;                            // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_133;                            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_134;                            // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_135;                            // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_136;                            // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_137;                            // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_138;                            // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_139;                            // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_140;                            // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_141;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_142;                            // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_143;                            // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_144;                            // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_145;                            // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_146;                            // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_147;                            // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_148;                            // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_149;                            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_150;                            // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_151;                            // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_152;                            // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_153;                            // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_154;                            // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_155;                            // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_156;                            // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_157;                            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_158;                            // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_159;                            // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_160;                            // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_161;                            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_162;                            // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_163;                            // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_164;                            // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_165;                            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_166;                            // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_167;                            // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_168;                            // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_169;                            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_170;                            // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_171;                            // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_172;                            // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_173;                            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_174;                            // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_175;                            // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_176;                            // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_177;                            // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_178;                            // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_179;                            // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_180;                            // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_181;                            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_182;                            // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_183;                            // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_184;                            // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_185;                            // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_186;                            // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicComboThink_bResult;              // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_187;                            // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable_1;                              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContentsOpen_bOpen;                     // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55CD[0x1];                                     // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPsychicComboLevelMax_ReturnValue;      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55CE[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result_2;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue_1; // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevelMax_ReturnValue_1;    // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue_1; // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue_1;       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableInputPsychicCombo) == 0x000004, "Wrong alignment on RsBattleHero_C_IsEnableInputPsychicCombo");
static_assert(sizeof(RsBattleHero_C_IsEnableInputPsychicCombo) == 0x0000F4, "Wrong size on RsBattleHero_C_IsEnableInputPsychicCombo");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, bEnable) == 0x000000, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, LbEnable) == 0x000001, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::LbEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable) == 0x000002, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_1) == 0x000003, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_2) == 0x000004, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_3) == 0x000005, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_4) == 0x000006, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_5) == 0x000007, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_6) == 0x000008, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_7) == 0x000009, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_8) == 0x00000A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_9) == 0x00000B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_10) == 0x00000C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_11) == 0x00000D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_12) == 0x00000E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_13) == 0x00000F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_14) == 0x000010, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_15) == 0x000011, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_16) == 0x000012, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_17) == 0x000013, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_18) == 0x000014, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_19) == 0x000015, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_20) == 0x000016, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_21) == 0x000017, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_22) == 0x000018, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_23) == 0x000019, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_24) == 0x00001A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_25) == 0x00001B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_26) == 0x00001C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_27) == 0x00001D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_28) == 0x00001E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_29) == 0x00001F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_30) == 0x000020, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_31) == 0x000021, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_32) == 0x000022, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_33) == 0x000023, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_34) == 0x000024, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_35) == 0x000025, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_36) == 0x000026, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_37) == 0x000027, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_38) == 0x000028, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_39) == 0x000029, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_40) == 0x00002A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_41) == 0x00002B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_42) == 0x00002C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_43) == 0x00002D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_44) == 0x00002E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_45) == 0x00002F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_46) == 0x000030, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_47) == 0x000031, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_48) == 0x000032, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_49) == 0x000033, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_50) == 0x000034, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_50' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_51) == 0x000035, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_51' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_52) == 0x000036, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_52' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_53) == 0x000037, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_53' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_54) == 0x000038, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_54' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_55) == 0x000039, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_55' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_56) == 0x00003A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_56' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_57) == 0x00003B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_57' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_58) == 0x00003C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_58' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_59) == 0x00003D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_59' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_60) == 0x00003E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_60' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_61) == 0x00003F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_61' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_62) == 0x000040, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_62' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_63) == 0x000041, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_63' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_64) == 0x000042, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_64' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_65) == 0x000043, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_65' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_66) == 0x000044, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_66' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_67) == 0x000045, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_67' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_68) == 0x000046, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_68' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_69) == 0x000047, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_69' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_70) == 0x000048, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_70' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_71) == 0x000049, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_71' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_72) == 0x00004A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_72' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_73) == 0x00004B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_73' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_74) == 0x00004C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_74' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_75) == 0x00004D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_75' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_76) == 0x00004E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_76' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_77) == 0x00004F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_77' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_78) == 0x000050, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_78' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_79) == 0x000051, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_79' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_80) == 0x000052, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_80' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_81) == 0x000053, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_81' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_82) == 0x000054, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_82' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_83) == 0x000055, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_83' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_84) == 0x000056, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_84' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_85) == 0x000057, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_85' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_86) == 0x000058, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_86' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_87) == 0x000059, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_87' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_88) == 0x00005A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_88' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_byte_Variable) == 0x00005B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_89) == 0x00005C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_89' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_90) == 0x00005D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_90' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_91) == 0x00005E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_91' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_92) == 0x00005F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_92' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_93) == 0x000060, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_93' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_94) == 0x000061, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_94' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_95) == 0x000062, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_95' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_96) == 0x000063, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_96' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_97) == 0x000064, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_97' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_98) == 0x000065, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_98' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_99) == 0x000066, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_99' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_100) == 0x000067, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_100' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_101) == 0x000068, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_101' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_102) == 0x000069, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_102' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_103) == 0x00006A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_103' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_104) == 0x00006B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_104' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_105) == 0x00006C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_105' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_106) == 0x00006D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_106' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_107) == 0x00006E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_107' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_108) == 0x00006F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_108' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_109) == 0x000070, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_109' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_110) == 0x000071, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_110' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_111) == 0x000072, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_111' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_112) == 0x000073, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_112' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_113) == 0x000074, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_113' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_114) == 0x000075, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_114' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_115) == 0x000076, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_115' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_116) == 0x000077, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_116' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_117) == 0x000078, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_117' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_118) == 0x000079, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_118' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_119) == 0x00007A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_119' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_120) == 0x00007B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_120' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_121) == 0x00007C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_121' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_122) == 0x00007D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_122' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_123) == 0x00007E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_123' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_124) == 0x00007F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_124' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_125) == 0x000080, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_125' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_126) == 0x000081, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_126' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_127) == 0x000082, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_127' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_128) == 0x000083, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_128' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_129) == 0x000084, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_129' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_130) == 0x000085, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_130' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_131) == 0x000086, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_131' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_132) == 0x000087, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_132' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_133) == 0x000088, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_133' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_134) == 0x000089, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_134' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_135) == 0x00008A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_135' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_136) == 0x00008B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_136' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_137) == 0x00008C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_137' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_138) == 0x00008D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_138' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_139) == 0x00008E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_139' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_140) == 0x00008F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_140' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_141) == 0x000090, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_141' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_142) == 0x000091, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_142' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_143) == 0x000092, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_143' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_144) == 0x000093, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_144' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_145) == 0x000094, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_145' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_146) == 0x000095, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_146' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_147) == 0x000096, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_147' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_148) == 0x000097, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_148' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_149) == 0x000098, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_149' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_150) == 0x000099, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_150' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_151) == 0x00009A, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_151' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_152) == 0x00009B, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_152' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_153) == 0x00009C, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_153' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_154) == 0x00009D, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_154' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_155) == 0x00009E, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_155' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_156) == 0x00009F, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_156' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_157) == 0x0000A0, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_157' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_158) == 0x0000A1, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_158' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_159) == 0x0000A2, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_159' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_160) == 0x0000A3, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_160' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_161) == 0x0000A4, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_161' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_162) == 0x0000A5, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_162' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_163) == 0x0000A6, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_163' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_164) == 0x0000A7, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_164' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_165) == 0x0000A8, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_165' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_166) == 0x0000A9, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_166' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_167) == 0x0000AA, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_167' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_168) == 0x0000AB, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_168' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_169) == 0x0000AC, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_169' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_170) == 0x0000AD, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_170' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_171) == 0x0000AE, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_171' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_172) == 0x0000AF, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_172' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_173) == 0x0000B0, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_173' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_174) == 0x0000B1, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_174' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_175) == 0x0000B2, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_175' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_176) == 0x0000B3, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_176' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_177) == 0x0000B4, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_177' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_178) == 0x0000B5, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_178' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_179) == 0x0000B6, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_179' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_180) == 0x0000B7, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_180' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_181) == 0x0000B8, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_181' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_182) == 0x0000B9, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_182' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_183) == 0x0000BA, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_183' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_184) == 0x0000BB, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_184' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_185) == 0x0000BC, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_185' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_IsActionStatus_Result) == 0x0000BD, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_IsActionStatus_Result_1) == 0x0000BE, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_186) == 0x0000BF, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_186' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_IsControlAI_bAI) == 0x0000C1, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_IsPsychicComboThink_bResult) == 0x0000C2, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_IsPsychicComboThink_bResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_bool_Variable_187) == 0x0000C3, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_bool_Variable_187' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, Temp_byte_Variable_1) == 0x0000C4, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_IsContentsOpen_bOpen) == 0x0000C5, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_IsContentsOpen_bOpen' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000C6, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetPsychicComboLevelMax_ReturnValue) == 0x0000C8, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetPsychicComboLevelMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetPsychicComboLevel_ReturnValue) == 0x0000CC, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue) == 0x0000D4, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetFlyingPsychicComboLevel_ReturnValue) == 0x0000D8, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetFlyingPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_IsActionStatus_Result_2) == 0x0000DC, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_IsActionStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000DD, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, K2Node_Select_Default) == 0x0000DE, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, K2Node_Select_Default_1) == 0x0000DF, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue_1) == 0x0000E0, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetPsychicComboLevelMax_ReturnValue_1) == 0x0000E4, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetPsychicComboLevelMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetFlyingPsychicComboLevel_ReturnValue_1) == 0x0000E8, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetFlyingPsychicComboLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_GetPsychicComboLevel_ReturnValue_1) == 0x0000EC, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_GetPsychicComboLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F0, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000F1, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000F2, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableInputPsychicCombo, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000F3, "Member 'RsBattleHero_C_IsEnableInputPsychicCombo::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.DoTimerPause
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_DoTimerPause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoTimerPause_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_DoTimerPause) == 0x000001, "Wrong alignment on RsBattleHero_C_DoTimerPause");
static_assert(sizeof(RsBattleHero_C_DoTimerPause) == 0x000003, "Wrong size on RsBattleHero_C_DoTimerPause");
static_assert(offsetof(RsBattleHero_C_DoTimerPause, bPause) == 0x000000, "Member 'RsBattleHero_C_DoTimerPause::bPause' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoTimerPause, bDummy) == 0x000001, "Member 'RsBattleHero_C_DoTimerPause::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_DoTimerPause, CallFunc_DoTimerPause_bDummy) == 0x000002, "Member 'RsBattleHero_C_DoTimerPause::CallFunc_DoTimerPause_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnEnterActionState
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnEnterActionState final
{
public:
	EPlayerActionKind                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55CF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCancelObject;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnterActionState_bDummy;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnEnterActionState) == 0x000004, "Wrong alignment on RsBattleHero_C_OnEnterActionState");
static_assert(sizeof(RsBattleHero_C_OnEnterActionState) == 0x000010, "Wrong size on RsBattleHero_C_OnEnterActionState");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, NewState) == 0x000000, "Member 'RsBattleHero_C_OnEnterActionState::NewState' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, Param) == 0x000004, "Member 'RsBattleHero_C_OnEnterActionState::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, bDummy) == 0x000008, "Member 'RsBattleHero_C_OnEnterActionState::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, LbCancelObject) == 0x000009, "Member 'RsBattleHero_C_OnEnterActionState::LbCancelObject' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, CallFunc_OnEnterActionState_bDummy) == 0x00000A, "Member 'RsBattleHero_C_OnEnterActionState::CallFunc_OnEnterActionState_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, CallFunc_GetCapturePsychicObjectState_State) == 0x00000B, "Member 'RsBattleHero_C_OnEnterActionState::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'RsBattleHero_C_OnEnterActionState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterActionState, K2Node_SwitchEnum_CmpSuccess_1) == 0x00000D, "Member 'RsBattleHero_C_OnEnterActionState::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnEnterUpperActionState
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_OnEnterUpperActionState final
{
public:
	EPlayerUpperActionKind                        NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCancelObject;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnterUpperActionState_bDummy;           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnEnterUpperActionState) == 0x000004, "Wrong alignment on RsBattleHero_C_OnEnterUpperActionState");
static_assert(sizeof(RsBattleHero_C_OnEnterUpperActionState) == 0x000010, "Wrong size on RsBattleHero_C_OnEnterUpperActionState");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, NewState) == 0x000000, "Member 'RsBattleHero_C_OnEnterUpperActionState::NewState' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, Param) == 0x000004, "Member 'RsBattleHero_C_OnEnterUpperActionState::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, bDummy) == 0x000008, "Member 'RsBattleHero_C_OnEnterUpperActionState::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, LbCancelObject) == 0x000009, "Member 'RsBattleHero_C_OnEnterUpperActionState::LbCancelObject' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, CallFunc_OnEnterUpperActionState_bDummy) == 0x00000A, "Member 'RsBattleHero_C_OnEnterUpperActionState::CallFunc_OnEnterUpperActionState_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'RsBattleHero_C_OnEnterUpperActionState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, CallFunc_GetCapturePsychicObjectState_State) == 0x00000C, "Member 'RsBattleHero_C_OnEnterUpperActionState::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnEnterUpperActionState, K2Node_SwitchEnum_CmpSuccess_1) == 0x00000D, "Member 'RsBattleHero_C_OnEnterUpperActionState::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BeginPsychicDither
// 0x0040 (0x0040 - 0x0000)
struct RsBattleHero_C_BeginPsychicDither final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D1[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPsychicDitherData                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x000C(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GatherPsychicDitherIgnoreList_bSuccess;   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D2[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GatherPsychicDitherIgnoreList_IgnoreActorList; // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D3[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetupCutSceneActorHideDither_UpdatedTime; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BeginPsychicDither) == 0x000008, "Wrong alignment on RsBattleHero_C_BeginPsychicDither");
static_assert(sizeof(RsBattleHero_C_BeginPsychicDither) == 0x000040, "Wrong size on RsBattleHero_C_BeginPsychicDither");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, ParameterName) == 0x000000, "Member 'RsBattleHero_C_BeginPsychicDither::ParameterName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, bDummy) == 0x000008, "Member 'RsBattleHero_C_BeginPsychicDither::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_GetDataTableRowFromName_OutRow) == 0x00000C, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_GatherPsychicDitherIgnoreList_bSuccess) == 0x000021, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_GatherPsychicDitherIgnoreList_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_GatherPsychicDitherIgnoreList_IgnoreActorList) == 0x000028, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_GatherPsychicDitherIgnoreList_IgnoreActorList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000039, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicDither, CallFunc_SetupCutSceneActorHideDither_UpdatedTime) == 0x00003C, "Member 'RsBattleHero_C_BeginPsychicDither::CallFunc_SetupCutSceneActorHideDither_UpdatedTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.EndPsychicDither
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_EndPsychicDither final
{
public:
	bool                                          bNoInterp;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SetupCutSceneActorHideDither_UpdatedTime; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_EndPsychicDither) == 0x000004, "Wrong alignment on RsBattleHero_C_EndPsychicDither");
static_assert(sizeof(RsBattleHero_C_EndPsychicDither) == 0x000008, "Wrong size on RsBattleHero_C_EndPsychicDither");
static_assert(offsetof(RsBattleHero_C_EndPsychicDither, bNoInterp) == 0x000000, "Member 'RsBattleHero_C_EndPsychicDither::bNoInterp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicDither, bDummy) == 0x000001, "Member 'RsBattleHero_C_EndPsychicDither::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicDither, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_EndPsychicDither::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicDither, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_EndPsychicDither::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicDither, CallFunc_SetupCutSceneActorHideDither_UpdatedTime) == 0x000004, "Member 'RsBattleHero_C_EndPsychicDither::CallFunc_SetupCutSceneActorHideDither_UpdatedTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.UpdatePsychicDither
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_UpdatePsychicDither final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LElapsedTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDeltaSeconds;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D5[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetupCutSceneActorHideDither_UpdatedTime; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_UpdatePsychicDither) == 0x000004, "Wrong alignment on RsBattleHero_C_UpdatePsychicDither");
static_assert(sizeof(RsBattleHero_C_UpdatePsychicDither) == 0x000018, "Wrong size on RsBattleHero_C_UpdatePsychicDither");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, bDummy) == 0x000000, "Member 'RsBattleHero_C_UpdatePsychicDither::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, LElapsedTime) == 0x000004, "Member 'RsBattleHero_C_UpdatePsychicDither::LElapsedTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, LDeltaSeconds) == 0x000008, "Member 'RsBattleHero_C_UpdatePsychicDither::LDeltaSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_UpdatePsychicDither::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'RsBattleHero_C_UpdatePsychicDither::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000E, "Member 'RsBattleHero_C_UpdatePsychicDither::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_UpdatePsychicDither::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdatePsychicDither, CallFunc_SetupCutSceneActorHideDither_UpdatedTime) == 0x000014, "Member 'RsBattleHero_C_UpdatePsychicDither::CallFunc_SetupCutSceneActorHideDither_UpdatedTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GatherPsychicDitherIgnoreList
// 0x0360 (0x0360 - 0x0000)
struct RsBattleHero_C_GatherPsychicDitherIgnoreList final
{
public:
	EPsychicDitherType                            DitherType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param0;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param1;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActorList;                                   // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         LUniqueID;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRangeSq;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LTargetLocation;                                   // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D8[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTargetActor;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPlayerLocation;                                   // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D9[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LEnemyList;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55DA[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LIgnoreList;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55DB[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55DC[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55DD[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55DE[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  CallFunc_Em8010_GetMetamorphosisParent_self_CastInput; // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Em8010_GetMetamorphosisParent_ParentActor; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55DF[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x00F8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E0[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0117(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E1[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue_1;               // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55E2[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E3[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E4[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_2;                // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue_2;               // 0x0180(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55E5[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_1;         // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E6[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_2;         // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E7[0x3];                                     // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius_1;                // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_Radius_2;                // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E8[0x1];                                     // 0x01F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult_1;                  // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55E9[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance2DSquared_ReturnValue;     // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55EA[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance2DSquared_ReturnValue_1;   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55EB[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_3;                // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue_3;               // 0x0228(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55EC[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_4;                // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue_4;               // 0x0278(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55ED[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_3;         // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55EE[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius_3;                // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55EF[0x3];                                     // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_8;        // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_3;            // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_9;        // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult_2;                  // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F0[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_5;                // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue_5;               // 0x02E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F1[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F2[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_4;         // 0x0310(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F3[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_4;            // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_Radius_4;                // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_10;       // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult_3;                  // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F4[0x2];                                     // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_11;       // 0x0344(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult_4;                  // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F5[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GatherPsychicDitherIgnoreList) == 0x000008, "Wrong alignment on RsBattleHero_C_GatherPsychicDitherIgnoreList");
static_assert(sizeof(RsBattleHero_C_GatherPsychicDitherIgnoreList) == 0x000360, "Wrong size on RsBattleHero_C_GatherPsychicDitherIgnoreList");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, DitherType) == 0x000000, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::DitherType' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Param0) == 0x000004, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Param1) == 0x000008, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, bSuccess) == 0x00000C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, IgnoreActorList) == 0x000010, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::IgnoreActorList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LUniqueID) == 0x000020, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LUniqueID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LRangeSq) == 0x000024, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LRangeSq' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LTargetLocation) == 0x000028, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LTargetLocation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LTargetActor) == 0x000038, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LTargetActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LPlayerLocation) == 0x000040, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LPlayerLocation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LEnemyList) == 0x000050, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LEnemyList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LbSuccess) == 0x000060, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LbSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, LIgnoreList) == 0x000068, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::LIgnoreList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Num_Variable) == 0x00007C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Num_Variable_1) == 0x000094, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Counter_Variable_2) == 0x0000A0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Counter_Variable_3) == 0x0000A4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000AC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000B0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Array_Index_Variable_2) == 0x0000B4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Num_Variable_2) == 0x0000B8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000BC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue) == 0x0000BD, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_AsRSBattle_Player) == 0x0000C0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_1) == 0x0000C9, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Em8010_GetMetamorphosisParent_self_CastInput) == 0x0000D0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Em8010_GetMetamorphosisParent_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Em8010_GetMetamorphosisParent_ParentActor) == 0x0000E0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Em8010_GetMetamorphosisParent_ParentActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_2) == 0x0000E8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Add_ReturnValue) == 0x0000EC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyManager_Manager) == 0x0000F0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyList_ReturnValue) == 0x0000F8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_SwitchEnum_CmpSuccess) == 0x000108, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Num_Variable_3) == 0x00010C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Num_Variable_4) == 0x000110, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Less_IntInt_ReturnValue_3) == 0x000114, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000115, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000116, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000117, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_BooleanAND_ReturnValue) == 0x000118, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000119, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyManager_Manager_1) == 0x000120, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyList_ReturnValue_1) == 0x000128, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyList_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Array_Index_Variable_3) == 0x000138, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000140, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_bSuccess_1) == 0x000150, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000154, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetCapsuleRadius_Radius) == 0x000160, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000164, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_3) == 0x000170, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyManager_Manager_2) == 0x000178, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyList_ReturnValue_2) == 0x000180, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyList_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000190, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_AsCommon_AIInterface_1) == 0x0001A0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_AsCommon_AIInterface_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_bSuccess_2) == 0x0001B0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_AsCommon_AIInterface_2) == 0x0001B8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_AsCommon_AIInterface_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_bSuccess_3) == 0x0001C8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetCapsuleRadius_Radius_1) == 0x0001CC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetCapsuleRadius_Radius_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetCapsuleRadius_Radius_2) == 0x0001D0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetCapsuleRadius_Radius_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001D4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001D8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_AddUnique_ReturnValue) == 0x0001DC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Square_ReturnValue) == 0x0001E0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0001E4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_4) == 0x0001F0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_CheckDistance_bResult) == 0x0001F1, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0001F2, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Length_ReturnValue_1) == 0x0001F4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_AddUnique_ReturnValue_1) == 0x0001F8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0001FC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_CheckDistance_bResult_1) == 0x000200, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_CheckDistance_bResult_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Vector_Distance2DSquared_ReturnValue) == 0x000204, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Vector_Distance2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000208, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Vector_Distance2DSquared_ReturnValue_1) == 0x00020C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Vector_Distance2DSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Loop_Counter_Variable_4) == 0x000210, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000214, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Less_IntInt_ReturnValue_4) == 0x000218, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_IntInt_ReturnValue_4) == 0x00021C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyManager_Manager_3) == 0x000220, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyManager_Manager_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyList_ReturnValue_3) == 0x000228, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyList_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000238, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000244, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Length_ReturnValue_2) == 0x000250, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000254, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x000260, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyManager_Manager_4) == 0x000270, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyManager_Manager_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyList_ReturnValue_4) == 0x000278, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyList_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, Temp_int_Array_Index_Variable_4) == 0x000288, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_AsCommon_AIInterface_3) == 0x000290, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_AsCommon_AIInterface_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_bSuccess_4) == 0x0002A0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetCapsuleRadius_Radius_3) == 0x0002A4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetCapsuleRadius_Radius_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetId_ReturnValue) == 0x0002A8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0002AC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_AddUnique_ReturnValue_2) == 0x0002B0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_5) == 0x0002B4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_8) == 0x0002B8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Length_ReturnValue_3) == 0x0002C4, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_AddUnique_ReturnValue_3) == 0x0002C8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_AddUnique_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_9) == 0x0002CC, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_CheckDistance_bResult_2) == 0x0002D8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_CheckDistance_bResult_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyManager_Manager_5) == 0x0002E0, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyManager_Manager_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetEnemyList_ReturnValue_5) == 0x0002E8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetEnemyList_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_SwitchEnum_CmpSuccess_1) == 0x0002F8, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000300, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_6) == 0x000308, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_AsCommon_AIInterface_4) == 0x000310, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_AsCommon_AIInterface_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, K2Node_DynamicCast_bSuccess_5) == 0x000320, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_AddUnique_ReturnValue_4) == 0x000324, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_AddUnique_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_GetCapsuleRadius_Radius_4) == 0x000328, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_GetCapsuleRadius_Radius_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_10) == 0x00032C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000338, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x00033C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_CheckDistance_bResult_3) == 0x000340, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_CheckDistance_bResult_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_IsValid_ReturnValue_7) == 0x000341, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_K2_GetActorLocation_ReturnValue_11) == 0x000344, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_K2_GetActorLocation_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Length_ReturnValue_4) == 0x000350, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_CheckDistance_bResult_4) == 0x000354, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_CheckDistance_bResult_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Add_ReturnValue_1) == 0x000358, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GatherPsychicDitherIgnoreList, CallFunc_Array_Add_ReturnValue_2) == 0x00035C, "Member 'RsBattleHero_C_GatherPsychicDitherIgnoreList::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BeginDriveSequence
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_BeginDriveSequence final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginDriveSequence_bSuccess;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BeginDriveSequence) == 0x000001, "Wrong alignment on RsBattleHero_C_BeginDriveSequence");
static_assert(sizeof(RsBattleHero_C_BeginDriveSequence) == 0x000002, "Wrong size on RsBattleHero_C_BeginDriveSequence");
static_assert(offsetof(RsBattleHero_C_BeginDriveSequence, bSuccess) == 0x000000, "Member 'RsBattleHero_C_BeginDriveSequence::bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginDriveSequence, CallFunc_BeginDriveSequence_bSuccess) == 0x000001, "Member 'RsBattleHero_C_BeginDriveSequence::CallFunc_BeginDriveSequence_bSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetSeeThroughSetting
// 0x0078 (0x0078 - 0x0000)
struct RsBattleHero_C_SetSeeThroughSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPrevEnable;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F7[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager_1;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F8[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSeeThroughInterpolateTime_StartSeconds; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSeeThroughInterpolateTime_EndSeconds;  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55F9[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager_2;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutSceneEvent_IsCutSceneEvent;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55FA[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSeeThroughInterpolateTime_StartSeconds_1; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSeeThroughInterpolateTime_EndSeconds_1; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55FB[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager_3;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55FC[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55FD[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SetSeeThroughSetting) == 0x000008, "Wrong alignment on RsBattleHero_C_SetSeeThroughSetting");
static_assert(sizeof(RsBattleHero_C_SetSeeThroughSetting) == 0x000078, "Wrong size on RsBattleHero_C_SetSeeThroughSetting");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, bEnable) == 0x000000, "Member 'RsBattleHero_C_SetSeeThroughSetting::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, ClaimantName) == 0x000004, "Member 'RsBattleHero_C_SetSeeThroughSetting::ClaimantName' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, bDummy) == 0x00000C, "Member 'RsBattleHero_C_SetSeeThroughSetting::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, LbPrevEnable) == 0x00000D, "Member 'RsBattleHero_C_SetSeeThroughSetting::LbPrevEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetPostProcessManager_Manager) == 0x000010, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetEnemyManager_Manager_1) == 0x000020, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetPostProcessManager_Manager_1) == 0x000028, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetPostProcessManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetSeeThroughInterpolateTime_StartSeconds) == 0x000034, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetSeeThroughInterpolateTime_StartSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetSeeThroughInterpolateTime_EndSeconds) == 0x000038, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetSeeThroughInterpolateTime_EndSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetPostProcessManager_Manager_2) == 0x000040, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetPostProcessManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetEventManager_EventManager) == 0x000048, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_IsCutSceneEvent_IsCutSceneEvent) == 0x000051, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_IsCutSceneEvent_IsCutSceneEvent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetSeeThroughInterpolateTime_StartSeconds_1) == 0x000054, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetSeeThroughInterpolateTime_StartSeconds_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetSeeThroughInterpolateTime_EndSeconds_1) == 0x000058, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetSeeThroughInterpolateTime_EndSeconds_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_GetPostProcessManager_Manager_3) == 0x000060, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_GetPostProcessManager_Manager_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000068, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000069, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_Not_PreBool_ReturnValue) == 0x00006A, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_Array_RemoveItem_ReturnValue) == 0x000071, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetSeeThroughSetting, CallFunc_Array_AddUnique_ReturnValue) == 0x000074, "Member 'RsBattleHero_C_SetSeeThroughSetting::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputSASAllOff
// 0x0038 (0x0038 - 0x0000)
struct RsBattleHero_C_InputSASAllOff final
{
public:
	TArray<class FName>                           LSocketList;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterBadStatusConfusion_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASInput_bEnable;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55FE[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyActiveSAS_Acitve;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputSASAllOff) == 0x000008, "Wrong alignment on RsBattleHero_C_InputSASAllOff");
static_assert(sizeof(RsBattleHero_C_InputSASAllOff) == 0x000038, "Wrong size on RsBattleHero_C_InputSASAllOff");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, LSocketList) == 0x000000, "Member 'RsBattleHero_C_InputSASAllOff::LSocketList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, K2Node_MakeArray_Array) == 0x000010, "Member 'RsBattleHero_C_InputSASAllOff::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, CallFunc_IsCharacterBadStatusConfusion_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_InputSASAllOff::CallFunc_IsCharacterBadStatusConfusion_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, CallFunc_IsEnableSASInput_bEnable) == 0x000021, "Member 'RsBattleHero_C_InputSASAllOff::CallFunc_IsEnableSASInput_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, CallFunc_GetSASManager_SAS_Manager) == 0x000028, "Member 'RsBattleHero_C_InputSASAllOff::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, CallFunc_IsCutInPlaying_Playing) == 0x000030, "Member 'RsBattleHero_C_InputSASAllOff::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputSASAllOff, CallFunc_IsAnyActiveSAS_Acitve) == 0x000031, "Member 'RsBattleHero_C_InputSASAllOff::CallFunc_IsAnyActiveSAS_Acitve' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSASInput
// 0x0005 (0x0005 - 0x0000)
struct RsBattleHero_C_IsEnableSASInput final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingSasSeeThroughCutin_bPlaying;     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSAS_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHologramOn_bOn;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableSASInput) == 0x000001, "Wrong alignment on RsBattleHero_C_IsEnableSASInput");
static_assert(sizeof(RsBattleHero_C_IsEnableSASInput) == 0x000005, "Wrong size on RsBattleHero_C_IsEnableSASInput");
static_assert(offsetof(RsBattleHero_C_IsEnableSASInput, bEnable) == 0x000000, "Member 'RsBattleHero_C_IsEnableSASInput::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASInput, LbEnable) == 0x000001, "Member 'RsBattleHero_C_IsEnableSASInput::LbEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASInput, CallFunc_IsPlayingSasSeeThroughCutin_bPlaying) == 0x000002, "Member 'RsBattleHero_C_IsEnableSASInput::CallFunc_IsPlayingSasSeeThroughCutin_bPlaying' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASInput, CallFunc_IsEnableSAS_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_IsEnableSASInput::CallFunc_IsEnableSAS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASInput, CallFunc_IsHologramOn_bOn) == 0x000004, "Member 'RsBattleHero_C_IsEnableSASInput::CallFunc_IsHologramOn_bOn' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnDriveGaugeMax
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_OnDriveGaugeMax final
{
public:
	ENotifyDriveEvent                             Reason;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55FF[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDriveGaugeMax_bDummy;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnDriveGaugeMax) == 0x000004, "Wrong alignment on RsBattleHero_C_OnDriveGaugeMax");
static_assert(sizeof(RsBattleHero_C_OnDriveGaugeMax) == 0x00000C, "Wrong size on RsBattleHero_C_OnDriveGaugeMax");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, Reason) == 0x000000, "Member 'RsBattleHero_C_OnDriveGaugeMax::Reason' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, bDummy) == 0x000001, "Member 'RsBattleHero_C_OnDriveGaugeMax::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000002, "Member 'RsBattleHero_C_OnDriveGaugeMax::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000004, "Member 'RsBattleHero_C_OnDriveGaugeMax::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, CallFunc_OnDriveGaugeMax_bDummy) == 0x000008, "Member 'RsBattleHero_C_OnDriveGaugeMax::CallFunc_OnDriveGaugeMax_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, CallFunc_IsControlAI_bAI) == 0x000009, "Member 'RsBattleHero_C_OnDriveGaugeMax::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnDriveGaugeMax, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'RsBattleHero_C_OnDriveGaugeMax::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerBrainFieldAttackLeft
// 0x0006 (0x0006 - 0x0000)
struct RsBattleHero_C_InputTriggerBrainFieldAttackLeft final
{
public:
	ERSAttackInputKind                            LAttackKind;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            LCurrentKind;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft) == 0x000001, "Wrong alignment on RsBattleHero_C_InputTriggerBrainFieldAttackLeft");
static_assert(sizeof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft) == 0x000006, "Wrong size on RsBattleHero_C_InputTriggerBrainFieldAttackLeft");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft, LAttackKind) == 0x000000, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackLeft::LAttackKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft, LCurrentKind) == 0x000001, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackLeft::LCurrentKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackLeft::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft, CallFunc_InputAttack_return) == 0x000003, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackLeft::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackLeft::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackLeft, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackLeft::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerBrainFieldAttackUp
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_InputTriggerBrainFieldAttackUp final
{
public:
	ERSAttackInputKind                            LAttackKind;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            LCurrentKind;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5600[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetComboCount_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_InputTriggerBrainFieldAttackUp) == 0x000004, "Wrong alignment on RsBattleHero_C_InputTriggerBrainFieldAttackUp");
static_assert(sizeof(RsBattleHero_C_InputTriggerBrainFieldAttackUp) == 0x000010, "Wrong size on RsBattleHero_C_InputTriggerBrainFieldAttackUp");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, LAttackKind) == 0x000000, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::LAttackKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, LCurrentKind) == 0x000001, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::LCurrentKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, CallFunc_IsActionStatus_Result) == 0x000002, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, CallFunc_IsPlayerStatus_Result) == 0x000004, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, CallFunc_GetComboCount_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::CallFunc_GetComboCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, K2Node_SwitchInteger_CmpSuccess) == 0x00000C, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, CallFunc_InputAttack_return) == 0x00000D, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, K2Node_SwitchEnum_CmpSuccess) == 0x00000E, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackUp, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x00000F, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackUp::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerBrainFieldAttackRight
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_InputTriggerBrainFieldAttackRight final
{
public:
	ERSAttackInputKind                            LCurrentKind;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            LAttackKind;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5601[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetComboCount_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_InputTriggerBrainFieldAttackRight) == 0x000004, "Wrong alignment on RsBattleHero_C_InputTriggerBrainFieldAttackRight");
static_assert(sizeof(RsBattleHero_C_InputTriggerBrainFieldAttackRight) == 0x00000C, "Wrong size on RsBattleHero_C_InputTriggerBrainFieldAttackRight");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, LCurrentKind) == 0x000000, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::LCurrentKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, LAttackKind) == 0x000001, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::LAttackKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, CallFunc_GetComboCount_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::CallFunc_GetComboCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, K2Node_SwitchInteger_CmpSuccess) == 0x000008, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, CallFunc_InputAttack_return) == 0x00000A, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldAttackRight, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x00000B, "Member 'RsBattleHero_C_InputTriggerBrainFieldAttackRight::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputReleaseBrainFieldAttackRight
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_InputReleaseBrainFieldAttackRight final
{
public:
	ERSAttackInputKind                            LCurrentKind;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputReleaseBrainFieldAttackRight) == 0x000001, "Wrong alignment on RsBattleHero_C_InputReleaseBrainFieldAttackRight");
static_assert(sizeof(RsBattleHero_C_InputReleaseBrainFieldAttackRight) == 0x000002, "Wrong size on RsBattleHero_C_InputReleaseBrainFieldAttackRight");
static_assert(offsetof(RsBattleHero_C_InputReleaseBrainFieldAttackRight, LCurrentKind) == 0x000000, "Member 'RsBattleHero_C_InputReleaseBrainFieldAttackRight::LCurrentKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputReleaseBrainFieldAttackRight, CallFunc_InputAttack_return) == 0x000001, "Member 'RsBattleHero_C_InputReleaseBrainFieldAttackRight::CallFunc_InputAttack_return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetActiveSASNum
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_GetActiveSASNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetActiveSASNum) == 0x000004, "Wrong alignment on RsBattleHero_C_GetActiveSASNum");
static_assert(sizeof(RsBattleHero_C_GetActiveSASNum) == 0x000008, "Wrong size on RsBattleHero_C_GetActiveSASNum");
static_assert(offsetof(RsBattleHero_C_GetActiveSASNum, Num) == 0x000000, "Member 'RsBattleHero_C_GetActiveSASNum::Num' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetActiveSASNum, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_GetActiveSASNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputTriggerBrainFieldEnd
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_InputTriggerBrainFieldEnd final
{
public:
	bool                                          CallFunc_CloseBrainField_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionBrainFieldClose_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputTriggerBrainFieldEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_InputTriggerBrainFieldEnd");
static_assert(sizeof(RsBattleHero_C_InputTriggerBrainFieldEnd) == 0x000002, "Wrong size on RsBattleHero_C_InputTriggerBrainFieldEnd");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldEnd, CallFunc_CloseBrainField_ReturnValue) == 0x000000, "Member 'RsBattleHero_C_InputTriggerBrainFieldEnd::CallFunc_CloseBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputTriggerBrainFieldEnd, CallFunc_IsEnableActionBrainFieldClose_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_InputTriggerBrainFieldEnd::CallFunc_IsEnableActionBrainFieldClose_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.RequestBrainFieldHelp
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_RequestBrainFieldHelp final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_CheckBrainFieldHelpPlayer_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_RequestBrainFieldHelp) == 0x000001, "Wrong alignment on RsBattleHero_C_RequestBrainFieldHelp");
static_assert(sizeof(RsBattleHero_C_RequestBrainFieldHelp) == 0x000003, "Wrong size on RsBattleHero_C_RequestBrainFieldHelp");
static_assert(offsetof(RsBattleHero_C_RequestBrainFieldHelp, bDummy) == 0x000000, "Member 'RsBattleHero_C_RequestBrainFieldHelp::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_RequestBrainFieldHelp, CallFunc_CheckBrainFieldHelpPlayer_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_RequestBrainFieldHelp::CallFunc_CheckBrainFieldHelpPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_RequestBrainFieldHelp, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_RequestBrainFieldHelp::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBrainFieldState
// 0x0048 (0x0048 - 0x0000)
struct RsBattleHero_C_OnBrainFieldState final
{
public:
	EPlayerBrainFieldState                        State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldState                        PrevState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus_1;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetBrainFieldHelpPlayer_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5602[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_1; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_2; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_3; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5603[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBrainFieldHelpPlayer_ReturnValue_1;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBrainFieldState) == 0x000008, "Wrong alignment on RsBattleHero_C_OnBrainFieldState");
static_assert(sizeof(RsBattleHero_C_OnBrainFieldState) == 0x000048, "Wrong size on RsBattleHero_C_OnBrainFieldState");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, State) == 0x000000, "Member 'RsBattleHero_C_OnBrainFieldState::State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, PrevState) == 0x000001, "Member 'RsBattleHero_C_OnBrainFieldState::PrevState' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000002, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_IsBadStatusElectric_bBadStatus_1) == 0x000003, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_IsBadStatusElectric_bBadStatus_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetBrainFieldHelpPlayer_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetBrainFieldHelpPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000008, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_1) == 0x000010, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_2) == 0x000018, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_3) == 0x000020, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000028, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'RsBattleHero_C_OnBrainFieldState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetSASManager_SAS_Manager) == 0x000038, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_GetBrainFieldHelpPlayer_ReturnValue_1) == 0x000040, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_GetBrainFieldHelpPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_IsActionStatus_Result) == 0x000041, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_OnDead_Dummy) == 0x000042, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, CallFunc_IsControlAI_bAI) == 0x000043, "Member 'RsBattleHero_C_OnBrainFieldState::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldState, K2Node_SwitchEnum_CmpSuccess_1) == 0x000044, "Member 'RsBattleHero_C_OnBrainFieldState::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SASCancelAll
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_SASCancelAll final
{
public:
	bool                                          bCancelCost;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SASCancelAll) == 0x000001, "Wrong alignment on RsBattleHero_C_SASCancelAll");
static_assert(sizeof(RsBattleHero_C_SASCancelAll) == 0x000001, "Wrong size on RsBattleHero_C_SASCancelAll");
static_assert(offsetof(RsBattleHero_C_SASCancelAll, bCancelCost) == 0x000000, "Member 'RsBattleHero_C_SASCancelAll::bCancelCost' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableIntercept
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_IsEnableIntercept final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnbale;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_SeeThrough_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInVisionFog_ReturnValue;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableIntercept) == 0x000001, "Wrong alignment on RsBattleHero_C_IsEnableIntercept");
static_assert(sizeof(RsBattleHero_C_IsEnableIntercept) == 0x000004, "Wrong size on RsBattleHero_C_IsEnableIntercept");
static_assert(offsetof(RsBattleHero_C_IsEnableIntercept, bOK) == 0x000000, "Member 'RsBattleHero_C_IsEnableIntercept::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableIntercept, LbEnbale) == 0x000001, "Member 'RsBattleHero_C_IsEnableIntercept::LbEnbale' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableIntercept, CallFunc_IsActiveSAS_SeeThrough_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_IsEnableIntercept::CallFunc_IsActiveSAS_SeeThrough_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableIntercept, CallFunc_IsInVisionFog_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_IsEnableIntercept::CallFunc_IsInVisionFog_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableJustDodgePsychic
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_IsEnableJustDodgePsychic final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5604[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_IsEnableJustDodgePsychic) == 0x000004, "Wrong alignment on RsBattleHero_C_IsEnableJustDodgePsychic");
static_assert(sizeof(RsBattleHero_C_IsEnableJustDodgePsychic) == 0x000014, "Wrong size on RsBattleHero_C_IsEnableJustDodgePsychic");
static_assert(offsetof(RsBattleHero_C_IsEnableJustDodgePsychic, bOK) == 0x000000, "Member 'RsBattleHero_C_IsEnableJustDodgePsychic::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableJustDodgePsychic, CallFunc_IsEnableSASEffect_bEnable) == 0x000001, "Member 'RsBattleHero_C_IsEnableJustDodgePsychic::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableJustDodgePsychic, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RsBattleHero_C_IsEnableJustDodgePsychic::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableJustDodgePsychic, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RsBattleHero_C_IsEnableJustDodgePsychic::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableJustDodgePsychic, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RsBattleHero_C_IsEnableJustDodgePsychic::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableJustDodgePsychic, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RsBattleHero_C_IsEnableJustDodgePsychic::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InputPsychicField
// 0x0050 (0x0050 - 0x0000)
struct RsBattleHero_C_InputPsychicField final
{
public:
	bool                                          bPress;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     LSASKind;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5605[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InBranField_InBrainDield;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5606[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActiveSecondsFromKind_ActiveSeconds;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_MaxTime;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5607[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable_1;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5608[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InputPsychicField) == 0x000008, "Wrong alignment on RsBattleHero_C_InputPsychicField");
static_assert(sizeof(RsBattleHero_C_InputPsychicField) == 0x000050, "Wrong size on RsBattleHero_C_InputPsychicField");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, bPress) == 0x000000, "Member 'RsBattleHero_C_InputPsychicField::bPress' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, LSASKind) == 0x000001, "Member 'RsBattleHero_C_InputPsychicField::LSASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, Temp_byte_Variable) == 0x000002, "Member 'RsBattleHero_C_InputPsychicField::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, Temp_byte_Variable_1) == 0x000003, "Member 'RsBattleHero_C_InputPsychicField::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_GetPlayerID_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_InBranField_InBrainDield) == 0x000011, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_InBranField_InBrainDield' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_GetActiveSecondsFromKind_ActiveSeconds) == 0x000014, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_GetActiveSecondsFromKind_ActiveSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_GetActiveSecondsFromKind_MaxTime) == 0x000018, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_GetActiveSecondsFromKind_MaxTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_bEnable) == 0x00001C, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param0) == 0x000020, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param1) == 0x000024, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param2) == 0x000028, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param3) == 0x00002C, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_bEnable_1) == 0x000031, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_bEnable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param0_1) == 0x000034, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param0_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param1_1) == 0x000038, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param1_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param2_1) == 0x00003C, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsEnableSASEffect_Param3_1) == 0x000040, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsEnableSASEffect_Param3_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, Temp_bool_Variable) == 0x000044, "Member 'RsBattleHero_C_InputPsychicField::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_InputAttack_return) == 0x000045, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, K2Node_Select_Default) == 0x000046, "Member 'RsBattleHero_C_InputPsychicField::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_InputAttack_return_1) == 0x000047, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InputPsychicField, CallFunc_IsControlAI_bAI) == 0x000048, "Member 'RsBattleHero_C_InputPsychicField::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetPsychicFieldCaptureNum
// 0x0038 (0x0038 - 0x0000)
struct RsBattleHero_C_GetPsychicFieldCaptureNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5609[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable_1;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_560A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetPsychicFieldCaptureNum) == 0x000004, "Wrong alignment on RsBattleHero_C_GetPsychicFieldCaptureNum");
static_assert(sizeof(RsBattleHero_C_GetPsychicFieldCaptureNum) == 0x000038, "Wrong size on RsBattleHero_C_GetPsychicFieldCaptureNum");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, Num) == 0x000000, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::Num' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, Temp_byte_Variable) == 0x000004, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, Temp_byte_Variable_1) == 0x000005, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_GetPlayerID_ReturnValue) == 0x000006, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, Temp_bool_Variable) == 0x000007, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, K2Node_Select_Default) == 0x000009, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_bEnable) == 0x00000A, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param0) == 0x00000C, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param1) == 0x000010, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param2) == 0x000014, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param3) == 0x000018, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_bEnable_1) == 0x00001C, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_bEnable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param0_1) == 0x000020, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param0_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param1_1) == 0x000024, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param1_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param2_1) == 0x000028, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param2_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_IsEnableSASEffect_Param3_1) == 0x00002C, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_IsEnableSASEffect_Param3_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_FTrunc_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetPsychicFieldCaptureNum, CallFunc_FTrunc_ReturnValue_1) == 0x000034, "Member 'RsBattleHero_C_GetPsychicFieldCaptureNum::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BeginPsychicField
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_BeginPsychicField final
{
public:
	E_SASKind                                     Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Select_Default_1;                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BeginPsychicField) == 0x000001, "Wrong alignment on RsBattleHero_C_BeginPsychicField");
static_assert(sizeof(RsBattleHero_C_BeginPsychicField) == 0x00000C, "Wrong size on RsBattleHero_C_BeginPsychicField");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, Temp_byte_Variable) == 0x000000, "Member 'RsBattleHero_C_BeginPsychicField::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, Temp_byte_Variable_1) == 0x000001, "Member 'RsBattleHero_C_BeginPsychicField::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, Temp_bool_Variable) == 0x000002, "Member 'RsBattleHero_C_BeginPsychicField::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, Temp_byte_Variable_2) == 0x000003, "Member 'RsBattleHero_C_BeginPsychicField::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, Temp_byte_Variable_3) == 0x000004, "Member 'RsBattleHero_C_BeginPsychicField::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, CallFunc_GetPlayerID_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_BeginPsychicField::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, Temp_bool_Variable_1) == 0x000006, "Member 'RsBattleHero_C_BeginPsychicField::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000007, "Member 'RsBattleHero_C_BeginPsychicField::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, CallFunc_GetPlayerID_ReturnValue_1) == 0x000008, "Member 'RsBattleHero_C_BeginPsychicField::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'RsBattleHero_C_BeginPsychicField::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, K2Node_Select_Default) == 0x00000A, "Member 'RsBattleHero_C_BeginPsychicField::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPsychicField, K2Node_Select_Default_1) == 0x00000B, "Member 'RsBattleHero_C_BeginPsychicField::K2Node_Select_Default_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.EndPsychicField
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_EndPsychicField final
{
public:
	E_SASKind                                     Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Select_Default_1;                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_EndPsychicField) == 0x000001, "Wrong alignment on RsBattleHero_C_EndPsychicField");
static_assert(sizeof(RsBattleHero_C_EndPsychicField) == 0x00000C, "Wrong size on RsBattleHero_C_EndPsychicField");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, Temp_byte_Variable) == 0x000000, "Member 'RsBattleHero_C_EndPsychicField::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, Temp_byte_Variable_1) == 0x000001, "Member 'RsBattleHero_C_EndPsychicField::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, Temp_bool_Variable) == 0x000002, "Member 'RsBattleHero_C_EndPsychicField::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, Temp_byte_Variable_2) == 0x000003, "Member 'RsBattleHero_C_EndPsychicField::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, Temp_byte_Variable_3) == 0x000004, "Member 'RsBattleHero_C_EndPsychicField::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, CallFunc_GetPlayerID_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_EndPsychicField::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, Temp_bool_Variable_1) == 0x000006, "Member 'RsBattleHero_C_EndPsychicField::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000007, "Member 'RsBattleHero_C_EndPsychicField::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, CallFunc_GetPlayerID_ReturnValue_1) == 0x000008, "Member 'RsBattleHero_C_EndPsychicField::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'RsBattleHero_C_EndPsychicField::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, K2Node_Select_Default) == 0x00000A, "Member 'RsBattleHero_C_EndPsychicField::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPsychicField, K2Node_Select_Default_1) == 0x00000B, "Member 'RsBattleHero_C_EndPsychicField::K2Node_Select_Default_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BeginEnpcSAS
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_BeginEnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BeginEnpcSAS) == 0x000001, "Wrong alignment on RsBattleHero_C_BeginEnpcSAS");
static_assert(sizeof(RsBattleHero_C_BeginEnpcSAS) == 0x000003, "Wrong size on RsBattleHero_C_BeginEnpcSAS");
static_assert(offsetof(RsBattleHero_C_BeginEnpcSAS, Kind) == 0x000000, "Member 'RsBattleHero_C_BeginEnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginEnpcSAS, bDummy) == 0x000001, "Member 'RsBattleHero_C_BeginEnpcSAS::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginEnpcSAS, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_BeginEnpcSAS::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.InitializeDataTable
// 0x0048 (0x0048 - 0x0000)
struct RsBattleHero_C_InitializeDataTable final
{
public:
	struct FAssassinAttackData                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x0040)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_InitializeDataTable) == 0x000008, "Wrong alignment on RsBattleHero_C_InitializeDataTable");
static_assert(sizeof(RsBattleHero_C_InitializeDataTable) == 0x000048, "Wrong size on RsBattleHero_C_InitializeDataTable");
static_assert(offsetof(RsBattleHero_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'RsBattleHero_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PlayBrainFieldBackGroundVoice
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_PlayBrainFieldBackGroundVoice final
{
public:
	int32                                         Step;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_560B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_560C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue_1;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue_2;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_PlayBrainFieldBackGroundVoice) == 0x000008, "Wrong alignment on RsBattleHero_C_PlayBrainFieldBackGroundVoice");
static_assert(sizeof(RsBattleHero_C_PlayBrainFieldBackGroundVoice) == 0x000028, "Wrong size on RsBattleHero_C_PlayBrainFieldBackGroundVoice");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldBackGroundVoice, Step) == 0x000000, "Member 'RsBattleHero_C_PlayBrainFieldBackGroundVoice::Step' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldBackGroundVoice, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_PlayBrainFieldBackGroundVoice::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldBackGroundVoice, K2Node_SwitchInteger_CmpSuccess) == 0x000010, "Member 'RsBattleHero_C_PlayBrainFieldBackGroundVoice::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldBackGroundVoice, CallFunc_SpawnSoundAtLocationRS_ReturnValue_1) == 0x000018, "Member 'RsBattleHero_C_PlayBrainFieldBackGroundVoice::CallFunc_SpawnSoundAtLocationRS_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldBackGroundVoice, CallFunc_SpawnSoundAtLocationRS_ReturnValue_2) == 0x000020, "Member 'RsBattleHero_C_PlayBrainFieldBackGroundVoice::CallFunc_SpawnSoundAtLocationRS_ReturnValue_2' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.StopBrainFieldBackGroundVoice
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_StopBrainFieldBackGroundVoice final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_StopBrainFieldBackGroundVoice) == 0x000001, "Wrong alignment on RsBattleHero_C_StopBrainFieldBackGroundVoice");
static_assert(sizeof(RsBattleHero_C_StopBrainFieldBackGroundVoice) == 0x000001, "Wrong size on RsBattleHero_C_StopBrainFieldBackGroundVoice");
static_assert(offsetof(RsBattleHero_C_StopBrainFieldBackGroundVoice, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RsBattleHero_C_StopBrainFieldBackGroundVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckAbleInterceptInReactionChance
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_CheckAbleInterceptInReactionChance final
{
public:
	bool                                          bAbleIntercept;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_560D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReactionChance_bReactionChance;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckAbleInterceptInReactionChance) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckAbleInterceptInReactionChance");
static_assert(sizeof(RsBattleHero_C_CheckAbleInterceptInReactionChance) == 0x000018, "Wrong size on RsBattleHero_C_CheckAbleInterceptInReactionChance");
static_assert(offsetof(RsBattleHero_C_CheckAbleInterceptInReactionChance, bAbleIntercept) == 0x000000, "Member 'RsBattleHero_C_CheckAbleInterceptInReactionChance::bAbleIntercept' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAbleInterceptInReactionChance, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RsBattleHero_C_CheckAbleInterceptInReactionChance::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAbleInterceptInReactionChance, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_CheckAbleInterceptInReactionChance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAbleInterceptInReactionChance, CallFunc_IsReactionChance_bReactionChance) == 0x000011, "Member 'RsBattleHero_C_CheckAbleInterceptInReactionChance::CallFunc_IsReactionChance_bReactionChance' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CalcFinalDamageByDefence
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_CalcFinalDamageByDefence final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_560E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDamage;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByDefence_ReturnValue;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByDefence_ForHero_ReturnValue; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CalcFinalDamageByDefence) == 0x000008, "Wrong alignment on RsBattleHero_C_CalcFinalDamageByDefence");
static_assert(sizeof(RsBattleHero_C_CalcFinalDamageByDefence) == 0x000020, "Wrong size on RsBattleHero_C_CalcFinalDamageByDefence");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByDefence, Damage) == 0x000000, "Member 'RsBattleHero_C_CalcFinalDamageByDefence::Damage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByDefence, AttackActor) == 0x000008, "Member 'RsBattleHero_C_CalcFinalDamageByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByDefence, ReturnValue) == 0x000010, "Member 'RsBattleHero_C_CalcFinalDamageByDefence::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByDefence, LDamage) == 0x000014, "Member 'RsBattleHero_C_CalcFinalDamageByDefence::LDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByDefence, CallFunc_CalcFinalDamageByDefence_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_CalcFinalDamageByDefence::CallFunc_CalcFinalDamageByDefence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcFinalDamageByDefence, CallFunc_CalcFinalDamageByDefence_ForHero_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_CalcFinalDamageByDefence::CallFunc_CalcFinalDamageByDefence_ForHero_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnAreaChange
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnAreaChange final
{
public:
	bool                                          bChangeLocation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAreaChange_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_560F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPPlayerManagerInterface_C> CallFunc_ResetAssistThinkData_self_CastInput;      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnAreaChange) == 0x000008, "Wrong alignment on RsBattleHero_C_OnAreaChange");
static_assert(sizeof(RsBattleHero_C_OnAreaChange) == 0x000018, "Wrong size on RsBattleHero_C_OnAreaChange");
static_assert(offsetof(RsBattleHero_C_OnAreaChange, bChangeLocation) == 0x000000, "Member 'RsBattleHero_C_OnAreaChange::bChangeLocation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAreaChange, bDummy) == 0x000001, "Member 'RsBattleHero_C_OnAreaChange::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAreaChange, CallFunc_OnAreaChange_bDummy) == 0x000002, "Member 'RsBattleHero_C_OnAreaChange::CallFunc_OnAreaChange_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAreaChange, CallFunc_IsControlAI_bAI) == 0x000003, "Member 'RsBattleHero_C_OnAreaChange::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnAreaChange, CallFunc_ResetAssistThinkData_self_CastInput) == 0x000008, "Member 'RsBattleHero_C_OnAreaChange::CallFunc_ResetAssistThinkData_self_CastInput' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEventBrainCrash
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_IsEventBrainCrash final
{
public:
	bool                                          IsEvent;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsEvent;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5610[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEventBrainCrash_IsEvent;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEventBrainCrash) == 0x000008, "Wrong alignment on RsBattleHero_C_IsEventBrainCrash");
static_assert(sizeof(RsBattleHero_C_IsEventBrainCrash) == 0x000018, "Wrong size on RsBattleHero_C_IsEventBrainCrash");
static_assert(offsetof(RsBattleHero_C_IsEventBrainCrash, IsEvent) == 0x000000, "Member 'RsBattleHero_C_IsEventBrainCrash::IsEvent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEventBrainCrash, bIsEvent) == 0x000001, "Member 'RsBattleHero_C_IsEventBrainCrash::bIsEvent' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEventBrainCrash, CallFunc_GetEnemyManager_Manager) == 0x000008, "Member 'RsBattleHero_C_IsEventBrainCrash::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEventBrainCrash, CallFunc_CheckEventBrainCrash_IsEvent) == 0x000010, "Member 'RsBattleHero_C_IsEventBrainCrash::CallFunc_CheckEventBrainCrash_IsEvent' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.EventBrainCrash
// 0x0070 (0x0070 - 0x0000)
struct RsBattleHero_C_EventBrainCrash final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetBrainCrashEvent_Event;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5611[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MakeEventActorBase_C*               CallFunc_FinishSpawningActor_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_EventBrainCrash) == 0x000010, "Wrong alignment on RsBattleHero_C_EventBrainCrash");
static_assert(sizeof(RsBattleHero_C_EventBrainCrash) == 0x000070, "Wrong size on RsBattleHero_C_EventBrainCrash");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_GetEnemyManager_Manager) == 0x000030, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_GetEnemyManager_Manager_1) == 0x000038, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_GetBrainCrashEvent_Event) == 0x000040, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_GetBrainCrashEvent_Event' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_IsValidClass_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_FinishSpawningActor_ReturnValue) == 0x000058, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventBrainCrash, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'RsBattleHero_C_EventBrainCrash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckBrainFieldLunaticBrainTalk
// 0x0005 (0x0005 - 0x0000)
struct RsBattleHero_C_CheckBrainFieldLunaticBrainTalk final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAnyDead_Playing;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk) == 0x000001, "Wrong alignment on RsBattleHero_C_CheckBrainFieldLunaticBrainTalk");
static_assert(sizeof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk) == 0x000005, "Wrong size on RsBattleHero_C_CheckBrainFieldLunaticBrainTalk");
static_assert(offsetof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk, bOK) == 0x000000, "Member 'RsBattleHero_C_CheckBrainFieldLunaticBrainTalk::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_CheckBrainFieldLunaticBrainTalk::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk, CallFunc_IsPlayingAnyDead_Playing) == 0x000002, "Member 'RsBattleHero_C_CheckBrainFieldLunaticBrainTalk::CallFunc_IsPlayingAnyDead_Playing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000003, "Member 'RsBattleHero_C_CheckBrainFieldLunaticBrainTalk::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckBrainFieldLunaticBrainTalk, CallFunc_IsActionStatus_Result) == 0x000004, "Member 'RsBattleHero_C_CheckBrainFieldLunaticBrainTalk::CallFunc_IsActionStatus_Result' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PlayBrainFieldLunaticBrainTalk
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_PlayBrainFieldLunaticBrainTalk final
{
public:
	EPlayerBrainFieldDanger                       DangerLV;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirst;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5612[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetBrainFieldLunaticBrainTalkID_BrainTalkID; // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_PlayBrainFieldLunaticBrainTalk) == 0x000004, "Wrong alignment on RsBattleHero_C_PlayBrainFieldLunaticBrainTalk");
static_assert(sizeof(RsBattleHero_C_PlayBrainFieldLunaticBrainTalk) == 0x00000C, "Wrong size on RsBattleHero_C_PlayBrainFieldLunaticBrainTalk");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldLunaticBrainTalk, DangerLV) == 0x000000, "Member 'RsBattleHero_C_PlayBrainFieldLunaticBrainTalk::DangerLV' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldLunaticBrainTalk, bFirst) == 0x000001, "Member 'RsBattleHero_C_PlayBrainFieldLunaticBrainTalk::bFirst' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayBrainFieldLunaticBrainTalk, CallFunc_GetBrainFieldLunaticBrainTalkID_BrainTalkID) == 0x000004, "Member 'RsBattleHero_C_PlayBrainFieldLunaticBrainTalk::CallFunc_GetBrainFieldLunaticBrainTalkID_BrainTalkID' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetBrainFieldLunaticBrainTalkID
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_GetBrainFieldLunaticBrainTalkID final
{
public:
	EPlayerBrainFieldDanger                       DangerLV;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirst;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5613[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BrainTalkID;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetBrainFieldLunaticBrainTalkID) == 0x000004, "Wrong alignment on RsBattleHero_C_GetBrainFieldLunaticBrainTalkID");
static_assert(sizeof(RsBattleHero_C_GetBrainFieldLunaticBrainTalkID) == 0x00000C, "Wrong size on RsBattleHero_C_GetBrainFieldLunaticBrainTalkID");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldLunaticBrainTalkID, DangerLV) == 0x000000, "Member 'RsBattleHero_C_GetBrainFieldLunaticBrainTalkID::DangerLV' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldLunaticBrainTalkID, bFirst) == 0x000001, "Member 'RsBattleHero_C_GetBrainFieldLunaticBrainTalkID::bFirst' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldLunaticBrainTalkID, BrainTalkID) == 0x000004, "Member 'RsBattleHero_C_GetBrainFieldLunaticBrainTalkID::BrainTalkID' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BrainFieldDangerDirection
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_BrainFieldDangerDirection final
{
public:
	bool                                          bTimeUp;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5614[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldDanger                       Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5615[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldDanger                       Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5616[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBrainFieldDanger                       CallFunc_GetBrainFieldDangerLV_ReturnValue;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5617[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBrainFieldWarningCount_ReturnValue;    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5618[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldDanger                       CallFunc_GetBrainFieldDangerLV_ReturnValue_1;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5619[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BrainFieldDangerDirection) == 0x000008, "Wrong alignment on RsBattleHero_C_BrainFieldDangerDirection");
static_assert(sizeof(RsBattleHero_C_BrainFieldDangerDirection) == 0x000058, "Wrong size on RsBattleHero_C_BrainFieldDangerDirection");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, bTimeUp) == 0x000000, "Member 'RsBattleHero_C_BrainFieldDangerDirection::bTimeUp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable) == 0x000004, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_byte_Variable) == 0x000008, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable_1) == 0x00000C, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable_2) == 0x000010, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable_3) == 0x000014, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_byte_Variable_1) == 0x000018, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable_4) == 0x00001C, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable_5) == 0x000020, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_int_Variable_6) == 0x000024, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000028, "Member 'RsBattleHero_C_BrainFieldDangerDirection::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_BrainFieldDangerDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, Temp_bool_Variable) == 0x000031, "Member 'RsBattleHero_C_BrainFieldDangerDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, CallFunc_GetBrainFieldDangerLV_ReturnValue) == 0x000032, "Member 'RsBattleHero_C_BrainFieldDangerDirection::CallFunc_GetBrainFieldDangerLV_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, CallFunc_GetBrainFieldWarningCount_ReturnValue) == 0x000034, "Member 'RsBattleHero_C_BrainFieldDangerDirection::CallFunc_GetBrainFieldWarningCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, K2Node_Select_Default) == 0x000038, "Member 'RsBattleHero_C_BrainFieldDangerDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, CallFunc_GetBrainFieldManager_Manager) == 0x000040, "Member 'RsBattleHero_C_BrainFieldDangerDirection::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, CallFunc_GetBrainFieldDangerLV_ReturnValue_1) == 0x000048, "Member 'RsBattleHero_C_BrainFieldDangerDirection::CallFunc_GetBrainFieldDangerLV_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, K2Node_Select_Default_1) == 0x00004C, "Member 'RsBattleHero_C_BrainFieldDangerDirection::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, K2Node_Select_Default_2) == 0x000050, "Member 'RsBattleHero_C_BrainFieldDangerDirection::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainFieldDangerDirection, K2Node_SwitchInteger_CmpSuccess) == 0x000054, "Member 'RsBattleHero_C_BrainFieldDangerDirection::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckNpcPsychicCombo
// 0x0012 (0x0012 - 0x0000)
struct RsBattleHero_C_CheckNpcPsychicCombo final
{
public:
	bool                                          CallFunc_InputAttack_return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_2;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_GetCurrentBattleThink_NewParam;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_GetCurrentBattleThink_NewParam_1;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return_3;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckNpcPsychicCombo) == 0x000001, "Wrong alignment on RsBattleHero_C_CheckNpcPsychicCombo");
static_assert(sizeof(RsBattleHero_C_CheckNpcPsychicCombo) == 0x000012, "Wrong size on RsBattleHero_C_CheckNpcPsychicCombo");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_InputAttack_return) == 0x000000, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_InputAttack_return_1) == 0x000001, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, Temp_bool_Variable) == 0x000003, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_MakeLiteralByte_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_InputAttack_return_2) == 0x000006, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_InputAttack_return_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_GetCurrentBattleThink_NewParam) == 0x000007, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_GetCurrentBattleThink_NewParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000008, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x00000A, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_IsValid_ReturnValue_1) == 0x00000B, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_GetCurrentBattleThink_NewParam_1) == 0x00000C, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_GetCurrentBattleThink_NewParam_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000D, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_GetPlayerID_ReturnValue) == 0x00000E, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, K2Node_SwitchEnum_CmpSuccess_1) == 0x00000F, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, K2Node_Select_Default) == 0x000010, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckNpcPsychicCombo, CallFunc_InputAttack_return_3) == 0x000011, "Member 'RsBattleHero_C_CheckNpcPsychicCombo::CallFunc_InputAttack_return_3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckStrongCharacter
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_CheckStrongCharacter final
{
public:
	class ARSCharacterBase*                       CheckCharacter;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561A[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LDiffLV;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbStrong;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECharacterAttribute>                   CallFunc_GetCharacterAttribute_ReturnValue;        // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterLV_LV;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561D[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCharacterLV_LV_1;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterAttribute                           Temp_byte_Variable;                                // 0x0048(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561E[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckStrongCharacter) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckStrongCharacter");
static_assert(sizeof(RsBattleHero_C_CheckStrongCharacter) == 0x000058, "Wrong size on RsBattleHero_C_CheckStrongCharacter");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CheckCharacter) == 0x000000, "Member 'RsBattleHero_C_CheckStrongCharacter::CheckCharacter' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, ReturnValue) == 0x000008, "Member 'RsBattleHero_C_CheckStrongCharacter::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, LDiffLV) == 0x00000C, "Member 'RsBattleHero_C_CheckStrongCharacter::LDiffLV' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, LbStrong) == 0x000010, "Member 'RsBattleHero_C_CheckStrongCharacter::LbStrong' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000012, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000013, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GetCharacterAttribute_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GetCharacterAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GetCharacterLV_LV) == 0x000028, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GetCharacterLV_LV' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000030, "Member 'RsBattleHero_C_CheckStrongCharacter::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RsBattleHero_C_CheckStrongCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GetCharacterLV_LV_1) == 0x000044, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GetCharacterLV_LV_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, Temp_byte_Variable) == 0x000048, "Member 'RsBattleHero_C_CheckStrongCharacter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_Array_Find_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x000054, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckStrongCharacter, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000055, "Member 'RsBattleHero_C_CheckStrongCharacter::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableBackStepAttack
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_IsEnableBackStepAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableBackStepAttack) == 0x000001, "Wrong alignment on RsBattleHero_C_IsEnableBackStepAttack");
static_assert(sizeof(RsBattleHero_C_IsEnableBackStepAttack) == 0x000004, "Wrong size on RsBattleHero_C_IsEnableBackStepAttack");
static_assert(offsetof(RsBattleHero_C_IsEnableBackStepAttack, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_IsEnableBackStepAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBackStepAttack, LbEnable) == 0x000001, "Member 'RsBattleHero_C_IsEnableBackStepAttack::LbEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBackStepAttack, CallFunc_GetPlayerID_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_IsEnableBackStepAttack::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableBackStepAttack, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'RsBattleHero_C_IsEnableBackStepAttack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SASCount
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_SASCount final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SASCount) == 0x000004, "Wrong alignment on RsBattleHero_C_SASCount");
static_assert(sizeof(RsBattleHero_C_SASCount) == 0x000010, "Wrong size on RsBattleHero_C_SASCount");
static_assert(offsetof(RsBattleHero_C_SASCount, Kind) == 0x000000, "Member 'RsBattleHero_C_SASCount::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCount, Temp_int_Variable) == 0x000004, "Member 'RsBattleHero_C_SASCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCount, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_SASCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCount, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_SASCount::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PlayPsychicComboCaptureSE
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_PlayPsychicComboCaptureSE final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopPsychicComboCaptureSE_bDummy;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5620[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CallFunc_GetCapturePsychicObject_return;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5621[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_PlayPsychicComboCaptureSE) == 0x000008, "Wrong alignment on RsBattleHero_C_PlayPsychicComboCaptureSE");
static_assert(sizeof(RsBattleHero_C_PlayPsychicComboCaptureSE) == 0x000028, "Wrong size on RsBattleHero_C_PlayPsychicComboCaptureSE");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, bDummy) == 0x000000, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, CallFunc_StopPsychicComboCaptureSE_bDummy) == 0x000001, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::CallFunc_StopPsychicComboCaptureSE_bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, CallFunc_IsControlAI_bAI) == 0x000002, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, CallFunc_GetCapturePsychicObject_return) == 0x000008, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::CallFunc_GetCapturePsychicObject_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PlayPsychicComboCaptureSE, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_PlayPsychicComboCaptureSE::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.StopPsychicComboCaptureSE
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_StopPsychicComboCaptureSE final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_StopPsychicComboCaptureSE) == 0x000001, "Wrong alignment on RsBattleHero_C_StopPsychicComboCaptureSE");
static_assert(sizeof(RsBattleHero_C_StopPsychicComboCaptureSE) == 0x000002, "Wrong size on RsBattleHero_C_StopPsychicComboCaptureSE");
static_assert(offsetof(RsBattleHero_C_StopPsychicComboCaptureSE, bDummy) == 0x000000, "Member 'RsBattleHero_C_StopPsychicComboCaptureSE::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_StopPsychicComboCaptureSE, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_StopPsychicComboCaptureSE::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckSASGuardFire
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_CheckSASGuardFire final
{
public:
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5622[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CheckSASGuardFire) == 0x000004, "Wrong alignment on RsBattleHero_C_CheckSASGuardFire");
static_assert(sizeof(RsBattleHero_C_CheckSASGuardFire) == 0x000014, "Wrong size on RsBattleHero_C_CheckSASGuardFire");
static_assert(offsetof(RsBattleHero_C_CheckSASGuardFire, CallFunc_IsEnableSASEffect_bEnable) == 0x000000, "Member 'RsBattleHero_C_CheckSASGuardFire::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSASGuardFire, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RsBattleHero_C_CheckSASGuardFire::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSASGuardFire, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RsBattleHero_C_CheckSASGuardFire::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSASGuardFire, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RsBattleHero_C_CheckSASGuardFire::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSASGuardFire, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RsBattleHero_C_CheckSASGuardFire::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSASCoverDamageFromPlayerID
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID final
{
public:
	EPlayerID                                     CoverPlayerID;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	E_SASKind                                     CallFunc_GetSASKindFromPlayerID_SAS;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID) == 0x000004, "Wrong alignment on RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID");
static_assert(sizeof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID) == 0x000014, "Wrong size on RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CoverPlayerID) == 0x000000, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CoverPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CallFunc_GetSASKindFromPlayerID_SAS) == 0x000002, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CallFunc_GetSASKindFromPlayerID_SAS' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CallFunc_IsEnableSASEffect_bEnable) == 0x000003, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RsBattleHero_C_IsEnableSASCoverDamageFromPlayerID::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetAsyncCopyParameter
// 0x001C (0x001C - 0x0000)
struct RsBattleHero_C_GetAsyncCopyParameter final
{
public:
	bool                                          bCheckCopy;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5623[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Right;                                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Left;                                              // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetAsyncCopyParameter) == 0x000004, "Wrong alignment on RsBattleHero_C_GetAsyncCopyParameter");
static_assert(sizeof(RsBattleHero_C_GetAsyncCopyParameter) == 0x00001C, "Wrong size on RsBattleHero_C_GetAsyncCopyParameter");
static_assert(offsetof(RsBattleHero_C_GetAsyncCopyParameter, bCheckCopy) == 0x000000, "Member 'RsBattleHero_C_GetAsyncCopyParameter::bCheckCopy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAsyncCopyParameter, Right) == 0x000004, "Member 'RsBattleHero_C_GetAsyncCopyParameter::Right' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAsyncCopyParameter, Left) == 0x000010, "Member 'RsBattleHero_C_GetAsyncCopyParameter::Left' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BrainCrashEventEnd
// 0x0070 (0x0070 - 0x0000)
struct RsBattleHero_C_BrainCrashEventEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRecoverRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5624[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_SASKind>                             LActiveSasList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5625[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5626[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5627[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5628[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_BrainCrashEventEnd) == 0x000008, "Wrong alignment on RsBattleHero_C_BrainCrashEventEnd");
static_assert(sizeof(RsBattleHero_C_BrainCrashEventEnd) == 0x000070, "Wrong size on RsBattleHero_C_BrainCrashEventEnd");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Montage) == 0x000000, "Member 'RsBattleHero_C_BrainCrashEventEnd::Montage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, LRecoverRate) == 0x000008, "Member 'RsBattleHero_C_BrainCrashEventEnd::LRecoverRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, LActiveSasList) == 0x000010, "Member 'RsBattleHero_C_BrainCrashEventEnd::LActiveSasList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_int_Variable) == 0x000020, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_float_Variable) == 0x000024, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_int_Variable_1) == 0x00002C, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_int_Variable_2) == 0x000030, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Conv_IntToByte_ReturnValue) == 0x000034, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_GetValidValue_ReturnValue) == 0x00003C, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00003D, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x00003E, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00003F, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_int_Array_Index_Variable) == 0x000044, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_int_Loop_Num_Variable) == 0x000048, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'RsBattleHero_C_BrainCrashEventEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_MakeLiteralInt_ReturnValue) == 0x00005C, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'RsBattleHero_C_BrainCrashEventEnd::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BrainCrashEventEnd, K2Node_Select_Default) == 0x00006C, "Member 'RsBattleHero_C_BrainCrashEventEnd::K2Node_Select_Default' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnBrainFieldOpenStart
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_OnBrainFieldOpenStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldOpenStart_bDummy;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnBrainFieldOpenStart) == 0x000001, "Wrong alignment on RsBattleHero_C_OnBrainFieldOpenStart");
static_assert(sizeof(RsBattleHero_C_OnBrainFieldOpenStart) == 0x000002, "Wrong size on RsBattleHero_C_OnBrainFieldOpenStart");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldOpenStart, bDummy) == 0x000000, "Member 'RsBattleHero_C_OnBrainFieldOpenStart::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnBrainFieldOpenStart, CallFunc_OnBrainFieldOpenStart_bDummy) == 0x000001, "Member 'RsBattleHero_C_OnBrainFieldOpenStart::CallFunc_OnBrainFieldOpenStart_bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.UpdateAirDodgeCount
// 0x001C (0x001C - 0x0000)
struct RsBattleHero_C_UpdateAirDodgeCount final
{
public:
	int32                                         LTelepoCount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5629[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_UpdateAirDodgeCount) == 0x000004, "Wrong alignment on RsBattleHero_C_UpdateAirDodgeCount");
static_assert(sizeof(RsBattleHero_C_UpdateAirDodgeCount) == 0x00001C, "Wrong size on RsBattleHero_C_UpdateAirDodgeCount");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, LTelepoCount) == 0x000000, "Member 'RsBattleHero_C_UpdateAirDodgeCount::LTelepoCount' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, CallFunc_Max_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_UpdateAirDodgeCount::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, CallFunc_IsEnableSASEffect_bEnable) == 0x000008, "Member 'RsBattleHero_C_UpdateAirDodgeCount::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, CallFunc_IsEnableSASEffect_Param0) == 0x00000C, "Member 'RsBattleHero_C_UpdateAirDodgeCount::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, CallFunc_IsEnableSASEffect_Param1) == 0x000010, "Member 'RsBattleHero_C_UpdateAirDodgeCount::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, CallFunc_IsEnableSASEffect_Param2) == 0x000014, "Member 'RsBattleHero_C_UpdateAirDodgeCount::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_UpdateAirDodgeCount, CallFunc_IsEnableSASEffect_Param3) == 0x000018, "Member 'RsBattleHero_C_UpdateAirDodgeCount::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplySASEffectActive
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_ApplySASEffectActive final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActivate;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_ApplySASEffectActive) == 0x000001, "Wrong alignment on RsBattleHero_C_ApplySASEffectActive");
static_assert(sizeof(RsBattleHero_C_ApplySASEffectActive) == 0x000003, "Wrong size on RsBattleHero_C_ApplySASEffectActive");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectActive, Kind) == 0x000000, "Member 'RsBattleHero_C_ApplySASEffectActive::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectActive, bActivate) == 0x000001, "Member 'RsBattleHero_C_ApplySASEffectActive::bActivate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectActive, bDummy) == 0x000002, "Member 'RsBattleHero_C_ApplySASEffectActive::bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplySASEffectPassive
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_ApplySASEffectPassive final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_ApplySASEffectPassive) == 0x000001, "Wrong alignment on RsBattleHero_C_ApplySASEffectPassive");
static_assert(sizeof(RsBattleHero_C_ApplySASEffectPassive) == 0x000002, "Wrong size on RsBattleHero_C_ApplySASEffectPassive");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectPassive, Kind) == 0x000000, "Member 'RsBattleHero_C_ApplySASEffectPassive::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectPassive, bDummy) == 0x000001, "Member 'RsBattleHero_C_ApplySASEffectPassive::bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsUseAbleSASRecastGauge
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_IsUseAbleSASRecastGauge final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbUseAble;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_562A[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetButtonFromSAS_bFind;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASButton                                   CallFunc_GetButtonFromSAS_Button;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCanUse_IsCanUse;                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsUseAbleSASRecastGauge) == 0x000004, "Wrong alignment on RsBattleHero_C_IsUseAbleSASRecastGauge");
static_assert(sizeof(RsBattleHero_C_IsUseAbleSASRecastGauge) == 0x000010, "Wrong size on RsBattleHero_C_IsUseAbleSASRecastGauge");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, SasKind) == 0x000000, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, LbUseAble) == 0x000002, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::LbUseAble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, CallFunc_GetButtonFromSAS_bFind) == 0x00000A, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::CallFunc_GetButtonFromSAS_bFind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, CallFunc_GetButtonFromSAS_Button) == 0x00000B, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::CallFunc_GetButtonFromSAS_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsUseAbleSASRecastGauge, CallFunc_IsCanUse_IsCanUse) == 0x00000C, "Member 'RsBattleHero_C_IsUseAbleSASRecastGauge::CallFunc_IsCanUse_IsCanUse' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASEffectFixParam
// 0x00A8 (0x00A8 - 0x0000)
struct RsBattleHero_C_GetSASEffectFixParam final
{
public:
	E_SASKindNative                               InKind;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_562B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct F_SASParamNative>               OutFixParam;                                       // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_562C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SASParamDataNum;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       RefSASManager;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     KindBP;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_562D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct F_SASParamNative>               SasEffectFixParam;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_562E[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_562F[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSASParamDataNum_DataNum;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5630[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_SASParam                            CallFunc_GetSASParamData_Param;                    // 0x0068(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct F_SASParamNative                       K2Node_MakeStruct__SASParamNative;                 // 0x008C(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSASEffectFixParam) == 0x000008, "Wrong alignment on RsBattleHero_C_GetSASEffectFixParam");
static_assert(sizeof(RsBattleHero_C_GetSASEffectFixParam) == 0x0000A8, "Wrong size on RsBattleHero_C_GetSASEffectFixParam");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, InKind) == 0x000000, "Member 'RsBattleHero_C_GetSASEffectFixParam::InKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, OutFixParam) == 0x000008, "Member 'RsBattleHero_C_GetSASEffectFixParam::OutFixParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, ReturnValue) == 0x000018, "Member 'RsBattleHero_C_GetSASEffectFixParam::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, SASParamDataNum) == 0x00001C, "Member 'RsBattleHero_C_GetSASEffectFixParam::SASParamDataNum' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, RefSASManager) == 0x000020, "Member 'RsBattleHero_C_GetSASEffectFixParam::RefSASManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, KindBP) == 0x000028, "Member 'RsBattleHero_C_GetSASEffectFixParam::KindBP' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, SasEffectFixParam) == 0x000030, "Member 'RsBattleHero_C_GetSASEffectFixParam::SasEffectFixParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, Temp_int_Variable) == 0x000040, "Member 'RsBattleHero_C_GetSASEffectFixParam::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000044, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_Conv_IntToByte_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_GetValidValue_ReturnValue) == 0x000050, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_GetSASParamDataNum_DataNum) == 0x000054, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_GetSASParamDataNum_DataNum' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000058, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_GetSASManager_SAS_Manager) == 0x000060, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_GetSASParamData_Param) == 0x000068, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_GetSASParamData_Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, K2Node_MakeStruct__SASParamNative) == 0x00008C, "Member 'RsBattleHero_C_GetSASEffectFixParam::K2Node_MakeStruct__SASParamNative' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASEffectFixParam, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'RsBattleHero_C_GetSASEffectFixParam::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplySASEffectPassiveAll
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_ApplySASEffectPassiveAll final
{
public:
	bool                                          bLinkAbleOnly;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_ApplySASEffectPassiveAll) == 0x000001, "Wrong alignment on RsBattleHero_C_ApplySASEffectPassiveAll");
static_assert(sizeof(RsBattleHero_C_ApplySASEffectPassiveAll) == 0x000002, "Wrong size on RsBattleHero_C_ApplySASEffectPassiveAll");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectPassiveAll, bLinkAbleOnly) == 0x000000, "Member 'RsBattleHero_C_ApplySASEffectPassiveAll::bLinkAbleOnly' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplySASEffectPassiveAll, bDummy) == 0x000001, "Member 'RsBattleHero_C_ApplySASEffectPassiveAll::bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckSasGuardElectric
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_CheckSasGuardElectric final
{
public:
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5631[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CheckSasGuardElectric) == 0x000004, "Wrong alignment on RsBattleHero_C_CheckSasGuardElectric");
static_assert(sizeof(RsBattleHero_C_CheckSasGuardElectric) == 0x000014, "Wrong size on RsBattleHero_C_CheckSasGuardElectric");
static_assert(offsetof(RsBattleHero_C_CheckSasGuardElectric, CallFunc_IsEnableSASEffect_bEnable) == 0x000000, "Member 'RsBattleHero_C_CheckSasGuardElectric::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSasGuardElectric, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RsBattleHero_C_CheckSasGuardElectric::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSasGuardElectric, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RsBattleHero_C_CheckSasGuardElectric::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSasGuardElectric, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RsBattleHero_C_CheckSasGuardElectric::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckSasGuardElectric, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RsBattleHero_C_CheckSasGuardElectric::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SASCancelEffectAndSE
// 0x0080 (0x0080 - 0x0000)
struct RsBattleHero_C_SASCancelEffectAndSE final
{
public:
	bool                                          bEffect;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSE;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCancelAll;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5632[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LSocketList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5633[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5634[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5635[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_2;       // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5636[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SASCancelEffectAndSE) == 0x000008, "Wrong alignment on RsBattleHero_C_SASCancelEffectAndSE");
static_assert(sizeof(RsBattleHero_C_SASCancelEffectAndSE) == 0x000080, "Wrong size on RsBattleHero_C_SASCancelEffectAndSE");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, bEffect) == 0x000000, "Member 'RsBattleHero_C_SASCancelEffectAndSE::bEffect' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, bSE) == 0x000001, "Member 'RsBattleHero_C_SASCancelEffectAndSE::bSE' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, bCancelAll) == 0x000002, "Member 'RsBattleHero_C_SASCancelEffectAndSE::bCancelAll' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, LSocketList) == 0x000008, "Member 'RsBattleHero_C_SASCancelEffectAndSE::LSocketList' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RsBattleHero_C_SASCancelEffectAndSE::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'RsBattleHero_C_SASCancelEffectAndSE::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_IsPlayerStatus_Result) == 0x000020, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_IsControlAI_bAI) == 0x000021, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000048, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, K2Node_MakeArray_Array) == 0x000050, "Member 'RsBattleHero_C_SASCancelEffectAndSE::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_SpawnEmitterAttached_ReturnValue_2) == 0x000068, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_SpawnEmitterAttached_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'RsBattleHero_C_SASCancelEffectAndSE::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSE, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'RsBattleHero_C_SASCancelEffectAndSE::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SasRecastRecoverEffect
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_SasRecastRecoverEffect final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_SasRecastRecoverEffect) == 0x000004, "Wrong alignment on RsBattleHero_C_SasRecastRecoverEffect");
static_assert(sizeof(RsBattleHero_C_SasRecastRecoverEffect) == 0x000004, "Wrong size on RsBattleHero_C_SasRecastRecoverEffect");
static_assert(offsetof(RsBattleHero_C_SasRecastRecoverEffect, DelayTime) == 0x000000, "Member 'RsBattleHero_C_SasRecastRecoverEffect::DelayTime' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.kpiGameOver
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_KpiGameOver final
{
public:
	int32                                         KpiParam;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBrainFieldState                        CallFunc_GetBrainFieldState_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_KpiGameOver) == 0x000004, "Wrong alignment on RsBattleHero_C_KpiGameOver");
static_assert(sizeof(RsBattleHero_C_KpiGameOver) == 0x000008, "Wrong size on RsBattleHero_C_KpiGameOver");
static_assert(offsetof(RsBattleHero_C_KpiGameOver, KpiParam) == 0x000000, "Member 'RsBattleHero_C_KpiGameOver::KpiParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_KpiGameOver, CallFunc_IsPlayerStatus_Result) == 0x000004, "Member 'RsBattleHero_C_KpiGameOver::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_KpiGameOver, CallFunc_GetBrainFieldState_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_KpiGameOver::CallFunc_GetBrainFieldState_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_KpiGameOver, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'RsBattleHero_C_KpiGameOver::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CancelActiveSAS
// 0x0038 (0x0038 - 0x0000)
struct RsBattleHero_C_CancelActiveSAS final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CancelSASCost;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5637[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5638[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5639[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CancelSAS_Success;                        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CancelActiveSAS) == 0x000008, "Wrong alignment on RsBattleHero_C_CancelActiveSAS");
static_assert(sizeof(RsBattleHero_C_CancelActiveSAS) == 0x000038, "Wrong size on RsBattleHero_C_CancelActiveSAS");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, SasKind) == 0x000000, "Member 'RsBattleHero_C_CancelActiveSAS::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CancelSASCost) == 0x000001, "Member 'RsBattleHero_C_CancelActiveSAS::CancelSASCost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_GetSASManager_SAS_Manager) == 0x000008, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, K2Node_DynamicCast_AsBPI_SASManager) == 0x000018, "Member 'RsBattleHero_C_CancelActiveSAS::K2Node_DynamicCast_AsBPI_SASManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RsBattleHero_C_CancelActiveSAS::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_Conv_IntToByte_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_IsActiveSAS_ReturnValue) == 0x000031, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_IsActiveSAS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_GetValidValue_ReturnValue) == 0x000032, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CancelActiveSAS, CallFunc_CancelSAS_Success) == 0x000033, "Member 'RsBattleHero_C_CancelActiveSAS::CallFunc_CancelSAS_Success' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASRecastAndActiveGaugeRate
// 0x001C (0x001C - 0x0000)
struct RsBattleHero_C_GetSASRecastAndActiveGaugeRate final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_563A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SASGaugeRate;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbActive;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_563B[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRate;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsRate_Rate;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentGaugeRate_SASGaugeRate;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_forButton_IsSAS;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetSASRecastAndActiveGaugeRate");
static_assert(sizeof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate) == 0x00001C, "Wrong size on RsBattleHero_C_GetSASRecastAndActiveGaugeRate");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, SASButton) == 0x000000, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, SASGaugeRate) == 0x000004, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, IsActive) == 0x000008, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::IsActive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, LbActive) == 0x000009, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::LbActive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, LRate) == 0x00000C, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::LRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, CallFunc_GetActiveSecondsRate_Rate) == 0x000010, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::CallFunc_GetActiveSecondsRate_Rate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, CallFunc_GetCurrentGaugeRate_SASGaugeRate) == 0x000014, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::CallFunc_GetCurrentGaugeRate_SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASRecastAndActiveGaugeRate, CallFunc_IsActiveSAS_forButton_IsSAS) == 0x000018, "Member 'RsBattleHero_C_GetSASRecastAndActiveGaugeRate::CallFunc_IsActiveSAS_forButton_IsSAS' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SubCombinationVisionCost
// 0x0034 (0x0034 - 0x0000)
struct RsBattleHero_C_SubCombinationVisionCost final
{
public:
	EPlayerID                                     HologramPlayerID;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_563C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LCost;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     LbSasKind;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASKindFromPlayerID_SAS;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_563D[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_RecastSec;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_ActivationSec;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCombinationVisionCost_Cost;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentGaugeRateFromSAS_SASGaugeRate;  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetButtonFromSAS_bFind;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASButton                                   CallFunc_GetButtonFromSAS_Button;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_563E[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SubCombinationVisionCost) == 0x000004, "Wrong alignment on RsBattleHero_C_SubCombinationVisionCost");
static_assert(sizeof(RsBattleHero_C_SubCombinationVisionCost) == 0x000034, "Wrong size on RsBattleHero_C_SubCombinationVisionCost");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, HologramPlayerID) == 0x000000, "Member 'RsBattleHero_C_SubCombinationVisionCost::HologramPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, bDummy) == 0x000001, "Member 'RsBattleHero_C_SubCombinationVisionCost::bDummy' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, LCost) == 0x000004, "Member 'RsBattleHero_C_SubCombinationVisionCost::LCost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, LbSasKind) == 0x000008, "Member 'RsBattleHero_C_SubCombinationVisionCost::LbSasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetSASKindFromPlayerID_SAS) == 0x000009, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetSASKindFromPlayerID_SAS' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetSASTimeParameter_RecastSec) == 0x000010, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetSASTimeParameter_RecastSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetSASTimeParameter_ActivationSec) == 0x000014, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetSASTimeParameter_ActivationSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetCombinationVisionCost_Cost) == 0x00001C, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetCombinationVisionCost_Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetCurrentGaugeRateFromSAS_SASGaugeRate) == 0x000020, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetCurrentGaugeRateFromSAS_SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetButtonFromSAS_bFind) == 0x000024, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetButtonFromSAS_bFind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_GetButtonFromSAS_Button) == 0x000025, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_GetButtonFromSAS_Button' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubCombinationVisionCost, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000030, "Member 'RsBattleHero_C_SubCombinationVisionCost::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.PayMapGimmckCost
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_PayMapGimmckCost final
{
public:
	float                                         CallFunc_CalcPsychicCost_Cost;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_PayMapGimmckCost) == 0x000004, "Wrong alignment on RsBattleHero_C_PayMapGimmckCost");
static_assert(sizeof(RsBattleHero_C_PayMapGimmckCost) == 0x000008, "Wrong size on RsBattleHero_C_PayMapGimmckCost");
static_assert(offsetof(RsBattleHero_C_PayMapGimmckCost, CallFunc_CalcPsychicCost_Cost) == 0x000000, "Member 'RsBattleHero_C_PayMapGimmckCost::CallFunc_CalcPsychicCost_Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_PayMapGimmckCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_PayMapGimmckCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ChargeSASRemainTime
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_ChargeSASRemainTime final
{
public:
	float                                         ChargeRate;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ChargeSASRemainTime) == 0x000004, "Wrong alignment on RsBattleHero_C_ChargeSASRemainTime");
static_assert(sizeof(RsBattleHero_C_ChargeSASRemainTime) == 0x000004, "Wrong size on RsBattleHero_C_ChargeSASRemainTime");
static_assert(offsetof(RsBattleHero_C_ChargeSASRemainTime, ChargeRate) == 0x000000, "Member 'RsBattleHero_C_ChargeSASRemainTime::ChargeRate' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckCaptureVibrationEnd
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_CheckCaptureVibrationEnd final
{
public:
	bool                                          LbStopVibration;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNormalObjectCapture_return;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckCaptureVibrationEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_CheckCaptureVibrationEnd");
static_assert(sizeof(RsBattleHero_C_CheckCaptureVibrationEnd) == 0x000004, "Wrong size on RsBattleHero_C_CheckCaptureVibrationEnd");
static_assert(offsetof(RsBattleHero_C_CheckCaptureVibrationEnd, LbStopVibration) == 0x000000, "Member 'RsBattleHero_C_CheckCaptureVibrationEnd::LbStopVibration' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureVibrationEnd, CallFunc_GetCapturePsychicObjectState_State) == 0x000001, "Member 'RsBattleHero_C_CheckCaptureVibrationEnd::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureVibrationEnd, CallFunc_IsNormalObjectCapture_return) == 0x000002, "Member 'RsBattleHero_C_CheckCaptureVibrationEnd::CallFunc_IsNormalObjectCapture_return' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckCaptureVibrationEnd, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'RsBattleHero_C_CheckCaptureVibrationEnd::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnCancelSASCutin
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_OnCancelSASCutin final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_563F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnCancelSASCutin) == 0x000004, "Wrong alignment on RsBattleHero_C_OnCancelSASCutin");
static_assert(sizeof(RsBattleHero_C_OnCancelSASCutin) == 0x000018, "Wrong size on RsBattleHero_C_OnCancelSASCutin");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, SasKind) == 0x000000, "Member 'RsBattleHero_C_OnCancelSASCutin::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RsBattleHero_C_OnCancelSASCutin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RsBattleHero_C_OnCancelSASCutin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_OnCancelSASCutin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_OnCancelSASCutin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_OnCancelSASCutin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, CallFunc_Array_RemoveItem_ReturnValue) == 0x000015, "Member 'RsBattleHero_C_OnCancelSASCutin::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnCancelSASCutin, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000016, "Member 'RsBattleHero_C_OnCancelSASCutin::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSasSelectSlow
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_IsEnableSasSelectSlow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASInput_bEnable;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableSasSelectSlow) == 0x000001, "Wrong alignment on RsBattleHero_C_IsEnableSasSelectSlow");
static_assert(sizeof(RsBattleHero_C_IsEnableSasSelectSlow) == 0x000002, "Wrong size on RsBattleHero_C_IsEnableSasSelectSlow");
static_assert(offsetof(RsBattleHero_C_IsEnableSasSelectSlow, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_IsEnableSasSelectSlow::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasSelectSlow, CallFunc_IsEnableSASInput_bEnable) == 0x000001, "Member 'RsBattleHero_C_IsEnableSasSelectSlow::CallFunc_IsEnableSASInput_bEnable' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.TelepoComboSettingCoordinate
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_TelepoComboSettingCoordinate final
{
public:
	bool                                          bEnableAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPrevEnableAttack;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableAttackAir;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPrevEnableAttackAir;                              // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5640[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetComboCount_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetComboCount_ReturnValue_1;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5641[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetComboCount_ReturnValue_2;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_TelepoComboSettingCoordinate) == 0x000004, "Wrong alignment on RsBattleHero_C_TelepoComboSettingCoordinate");
static_assert(sizeof(RsBattleHero_C_TelepoComboSettingCoordinate) == 0x000028, "Wrong size on RsBattleHero_C_TelepoComboSettingCoordinate");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, bEnableAttack) == 0x000000, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::bEnableAttack' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, bPrevEnableAttack) == 0x000001, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::bPrevEnableAttack' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, bEnableAttackAir) == 0x000002, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::bEnableAttackAir' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, bPrevEnableAttackAir) == 0x000003, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::bPrevEnableAttackAir' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x000005, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GetComboCount_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GetComboCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GetComboCount_ReturnValue_1) == 0x00000C, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GetComboCount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000019, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GetComboCount_ReturnValue_2) == 0x00001C, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GetComboCount_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000020, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x000024, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x000025, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000026, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_TelepoComboSettingCoordinate, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000027, "Member 'RsBattleHero_C_TelepoComboSettingCoordinate::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SASCancelEffectAndSEInterface
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_SASCancelEffectAndSEInterface final
{
public:
	bool                                          bEffect;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSE;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SASCancelEffectAndSEInterface) == 0x000001, "Wrong alignment on RsBattleHero_C_SASCancelEffectAndSEInterface");
static_assert(sizeof(RsBattleHero_C_SASCancelEffectAndSEInterface) == 0x000003, "Wrong size on RsBattleHero_C_SASCancelEffectAndSEInterface");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSEInterface, bEffect) == 0x000000, "Member 'RsBattleHero_C_SASCancelEffectAndSEInterface::bEffect' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSEInterface, bSE) == 0x000001, "Member 'RsBattleHero_C_SASCancelEffectAndSEInterface::bSE' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SASCancelEffectAndSEInterface, bDummy) == 0x000002, "Member 'RsBattleHero_C_SASCancelEffectAndSEInterface::bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.EventManagerStart
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_EventManagerStart final
{
public:
	bool                                          EnableTick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Visibility;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerStart_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_EventManagerStart) == 0x000001, "Wrong alignment on RsBattleHero_C_EventManagerStart");
static_assert(sizeof(RsBattleHero_C_EventManagerStart) == 0x000004, "Wrong size on RsBattleHero_C_EventManagerStart");
static_assert(offsetof(RsBattleHero_C_EventManagerStart, EnableTick) == 0x000000, "Member 'RsBattleHero_C_EventManagerStart::EnableTick' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventManagerStart, Visibility) == 0x000001, "Member 'RsBattleHero_C_EventManagerStart::Visibility' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventManagerStart, ReturnValue) == 0x000002, "Member 'RsBattleHero_C_EventManagerStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EventManagerStart, CallFunc_EventManagerStart_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_EventManagerStart::CallFunc_EventManagerStart_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.EndEnpcSASDirectionTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_EndEnpcSASDirectionTimeDilation final
{
public:
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_EndEnpcSASDirectionTimeDilation) == 0x000008, "Wrong alignment on RsBattleHero_C_EndEnpcSASDirectionTimeDilation");
static_assert(sizeof(RsBattleHero_C_EndEnpcSASDirectionTimeDilation) == 0x000010, "Wrong size on RsBattleHero_C_EndEnpcSASDirectionTimeDilation");
static_assert(offsetof(RsBattleHero_C_EndEnpcSASDirectionTimeDilation, CallFunc_GetGameSystemManager_Manager) == 0x000000, "Member 'RsBattleHero_C_EndEnpcSASDirectionTimeDilation::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndEnpcSASDirectionTimeDilation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_EndEnpcSASDirectionTimeDilation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndEnpcSASDirectionTimeDilation, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000009, "Member 'RsBattleHero_C_EndEnpcSASDirectionTimeDilation::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsManualHologramAttack
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_IsManualHologramAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsManualMode_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsManualHologramAttack) == 0x000001, "Wrong alignment on RsBattleHero_C_IsManualHologramAttack");
static_assert(sizeof(RsBattleHero_C_IsManualHologramAttack) == 0x000003, "Wrong size on RsBattleHero_C_IsManualHologramAttack");
static_assert(offsetof(RsBattleHero_C_IsManualHologramAttack, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_IsManualHologramAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsManualHologramAttack, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsManualHologramAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsManualHologramAttack, CallFunc_IsManualMode_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_IsManualHologramAttack::CallFunc_IsManualMode_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetManualHologramAttackPlayerID
// 0x003C (0x003C - 0x0000)
struct RsBattleHero_C_GetManualHologramAttackPlayerID final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     LSASKind;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5642[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5643[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_ActiveSeconds;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_MaxTime;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5644[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5645[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetManualHologramAttackPlayerID) == 0x000004, "Wrong alignment on RsBattleHero_C_GetManualHologramAttackPlayerID");
static_assert(sizeof(RsBattleHero_C_GetManualHologramAttackPlayerID) == 0x00003C, "Wrong size on RsBattleHero_C_GetManualHologramAttackPlayerID");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, PlayerId) == 0x000000, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, LSASKind) == 0x000001, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::LSASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000010, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_Less_IntInt_ReturnValue) == 0x000011, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_GetActiveSecondsFromKind_ActiveSeconds) == 0x000018, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_GetActiveSecondsFromKind_ActiveSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_GetActiveSecondsFromKind_MaxTime) == 0x00001C, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_GetActiveSecondsFromKind_MaxTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_IsEnableSASEffect_bEnable) == 0x000020, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_IsEnableSASEffect_Param0) == 0x000024, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_IsEnableSASEffect_Param1) == 0x000028, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_IsEnableSASEffect_Param2) == 0x00002C, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_IsEnableSASEffect_Param3) == 0x000030, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000034, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetManualHologramAttackPlayerID, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RsBattleHero_C_GetManualHologramAttackPlayerID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnNexusDriveSasBegin
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_OnNexusDriveSasBegin final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnNexusDriveSasBegin) == 0x000001, "Wrong alignment on RsBattleHero_C_OnNexusDriveSasBegin");
static_assert(sizeof(RsBattleHero_C_OnNexusDriveSasBegin) == 0x000002, "Wrong size on RsBattleHero_C_OnNexusDriveSasBegin");
static_assert(offsetof(RsBattleHero_C_OnNexusDriveSasBegin, Kind) == 0x000000, "Member 'RsBattleHero_C_OnNexusDriveSasBegin::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnNexusDriveSasBegin, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'RsBattleHero_C_OnNexusDriveSasBegin::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnNexusDriveSasEnd
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_OnNexusDriveSasEnd final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnNexusDriveSasEnd) == 0x000001, "Wrong alignment on RsBattleHero_C_OnNexusDriveSasEnd");
static_assert(sizeof(RsBattleHero_C_OnNexusDriveSasEnd) == 0x000002, "Wrong size on RsBattleHero_C_OnNexusDriveSasEnd");
static_assert(offsetof(RsBattleHero_C_OnNexusDriveSasEnd, Kind) == 0x000000, "Member 'RsBattleHero_C_OnNexusDriveSasEnd::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_OnNexusDriveSasEnd, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'RsBattleHero_C_OnNexusDriveSasEnd::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.OnNexusDriveActivate
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_OnNexusDriveActivate final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_OnNexusDriveActivate) == 0x000001, "Wrong alignment on RsBattleHero_C_OnNexusDriveActivate");
static_assert(sizeof(RsBattleHero_C_OnNexusDriveActivate) == 0x000001, "Wrong size on RsBattleHero_C_OnNexusDriveActivate");
static_assert(offsetof(RsBattleHero_C_OnNexusDriveActivate, bActivate) == 0x000000, "Member 'RsBattleHero_C_OnNexusDriveActivate::bActivate' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveHardenSubTimeRate
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_GetNexusDriveHardenSubTimeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveHardenSubTimeRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetNexusDriveHardenSubTimeRate");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveHardenSubTimeRate) == 0x000008, "Wrong size on RsBattleHero_C_GetNexusDriveHardenSubTimeRate");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveHardenSubTimeRate, Rate) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveHardenSubTimeRate::Rate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveHardenSubTimeRate, CallFunc_IsControlAI_bAI) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveHardenSubTimeRate::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveHardenSubTimeRate, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_GetNexusDriveHardenSubTimeRate::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetAnimNotifyCondition
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_GetAnimNotifyCondition final
{
public:
	int32                                         ConditionNo;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               LSASKind;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbResult;                                          // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               Temp_byte_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimNotifyCondition_Result;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSasAny_ReturnValue;     // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetAnimNotifyCondition) == 0x000004, "Wrong alignment on RsBattleHero_C_GetAnimNotifyCondition");
static_assert(sizeof(RsBattleHero_C_GetAnimNotifyCondition) == 0x000014, "Wrong size on RsBattleHero_C_GetAnimNotifyCondition");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, ConditionNo) == 0x000000, "Member 'RsBattleHero_C_GetAnimNotifyCondition::ConditionNo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, Result) == 0x000004, "Member 'RsBattleHero_C_GetAnimNotifyCondition::Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, LSASKind) == 0x000005, "Member 'RsBattleHero_C_GetAnimNotifyCondition::LSASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, LbResult) == 0x000006, "Member 'RsBattleHero_C_GetAnimNotifyCondition::LbResult' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, Temp_byte_Variable) == 0x000007, "Member 'RsBattleHero_C_GetAnimNotifyCondition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, CallFunc_GetAnimNotifyCondition_Result) == 0x000008, "Member 'RsBattleHero_C_GetAnimNotifyCondition::CallFunc_GetAnimNotifyCondition_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, Temp_byte_Variable_1) == 0x000009, "Member 'RsBattleHero_C_GetAnimNotifyCondition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, Temp_bool_Variable) == 0x00000A, "Member 'RsBattleHero_C_GetAnimNotifyCondition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, CallFunc_GetPlayerID_ReturnValue) == 0x00000B, "Member 'RsBattleHero_C_GetAnimNotifyCondition::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_GetAnimNotifyCondition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, K2Node_Select_Default) == 0x00000D, "Member 'RsBattleHero_C_GetAnimNotifyCondition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x00000E, "Member 'RsBattleHero_C_GetAnimNotifyCondition::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, CallFunc_IsEnableNexusDriveSasAny_ReturnValue) == 0x00000F, "Member 'RsBattleHero_C_GetAnimNotifyCondition::CallFunc_IsEnableNexusDriveSasAny_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetAnimNotifyCondition, K2Node_SwitchInteger_CmpSuccess) == 0x000010, "Member 'RsBattleHero_C_GetAnimNotifyCondition::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetManualAssaultVisionSasGaugeRate
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_GetManualAssaultVisionSasGaugeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetManualAssaultVisionSasGaugeRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetManualAssaultVisionSasGaugeRate");
static_assert(sizeof(RsBattleHero_C_GetManualAssaultVisionSasGaugeRate) == 0x000004, "Wrong size on RsBattleHero_C_GetManualAssaultVisionSasGaugeRate");
static_assert(offsetof(RsBattleHero_C_GetManualAssaultVisionSasGaugeRate, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_GetManualAssaultVisionSasGaugeRate::ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ApplyWireAndSasCableColor
// 0x0078 (0x0078 - 0x0000)
struct RsBattleHero_C_ApplyWireAndSasCableColor final
{
public:
	bool                                          LbChangeColor;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     LPlayerID;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWireNeonPlayerState                          Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5646[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5647[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5648[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5649[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetAllSasCodeList_NormalCode;             // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_564A[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_564B[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_564C[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWireNeonPlayerState                          Temp_byte_Variable_1;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWireNeonPlayerState                          Temp_byte_Variable_2;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564D[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDrive_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWireNeonPlayerState                          K2Node_Select_Default;                             // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWireNeonPlayerState                          K2Node_Select_Default_1;                           // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableCrashVision_ReturnValue;          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ApplyWireAndSasCableColor) == 0x000008, "Wrong alignment on RsBattleHero_C_ApplyWireAndSasCableColor");
static_assert(sizeof(RsBattleHero_C_ApplyWireAndSasCableColor) == 0x000078, "Wrong size on RsBattleHero_C_ApplyWireAndSasCableColor");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, LbChangeColor) == 0x000000, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::LbChangeColor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, LPlayerID) == 0x000001, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::LPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_bool_Variable) == 0x000002, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_byte_Variable) == 0x000003, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_bool_Variable_1) == 0x000008, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_int_Loop_Num_Variable_1) == 0x000024, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_GetAllSasCodeList_NormalCode) == 0x000030, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_GetAllSasCodeList_NormalCode' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_IsPlayerStatus_Result) == 0x000048, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_IsDriveMode_bDrive) == 0x000049, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_int_Loop_Counter_Variable_1) == 0x00004C, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_byte_Variable_1) == 0x000058, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, Temp_byte_Variable_2) == 0x000059, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_GetUserParamManager_UserParamManager) == 0x000060, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_IsEnableNexusDrive_ReturnValue) == 0x000068, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_IsEnableNexusDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, K2Node_Select_Default) == 0x000069, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, K2Node_Select_Default_1) == 0x00006A, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_IsEnableCrashVision_ReturnValue) == 0x00006B, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_IsEnableCrashVision_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_Array_Length_ReturnValue_1) == 0x00006C, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_ApplyWireAndSasCableColor, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000070, "Member 'RsBattleHero_C_ApplyWireAndSasCableColor::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsNexusDriveSeeThroughBestJustDodge
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge final
{
public:
	bool                                          bBestJustDodge;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNexusDriveBestJustDodge_bBestJustDodge; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge) == 0x000001, "Wrong alignment on RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge");
static_assert(sizeof(RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge) == 0x000002, "Wrong size on RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge");
static_assert(offsetof(RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge, bBestJustDodge) == 0x000000, "Member 'RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge::bBestJustDodge' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge, CallFunc_IsNexusDriveBestJustDodge_bBestJustDodge) == 0x000001, "Member 'RsBattleHero_C_IsNexusDriveSeeThroughBestJustDodge::CallFunc_IsNexusDriveBestJustDodge_bBestJustDodge' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSasCableExColor
// 0x0038 (0x0038 - 0x0000)
struct RsBattleHero_C_IsEnableSasCableExColor final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     LSasPlayerID;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564E[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_564F[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID_1;        // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5650[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5651[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5652[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDrive_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableCrashVision_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDrive_ReturnValue_1;         // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableCrashVision_ReturnValue_1;        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnableSasCableExColor) == 0x000008, "Wrong alignment on RsBattleHero_C_IsEnableSasCableExColor");
static_assert(sizeof(RsBattleHero_C_IsEnableSasCableExColor) == 0x000038, "Wrong size on RsBattleHero_C_IsEnableSasCableExColor");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, SasKind) == 0x000000, "Member 'RsBattleHero_C_IsEnableSasCableExColor::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, bEnable) == 0x000001, "Member 'RsBattleHero_C_IsEnableSasCableExColor::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, LSasPlayerID) == 0x000002, "Member 'RsBattleHero_C_IsEnableSasCableExColor::LSasPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RsBattleHero_C_IsEnableSasCableExColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RsBattleHero_C_IsEnableSasCableExColor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'RsBattleHero_C_IsEnableSasCableExColor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000014, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_GetPlayerIDFromSASKind_PlayerID_1) == 0x000016, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_GetPlayerIDFromSASKind_PlayerID_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'RsBattleHero_C_IsEnableSasCableExColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000025, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_IsEnableNexusDrive_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_IsEnableNexusDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_IsEnableCrashVision_ReturnValue) == 0x000031, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_IsEnableCrashVision_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_IsEnableNexusDrive_ReturnValue_1) == 0x000032, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_IsEnableNexusDrive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_IsEnableCrashVision_ReturnValue_1) == 0x000033, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_IsEnableCrashVision_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSasCableExColor, CallFunc_IsControlAI_bAI) == 0x000034, "Member 'RsBattleHero_C_IsEnableSasCableExColor::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SetChargeLevelForNexusDrive
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_SetChargeLevelForNexusDrive final
{
public:
	int32                                         ChargeLevel;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SetChargeLevelForNexusDrive) == 0x000004, "Wrong alignment on RsBattleHero_C_SetChargeLevelForNexusDrive");
static_assert(sizeof(RsBattleHero_C_SetChargeLevelForNexusDrive) == 0x000008, "Wrong size on RsBattleHero_C_SetChargeLevelForNexusDrive");
static_assert(offsetof(RsBattleHero_C_SetChargeLevelForNexusDrive, ChargeLevel) == 0x000000, "Member 'RsBattleHero_C_SetChargeLevelForNexusDrive::ChargeLevel' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SetChargeLevelForNexusDrive, bDummy) == 0x000004, "Member 'RsBattleHero_C_SetChargeLevelForNexusDrive::bDummy' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.ForceEndSeeThroughPostProcess
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_ForceEndSeeThroughPostProcess final
{
public:
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_ForceEndSeeThroughPostProcess) == 0x000008, "Wrong alignment on RsBattleHero_C_ForceEndSeeThroughPostProcess");
static_assert(sizeof(RsBattleHero_C_ForceEndSeeThroughPostProcess) == 0x000008, "Wrong size on RsBattleHero_C_ForceEndSeeThroughPostProcess");
static_assert(offsetof(RsBattleHero_C_ForceEndSeeThroughPostProcess, CallFunc_GetPostProcessManager_Manager) == 0x000000, "Member 'RsBattleHero_C_ForceEndSeeThroughPostProcess::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.BeginPhotoMode
// 0x0060 (0x0060 - 0x0000)
struct RsBattleHero_C_BeginPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5653[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5654[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectSearchInterface> CallFunc_SetEffectFocus_self_CastInput;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEffectFocus_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5655[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectSearchInterface> CallFunc_SetEffectFocus_self_CastInput_1;          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEffectFocus_ReturnValue_1;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5656[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectSearchInterface> CallFunc_SetEffectFocus_self_CastInput_2;          // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEffectFocus_ReturnValue_2;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginPhotoMode_ReturnValue;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_BeginPhotoMode) == 0x000008, "Wrong alignment on RsBattleHero_C_BeginPhotoMode");
static_assert(sizeof(RsBattleHero_C_BeginPhotoMode) == 0x000060, "Wrong size on RsBattleHero_C_BeginPhotoMode");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_BeginPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_SetEffectFocus_self_CastInput) == 0x000018, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_SetEffectFocus_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_SetEffectFocus_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_SetEffectFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_SetEffectFocus_self_CastInput_1) == 0x000030, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_SetEffectFocus_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_SetEffectFocus_ReturnValue_1) == 0x000040, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_SetEffectFocus_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_IsValid_ReturnValue_2) == 0x000041, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_SetEffectFocus_self_CastInput_2) == 0x000048, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_SetEffectFocus_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_SetEffectFocus_ReturnValue_2) == 0x000058, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_SetEffectFocus_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_BeginPhotoMode, CallFunc_BeginPhotoMode_ReturnValue) == 0x000059, "Member 'RsBattleHero_C_BeginPhotoMode::CallFunc_BeginPhotoMode_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.EndPhotoMode
// 0x0060 (0x0060 - 0x0000)
struct RsBattleHero_C_EndPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5657[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5658[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectSearchInterface> CallFunc_SetEffectFocus_self_CastInput;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEffectFocus_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5659[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectSearchInterface> CallFunc_SetEffectFocus_self_CastInput_1;          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEffectFocus_ReturnValue_1;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_565A[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectSearchInterface> CallFunc_SetEffectFocus_self_CastInput_2;          // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEffectFocus_ReturnValue_2;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndPhotoMode_ReturnValue;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_EndPhotoMode) == 0x000008, "Wrong alignment on RsBattleHero_C_EndPhotoMode");
static_assert(sizeof(RsBattleHero_C_EndPhotoMode) == 0x000060, "Wrong size on RsBattleHero_C_EndPhotoMode");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_EndPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_SetEffectFocus_self_CastInput) == 0x000018, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_SetEffectFocus_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_SetEffectFocus_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_SetEffectFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_SetEffectFocus_self_CastInput_1) == 0x000030, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_SetEffectFocus_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_SetEffectFocus_ReturnValue_1) == 0x000040, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_SetEffectFocus_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_IsValid_ReturnValue_2) == 0x000041, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_SetEffectFocus_self_CastInput_2) == 0x000048, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_SetEffectFocus_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_SetEffectFocus_ReturnValue_2) == 0x000058, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_SetEffectFocus_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_EndPhotoMode, CallFunc_EndPhotoMode_ReturnValue) == 0x000059, "Member 'RsBattleHero_C_EndPhotoMode::CallFunc_EndPhotoMode_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsActiveNexusDriveSas
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_IsActiveNexusDriveSas final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsActiveNexusDriveSas) == 0x000001, "Wrong alignment on RsBattleHero_C_IsActiveNexusDriveSas");
static_assert(sizeof(RsBattleHero_C_IsActiveNexusDriveSas) == 0x000003, "Wrong size on RsBattleHero_C_IsActiveNexusDriveSas");
static_assert(offsetof(RsBattleHero_C_IsActiveNexusDriveSas, Kind) == 0x000000, "Member 'RsBattleHero_C_IsActiveNexusDriveSas::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveNexusDriveSas, ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsActiveNexusDriveSas::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveNexusDriveSas, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_IsActiveNexusDriveSas::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveMetal_DamageRate
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_GetNexusDriveMetal_DamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveMetal_DamageRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetNexusDriveMetal_DamageRate");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveMetal_DamageRate) == 0x000008, "Wrong size on RsBattleHero_C_GetNexusDriveMetal_DamageRate");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveMetal_DamageRate, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveMetal_DamageRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveMetal_DamageRate, CallFunc_IsControlAI_bAI) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveMetal_DamageRate::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveMetal_DamageRate, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_GetNexusDriveMetal_DamageRate::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveAccelerator_DamageRate
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_GetNexusDriveAccelerator_DamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveAccelerator_DamageRate) == 0x000004, "Wrong alignment on RsBattleHero_C_GetNexusDriveAccelerator_DamageRate");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveAccelerator_DamageRate) == 0x000008, "Wrong size on RsBattleHero_C_GetNexusDriveAccelerator_DamageRate");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveAccelerator_DamageRate, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveAccelerator_DamageRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveAccelerator_DamageRate, CallFunc_IsControlAI_bAI) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveAccelerator_DamageRate::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveAccelerator_DamageRate, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_GetNexusDriveAccelerator_DamageRate::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsActiveNexusDriveAny
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_IsActiveNexusDriveAny final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSasAny_ReturnValue;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsActiveNexusDriveAny) == 0x000001, "Wrong alignment on RsBattleHero_C_IsActiveNexusDriveAny");
static_assert(sizeof(RsBattleHero_C_IsActiveNexusDriveAny) == 0x000002, "Wrong size on RsBattleHero_C_IsActiveNexusDriveAny");
static_assert(offsetof(RsBattleHero_C_IsActiveNexusDriveAny, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_IsActiveNexusDriveAny::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveNexusDriveAny, CallFunc_IsEnableNexusDriveSasAny_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsActiveNexusDriveAny::CallFunc_IsEnableNexusDriveSasAny_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsRegisterNpcDriveForNexusDrive
// 0x0003 (0x0003 - 0x0000)
struct RsBattleHero_C_IsRegisterNpcDriveForNexusDrive final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRegisterActiveDriveNpc_ReturnValue;     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsRegisterNpcDriveForNexusDrive) == 0x000001, "Wrong alignment on RsBattleHero_C_IsRegisterNpcDriveForNexusDrive");
static_assert(sizeof(RsBattleHero_C_IsRegisterNpcDriveForNexusDrive) == 0x000003, "Wrong size on RsBattleHero_C_IsRegisterNpcDriveForNexusDrive");
static_assert(offsetof(RsBattleHero_C_IsRegisterNpcDriveForNexusDrive, PlayerId) == 0x000000, "Member 'RsBattleHero_C_IsRegisterNpcDriveForNexusDrive::PlayerId' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsRegisterNpcDriveForNexusDrive, ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsRegisterNpcDriveForNexusDrive::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsRegisterNpcDriveForNexusDrive, CallFunc_IsRegisterActiveDriveNpc_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_IsRegisterNpcDriveForNexusDrive::CallFunc_IsRegisterActiveDriveNpc_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsRegisterActiveSasKindAny
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_IsRegisterActiveSasKindAny final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRegisterActiveSasKindAny_ReturnValue;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsRegisterActiveSasKindAny) == 0x000001, "Wrong alignment on RsBattleHero_C_IsRegisterActiveSasKindAny");
static_assert(sizeof(RsBattleHero_C_IsRegisterActiveSasKindAny) == 0x000002, "Wrong size on RsBattleHero_C_IsRegisterActiveSasKindAny");
static_assert(offsetof(RsBattleHero_C_IsRegisterActiveSasKindAny, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_IsRegisterActiveSasKindAny::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsRegisterActiveSasKindAny, CallFunc_IsRegisterActiveSasKindAny_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsRegisterActiveSasKindAny::CallFunc_IsRegisterActiveSasKindAny_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveTelepoDamageRateForJewelPool
// 0x0120 (0x0120 - 0x0000)
struct RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool final
{
public:
	float                                         OutCrashRate;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutWinceRate;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutKnockbackRate;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutDownRate;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     InSkill;                                           // 0x0010(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_565B[0x2];                                     // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetNexusDriveTelepoParam_OutDamageRate;   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutCrashRate;    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutWinceRate;    // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutKnockbackRate; // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutDownRate;     // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetNexusDriveTelepoParam_ReturnValue;     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool) == 0x000008, "Wrong alignment on RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool) == 0x000120, "Wrong size on RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, OutCrashRate) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::OutCrashRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, OutWinceRate) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::OutWinceRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, OutKnockbackRate) == 0x000008, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::OutKnockbackRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, OutDownRate) == 0x00000C, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::OutDownRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, InSkill) == 0x000010, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::InSkill' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, ReturnValue) == 0x000100, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_IsControlAI_bAI) == 0x000101, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_GetNexusDriveTelepoParam_OutDamageRate) == 0x000104, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_GetNexusDriveTelepoParam_OutDamageRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_GetNexusDriveTelepoParam_OutCrashRate) == 0x000108, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_GetNexusDriveTelepoParam_OutCrashRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_GetNexusDriveTelepoParam_OutWinceRate) == 0x00010C, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_GetNexusDriveTelepoParam_OutWinceRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_GetNexusDriveTelepoParam_OutKnockbackRate) == 0x000110, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_GetNexusDriveTelepoParam_OutKnockbackRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_GetNexusDriveTelepoParam_OutDownRate) == 0x000114, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_GetNexusDriveTelepoParam_OutDownRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool, CallFunc_GetNexusDriveTelepoParam_ReturnValue) == 0x000118, "Member 'RsBattleHero_C_GetNexusDriveTelepoDamageRateForJewelPool::CallFunc_GetNexusDriveTelepoParam_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveTelepoAttackRate
// 0x0128 (0x0128 - 0x0000)
struct RsBattleHero_C_GetNexusDriveTelepoAttackRate final
{
public:
	float                                         OutDamageRate;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutCrashRate;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutWinceRate;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutKnockbackRate;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutDownRate;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_565C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     InSkill;                                           // 0x0018(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_565D[0x2];                                     // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetNexusDriveTelepoParam_OutDamageRate;   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutCrashRate;    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutWinceRate;    // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutKnockbackRate; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveTelepoParam_OutDownRate;     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetNexusDriveTelepoParam_ReturnValue;     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveTelepoAttackRate) == 0x000008, "Wrong alignment on RsBattleHero_C_GetNexusDriveTelepoAttackRate");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveTelepoAttackRate) == 0x000128, "Wrong size on RsBattleHero_C_GetNexusDriveTelepoAttackRate");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, OutDamageRate) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::OutDamageRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, OutCrashRate) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::OutCrashRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, OutWinceRate) == 0x000008, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::OutWinceRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, OutKnockbackRate) == 0x00000C, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::OutKnockbackRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, OutDownRate) == 0x000010, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::OutDownRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, InSkill) == 0x000018, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::InSkill' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, ReturnValue) == 0x000108, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_IsControlAI_bAI) == 0x000109, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_GetNexusDriveTelepoParam_OutDamageRate) == 0x00010C, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_GetNexusDriveTelepoParam_OutDamageRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_GetNexusDriveTelepoParam_OutCrashRate) == 0x000110, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_GetNexusDriveTelepoParam_OutCrashRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_GetNexusDriveTelepoParam_OutWinceRate) == 0x000114, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_GetNexusDriveTelepoParam_OutWinceRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_GetNexusDriveTelepoParam_OutKnockbackRate) == 0x000118, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_GetNexusDriveTelepoParam_OutKnockbackRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_GetNexusDriveTelepoParam_OutDownRate) == 0x00011C, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_GetNexusDriveTelepoParam_OutDownRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveTelepoAttackRate, CallFunc_GetNexusDriveTelepoParam_ReturnValue) == 0x000120, "Member 'RsBattleHero_C_GetNexusDriveTelepoAttackRate::CallFunc_GetNexusDriveTelepoParam_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveStealth_AttackParam
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_GetNexusDriveStealth_AttackParam final
{
public:
	float                                         OutCrashRate;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutKnockback;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutDown;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveStealth_AttackParam) == 0x000004, "Wrong alignment on RsBattleHero_C_GetNexusDriveStealth_AttackParam");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveStealth_AttackParam) == 0x000010, "Wrong size on RsBattleHero_C_GetNexusDriveStealth_AttackParam");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveStealth_AttackParam, OutCrashRate) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveStealth_AttackParam::OutCrashRate' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveStealth_AttackParam, OutKnockback) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveStealth_AttackParam::OutKnockback' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveStealth_AttackParam, OutDown) == 0x000008, "Member 'RsBattleHero_C_GetNexusDriveStealth_AttackParam::OutDown' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveStealth_AttackParam, ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_GetNexusDriveStealth_AttackParam::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveStealth_AttackParam, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x00000D, "Member 'RsBattleHero_C_GetNexusDriveStealth_AttackParam::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveStealth_AttackParam, CallFunc_IsControlAI_bAI) == 0x00000E, "Member 'RsBattleHero_C_GetNexusDriveStealth_AttackParam::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDrivePsychic_PsychicFieldDown
// 0x0014 (0x0014 - 0x0000)
struct RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown final
{
public:
	float                                         OutDown;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_565E[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown) == 0x000004, "Wrong alignment on RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown");
static_assert(sizeof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown) == 0x000014, "Wrong size on RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, OutDown) == 0x000000, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::OutDown' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, ReturnValue) == 0x000004, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, Temp_byte_Variable) == 0x000005, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, Temp_byte_Variable_1) == 0x000006, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, Temp_bool_Variable) == 0x000007, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_GetPlayerID_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, K2Node_Select_Default) == 0x00000A, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_Conv_IntToByte_ReturnValue) == 0x000011, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_GetValidValue_ReturnValue) == 0x000012, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000013, "Member 'RsBattleHero_C_GetNexusDrivePsychic_PsychicFieldDown::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetNexusDriveCombinationVisionCost
// 0x0010 (0x0010 - 0x0000)
struct RsBattleHero_C_GetNexusDriveCombinationVisionCost final
{
public:
	float                                         OutCost;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               SasKind;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_565F[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCombinationVisionCostRate_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetNexusDriveCombinationVisionCost) == 0x000004, "Wrong alignment on RsBattleHero_C_GetNexusDriveCombinationVisionCost");
static_assert(sizeof(RsBattleHero_C_GetNexusDriveCombinationVisionCost) == 0x000010, "Wrong size on RsBattleHero_C_GetNexusDriveCombinationVisionCost");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveCombinationVisionCost, OutCost) == 0x000000, "Member 'RsBattleHero_C_GetNexusDriveCombinationVisionCost::OutCost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveCombinationVisionCost, SasKind) == 0x000004, "Member 'RsBattleHero_C_GetNexusDriveCombinationVisionCost::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveCombinationVisionCost, ReturnValue) == 0x000005, "Member 'RsBattleHero_C_GetNexusDriveCombinationVisionCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveCombinationVisionCost, CallFunc_GetCombinationVisionCostRate_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_GetNexusDriveCombinationVisionCost::CallFunc_GetCombinationVisionCostRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetNexusDriveCombinationVisionCost, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_GetNexusDriveCombinationVisionCost::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CanBrainCrash
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_CanBrainCrash final
{
public:
	bool                                          Param_CanBrainCrash;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCanBrainCrash;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5660[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBrainCrashAccessEnable_Return;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CanBrainCrash) == 0x000008, "Wrong alignment on RsBattleHero_C_CanBrainCrash");
static_assert(sizeof(RsBattleHero_C_CanBrainCrash) == 0x000018, "Wrong size on RsBattleHero_C_CanBrainCrash");
static_assert(offsetof(RsBattleHero_C_CanBrainCrash, Param_CanBrainCrash) == 0x000000, "Member 'RsBattleHero_C_CanBrainCrash::Param_CanBrainCrash' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CanBrainCrash, LbCanBrainCrash) == 0x000001, "Member 'RsBattleHero_C_CanBrainCrash::LbCanBrainCrash' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CanBrainCrash, CallFunc_GetEnemyManager_Manager) == 0x000008, "Member 'RsBattleHero_C_CanBrainCrash::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CanBrainCrash, CallFunc_IsBrainCrashAccessEnable_Return) == 0x000010, "Member 'RsBattleHero_C_CanBrainCrash::CallFunc_IsBrainCrashAccessEnable_Return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsCanSAS_Use
// 0x0048 (0x0048 - 0x0000)
struct RsBattleHero_C_IsCanSAS_Use final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSASUse;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     SAS_Kind;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseAble;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               CallFunc_GetSASKindForButton_SASKind;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5661[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5662[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDebugPlayerSASInfinity_bInfinity;       // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Active;                       // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5663[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5664[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_IsCutInReserved_self_CastInput;           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutInReserved_Reserved;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCanUse_IsCanUse;                        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsCanSAS_Use) == 0x000008, "Wrong alignment on RsBattleHero_C_IsCanSAS_Use");
static_assert(sizeof(RsBattleHero_C_IsCanSAS_Use) == 0x000048, "Wrong size on RsBattleHero_C_IsCanSAS_Use");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, SASButton) == 0x000000, "Member 'RsBattleHero_C_IsCanSAS_Use::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, IsSASUse) == 0x000001, "Member 'RsBattleHero_C_IsCanSAS_Use::IsSASUse' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, SAS_Kind) == 0x000002, "Member 'RsBattleHero_C_IsCanSAS_Use::SAS_Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, bUseAble) == 0x000003, "Member 'RsBattleHero_C_IsCanSAS_Use::bUseAble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_GetSASKindForButton_SASKind) == 0x000004, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_GetSASKindForButton_SASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_GetValidValue_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsDebugPlayerSASInfinity_bInfinity) == 0x00001A, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsDebugPlayerSASInfinity_bInfinity' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsActiveSAS_Active) == 0x00001B, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsActiveSAS_Active' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_GetSASManager_SAS_Manager) == 0x000020, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsCutInReserved_self_CastInput) == 0x000030, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsCutInReserved_self_CastInput' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsCutInReserved_Reserved) == 0x000040, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsCutInReserved_Reserved' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsCutInPlaying_Playing) == 0x000042, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_Not_PreBool_ReturnValue_1) == 0x000043, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsCanSAS_Use, CallFunc_IsCanUse_IsCanUse) == 0x000044, "Member 'RsBattleHero_C_IsCanSAS_Use::CallFunc_IsCanUse_IsCanUse' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsChangeAbleBrainField
// 0x0038 (0x0038 - 0x0000)
struct RsBattleHero_C_IsChangeAbleBrainField final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5665[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5666[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  CallFunc_GetCurrentSequencer_Sequencer;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsChangeAbleBrainField) == 0x000008, "Wrong alignment on RsBattleHero_C_IsChangeAbleBrainField");
static_assert(sizeof(RsBattleHero_C_IsChangeAbleBrainField) == 0x000038, "Wrong size on RsBattleHero_C_IsChangeAbleBrainField");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, bOK) == 0x000000, "Member 'RsBattleHero_C_IsChangeAbleBrainField::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, CallFunc_GetSASManager_SAS_Manager) == 0x000008, "Member 'RsBattleHero_C_IsChangeAbleBrainField::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, CallFunc_GetBrainCrashManager_Manager) == 0x000010, "Member 'RsBattleHero_C_IsChangeAbleBrainField::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, CallFunc_IsCutInPlaying_Playing) == 0x000018, "Member 'RsBattleHero_C_IsChangeAbleBrainField::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, CallFunc_GetCurrentSequencer_Sequencer) == 0x000020, "Member 'RsBattleHero_C_IsChangeAbleBrainField::CallFunc_GetCurrentSequencer_Sequencer' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, CallFunc_GetSequencePlayer_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_IsChangeAbleBrainField::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsChangeAbleBrainField, CallFunc_IsPlaying_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_IsChangeAbleBrainField::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSAS_MaxActiveSeconds
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_GetSAS_MaxActiveSeconds final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5667[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationSeconds;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5668[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSASTimeParameter_RecastSec;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_ActivationSec;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSAS_MaxActiveSeconds) == 0x000004, "Wrong alignment on RsBattleHero_C_GetSAS_MaxActiveSeconds");
static_assert(sizeof(RsBattleHero_C_GetSAS_MaxActiveSeconds) == 0x000018, "Wrong size on RsBattleHero_C_GetSAS_MaxActiveSeconds");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, SasKind) == 0x000000, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, ActivationSeconds) == 0x000004, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::ActivationSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, CallFunc_GetValidValue_ReturnValue) == 0x00000D, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, CallFunc_GetSASTimeParameter_RecastSec) == 0x000010, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::CallFunc_GetSASTimeParameter_RecastSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSAS_MaxActiveSeconds, CallFunc_GetSASTimeParameter_ActivationSec) == 0x000014, "Member 'RsBattleHero_C_GetSAS_MaxActiveSeconds::CallFunc_GetSASTimeParameter_ActivationSec' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASKindforButton
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_GetSASKindforButton final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               SasKind;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASFromButton_Kind;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5669[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSASKindforButton) == 0x000004, "Wrong alignment on RsBattleHero_C_GetSASKindforButton");
static_assert(sizeof(RsBattleHero_C_GetSASKindforButton) == 0x00000C, "Wrong size on RsBattleHero_C_GetSASKindforButton");
static_assert(offsetof(RsBattleHero_C_GetSASKindforButton, SASButton) == 0x000000, "Member 'RsBattleHero_C_GetSASKindforButton::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASKindforButton, SasKind) == 0x000001, "Member 'RsBattleHero_C_GetSASKindforButton::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASKindforButton, CallFunc_GetSASFromButton_Kind) == 0x000002, "Member 'RsBattleHero_C_GetSASKindforButton::CallFunc_GetSASFromButton_Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASKindforButton, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_GetSASKindforButton::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASKindforButton, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_GetSASKindforButton::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASKindforButton, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_GetSASKindforButton::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASParamForKind
// 0x0034 (0x0034 - 0x0000)
struct RsBattleHero_C_GetSASParamForKind final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_566A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SASParam;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_SASParam                            CallFunc_GetSASParamDataCurrentLevel_param;        // 0x0010(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSASParamForKind) == 0x000004, "Wrong alignment on RsBattleHero_C_GetSASParamForKind");
static_assert(sizeof(RsBattleHero_C_GetSASParamForKind) == 0x000034, "Wrong size on RsBattleHero_C_GetSASParamForKind");
static_assert(offsetof(RsBattleHero_C_GetSASParamForKind, SasKind) == 0x000000, "Member 'RsBattleHero_C_GetSASParamForKind::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamForKind, SASParam) == 0x000004, "Member 'RsBattleHero_C_GetSASParamForKind::SASParam' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamForKind, Param) == 0x000008, "Member 'RsBattleHero_C_GetSASParamForKind::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamForKind, K2Node_SwitchInteger_CmpSuccess) == 0x00000C, "Member 'RsBattleHero_C_GetSASParamForKind::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamForKind, CallFunc_GetSASParamDataCurrentLevel_param) == 0x000010, "Member 'RsBattleHero_C_GetSASParamForKind::CallFunc_GetSASParamDataCurrentLevel_param' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSASEffect
// 0x0034 (0x0034 - 0x0000)
struct RsBattleHero_C_IsEnableSASEffect final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASEffect                                    Effect;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566C[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param0;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param1;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param2;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param3;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     LSasPlayerID;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEnable;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566D[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LFriendLevel;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_OutEnable;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566E[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_OutParam0;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_OutParam1;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_OutParam2;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_OutParam3;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_IsEnableSASEffect) == 0x000004, "Wrong alignment on RsBattleHero_C_IsEnableSASEffect");
static_assert(sizeof(RsBattleHero_C_IsEnableSASEffect) == 0x000034, "Wrong size on RsBattleHero_C_IsEnableSASEffect");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, Kind) == 0x000000, "Member 'RsBattleHero_C_IsEnableSASEffect::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, Effect) == 0x000001, "Member 'RsBattleHero_C_IsEnableSASEffect::Effect' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, bEnable) == 0x000002, "Member 'RsBattleHero_C_IsEnableSASEffect::bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, Param0) == 0x000004, "Member 'RsBattleHero_C_IsEnableSASEffect::Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, Param1) == 0x000008, "Member 'RsBattleHero_C_IsEnableSASEffect::Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, Param2) == 0x00000C, "Member 'RsBattleHero_C_IsEnableSASEffect::Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, Param3) == 0x000010, "Member 'RsBattleHero_C_IsEnableSASEffect::Param3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, LSasPlayerID) == 0x000014, "Member 'RsBattleHero_C_IsEnableSASEffect::LSasPlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, LbEnable) == 0x000015, "Member 'RsBattleHero_C_IsEnableSASEffect::LbEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, LFriendLevel) == 0x000018, "Member 'RsBattleHero_C_IsEnableSASEffect::LFriendLevel' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_GetValidValue_ReturnValue) == 0x000021, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_IsEnableSASEffect_OutEnable) == 0x000022, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_IsEnableSASEffect_OutEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_IsEnableSASEffect_OutParam0) == 0x000024, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_IsEnableSASEffect_OutParam0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_IsEnableSASEffect_OutParam1) == 0x000028, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_IsEnableSASEffect_OutParam1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_IsEnableSASEffect_OutParam2) == 0x00002C, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_IsEnableSASEffect_OutParam2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffect, CallFunc_IsEnableSASEffect_OutParam3) == 0x000030, "Member 'RsBattleHero_C_IsEnableSASEffect::CallFunc_IsEnableSASEffect_OutParam3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASParamDataCurrentLevel
// 0x0068 (0x0068 - 0x0000)
struct RsBattleHero_C_GetSASParamDataCurrentLevel final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_566F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_SASParam                            Param;                                             // 0x0004(0x0024)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5670[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBondsLevel_ReturnValue;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_SASParam                            CallFunc_GetSASParamData_Param;                    // 0x0040(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSASParamDataCurrentLevel) == 0x000008, "Wrong alignment on RsBattleHero_C_GetSASParamDataCurrentLevel");
static_assert(sizeof(RsBattleHero_C_GetSASParamDataCurrentLevel) == 0x000068, "Wrong size on RsBattleHero_C_GetSASParamDataCurrentLevel");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, Kind) == 0x000000, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, Param) == 0x000004, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::Param' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000030, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_GetPlayerID_ReturnValue) == 0x000032, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_GetBondsLevel_ReturnValue) == 0x000034, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_GetBondsLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_GetSASManager_SAS_Manager) == 0x000038, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASParamDataCurrentLevel, CallFunc_GetSASParamData_Param) == 0x000040, "Member 'RsBattleHero_C_GetSASParamDataCurrentLevel::CallFunc_GetSASParamData_Param' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsIgnoreVisionFog
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_IsIgnoreVisionFog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsIgnoreVisionFog) == 0x000001, "Wrong alignment on RsBattleHero_C_IsIgnoreVisionFog");
static_assert(sizeof(RsBattleHero_C_IsIgnoreVisionFog) == 0x000002, "Wrong size on RsBattleHero_C_IsIgnoreVisionFog");
static_assert(offsetof(RsBattleHero_C_IsIgnoreVisionFog, ReturnValue) == 0x000000, "Member 'RsBattleHero_C_IsIgnoreVisionFog::ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsIgnoreVisionFog, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RsBattleHero_C_IsIgnoreVisionFog::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CalcPsychicCost
// 0x002C (0x002C - 0x0000)
struct RsBattleHero_C_CalcPsychicCost final
{
public:
	bool                                          bUnique;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMapGimmick;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychicCombo;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5671[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cost;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LCost;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInterceptAble_bAble;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5672[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5673[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPsychicGaugeRate_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPsychicCostZero_bZero;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5674[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPsychicCost_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_CalcPsychicCost) == 0x000004, "Wrong alignment on RsBattleHero_C_CalcPsychicCost");
static_assert(sizeof(RsBattleHero_C_CalcPsychicCost) == 0x00002C, "Wrong size on RsBattleHero_C_CalcPsychicCost");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, bUnique) == 0x000000, "Member 'RsBattleHero_C_CalcPsychicCost::bUnique' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, bMapGimmick) == 0x000001, "Member 'RsBattleHero_C_CalcPsychicCost::bMapGimmick' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, bPsychicCombo) == 0x000002, "Member 'RsBattleHero_C_CalcPsychicCost::bPsychicCombo' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, Cost) == 0x000004, "Member 'RsBattleHero_C_CalcPsychicCost::Cost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, LCost) == 0x000008, "Member 'RsBattleHero_C_CalcPsychicCost::LCost' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_IsInterceptAble_bAble) == 0x00000C, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_IsInterceptAble_bAble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_IsDriveMode_ReturnValue) == 0x000014, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_GetPsychicGaugeRate_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_GetPsychicGaugeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_IsPsychicCostZero_bZero) == 0x000020, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_IsPsychicCostZero_bZero' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_GetPsychicCost_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_GetPsychicCost_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CalcPsychicCost, CallFunc_SelectFloat_ReturnValue_1) == 0x000028, "Member 'RsBattleHero_C_CalcPsychicCost::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SearchSASButtonFromKind
// 0x0040 (0x0040 - 0x0000)
struct RsBattleHero_C_SearchSASButtonFromKind final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSearchLatest;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASButton                                   SASButton;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5675[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5676[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5677[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5678[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SearchSASButtonFromKind) == 0x000004, "Wrong alignment on RsBattleHero_C_SearchSASButtonFromKind");
static_assert(sizeof(RsBattleHero_C_SearchSASButtonFromKind) == 0x000040, "Wrong size on RsBattleHero_C_SearchSASButtonFromKind");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, SasKind) == 0x000000, "Member 'RsBattleHero_C_SearchSASButtonFromKind::SasKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, bSearchLatest) == 0x000001, "Member 'RsBattleHero_C_SearchSASButtonFromKind::bSearchLatest' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, SASButton) == 0x000002, "Member 'RsBattleHero_C_SearchSASButtonFromKind::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RsBattleHero_C_SearchSASButtonFromKind::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RsBattleHero_C_SearchSASButtonFromKind::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'RsBattleHero_C_SearchSASButtonFromKind::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RsBattleHero_C_SearchSASButtonFromKind::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Max_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'RsBattleHero_C_SearchSASButtonFromKind::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000030, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000034, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SearchSASButtonFromKind, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00003C, "Member 'RsBattleHero_C_SearchSASButtonFromKind::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetMapGimmickLookAtLocation
// 0x0058 (0x0058 - 0x0000)
struct RsBattleHero_C_GetMapGimmickLookAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LLocation;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5679[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPlayerLookAtPosition_ReturnValue;      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetMapGimmickLookAtLocation) == 0x000004, "Wrong alignment on RsBattleHero_C_GetMapGimmickLookAtLocation");
static_assert(sizeof(RsBattleHero_C_GetMapGimmickLookAtLocation) == 0x000058, "Wrong size on RsBattleHero_C_GetMapGimmickLookAtLocation");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, Location) == 0x000000, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::Location' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, LLocation) == 0x00000C, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::LLocation' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x00003C, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickLookAtLocation, CallFunc_GetPlayerLookAtPosition_ReturnValue) == 0x00004C, "Member 'RsBattleHero_C_GetMapGimmickLookAtLocation::CallFunc_GetPlayerLookAtPosition_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetMapGimmickObject
// 0x0008 (0x0008 - 0x0000)
struct RsBattleHero_C_GetMapGimmickObject final
{
public:
	class AMapGimmickObject*                      MapGimmickObject;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetMapGimmickObject) == 0x000008, "Wrong alignment on RsBattleHero_C_GetMapGimmickObject");
static_assert(sizeof(RsBattleHero_C_GetMapGimmickObject) == 0x000008, "Wrong size on RsBattleHero_C_GetMapGimmickObject");
static_assert(offsetof(RsBattleHero_C_GetMapGimmickObject, MapGimmickObject) == 0x000000, "Member 'RsBattleHero_C_GetMapGimmickObject::MapGimmickObject' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsCancelMapGimmick
// 0x0001 (0x0001 - 0x0000)
struct RsBattleHero_C_IsCancelMapGimmick final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsCancelMapGimmick) == 0x000001, "Wrong alignment on RsBattleHero_C_IsCancelMapGimmick");
static_assert(sizeof(RsBattleHero_C_IsCancelMapGimmick) == 0x000001, "Wrong size on RsBattleHero_C_IsCancelMapGimmick");
static_assert(offsetof(RsBattleHero_C_IsCancelMapGimmick, bCancel) == 0x000000, "Member 'RsBattleHero_C_IsCancelMapGimmick::bCancel' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetUseItemSpeed
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_GetUseItemSpeed final
{
public:
	EPlayerUseItemSpeed                           Speed;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerUseItemSpeed                           LSpeed;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetUseItemSpeed) == 0x000001, "Wrong alignment on RsBattleHero_C_GetUseItemSpeed");
static_assert(sizeof(RsBattleHero_C_GetUseItemSpeed) == 0x000002, "Wrong size on RsBattleHero_C_GetUseItemSpeed");
static_assert(offsetof(RsBattleHero_C_GetUseItemSpeed, Speed) == 0x000000, "Member 'RsBattleHero_C_GetUseItemSpeed::Speed' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetUseItemSpeed, LSpeed) == 0x000001, "Member 'RsBattleHero_C_GetUseItemSpeed::LSpeed' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsActiveSAS_ForKind
// 0x000C (0x000C - 0x0000)
struct RsBattleHero_C_IsActiveSAS_ForKind final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsActiveSAS_ForKind) == 0x000004, "Wrong alignment on RsBattleHero_C_IsActiveSAS_ForKind");
static_assert(sizeof(RsBattleHero_C_IsActiveSAS_ForKind) == 0x00000C, "Wrong size on RsBattleHero_C_IsActiveSAS_ForKind");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForKind, SAS_Kind) == 0x000000, "Member 'RsBattleHero_C_IsActiveSAS_ForKind::SAS_Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForKind, IsActive) == 0x000001, "Member 'RsBattleHero_C_IsActiveSAS_ForKind::IsActive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForKind, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RsBattleHero_C_IsActiveSAS_ForKind::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForKind, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_IsActiveSAS_ForKind::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForKind, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RsBattleHero_C_IsActiveSAS_ForKind::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForKind, CallFunc_IsActiveSAS_ReturnValue) == 0x00000A, "Member 'RsBattleHero_C_IsActiveSAS_ForKind::CallFunc_IsActiveSAS_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsActiveSAS_ForButton
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_IsActiveSAS_ForButton final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSAS;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               CallFunc_GetSASKindForButton_SASKind;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsActiveSAS_ForButton) == 0x000001, "Wrong alignment on RsBattleHero_C_IsActiveSAS_ForButton");
static_assert(sizeof(RsBattleHero_C_IsActiveSAS_ForButton) == 0x000004, "Wrong size on RsBattleHero_C_IsActiveSAS_ForButton");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForButton, SASButton) == 0x000000, "Member 'RsBattleHero_C_IsActiveSAS_ForButton::SASButton' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForButton, IsSAS) == 0x000001, "Member 'RsBattleHero_C_IsActiveSAS_ForButton::IsSAS' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForButton, CallFunc_GetSASKindForButton_SASKind) == 0x000002, "Member 'RsBattleHero_C_IsActiveSAS_ForButton::CallFunc_GetSASKindForButton_SASKind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsActiveSAS_ForButton, CallFunc_IsActiveSAS_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_IsActiveSAS_ForButton::CallFunc_IsActiveSAS_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetBrainFieldPsychicAttackLevel
// 0x002C (0x002C - 0x0000)
struct RsBattleHero_C_GetBrainFieldPsychicAttackLevel final
{
public:
	EPsychicObjectBrainFieldAttackType            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_567B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectBrainFieldAttackType            Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_567C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel) == 0x000004, "Wrong alignment on RsBattleHero_C_GetBrainFieldPsychicAttackLevel");
static_assert(sizeof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel) == 0x00002C, "Wrong size on RsBattleHero_C_GetBrainFieldPsychicAttackLevel");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Type) == 0x000000, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Type' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Level) == 0x000004, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Level' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_byte_Variable) == 0x000008, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable) == 0x00000C, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable_1) == 0x000010, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable_2) == 0x000014, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable_3) == 0x000018, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable_4) == 0x00001C, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable_5) == 0x000020, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, Temp_int_Variable_6) == 0x000024, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetBrainFieldPsychicAttackLevel, K2Node_Select_Default) == 0x000028, "Member 'RsBattleHero_C_GetBrainFieldPsychicAttackLevel::K2Node_Select_Default' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsPsychicCostZero
// 0x0030 (0x0030 - 0x0000)
struct RsBattleHero_C_IsPsychicCostZero final
{
public:
	bool                                          bUnique;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMapGimmick;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bZero;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInterceptAble_bAble;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567D[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_IsPsychicCostZero) == 0x000008, "Wrong alignment on RsBattleHero_C_IsPsychicCostZero");
static_assert(sizeof(RsBattleHero_C_IsPsychicCostZero) == 0x000030, "Wrong size on RsBattleHero_C_IsPsychicCostZero");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, bUnique) == 0x000000, "Member 'RsBattleHero_C_IsPsychicCostZero::bUnique' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, bMapGimmick) == 0x000001, "Member 'RsBattleHero_C_IsPsychicCostZero::bMapGimmick' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, bZero) == 0x000002, "Member 'RsBattleHero_C_IsPsychicCostZero::bZero' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_GetPlayerID_ReturnValue) == 0x000003, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, Temp_byte_Variable) == 0x000004, "Member 'RsBattleHero_C_IsPsychicCostZero::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, Temp_bool_Variable) == 0x000006, "Member 'RsBattleHero_C_IsPsychicCostZero::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_Not_PreBool_ReturnValue_1) == 0x000008, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsInterceptAble_bAble) == 0x000009, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsInterceptAble_bAble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsControlAI_bAI) == 0x00000A, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, Temp_byte_Variable_1) == 0x000018, "Member 'RsBattleHero_C_IsPsychicCostZero::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, K2Node_Select_Default) == 0x00001A, "Member 'RsBattleHero_C_IsPsychicCostZero::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsEnableSASEffect_bEnable) == 0x00001B, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsEnableSASEffect_Param0) == 0x00001C, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsEnableSASEffect_Param1) == 0x000020, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsEnableSASEffect_Param2) == 0x000024, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsPsychicCostZero, CallFunc_IsEnableSASEffect_Param3) == 0x000028, "Member 'RsBattleHero_C_IsPsychicCostZero::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.SubPsychicFieldCost
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_SubPsychicFieldCost final
{
public:
	float                                         LSubTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_567E[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_2;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_3;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     K2Node_Select_Default_1;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_567F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActiveSecondsFromKind_ActiveSeconds;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveSecondsFromKind_MaxTime;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDriveSas_ReturnValue;        // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_SubPsychicFieldCost) == 0x000004, "Wrong alignment on RsBattleHero_C_SubPsychicFieldCost");
static_assert(sizeof(RsBattleHero_C_SubPsychicFieldCost) == 0x000028, "Wrong size on RsBattleHero_C_SubPsychicFieldCost");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, LSubTime) == 0x000000, "Member 'RsBattleHero_C_SubPsychicFieldCost::LSubTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, Temp_bool_Variable) == 0x000004, "Member 'RsBattleHero_C_SubPsychicFieldCost::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, Temp_byte_Variable) == 0x000005, "Member 'RsBattleHero_C_SubPsychicFieldCost::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, Temp_byte_Variable_1) == 0x000006, "Member 'RsBattleHero_C_SubPsychicFieldCost::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, Temp_byte_Variable_2) == 0x00000C, "Member 'RsBattleHero_C_SubPsychicFieldCost::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_GetPlayerID_ReturnValue) == 0x00000D, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000E, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_GetPlayerID_ReturnValue_1) == 0x00000F, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, Temp_byte_Variable_3) == 0x000010, "Member 'RsBattleHero_C_SubPsychicFieldCost::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000011, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, Temp_bool_Variable_1) == 0x000012, "Member 'RsBattleHero_C_SubPsychicFieldCost::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, K2Node_Select_Default) == 0x000013, "Member 'RsBattleHero_C_SubPsychicFieldCost::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, K2Node_Select_Default_1) == 0x000014, "Member 'RsBattleHero_C_SubPsychicFieldCost::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_GetActiveSecondsFromKind_ActiveSeconds) == 0x000018, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_GetActiveSecondsFromKind_ActiveSeconds' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_GetActiveSecondsFromKind_MaxTime) == 0x00001C, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_GetActiveSecondsFromKind_MaxTime' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_Conv_IntToByte_ReturnValue) == 0x000024, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_GetValidValue_ReturnValue) == 0x000025, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_SubPsychicFieldCost, CallFunc_IsEnableNexusDriveSas_ReturnValue) == 0x000026, "Member 'RsBattleHero_C_SubPsychicFieldCost::CallFunc_IsEnableNexusDriveSas_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnpcSASLinkAble
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_IsEnpcSASLinkAble final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5680[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSAS_bActive;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsEnpcSASLinkAble) == 0x000008, "Wrong alignment on RsBattleHero_C_IsEnpcSASLinkAble");
static_assert(sizeof(RsBattleHero_C_IsEnpcSASLinkAble) == 0x000018, "Wrong size on RsBattleHero_C_IsEnpcSASLinkAble");
static_assert(offsetof(RsBattleHero_C_IsEnpcSASLinkAble, Kind) == 0x000000, "Member 'RsBattleHero_C_IsEnpcSASLinkAble::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnpcSASLinkAble, bOK) == 0x000001, "Member 'RsBattleHero_C_IsEnpcSASLinkAble::bOK' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnpcSASLinkAble, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RsBattleHero_C_IsEnpcSASLinkAble::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnpcSASLinkAble, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_IsEnpcSASLinkAble::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnpcSASLinkAble, CallFunc_IsActiveEnpcSAS_bActive) == 0x000011, "Member 'RsBattleHero_C_IsEnpcSASLinkAble::CallFunc_IsActiveEnpcSAS_bActive' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnpcSASLinkAble, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'RsBattleHero_C_IsEnpcSASLinkAble::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckAssassinAttack
// 0x0018 (0x0018 - 0x0000)
struct RsBattleHero_C_CheckAssassinAttack final
{
public:
	EAssassinAttackHit                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5681[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   DamagedActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bArmorBreak;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbArmorBreak;                                      // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSuccess;                                         // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckAssassinAttack) == 0x000008, "Wrong alignment on RsBattleHero_C_CheckAssassinAttack");
static_assert(sizeof(RsBattleHero_C_CheckAssassinAttack) == 0x000018, "Wrong size on RsBattleHero_C_CheckAssassinAttack");
static_assert(offsetof(RsBattleHero_C_CheckAssassinAttack, Type) == 0x000000, "Member 'RsBattleHero_C_CheckAssassinAttack::Type' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAssassinAttack, DamagedActor) == 0x000008, "Member 'RsBattleHero_C_CheckAssassinAttack::DamagedActor' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAssassinAttack, bSuccess) == 0x000010, "Member 'RsBattleHero_C_CheckAssassinAttack::bSuccess' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAssassinAttack, bArmorBreak) == 0x000011, "Member 'RsBattleHero_C_CheckAssassinAttack::bArmorBreak' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAssassinAttack, LbArmorBreak) == 0x000012, "Member 'RsBattleHero_C_CheckAssassinAttack::LbArmorBreak' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckAssassinAttack, LbSuccess) == 0x000013, "Member 'RsBattleHero_C_CheckAssassinAttack::LbSuccess' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsAutoTakenItem
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_IsAutoTakenItem final
{
public:
	bool                                          bAuto;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5682[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LevelManager_C*                     CallFunc_GetLevelManager_LevelManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidCurrentSimulatorLevelInfosName_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5683[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjectAutoTakeItem_return;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsAutoTakenItem) == 0x000008, "Wrong alignment on RsBattleHero_C_IsAutoTakenItem");
static_assert(sizeof(RsBattleHero_C_IsAutoTakenItem) == 0x000028, "Wrong size on RsBattleHero_C_IsAutoTakenItem");
static_assert(offsetof(RsBattleHero_C_IsAutoTakenItem, bAuto) == 0x000000, "Member 'RsBattleHero_C_IsAutoTakenItem::bAuto' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsAutoTakenItem, CallFunc_GetLevelManager_LevelManager) == 0x000008, "Member 'RsBattleHero_C_IsAutoTakenItem::CallFunc_GetLevelManager_LevelManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsAutoTakenItem, CallFunc_IsValidCurrentSimulatorLevelInfosName_ReturnValue) == 0x000010, "Member 'RsBattleHero_C_IsAutoTakenItem::CallFunc_IsValidCurrentSimulatorLevelInfosName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsAutoTakenItem, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000018, "Member 'RsBattleHero_C_IsAutoTakenItem::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsAutoTakenItem, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_IsAutoTakenItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsAutoTakenItem, CallFunc_IsUniqueObjectAutoTakeItem_return) == 0x000021, "Member 'RsBattleHero_C_IsAutoTakenItem::CallFunc_IsUniqueObjectAutoTakeItem_return' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.NeedsDispNoDamage
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_NeedsDispNoDamage final
{
public:
	bool                                          bNeedsDipsNoDamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NeedsDispNoDamage_bNeedsDipsNoDamage;     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_NeedsDispNoDamage) == 0x000001, "Wrong alignment on RsBattleHero_C_NeedsDispNoDamage");
static_assert(sizeof(RsBattleHero_C_NeedsDispNoDamage) == 0x000004, "Wrong size on RsBattleHero_C_NeedsDispNoDamage");
static_assert(offsetof(RsBattleHero_C_NeedsDispNoDamage, bNeedsDipsNoDamage) == 0x000000, "Member 'RsBattleHero_C_NeedsDispNoDamage::bNeedsDipsNoDamage' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_NeedsDispNoDamage, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RsBattleHero_C_NeedsDispNoDamage::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_NeedsDispNoDamage, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_NeedsDispNoDamage::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_NeedsDispNoDamage, CallFunc_NeedsDispNoDamage_bNeedsDipsNoDamage) == 0x000003, "Member 'RsBattleHero_C_NeedsDispNoDamage::CallFunc_NeedsDispNoDamage_bNeedsDipsNoDamage' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsAutoStealth
// 0x0002 (0x0002 - 0x0000)
struct RsBattleHero_C_IsAutoStealth final
{
public:
	bool                                          bAuto;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_IsAutoStealth) == 0x000001, "Wrong alignment on RsBattleHero_C_IsAutoStealth");
static_assert(sizeof(RsBattleHero_C_IsAutoStealth) == 0x000002, "Wrong size on RsBattleHero_C_IsAutoStealth");
static_assert(offsetof(RsBattleHero_C_IsAutoStealth, bAuto) == 0x000000, "Member 'RsBattleHero_C_IsAutoStealth::bAuto' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsAutoStealth, CallFunc_IsEnable_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_IsAutoStealth::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.CheckDisableBeginSAS_Telepo
// 0x0004 (0x0004 - 0x0000)
struct RsBattleHero_C_CheckDisableBeginSAS_Telepo final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackState_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableBeginSAS_Telepo_bDisable;     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_CheckDisableBeginSAS_Telepo) == 0x000001, "Wrong alignment on RsBattleHero_C_CheckDisableBeginSAS_Telepo");
static_assert(sizeof(RsBattleHero_C_CheckDisableBeginSAS_Telepo) == 0x000004, "Wrong size on RsBattleHero_C_CheckDisableBeginSAS_Telepo");
static_assert(offsetof(RsBattleHero_C_CheckDisableBeginSAS_Telepo, bDisable) == 0x000000, "Member 'RsBattleHero_C_CheckDisableBeginSAS_Telepo::bDisable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckDisableBeginSAS_Telepo, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RsBattleHero_C_CheckDisableBeginSAS_Telepo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckDisableBeginSAS_Telepo, CallFunc_IsAttackState_ReturnValue) == 0x000002, "Member 'RsBattleHero_C_CheckDisableBeginSAS_Telepo::CallFunc_IsAttackState_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_CheckDisableBeginSAS_Telepo, CallFunc_CheckDisableBeginSAS_Telepo_bDisable) == 0x000003, "Member 'RsBattleHero_C_CheckDisableBeginSAS_Telepo::CallFunc_CheckDisableBeginSAS_Telepo_bDisable' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetSASTimeParameter
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_GetSASTimeParameter final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5684[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecastSec;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActivationSec;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LActivationSec;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_RecastSec;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_ActivationSec;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExistBattleMember_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5685[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSasActivationSec_bEanble;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5686[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSasActivationSec_OutActivationSec;     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_GetSASTimeParameter) == 0x000004, "Wrong alignment on RsBattleHero_C_GetSASTimeParameter");
static_assert(sizeof(RsBattleHero_C_GetSASTimeParameter) == 0x000028, "Wrong size on RsBattleHero_C_GetSASTimeParameter");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, Kind) == 0x000000, "Member 'RsBattleHero_C_GetSASTimeParameter::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, RecastSec) == 0x000004, "Member 'RsBattleHero_C_GetSASTimeParameter::RecastSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, ActivationSec) == 0x000008, "Member 'RsBattleHero_C_GetSASTimeParameter::ActivationSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, LActivationSec) == 0x00000C, "Member 'RsBattleHero_C_GetSASTimeParameter::LActivationSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_GetSASTimeParameter_RecastSec) == 0x000010, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_GetSASTimeParameter_RecastSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_GetSASTimeParameter_ActivationSec) == 0x000014, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_GetSASTimeParameter_ActivationSec' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000018, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_IsExistBattleMember_ReturnValue) == 0x000019, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_IsExistBattleMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_GetValidValue_ReturnValue) == 0x000021, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_GetSasActivationSec_bEanble) == 0x000022, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_GetSasActivationSec_bEanble' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetSASTimeParameter, CallFunc_GetSasActivationSec_OutActivationSec) == 0x000024, "Member 'RsBattleHero_C_GetSASTimeParameter::CallFunc_GetSasActivationSec_OutActivationSec' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.IsEnableSASEffectInterface
// 0x0028 (0x0028 - 0x0000)
struct RsBattleHero_C_IsEnableSASEffectInterface final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASEffect                                    Effect;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutEnable;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5687[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutParam0;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutParam1;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutParam2;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutParam3;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_OutEnable;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5688[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_OutParam0;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_OutParam1;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_OutParam2;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_OutParam3;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RsBattleHero_C_IsEnableSASEffectInterface) == 0x000004, "Wrong alignment on RsBattleHero_C_IsEnableSASEffectInterface");
static_assert(sizeof(RsBattleHero_C_IsEnableSASEffectInterface) == 0x000028, "Wrong size on RsBattleHero_C_IsEnableSASEffectInterface");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, Kind) == 0x000000, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::Kind' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, Effect) == 0x000001, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::Effect' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, OutEnable) == 0x000002, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::OutEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, OutParam0) == 0x000004, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::OutParam0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, OutParam1) == 0x000008, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::OutParam1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, OutParam2) == 0x00000C, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::OutParam2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, OutParam3) == 0x000010, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::OutParam3' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, CallFunc_IsEnableSASEffect_OutEnable) == 0x000014, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::CallFunc_IsEnableSASEffect_OutEnable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, CallFunc_IsEnableSASEffect_OutParam0) == 0x000018, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::CallFunc_IsEnableSASEffect_OutParam0' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, CallFunc_IsEnableSASEffect_OutParam1) == 0x00001C, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::CallFunc_IsEnableSASEffect_OutParam1' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, CallFunc_IsEnableSASEffect_OutParam2) == 0x000020, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::CallFunc_IsEnableSASEffect_OutParam2' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_IsEnableSASEffectInterface, CallFunc_IsEnableSASEffect_OutParam3) == 0x000024, "Member 'RsBattleHero_C_IsEnableSASEffectInterface::CallFunc_IsEnableSASEffect_OutParam3' has a wrong offset!");

// Function RsBattleHero.RsBattleHero_C.GetCharacterReplaceSkillTable
// 0x0020 (0x0020 - 0x0000)
struct RsBattleHero_C_GetCharacterReplaceSkillTable final
{
public:
	class UDataTable*                             Original;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             SkillTable;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_GetCharacterReplaceSkillTable_SkillTable; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsManualMode_ReturnValue;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RsBattleHero_C_GetCharacterReplaceSkillTable) == 0x000008, "Wrong alignment on RsBattleHero_C_GetCharacterReplaceSkillTable");
static_assert(sizeof(RsBattleHero_C_GetCharacterReplaceSkillTable) == 0x000020, "Wrong size on RsBattleHero_C_GetCharacterReplaceSkillTable");
static_assert(offsetof(RsBattleHero_C_GetCharacterReplaceSkillTable, Original) == 0x000000, "Member 'RsBattleHero_C_GetCharacterReplaceSkillTable::Original' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetCharacterReplaceSkillTable, SkillTable) == 0x000008, "Member 'RsBattleHero_C_GetCharacterReplaceSkillTable::SkillTable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetCharacterReplaceSkillTable, CallFunc_GetCharacterReplaceSkillTable_SkillTable) == 0x000010, "Member 'RsBattleHero_C_GetCharacterReplaceSkillTable::CallFunc_GetCharacterReplaceSkillTable_SkillTable' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetCharacterReplaceSkillTable, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'RsBattleHero_C_GetCharacterReplaceSkillTable::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RsBattleHero_C_GetCharacterReplaceSkillTable, CallFunc_IsManualMode_ReturnValue) == 0x000019, "Member 'RsBattleHero_C_GetCharacterReplaceSkillTable::CallFunc_IsManualMode_ReturnValue' has a wrong offset!");

}

