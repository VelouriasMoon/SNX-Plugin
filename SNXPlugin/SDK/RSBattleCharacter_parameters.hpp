#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RSBattleCharacter

#include "Basic.hpp"

#include "EAttackAttribute_structs.hpp"
#include "FNotifyAttackData_structs.hpp"
#include "ECharaExecuteNotifyKind_structs.hpp"
#include "ST_BrainCrashMissAccumulationScale_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EAnimNotifyTimeDilationMode_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_DisplayDamageBrainCrashInfo_structs.hpp"
#include "SkillParameter_structs.hpp"
#include "CharactersParameter_structs.hpp"
#include "BadStateAddParticleData_structs.hpp"
#include "HateParamData_structs.hpp"
#include "EBonusGhostType_structs.hpp"


namespace SDK::Params
{

// Function RSBattleCharacter.RSBattleCharacter_C.ExecuteUbergraph_RSBattleCharacter
// 0x1240 (0x1240 - 0x0000)
struct RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_IdlingSec;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_IdleRestoreDelay;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBonusGhostType                               K2Node_Event_Type;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EDC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AliveTime_1;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_BrainFieldUser_6;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_6;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EDD[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_5;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_5;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EDE[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_4;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_4;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EDF[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_3;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_3;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            K2Node_Event_EndType_2;                            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EE0[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_2;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_2;                         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_wait_on_in;                           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE1[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate;              // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3EE2[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result_2;               // 0x0080(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_OnHitDamage_Return;                       // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE3[0x7];                                     // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_hitResult_3;            // 0x0248(0x01C0)(ConstParm, ContainsInstancedReference)
	int32                                         K2Node_ComponentBoundEvent_damage_4;               // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_isDamage;               // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE4[0x3];                                     // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_ComponentBoundEvent_location;               // 0x0410(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_damage_3;               // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_crashDamage;            // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePointKind                              K2Node_ComponentBoundEvent_kind;                   // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_isCritical;             // 0x0425(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_isWeakhit;              // 0x0426(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_isStealthCritical;      // 0x0427(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_isBrainCrash;           // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE5[0x7];                                     // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_attackActor;            // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartDamageAnimFunc_Dummy;                // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE6[0x7];                                     // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHCHitResult>                   K2Node_Event_Result;                               // 0x0440(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_Event_HitResult;                            // 0x0450(0x01C0)(ConstParm, ContainsInstancedReference)
	bool                                          CallFunc_OnDamageActorHit_Dummy;                   // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ignoreAutoSasMetal;                   // 0x0611(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInvalidDamage;                       // 0x0612(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE7[0x1];                                     // 0x0613(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ClaimantName;                         // 0x0614(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_param;                                // 0x061C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DamageBefore_bDummy;                      // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0621(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE8[0x2];                                     // 0x0622(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0624(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_bBeginActor_1;                        // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE9[0x3];                                     // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Event_PlayerEndMontage;                     // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EEA[0x3];                                     // 0x0649(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x064C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0659(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EEB[0x2];                                     // 0x065A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x065C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x0668(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x0669(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EEC[0x6];                                     // 0x066A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_6;               // 0x0679(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EED[0x6];                                     // 0x067A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x0688(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0689(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x068A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EEE[0x5];                                     // 0x068B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0690(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x06A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x06A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EEF[0x2];                                     // 0x06A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x06A4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x06B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x06B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF0[0x2];                                     // 0x06B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AliveTime;                            // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Active;                               // 0x06BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF1[0x3];                                     // 0x06BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EF2[0x4];                                     // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result_1;               // 0x06C8(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_PrevCheckOnAttackActorHit_bOK;            // 0x0888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x0889(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PostTick_Dummy;                           // 0x088A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MainTick_Dummy;                           // 0x088B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreTick_Dummy;                            // 0x088C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF3[0x3];                                     // 0x088D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_hitResult_2;            // 0x0890(0x01C0)(ConstParm, ContainsInstancedReference)
	int32                                         K2Node_ComponentBoundEvent_damage_2;               // 0x0A50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0A54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDamaging_Dummy;                         // 0x0A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0A59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF4[0x6];                                     // 0x0A5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_hitResult_1;            // 0x0A60(0x01C0)(ConstParm, ContainsInstancedReference)
	int32                                         K2Node_ComponentBoundEvent_damage_1;               // 0x0C20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_current_hp;             // 0x0C24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_base_hp;                // 0x0C28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoHPEvent_bDummy;                         // 0x0C2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHoodVisible_ReturnValue;               // 0x0C2D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF5[0x2];                                     // 0x0C2E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0C30(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0C38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0C40(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0C48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0C4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF6[0x3];                                     // 0x0C4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0C50(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0CD8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0CE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0CE8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0CF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EF7[0x4];                                     // 0x0CF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0CF8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0D00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF8[0x7];                                     // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision_1;          // 0x0D08(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0D10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_6;                     // 0x0D11(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnCharacterAssetLoad_Return;              // 0x0D12(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EF9[0x5];                                     // 0x0D13(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0D18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHitManager_C*                          CallFunc_GetHitManager_Manager_1;                  // 0x0D20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDelayDeath_dummy;                      // 0x0D28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EFA[0x7];                                     // 0x0D29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_finisher;               // 0x0D30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_ComponentBoundEvent_hitResult;              // 0x0D38(0x01C0)(ConstParm, ContainsInstancedReference)
	int32                                         K2Node_ComponentBoundEvent_damage;                 // 0x0EF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EFB[0x4];                                     // 0x0EFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0F00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0F08(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0F18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0F19(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EFC[0x6];                                     // 0x0F1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x0F20(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0F30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0F31(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_7;               // 0x0F32(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EFD[0x5];                                     // 0x0F33(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0F38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager_1;         // 0x0F40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0F48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_7;                     // 0x0F49(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCBadState                                   K2Node_ComponentBoundEvent_bad_state_1;            // 0x0F4A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EFE[0x5];                                     // 0x0F4B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_attacker;               // 0x0F50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy_1;                         // 0x0F58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0F59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0F5A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EFF[0x5];                                     // 0x0F5B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x0F60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   K2Node_ComponentBoundEvent_bad_state;              // 0x0F68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0F69(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableCharacterTick_bEnable;            // 0x0F6A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F00[0x5];                                     // 0x0F6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_1;             // 0x0F70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy_2;                         // 0x0F78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F01[0x7];                                     // 0x0F79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_2;         // 0x0F80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InitializeDifficulty_bDummy;              // 0x0F88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_8;                     // 0x0F89(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F02[0x2];                                     // 0x0F8A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0F8C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_SetAttackHitStop_bDummy;                  // 0x0F9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAttackHitStop_bDummy_1;                // 0x0F9D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F03[0x2];                                     // 0x0F9E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0FA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0FA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LeaveBrainCrashAccess_Dummy;              // 0x0FA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy_3;                         // 0x0FAA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F04[0x5];                                     // 0x0FAB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_ComponentBoundEvent_Result;                 // 0x0FB0(0x01C0)(ContainsInstancedReference)
	bool                                          Temp_bool_Has_Been_Initd_Variable_8;               // 0x1170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy_1;                 // 0x1171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F05[0x6];                                     // 0x1172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_1;                     // 0x1178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_1;                         // 0x1180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            K2Node_Event_EndType_1;                            // 0x1181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F06[0x6];                                     // 0x1182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser;                       // 0x1188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker;                           // 0x1190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            K2Node_Event_EndType;                              // 0x1191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x1192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x1193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_4;            // 0x1194(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_9;               // 0x11A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F07[0x3];                                     // 0x11A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_5;            // 0x11A8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_noDeadEvent;                          // 0x11B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_noCrashChanceEvent;                   // 0x11B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x11BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F08[0x5];                                     // 0x11BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         K2Node_Event_Particle_1;                           // 0x11C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x11C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F09[0x4];                                     // 0x11D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         K2Node_Event_Particle;                             // 0x11D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy_4;                         // 0x11E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F0A[0x7];                                     // 0x11E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_1; // 0x11E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x11F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F0B[0x7];                                     // 0x11F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_2; // 0x11F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x1200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStateEndless_ReturnValue;            // 0x1201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bBeginActor;                          // 0x1202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F0C[0x5];                                     // 0x1203(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_2;                // 0x1208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_3; // 0x1210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x1218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x1219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue_1;            // 0x121A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_9;                     // 0x121B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy_5;                         // 0x121C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F0D[0x3];                                     // 0x121D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x1220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x1228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x1238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x1239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss_1;                      // 0x123A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter");
static_assert(sizeof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter) == 0x001240, "Wrong size on RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, EntryPoint) == 0x000000, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable) == 0x000005, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_1) == 0x000006, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_1) == 0x000007, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_2) == 0x000008, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_2) == 0x000009, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_3) == 0x00000A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_3) == 0x00000B, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IdlingSec) == 0x00000C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IdlingSec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IdleRestoreDelay) == 0x000010, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_Time) == 0x000014, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_Type) == 0x000018, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_AliveTime_1) == 0x00001C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_AliveTime_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser_6) == 0x000020, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker_6) == 0x000028, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser_5) == 0x000030, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker_5) == 0x000038, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser_4) == 0x000040, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker_4) == 0x000048, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser_3) == 0x000050, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker_3) == 0x000058, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_EndType_2) == 0x000059, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_EndType_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser_2) == 0x000060, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker_2) == 0x000068, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_wait_on_in) == 0x000069, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_wait_on_in' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_CreateDelegate_OutputDelegate) == 0x00006C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_Result_2) == 0x000080, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_Result_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnHitDamage_Return) == 0x000240, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnHitDamage_Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_hitResult_3) == 0x000248, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_hitResult_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_damage_4) == 0x000408, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_damage_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_isDamage) == 0x00040C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_isDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_location) == 0x000410, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_damage_3) == 0x00041C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_damage_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_crashDamage) == 0x000420, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_crashDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_kind) == 0x000424, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_kind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_isCritical) == 0x000425, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_isCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_isWeakhit) == 0x000426, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_isWeakhit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_isStealthCritical) == 0x000427, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_isStealthCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_isBrainCrash) == 0x000428, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_isBrainCrash' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_attackActor) == 0x000430, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_attackActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_StartDamageAnimFunc_Dummy) == 0x000438, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_StartDamageAnimFunc_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_Result) == 0x000440, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_Result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_HitResult) == 0x000450, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnDamageActorHit_Dummy) == 0x000610, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnDamageActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_ignoreAutoSasMetal) == 0x000611, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_ignoreAutoSasMetal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_bInvalidDamage) == 0x000612, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_bInvalidDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_ClaimantName) == 0x000614, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_param) == 0x00061C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_param' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_DamageBefore_bDummy) == 0x000620, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_DamageBefore_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_SetInvalidDamage_Dummy) == 0x000621, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_CreateDelegate_OutputDelegate_1) == 0x000624, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_bBeginActor_1) == 0x000634, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_bBeginActor_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_PlayerEndMontage) == 0x000638, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_PlayerEndMontage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000640, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue) == 0x000648, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00064C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_DoesSocketExist_ReturnValue) == 0x000658, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_1) == 0x000659, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetSocketLocation_ReturnValue) == 0x00065C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_4) == 0x000668, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_5) == 0x000669, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetEnemyManager_Manager) == 0x000670, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_2) == 0x000678, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_6) == 0x000679, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000680, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnemy_bEnemy) == 0x000688, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_3) == 0x000689, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsMissionActive_ReturnValue) == 0x00068A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000690, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_bSuccess) == 0x0006A0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsBossEnemy_bBoss) == 0x0006A1, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_CreateDelegate_OutputDelegate_2) == 0x0006A4, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_4) == 0x0006B4, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_5) == 0x0006B5, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_AliveTime) == 0x0006B8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_AliveTime' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_Active) == 0x0006BC, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_Active' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_DeltaSeconds) == 0x0006C0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_Result_1) == 0x0006C8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_PrevCheckOnAttackActorHit_bOK) == 0x000888, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_PrevCheckOnAttackActorHit_bOK' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnAttackActorHit_Dummy) == 0x000889, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_PostTick_Dummy) == 0x00088A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_PostTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_MainTick_Dummy) == 0x00088B, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_MainTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_PreTick_Dummy) == 0x00088C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_PreTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_hitResult_2) == 0x000890, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_hitResult_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_damage_2) == 0x000A50, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_damage_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000A54, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnDamaging_Dummy) == 0x000A58, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnDamaging_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnDead_Dummy) == 0x000A59, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_hitResult_1) == 0x000A60, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_hitResult_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_damage_1) == 0x000C20, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_damage_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_current_hp) == 0x000C24, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_current_hp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_base_hp) == 0x000C28, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_base_hp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_DoHPEvent_bDummy) == 0x000C2C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_DoHPEvent_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_SetHoodVisible_ReturnValue) == 0x000C2D, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_SetHoodVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000C30, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000C38, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000C40, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000C48, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_bFromSweep) == 0x000C4C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_SweepResult) == 0x000C50, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000CD8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OtherActor) == 0x000CE0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OtherComp) == 0x000CE8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000CF0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_AsCapsule_Collision) == 0x000CF8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_bSuccess_1) == 0x000D00, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_AsCapsule_Collision_1) == 0x000D08, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_AsCapsule_Collision_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_bSuccess_2) == 0x000D10, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_6) == 0x000D11, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnCharacterAssetLoad_Return) == 0x000D12, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnCharacterAssetLoad_Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetHitManager_Manager) == 0x000D18, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetHitManager_Manager_1) == 0x000D20, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetHitManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_SetDelayDeath_dummy) == 0x000D28, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_SetDelayDeath_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_finisher) == 0x000D30, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_finisher' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_hitResult) == 0x000D38, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_hitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_damage) == 0x000EF8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetPlayerManager_PlayerManager) == 0x000F00, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000F08, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_bSuccess_3) == 0x000F18, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_4) == 0x000F19, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x000F20, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_bSuccess_4) == 0x000F30, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_5) == 0x000F31, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_7) == 0x000F32, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetBattleManager_BattleManager) == 0x000F38, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetBattleManager_BattleManager_1) == 0x000F40, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetBattleManager_BattleManager_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_EndPlayReason) == 0x000F48, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_7) == 0x000F49, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_bad_state_1) == 0x000F4A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_bad_state_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_attacker) == 0x000F50, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_attacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnemy_bEnemy_1) == 0x000F58, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnemy_bEnemy_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000F59, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_SwitchEnum_CmpSuccess) == 0x000F5A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetPlayerManager_PlayerManager_1) == 0x000F60, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_bad_state) == 0x000F68, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_bad_state' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_SwitchEnum_CmpSuccess_1) == 0x000F69, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnableCharacterTick_bEnable) == 0x000F6A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnableCharacterTick_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetHUDMainGame_HUDMainGame_1) == 0x000F70, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetHUDMainGame_HUDMainGame_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnemy_bEnemy_2) == 0x000F78, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnemy_bEnemy_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetPlayerManager_PlayerManager_2) == 0x000F80, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetPlayerManager_PlayerManager_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_InitializeDifficulty_bDummy) == 0x000F88, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_InitializeDifficulty_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_8) == 0x000F89, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_CreateDelegate_OutputDelegate_3) == 0x000F8C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_SetAttackHitStop_bDummy) == 0x000F9C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_SetAttackHitStop_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_SetAttackHitStop_bDummy_1) == 0x000F9D, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_SetAttackHitStop_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetEnemyManager_Manager_1) == 0x000FA0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_6) == 0x000FA8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_LeaveBrainCrashAccess_Dummy) == 0x000FA9, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_LeaveBrainCrashAccess_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnemy_bEnemy_3) == 0x000FAA, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnemy_bEnemy_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_ComponentBoundEvent_Result) == 0x000FB0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_ComponentBoundEvent_Result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_8) == 0x001170, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_OnAttackActorHit_Dummy_1) == 0x001171, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_OnAttackActorHit_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser_1) == 0x001178, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker_1) == 0x001180, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_EndType_1) == 0x001181, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_EndType_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_BrainFieldUser) == 0x001188, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_IsAttacker) == 0x001190, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_EndType) == 0x001191, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_EndType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_7) == 0x001192, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_8) == 0x001193, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_CreateDelegate_OutputDelegate_4) == 0x001194, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Has_Been_Initd_Variable_9) == 0x0011A4, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Has_Been_Initd_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_CreateDelegate_OutputDelegate_5) == 0x0011A8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_noDeadEvent) == 0x0011B8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_noDeadEvent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_noCrashChanceEvent) == 0x0011B9, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_noCrashChanceEvent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_Variable) == 0x0011BA, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_Particle_1) == 0x0011C0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_Particle_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Select_Default) == 0x0011C8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_Particle) == 0x0011D8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_Particle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnemy_bEnemy_4) == 0x0011E0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnemy_bEnemy_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_1) == 0x0011E8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_9) == 0x0011F0, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_2) == 0x0011F8, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_10) == 0x001200, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsBadStateEndless_ReturnValue) == 0x001201, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsBadStateEndless_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_Event_bBeginActor) == 0x001202, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_Event_bBeginActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetEnemyManager_Manager_2) == 0x001208, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetEnemyManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_3) == 0x001210, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_11) == 0x001218, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_12) == 0x001219, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsMissionActive_ReturnValue_1) == 0x00121A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsMissionActive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, Temp_bool_IsClosed_Variable_9) == 0x00121B, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::Temp_bool_IsClosed_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsEnemy_bEnemy_5) == 0x00121C, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsEnemy_bEnemy_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_GetDebuggingManager_Manager) == 0x001220, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x001228, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, K2Node_DynamicCast_bSuccess_5) == 0x001238, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsValid_ReturnValue_13) == 0x001239, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter, CallFunc_IsBossEnemy_bBoss_1) == 0x00123A, "Member 'RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter::CallFunc_IsBossEnemy_bBoss_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_OnBrainCrashStart final
{
public:
	bool                                          bBeginActor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnBrainCrashStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_OnBrainCrashStart");
static_assert(sizeof(RSBattleCharacter_C_OnBrainCrashStart) == 0x000001, "Wrong size on RSBattleCharacter_C_OnBrainCrashStart");
static_assert(offsetof(RSBattleCharacter_C_OnBrainCrashStart, bBeginActor) == 0x000000, "Member 'RSBattleCharacter_C_OnBrainCrashStart::bBeginActor' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RegisterEffectInterface
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_RegisterEffectInterface final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_RegisterEffectInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RegisterEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_RegisterEffectInterface) == 0x000008, "Wrong size on RSBattleCharacter_C_RegisterEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_RegisterEffectInterface, Particle) == 0x000000, "Member 'RSBattleCharacter_C_RegisterEffectInterface::Particle' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RegisterInterruptTelepoEffectInterface
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface) == 0x000008, "Wrong size on RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface, Particle) == 0x000000, "Member 'RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface::Particle' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetNoCrashChanceEvent
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetNoCrashChanceEvent final
{
public:
	bool                                          NoCrashChanceEvent;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetNoCrashChanceEvent) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetNoCrashChanceEvent");
static_assert(sizeof(RSBattleCharacter_C_SetNoCrashChanceEvent) == 0x000001, "Wrong size on RSBattleCharacter_C_SetNoCrashChanceEvent");
static_assert(offsetof(RSBattleCharacter_C_SetNoCrashChanceEvent, NoCrashChanceEvent) == 0x000000, "Member 'RSBattleCharacter_C_SetNoCrashChanceEvent::NoCrashChanceEvent' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetNoDeadEvent
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetNoDeadEvent final
{
public:
	bool                                          NoDeadEvent;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetNoDeadEvent) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetNoDeadEvent");
static_assert(sizeof(RSBattleCharacter_C_SetNoDeadEvent) == 0x000001, "Wrong size on RSBattleCharacter_C_SetNoDeadEvent");
static_assert(offsetof(RSBattleCharacter_C_SetNoDeadEvent, NoDeadEvent) == 0x000000, "Member 'RSBattleCharacter_C_SetNoDeadEvent::NoDeadEvent' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldCloseEnd
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldCloseEnd final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldCloseEnd) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldCloseEnd");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldCloseEnd) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldCloseEnd");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldCloseEnd, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldCloseEnd::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldCloseEnd, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldCloseEnd::IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldCloseEnd, EndType) == 0x000009, "Member 'RSBattleCharacter_C_BrainFieldCloseEnd::EndType' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldCloseStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldCloseStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldCloseStart) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldCloseStart");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldCloseStart) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldCloseStart");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldCloseStart, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldCloseStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldCloseStart, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldCloseStart::IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldCloseStart, EndType) == 0x000009, "Member 'RSBattleCharacter_C_BrainFieldCloseStart::EndType' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature final
{
public:
	EHCBadState                                   bad_state;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature) == 0x000001, "Wrong size on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature, bad_state) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature::bad_state' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature final
{
public:
	EHCBadState                                   bad_state;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F0E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature) == 0x000010, "Wrong size on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature, bad_state) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature::bad_state' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature, Attacker) == 0x000008, "Member 'RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature::Attacker' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on RSBattleCharacter_C_ReceiveEndPlay");
static_assert(sizeof(RSBattleCharacter_C_ReceiveEndPlay) == 0x000001, "Wrong size on RSBattleCharacter_C_ReceiveEndPlay");
static_assert(offsetof(RSBattleCharacter_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'RSBattleCharacter_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature) == 0x0001C8, "Wrong size on RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature::Damage' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature final
{
public:
	class AActor*                                 Finisher;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature) == 0x000008, "Wrong size on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature, Finisher) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature::Finisher' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F0F[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature final
{
public:
	int32                                         Current_hp;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         base_hp;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature) == 0x000008, "Wrong size on RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature, Current_hp) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature::Current_hp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature, base_hp) == 0x000004, "Member 'RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature::base_hp' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature) == 0x0001C8, "Wrong size on RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature::Damage' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature) == 0x0001C8, "Wrong size on RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature::Damage' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_ReceiveTick) == 0x000004, "Wrong alignment on RSBattleCharacter_C_ReceiveTick");
static_assert(sizeof(RSBattleCharacter_C_ReceiveTick) == 0x000004, "Wrong size on RSBattleCharacter_C_ReceiveTick");
static_assert(offsetof(RSBattleCharacter_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'RSBattleCharacter_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetGhostActive
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetGhostActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetGhostActive) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetGhostActive");
static_assert(sizeof(RSBattleCharacter_C_SetGhostActive) == 0x000001, "Wrong size on RSBattleCharacter_C_SetGhostActive");
static_assert(offsetof(RSBattleCharacter_C_SetGhostActive, Active) == 0x000000, "Member 'RSBattleCharacter_C_SetGhostActive::Active' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnGhostOneShot
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_OnGhostOneShot final
{
public:
	float                                         AliveTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnGhostOneShot) == 0x000004, "Wrong alignment on RSBattleCharacter_C_OnGhostOneShot");
static_assert(sizeof(RSBattleCharacter_C_OnGhostOneShot) == 0x000004, "Wrong size on RSBattleCharacter_C_OnGhostOneShot");
static_assert(offsetof(RSBattleCharacter_C_OnGhostOneShot, AliveTime) == 0x000000, "Member 'RSBattleCharacter_C_OnGhostOneShot::AliveTime' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashEnd
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_OnBrainCrashEnd final
{
public:
	bool                                          bBeginActor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F10[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PlayerEndMontage;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnBrainCrashEnd) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnBrainCrashEnd");
static_assert(sizeof(RSBattleCharacter_C_OnBrainCrashEnd) == 0x000010, "Wrong size on RSBattleCharacter_C_OnBrainCrashEnd");
static_assert(offsetof(RSBattleCharacter_C_OnBrainCrashEnd, bBeginActor) == 0x000000, "Member 'RSBattleCharacter_C_OnBrainCrashEnd::bBeginActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBrainCrashEnd, PlayerEndMontage) == 0x000008, "Member 'RSBattleCharacter_C_OnBrainCrashEnd::PlayerEndMontage' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetInvalidDamageInterface
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetInvalidDamageInterface final
{
public:
	bool                                          bInvalidDamage;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F11[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetInvalidDamageInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetInvalidDamageInterface");
static_assert(sizeof(RSBattleCharacter_C_SetInvalidDamageInterface) == 0x000010, "Wrong size on RSBattleCharacter_C_SetInvalidDamageInterface");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamageInterface, bInvalidDamage) == 0x000000, "Member 'RSBattleCharacter_C_SetInvalidDamageInterface::bInvalidDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamageInterface, ClaimantName) == 0x000004, "Member 'RSBattleCharacter_C_SetInvalidDamageInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamageInterface, Param) == 0x00000C, "Member 'RSBattleCharacter_C_SetInvalidDamageInterface::Param' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ProcDamageBefore
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_ProcDamageBefore final
{
public:
	bool                                          IgnoreAutoSasMetal;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ProcDamageBefore) == 0x000001, "Wrong alignment on RSBattleCharacter_C_ProcDamageBefore");
static_assert(sizeof(RSBattleCharacter_C_ProcDamageBefore) == 0x000001, "Wrong size on RSBattleCharacter_C_ProcDamageBefore");
static_assert(offsetof(RSBattleCharacter_C_ProcDamageBefore, IgnoreAutoSasMetal) == 0x000000, "Member 'RSBattleCharacter_C_ProcDamageBefore::IgnoreAutoSasMetal' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ProcDamageActorHit
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_ProcDamageActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_ProcDamageActorHit) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ProcDamageActorHit");
static_assert(sizeof(RSBattleCharacter_C_ProcDamageActorHit) == 0x0001C0, "Wrong size on RSBattleCharacter_C_ProcDamageActorHit");
static_assert(offsetof(RSBattleCharacter_C_ProcDamageActorHit, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_ProcDamageActorHit::HitResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ProcDamageAfter
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_ProcDamageAfter final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_ProcDamageAfter) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ProcDamageAfter");
static_assert(sizeof(RSBattleCharacter_C_ProcDamageAfter) == 0x000010, "Wrong size on RSBattleCharacter_C_ProcDamageAfter");
static_assert(offsetof(RSBattleCharacter_C_ProcDamageAfter, Result) == 0x000000, "Member 'RSBattleCharacter_C_ProcDamageAfter::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashDamage;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePointKind                              Kind;                                              // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCritical;                                        // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeakhit;                                         // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsStealthCritical;                                 // 0x0017(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrash;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F12[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature) == 0x000028, "Wrong size on RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, Location) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, Damage) == 0x00000C, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, CrashDamage) == 0x000010, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::CrashDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, Kind) == 0x000014, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::Kind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, IsCritical) == 0x000015, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::IsCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, IsWeakhit) == 0x000016, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::IsWeakhit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, IsStealthCritical) == 0x000017, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::IsStealthCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, IsBrainCrash) == 0x000018, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::IsBrainCrash' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature, AttackActor) == 0x000020, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature::AttackActor' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDamage;                                          // 0x01C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature) == 0x0001C8, "Wrong size on RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature, IsDamage) == 0x0001C4, "Member 'RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature::IsDamage' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature");
static_assert(sizeof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature) == 0x0001C0, "Wrong size on RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature");
static_assert(offsetof(RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature, Result) == 0x000000, "Member 'RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCounterWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetCounterWait final
{
public:
	bool                                          Wait_on_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetCounterWait) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetCounterWait");
static_assert(sizeof(RSBattleCharacter_C_SetCounterWait) == 0x000001, "Wrong size on RSBattleCharacter_C_SetCounterWait");
static_assert(offsetof(RSBattleCharacter_C_SetCounterWait, Wait_on_in) == 0x000000, "Member 'RSBattleCharacter_C_SetCounterWait::Wait_on_in' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldOverrideStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldOverrideStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldOverrideStart) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldOverrideStart");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldOverrideStart) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldOverrideStart");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldOverrideStart, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldOverrideStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldOverrideStart, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldOverrideStart::IsAttacker' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldMoveNormalField
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldMoveNormalField final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldMoveNormalField) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldMoveNormalField");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldMoveNormalField) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldMoveNormalField");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldMoveNormalField, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldMoveNormalField::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldMoveNormalField, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldMoveNormalField::IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldMoveNormalField, EndType) == 0x000009, "Member 'RSBattleCharacter_C_BrainFieldMoveNormalField::EndType' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldMoveBrainField
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldMoveBrainField final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldMoveBrainField) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldMoveBrainField");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldMoveBrainField) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldMoveBrainField");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldMoveBrainField, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldMoveBrainField::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldMoveBrainField, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldMoveBrainField::IsAttacker' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldOpenEnd
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldOpenEnd final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldOpenEnd) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldOpenEnd");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldOpenEnd) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldOpenEnd");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldOpenEnd, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldOpenEnd::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldOpenEnd, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldOpenEnd::IsAttacker' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldOpenStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BrainFieldOpenStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BrainFieldOpenStart) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BrainFieldOpenStart");
static_assert(sizeof(RSBattleCharacter_C_BrainFieldOpenStart) == 0x000010, "Wrong size on RSBattleCharacter_C_BrainFieldOpenStart");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldOpenStart, BrainFieldUser) == 0x000000, "Member 'RSBattleCharacter_C_BrainFieldOpenStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainFieldOpenStart, IsAttacker) == 0x000008, "Member 'RSBattleCharacter_C_BrainFieldOpenStart::IsAttacker' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnBonusGhostOneShot
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_OnBonusGhostOneShot final
{
public:
	float                                         AliveTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnBonusGhostOneShot) == 0x000004, "Wrong alignment on RSBattleCharacter_C_OnBonusGhostOneShot");
static_assert(sizeof(RSBattleCharacter_C_OnBonusGhostOneShot) == 0x000004, "Wrong size on RSBattleCharacter_C_OnBonusGhostOneShot");
static_assert(offsetof(RSBattleCharacter_C_OnBonusGhostOneShot, AliveTime) == 0x000000, "Member 'RSBattleCharacter_C_OnBonusGhostOneShot::AliveTime' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnBonusGhostFromDT
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_OnBonusGhostFromDT final
{
public:
	EBonusGhostType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnBonusGhostFromDT) == 0x000001, "Wrong alignment on RSBattleCharacter_C_OnBonusGhostFromDT");
static_assert(sizeof(RSBattleCharacter_C_OnBonusGhostFromDT) == 0x000001, "Wrong size on RSBattleCharacter_C_OnBonusGhostFromDT");
static_assert(offsetof(RSBattleCharacter_C_OnBonusGhostFromDT, Type) == 0x000000, "Member 'RSBattleCharacter_C_OnBonusGhostFromDT::Type' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnBonusGhost
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_OnBonusGhost final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnBonusGhost) == 0x000004, "Wrong alignment on RSBattleCharacter_C_OnBonusGhost");
static_assert(sizeof(RSBattleCharacter_C_OnBonusGhost) == 0x000004, "Wrong size on RSBattleCharacter_C_OnBonusGhost");
static_assert(offsetof(RSBattleCharacter_C_OnBonusGhost, Time) == 0x000000, "Member 'RSBattleCharacter_C_OnBonusGhost::Time' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EventPhysicsIdling
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_EventPhysicsIdling final
{
public:
	float                                         IdlingSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleRestoreDelay;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_EventPhysicsIdling) == 0x000004, "Wrong alignment on RSBattleCharacter_C_EventPhysicsIdling");
static_assert(sizeof(RSBattleCharacter_C_EventPhysicsIdling) == 0x000008, "Wrong size on RSBattleCharacter_C_EventPhysicsIdling");
static_assert(offsetof(RSBattleCharacter_C_EventPhysicsIdling, IdlingSec) == 0x000000, "Member 'RSBattleCharacter_C_EventPhysicsIdling::IdlingSec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventPhysicsIdling, IdleRestoreDelay) == 0x000004, "Member 'RSBattleCharacter_C_EventPhysicsIdling::IdleRestoreDelay' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DebugMovementModePrint
// 0x0128 (0x0128 - 0x0000)
struct RSBattleCharacter_C_DebugMovementModePrint final
{
public:
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Temp_byte_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F13[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0088(0x0018)()
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00B0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0100(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_DebugMovementModePrint) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DebugMovementModePrint");
static_assert(sizeof(RSBattleCharacter_C_DebugMovementModePrint) == 0x000128, "Wrong size on RSBattleCharacter_C_DebugMovementModePrint");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable) == 0x000000, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable_1) == 0x000010, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable_2) == 0x000020, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable_3) == 0x000030, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable_4) == 0x000040, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable_5) == 0x000050, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_struct_Variable_6) == 0x000060, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, Temp_byte_Variable) == 0x000070, "Member 'RSBattleCharacter_C_DebugMovementModePrint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000078, "Member 'RSBattleCharacter_C_DebugMovementModePrint::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, CallFunc_Conv_StringToText_ReturnValue) == 0x000088, "Member 'RSBattleCharacter_C_DebugMovementModePrint::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, K2Node_Select_Default) == 0x0000A0, "Member 'RSBattleCharacter_C_DebugMovementModePrint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, K2Node_MakeStruct_FormatArgumentData) == 0x0000B0, "Member 'RSBattleCharacter_C_DebugMovementModePrint::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, K2Node_MakeArray_Array) == 0x0000F0, "Member 'RSBattleCharacter_C_DebugMovementModePrint::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, CallFunc_Format_ReturnValue) == 0x000100, "Member 'RSBattleCharacter_C_DebugMovementModePrint::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugMovementModePrint, CallFunc_Conv_TextToString_ReturnValue) == 0x000118, "Member 'RSBattleCharacter_C_DebugMovementModePrint::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_OnDead final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnDead) == 0x000001, "Wrong alignment on RSBattleCharacter_C_OnDead");
static_assert(sizeof(RSBattleCharacter_C_OnDead) == 0x000001, "Wrong size on RSBattleCharacter_C_OnDead");
static_assert(offsetof(RSBattleCharacter_C_OnDead, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_OnDead::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnDeadCoreBattleChara
// 0x0070 (0x0070 - 0x0000)
struct RSBattleCharacter_C_OnDeadCoreBattleChara final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F14[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F15[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F16[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyListRef_ReturnValue;              // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F17[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F18[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnDeadCoreBattleChara) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnDeadCoreBattleChara");
static_assert(sizeof(RSBattleCharacter_C_OnDeadCoreBattleChara) == 0x000070, "Wrong size on RSBattleCharacter_C_OnDeadCoreBattleChara");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, Temp_bool_True_if_break_was_hit_Variable) == 0x000004, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_IsMissionActive_ReturnValue) == 0x000019, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_IsEnemy_bEnemy) == 0x00001A, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_GetEnemyManager_Manager) == 0x000020, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_GetEnemyListRef_ReturnValue) == 0x000030, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_GetEnemyListRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_Array_Get_Item) == 0x000040, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000050, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_IsDead_bDead) == 0x000062, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_BooleanAND_ReturnValue) == 0x000063, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_IsValid_ReturnValue_2) == 0x000064, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDeadCoreBattleChara, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00006C, "Member 'RSBattleCharacter_C_OnDeadCoreBattleChara::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnAttackActorHit
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_OnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnAttackActorHit) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnAttackActorHit");
static_assert(sizeof(RSBattleCharacter_C_OnAttackActorHit) == 0x0001C8, "Wrong size on RSBattleCharacter_C_OnAttackActorHit");
static_assert(offsetof(RSBattleCharacter_C_OnAttackActorHit, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_OnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnAttackActorHit, Dummy) == 0x0001C0, "Member 'RSBattleCharacter_C_OnAttackActorHit::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnDamageActorHit
// 0x0528 (0x0528 - 0x0000)
struct RSBattleCharacter_C_OnDamageActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F19[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           LTempResult;                                       // 0x01C8(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	struct FHCSkillCommonInfo                     LTempSkill;                                        // 0x0388(0x00F0)(Edit, BlueprintVisible)
	bool                                          LIsArmor;                                          // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1A[0x3];                                     // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreHpRate;                                         // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRatio;                                            // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bForceCritical;                                    // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDamageArmorBreak_bDummy;                // 0x0482(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1B[0x5];                                     // 0x0483(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0488(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddBattleBonusInterface_bDummy;           // 0x049A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x049B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1C[0x4];                                     // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1D[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x04B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1E[0x6];                                     // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1; // 0x04C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmor_Return;                           // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForceCritical_bResult;                  // 0x04DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1F[0x5];                                     // 0x04DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_2; // 0x04E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForceCritical_bResult_1;                // 0x04F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x04F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F20[0x5];                                     // 0x04F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDebugIgnoreArmor_bIgnoreArmor;          // 0x0501(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F21[0x2];                                     // 0x0502(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0508(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExecGuard_IsExec;                       // 0x0509(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F22[0x2];                                     // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x0510(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F23[0x2];                                     // 0x0512(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F24[0x3];                                     // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_OnDamageActorHit_ReturnValue;             // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnDamageActorHit) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnDamageActorHit");
static_assert(sizeof(RSBattleCharacter_C_OnDamageActorHit) == 0x000528, "Wrong size on RSBattleCharacter_C_OnDamageActorHit");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_OnDamageActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, Dummy) == 0x0001C0, "Member 'RSBattleCharacter_C_OnDamageActorHit::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, LTempResult) == 0x0001C8, "Member 'RSBattleCharacter_C_OnDamageActorHit::LTempResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, LTempSkill) == 0x000388, "Member 'RSBattleCharacter_C_OnDamageActorHit::LTempSkill' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, LIsArmor) == 0x000478, "Member 'RSBattleCharacter_C_OnDamageActorHit::LIsArmor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, PreHpRate) == 0x00047C, "Member 'RSBattleCharacter_C_OnDamageActorHit::PreHpRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, bRatio) == 0x000480, "Member 'RSBattleCharacter_C_OnDamageActorHit::bRatio' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, bForceCritical) == 0x000481, "Member 'RSBattleCharacter_C_OnDamageActorHit::bForceCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_OnDamageArmorBreak_bDummy) == 0x000482, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_OnDamageArmorBreak_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000488, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess) == 0x000498, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue) == 0x000499, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_AddBattleBonusInterface_bDummy) == 0x00049A, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_AddBattleBonusInterface_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00049B, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x0004A0, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess_1) == 0x0004A8, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0004B0, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess_2) == 0x0004C0, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsEnemy_bEnemy) == 0x0004C1, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1) == 0x0004C8, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess_3) == 0x0004D8, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsArmor_Return) == 0x0004D9, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsArmor_Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsForceCritical_bResult) == 0x0004DA, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsForceCritical_bResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_2) == 0x0004E0, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess_4) == 0x0004F0, "Member 'RSBattleCharacter_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsForceCritical_bResult_1) == 0x0004F1, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsForceCritical_bResult_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_BooleanOR_ReturnValue) == 0x0004F2, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_GetDebuggingManager_Manager) == 0x0004F8, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_1) == 0x000500, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsDebugIgnoreArmor_bIgnoreArmor) == 0x000501, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsDebugIgnoreArmor_bIgnoreArmor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_GetHPPercent_ReturnValue) == 0x000504, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, Temp_byte_Variable) == 0x000508, "Member 'RSBattleCharacter_C_OnDamageActorHit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_IsExecGuard_IsExec) == 0x000509, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_IsExecGuard_IsExec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_Array_Find_ReturnValue) == 0x00050C, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, Temp_byte_Variable_1) == 0x000510, "Member 'RSBattleCharacter_C_OnDamageActorHit::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000511, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_Array_Find_ReturnValue_1) == 0x000514, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_Less_IntInt_ReturnValue) == 0x000518, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_OnDamageActorHit_ReturnValue) == 0x00051C, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_OnDamageActorHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamageActorHit, CallFunc_Greater_IntInt_ReturnValue) == 0x000520, "Member 'RSBattleCharacter_C_OnDamageActorHit::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsExecGuard
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsExecGuard final
{
public:
	bool                                          IsExec;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsExecGuard) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsExecGuard");
static_assert(sizeof(RSBattleCharacter_C_IsExecGuard) == 0x000001, "Wrong size on RSBattleCharacter_C_IsExecGuard");
static_assert(offsetof(RSBattleCharacter_C_IsExecGuard, IsExec) == 0x000000, "Member 'RSBattleCharacter_C_IsExecGuard::IsExec' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ShakeCameraInDamage
// 0x0210 (0x0210 - 0x0000)
struct RSBattleCharacter_C_ShakeCameraInDamage final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	float                                         LScale;                                            // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F25[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 L_ShakeClass;                                      // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitCameraShakeType                         L_Type;                                            // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F26[0x6];                                     // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_HitInterface_C>   K2Node_DynamicCast_AsBPI_Hit_Interface;            // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDamageCameraShakeData_bEnable;         // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F27[0x5];                                     // 0x01EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetDamageCameraShakeData_CameraShakeClass; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDamageCameraShakeData_Scale;           // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayShakeCamera_bCanPlay;               // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F28[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ShakeCameraInDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ShakeCameraInDamage");
static_assert(sizeof(RSBattleCharacter_C_ShakeCameraInDamage) == 0x000210, "Wrong size on RSBattleCharacter_C_ShakeCameraInDamage");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, LScale) == 0x0001C0, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::LScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, L_ShakeClass) == 0x0001C8, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::L_ShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, L_Type) == 0x0001D0, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::L_Type' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_IsValidClass_ReturnValue) == 0x0001D1, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, K2Node_DynamicCast_AsBPI_Hit_Interface) == 0x0001D8, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::K2Node_DynamicCast_AsBPI_Hit_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, K2Node_DynamicCast_bSuccess) == 0x0001E8, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_IsValid_ReturnValue) == 0x0001E9, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_GetDamageCameraShakeData_bEnable) == 0x0001EA, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_GetDamageCameraShakeData_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_GetDamageCameraShakeData_CameraShakeClass) == 0x0001F0, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_GetDamageCameraShakeData_CameraShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_GetDamageCameraShakeData_Scale) == 0x0001F8, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_GetDamageCameraShakeData_Scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_IsPlayShakeCamera_bCanPlay) == 0x0001FC, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_IsPlayShakeCamera_bCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_GetPlayerController_ReturnValue) == 0x000200, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, K2Node_SwitchEnum_CmpSuccess) == 0x000208, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamage, CallFunc_IsValid_ReturnValue_1) == 0x000209, "Member 'RSBattleCharacter_C_ShakeCameraInDamage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetBulletAimTarget
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetBulletAimTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetBulletAimTarget) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetBulletAimTarget");
static_assert(sizeof(RSBattleCharacter_C_GetBulletAimTarget) == 0x000008, "Wrong size on RSBattleCharacter_C_GetBulletAimTarget");
static_assert(offsetof(RSBattleCharacter_C_GetBulletAimTarget, Target) == 0x000000, "Member 'RSBattleCharacter_C_GetBulletAimTarget::Target' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StartDamageAnimFunc
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_StartDamageAnimFunc final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	int32                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x01C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x01C5(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StartDamageAnimFunc) == 0x000008, "Wrong alignment on RSBattleCharacter_C_StartDamageAnimFunc");
static_assert(sizeof(RSBattleCharacter_C_StartDamageAnimFunc) == 0x0001C8, "Wrong size on RSBattleCharacter_C_StartDamageAnimFunc");
static_assert(offsetof(RSBattleCharacter_C_StartDamageAnimFunc, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_StartDamageAnimFunc::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartDamageAnimFunc, DamageValue) == 0x0001C0, "Member 'RSBattleCharacter_C_StartDamageAnimFunc::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartDamageAnimFunc, IsDown) == 0x0001C4, "Member 'RSBattleCharacter_C_StartDamageAnimFunc::IsDown' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartDamageAnimFunc, Dummy) == 0x0001C5, "Member 'RSBattleCharacter_C_StartDamageAnimFunc::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnDamaging
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_OnDamaging final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	float                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x01C4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnDamaging) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnDamaging");
static_assert(sizeof(RSBattleCharacter_C_OnDamaging) == 0x0001C8, "Wrong size on RSBattleCharacter_C_OnDamaging");
static_assert(offsetof(RSBattleCharacter_C_OnDamaging, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_OnDamaging::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamaging, DamageValue) == 0x0001C0, "Member 'RSBattleCharacter_C_OnDamaging::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnDamaging, Dummy) == 0x0001C4, "Member 'RSBattleCharacter_C_OnDamaging::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.Revive
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_Revive final
{
public:
	bool                                          CallFunc_OnRevive_Dummy;                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_Revive) == 0x000001, "Wrong alignment on RSBattleCharacter_C_Revive");
static_assert(sizeof(RSBattleCharacter_C_Revive) == 0x000001, "Wrong size on RSBattleCharacter_C_Revive");
static_assert(offsetof(RSBattleCharacter_C_Revive, CallFunc_OnRevive_Dummy) == 0x000000, "Member 'RSBattleCharacter_C_Revive::CallFunc_OnRevive_Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnRevive
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_OnRevive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnRevive) == 0x000001, "Wrong alignment on RSBattleCharacter_C_OnRevive");
static_assert(sizeof(RSBattleCharacter_C_OnRevive) == 0x000001, "Wrong size on RSBattleCharacter_C_OnRevive");
static_assert(offsetof(RSBattleCharacter_C_OnRevive, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_OnRevive::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBattling
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetBattling final
{
public:
	bool                                          bBattling;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetBattling) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetBattling");
static_assert(sizeof(RSBattleCharacter_C_SetBattling) == 0x000002, "Wrong size on RSBattleCharacter_C_SetBattling");
static_assert(offsetof(RSBattleCharacter_C_SetBattling, bBattling) == 0x000000, "Member 'RSBattleCharacter_C_SetBattling::bBattling' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattling, Dummy) == 0x000001, "Member 'RSBattleCharacter_C_SetBattling::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharactersParameterTable
// 0x05F0 (0x05F0 - 0x0000)
struct RSBattleCharacter_C_GetCharactersParameterTable final
{
public:
	struct FCharactersParameter                   Param;                                             // 0x0000(0x01F8)(Parm, OutParm, HasGetValueTypeHash)
	struct FCharactersParameter                   Data;                                              // 0x01F8(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x03F0(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetCharactersParameterTable) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharactersParameterTable");
static_assert(sizeof(RSBattleCharacter_C_GetCharactersParameterTable) == 0x0005F0, "Wrong size on RSBattleCharacter_C_GetCharactersParameterTable");
static_assert(offsetof(RSBattleCharacter_C_GetCharactersParameterTable, Param) == 0x000000, "Member 'RSBattleCharacter_C_GetCharactersParameterTable::Param' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharactersParameterTable, Data) == 0x0001F8, "Member 'RSBattleCharacter_C_GetCharactersParameterTable::Data' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharactersParameterTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x0003F0, "Member 'RSBattleCharacter_C_GetCharactersParameterTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharactersParameterTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0005E8, "Member 'RSBattleCharacter_C_GetCharactersParameterTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCharactersParameterAll
// 0x03F0 (0x03F0 - 0x0000)
struct RSBattleCharacter_C_SetCharactersParameterAll final
{
public:
	struct FCharactersParameterTable              L_param;                                           // 0x0000(0x01F8)(Edit, BlueprintVisible)
	struct FCharactersParameter                   CallFunc_GetCharactersParameterTable_param;        // 0x01F8(0x01F8)(HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetCharactersParameterAll) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetCharactersParameterAll");
static_assert(sizeof(RSBattleCharacter_C_SetCharactersParameterAll) == 0x0003F0, "Wrong size on RSBattleCharacter_C_SetCharactersParameterAll");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterAll, L_param) == 0x000000, "Member 'RSBattleCharacter_C_SetCharactersParameterAll::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterAll, CallFunc_GetCharactersParameterTable_param) == 0x0001F8, "Member 'RSBattleCharacter_C_SetCharactersParameterAll::CallFunc_GetCharactersParameterTable_param' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHitNearCharacter
// 0x0228 (0x0228 - 0x0000)
struct RSBattleCharacter_C_GetHitNearCharacter final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F29[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actor;                                             // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<float>                                 Distance;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         ArraySort;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         Array;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjType;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2A[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0078(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MinOfFloatArray_IndexOfMinValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MinOfFloatArray_MinValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2B[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F2C[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x00D8(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F2D[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F2E[0x1];                                     // 0x017B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2F[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F30[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetHitNearCharacter) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetHitNearCharacter");
static_assert(sizeof(RSBattleCharacter_C_GetHitNearCharacter) == 0x000228, "Wrong size on RSBattleCharacter_C_GetHitNearCharacter");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Length) == 0x000000, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Length' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Actor) == 0x000008, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Distance) == 0x000018, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, ArraySort) == 0x000028, "Member 'RSBattleCharacter_C_GetHitNearCharacter::ArraySort' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Array) == 0x000038, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, ObjType) == 0x000048, "Member 'RSBattleCharacter_C_GetHitNearCharacter::ObjType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Temp_int_Array_Index_Variable) == 0x000060, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, K2Node_MakeArray_Array) == 0x000068, "Member 'RSBattleCharacter_C_GetHitNearCharacter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, Temp_object_Variable) == 0x000078, "Member 'RSBattleCharacter_C_GetHitNearCharacter::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000088, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_MinOfFloatArray_IndexOfMinValue) == 0x000094, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_MinOfFloatArray_IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_MinOfFloatArray_MinValue) == 0x000098, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_MinOfFloatArray_MinValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Length_ReturnValue) == 0x0000AC, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Greater_IntInt_ReturnValue) == 0x0000BC, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000C0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Add_VectorVector_ReturnValue) == 0x0000CC, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x0000D8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x0000E8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Length_ReturnValue_1) == 0x0000EC, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_bBlockingHit) == 0x000179, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_bInitialOverlap) == 0x00017A, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_Time) == 0x00017C, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_Distance) == 0x000180, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_Location) == 0x000184, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_ImpactPoint) == 0x000190, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_Normal) == 0x00019C, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_HitItem) == 0x0001D8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_FaceIndex) == 0x0001DC, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_TraceStart) == 0x0001E0, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_BreakHitResult_TraceEnd) == 0x0001EC, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, K2Node_DynamicCast_AsRSBattle_Character) == 0x0001F8, "Member 'RSBattleCharacter_C_GetHitNearCharacter::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'RSBattleCharacter_C_GetHitNearCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Add_ReturnValue_1) == 0x000204, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000208, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000214, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_VSizeSquared_ReturnValue) == 0x000220, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHitNearCharacter, CallFunc_Array_Add_ReturnValue_2) == 0x000224, "Member 'RSBattleCharacter_C_GetHitNearCharacter::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DamageAfter
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_DamageAfter final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_DamageAfter) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DamageAfter");
static_assert(sizeof(RSBattleCharacter_C_DamageAfter) == 0x000010, "Wrong size on RSBattleCharacter_C_DamageAfter");
static_assert(offsetof(RSBattleCharacter_C_DamageAfter, Result) == 0x000000, "Member 'RSBattleCharacter_C_DamageAfter::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHateParamTable
// 0x0184 (0x0184 - 0x0000)
struct RSBattleCharacter_C_GetHateParamTable final
{
public:
	struct FHateParamData                         Return;                                            // 0x0000(0x0080)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FHateParamData                         Data;                                              // 0x0080(0x0080)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FHateParamData                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0100(0x0080)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetHateParamTable) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetHateParamTable");
static_assert(sizeof(RSBattleCharacter_C_GetHateParamTable) == 0x000184, "Wrong size on RSBattleCharacter_C_GetHateParamTable");
static_assert(offsetof(RSBattleCharacter_C_GetHateParamTable, Return) == 0x000000, "Member 'RSBattleCharacter_C_GetHateParamTable::Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHateParamTable, Data) == 0x000080, "Member 'RSBattleCharacter_C_GetHateParamTable::Data' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHateParamTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x000100, "Member 'RSBattleCharacter_C_GetHateParamTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHateParamTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000180, "Member 'RSBattleCharacter_C_GetHateParamTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetHateParam
// 0x0080 (0x0080 - 0x0000)
struct RSBattleCharacter_C_SetHateParam final
{
public:
	struct FHateParamData                         CallFunc_GetHateParamTable_return;                 // 0x0000(0x0080)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetHateParam) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetHateParam");
static_assert(sizeof(RSBattleCharacter_C_SetHateParam) == 0x000080, "Wrong size on RSBattleCharacter_C_SetHateParam");
static_assert(offsetof(RSBattleCharacter_C_SetHateParam, CallFunc_GetHateParamTable_return) == 0x000000, "Member 'RSBattleCharacter_C_SetHateParam::CallFunc_GetHateParamTable_return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.PreTick
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_PreTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_PreTick) == 0x000004, "Wrong alignment on RSBattleCharacter_C_PreTick");
static_assert(sizeof(RSBattleCharacter_C_PreTick) == 0x000008, "Wrong size on RSBattleCharacter_C_PreTick");
static_assert(offsetof(RSBattleCharacter_C_PreTick, DeltaSeconds) == 0x000000, "Member 'RSBattleCharacter_C_PreTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PreTick, Dummy) == 0x000004, "Member 'RSBattleCharacter_C_PreTick::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.MainTick
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_MainTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F31[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F32[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateCameraDither_CameraDither;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateMaterialVisibility_ChangeVisibility; // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateMaterialVisibility_NewVisibility;   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateBadStateEffect_bDummy;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_MainTick) == 0x000008, "Wrong alignment on RSBattleCharacter_C_MainTick");
static_assert(sizeof(RSBattleCharacter_C_MainTick) == 0x000028, "Wrong size on RSBattleCharacter_C_MainTick");
static_assert(offsetof(RSBattleCharacter_C_MainTick, DeltaSeconds) == 0x000000, "Member 'RSBattleCharacter_C_MainTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, Dummy) == 0x000004, "Member 'RSBattleCharacter_C_MainTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_SetEmphasisCrashGauge_ReturnValue) == 0x000005, "Member 'RSBattleCharacter_C_MainTick::CallFunc_SetEmphasisCrashGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_MainTick::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'RSBattleCharacter_C_MainTick::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_UpdateCameraDither_CameraDither) == 0x000018, "Member 'RSBattleCharacter_C_MainTick::CallFunc_UpdateCameraDither_CameraDither' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_MainTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_UpdateMaterialVisibility_ChangeVisibility) == 0x00001D, "Member 'RSBattleCharacter_C_MainTick::CallFunc_UpdateMaterialVisibility_ChangeVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_UpdateMaterialVisibility_NewVisibility) == 0x00001E, "Member 'RSBattleCharacter_C_MainTick::CallFunc_UpdateMaterialVisibility_NewVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001F, "Member 'RSBattleCharacter_C_MainTick::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000020, "Member 'RSBattleCharacter_C_MainTick::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MainTick, CallFunc_UpdateBadStateEffect_bDummy) == 0x000021, "Member 'RSBattleCharacter_C_MainTick::CallFunc_UpdateBadStateEffect_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.PostTick
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_PostTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_PostTick) == 0x000004, "Wrong alignment on RSBattleCharacter_C_PostTick");
static_assert(sizeof(RSBattleCharacter_C_PostTick) == 0x000008, "Wrong size on RSBattleCharacter_C_PostTick");
static_assert(offsetof(RSBattleCharacter_C_PostTick, DeltaSeconds) == 0x000000, "Member 'RSBattleCharacter_C_PostTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PostTick, Dummy) == 0x000004, "Member 'RSBattleCharacter_C_PostTick::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetRootMotionMode
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_SetRootMotionMode final
{
public:
	ERootMotionMode                               Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F33[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F34[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetRootMotionMode) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetRootMotionMode");
static_assert(sizeof(RSBattleCharacter_C_SetRootMotionMode) == 0x000028, "Wrong size on RSBattleCharacter_C_SetRootMotionMode");
static_assert(offsetof(RSBattleCharacter_C_SetRootMotionMode, Mode) == 0x000000, "Member 'RSBattleCharacter_C_SetRootMotionMode::Mode' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRootMotionMode, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattleCharacter_C_SetRootMotionMode::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRootMotionMode, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetRootMotionMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRootMotionMode, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_SetRootMotionMode::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRootMotionMode, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattleCharacter_C_SetRootMotionMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AddRandomLocation
// 0x006C (0x006C - 0x0000)
struct RSBattleCharacter_C_AddRandomLocation final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Return;                                            // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_2;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_AddRandomLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_AddRandomLocation");
static_assert(sizeof(RSBattleCharacter_C_AddRandomLocation) == 0x00006C, "Wrong size on RSBattleCharacter_C_AddRandomLocation");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, Vector) == 0x000000, "Member 'RSBattleCharacter_C_AddRandomLocation::Vector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, Return) == 0x00000C, "Member 'RSBattleCharacter_C_AddRandomLocation::Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_RandomInteger_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_RandomInteger_ReturnValue_1) == 0x00001C, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Multiply_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000024, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00002C, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_RandomFloatInRange_ReturnValue) == 0x000030, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000034, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000038, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x00003C, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_RandomInteger_ReturnValue_2) == 0x000040, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_RandomInteger_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000044, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000048, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x00004C, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x000050, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_MakeVector_ReturnValue) == 0x000054, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddRandomLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'RSBattleCharacter_C_AddRandomLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetInvalidDamage
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_SetInvalidDamage final
{
public:
	bool                                          bInvalid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F35[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetInvalidDamage) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetInvalidDamage");
static_assert(sizeof(RSBattleCharacter_C_SetInvalidDamage) == 0x000014, "Wrong size on RSBattleCharacter_C_SetInvalidDamage");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamage, bInvalid) == 0x000000, "Member 'RSBattleCharacter_C_SetInvalidDamage::bInvalid' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamage, Param) == 0x000004, "Member 'RSBattleCharacter_C_SetInvalidDamage::Param' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamage, ClaimantName) == 0x000008, "Member 'RSBattleCharacter_C_SetInvalidDamage::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamage, Dummy) == 0x000010, "Member 'RSBattleCharacter_C_SetInvalidDamage::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvalidDamage, CallFunc_Map_Remove_ReturnValue) == 0x000011, "Member 'RSBattleCharacter_C_SetInvalidDamage::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.isSuperArmor
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_IsSuperArmor final
{
public:
	bool                                          bSuperArmor;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F36[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsSuperArmor) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsSuperArmor");
static_assert(sizeof(RSBattleCharacter_C_IsSuperArmor) == 0x00000C, "Wrong size on RSBattleCharacter_C_IsSuperArmor");
static_assert(offsetof(RSBattleCharacter_C_IsSuperArmor, bSuperArmor) == 0x000000, "Member 'RSBattleCharacter_C_IsSuperArmor::bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsSuperArmor, CallFunc_Map_Length_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_IsSuperArmor::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsSuperArmor, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsSuperArmor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetSuperArmor
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetSuperArmor final
{
public:
	bool                                          bSuperArmor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F37[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetSuperArmor) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetSuperArmor");
static_assert(sizeof(RSBattleCharacter_C_SetSuperArmor) == 0x000010, "Wrong size on RSBattleCharacter_C_SetSuperArmor");
static_assert(offsetof(RSBattleCharacter_C_SetSuperArmor, bSuperArmor) == 0x000000, "Member 'RSBattleCharacter_C_SetSuperArmor::bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetSuperArmor, ClaimantName) == 0x000004, "Member 'RSBattleCharacter_C_SetSuperArmor::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetSuperArmor, CallFunc_Map_Remove_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetSuperArmor::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.FrameDamage
// 0x0590 (0x0590 - 0x0000)
struct RSBattleCharacter_C_FrameDamage final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LInterval;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     L_SkillCommonInfo;                                 // 0x0008(0x00F0)(Edit, BlueprintVisible)
	struct FHCHitResult                           L_result;                                          // 0x00F8(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          CallFunc_IsEventCondition_ReturnValue;             // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPauseUpdate_ReturnValue;                // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F38[0x1];                                     // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     CallFunc_GetFlameDamageSkill_Skill;                // 0x02C8(0x00F0)()
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x03B8(0x01C0)(ContainsInstancedReference)
	float                                         CallFunc_GetFlameDamageInterval_Interval;          // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_OnDamageActorHit_ReturnValue;             // 0x057C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F39[0x3];                                     // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3A[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_FrameDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_FrameDamage");
static_assert(sizeof(RSBattleCharacter_C_FrameDamage) == 0x000590, "Wrong size on RSBattleCharacter_C_FrameDamage");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, Sec) == 0x000000, "Member 'RSBattleCharacter_C_FrameDamage::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, LInterval) == 0x000004, "Member 'RSBattleCharacter_C_FrameDamage::LInterval' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, L_SkillCommonInfo) == 0x000008, "Member 'RSBattleCharacter_C_FrameDamage::L_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, L_result) == 0x0000F8, "Member 'RSBattleCharacter_C_FrameDamage::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_IsEventCondition_ReturnValue) == 0x0002B8, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_IsEventCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_IsValid_ReturnValue) == 0x0002B9, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_IsPauseUpdate_ReturnValue) == 0x0002BA, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_IsPauseUpdate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002BC, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_GetFlameDamageSkill_Skill) == 0x0002C8, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_GetFlameDamageSkill_Skill' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, K2Node_MakeStruct_HCHitResult) == 0x0003B8, "Member 'RSBattleCharacter_C_FrameDamage::K2Node_MakeStruct_HCHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_GetFlameDamageInterval_Interval) == 0x000578, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_GetFlameDamageInterval_Interval' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_OnDamageActorHit_ReturnValue) == 0x00057C, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_OnDamageActorHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_IsDead_bDead) == 0x000580, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000584, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000588, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FrameDamage, CallFunc_Add_FloatFloat_ReturnValue) == 0x00058C, "Member 'RSBattleCharacter_C_FrameDamage::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOn
// 0x0040 (0x0040 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOn final
{
public:
	EHCBadState                                   bad;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndlessOil_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndlessFlooded_ReturnValue;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndlessFlame_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStateAddParticleData               CallFunc_GetBadStateIconParam_ParamData;           // 0x0008(0x0028)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_BadStateIconOn_Handle;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnCable_bDummy;             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateIconOff_Dummy;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnConfusion_bDummy;         // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnOil_bDummy;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnFlooded_bDummy;           // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnFlame_bDummy;             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnElec_bDummy;              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOn) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOn");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOn) == 0x000040, "Wrong size on RSBattleCharacter_C_BadStateEffectOn");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, bad) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOn::bad' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_IsEndlessOil_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_IsEndlessOil_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_IsEndlessFlooded_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_IsEndlessFlooded_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_IsEndlessFlame_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_IsEndlessFlame_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_GetBadStateIconParam_ParamData) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_GetBadStateIconParam_ParamData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateIconOn_Handle) == 0x000030, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateIconOn_Handle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, K2Node_SwitchEnum_CmpSuccess_1) == 0x000038, "Member 'RSBattleCharacter_C_BadStateEffectOn::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateEffectOnCable_bDummy) == 0x000039, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateEffectOnCable_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateIconOff_Dummy) == 0x00003A, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateIconOff_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateEffectOnConfusion_bDummy) == 0x00003B, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateEffectOnConfusion_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateEffectOnOil_bDummy) == 0x00003C, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateEffectOnOil_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateEffectOnFlooded_bDummy) == 0x00003D, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateEffectOnFlooded_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateEffectOnFlame_bDummy) == 0x00003E, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateEffectOnFlame_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOn, CallFunc_BadStateEffectOnElec_bDummy) == 0x00003F, "Member 'RSBattleCharacter_C_BadStateEffectOn::CallFunc_BadStateEffectOnElec_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOff
// 0x0009 (0x0009 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOff final
{
public:
	EHCBadState                                   bad;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BadStateEffectOffCable_bDummy;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateIconOff_Dummy;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffOil_bDummy;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffConfusion_bDummy;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffFlooded_bDummy;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffElec_bDummy;             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffFlame_bDummy;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOff) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOff");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOff) == 0x000009, "Wrong size on RSBattleCharacter_C_BadStateEffectOff");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, bad) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOff::bad' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateEffectOffCable_bDummy) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateEffectOffCable_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOff::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateIconOff_Dummy) == 0x000003, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateIconOff_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateEffectOffOil_bDummy) == 0x000004, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateEffectOffOil_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateEffectOffConfusion_bDummy) == 0x000005, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateEffectOffConfusion_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateEffectOffFlooded_bDummy) == 0x000006, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateEffectOffFlooded_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateEffectOffElec_bDummy) == 0x000007, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateEffectOffElec_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOff, CallFunc_BadStateEffectOffFlame_bDummy) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOff::CallFunc_BadStateEffectOffFlame_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectAllOff
// 0x001C (0x001C - 0x0000)
struct RSBattleCharacter_C_BadStateEffectAllOff final
{
public:
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectAllOff) == 0x000004, "Wrong alignment on RSBattleCharacter_C_BadStateEffectAllOff");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectAllOff) == 0x00001C, "Wrong size on RSBattleCharacter_C_BadStateEffectAllOff");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_MakeLiteralInt_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, Temp_int_Variable) == 0x000004, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, Temp_int_Variable_1) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_GetValidValue_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000015, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000016, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_Less_IntInt_ReturnValue) == 0x000017, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectAllOff, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_BadStateEffectAllOff::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AddCurrentAttackAttribute
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_AddCurrentAttackAttribute final
{
public:
	EAttackAttribute                              Attribute;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BitFlagOn_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_AddCurrentAttackAttribute) == 0x000004, "Wrong alignment on RSBattleCharacter_C_AddCurrentAttackAttribute");
static_assert(sizeof(RSBattleCharacter_C_AddCurrentAttackAttribute) == 0x00000C, "Wrong size on RSBattleCharacter_C_AddCurrentAttackAttribute");
static_assert(offsetof(RSBattleCharacter_C_AddCurrentAttackAttribute, Attribute) == 0x000000, "Member 'RSBattleCharacter_C_AddCurrentAttackAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddCurrentAttackAttribute, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_AddCurrentAttackAttribute::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddCurrentAttackAttribute, CallFunc_BitFlagOn_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_AddCurrentAttackAttribute::CallFunc_BitFlagOn_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBrainAndBadStatusParam
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_SetBrainAndBadStatusParam final
{
public:
	float                                         BrainCrashTimer;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashMissScale;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetBrainAndBadStatusParam) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetBrainAndBadStatusParam");
static_assert(sizeof(RSBattleCharacter_C_SetBrainAndBadStatusParam) == 0x00000C, "Wrong size on RSBattleCharacter_C_SetBrainAndBadStatusParam");
static_assert(offsetof(RSBattleCharacter_C_SetBrainAndBadStatusParam, BrainCrashTimer) == 0x000000, "Member 'RSBattleCharacter_C_SetBrainAndBadStatusParam::BrainCrashTimer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainAndBadStatusParam, BrainCrashMissScale) == 0x000004, "Member 'RSBattleCharacter_C_SetBrainAndBadStatusParam::BrainCrashMissScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainAndBadStatusParam, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_SetBrainAndBadStatusParam::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainAndBadStatusParam, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000009, "Member 'RSBattleCharacter_C_SetBrainAndBadStatusParam::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffFlame
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOffFlame final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOffFlame) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOffFlame");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOffFlame) == 0x000002, "Wrong size on RSBattleCharacter_C_BadStateEffectOffFlame");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlame, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOffFlame::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlame, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOffFlame::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffElec
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOffElec final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOffElec) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOffElec");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOffElec) == 0x000002, "Wrong size on RSBattleCharacter_C_BadStateEffectOffElec");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffElec, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOffElec::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffElec, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOffElec::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnFlame
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOnFlame final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOnFlame) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOnFlame");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOnFlame) == 0x000010, "Wrong size on RSBattleCharacter_C_BadStateEffectOnFlame");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnFlame, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOnFlame::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattleCharacter_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnFlame, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOnFlame::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnElec
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOnElec final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOnElec) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOnElec");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOnElec) == 0x000010, "Wrong size on RSBattleCharacter_C_BadStateEffectOnElec");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnElec, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOnElec::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnElec, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOnElec::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnElec, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOnElec::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnElec, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattleCharacter_C_BadStateEffectOnElec::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnElec, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOnElec::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnFlooded
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOnFlooded final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOnFlooded) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOnFlooded");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOnFlooded) == 0x000001, "Wrong size on RSBattleCharacter_C_BadStateEffectOnFlooded");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnFlooded, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOnFlooded::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnOil
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOnOil final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOnOil) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOnOil");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOnOil) == 0x000001, "Wrong size on RSBattleCharacter_C_BadStateEffectOnOil");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnOil, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOnOil::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnConfusion
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOnConfusion final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F40[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOnConfusion) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOnConfusion");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOnConfusion) == 0x000010, "Wrong size on RSBattleCharacter_C_BadStateEffectOnConfusion");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnConfusion, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOnConfusion::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnConfusion, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOnConfusion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnConfusion, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOnConfusion::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnConfusion, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattleCharacter_C_BadStateEffectOnConfusion::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnConfusion, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOnConfusion::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffFlooded
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOffFlooded final
{
public:
	bool                                          bNoMaterial;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F41[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOffFlooded) == 0x000004, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOffFlooded");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOffFlooded) == 0x00000C, "Wrong size on RSBattleCharacter_C_BadStateEffectOffFlooded");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlooded, bNoMaterial) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOffFlooded::bNoMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlooded, bDummy) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOffFlooded::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlooded, Temp_bool_Variable) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOffFlooded::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlooded, Temp_float_Variable) == 0x000004, "Member 'RSBattleCharacter_C_BadStateEffectOffFlooded::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffFlooded, K2Node_Select_Default) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOffFlooded::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffOil
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOffOil final
{
public:
	bool                                          bNoMaterial;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F42[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOffOil) == 0x000004, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOffOil");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOffOil) == 0x00000C, "Wrong size on RSBattleCharacter_C_BadStateEffectOffOil");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffOil, bNoMaterial) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOffOil::bNoMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffOil, bDummy) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOffOil::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffOil, Temp_bool_Variable) == 0x000002, "Member 'RSBattleCharacter_C_BadStateEffectOffOil::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffOil, Temp_float_Variable) == 0x000004, "Member 'RSBattleCharacter_C_BadStateEffectOffOil::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffOil, K2Node_Select_Default) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOffOil::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffConfusion
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOffConfusion final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOffConfusion) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOffConfusion");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOffConfusion) == 0x000002, "Wrong size on RSBattleCharacter_C_BadStateEffectOffConfusion");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffConfusion, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOffConfusion::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffConfusion, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOffConfusion::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UpdateBadStateEffect
// 0x001C (0x001C - 0x0000)
struct RSBattleCharacter_C_UpdateBadStateEffect final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F43[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_CurValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CurRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F44[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_UpdateBadStateEffect) == 0x000004, "Wrong alignment on RSBattleCharacter_C_UpdateBadStateEffect");
static_assert(sizeof(RSBattleCharacter_C_UpdateBadStateEffect) == 0x00001C, "Wrong size on RSBattleCharacter_C_UpdateBadStateEffect");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, L_CurValue) == 0x000004, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::L_CurValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, L_CurRate) == 0x000008, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::L_CurRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, CallFunc_Ease_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, CallFunc_Ease_ReturnValue_1) == 0x000010, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, CallFunc_IsEnable_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, CallFunc_IsOver_ReturnValue) == 0x000015, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateBadStateEffect, CallFunc_GetRate_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_UpdateBadStateEffect::CallFunc_GetRate_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetFootIKEnable
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_SetFootIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F45[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetFootIKEnable) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetFootIKEnable");
static_assert(sizeof(RSBattleCharacter_C_SetFootIKEnable) == 0x00000C, "Wrong size on RSBattleCharacter_C_SetFootIKEnable");
static_assert(offsetof(RSBattleCharacter_C_SetFootIKEnable, Enable) == 0x000000, "Member 'RSBattleCharacter_C_SetFootIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetFootIKEnable, BlendTime) == 0x000004, "Member 'RSBattleCharacter_C_SetFootIKEnable::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetFootIKEnable, Dummy) == 0x000008, "Member 'RSBattleCharacter_C_SetFootIKEnable::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.PrevCheckOnAttackActorHit
// 0x01E0 (0x01E0 - 0x0000)
struct RSBattleCharacter_C_PrevCheckOnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bOK;                                               // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F46[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_PrevCheckOnAttackActorHit) == 0x000008, "Wrong alignment on RSBattleCharacter_C_PrevCheckOnAttackActorHit");
static_assert(sizeof(RSBattleCharacter_C_PrevCheckOnAttackActorHit) == 0x0001E0, "Wrong size on RSBattleCharacter_C_PrevCheckOnAttackActorHit");
static_assert(offsetof(RSBattleCharacter_C_PrevCheckOnAttackActorHit, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_PrevCheckOnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PrevCheckOnAttackActorHit, bOK) == 0x0001C0, "Member 'RSBattleCharacter_C_PrevCheckOnAttackActorHit::bOK' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PrevCheckOnAttackActorHit, HitActor) == 0x0001C8, "Member 'RSBattleCharacter_C_PrevCheckOnAttackActorHit::HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PrevCheckOnAttackActorHit, CallFunc_Array_Add_ReturnValue) == 0x0001D0, "Member 'RSBattleCharacter_C_PrevCheckOnAttackActorHit::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PrevCheckOnAttackActorHit, CallFunc_Array_Find_ReturnValue) == 0x0001D4, "Member 'RSBattleCharacter_C_PrevCheckOnAttackActorHit::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PrevCheckOnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001D8, "Member 'RSBattleCharacter_C_PrevCheckOnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnAttackWeakHit
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_OnAttackWeakHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bDummy;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnAttackWeakHit) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnAttackWeakHit");
static_assert(sizeof(RSBattleCharacter_C_OnAttackWeakHit) == 0x0001C8, "Wrong size on RSBattleCharacter_C_OnAttackWeakHit");
static_assert(offsetof(RSBattleCharacter_C_OnAttackWeakHit, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_OnAttackWeakHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnAttackWeakHit, bDummy) == 0x0001C0, "Member 'RSBattleCharacter_C_OnAttackWeakHit::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AreaChangeStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_AreaChangeStart final
{
public:
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_AreaChangeStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_AreaChangeStart");
static_assert(sizeof(RSBattleCharacter_C_AreaChangeStart) == 0x000001, "Wrong size on RSBattleCharacter_C_AreaChangeStart");
static_assert(offsetof(RSBattleCharacter_C_AreaChangeStart, CallFunc_EventStart_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_AreaChangeStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AreaStart
// 0x0058 (0x0058 - 0x0000)
struct RSBattleCharacter_C_AreaStart final
{
public:
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_AreaStart) == 0x000008, "Wrong alignment on RSBattleCharacter_C_AreaStart");
static_assert(sizeof(RSBattleCharacter_C_AreaStart) == 0x000058, "Wrong size on RSBattleCharacter_C_AreaStart");
static_assert(offsetof(RSBattleCharacter_C_AreaStart, CallFunc_Conv_FloatToString_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_AreaStart::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaStart, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_AreaStart::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaStart, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_AreaStart::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaStart, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'RSBattleCharacter_C_AreaStart::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaStart, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000040, "Member 'RSBattleCharacter_C_AreaStart::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaStart, CallFunc_EventEnd_ReturnValue) == 0x000050, "Member 'RSBattleCharacter_C_AreaStart::CallFunc_EventEnd_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AreaChangeFadeOut Internal
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_AreaChangeFadeOut_Internal final
{
public:
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_AreaChangeFadeOut_Internal) == 0x000008, "Wrong alignment on RSBattleCharacter_C_AreaChangeFadeOut_Internal");
static_assert(sizeof(RSBattleCharacter_C_AreaChangeFadeOut_Internal) == 0x000050, "Wrong size on RSBattleCharacter_C_AreaChangeFadeOut_Internal");
static_assert(offsetof(RSBattleCharacter_C_AreaChangeFadeOut_Internal, CallFunc_Conv_FloatToString_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_AreaChangeFadeOut_Internal::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaChangeFadeOut_Internal, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_AreaChangeFadeOut_Internal::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaChangeFadeOut_Internal, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_AreaChangeFadeOut_Internal::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaChangeFadeOut_Internal, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'RSBattleCharacter_C_AreaChangeFadeOut_Internal::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AreaChangeFadeOut_Internal, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000040, "Member 'RSBattleCharacter_C_AreaChangeFadeOut_Internal::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UpdateMaterialVisibility
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_UpdateMaterialVisibility final
{
public:
	bool                                          ChangeVisibility;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewVisibility;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F47[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_UpdateMaterialVisibility) == 0x000008, "Wrong alignment on RSBattleCharacter_C_UpdateMaterialVisibility");
static_assert(sizeof(RSBattleCharacter_C_UpdateMaterialVisibility) == 0x000030, "Wrong size on RSBattleCharacter_C_UpdateMaterialVisibility");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, ChangeVisibility) == 0x000000, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::ChangeVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, NewVisibility) == 0x000001, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::NewVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, CallFunc_GetCameraLocation_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, CallFunc_CheckDistance_bResult) == 0x000028, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateMaterialVisibility, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000029, "Member 'RSBattleCharacter_C_UpdateMaterialVisibility::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.InitializeMaterialVisibility
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_InitializeMaterialVisibility final
{
public:
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue_1;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_InitializeMaterialVisibility) == 0x000004, "Wrong alignment on RSBattleCharacter_C_InitializeMaterialVisibility");
static_assert(sizeof(RSBattleCharacter_C_InitializeMaterialVisibility) == 0x000030, "Wrong size on RSBattleCharacter_C_InitializeMaterialVisibility");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_GetScalarParameterValue_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_GetComponentBounds_Origin) == 0x000004, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_GetComponentBounds_BoxExtent) == 0x000010, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_GetComponentBounds_SphereRadius) == 0x00001C, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_GetScalarParameterValue_ReturnValue_1) == 0x000020, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterialVisibility, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'RSBattleCharacter_C_InitializeMaterialVisibility::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetForceMaterialOutlineVisibility
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetForceMaterialOutlineVisibility final
{
public:
	bool                                          ForceEnabled;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetForceMaterialOutlineVisibility) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetForceMaterialOutlineVisibility");
static_assert(sizeof(RSBattleCharacter_C_SetForceMaterialOutlineVisibility) == 0x000001, "Wrong size on RSBattleCharacter_C_SetForceMaterialOutlineVisibility");
static_assert(offsetof(RSBattleCharacter_C_SetForceMaterialOutlineVisibility, ForceEnabled) == 0x000000, "Member 'RSBattleCharacter_C_SetForceMaterialOutlineVisibility::ForceEnabled' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.InitializeShadow
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_InitializeShadow final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_InitializeShadow) == 0x000001, "Wrong alignment on RSBattleCharacter_C_InitializeShadow");
static_assert(sizeof(RSBattleCharacter_C_InitializeShadow) == 0x000001, "Wrong size on RSBattleCharacter_C_InitializeShadow");
static_assert(offsetof(RSBattleCharacter_C_InitializeShadow, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_InitializeShadow::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetForceMeshShadow
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetForceMeshShadow final
{
public:
	bool                                          ForceMeshShadow;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetForceMeshShadow) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetForceMeshShadow");
static_assert(sizeof(RSBattleCharacter_C_SetForceMeshShadow) == 0x000001, "Wrong size on RSBattleCharacter_C_SetForceMeshShadow");
static_assert(offsetof(RSBattleCharacter_C_SetForceMeshShadow, ForceMeshShadow) == 0x000000, "Member 'RSBattleCharacter_C_SetForceMeshShadow::ForceMeshShadow' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCharactersParameterData
// 0x01F8 (0x01F8 - 0x0000)
struct RSBattleCharacter_C_SetCharactersParameterData final
{
public:
	struct FCharactersParameterTable              ParamTable;                                        // 0x0000(0x01F8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(RSBattleCharacter_C_SetCharactersParameterData) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetCharactersParameterData");
static_assert(sizeof(RSBattleCharacter_C_SetCharactersParameterData) == 0x0001F8, "Wrong size on RSBattleCharacter_C_SetCharactersParameterData");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterData, ParamTable) == 0x000000, "Member 'RSBattleCharacter_C_SetCharactersParameterData::ParamTable' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.InitializeMaterial
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_InitializeMaterial final
{
public:
	class UMaterialInterface*                     CallFunc_SearchMeshMaterialFromSlot_FindMaterial;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SearchMeshMaterialFromSlot_Index;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F48[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_InitializeMaterial) == 0x000008, "Wrong alignment on RSBattleCharacter_C_InitializeMaterial");
static_assert(sizeof(RSBattleCharacter_C_InitializeMaterial) == 0x000020, "Wrong size on RSBattleCharacter_C_InitializeMaterial");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterial, CallFunc_SearchMeshMaterialFromSlot_FindMaterial) == 0x000000, "Member 'RSBattleCharacter_C_InitializeMaterial::CallFunc_SearchMeshMaterialFromSlot_FindMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterial, CallFunc_SearchMeshMaterialFromSlot_Index) == 0x000008, "Member 'RSBattleCharacter_C_InitializeMaterial::CallFunc_SearchMeshMaterialFromSlot_Index' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_InitializeMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeMaterial, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_InitializeMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DamageAfterCommon
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_DamageAfterCommon final
{
public:
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_DamageAfterCommon) == 0x000004, "Wrong alignment on RSBattleCharacter_C_DamageAfterCommon");
static_assert(sizeof(RSBattleCharacter_C_DamageAfterCommon) == 0x000004, "Wrong size on RSBattleCharacter_C_DamageAfterCommon");
static_assert(offsetof(RSBattleCharacter_C_DamageAfterCommon, CallFunc_GetHPPercent_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_DamageAfterCommon::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DebugDisplayStatus
// 0x07D8 (0x07D8 - 0x0000)
struct RSBattleCharacter_C_DebugDisplayStatus final
{
public:
	float                                         LCrashAccumulation;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LCrashResistance;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F49[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCharactersParameterTable              CallFunc_GetParameterTable_ReturnValue;            // 0x0058(0x01F8)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0260(0x0068)()
	float                                         CallFunc_Array_Get_Item;                           // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F4A[0x6];                                     // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue_1;          // 0x02D8(0x0068)()
	struct FCharactersParameterTable              CallFunc_GetParameterTable_ReturnValue_1;          // 0x0340(0x01F8)()
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0538(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_3;         // 0x0548(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_4;         // 0x0558(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_5;         // 0x0568(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_6;         // 0x0578(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_7;         // 0x0588(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_8;         // 0x0598(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_9;         // 0x05A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_10;        // 0x05B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_11;        // 0x05C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHp_ReturnValue;                     // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4B[0x4];                                     // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x05E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x05F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0600(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHp_ReturnValue;                        // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4C[0x4];                                     // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0618(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0628(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0638(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0648(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0658(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0668(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0678(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0688(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0698(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x06A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x06B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x06C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4D[0x4];                                     // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x06E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4E[0x4];                                     // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x06F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0708(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4F[0x4];                                     // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0718(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0728(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F50[0x4];                                     // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x0738(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0748(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F51[0x4];                                     // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x0758(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x0768(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_22;             // 0x0778(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_23;             // 0x0788(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_24;             // 0x0798(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_25;             // 0x07A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_26;             // 0x07B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_27;             // 0x07C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_DebugDisplayStatus) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DebugDisplayStatus");
static_assert(sizeof(RSBattleCharacter_C_DebugDisplayStatus) == 0x0007D8, "Wrong size on RSBattleCharacter_C_DebugDisplayStatus");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, LCrashAccumulation) == 0x000000, "Member 'RSBattleCharacter_C_DebugDisplayStatus::LCrashAccumulation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, LCrashResistance) == 0x000004, "Member 'RSBattleCharacter_C_DebugDisplayStatus::LCrashResistance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, Temp_bool_True_if_break_was_hit_Variable) == 0x000009, "Member 'RSBattleCharacter_C_DebugDisplayStatus::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattleCharacter_C_DebugDisplayStatus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattleCharacter_C_DebugDisplayStatus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000028, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000048, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetParameterTable_ReturnValue) == 0x000058, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetParameterTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000250, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetParameterBasic_ReturnValue) == 0x000260, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Array_Get_Item) == 0x0002C8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Array_Length_ReturnValue) == 0x0002CC, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Less_IntInt_ReturnValue) == 0x0002D0, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_BooleanAND_ReturnValue) == 0x0002D1, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetParameterBasic_ReturnValue_1) == 0x0002D8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetParameterBasic_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetParameterTable_ReturnValue_1) == 0x000340, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetParameterTable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000538, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_3) == 0x000548, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_4) == 0x000558, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_5) == 0x000568, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_6) == 0x000578, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_7) == 0x000588, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_8) == 0x000598, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_9) == 0x0005A8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_10) == 0x0005B8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_FloatToString_ReturnValue_11) == 0x0005C8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_FloatToString_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetMaxHp_ReturnValue) == 0x0005D8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetMaxHp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0005E0, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_IntToString_ReturnValue) == 0x0005F0, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000600, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetHp_ReturnValue) == 0x000610, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetHp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000618, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000628, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000638, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000648, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000658, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000668, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000678, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000688, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000698, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_13) == 0x0006A8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_14) == 0x0006B8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_15) == 0x0006C8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0006D8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_16) == 0x0006E0, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Add_FloatFloat_ReturnValue) == 0x0006F0, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_17) == 0x0006F8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_MakeVector_ReturnValue) == 0x000708, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000718, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000728, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_19) == 0x000738, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Add_VectorVector_ReturnValue) == 0x000748, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_20) == 0x000758, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_21) == 0x000768, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_22) == 0x000778, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_23) == 0x000788, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_24) == 0x000798, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_25) == 0x0007A8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_26) == 0x0007B8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugDisplayStatus, CallFunc_Concat_StrStr_ReturnValue_27) == 0x0007C8, "Member 'RSBattleCharacter_C_DebugDisplayStatus::CallFunc_Concat_StrStr_ReturnValue_27' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsStealthEnable
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsStealthEnable final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsStealthEnable) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsStealthEnable");
static_assert(sizeof(RSBattleCharacter_C_IsStealthEnable) == 0x000001, "Wrong size on RSBattleCharacter_C_IsStealthEnable");
static_assert(offsetof(RSBattleCharacter_C_IsStealthEnable, Return) == 0x000000, "Member 'RSBattleCharacter_C_IsStealthEnable::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnCharacterAssetLoad
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_OnCharacterAssetLoad final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F52[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_1;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F53[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_1;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F54[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_2;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_2;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnCharacterAssetLoad) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnCharacterAssetLoad");
static_assert(sizeof(RSBattleCharacter_C_OnCharacterAssetLoad) == 0x000050, "Wrong size on RSBattleCharacter_C_OnCharacterAssetLoad");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, Return) == 0x000000, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, CallFunc_LoadSoftObject_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, CallFunc_LoadSoftObject_ReturnValue_1) == 0x000010, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::CallFunc_LoadSoftObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, K2Node_DynamicCast_AsParticle_System) == 0x000018, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, K2Node_DynamicCast_AsParticle_System_1) == 0x000028, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::K2Node_DynamicCast_AsParticle_System_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, CallFunc_LoadSoftObject_ReturnValue_2) == 0x000038, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::CallFunc_LoadSoftObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, K2Node_DynamicCast_AsParticle_System_2) == 0x000040, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::K2Node_DynamicCast_AsParticle_System_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCharacterAssetLoad, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'RSBattleCharacter_C_OnCharacterAssetLoad::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEyesCheck
// 0x00E8 (0x00E8 - 0x0000)
struct RSBattleCharacter_C_IsEyesCheck final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEyes;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F55[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      LHitObj;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x005C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEyesCheck) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsEyesCheck");
static_assert(sizeof(RSBattleCharacter_C_IsEyesCheck) == 0x0000E8, "Wrong size on RSBattleCharacter_C_IsEyesCheck");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, StartLocation) == 0x000000, "Member 'RSBattleCharacter_C_IsEyesCheck::StartLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, TargetLocation) == 0x00000C, "Member 'RSBattleCharacter_C_IsEyesCheck::TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, IsEyes) == 0x000018, "Member 'RSBattleCharacter_C_IsEyesCheck::IsEyes' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, LHitObj) == 0x000020, "Member 'RSBattleCharacter_C_IsEyesCheck::LHitObj' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, Temp_object_Variable) == 0x000030, "Member 'RSBattleCharacter_C_IsEyesCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, K2Node_MakeArray_Array) == 0x000040, "Member 'RSBattleCharacter_C_IsEyesCheck::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'RSBattleCharacter_C_IsEyesCheck::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, CallFunc_LineTraceSingle_OutHit) == 0x00005C, "Member 'RSBattleCharacter_C_IsEyesCheck::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, CallFunc_LineTraceSingle_ReturnValue) == 0x0000E4, "Member 'RSBattleCharacter_C_IsEyesCheck::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEyesCheck, CallFunc_Not_PreBool_ReturnValue) == 0x0000E5, "Member 'RSBattleCharacter_C_IsEyesCheck::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DirectAttack
// 0x0750 (0x0750 - 0x0000)
struct RSBattleCharacter_C_DirectAttack final
{
public:
	bool                                          UseFixDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F56[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixDamage;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackerOwner;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreInvalid;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F57[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       Effect_Info;                                       // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          UseHitPosition;                                    // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F58[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPosition;                                       // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoDamageDisplay;                                   // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotifyAttackActorHit;                             // 0x0045(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F59[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           LHitResult;                                        // 0x0048(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	class ARSBattleCharacter_C*                   LTableOwner;                                       // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     LSkillInfo;                                        // 0x0210(0x00F0)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5A[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5B[0x6];                                     // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character_1;         // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x0322(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0323(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5C[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo; // 0x0328(0x00F0)()
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5D[0x6];                                     // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_GetCharacterSkillTableWithReplace_self_CastInput; // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHCSkillCommonInfo                     CallFunc_GetCharacterSkillTableWithReplace_SkillCommonInfo; // 0x0430(0x00F0)()
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0520(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5E[0x6];                                     // 0x0522(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetDirectAttackWpPrimitive_OutPrimitive;  // 0x0528(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0530(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x053C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5F[0x3];                                     // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0540(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x054C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F60[0x3];                                     // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0550(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvalidDamage_InvalidDamage;            // 0x0561(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F61[0x2];                                     // 0x0562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0564(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0570(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x057C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TWeakObjectPtr<class AActor>                  K2Node_Select_Default_3;                           // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x0590(0x01C0)(ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_DirectAttack) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DirectAttack");
static_assert(sizeof(RSBattleCharacter_C_DirectAttack) == 0x000750, "Wrong size on RSBattleCharacter_C_DirectAttack");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, UseFixDamage) == 0x000000, "Member 'RSBattleCharacter_C_DirectAttack::UseFixDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, FixDamage) == 0x000004, "Member 'RSBattleCharacter_C_DirectAttack::FixDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, DataTable) == 0x000008, "Member 'RSBattleCharacter_C_DirectAttack::DataTable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, SkillName) == 0x000010, "Member 'RSBattleCharacter_C_DirectAttack::SkillName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Attacker) == 0x000018, "Member 'RSBattleCharacter_C_DirectAttack::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, AttackerOwner) == 0x000020, "Member 'RSBattleCharacter_C_DirectAttack::AttackerOwner' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, IgnoreInvalid) == 0x000028, "Member 'RSBattleCharacter_C_DirectAttack::IgnoreInvalid' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Effect_Info) == 0x00002C, "Member 'RSBattleCharacter_C_DirectAttack::Effect_Info' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, UseHitPosition) == 0x000034, "Member 'RSBattleCharacter_C_DirectAttack::UseHitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, HitPosition) == 0x000038, "Member 'RSBattleCharacter_C_DirectAttack::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, NoDamageDisplay) == 0x000044, "Member 'RSBattleCharacter_C_DirectAttack::NoDamageDisplay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, bNotifyAttackActorHit) == 0x000045, "Member 'RSBattleCharacter_C_DirectAttack::bNotifyAttackActorHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, LHitResult) == 0x000048, "Member 'RSBattleCharacter_C_DirectAttack::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, LTableOwner) == 0x000208, "Member 'RSBattleCharacter_C_DirectAttack::LTableOwner' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, LSkillInfo) == 0x000210, "Member 'RSBattleCharacter_C_DirectAttack::LSkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_IsValid_ReturnValue) == 0x000300, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_DynamicCast_AsRSBattle_Character) == 0x000308, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_DynamicCast_bSuccess) == 0x000310, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_IsValid_ReturnValue_1) == 0x000311, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_DynamicCast_AsRSBattle_Character_1) == 0x000318, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_DynamicCast_AsRSBattle_Character_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_DynamicCast_bSuccess_1) == 0x000320, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_IsValid_ReturnValue_2) == 0x000321, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_OnAttackActorHit_Dummy) == 0x000322, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Temp_bool_Variable) == 0x000323, "Member 'RSBattleCharacter_C_DirectAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo) == 0x000328, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_IsValid_ReturnValue_3) == 0x000418, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Temp_bool_Variable_1) == 0x000419, "Member 'RSBattleCharacter_C_DirectAttack::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_GetCharacterSkillTableWithReplace_self_CastInput) == 0x000420, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_GetCharacterSkillTableWithReplace_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_GetCharacterSkillTableWithReplace_SkillCommonInfo) == 0x000430, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_GetCharacterSkillTableWithReplace_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Temp_byte_Variable) == 0x000520, "Member 'RSBattleCharacter_C_DirectAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Temp_bool_Variable_2) == 0x000521, "Member 'RSBattleCharacter_C_DirectAttack::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_GetDirectAttackWpPrimitive_OutPrimitive) == 0x000528, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_GetDirectAttackWpPrimitive_OutPrimitive' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000530, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_DoesSocketExist_ReturnValue) == 0x00053C, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_GetSocketLocation_ReturnValue) == 0x000540, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, Temp_bool_Variable_3) == 0x00054C, "Member 'RSBattleCharacter_C_DirectAttack::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_Select_Default) == 0x000550, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_Array_AddUnique_ReturnValue) == 0x00055C, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_IsValid_ReturnValue_4) == 0x000560, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_IsInvalidDamage_InvalidDamage) == 0x000561, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_IsInvalidDamage_InvalidDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000564, "Member 'RSBattleCharacter_C_DirectAttack::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_Select_Default_1) == 0x000570, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_Select_Default_2) == 0x00057C, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_Select_Default_3) == 0x000588, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DirectAttack, K2Node_MakeStruct_HCHitResult) == 0x000590, "Member 'RSBattleCharacter_C_DirectAttack::K2Node_MakeStruct_HCHitResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainCrashLock
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_BrainCrashLock final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BrainCrashLock) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BrainCrashLock");
static_assert(sizeof(RSBattleCharacter_C_BrainCrashLock) == 0x000001, "Wrong size on RSBattleCharacter_C_BrainCrashLock");
static_assert(offsetof(RSBattleCharacter_C_BrainCrashLock, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_BrainCrashLock::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetAnimNotifyCondition
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetAnimNotifyCondition final
{
public:
	int32                                         ConditionNo;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetAnimNotifyCondition) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetAnimNotifyCondition");
static_assert(sizeof(RSBattleCharacter_C_GetAnimNotifyCondition) == 0x000008, "Wrong size on RSBattleCharacter_C_GetAnimNotifyCondition");
static_assert(offsetof(RSBattleCharacter_C_GetAnimNotifyCondition, ConditionNo) == 0x000000, "Member 'RSBattleCharacter_C_GetAnimNotifyCondition::ConditionNo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAnimNotifyCondition, Result) == 0x000004, "Member 'RSBattleCharacter_C_GetAnimNotifyCondition::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsNotDamageMotion
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsNotDamageMotion final
{
public:
	bool                                          Param_bNotDamageMotion;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsNotDamageMotion) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsNotDamageMotion");
static_assert(sizeof(RSBattleCharacter_C_IsNotDamageMotion) == 0x000001, "Wrong size on RSBattleCharacter_C_IsNotDamageMotion");
static_assert(offsetof(RSBattleCharacter_C_IsNotDamageMotion, Param_bNotDamageMotion) == 0x000000, "Member 'RSBattleCharacter_C_IsNotDamageMotion::Param_bNotDamageMotion' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetNotDamageMotion
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetNotDamageMotion final
{
public:
	bool                                          Param_bNotDamageMotion;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetNotDamageMotion) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetNotDamageMotion");
static_assert(sizeof(RSBattleCharacter_C_SetNotDamageMotion) == 0x000001, "Wrong size on RSBattleCharacter_C_SetNotDamageMotion");
static_assert(offsetof(RSBattleCharacter_C_SetNotDamageMotion, Param_bNotDamageMotion) == 0x000000, "Member 'RSBattleCharacter_C_SetNotDamageMotion::Param_bNotDamageMotion' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetBulletDirection
// 0x01E8 (0x01E8 - 0x0000)
struct RSBattleCharacter_C_GetBulletDirection final
{
public:
	struct FVector                                FireLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FireForwardVector;                                 // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngle_XY;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngle_Z;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BulletDirection;                                   // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LBulletDirection;                                  // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LTargetAngle;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F62[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_3;                     // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_4;                     // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_3;      // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle_1;       // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue_1;                // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F63[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_5;                     // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetBulletDirection) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetBulletDirection");
static_assert(sizeof(RSBattleCharacter_C_GetBulletDirection) == 0x0001E8, "Wrong size on RSBattleCharacter_C_GetBulletDirection");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, FireLocation) == 0x000000, "Member 'RSBattleCharacter_C_GetBulletDirection::FireLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, TargetLocation) == 0x00000C, "Member 'RSBattleCharacter_C_GetBulletDirection::TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, FireForwardVector) == 0x000018, "Member 'RSBattleCharacter_C_GetBulletDirection::FireForwardVector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, MaxAngle_XY) == 0x000024, "Member 'RSBattleCharacter_C_GetBulletDirection::MaxAngle_XY' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, MaxAngle_Z) == 0x000028, "Member 'RSBattleCharacter_C_GetBulletDirection::MaxAngle_Z' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, BulletDirection) == 0x00002C, "Member 'RSBattleCharacter_C_GetBulletDirection::BulletDirection' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, LBulletDirection) == 0x000038, "Member 'RSBattleCharacter_C_GetBulletDirection::LBulletDirection' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, LTargetAngle) == 0x000044, "Member 'RSBattleCharacter_C_GetBulletDirection::LTargetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X) == 0x000048, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y) == 0x00004C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z) == 0x000050, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000054, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000060, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X_1) == 0x000070, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y_1) == 0x000074, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00007C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X_2) == 0x000088, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y_2) == 0x00008C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z_2) == 0x000090, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000094, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000A0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Normal_ReturnValue) == 0x0000A4, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X_3) == 0x0000B0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y_3) == 0x0000B4, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z_3) == 0x0000B8, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_SignOfFloat_ReturnValue) == 0x0000BC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_MakeVector_ReturnValue) == 0x0000C0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000CC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000D0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X_4) == 0x0000DC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y_4) == 0x0000E0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z_4) == 0x0000E4, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Abs_ReturnValue) == 0x0000E8, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_MakeVector_ReturnValue_1) == 0x0000EC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000F8, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Normal_ReturnValue_1) == 0x0000FC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000108, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Normal_ReturnValue_2) == 0x000114, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X_5) == 0x000120, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y_5) == 0x000124, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z_5) == 0x000128, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_MakeVector_ReturnValue_2) == 0x00012C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000138, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_MakeVector_ReturnValue_3) == 0x000144, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000150, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Normal_ReturnValue_3) == 0x00015C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Normal_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Normal_ReturnValue_4) == 0x000168, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Normal_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x000174, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x000178, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000184, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_VectorVector_ReturnValue_3) == 0x000188, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_GetTargetAngle_TargeDegreetAngle_1) == 0x000194, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_GetTargetAngle_TargeDegreetAngle_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000198, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_SignOfFloat_ReturnValue_1) == 0x00019C, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_SignOfFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Abs_ReturnValue_1) == 0x0001A0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001A4, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0001A8, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_MakeRotator_ReturnValue) == 0x0001AC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x0001B8, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_X_6) == 0x0001C4, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Y_6) == 0x0001C8, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_BreakVector_Z_6) == 0x0001CC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_MakeVector_ReturnValue_4) == 0x0001D0, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBulletDirection, CallFunc_Normal_ReturnValue_5) == 0x0001DC, "Member 'RSBattleCharacter_C_GetBulletDirection::CallFunc_Normal_ReturnValue_5' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReceivedNotifyAnimEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_ReceivedNotifyAnimEnd final
{
public:
	bool                                          Received;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ReceivedNotifyAnimEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_ReceivedNotifyAnimEnd");
static_assert(sizeof(RSBattleCharacter_C_ReceivedNotifyAnimEnd) == 0x000001, "Wrong size on RSBattleCharacter_C_ReceivedNotifyAnimEnd");
static_assert(offsetof(RSBattleCharacter_C_ReceivedNotifyAnimEnd, Received) == 0x000000, "Member 'RSBattleCharacter_C_ReceivedNotifyAnimEnd::Received' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetDelayDeath
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_SetDelayDeath final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDelayDeath_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetDelayDeath) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetDelayDeath");
static_assert(sizeof(RSBattleCharacter_C_SetDelayDeath) == 0x000003, "Wrong size on RSBattleCharacter_C_SetDelayDeath");
static_assert(offsetof(RSBattleCharacter_C_SetDelayDeath, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_SetDelayDeath::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDelayDeath, CallFunc_IsDelayDeath_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetDelayDeath::CallFunc_IsDelayDeath_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDelayDeath, CallFunc_OnDead_Dummy) == 0x000002, "Member 'RSBattleCharacter_C_SetDelayDeath::CallFunc_OnDead_Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckDelayDeath
// 0x0228 (0x0228 - 0x0000)
struct RSBattleCharacter_C_CheckDelayDeath final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x01C0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LOnlyTargetDelayDeath;                             // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F64[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAttackerTargetSelf_ReturnValue;         // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F65[0x2];                                     // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F66[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F67[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F68[0x1];                                     // 0x01F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             CallFunc_Array_Get_Item_1;                         // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F69[0x2];                                     // 0x01FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F6A[0x2];                                     // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x020C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3F6B[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CheckDelayDeath) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CheckDelayDeath");
static_assert(sizeof(RSBattleCharacter_C_CheckDelayDeath) == 0x000228, "Wrong size on RSBattleCharacter_C_CheckDelayDeath");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_CheckDelayDeath::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, L_extraType) == 0x0001C0, "Member 'RSBattleCharacter_C_CheckDelayDeath::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, LOnlyTargetDelayDeath) == 0x0001D0, "Member 'RSBattleCharacter_C_CheckDelayDeath::LOnlyTargetDelayDeath' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, Temp_int_Array_Index_Variable) == 0x0001D4, "Member 'RSBattleCharacter_C_CheckDelayDeath::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_IsAttackerTargetSelf_ReturnValue) == 0x0001D8, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_IsAttackerTargetSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, Temp_bool_True_if_break_was_hit_Variable) == 0x0001D9, "Member 'RSBattleCharacter_C_CheckDelayDeath::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Array_Length_ReturnValue) == 0x0001DC, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Not_PreBool_ReturnValue) == 0x0001E0, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, Temp_int_Loop_Counter_Variable) == 0x0001E4, "Member 'RSBattleCharacter_C_CheckDelayDeath::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Less_IntInt_ReturnValue) == 0x0001E8, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Add_IntInt_ReturnValue) == 0x0001EC, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, Temp_int_Array_Index_Variable_1) == 0x0001F0, "Member 'RSBattleCharacter_C_CheckDelayDeath::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Array_Get_Item) == 0x0001F4, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001F5, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001F6, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, Temp_int_Loop_Counter_Variable_1) == 0x0001F8, "Member 'RSBattleCharacter_C_CheckDelayDeath::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Array_Get_Item_1) == 0x0001FC, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001FD, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Add_IntInt_ReturnValue_1) == 0x000200, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Array_Length_ReturnValue_1) == 0x000204, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_Less_IntInt_ReturnValue_1) == 0x000208, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_BooleanAND_ReturnValue) == 0x000209, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, K2Node_CreateDelegate_OutputDelegate) == 0x00020C, "Member 'RSBattleCharacter_C_CheckDelayDeath::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckDelayDeath, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000220, "Member 'RSBattleCharacter_C_CheckDelayDeath::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RequestHitStop
// 0x0540 (0x0540 - 0x0000)
struct RSBattleCharacter_C_RequestHitStop final
{
public:
	TArray<struct FHCHitResult>                   HitResult;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	EPlayerHitStopType                            PlayHitStopType;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F6C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHCHitResult                           LHitResult;                                        // 0x0028(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UBP_PlayerHitStopComponent_C*           LHitStopComp;                                      // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_StartHitStop;                                    // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F6D[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LHitStopSpeedRate;                                 // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHitStopSeconds;                                   // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LAllThrow;                                         // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            HitStopType;                                       // 0x01FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F6E[0x2];                                     // 0x01FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     LSkill;                                            // 0x0210(0x00F0)(Edit, BlueprintVisible)
	EPlayerHitStopType                            Temp_byte_Variable;                                // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F6F[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Temp_byte_Variable_1;                              // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x0309(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x030A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x030B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable_3;                              // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x030D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F70[0x2];                                     // 0x030E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0310(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F71[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F72[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_Array_Get_Item;                           // 0x0330(0x01C0)(ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Temp_byte_Variable_4;                              // 0x04F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x04F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F73[0x2];                                     // 0x04F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x04FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F74[0x3];                                     // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F75[0x3];                                     // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapGimmick_C>     K2Node_DynamicCast_AsBPI_Map_Gimmick;              // 0x0508(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapGimmickType                               CallFunc_GetMapGimmickType_Type;                   // 0x0519(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            K2Node_Select_Default;                             // 0x051A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x051B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x051C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            K2Node_Select_Default_1;                           // 0x051D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F76[0x2];                                     // 0x051E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F77[0x7];                                     // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0530(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_RequestHitStop) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RequestHitStop");
static_assert(sizeof(RSBattleCharacter_C_RequestHitStop) == 0x000540, "Wrong size on RSBattleCharacter_C_RequestHitStop");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_RequestHitStop::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, PlayHitStopType) == 0x000010, "Member 'RSBattleCharacter_C_RequestHitStop::PlayHitStopType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LExtraType) == 0x000018, "Member 'RSBattleCharacter_C_RequestHitStop::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LHitResult) == 0x000028, "Member 'RSBattleCharacter_C_RequestHitStop::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LHitStopComp) == 0x0001E8, "Member 'RSBattleCharacter_C_RequestHitStop::LHitStopComp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, L_StartHitStop) == 0x0001F0, "Member 'RSBattleCharacter_C_RequestHitStop::L_StartHitStop' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LHitStopSpeedRate) == 0x0001F4, "Member 'RSBattleCharacter_C_RequestHitStop::LHitStopSpeedRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LHitStopSeconds) == 0x0001F8, "Member 'RSBattleCharacter_C_RequestHitStop::LHitStopSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LAllThrow) == 0x0001FC, "Member 'RSBattleCharacter_C_RequestHitStop::LAllThrow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, HitStopType) == 0x0001FD, "Member 'RSBattleCharacter_C_RequestHitStop::HitStopType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LPlayerFixParam) == 0x000200, "Member 'RSBattleCharacter_C_RequestHitStop::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Attacker) == 0x000208, "Member 'RSBattleCharacter_C_RequestHitStop::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, LSkill) == 0x000210, "Member 'RSBattleCharacter_C_RequestHitStop::LSkill' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_byte_Variable) == 0x000300, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_Array_Length_ReturnValue) == 0x000304, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_byte_Variable_1) == 0x000308, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_byte_Variable_2) == 0x000309, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_IsValid_ReturnValue) == 0x00030A, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_IsValid_ReturnValue_1) == 0x00030B, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_byte_Variable_3) == 0x00030C, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_bool_Variable) == 0x00030D, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000310, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_DynamicCast_bSuccess) == 0x000320, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_int_Array_Index_Variable) == 0x000324, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000328, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_Array_Get_Item) == 0x000330, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_int_Loop_Counter_Variable) == 0x0004F0, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_byte_Variable_4) == 0x0004F4, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_Less_IntInt_ReturnValue) == 0x0004F5, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_Add_IntInt_ReturnValue) == 0x0004F8, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, Temp_bool_Variable_1) == 0x0004FC, "Member 'RSBattleCharacter_C_RequestHitStop::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_Array_Find_ReturnValue) == 0x000500, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000504, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_DynamicCast_AsBPI_Map_Gimmick) == 0x000508, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_DynamicCast_AsBPI_Map_Gimmick' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_DynamicCast_bSuccess_1) == 0x000518, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_GetMapGimmickType_Type) == 0x000519, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_GetMapGimmickType_Type' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_Select_Default) == 0x00051A, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_SwitchEnum_CmpSuccess) == 0x00051B, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_IsValid_ReturnValue_2) == 0x00051C, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_Select_Default_1) == 0x00051D, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_GetBattleManager_BattleManager) == 0x000520, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_IsValid_ReturnValue_3) == 0x000528, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, CallFunc_GetPlayerFixParam_Param) == 0x000530, "Member 'RSBattleCharacter_C_RequestHitStop::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestHitStop, K2Node_SwitchEnum_CmpSuccess_1) == 0x000538, "Member 'RSBattleCharacter_C_RequestHitStop::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveDamageScar
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_ReceiveDamageScar final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_ReceiveDamageScar) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ReceiveDamageScar");
static_assert(sizeof(RSBattleCharacter_C_ReceiveDamageScar) == 0x0001C0, "Wrong size on RSBattleCharacter_C_ReceiveDamageScar");
static_assert(offsetof(RSBattleCharacter_C_ReceiveDamageScar, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_ReceiveDamageScar::HitResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckHateCalc
// 0x0200 (0x0200 - 0x0000)
struct RSBattleCharacter_C_CheckHateCalc final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F78[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   L_target;                                          // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F79[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F7A[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character_1;         // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F7B[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckHateCalc) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CheckHateCalc");
static_assert(sizeof(RSBattleCharacter_C_CheckHateCalc) == 0x000200, "Wrong size on RSBattleCharacter_C_CheckHateCalc");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_CheckHateCalc::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_CheckHateCalc::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, L_target) == 0x0001C8, "Member 'RSBattleCharacter_C_CheckHateCalc::L_target' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, CallFunc_IsEnemy_bEnemy) == 0x0001D0, "Member 'RSBattleCharacter_C_CheckHateCalc::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, K2Node_DynamicCast_AsRSBattle_Character) == 0x0001D8, "Member 'RSBattleCharacter_C_CheckHateCalc::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'RSBattleCharacter_C_CheckHateCalc::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, K2Node_DynamicCast_AsRSBattle_Character_1) == 0x0001E8, "Member 'RSBattleCharacter_C_CheckHateCalc::K2Node_DynamicCast_AsRSBattle_Character_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'RSBattleCharacter_C_CheckHateCalc::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001F4, "Member 'RSBattleCharacter_C_CheckHateCalc::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckHateCalc, CallFunc_IsValid_ReturnValue) == 0x0001F8, "Member 'RSBattleCharacter_C_CheckHateCalc::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsPlayShakeCamera
// 0x01F8 (0x01F8 - 0x0000)
struct RSBattleCharacter_C_IsPlayShakeCamera final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bCanPlay;                                          // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCanPlay;                                         // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F7C[0x5];                                     // 0x01C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface;  // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F7D[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface_1; // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue_1;            // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue_2;            // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsPlayShakeCamera) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsPlayShakeCamera");
static_assert(sizeof(RSBattleCharacter_C_IsPlayShakeCamera) == 0x0001F8, "Wrong size on RSBattleCharacter_C_IsPlayShakeCamera");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, bCanPlay) == 0x0001C0, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::bCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, LbCanPlay) == 0x0001C1, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::LbCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, Temp_bool_Variable) == 0x0001C2, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, K2Node_DynamicCast_AsTargetable_Object_Interface) == 0x0001C8, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::K2Node_DynamicCast_AsTargetable_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, K2Node_DynamicCast_bSuccess) == 0x0001D8, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, CallFunc_IsValid_ReturnValue) == 0x0001D9, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, CallFunc_IsControlPlayer_ReturnValue) == 0x0001DA, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, K2Node_DynamicCast_AsTargetable_Object_Interface_1) == 0x0001E0, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::K2Node_DynamicCast_AsTargetable_Object_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, CallFunc_IsValid_ReturnValue_1) == 0x0001F1, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, CallFunc_IsControlPlayer_ReturnValue_1) == 0x0001F2, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::CallFunc_IsControlPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, CallFunc_IsControlPlayer_ReturnValue_2) == 0x0001F3, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::CallFunc_IsControlPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayShakeCamera, Temp_bool_Variable_1) == 0x0001F4, "Member 'RSBattleCharacter_C_IsPlayShakeCamera::Temp_bool_Variable_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ShakeCameraInRange
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_ShakeCameraInRange final
{
public:
	class UClass*                                 ShakeClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_scale;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F7E[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 L_ShakeClass;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F7F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_SelectShake_ReturnClass;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectShake_ReturnScale;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue_1;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F80[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ShakeCameraInRange) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ShakeCameraInRange");
static_assert(sizeof(RSBattleCharacter_C_ShakeCameraInRange) == 0x000050, "Wrong size on RSBattleCharacter_C_ShakeCameraInRange");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, ShakeClass) == 0x000000, "Member 'RSBattleCharacter_C_ShakeCameraInRange::ShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, Scale) == 0x000008, "Member 'RSBattleCharacter_C_ShakeCameraInRange::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, ShakeLocation) == 0x00000C, "Member 'RSBattleCharacter_C_ShakeCameraInRange::ShakeLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, L_scale) == 0x000018, "Member 'RSBattleCharacter_C_ShakeCameraInRange::L_scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, L_ShakeClass) == 0x000020, "Member 'RSBattleCharacter_C_ShakeCameraInRange::L_ShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, CallFunc_IsValidClass_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_ShakeCameraInRange::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, CallFunc_SelectShake_ReturnClass) == 0x000030, "Member 'RSBattleCharacter_C_ShakeCameraInRange::CallFunc_SelectShake_ReturnClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, CallFunc_SelectShake_ReturnScale) == 0x000038, "Member 'RSBattleCharacter_C_ShakeCameraInRange::CallFunc_SelectShake_ReturnScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, CallFunc_IsValidClass_ReturnValue_1) == 0x00003C, "Member 'RSBattleCharacter_C_ShakeCameraInRange::CallFunc_IsValidClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, CallFunc_GetPlayerController_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_ShakeCameraInRange::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInRange, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'RSBattleCharacter_C_ShakeCameraInRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SelectShake
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_SelectShake final
{
public:
	class UClass*                                 ShakeClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ReturnClass;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnScale;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_scale;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 L_ShakeClass;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SelectShake) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SelectShake");
static_assert(sizeof(RSBattleCharacter_C_SelectShake) == 0x000030, "Wrong size on RSBattleCharacter_C_SelectShake");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, ShakeClass) == 0x000000, "Member 'RSBattleCharacter_C_SelectShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, Scale) == 0x000008, "Member 'RSBattleCharacter_C_SelectShake::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, ShakeLocation) == 0x00000C, "Member 'RSBattleCharacter_C_SelectShake::ShakeLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, ReturnClass) == 0x000018, "Member 'RSBattleCharacter_C_SelectShake::ReturnClass' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, ReturnScale) == 0x000020, "Member 'RSBattleCharacter_C_SelectShake::ReturnScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, L_scale) == 0x000024, "Member 'RSBattleCharacter_C_SelectShake::L_scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SelectShake, L_ShakeClass) == 0x000028, "Member 'RSBattleCharacter_C_SelectShake::L_ShakeClass' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DamageBefore
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_DamageBefore final
{
public:
	bool                                          IgnoreAutoSasMetal;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DamageBefore) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DamageBefore");
static_assert(sizeof(RSBattleCharacter_C_DamageBefore) == 0x000002, "Wrong size on RSBattleCharacter_C_DamageBefore");
static_assert(offsetof(RSBattleCharacter_C_DamageBefore, IgnoreAutoSasMetal) == 0x000000, "Member 'RSBattleCharacter_C_DamageBefore::IgnoreAutoSasMetal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamageBefore, bDummy) == 0x000001, "Member 'RSBattleCharacter_C_DamageBefore::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoEventStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoEventStart");
static_assert(sizeof(RSBattleCharacter_C_DoEventStart) == 0x000001, "Wrong size on RSBattleCharacter_C_DoEventStart");
static_assert(offsetof(RSBattleCharacter_C_DoEventStart, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoEventStart::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoEventEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoEventEnd");
static_assert(sizeof(RSBattleCharacter_C_DoEventEnd) == 0x000001, "Wrong size on RSBattleCharacter_C_DoEventEnd");
static_assert(offsetof(RSBattleCharacter_C_DoEventEnd, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoEventEnd::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoStaticEventStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoStaticEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoStaticEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoStaticEventStart");
static_assert(sizeof(RSBattleCharacter_C_DoStaticEventStart) == 0x000001, "Wrong size on RSBattleCharacter_C_DoStaticEventStart");
static_assert(offsetof(RSBattleCharacter_C_DoStaticEventStart, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoStaticEventStart::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoStaticEventEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoStaticEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoStaticEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoStaticEventEnd");
static_assert(sizeof(RSBattleCharacter_C_DoStaticEventEnd) == 0x000001, "Wrong size on RSBattleCharacter_C_DoStaticEventEnd");
static_assert(offsetof(RSBattleCharacter_C_DoStaticEventEnd, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoStaticEventEnd::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoDynamicEventStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoDynamicEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoDynamicEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoDynamicEventStart");
static_assert(sizeof(RSBattleCharacter_C_DoDynamicEventStart) == 0x000001, "Wrong size on RSBattleCharacter_C_DoDynamicEventStart");
static_assert(offsetof(RSBattleCharacter_C_DoDynamicEventStart, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoDynamicEventStart::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoDynamicEventEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoDynamicEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoDynamicEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoDynamicEventEnd");
static_assert(sizeof(RSBattleCharacter_C_DoDynamicEventEnd) == 0x000001, "Wrong size on RSBattleCharacter_C_DoDynamicEventEnd");
static_assert(offsetof(RSBattleCharacter_C_DoDynamicEventEnd, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoDynamicEventEnd::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoTalkEventStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoTalkEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoTalkEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoTalkEventStart");
static_assert(sizeof(RSBattleCharacter_C_DoTalkEventStart) == 0x000001, "Wrong size on RSBattleCharacter_C_DoTalkEventStart");
static_assert(offsetof(RSBattleCharacter_C_DoTalkEventStart, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoTalkEventStart::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoTalkEventEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoTalkEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoTalkEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoTalkEventEnd");
static_assert(sizeof(RSBattleCharacter_C_DoTalkEventEnd) == 0x000001, "Wrong size on RSBattleCharacter_C_DoTalkEventEnd");
static_assert(offsetof(RSBattleCharacter_C_DoTalkEventEnd, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoTalkEventEnd::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoBattleSequencerStart
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_DoBattleSequencerStart final
{
public:
	bool                                          bSetEnemyEvent;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoBattleSequencerStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoBattleSequencerStart");
static_assert(sizeof(RSBattleCharacter_C_DoBattleSequencerStart) == 0x000003, "Wrong size on RSBattleCharacter_C_DoBattleSequencerStart");
static_assert(offsetof(RSBattleCharacter_C_DoBattleSequencerStart, bSetEnemyEvent) == 0x000000, "Member 'RSBattleCharacter_C_DoBattleSequencerStart::bSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DoBattleSequencerStart, bDriveSequence) == 0x000001, "Member 'RSBattleCharacter_C_DoBattleSequencerStart::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DoBattleSequencerStart, bDummy) == 0x000002, "Member 'RSBattleCharacter_C_DoBattleSequencerStart::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoBattleSequencerEnd
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_DoBattleSequencerEnd final
{
public:
	bool                                          bSetEnemyEvent;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoBattleSequencerEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoBattleSequencerEnd");
static_assert(sizeof(RSBattleCharacter_C_DoBattleSequencerEnd) == 0x000003, "Wrong size on RSBattleCharacter_C_DoBattleSequencerEnd");
static_assert(offsetof(RSBattleCharacter_C_DoBattleSequencerEnd, bSetEnemyEvent) == 0x000000, "Member 'RSBattleCharacter_C_DoBattleSequencerEnd::bSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DoBattleSequencerEnd, bDriveSequence) == 0x000001, "Member 'RSBattleCharacter_C_DoBattleSequencerEnd::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DoBattleSequencerEnd, bDummy) == 0x000002, "Member 'RSBattleCharacter_C_DoBattleSequencerEnd::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.LoadCameraDitherData
// 0x0128 (0x0128 - 0x0000)
struct RSBattleCharacter_C_LoadCameraDitherData final
{
public:
	TArray<class USceneComponent*>                ChildrenComponents;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UDataTable*                             LoadedDitherTable;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCameraDitherTableRowName_RowName;      // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F81[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterDither                       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0020)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F82[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F83[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F84[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F85[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F86[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F87[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharacterDither                       CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0100(0x0020)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_LoadCameraDitherData) == 0x000008, "Wrong alignment on RSBattleCharacter_C_LoadCameraDitherData");
static_assert(sizeof(RSBattleCharacter_C_LoadCameraDitherData) == 0x000128, "Wrong size on RSBattleCharacter_C_LoadCameraDitherData");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, ChildrenComponents) == 0x000000, "Member 'RSBattleCharacter_C_LoadCameraDitherData::ChildrenComponents' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, LoadedDitherTable) == 0x000010, "Member 'RSBattleCharacter_C_LoadCameraDitherData::LoadedDitherTable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleCharacter_C_LoadCameraDitherData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleCharacter_C_LoadCameraDitherData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetCameraDitherTableRowName_RowName) == 0x000024, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetCameraDitherTableRowName_RowName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000050, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000058, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, K2Node_DynamicCast_AsCapsule_Collision) == 0x000070, "Member 'RSBattleCharacter_C_LoadCameraDitherData::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'RSBattleCharacter_C_LoadCameraDitherData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Less_IntInt_ReturnValue) == 0x000079, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetObjectName_ReturnValue) == 0x000080, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Array_Find_ReturnValue) == 0x000090, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Array_AddUnique_ReturnValue) == 0x000094, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000098, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x0000A0, "Member 'RSBattleCharacter_C_LoadCameraDitherData::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'RSBattleCharacter_C_LoadCameraDitherData::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Array_AddUnique_ReturnValue_1) == 0x0000AC, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetChildrenComponents_Children) == 0x0000B0, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetObjectName_ReturnValue_1) == 0x0000C0, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Split_LeftS) == 0x0000D0, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Split_RightS) == 0x0000E0, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Split_ReturnValue) == 0x0000F0, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Conv_StringToName_ReturnValue) == 0x0000F4, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_Array_Find_ReturnValue_1) == 0x0000FC, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000100, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000120, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_LoadCameraDitherData, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000121, "Member 'RSBattleCharacter_C_LoadCameraDitherData::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckCameraDitherApply
// 0x0078 (0x0078 - 0x0000)
struct RSBattleCharacter_C_CheckCameraDitherApply final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorldRotation;                                     // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Apply;                                             // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F88[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindClosestPointOnSegment_ReturnValue;    // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckCameraDitherApply) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CheckCameraDitherApply");
static_assert(sizeof(RSBattleCharacter_C_CheckCameraDitherApply) == 0x000078, "Wrong size on RSBattleCharacter_C_CheckCameraDitherApply");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, WorldLocation) == 0x000000, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::WorldLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, HalfHeight) == 0x00000C, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::HalfHeight' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, WorldRotation) == 0x000010, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::WorldRotation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, Apply) == 0x00001C, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::Apply' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_GetUpVector_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_FindClosestPointOnSegment_ReturnValue) == 0x000064, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_FindClosestPointOnSegment_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_Vector_Distance_ReturnValue) == 0x000070, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckCameraDitherApply, CallFunc_Less_FloatFloat_ReturnValue) == 0x000074, "Member 'RSBattleCharacter_C_CheckCameraDitherApply::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetHiddenCharacterAttachment
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_SetHiddenCharacterAttachment final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHiddenCharacterAttachment_ReturnValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetHiddenCharacterAttachment) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetHiddenCharacterAttachment");
static_assert(sizeof(RSBattleCharacter_C_SetHiddenCharacterAttachment) == 0x000003, "Wrong size on RSBattleCharacter_C_SetHiddenCharacterAttachment");
static_assert(offsetof(RSBattleCharacter_C_SetHiddenCharacterAttachment, NewHidden) == 0x000000, "Member 'RSBattleCharacter_C_SetHiddenCharacterAttachment::NewHidden' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHiddenCharacterAttachment, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetHiddenCharacterAttachment::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHiddenCharacterAttachment, CallFunc_SetHiddenCharacterAttachment_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_SetHiddenCharacterAttachment::CallFunc_SetHiddenCharacterAttachment_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetupCelLookMaterialNonPlayer
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetupCelLookMaterialNonPlayer final
{
public:
	class ABP_StageParameterSettingVolumeManager_C* CallFunc_GetStageParameterSettingManager_SettingManager; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetupCelLookMaterialNonPlayer) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetupCelLookMaterialNonPlayer");
static_assert(sizeof(RSBattleCharacter_C_SetupCelLookMaterialNonPlayer) == 0x000010, "Wrong size on RSBattleCharacter_C_SetupCelLookMaterialNonPlayer");
static_assert(offsetof(RSBattleCharacter_C_SetupCelLookMaterialNonPlayer, CallFunc_GetStageParameterSettingManager_SettingManager) == 0x000000, "Member 'RSBattleCharacter_C_SetupCelLookMaterialNonPlayer::CallFunc_GetStageParameterSettingManager_SettingManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetupCelLookMaterialNonPlayer, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_SetupCelLookMaterialNonPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.FinalizeCelLookMaterial
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_FinalizeCelLookMaterial final
{
public:
	class ABP_StageParameterSettingVolumeManager_C* CallFunc_GetStageParameterSettingManager_SettingManager; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_FinalizeCelLookMaterial) == 0x000008, "Wrong alignment on RSBattleCharacter_C_FinalizeCelLookMaterial");
static_assert(sizeof(RSBattleCharacter_C_FinalizeCelLookMaterial) == 0x000010, "Wrong size on RSBattleCharacter_C_FinalizeCelLookMaterial");
static_assert(offsetof(RSBattleCharacter_C_FinalizeCelLookMaterial, CallFunc_GetStageParameterSettingManager_SettingManager) == 0x000000, "Member 'RSBattleCharacter_C_FinalizeCelLookMaterial::CallFunc_GetStageParameterSettingManager_SettingManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_FinalizeCelLookMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_FinalizeCelLookMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsPlayVibrationController
// 0x01F8 (0x01F8 - 0x0000)
struct RSBattleCharacter_C_IsPlayVibrationController final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bCanPlay;                                          // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCanPlay;                                         // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F89[0x5];                                     // 0x01C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface;  // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F8A[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface_1; // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue_1;            // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue_2;            // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsPlayVibrationController) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsPlayVibrationController");
static_assert(sizeof(RSBattleCharacter_C_IsPlayVibrationController) == 0x0001F8, "Wrong size on RSBattleCharacter_C_IsPlayVibrationController");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_IsPlayVibrationController::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, bCanPlay) == 0x0001C0, "Member 'RSBattleCharacter_C_IsPlayVibrationController::bCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, LbCanPlay) == 0x0001C1, "Member 'RSBattleCharacter_C_IsPlayVibrationController::LbCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, Temp_bool_Variable) == 0x0001C2, "Member 'RSBattleCharacter_C_IsPlayVibrationController::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, K2Node_DynamicCast_AsTargetable_Object_Interface) == 0x0001C8, "Member 'RSBattleCharacter_C_IsPlayVibrationController::K2Node_DynamicCast_AsTargetable_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, K2Node_DynamicCast_bSuccess) == 0x0001D8, "Member 'RSBattleCharacter_C_IsPlayVibrationController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, CallFunc_IsValid_ReturnValue) == 0x0001D9, "Member 'RSBattleCharacter_C_IsPlayVibrationController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, CallFunc_IsControlPlayer_ReturnValue) == 0x0001DA, "Member 'RSBattleCharacter_C_IsPlayVibrationController::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, K2Node_DynamicCast_AsTargetable_Object_Interface_1) == 0x0001E0, "Member 'RSBattleCharacter_C_IsPlayVibrationController::K2Node_DynamicCast_AsTargetable_Object_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'RSBattleCharacter_C_IsPlayVibrationController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, CallFunc_IsValid_ReturnValue_1) == 0x0001F1, "Member 'RSBattleCharacter_C_IsPlayVibrationController::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, CallFunc_IsControlPlayer_ReturnValue_1) == 0x0001F2, "Member 'RSBattleCharacter_C_IsPlayVibrationController::CallFunc_IsControlPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, CallFunc_IsControlPlayer_ReturnValue_2) == 0x0001F3, "Member 'RSBattleCharacter_C_IsPlayVibrationController::CallFunc_IsControlPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayVibrationController, Temp_bool_Variable_1) == 0x0001F4, "Member 'RSBattleCharacter_C_IsPlayVibrationController::Temp_bool_Variable_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.VibrationControllerInDamage
// 0x01E8 (0x01E8 - 0x0000)
struct RSBattleCharacter_C_VibrationControllerInDamage final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UForceFeedbackEffect*                   LVibrationData;                                    // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitControllerVibrationType                 LType;                                             // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayVibrationController_bCanPlay;       // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01CA(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8B[0x1];                                     // 0x01CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F8C[0x6];                                     // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_VibrationControllerInDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_VibrationControllerInDamage");
static_assert(sizeof(RSBattleCharacter_C_VibrationControllerInDamage) == 0x0001E8, "Wrong size on RSBattleCharacter_C_VibrationControllerInDamage");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, LVibrationData) == 0x0001C0, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::LVibrationData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, LType) == 0x0001C8, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::LType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, CallFunc_IsPlayVibrationController_bCanPlay) == 0x0001C9, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::CallFunc_IsPlayVibrationController_bCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, Temp_byte_Variable) == 0x0001CA, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, CallFunc_Array_Find_ReturnValue) == 0x0001CC, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001D0, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, CallFunc_IsValid_ReturnValue) == 0x0001D1, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, CallFunc_GetGameSystemManager_Manager) == 0x0001D8, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamage, K2Node_SwitchEnum_CmpSuccess) == 0x0001E0, "Member 'RSBattleCharacter_C_VibrationControllerInDamage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetActorAllTickEnabled
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_SetActorAllTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetActorAllTickEnabled) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetActorAllTickEnabled");
static_assert(sizeof(RSBattleCharacter_C_SetActorAllTickEnabled) == 0x000003, "Wrong size on RSBattleCharacter_C_SetActorAllTickEnabled");
static_assert(offsetof(RSBattleCharacter_C_SetActorAllTickEnabled, bEnabled) == 0x000000, "Member 'RSBattleCharacter_C_SetActorAllTickEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetActorAllTickEnabled, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetActorAllTickEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetActorAllTickEnabled, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_SetActorAllTickEnabled::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoHPEvent
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_DoHPEvent final
{
public:
	int32                                         NewHP;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevHP;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoHPEvent) == 0x000004, "Wrong alignment on RSBattleCharacter_C_DoHPEvent");
static_assert(sizeof(RSBattleCharacter_C_DoHPEvent) == 0x00000C, "Wrong size on RSBattleCharacter_C_DoHPEvent");
static_assert(offsetof(RSBattleCharacter_C_DoHPEvent, NewHP) == 0x000000, "Member 'RSBattleCharacter_C_DoHPEvent::NewHP' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DoHPEvent, PrevHP) == 0x000004, "Member 'RSBattleCharacter_C_DoHPEvent::PrevHP' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DoHPEvent, bDummy) == 0x000008, "Member 'RSBattleCharacter_C_DoHPEvent::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateIconOn
// 0x00F0 (0x00F0 - 0x0000)
struct RSBattleCharacter_C_BadStateIconOn final
{
public:
	struct FBadStateAddParticleData               Data;                                              // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Handle;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CameraOffset;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_EffectRot;                                       // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                L_SocketLocation;                                  // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CameraLocation;                                  // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         L_Handle;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBadStateIconCameraOffset_Value;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F8D[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8E[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BadStateIconOn) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BadStateIconOn");
static_assert(sizeof(RSBattleCharacter_C_BadStateIconOn) == 0x0000F0, "Wrong size on RSBattleCharacter_C_BadStateIconOn");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, Data) == 0x000000, "Member 'RSBattleCharacter_C_BadStateIconOn::Data' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, Handle) == 0x000028, "Member 'RSBattleCharacter_C_BadStateIconOn::Handle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, L_CameraOffset) == 0x000030, "Member 'RSBattleCharacter_C_BadStateIconOn::L_CameraOffset' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, L_EffectRot) == 0x000034, "Member 'RSBattleCharacter_C_BadStateIconOn::L_EffectRot' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, L_SocketLocation) == 0x000040, "Member 'RSBattleCharacter_C_BadStateIconOn::L_SocketLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, L_CameraLocation) == 0x00004C, "Member 'RSBattleCharacter_C_BadStateIconOn::L_CameraLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, L_Handle) == 0x000058, "Member 'RSBattleCharacter_C_BadStateIconOn::L_Handle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_GetBadStateIconCameraOffset_Value) == 0x000060, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_GetBadStateIconCameraOffset_Value' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_FMax_ReturnValue) == 0x000068, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000070, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_Vector_Distance_ReturnValue) == 0x000078, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_GetCameraLocation_ReturnValue) == 0x00007C, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000088, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000090, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_FindLookAtRotation_ReturnValue) == 0x000094, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_GetSocketLocation_ReturnValue) == 0x0000A0, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_BreakRotator_Roll) == 0x0000AC, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_BreakRotator_Pitch) == 0x0000B0, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_BreakRotator_Yaw) == 0x0000B4, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_MakeRotator_ReturnValue) == 0x0000B8, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_K2_GetComponentScale_ReturnValue) == 0x0000C4, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_Divide_VectorVector_ReturnValue) == 0x0000D0, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000DC, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOn, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0000E8, "Member 'RSBattleCharacter_C_BadStateIconOn::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateIconOff
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BadStateIconOff final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateIconOff) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateIconOff");
static_assert(sizeof(RSBattleCharacter_C_BadStateIconOff) == 0x000002, "Wrong size on RSBattleCharacter_C_BadStateIconOff");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOff, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateIconOff::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateIconOff, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateIconOff::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RegisterCameraDitherParticleHandle
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_RegisterCameraDitherParticleHandle final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F8F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_RegisterCameraDitherParticleHandle) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RegisterCameraDitherParticleHandle");
static_assert(sizeof(RSBattleCharacter_C_RegisterCameraDitherParticleHandle) == 0x000010, "Wrong size on RSBattleCharacter_C_RegisterCameraDitherParticleHandle");
static_assert(offsetof(RSBattleCharacter_C_RegisterCameraDitherParticleHandle, Particle) == 0x000000, "Member 'RSBattleCharacter_C_RegisterCameraDitherParticleHandle::Particle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RegisterCameraDitherParticleHandle, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_RegisterCameraDitherParticleHandle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RegisterCameraDitherParticleHandle, CallFunc_Array_AddUnique_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_RegisterCameraDitherParticleHandle::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UnregisterCameraDitherParticleHandle
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_UnregisterCameraDitherParticleHandle final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class URSParticleSystemComponentBase*   Temp_object_Variable;                              // 0x0008(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_UnregisterCameraDitherParticleHandle) == 0x000008, "Wrong alignment on RSBattleCharacter_C_UnregisterCameraDitherParticleHandle");
static_assert(sizeof(RSBattleCharacter_C_UnregisterCameraDitherParticleHandle) == 0x000018, "Wrong size on RSBattleCharacter_C_UnregisterCameraDitherParticleHandle");
static_assert(offsetof(RSBattleCharacter_C_UnregisterCameraDitherParticleHandle, Particle) == 0x000000, "Member 'RSBattleCharacter_C_UnregisterCameraDitherParticleHandle::Particle' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UnregisterCameraDitherParticleHandle, Temp_object_Variable) == 0x000008, "Member 'RSBattleCharacter_C_UnregisterCameraDitherParticleHandle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UnregisterCameraDitherParticleHandle, CallFunc_Array_RemoveItem_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_UnregisterCameraDitherParticleHandle::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCameraDitherToParticle
// 0x0060 (0x0060 - 0x0000)
struct RSBattleCharacter_C_SetCameraDitherToParticle final
{
public:
	float                                         DeitherValue;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F90[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       ParticleMaterialInstance;                          // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F91[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F92[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       CallFunc_GetDynamicMaterialInstanceALL_ReturnValue; // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetCameraDitherToParticle) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetCameraDitherToParticle");
static_assert(sizeof(RSBattleCharacter_C_SetCameraDitherToParticle) == 0x000060, "Wrong size on RSBattleCharacter_C_SetCameraDitherToParticle");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, DeitherValue) == 0x000000, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::DeitherValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, ParticleMaterialInstance) == 0x000008, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::ParticleMaterialInstance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, Temp_int_Loop_Num_Variable) == 0x000028, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, Temp_int_Loop_Num_Variable_1) == 0x00003C, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_GetDynamicMaterialInstanceALL_ReturnValue) == 0x000048, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_GetDynamicMaterialInstanceALL_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDitherToParticle, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'RSBattleCharacter_C_SetCameraDitherToParticle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CameraAttentionStart
// 0x0040 (0x0040 - 0x0000)
struct RSBattleCharacter_C_CameraAttentionStart final
{
public:
	class UCurveFloat*                            ActorCurveIn;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangeFov;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F93[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetFov;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FovCurveIn;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableOffsetAngleVt;                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F94[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetAngleVtIn;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableOffsetDist;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F95[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetDistIn;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F96[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CameraAttentionStart) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CameraAttentionStart");
static_assert(sizeof(RSBattleCharacter_C_CameraAttentionStart) == 0x000040, "Wrong size on RSBattleCharacter_C_CameraAttentionStart");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, ActorCurveIn) == 0x000000, "Member 'RSBattleCharacter_C_CameraAttentionStart::ActorCurveIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, bChangeFov) == 0x000008, "Member 'RSBattleCharacter_C_CameraAttentionStart::bChangeFov' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, TargetFov) == 0x00000C, "Member 'RSBattleCharacter_C_CameraAttentionStart::TargetFov' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, FovCurveIn) == 0x000010, "Member 'RSBattleCharacter_C_CameraAttentionStart::FovCurveIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, bEnableOffsetAngleVt) == 0x000018, "Member 'RSBattleCharacter_C_CameraAttentionStart::bEnableOffsetAngleVt' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, OffsetAngleVtIn) == 0x00001C, "Member 'RSBattleCharacter_C_CameraAttentionStart::OffsetAngleVtIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, bEnableOffsetDist) == 0x000020, "Member 'RSBattleCharacter_C_CameraAttentionStart::bEnableOffsetDist' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, OffsetDistIn) == 0x000024, "Member 'RSBattleCharacter_C_CameraAttentionStart::OffsetDistIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, Dummy) == 0x000028, "Member 'RSBattleCharacter_C_CameraAttentionStart::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, CallFunc_GetPlayerManager_PlayerManager) == 0x000030, "Member 'RSBattleCharacter_C_CameraAttentionStart::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_CameraAttentionStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CameraAttentionEnd
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_CameraAttentionEnd final
{
public:
	class UCurveFloat*                            ActorCurveOut;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FovCurveOut;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F97[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            NewLocalVar_1;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CameraAttentionEnd) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CameraAttentionEnd");
static_assert(sizeof(RSBattleCharacter_C_CameraAttentionEnd) == 0x000030, "Wrong size on RSBattleCharacter_C_CameraAttentionEnd");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionEnd, ActorCurveOut) == 0x000000, "Member 'RSBattleCharacter_C_CameraAttentionEnd::ActorCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionEnd, FovCurveOut) == 0x000008, "Member 'RSBattleCharacter_C_CameraAttentionEnd::FovCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionEnd, Dummy) == 0x000010, "Member 'RSBattleCharacter_C_CameraAttentionEnd::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionEnd, NewLocalVar_1) == 0x000018, "Member 'RSBattleCharacter_C_CameraAttentionEnd::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionEnd, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'RSBattleCharacter_C_CameraAttentionEnd::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionEnd, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_CameraAttentionEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CallDead
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_CallDead final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CallDead) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CallDead");
static_assert(sizeof(RSBattleCharacter_C_CallDead) == 0x000002, "Wrong size on RSBattleCharacter_C_CallDead");
static_assert(offsetof(RSBattleCharacter_C_CallDead, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_CallDead::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CallDead, CallFunc_OnDead_Dummy) == 0x000001, "Member 'RSBattleCharacter_C_CallDead::CallFunc_OnDead_Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetMeshFitGroundCheckLocationArray
// 0x0080 (0x0080 - 0x0000)
struct RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray final
{
public:
	TArray<struct FVector>                        Location;                                          // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	float                                         CheckHeight;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray");
static_assert(sizeof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray) == 0x000080, "Wrong size on RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, Location) == 0x000000, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CheckHeight) == 0x000010, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CheckHeight' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_MakeVector_ReturnValue_1) == 0x00004C, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000058, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000064, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray, K2Node_MakeArray_Array) == 0x000070, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray::K2Node_MakeArray_Array' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckExecuteNotifyKind
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_CheckExecuteNotifyKind final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharaExecuteNotifyKind                       ExecuteKind;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExecute;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsExecute;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckExecuteNotifyKind) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CheckExecuteNotifyKind");
static_assert(sizeof(RSBattleCharacter_C_CheckExecuteNotifyKind) == 0x000010, "Wrong size on RSBattleCharacter_C_CheckExecuteNotifyKind");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteNotifyKind, Param_Owner) == 0x000000, "Member 'RSBattleCharacter_C_CheckExecuteNotifyKind::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteNotifyKind, ExecuteKind) == 0x000008, "Member 'RSBattleCharacter_C_CheckExecuteNotifyKind::ExecuteKind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteNotifyKind, IsExecute) == 0x000009, "Member 'RSBattleCharacter_C_CheckExecuteNotifyKind::IsExecute' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteNotifyKind, LIsExecute) == 0x00000A, "Member 'RSBattleCharacter_C_CheckExecuteNotifyKind::LIsExecute' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalculateBrainCrashDamage
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_CalculateBrainCrashDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LDamage;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcDirectDamageValue_DamageValue;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CalculateBrainCrashDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalculateBrainCrashDamage");
static_assert(sizeof(RSBattleCharacter_C_CalculateBrainCrashDamage) == 0x000028, "Wrong size on RSBattleCharacter_C_CalculateBrainCrashDamage");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, Damage) == 0x000000, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, LDamage) == 0x000004, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, CallFunc_GetHP_HP) == 0x000010, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, CallFunc_CalcDirectDamageValue_DamageValue) == 0x000014, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::CallFunc_CalcDirectDamageValue_DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, CallFunc_GetDebuggingManager_Manager) == 0x000018, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalculateBrainCrashDamage, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_CalculateBrainCrashDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsLastBrainCrash
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_IsLastBrainCrash final
{
public:
	bool                                          IsLast;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsLast;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F98[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CalculateBrainCrashDamage_damage;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsLastBrainCrash) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsLastBrainCrash");
static_assert(sizeof(RSBattleCharacter_C_IsLastBrainCrash) == 0x000014, "Wrong size on RSBattleCharacter_C_IsLastBrainCrash");
static_assert(offsetof(RSBattleCharacter_C_IsLastBrainCrash, IsLast) == 0x000000, "Member 'RSBattleCharacter_C_IsLastBrainCrash::IsLast' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsLastBrainCrash, LIsLast) == 0x000001, "Member 'RSBattleCharacter_C_IsLastBrainCrash::LIsLast' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsLastBrainCrash, CallFunc_CalculateBrainCrashDamage_damage) == 0x000004, "Member 'RSBattleCharacter_C_IsLastBrainCrash::CallFunc_CalculateBrainCrashDamage_damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsLastBrainCrash, CallFunc_GetHP_HP) == 0x000008, "Member 'RSBattleCharacter_C_IsLastBrainCrash::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsLastBrainCrash, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_IsLastBrainCrash::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsLastBrainCrash, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_IsLastBrainCrash::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableCharacterTick
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsEnableCharacterTick final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnableCharacterTick) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsEnableCharacterTick");
static_assert(sizeof(RSBattleCharacter_C_IsEnableCharacterTick) == 0x000001, "Wrong size on RSBattleCharacter_C_IsEnableCharacterTick");
static_assert(offsetof(RSBattleCharacter_C_IsEnableCharacterTick, bEnable) == 0x000000, "Member 'RSBattleCharacter_C_IsEnableCharacterTick::bEnable' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnSetStealthMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_OnSetStealthMode final
{
public:
	bool                                          bStealth;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnSetStealthMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_OnSetStealthMode");
static_assert(sizeof(RSBattleCharacter_C_OnSetStealthMode) == 0x000002, "Wrong size on RSBattleCharacter_C_OnSetStealthMode");
static_assert(offsetof(RSBattleCharacter_C_OnSetStealthMode, bStealth) == 0x000000, "Member 'RSBattleCharacter_C_OnSetStealthMode::bStealth' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnSetStealthMode, bSuccess) == 0x000001, "Member 'RSBattleCharacter_C_OnSetStealthMode::bSuccess' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DebugSetCharaParam
// 0x0600 (0x0600 - 0x0000)
struct RSBattleCharacter_C_DebugSetCharaParam final
{
public:
	class FName                                   DebugParamName;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharactersParameterTable              L_param;                                           // 0x0008(0x01F8)(Edit, BlueprintVisible)
	struct FCharactersParameter                   Data;                                              // 0x0200(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         LCrashAccumulation;                                // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LCrashResistance;                                  // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0400(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DebugSetCharaParam) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DebugSetCharaParam");
static_assert(sizeof(RSBattleCharacter_C_DebugSetCharaParam) == 0x000600, "Wrong size on RSBattleCharacter_C_DebugSetCharaParam");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, DebugParamName) == 0x000000, "Member 'RSBattleCharacter_C_DebugSetCharaParam::DebugParamName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, L_param) == 0x000008, "Member 'RSBattleCharacter_C_DebugSetCharaParam::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, Data) == 0x000200, "Member 'RSBattleCharacter_C_DebugSetCharaParam::Data' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, LCrashAccumulation) == 0x0003F8, "Member 'RSBattleCharacter_C_DebugSetCharaParam::LCrashAccumulation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, LCrashResistance) == 0x0003FC, "Member 'RSBattleCharacter_C_DebugSetCharaParam::LCrashResistance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, CallFunc_GetDataTableRowFromName_OutRow) == 0x000400, "Member 'RSBattleCharacter_C_DebugSetCharaParam::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DebugSetCharaParam, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0005F8, "Member 'RSBattleCharacter_C_DebugSetCharaParam::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckBadStatusTips
// 0x0110 (0x0110 - 0x0000)
struct RSBattleCharacter_C_CheckBadStatusTips final
{
public:
	EHCBadState                                   BadStatus;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F99[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     LSkill;                                            // 0x0008(0x00F0)(Edit, BlueprintVisible)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9A[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_1; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_2; // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_3; // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_4; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CheckBadStatusTips) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CheckBadStatusTips");
static_assert(sizeof(RSBattleCharacter_C_CheckBadStatusTips) == 0x000110, "Wrong size on RSBattleCharacter_C_CheckBadStatusTips");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, BadStatus) == 0x000000, "Member 'RSBattleCharacter_C_CheckBadStatusTips::BadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, LSkill) == 0x000008, "Member 'RSBattleCharacter_C_CheckBadStatusTips::LSkill' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, K2Node_SwitchEnum_CmpSuccess) == 0x0000F8, "Member 'RSBattleCharacter_C_CheckBadStatusTips::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x0000FC, "Member 'RSBattleCharacter_C_CheckBadStatusTips::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_1) == 0x000100, "Member 'RSBattleCharacter_C_CheckBadStatusTips::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_2) == 0x000104, "Member 'RSBattleCharacter_C_CheckBadStatusTips::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_3) == 0x000108, "Member 'RSBattleCharacter_C_CheckBadStatusTips::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckBadStatusTips, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_4) == 0x00010C, "Member 'RSBattleCharacter_C_CheckBadStatusTips::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_4' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CameraAttentionStart_LookAtPos
// 0x0048 (0x0048 - 0x0000)
struct RSBattleCharacter_C_CameraAttentionStart_LookAtPos final
{
public:
	class UCurveFloat*                            ActorCurveIn;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangeFov;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetFov;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FovCurveIn;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableOffsetAngleVt;                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetAngleVtIn;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableOffsetDist;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9D[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetDistIn;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtPos;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9E[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CameraAttentionStart_LookAtPos");
static_assert(sizeof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos) == 0x000048, "Wrong size on RSBattleCharacter_C_CameraAttentionStart_LookAtPos");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, ActorCurveIn) == 0x000000, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::ActorCurveIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, bChangeFov) == 0x000008, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::bChangeFov' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, TargetFov) == 0x00000C, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::TargetFov' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, FovCurveIn) == 0x000010, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::FovCurveIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, bEnableOffsetAngleVt) == 0x000018, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::bEnableOffsetAngleVt' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, OffsetAngleVtIn) == 0x00001C, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::OffsetAngleVtIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, bEnableOffsetDist) == 0x000020, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::bEnableOffsetDist' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, OffsetDistIn) == 0x000024, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::OffsetDistIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, LookAtPos) == 0x000028, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::LookAtPos' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, Dummy) == 0x000034, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, CallFunc_GetPlayerManager_PlayerManager) == 0x000038, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CameraAttentionStart_LookAtPos, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_CameraAttentionStart_LookAtPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBodyMaterialScalarParameter
// 0x0040 (0x0040 - 0x0000)
struct RSBattleCharacter_C_SetBodyMaterialScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParameterValue;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA0[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetBodyMaterialScalarParameter) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetBodyMaterialScalarParameter");
static_assert(sizeof(RSBattleCharacter_C_SetBodyMaterialScalarParameter) == 0x000040, "Wrong size on RSBattleCharacter_C_SetBodyMaterialScalarParameter");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, ParameterName) == 0x000000, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, ParameterValue) == 0x000008, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::ParameterValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, Temp_int_Variable) == 0x00000C, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, CallFunc_GetBodyMeshes_Meshes) == 0x000018, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBodyMaterialScalarParameter, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_SetBodyMaterialScalarParameter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckReceiveStealthCritical
// 0x0228 (0x0228 - 0x0000)
struct RSBattleCharacter_C_CheckReceiveStealthCritical final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA1[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA2[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA3[0x4];                                     // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA4[0x6];                                     // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Stealth_ReturnValue;          // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckReceiveStealthCritical) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CheckReceiveStealthCritical");
static_assert(sizeof(RSBattleCharacter_C_CheckReceiveStealthCritical) == 0x000228, "Wrong size on RSBattleCharacter_C_CheckReceiveStealthCritical");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, Return) == 0x0001C0, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, LAttacker) == 0x0001C8, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x0001D0, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_GetBattleTargetActor_TargetActor) == 0x0001E8, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsValid_ReturnValue) == 0x0001F0, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsValid_ReturnValue_1) == 0x0001F1, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsValid_ReturnValue_2) == 0x0001F2, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsValid_ReturnValue_3) == 0x0001F3, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0001F8, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, K2Node_DynamicCast_bSuccess_1) == 0x000208, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000209, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, K2Node_DynamicCast_AsPlayer_Interface) == 0x000210, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, K2Node_DynamicCast_bSuccess_2) == 0x000220, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsActiveSAS_Stealth_ReturnValue) == 0x000221, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsActiveSAS_Stealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckReceiveStealthCritical, CallFunc_IsBattling_bBatting) == 0x000222, "Member 'RSBattleCharacter_C_CheckReceiveStealthCritical::CallFunc_IsBattling_bBatting' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DoDynamicEventBeforeBindCharacter
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter");
static_assert(sizeof(RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter) == 0x000001, "Wrong size on RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter");
static_assert(offsetof(RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetupMaterialOutlineIndex
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetupMaterialOutlineIndex final
{
public:
	class UMaterialInterface*                     CallFunc_SearchMeshMaterialFromSlot_FindMaterial;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SearchMeshMaterialFromSlot_Index;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetupMaterialOutlineIndex) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetupMaterialOutlineIndex");
static_assert(sizeof(RSBattleCharacter_C_SetupMaterialOutlineIndex) == 0x000010, "Wrong size on RSBattleCharacter_C_SetupMaterialOutlineIndex");
static_assert(offsetof(RSBattleCharacter_C_SetupMaterialOutlineIndex, CallFunc_SearchMeshMaterialFromSlot_FindMaterial) == 0x000000, "Member 'RSBattleCharacter_C_SetupMaterialOutlineIndex::CallFunc_SearchMeshMaterialFromSlot_FindMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetupMaterialOutlineIndex, CallFunc_SearchMeshMaterialFromSlot_Index) == 0x000008, "Member 'RSBattleCharacter_C_SetupMaterialOutlineIndex::CallFunc_SearchMeshMaterialFromSlot_Index' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetupMaterialOutlineIndex, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetupMaterialOutlineIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ResetSelfHateFromEnemy
// 0x0060 (0x0060 - 0x0000)
struct RSBattleCharacter_C_ResetSelfHateFromEnemy final
{
public:
	class ARSBattleCharacter_C*                   LEnemy;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA6[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyListRef_ReturnValue;              // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA7[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA8[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ResetSelfHateFromEnemy) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ResetSelfHateFromEnemy");
static_assert(sizeof(RSBattleCharacter_C_ResetSelfHateFromEnemy) == 0x000060, "Wrong size on RSBattleCharacter_C_ResetSelfHateFromEnemy");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, LEnemy) == 0x000000, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::LEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_GetEnemyListRef_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_GetEnemyListRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_Array_Get_Item) == 0x000038, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, K2Node_DynamicCast_AsRSBattle_Character) == 0x000048, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetSelfHateFromEnemy, CallFunc_IsEnemy_ReturnValue) == 0x000059, "Member 'RSBattleCharacter_C_ResetSelfHateFromEnemy::CallFunc_IsEnemy_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBossHpDisp
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsBossHpDisp final
{
public:
	bool                                          IsDisp;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBossHpDisp) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBossHpDisp");
static_assert(sizeof(RSBattleCharacter_C_IsBossHpDisp) == 0x000001, "Wrong size on RSBattleCharacter_C_IsBossHpDisp");
static_assert(offsetof(RSBattleCharacter_C_IsBossHpDisp, IsDisp) == 0x000000, "Member 'RSBattleCharacter_C_IsBossHpDisp::IsDisp' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.InitializeDifficulty
// 0x0080 (0x0080 - 0x0000)
struct RSBattleCharacter_C_InitializeDifficulty final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultyDamageRate                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FAA[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultyDamageRate                  CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0020(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FAB[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultyDamageRate                  CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x0038(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FAC[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultyDamageRate                  CallFunc_GetDataTableRowFromName_OutRow_3;         // 0x0050(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_3;    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FAD[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultyDamageRate                  CallFunc_GetDataTableRowFromName_OutRow_4;         // 0x0068(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_4;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_InitializeDifficulty) == 0x000008, "Wrong alignment on RSBattleCharacter_C_InitializeDifficulty");
static_assert(sizeof(RSBattleCharacter_C_InitializeDifficulty) == 0x000080, "Wrong size on RSBattleCharacter_C_InitializeDifficulty");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_InitializeDifficulty::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000020, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000030, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x000038, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x000048, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_OutRow_3) == 0x000050, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_OutRow_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_ReturnValue_3) == 0x000060, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_OutRow_4) == 0x000068, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_OutRow_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_InitializeDifficulty, CallFunc_GetDataTableRowFromName_ReturnValue_4) == 0x000078, "Member 'RSBattleCharacter_C_InitializeDifficulty::CallFunc_GetDataTableRowFromName_ReturnValue_4' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcDirectDamageValue
// 0x03F0 (0x03F0 - 0x0000)
struct RSBattleCharacter_C_CalcDirectDamageValue final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackerOwner;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FAE[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     LSkillInfo;                                        // 0x0028(0x00F0)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FAF[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillParameter                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0120(0x00F0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB0[0x3];                                     // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       K2Node_MakeStruct_HCHitEffectInfo;                 // 0x0214(0x0008)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB1[0x3];                                     // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  K2Node_Select_Default;                             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x0228(0x01C0)(ContainsInstancedReference)
	int32                                         CallFunc_CalcDamageValue_ReturnValue;              // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CalcDirectDamageValue) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcDirectDamageValue");
static_assert(sizeof(RSBattleCharacter_C_CalcDirectDamageValue) == 0x0003F0, "Wrong size on RSBattleCharacter_C_CalcDirectDamageValue");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, DataTable) == 0x000000, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::DataTable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, SkillName) == 0x000008, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::SkillName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, Attacker) == 0x000010, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, AttackerOwner) == 0x000018, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::AttackerOwner' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, DamageValue) == 0x000020, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, LSkillInfo) == 0x000028, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::LSkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, Temp_bool_Variable) == 0x000118, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, CallFunc_GetDataTableRowFromName_OutRow) == 0x000120, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000210, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, K2Node_MakeStruct_HCHitEffectInfo) == 0x000214, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::K2Node_MakeStruct_HCHitEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, CallFunc_IsValid_ReturnValue) == 0x00021C, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, K2Node_Select_Default) == 0x000220, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, K2Node_MakeStruct_HCHitResult) == 0x000228, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::K2Node_MakeStruct_HCHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDirectDamageValue, CallFunc_CalcDamageValue_ReturnValue) == 0x0003E8, "Member 'RSBattleCharacter_C_CalcDirectDamageValue::CallFunc_CalcDamageValue_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetLookAtTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetLookAtTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetCursorPoint_Point;               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetLookAtTargetLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetLookAtTargetLocation");
static_assert(sizeof(RSBattleCharacter_C_GetLookAtTargetLocation) == 0x000018, "Wrong size on RSBattleCharacter_C_GetLookAtTargetLocation");
static_assert(offsetof(RSBattleCharacter_C_GetLookAtTargetLocation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetLookAtTargetLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetLookAtTargetLocation, CallFunc_GetTargetCursorPoint_Point) == 0x00000C, "Member 'RSBattleCharacter_C_GetLookAtTargetLocation::CallFunc_GetTargetCursorPoint_Point' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetAutoAimTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetAutoAimTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetAutoAimTargetLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetAutoAimTargetLocation");
static_assert(sizeof(RSBattleCharacter_C_GetAutoAimTargetLocation) == 0x000018, "Wrong size on RSBattleCharacter_C_GetAutoAimTargetLocation");
static_assert(offsetof(RSBattleCharacter_C_GetAutoAimTargetLocation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetAutoAimTargetLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAutoAimTargetLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetAutoAimTargetLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCharactersParameterName
// 0x0170 (0x0170 - 0x0000)
struct RSBattleCharacter_C_SetCharactersParameterName final
{
public:
	bool                                          L_bDLCBondsEpisode;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bRelativeLV;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     L_bondsTargetID;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     L_bondsPlayerID;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bBonds;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_lv;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAssumptionData_retrun_enable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB3[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAssumptionData_outAssumptionLv;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAssumptionData_outRelativeLv;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAssumptionData_outIsFreeLv;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB4[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB5[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Right_ReturnValue;                        // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FB6[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0078(0x00D0)(NoDestructor)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetIsProgressBondsEpisode_playerID;       // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetIsProgressBondsEpisode_targetID;       // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsProgressBondsEpisode_ReturnValue;    // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB7[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuestParamManager*                     CallFunc_GetQuestParamManager_ReturnValue;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPlayingDLCBondsNow_ReturnValue;      // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetCharactersParameterName) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetCharactersParameterName");
static_assert(sizeof(RSBattleCharacter_C_SetCharactersParameterName) == 0x000170, "Wrong size on RSBattleCharacter_C_SetCharactersParameterName");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, L_bDLCBondsEpisode) == 0x000000, "Member 'RSBattleCharacter_C_SetCharactersParameterName::L_bDLCBondsEpisode' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, L_bRelativeLV) == 0x000001, "Member 'RSBattleCharacter_C_SetCharactersParameterName::L_bRelativeLV' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, L_bondsTargetID) == 0x000002, "Member 'RSBattleCharacter_C_SetCharactersParameterName::L_bondsTargetID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, L_bondsPlayerID) == 0x000003, "Member 'RSBattleCharacter_C_SetCharactersParameterName::L_bondsPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, L_bBonds) == 0x000004, "Member 'RSBattleCharacter_C_SetCharactersParameterName::L_bBonds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, L_lv) == 0x000008, "Member 'RSBattleCharacter_C_SetCharactersParameterName::L_lv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Clamp_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetAssumptionData_retrun_enable) == 0x000014, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetAssumptionData_retrun_enable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetAssumptionData_outAssumptionLv) == 0x000018, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetAssumptionData_outAssumptionLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetAssumptionData_outRelativeLv) == 0x00001C, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetAssumptionData_outRelativeLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetAssumptionData_outIsFreeLv) == 0x00001D, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetAssumptionData_outIsFreeLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Right_ReturnValue) == 0x000050, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Right_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000060, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000078, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_Conv_StringToName_ReturnValue) == 0x000148, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetUserParamManager_UserParamManager) == 0x000150, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_IsEnemy_bEnemy) == 0x000158, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetIsProgressBondsEpisode_playerID) == 0x000159, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetIsProgressBondsEpisode_playerID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetIsProgressBondsEpisode_targetID) == 0x00015A, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetIsProgressBondsEpisode_targetID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetIsProgressBondsEpisode_ReturnValue) == 0x00015B, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetIsProgressBondsEpisode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_GetQuestParamManager_ReturnValue) == 0x000160, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_GetQuestParamManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_IsValid_ReturnValue_1) == 0x000168, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharactersParameterName, CallFunc_CheckPlayingDLCBondsNow_ReturnValue) == 0x000169, "Member 'RSBattleCharacter_C_SetCharactersParameterName::CallFunc_CheckPlayingDLCBondsNow_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetAssumptionData
// 0x02B0 (0x02B0 - 0x0000)
struct RSBattleCharacter_C_GetAssumptionData final
{
public:
	bool                                          bondsIn;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     bondsPlayerID_In;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     bondsTargetID_In;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Retrun_enable;                                     // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         OutAssumptionLv;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutRelativeLv;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutIsFreeLv;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bBondsCheck;                                     // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB8[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LDebugColor;                                       // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_outFreeLv;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     L_mainPlayerID;                                    // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FB9[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyAssumptionLvRangeData            L_rangeDataListData;                               // 0x0020(0x0018)(Edit, BlueprintVisible)
	struct FEnemyAssumptionLvRangeData            L_rangeData;                                       // 0x0038(0x0018)(Edit, BlueprintVisible)
	TArray<struct FEnemyAssumptionLvRangeData>    L_rangeDataList;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_outRelativeLv;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FBA[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_outAssumptionLv;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEnemyAssumptionLvPlayerIdData         L_resultData;                                      // 0x0068(0x0028)(Edit, BlueprintVisible)
	bool                                          L_break;                                           // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FBB[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyAssumptionLvMainPlayerIdData     L_dataListData;                                    // 0x0098(0x0018)(Edit, BlueprintVisible)
	TArray<struct FEnemyAssumptionLvMainPlayerIdData> L_dataList;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   L_rawName;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bRangeData;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FBC[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           L_outRawNames;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FName>                           L_rowNames;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_dataEnable;                                      // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FBD[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyAssumptionLvMainPlayerIdData     L_data;                                            // 0x00F8(0x0018)(Edit, BlueprintVisible)
	int32                                         L_index;                                           // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FBE[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_levelName;                                       // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UDataTable*                             L_dataTable;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FBF[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC0[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC1[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC2[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC3[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC4[0x1];                                     // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC5[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_3;        // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAssumptionDataNamesNative_ReturnValue; // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC6[0x1];                                     // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC7[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC8[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FC9[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FCA[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FCB[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FCC[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckProgressID_ReturnEnable1;            // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBondsProgressID_ReturnEnable1;       // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FCD[0x2];                                     // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FCE[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEnemyAssumptionLvRangeData            CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x0018)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FCF[0x2];                                     // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEnemyAssumptionLvMainPlayerIdData     CallFunc_Array_Get_Item;                           // 0x0220(0x0018)()
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckOverProgressID_ReturnEnable1;        // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckProgressID_ReturnEnable1_1;          // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBondsProgressID_ReturnEnable1_1;     // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD0[0x3];                                     // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD1[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD2[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyAssumptionLvMainPlayerIdData     CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0258(0x0018)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD3[0x2];                                     // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_5;                      // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x027F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD4[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD5[0x3];                                     // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetActorLevelName_ReturnValue;            // 0x0294(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD6[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetAssumptionData) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetAssumptionData");
static_assert(sizeof(RSBattleCharacter_C_GetAssumptionData) == 0x0002B0, "Wrong size on RSBattleCharacter_C_GetAssumptionData");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, bondsIn) == 0x000000, "Member 'RSBattleCharacter_C_GetAssumptionData::bondsIn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, bondsPlayerID_In) == 0x000001, "Member 'RSBattleCharacter_C_GetAssumptionData::bondsPlayerID_In' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, bondsTargetID_In) == 0x000002, "Member 'RSBattleCharacter_C_GetAssumptionData::bondsTargetID_In' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Retrun_enable) == 0x000003, "Member 'RSBattleCharacter_C_GetAssumptionData::Retrun_enable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, OutAssumptionLv) == 0x000004, "Member 'RSBattleCharacter_C_GetAssumptionData::OutAssumptionLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, OutRelativeLv) == 0x000008, "Member 'RSBattleCharacter_C_GetAssumptionData::OutRelativeLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, OutIsFreeLv) == 0x000009, "Member 'RSBattleCharacter_C_GetAssumptionData::OutIsFreeLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_bBondsCheck) == 0x00000A, "Member 'RSBattleCharacter_C_GetAssumptionData::L_bBondsCheck' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, LDebugColor) == 0x00000C, "Member 'RSBattleCharacter_C_GetAssumptionData::LDebugColor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_outFreeLv) == 0x00001C, "Member 'RSBattleCharacter_C_GetAssumptionData::L_outFreeLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_mainPlayerID) == 0x00001D, "Member 'RSBattleCharacter_C_GetAssumptionData::L_mainPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_rangeDataListData) == 0x000020, "Member 'RSBattleCharacter_C_GetAssumptionData::L_rangeDataListData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_rangeData) == 0x000038, "Member 'RSBattleCharacter_C_GetAssumptionData::L_rangeData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_rangeDataList) == 0x000050, "Member 'RSBattleCharacter_C_GetAssumptionData::L_rangeDataList' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_outRelativeLv) == 0x000060, "Member 'RSBattleCharacter_C_GetAssumptionData::L_outRelativeLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_outAssumptionLv) == 0x000064, "Member 'RSBattleCharacter_C_GetAssumptionData::L_outAssumptionLv' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_resultData) == 0x000068, "Member 'RSBattleCharacter_C_GetAssumptionData::L_resultData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_break) == 0x000090, "Member 'RSBattleCharacter_C_GetAssumptionData::L_break' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_dataListData) == 0x000098, "Member 'RSBattleCharacter_C_GetAssumptionData::L_dataListData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_dataList) == 0x0000B0, "Member 'RSBattleCharacter_C_GetAssumptionData::L_dataList' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_rawName) == 0x0000C0, "Member 'RSBattleCharacter_C_GetAssumptionData::L_rawName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_bRangeData) == 0x0000C8, "Member 'RSBattleCharacter_C_GetAssumptionData::L_bRangeData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_outRawNames) == 0x0000D0, "Member 'RSBattleCharacter_C_GetAssumptionData::L_outRawNames' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_rowNames) == 0x0000E0, "Member 'RSBattleCharacter_C_GetAssumptionData::L_rowNames' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_dataEnable) == 0x0000F0, "Member 'RSBattleCharacter_C_GetAssumptionData::L_dataEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_data) == 0x0000F8, "Member 'RSBattleCharacter_C_GetAssumptionData::L_data' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_index) == 0x000110, "Member 'RSBattleCharacter_C_GetAssumptionData::L_index' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_levelName) == 0x000118, "Member 'RSBattleCharacter_C_GetAssumptionData::L_levelName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, L_dataTable) == 0x000128, "Member 'RSBattleCharacter_C_GetAssumptionData::L_dataTable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_bool_True_if_break_was_hit_Variable) == 0x000130, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Array_Index_Variable) == 0x000134, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Not_PreBool_ReturnValue) == 0x000138, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Num_Variable) == 0x00013C, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Array_Index_Variable_1) == 0x000140, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Num_Variable_1) == 0x000144, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Counter_Variable) == 0x000148, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue) == 0x00014C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Array_Index_Variable_2) == 0x000150, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Num_Variable_2) == 0x000154, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue) == 0x000158, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Array_Index_Variable_3) == 0x00015C, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Counter_Variable_1) == 0x000160, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue_1) == 0x000164, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000168, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Array_Index_Variable_4) == 0x00016C, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Not_PreBool_ReturnValue_1) == 0x000170, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Num_Variable_3) == 0x000174, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Counter_Variable_2) == 0x000178, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue_1) == 0x00017C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_BooleanAND_ReturnValue) == 0x00017D, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue_2) == 0x00017E, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue_2) == 0x000180, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Num_Variable_4) == 0x000184, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_bool_True_if_break_was_hit_Variable_2) == 0x000188, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Not_PreBool_ReturnValue_2) == 0x000189, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Array_Index_Variable_5) == 0x00018C, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_bool_True_if_break_was_hit_Variable_3) == 0x000190, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Not_PreBool_ReturnValue_3) == 0x000191, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetAssumptionDataNamesNative_ReturnValue) == 0x000192, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetAssumptionDataNamesNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Counter_Variable_3) == 0x000194, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue_3) == 0x000198, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue_3) == 0x00019C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_BooleanAND_ReturnValue_1) == 0x0001A0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Counter_Variable_4) == 0x0001A4, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001A8, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue_4) == 0x0001AC, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetPlayerManager_PlayerManager) == 0x0001B0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_IsValid_ReturnValue) == 0x0001B8, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue) == 0x0001BC, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetMainPlayer_Player) == 0x0001C0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_IsValid_ReturnValue_1) == 0x0001C8, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetPlayerID_self_CastInput) == 0x0001D0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetPlayerID_ReturnValue) == 0x0001E0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue_1) == 0x0001E4, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_CheckProgressID_ReturnEnable1) == 0x0001E8, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_CheckProgressID_ReturnEnable1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_CheckBondsProgressID_ReturnEnable1) == 0x0001E9, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_CheckBondsProgressID_ReturnEnable1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Add_ReturnValue) == 0x0001EC, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Greater_IntInt_ReturnValue) == 0x0001F0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue_2) == 0x0001F4, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000210, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_IsValid_ReturnValue_2) == 0x000211, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue_3) == 0x000214, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Subtract_IntInt_ReturnValue) == 0x000218, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue_5) == 0x00021C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Get_Item) == 0x000220, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue_4) == 0x000238, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_IsValid_ReturnValue_3) == 0x000239, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_CheckOverProgressID_ReturnEnable1) == 0x00023A, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_CheckOverProgressID_ReturnEnable1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_CheckProgressID_ReturnEnable1_1) == 0x00023B, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_CheckProgressID_ReturnEnable1_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_CheckBondsProgressID_ReturnEnable1_1) == 0x00023C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_CheckBondsProgressID_ReturnEnable1_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue_4) == 0x000240, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Add_ReturnValue_1) == 0x000244, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000248, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue_5) == 0x00024C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Array_Length_ReturnValue_6) == 0x000250, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000258, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000270, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_IsValid_ReturnValue_4) == 0x000271, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Counter_Variable_5) == 0x000274, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, Temp_int_Loop_Num_Variable_5) == 0x000278, "Member 'RSBattleCharacter_C_GetAssumptionData::Temp_int_Loop_Num_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue_5) == 0x00027C, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_BooleanAND_ReturnValue_2) == 0x00027D, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Less_IntInt_ReturnValue_6) == 0x00027E, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_BooleanAND_ReturnValue_3) == 0x00027F, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Add_IntInt_ReturnValue_6) == 0x000280, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetEnemyManager_Manager) == 0x000288, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_IsValid_ReturnValue_5) == 0x000290, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_GetActorLevelName_ReturnValue) == 0x000294, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_GetActorLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetAssumptionData, CallFunc_Conv_NameToString_ReturnValue) == 0x0002A0, "Member 'RSBattleCharacter_C_GetAssumptionData::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AddScarFromHitDamageInfoInterface
// 0x0080 (0x0080 - 0x0000)
struct RSBattleCharacter_C_AddScarFromHitDamageInfoInterface final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD7[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitDamageInfo                         HitDamageInfo;                                     // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_AddScarFromHitDamageInfoInterface) == 0x000010, "Wrong alignment on RSBattleCharacter_C_AddScarFromHitDamageInfoInterface");
static_assert(sizeof(RSBattleCharacter_C_AddScarFromHitDamageInfoInterface) == 0x000080, "Wrong size on RSBattleCharacter_C_AddScarFromHitDamageInfoInterface");
static_assert(offsetof(RSBattleCharacter_C_AddScarFromHitDamageInfoInterface, Actor) == 0x000000, "Member 'RSBattleCharacter_C_AddScarFromHitDamageInfoInterface::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddScarFromHitDamageInfoInterface, HitDamageInfo) == 0x000010, "Member 'RSBattleCharacter_C_AddScarFromHitDamageInfoInterface::HitDamageInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddScarFromHitDamageInfoInterface, ReturnValue) == 0x000070, "Member 'RSBattleCharacter_C_AddScarFromHitDamageInfoInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableSlashEffectInterface
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_IsEnableSlashEffectInterface final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSlashEffect_bEnable;              // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnableSlashEffectInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsEnableSlashEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_IsEnableSlashEffectInterface) == 0x0001C8, "Wrong size on RSBattleCharacter_C_IsEnableSlashEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_IsEnableSlashEffectInterface, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_IsEnableSlashEffectInterface::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableSlashEffectInterface, ReturnValue) == 0x0001C0, "Member 'RSBattleCharacter_C_IsEnableSlashEffectInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableSlashEffectInterface, CallFunc_IsEnableSlashEffect_bEnable) == 0x0001C1, "Member 'RSBattleCharacter_C_IsEnableSlashEffectInterface::CallFunc_IsEnableSlashEffect_bEnable' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsHitWeakChangeDefaultEffectInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_ChangeDefaultEffect_ChangeDefault; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface) == 0x000002, "Wrong size on RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface, CallFunc_IsHitWeak_ChangeDefaultEffect_ChangeDefault) == 0x000001, "Member 'RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface::CallFunc_IsHitWeak_ChangeDefaultEffect_ChangeDefault' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableAtomCuePlayInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDisableAtomCuePlayInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDisableAtomCuePlayInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDisableAtomCuePlayInterface");
static_assert(sizeof(RSBattleCharacter_C_IsDisableAtomCuePlayInterface) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDisableAtomCuePlayInterface");
static_assert(offsetof(RSBattleCharacter_C_IsDisableAtomCuePlayInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDisableAtomCuePlayInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnDamageArmorBreak
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_OnDamageArmorBreak final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnDamageArmorBreak) == 0x000001, "Wrong alignment on RSBattleCharacter_C_OnDamageArmorBreak");
static_assert(sizeof(RSBattleCharacter_C_OnDamageArmorBreak) == 0x000001, "Wrong size on RSBattleCharacter_C_OnDamageArmorBreak");
static_assert(offsetof(RSBattleCharacter_C_OnDamageArmorBreak, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_OnDamageArmorBreak::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCounterWaitInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsCounterWaitInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCounterWait_bWait;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCounterWaitInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsCounterWaitInterface");
static_assert(sizeof(RSBattleCharacter_C_IsCounterWaitInterface) == 0x000002, "Wrong size on RSBattleCharacter_C_IsCounterWaitInterface");
static_assert(offsetof(RSBattleCharacter_C_IsCounterWaitInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsCounterWaitInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCounterWaitInterface, CallFunc_IsCounterWait_bWait) == 0x000001, "Member 'RSBattleCharacter_C_IsCounterWaitInterface::CallFunc_IsCounterWait_bWait' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCounterInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_SetCounterInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetCounterInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetCounterInterface");
static_assert(sizeof(RSBattleCharacter_C_SetCounterInterface) == 0x000001, "Wrong size on RSBattleCharacter_C_SetCounterInterface");
static_assert(offsetof(RSBattleCharacter_C_SetCounterInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_SetCounterInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsSuperArmorInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsSuperArmorInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSuperArmor_bSuperArmor;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsSuperArmorInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsSuperArmorInterface");
static_assert(sizeof(RSBattleCharacter_C_IsSuperArmorInterface) == 0x000002, "Wrong size on RSBattleCharacter_C_IsSuperArmorInterface");
static_assert(offsetof(RSBattleCharacter_C_IsSuperArmorInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsSuperArmorInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsSuperArmorInterface, CallFunc_IsSuperArmor_bSuperArmor) == 0x000001, "Member 'RSBattleCharacter_C_IsSuperArmorInterface::CallFunc_IsSuperArmor_bSuperArmor' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetDamageReactionDirInterface
// 0x01D8 (0x01D8 - 0x0000)
struct RSBattleCharacter_C_GetDamageReactionDirInterface final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FVector                                ReturnValue;                                       // 0x01C0(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDamageReactionDir_ReactionDir;         // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetDamageReactionDirInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetDamageReactionDirInterface");
static_assert(sizeof(RSBattleCharacter_C_GetDamageReactionDirInterface) == 0x0001D8, "Wrong size on RSBattleCharacter_C_GetDamageReactionDirInterface");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDirInterface, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_GetDamageReactionDirInterface::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDirInterface, ReturnValue) == 0x0001C0, "Member 'RSBattleCharacter_C_GetDamageReactionDirInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDirInterface, CallFunc_GetDamageReactionDir_ReactionDir) == 0x0001CC, "Member 'RSBattleCharacter_C_GetDamageReactionDirInterface::CallFunc_GetDamageReactionDir_ReactionDir' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBrainCrashMissAccumulationScale
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_SetBrainCrashMissAccumulationScale final
{
public:
	bool                                          IsBoss;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_BrainCrashMissAccumulationScale    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD9[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetBrainCrashMissAccumulationScale");
static_assert(sizeof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale) == 0x000014, "Wrong size on RSBattleCharacter_C_SetBrainCrashMissAccumulationScale");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale, IsBoss) == 0x000000, "Member 'RSBattleCharacter_C_SetBrainCrashMissAccumulationScale::IsBoss' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale, CallFunc_GetDataTableRowFromName_OutRow) == 0x000004, "Member 'RSBattleCharacter_C_SetBrainCrashMissAccumulationScale::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetBrainCrashMissAccumulationScale::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale, Temp_bool_Variable) == 0x00000D, "Member 'RSBattleCharacter_C_SetBrainCrashMissAccumulationScale::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashMissAccumulationScale, K2Node_Select_Default) == 0x000010, "Member 'RSBattleCharacter_C_SetBrainCrashMissAccumulationScale::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetNoCollisionAndStopAiFade
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetNoCollisionAndStopAiFade final
{
public:
	bool                                          bNoColAndStopAi;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetNoCollisionAndStopAiFade) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetNoCollisionAndStopAiFade");
static_assert(sizeof(RSBattleCharacter_C_SetNoCollisionAndStopAiFade) == 0x000002, "Wrong size on RSBattleCharacter_C_SetNoCollisionAndStopAiFade");
static_assert(offsetof(RSBattleCharacter_C_SetNoCollisionAndStopAiFade, bNoColAndStopAi) == 0x000000, "Member 'RSBattleCharacter_C_SetNoCollisionAndStopAiFade::bNoColAndStopAi' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetNoCollisionAndStopAiFade, Dummy) == 0x000001, "Member 'RSBattleCharacter_C_SetNoCollisionAndStopAiFade::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ShakeCameraInDamageInterface
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_ShakeCameraInDamageInterface final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ShakeCameraInDamageInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ShakeCameraInDamageInterface");
static_assert(sizeof(RSBattleCharacter_C_ShakeCameraInDamageInterface) == 0x0001C8, "Wrong size on RSBattleCharacter_C_ShakeCameraInDamageInterface");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamageInterface, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_ShakeCameraInDamageInterface::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ShakeCameraInDamageInterface, ReturnValue) == 0x0001C0, "Member 'RSBattleCharacter_C_ShakeCameraInDamageInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.VibrationControllerInDamageInterface
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_VibrationControllerInDamageInterface final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_VibrationControllerInDamageInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_VibrationControllerInDamageInterface");
static_assert(sizeof(RSBattleCharacter_C_VibrationControllerInDamageInterface) == 0x0001C8, "Wrong size on RSBattleCharacter_C_VibrationControllerInDamageInterface");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamageInterface, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_VibrationControllerInDamageInterface::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_VibrationControllerInDamageInterface, ReturnValue) == 0x0001C0, "Member 'RSBattleCharacter_C_VibrationControllerInDamageInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBattleDamage3D
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_SetBattleDamage3D final
{
public:
	class AHUDMainGame_C*                         HUD;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position3D;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsPlayer;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCritical;                                        // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSasCritical;                                     // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrashCritical;                              // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHeal;                                            // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeak;                                            // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNoDamage;                                        // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FDA[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   CrushTarget;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CrushBonus;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetBattleDamage3D) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetBattleDamage3D");
static_assert(sizeof(RSBattleCharacter_C_SetBattleDamage3D) == 0x000038, "Wrong size on RSBattleCharacter_C_SetBattleDamage3D");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, HUD) == 0x000000, "Member 'RSBattleCharacter_C_SetBattleDamage3D::HUD' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, Damage) == 0x000008, "Member 'RSBattleCharacter_C_SetBattleDamage3D::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, Position3D) == 0x00000C, "Member 'RSBattleCharacter_C_SetBattleDamage3D::Position3D' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, Param_IsPlayer) == 0x000018, "Member 'RSBattleCharacter_C_SetBattleDamage3D::Param_IsPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, IsCritical) == 0x000019, "Member 'RSBattleCharacter_C_SetBattleDamage3D::IsCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, IsSasCritical) == 0x00001A, "Member 'RSBattleCharacter_C_SetBattleDamage3D::IsSasCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, IsBrainCrashCritical) == 0x00001B, "Member 'RSBattleCharacter_C_SetBattleDamage3D::IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, IsHeal) == 0x00001C, "Member 'RSBattleCharacter_C_SetBattleDamage3D::IsHeal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, IsWeak) == 0x00001D, "Member 'RSBattleCharacter_C_SetBattleDamage3D::IsWeak' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, IsNoDamage) == 0x00001E, "Member 'RSBattleCharacter_C_SetBattleDamage3D::IsNoDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, CrushTarget) == 0x000020, "Member 'RSBattleCharacter_C_SetBattleDamage3D::CrushTarget' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, CrushBonus) == 0x000028, "Member 'RSBattleCharacter_C_SetBattleDamage3D::CrushBonus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBattleDamage3D, Offset) == 0x00002C, "Member 'RSBattleCharacter_C_SetBattleDamage3D::Offset' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DamagePopupCore
// 0x0108 (0x0108 - 0x0000)
struct RSBattleCharacter_C_DamagePopupCore final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InDamage;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCrashDamage;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePointKind                              InKind;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsCritical;                                      // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsWeakhit;                                       // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsStealthCritical;                               // 0x0017(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsBrainCrash;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FDB[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LDisplayBrainCrashDamageOffset;                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbIsSasCritical;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbIsPlayer;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LNoDamage;                                         // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FDC[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LRandomLocation;                                   // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         LHUDMainGame;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FDD[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FDE[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNoDamagePopUpFromAttacker_bNoPopUp;  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FST_DisplayDamageBrainCrashInfo        K2Node_MakeStruct_ST_DisplayDamageBrainCrashInfo;  // 0x0070(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_DisplayDamageBrainCrashInfo        K2Node_MakeStruct_ST_DisplayDamageBrainCrashInfo_1; // 0x00A0(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AddRandomLocation_return;                 // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FDF[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DamagePopupCore) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DamagePopupCore");
static_assert(sizeof(RSBattleCharacter_C_DamagePopupCore) == 0x000108, "Wrong size on RSBattleCharacter_C_DamagePopupCore");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InLocation) == 0x000000, "Member 'RSBattleCharacter_C_DamagePopupCore::InLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InDamage) == 0x00000C, "Member 'RSBattleCharacter_C_DamagePopupCore::InDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InCrashDamage) == 0x000010, "Member 'RSBattleCharacter_C_DamagePopupCore::InCrashDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InKind) == 0x000014, "Member 'RSBattleCharacter_C_DamagePopupCore::InKind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InIsCritical) == 0x000015, "Member 'RSBattleCharacter_C_DamagePopupCore::InIsCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InIsWeakhit) == 0x000016, "Member 'RSBattleCharacter_C_DamagePopupCore::InIsWeakhit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InIsStealthCritical) == 0x000017, "Member 'RSBattleCharacter_C_DamagePopupCore::InIsStealthCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, InIsBrainCrash) == 0x000018, "Member 'RSBattleCharacter_C_DamagePopupCore::InIsBrainCrash' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, AttackActor) == 0x000020, "Member 'RSBattleCharacter_C_DamagePopupCore::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, LDisplayBrainCrashDamageOffset) == 0x000028, "Member 'RSBattleCharacter_C_DamagePopupCore::LDisplayBrainCrashDamageOffset' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, LbIsSasCritical) == 0x000030, "Member 'RSBattleCharacter_C_DamagePopupCore::LbIsSasCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, LbIsPlayer) == 0x000031, "Member 'RSBattleCharacter_C_DamagePopupCore::LbIsPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, LNoDamage) == 0x000032, "Member 'RSBattleCharacter_C_DamagePopupCore::LNoDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, LRandomLocation) == 0x000034, "Member 'RSBattleCharacter_C_DamagePopupCore::LRandomLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, LHUDMainGame) == 0x000040, "Member 'RSBattleCharacter_C_DamagePopupCore::LHUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, Temp_bool_Variable) == 0x000048, "Member 'RSBattleCharacter_C_DamagePopupCore::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000050, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, Temp_struct_Variable) == 0x000064, "Member 'RSBattleCharacter_C_DamagePopupCore::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_CheckNoDamagePopUpFromAttacker_bNoPopUp) == 0x00006C, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_CheckNoDamagePopUpFromAttacker_bNoPopUp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_BooleanAND_ReturnValue) == 0x00006D, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00006E, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00006F, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_MakeStruct_ST_DisplayDamageBrainCrashInfo) == 0x000070, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_MakeStruct_ST_DisplayDamageBrainCrashInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_MakeStruct_ST_DisplayDamageBrainCrashInfo_1) == 0x0000A0, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_MakeStruct_ST_DisplayDamageBrainCrashInfo_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_GetHUDMainGame_HUDMainGame) == 0x0000D0, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_AddRandomLocation_return) == 0x0000D8, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_AddRandomLocation_return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_Select_Default) == 0x0000E4, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x0000F0, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, K2Node_DynamicCast_bSuccess_1) == 0x000100, "Member 'RSBattleCharacter_C_DamagePopupCore::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DamagePopupCore, CallFunc_IsHideWeak_IsHideWeak) == 0x000101, "Member 'RSBattleCharacter_C_DamagePopupCore::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetDirectAttackWpPrimitive
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetDirectAttackWpPrimitive final
{
public:
	class UPrimitiveComponent*                    OutPrimitive;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetDirectAttackWpPrimitive) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetDirectAttackWpPrimitive");
static_assert(sizeof(RSBattleCharacter_C_GetDirectAttackWpPrimitive) == 0x000008, "Wrong size on RSBattleCharacter_C_GetDirectAttackWpPrimitive");
static_assert(offsetof(RSBattleCharacter_C_GetDirectAttackWpPrimitive, OutPrimitive) == 0x000000, "Member 'RSBattleCharacter_C_GetDirectAttackWpPrimitive::OutPrimitive' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StopBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_StopBehaviorTree final
{
public:
	bool                                          bTickDisable;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          LAIController;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_StopBehaviorTree) == 0x000008, "Wrong alignment on RSBattleCharacter_C_StopBehaviorTree");
static_assert(sizeof(RSBattleCharacter_C_StopBehaviorTree) == 0x000010, "Wrong size on RSBattleCharacter_C_StopBehaviorTree");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTree, bTickDisable) == 0x000000, "Member 'RSBattleCharacter_C_StopBehaviorTree::bTickDisable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTree, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_StopBehaviorTree::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTree, LAIController) == 0x000008, "Member 'RSBattleCharacter_C_StopBehaviorTree::LAIController' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RestartBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_RestartBehaviorTree final
{
public:
	bool                                          bTickEnable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          LAIController;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_RestartBehaviorTree) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RestartBehaviorTree");
static_assert(sizeof(RSBattleCharacter_C_RestartBehaviorTree) == 0x000010, "Wrong size on RSBattleCharacter_C_RestartBehaviorTree");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTree, bTickEnable) == 0x000000, "Member 'RSBattleCharacter_C_RestartBehaviorTree::bTickEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTree, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_RestartBehaviorTree::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTree, LAIController) == 0x000008, "Member 'RSBattleCharacter_C_RestartBehaviorTree::LAIController' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBehaviorTreeTickEnable
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_SetBehaviorTreeTickEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE2[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          LAIController;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetBehaviorTreeTickEnable) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetBehaviorTreeTickEnable");
static_assert(sizeof(RSBattleCharacter_C_SetBehaviorTreeTickEnable) == 0x000020, "Wrong size on RSBattleCharacter_C_SetBehaviorTreeTickEnable");
static_assert(offsetof(RSBattleCharacter_C_SetBehaviorTreeTickEnable, bEnable) == 0x000000, "Member 'RSBattleCharacter_C_SetBehaviorTreeTickEnable::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBehaviorTreeTickEnable, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetBehaviorTreeTickEnable::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBehaviorTreeTickEnable, LAIController) == 0x000008, "Member 'RSBattleCharacter_C_SetBehaviorTreeTickEnable::LAIController' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBehaviorTreeTickEnable, CallFunc_GetAIController_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetBehaviorTreeTickEnable::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBehaviorTreeTickEnable, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_SetBehaviorTreeTickEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StopBehaviorTreeCore
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_StopBehaviorTreeCore final
{
public:
	bool                                          bTickDisable;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          LAIController;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StopBehaviorTreeCore) == 0x000008, "Wrong alignment on RSBattleCharacter_C_StopBehaviorTreeCore");
static_assert(sizeof(RSBattleCharacter_C_StopBehaviorTreeCore) == 0x000020, "Wrong size on RSBattleCharacter_C_StopBehaviorTreeCore");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTreeCore, bTickDisable) == 0x000000, "Member 'RSBattleCharacter_C_StopBehaviorTreeCore::bTickDisable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTreeCore, LAIController) == 0x000008, "Member 'RSBattleCharacter_C_StopBehaviorTreeCore::LAIController' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTreeCore, CallFunc_GetAIController_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_StopBehaviorTreeCore::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopBehaviorTreeCore, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_StopBehaviorTreeCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RestartBehaviorTreeCore
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_RestartBehaviorTreeCore final
{
public:
	bool                                          bTickEnable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          LAIController;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_RestartBehaviorTreeCore) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RestartBehaviorTreeCore");
static_assert(sizeof(RSBattleCharacter_C_RestartBehaviorTreeCore) == 0x000020, "Wrong size on RSBattleCharacter_C_RestartBehaviorTreeCore");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTreeCore, bTickEnable) == 0x000000, "Member 'RSBattleCharacter_C_RestartBehaviorTreeCore::bTickEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTreeCore, LAIController) == 0x000008, "Member 'RSBattleCharacter_C_RestartBehaviorTreeCore::LAIController' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTreeCore, CallFunc_GetAIController_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_RestartBehaviorTreeCore::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RestartBehaviorTreeCore, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_RestartBehaviorTreeCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ModifyParameterTable_Attack
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_ModifyParameterTable_Attack final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewAttack;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LValue;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_ModifyParameterTable_Attack) == 0x000004, "Wrong alignment on RSBattleCharacter_C_ModifyParameterTable_Attack");
static_assert(sizeof(RSBattleCharacter_C_ModifyParameterTable_Attack) == 0x000018, "Wrong size on RSBattleCharacter_C_ModifyParameterTable_Attack");
static_assert(offsetof(RSBattleCharacter_C_ModifyParameterTable_Attack, Scale) == 0x000000, "Member 'RSBattleCharacter_C_ModifyParameterTable_Attack::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ModifyParameterTable_Attack, NewAttack) == 0x000004, "Member 'RSBattleCharacter_C_ModifyParameterTable_Attack::NewAttack' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ModifyParameterTable_Attack, LValue) == 0x000008, "Member 'RSBattleCharacter_C_ModifyParameterTable_Attack::LValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ModifyParameterTable_Attack, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_ModifyParameterTable_Attack::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ModifyParameterTable_Attack, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_ModifyParameterTable_Attack::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ModifyParameterTable_Attack, CallFunc_FTrunc_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_ModifyParameterTable_Attack::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetDisableMeshFitGround
// 0x001C (0x001C - 0x0000)
struct RSBattleCharacter_C_SetDisableMeshFitGround final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelMeshFitGround_bDummy;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE6[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE7[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetDisableMeshFitGround) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetDisableMeshFitGround");
static_assert(sizeof(RSBattleCharacter_C_SetDisableMeshFitGround) == 0x00001C, "Wrong size on RSBattleCharacter_C_SetDisableMeshFitGround");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, bDisable) == 0x000000, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, ClaimantName) == 0x000004, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000D, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, CallFunc_CancelMeshFitGround_bDummy) == 0x00000E, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::CallFunc_CancelMeshFitGround_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableMeshFitGround, CallFunc_Array_AddUnique_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_SetDisableMeshFitGround::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.Start Unaffected Time Dilation
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_Start_Unaffected_Time_Dilation final
{
public:
	float                                         TimeDilation;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DilationTime;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimNotifyTimeDilationMode                   DilationMode;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FE8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                LGameSystemManager;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FE9[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation) == 0x000008, "Wrong alignment on RSBattleCharacter_C_Start_Unaffected_Time_Dilation");
static_assert(sizeof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation) == 0x000038, "Wrong size on RSBattleCharacter_C_Start_Unaffected_Time_Dilation");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, TimeDilation) == 0x000000, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::TimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, DilationTime) == 0x000004, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::DilationTime' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, DilationMode) == 0x000008, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::DilationMode' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, LGameSystemManager) == 0x000010, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::LGameSystemManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000025, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_GetGameSystemManager_Manager) == 0x000028, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000030, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Start_Unaffected_Time_Dilation, K2Node_SwitchEnum_CmpSuccess) == 0x000034, "Member 'RSBattleCharacter_C_Start_Unaffected_Time_Dilation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UpdateUnaffectedTimeDilation
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_UpdateUnaffectedTimeDilation final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FEA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                LGameSystemManager;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEventCondition_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FEB[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation) == 0x000008, "Wrong alignment on RSBattleCharacter_C_UpdateUnaffectedTimeDilation");
static_assert(sizeof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation) == 0x000020, "Wrong size on RSBattleCharacter_C_UpdateUnaffectedTimeDilation");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation, DeltaSec) == 0x000000, "Member 'RSBattleCharacter_C_UpdateUnaffectedTimeDilation::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation, LGameSystemManager) == 0x000008, "Member 'RSBattleCharacter_C_UpdateUnaffectedTimeDilation::LGameSystemManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation, CallFunc_IsEventCondition_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_UpdateUnaffectedTimeDilation::CallFunc_IsEventCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000011, "Member 'RSBattleCharacter_C_UpdateUnaffectedTimeDilation::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_UpdateUnaffectedTimeDilation::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedTimeDilation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_UpdateUnaffectedTimeDilation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StartUnaffectedCameraAttention
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_StartUnaffectedCameraAttention final
{
public:
	class UCurveFloat*                            ActorCurveOut;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FovCurveOut;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttentionTime;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStart;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StartUnaffectedCameraAttention) == 0x000008, "Wrong alignment on RSBattleCharacter_C_StartUnaffectedCameraAttention");
static_assert(sizeof(RSBattleCharacter_C_StartUnaffectedCameraAttention) == 0x000018, "Wrong size on RSBattleCharacter_C_StartUnaffectedCameraAttention");
static_assert(offsetof(RSBattleCharacter_C_StartUnaffectedCameraAttention, ActorCurveOut) == 0x000000, "Member 'RSBattleCharacter_C_StartUnaffectedCameraAttention::ActorCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartUnaffectedCameraAttention, FovCurveOut) == 0x000008, "Member 'RSBattleCharacter_C_StartUnaffectedCameraAttention::FovCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartUnaffectedCameraAttention, AttentionTime) == 0x000010, "Member 'RSBattleCharacter_C_StartUnaffectedCameraAttention::AttentionTime' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartUnaffectedCameraAttention, IsStart) == 0x000014, "Member 'RSBattleCharacter_C_StartUnaffectedCameraAttention::IsStart' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UpdateUnaffectedCameraAttention
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_UpdateUnaffectedCameraAttention final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventCondition_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FEC[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention) == 0x000004, "Wrong alignment on RSBattleCharacter_C_UpdateUnaffectedCameraAttention");
static_assert(sizeof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention) == 0x000010, "Wrong size on RSBattleCharacter_C_UpdateUnaffectedCameraAttention");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention, DeltaSec) == 0x000000, "Member 'RSBattleCharacter_C_UpdateUnaffectedCameraAttention::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_UpdateUnaffectedCameraAttention::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention, CallFunc_IsEventCondition_ReturnValue) == 0x000005, "Member 'RSBattleCharacter_C_UpdateUnaffectedCameraAttention::CallFunc_IsEventCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_UpdateUnaffectedCameraAttention::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateUnaffectedCameraAttention, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_UpdateUnaffectedCameraAttention::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnHitDamage
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_OnHitDamage final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FED[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnHitDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnHitDamage");
static_assert(sizeof(RSBattleCharacter_C_OnHitDamage) == 0x0001C8, "Wrong size on RSBattleCharacter_C_OnHitDamage");
static_assert(offsetof(RSBattleCharacter_C_OnHitDamage, Result) == 0x000000, "Member 'RSBattleCharacter_C_OnHitDamage::Result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnHitDamage, Return) == 0x0001C0, "Member 'RSBattleCharacter_C_OnHitDamage::Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnHitDamage, CallFunc_Array_Add_ReturnValue) == 0x0001C4, "Member 'RSBattleCharacter_C_OnHitDamage::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StopUnaffectedTimeDilation
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_StopUnaffectedTimeDilation final
{
public:
	class ABP_GameSystemManager_C*                LGameSystemManager;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FEE[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StopUnaffectedTimeDilation) == 0x000008, "Wrong alignment on RSBattleCharacter_C_StopUnaffectedTimeDilation");
static_assert(sizeof(RSBattleCharacter_C_StopUnaffectedTimeDilation) == 0x000028, "Wrong size on RSBattleCharacter_C_StopUnaffectedTimeDilation");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, LGameSystemManager) == 0x000000, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::LGameSystemManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000012, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, CallFunc_GetGameSystemManager_Manager) == 0x000018, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedTimeDilation, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'RSBattleCharacter_C_StopUnaffectedTimeDilation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StopUnaffectedCameraAttention
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_StopUnaffectedCameraAttention final
{
public:
	bool                                          CallFunc_CameraAttentionEnd_Dummy;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StopUnaffectedCameraAttention) == 0x000001, "Wrong alignment on RSBattleCharacter_C_StopUnaffectedCameraAttention");
static_assert(sizeof(RSBattleCharacter_C_StopUnaffectedCameraAttention) == 0x000001, "Wrong size on RSBattleCharacter_C_StopUnaffectedCameraAttention");
static_assert(offsetof(RSBattleCharacter_C_StopUnaffectedCameraAttention, CallFunc_CameraAttentionEnd_Dummy) == 0x000000, "Member 'RSBattleCharacter_C_StopUnaffectedCameraAttention::CallFunc_CameraAttentionEnd_Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetGroupID
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_SetGroupID final
{
public:
	int32                                         NewGroupID;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetGroupID) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetGroupID");
static_assert(sizeof(RSBattleCharacter_C_SetGroupID) == 0x000004, "Wrong size on RSBattleCharacter_C_SetGroupID");
static_assert(offsetof(RSBattleCharacter_C_SetGroupID, NewGroupID) == 0x000000, "Member 'RSBattleCharacter_C_SetGroupID::NewGroupID' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcMeshFitGroundVector
// 0x0160 (0x0160 - 0x0000)
struct RSBattleCharacter_C_CalcMeshFitGroundVector final
{
public:
	struct FVector                                UpVector;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FEF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMeshFitGroundCheckLocation_Location;   // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshFitGroundCheckLocation_CheckHeight; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF0[0x1];                                     // 0x00E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FF1[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CalcMeshFitGroundVector) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcMeshFitGroundVector");
static_assert(sizeof(RSBattleCharacter_C_CalcMeshFitGroundVector) == 0x000160, "Wrong size on RSBattleCharacter_C_CalcMeshFitGroundVector");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, UpVector) == 0x000000, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::UpVector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, Temp_object_Variable) == 0x000010, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_GetMeshFitGroundCheckLocation_Location) == 0x000020, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_GetMeshFitGroundCheckLocation_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_GetMeshFitGroundCheckLocation_CheckHeight) == 0x00002C, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_GetMeshFitGroundCheckLocation_CheckHeight' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_Add_VectorVector_ReturnValue) == 0x000030, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_LineTraceSingle_OutHit) == 0x000058, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_LineTraceSingle_ReturnValue) == 0x0000E0, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_bBlockingHit) == 0x0000E1, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000E2, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Time) == 0x0000E4, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Distance) == 0x0000E8, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Location) == 0x0000EC, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F8, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Normal) == 0x000104, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_ImpactNormal) == 0x000110, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_PhysMat) == 0x000120, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitActor) == 0x000128, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitComponent) == 0x000130, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitBoneName) == 0x000138, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitItem) == 0x000140, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_FaceIndex) == 0x000144, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_TraceStart) == 0x000148, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_TraceEnd) == 0x000154, "Member 'RSBattleCharacter_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableMeshFitGround
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDisableMeshFitGround final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDisableMeshFitGround) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDisableMeshFitGround");
static_assert(sizeof(RSBattleCharacter_C_IsDisableMeshFitGround) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDisableMeshFitGround");
static_assert(offsetof(RSBattleCharacter_C_IsDisableMeshFitGround, bDisable) == 0x000000, "Member 'RSBattleCharacter_C_IsDisableMeshFitGround::bDisable' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SufferDamageBeforeInterface
// 0x01D0 (0x01D0 - 0x0000)
struct RSBattleCharacter_C_SufferDamageBeforeInterface final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x01C4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF2[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SufferDamageBeforeInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SufferDamageBeforeInterface");
static_assert(sizeof(RSBattleCharacter_C_SufferDamageBeforeInterface) == 0x0001D0, "Wrong size on RSBattleCharacter_C_SufferDamageBeforeInterface");
static_assert(offsetof(RSBattleCharacter_C_SufferDamageBeforeInterface, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_SufferDamageBeforeInterface::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SufferDamageBeforeInterface, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_SufferDamageBeforeInterface::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SufferDamageBeforeInterface, ReturnValue) == 0x0001C4, "Member 'RSBattleCharacter_C_SufferDamageBeforeInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SufferDamageBeforeInterface, CallFunc_GetHP_HP) == 0x0001C8, "Member 'RSBattleCharacter_C_SufferDamageBeforeInterface::CallFunc_GetHP_HP' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusOilCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusOilCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOil_ReturnValue;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusOilCPP) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusOilCPP");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusOilCPP) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusOilCPP");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusOilCPP, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusOilCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusOilCPP, CallFunc_IsOil_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusOilCPP::CallFunc_IsOil_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFloodedCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusFloodedCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlooded_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusFloodedCPP) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusFloodedCPP");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusFloodedCPP) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusFloodedCPP");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFloodedCPP, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusFloodedCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFloodedCPP, CallFunc_IsFlooded_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusFloodedCPP::CallFunc_IsFlooded_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFlameCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusFlameCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlame_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusFlameCPP) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusFlameCPP");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusFlameCPP) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusFlameCPP");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFlameCPP, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusFlameCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFlameCPP, CallFunc_IsFlame_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusFlameCPP::CallFunc_IsFlame_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusElectricCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusElectricCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElectric_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusElectricCPP) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusElectricCPP");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusElectricCPP) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusElectricCPP");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusElectricCPP, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusElectricCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusElectricCPP, CallFunc_IsElectric_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusElectricCPP::CallFunc_IsElectric_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusConfusionCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusConfusionCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsConfusion_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusConfusionCPP) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusConfusionCPP");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusConfusionCPP) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusConfusionCPP");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusConfusionCPP, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusConfusionCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusConfusionCPP, CallFunc_IsConfusion_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusConfusionCPP::CallFunc_IsConfusion_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetDeadBeforeHitResult
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_GetDeadBeforeHitResult final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_GetDeadBeforeHitResult) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetDeadBeforeHitResult");
static_assert(sizeof(RSBattleCharacter_C_GetDeadBeforeHitResult) == 0x0001C0, "Wrong size on RSBattleCharacter_C_GetDeadBeforeHitResult");
static_assert(offsetof(RSBattleCharacter_C_GetDeadBeforeHitResult, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_GetDeadBeforeHitResult::HitResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetDeadBeforeHitResultByDirectAttack
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack");
static_assert(sizeof(RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack) == 0x0001C0, "Wrong size on RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack");
static_assert(offsetof(RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack::HitResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RareSpawnToEnemyHpRate
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_RareSpawnToEnemyHpRate final
{
public:
	bool                                          CallFunc_IsEnableSpawnByConditionEnemyHpRate_IsSpawnOK; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnStart_Return;                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF4[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_GetHPPercent_self_CastInput;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_RareSpawnToEnemyHpRate) == 0x000008, "Wrong alignment on RSBattleCharacter_C_RareSpawnToEnemyHpRate");
static_assert(sizeof(RSBattleCharacter_C_RareSpawnToEnemyHpRate) == 0x000038, "Wrong size on RSBattleCharacter_C_RareSpawnToEnemyHpRate");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, CallFunc_IsEnableSpawnByConditionEnemyHpRate_IsSpawnOK) == 0x000000, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::CallFunc_IsEnableSpawnByConditionEnemyHpRate_IsSpawnOK' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000008, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, CallFunc_SpawnStart_Return) == 0x000019, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::CallFunc_SpawnStart_Return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, CallFunc_GetHPPercent_self_CastInput) == 0x000020, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::CallFunc_GetHPPercent_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, CallFunc_GetHPPercent_Percent) == 0x000030, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RareSpawnToEnemyHpRate, CallFunc_IsValid_ReturnValue) == 0x000035, "Member 'RSBattleCharacter_C_RareSpawnToEnemyHpRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetRareSpawnEnemyHpRate
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_SetRareSpawnEnemyHpRate final
{
public:
	float                                         HpRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FF5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RareSpawnEnemy;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetRareSpawnEnemyHpRate) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetRareSpawnEnemyHpRate");
static_assert(sizeof(RSBattleCharacter_C_SetRareSpawnEnemyHpRate) == 0x000020, "Wrong size on RSBattleCharacter_C_SetRareSpawnEnemyHpRate");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRate, HpRate) == 0x000000, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRate::HpRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRate, RareSpawnEnemy) == 0x000008, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRate::RareSpawnEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRate, K2Node_DynamicCast_AsRSBattle_Character) == 0x000010, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRate::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRate, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRate::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableSpawnByConditionEnemyHpRate
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate");
static_assert(sizeof(RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate) == 0x000001, "Wrong size on RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate");
static_assert(offsetof(RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate, IsSpawnOK) == 0x000000, "Member 'RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate::IsSpawnOK' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetRareSpawnEnemyHpRateCPP
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP final
{
public:
	float                                         HpRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FF6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RareSpawnEnemy;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF7[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBattleCharacterHudInterface> K2Node_DynamicCast_AsBattle_Character_Hud_Interface; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpawnWait_bSpawnWait;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP");
static_assert(sizeof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP) == 0x000030, "Wrong size on RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, HpRate) == 0x000000, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::HpRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, RareSpawnEnemy) == 0x000008, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::RareSpawnEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, Temp_bool_Variable) == 0x000011, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, K2Node_DynamicCast_AsBattle_Character_Hud_Interface) == 0x000018, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::K2Node_DynamicCast_AsBattle_Character_Hud_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP, CallFunc_IsSpawnWait_bSpawnWait) == 0x000029, "Member 'RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP::CallFunc_IsSpawnWait_bSpawnWait' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetActorTags
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetActorTags final
{
public:
	TArray<class FName>                           InTags;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetActorTags) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetActorTags");
static_assert(sizeof(RSBattleCharacter_C_SetActorTags) == 0x000010, "Wrong size on RSBattleCharacter_C_SetActorTags");
static_assert(offsetof(RSBattleCharacter_C_SetActorTags, InTags) == 0x000000, "Member 'RSBattleCharacter_C_SetActorTags::InTags' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnCompleteEventManagerEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_OnCompleteEventManagerEnd final
{
public:
	struct FHCHitEffectInfo                       LEffect;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnCompleteEventManagerEnd) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnCompleteEventManagerEnd");
static_assert(sizeof(RSBattleCharacter_C_OnCompleteEventManagerEnd) == 0x000018, "Wrong size on RSBattleCharacter_C_OnCompleteEventManagerEnd");
static_assert(offsetof(RSBattleCharacter_C_OnCompleteEventManagerEnd, LEffect) == 0x000000, "Member 'RSBattleCharacter_C_OnCompleteEventManagerEnd::LEffect' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCompleteEventManagerEnd, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'RSBattleCharacter_C_OnCompleteEventManagerEnd::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnCompleteEventManagerEnd, CallFunc_GetPlayer_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_OnCompleteEventManagerEnd::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.TickCrashVisionEffect
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_TickCrashVisionEffect final
{
public:
	float                                         Dummy;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_TickCrashVisionEffect) == 0x000008, "Wrong alignment on RSBattleCharacter_C_TickCrashVisionEffect");
static_assert(sizeof(RSBattleCharacter_C_TickCrashVisionEffect) == 0x000028, "Wrong size on RSBattleCharacter_C_TickCrashVisionEffect");
static_assert(offsetof(RSBattleCharacter_C_TickCrashVisionEffect, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_TickCrashVisionEffect::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TickCrashVisionEffect, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_TickCrashVisionEffect::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TickCrashVisionEffect, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_TickCrashVisionEffect::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TickCrashVisionEffect, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_TickCrashVisionEffect::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TickCrashVisionEffect, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_TickCrashVisionEffect::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TickCrashVisionEffect, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattleCharacter_C_TickCrashVisionEffect::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReservationCrashCutSceneRareSpawn
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn) == 0x000001, "Wrong alignment on RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn");
static_assert(sizeof(RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn) == 0x000001, "Wrong size on RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn");
static_assert(offsetof(RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn, Hidden) == 0x000000, "Member 'RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn::Hidden' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CableDamage
// 0x0598 (0x0598 - 0x0000)
struct RSBattleCharacter_C_CableDamage final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LInterval;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     L_SkillCommonInfo;                                 // 0x0008(0x00F0)(Edit, BlueprintVisible)
	struct FHCHitResult                           L_result;                                          // 0x00F8(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEventCondition_ReturnValue;             // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPauseUpdate_ReturnValue;                // 0x02BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF9[0x1];                                     // 0x02BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FFA[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     CallFunc_GetCableDamageSkill_Skill;                // 0x02D0(0x00F0)()
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FFB[0x4];                                     // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x03C8(0x01C0)(ContainsInstancedReference)
	int32                                         CallFunc_OnDamageActorHit_ReturnValue;             // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x058C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFC[0x3];                                     // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCableDamageInterval_Interval;          // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0594(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CableDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CableDamage");
static_assert(sizeof(RSBattleCharacter_C_CableDamage) == 0x000598, "Wrong size on RSBattleCharacter_C_CableDamage");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, Sec) == 0x000000, "Member 'RSBattleCharacter_C_CableDamage::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, LInterval) == 0x000004, "Member 'RSBattleCharacter_C_CableDamage::LInterval' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, L_SkillCommonInfo) == 0x000008, "Member 'RSBattleCharacter_C_CableDamage::L_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, L_result) == 0x0000F8, "Member 'RSBattleCharacter_C_CableDamage::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002B8, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_IsEventCondition_ReturnValue) == 0x0002BC, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_IsEventCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_IsValid_ReturnValue) == 0x0002BD, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_IsPauseUpdate_ReturnValue) == 0x0002BE, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_IsPauseUpdate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002C0, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_GetCableDamageSkill_Skill) == 0x0002D0, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_GetCableDamageSkill_Skill' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0003C0, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, K2Node_MakeStruct_HCHitResult) == 0x0003C8, "Member 'RSBattleCharacter_C_CableDamage::K2Node_MakeStruct_HCHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_OnDamageActorHit_ReturnValue) == 0x000588, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_OnDamageActorHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00058C, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_GetCableDamageInterval_Interval) == 0x000590, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_GetCableDamageInterval_Interval' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CableDamage, CallFunc_IsDead_bDead) == 0x000594, "Member 'RSBattleCharacter_C_CableDamage::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnSimulatorStartDirectionClose
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_OnSimulatorStartDirectionClose final
{
public:
	float                                         MoveDelaySec;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_OnSimulatorStartDirectionClose) == 0x000004, "Wrong alignment on RSBattleCharacter_C_OnSimulatorStartDirectionClose");
static_assert(sizeof(RSBattleCharacter_C_OnSimulatorStartDirectionClose) == 0x000004, "Wrong size on RSBattleCharacter_C_OnSimulatorStartDirectionClose");
static_assert(offsetof(RSBattleCharacter_C_OnSimulatorStartDirectionClose, MoveDelaySec) == 0x000000, "Member 'RSBattleCharacter_C_OnSimulatorStartDirectionClose::MoveDelaySec' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStateCableDamage
// 0x02B8 (0x02B8 - 0x0000)
struct RSBattleCharacter_C_IsBadStateCableDamage final
{
public:
	bool                                          CableDamage;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LInterval;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     L_SkillCommonInfo;                                 // 0x0008(0x00F0)(Edit, BlueprintVisible)
	struct FHCHitResult                           L_result;                                          // 0x00F8(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStateCableDamage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsBadStateCableDamage");
static_assert(sizeof(RSBattleCharacter_C_IsBadStateCableDamage) == 0x0002B8, "Wrong size on RSBattleCharacter_C_IsBadStateCableDamage");
static_assert(offsetof(RSBattleCharacter_C_IsBadStateCableDamage, CableDamage) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStateCableDamage::CableDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStateCableDamage, LInterval) == 0x000004, "Member 'RSBattleCharacter_C_IsBadStateCableDamage::LInterval' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStateCableDamage, L_SkillCommonInfo) == 0x000008, "Member 'RSBattleCharacter_C_IsBadStateCableDamage::L_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStateCableDamage, L_result) == 0x0000F8, "Member 'RSBattleCharacter_C_IsBadStateCableDamage::L_result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffCable
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOffCable final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOffCable) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOffCable");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOffCable) == 0x000002, "Wrong size on RSBattleCharacter_C_BadStateEffectOffCable");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffCable, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOffCable::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOffCable, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectOffCable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnCable
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectOnCable final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4000[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectOnCable) == 0x000008, "Wrong alignment on RSBattleCharacter_C_BadStateEffectOnCable");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectOnCable) == 0x000038, "Wrong size on RSBattleCharacter_C_BadStateEffectOnCable");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, CallFunc_LoadSoftObject_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, K2Node_DynamicCast_AsParticle_System) == 0x000018, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectOnCable, CallFunc_IsValid_ReturnValue_3) == 0x000030, "Member 'RSBattleCharacter_C_BadStateEffectOnCable::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetBrainCrashBossHpGage
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_SetBrainCrashBossHpGage final
{
public:
	class UBP_TargetSearchComponent_C*            LTargetSearchComp;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  LPlayerPawn;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetLockBoss_LockBoss;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4001[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TargetSearchComponent_C*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4002[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetCurrentTargetActor_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4003[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetBrainCrashBossHpGage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetBrainCrashBossHpGage");
static_assert(sizeof(RSBattleCharacter_C_SetBrainCrashBossHpGage) == 0x000050, "Wrong size on RSBattleCharacter_C_SetBrainCrashBossHpGage");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, LTargetSearchComp) == 0x000000, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::LTargetSearchComp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, LPlayerPawn) == 0x000008, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::LPlayerPawn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_GetLockBoss_LockBoss) == 0x000010, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_GetLockBoss_LockBoss' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_GetCurrentTargetActor_ReturnValue) == 0x000030, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_GetCurrentTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_GetPlayerPawn_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetBrainCrashBossHpGage, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000048, "Member 'RSBattleCharacter_C_SetBrainCrashBossHpGage::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ResetBrainCrashBossHpGage
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_ResetBrainCrashBossHpGage final
{
public:
	class UBP_TargetSearchComponent_C*            LTargetSearchComp;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  LPlayerPawn;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4004[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetLockBoss_LockBoss;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4005[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4006[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4007[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TargetSearchComponent_C*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_ResetBrainCrashBossHpGage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ResetBrainCrashBossHpGage");
static_assert(sizeof(RSBattleCharacter_C_ResetBrainCrashBossHpGage) == 0x000050, "Wrong size on RSBattleCharacter_C_ResetBrainCrashBossHpGage");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, LTargetSearchComp) == 0x000000, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::LTargetSearchComp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, LPlayerPawn) == 0x000008, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::LPlayerPawn' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, CallFunc_GetLockBoss_LockBoss) == 0x000018, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::CallFunc_GetLockBoss_LockBoss' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, K2Node_DynamicCast_AsRSBattle_Character) == 0x000028, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, CallFunc_GetPlayerPawn_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetBrainCrashBossHpGage, CallFunc_GetComponentByClass_ReturnValue) == 0x000048, "Member 'RSBattleCharacter_C_ResetBrainCrashBossHpGage::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReserveBrainCrashDamageScorePopup
// 0x0078 (0x0078 - 0x0000)
struct RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4008[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4009[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AddRandomLocation_return;                 // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AddRandomLocation_return_1;               // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelManager_C*                     CallFunc_GetLevelManager_LevelManager;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidCurrentSimulatorLevelInfosName_ReturnValue; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Disp_Simulator_Brain_Crash_Damage_bDamage; // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Disp_Simulator_Brain_Crash_Damage_bScore; // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup) == 0x000008, "Wrong alignment on RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup");
static_assert(sizeof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup) == 0x000078, "Wrong size on RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, Damage) == 0x000000, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, Score) == 0x000004, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::Score' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, Temp_bool_Variable) == 0x000008, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, Temp_struct_Variable) == 0x00000C, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, Temp_bool_Variable_1) == 0x000014, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, Temp_struct_Variable_1) == 0x000018, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_AddRandomLocation_return) == 0x00002C, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_AddRandomLocation_return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, K2Node_Select_Default) == 0x000038, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000040, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_AddRandomLocation_return_1) == 0x00004C, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_AddRandomLocation_return_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, K2Node_Select_Default_1) == 0x000058, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_GetLevelManager_LevelManager) == 0x000060, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_GetLevelManager_LevelManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_GetDebuggingManager_Manager) == 0x000068, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_IsValidCurrentSimulatorLevelInfosName_ReturnValue) == 0x000070, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_IsValidCurrentSimulatorLevelInfosName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_Is_Disp_Simulator_Brain_Crash_Damage_bDamage) == 0x000071, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_Is_Disp_Simulator_Brain_Crash_Damage_bDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup, CallFunc_Is_Disp_Simulator_Brain_Crash_Damage_bScore) == 0x000072, "Member 'RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup::CallFunc_Is_Disp_Simulator_Brain_Crash_Damage_bScore' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetTargetCursorLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetTargetCursorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetTargetCursorLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetTargetCursorLocation");
static_assert(sizeof(RSBattleCharacter_C_GetTargetCursorLocation) == 0x000018, "Wrong size on RSBattleCharacter_C_GetTargetCursorLocation");
static_assert(offsetof(RSBattleCharacter_C_GetTargetCursorLocation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetTargetCursorLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetTargetCursorLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetTargetCursorLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsPsychicObjectShieldActive
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsPsychicObjectShieldActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsPsychicObjectShieldActive) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsPsychicObjectShieldActive");
static_assert(sizeof(RSBattleCharacter_C_IsPsychicObjectShieldActive) == 0x000001, "Wrong size on RSBattleCharacter_C_IsPsychicObjectShieldActive");
static_assert(offsetof(RSBattleCharacter_C_IsPsychicObjectShieldActive, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsPsychicObjectShieldActive::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPsychicObjectShield
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetPsychicObjectShield final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPsychicObjectShield) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetPsychicObjectShield");
static_assert(sizeof(RSBattleCharacter_C_GetPsychicObjectShield) == 0x000008, "Wrong size on RSBattleCharacter_C_GetPsychicObjectShield");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectShield, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPsychicObjectShield::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCapsuleRadius
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetCapsuleRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCapsuleRadius) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCapsuleRadius");
static_assert(sizeof(RSBattleCharacter_C_GetCapsuleRadius) == 0x000008, "Wrong size on RSBattleCharacter_C_GetCapsuleRadius");
static_assert(offsetof(RSBattleCharacter_C_GetCapsuleRadius, Radius) == 0x000000, "Member 'RSBattleCharacter_C_GetCapsuleRadius::Radius' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCapsuleRadius, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetCapsuleRadius::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetFlightAltitude
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetFlightAltitude final
{
public:
	float                                         FlightAltitude;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFlightAltitudeAverage_ReturnValue;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetFlightAltitude) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetFlightAltitude");
static_assert(sizeof(RSBattleCharacter_C_GetFlightAltitude) == 0x000008, "Wrong size on RSBattleCharacter_C_GetFlightAltitude");
static_assert(offsetof(RSBattleCharacter_C_GetFlightAltitude, FlightAltitude) == 0x000000, "Member 'RSBattleCharacter_C_GetFlightAltitude::FlightAltitude' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetFlightAltitude, CallFunc_GetFlightAltitudeAverage_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetFlightAltitude::CallFunc_GetFlightAltitudeAverage_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHeadLocation
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetHeadLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetHeadLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetHeadLocation");
static_assert(sizeof(RSBattleCharacter_C_GetHeadLocation) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetHeadLocation");
static_assert(offsetof(RSBattleCharacter_C_GetHeadLocation, Location) == 0x000000, "Member 'RSBattleCharacter_C_GetHeadLocation::Location' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsFlying
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsFlying final
{
public:
	bool                                          Param_IsFlying;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsFlying) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsFlying");
static_assert(sizeof(RSBattleCharacter_C_IsFlying) == 0x000002, "Wrong size on RSBattleCharacter_C_IsFlying");
static_assert(offsetof(RSBattleCharacter_C_IsFlying, Param_IsFlying) == 0x000000, "Member 'RSBattleCharacter_C_IsFlying::Param_IsFlying' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsFlying, CallFunc_IsFlying_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsFlying::CallFunc_IsFlying_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EndMoveBackward
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_EndMoveBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EndMoveBackward) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EndMoveBackward");
static_assert(sizeof(RSBattleCharacter_C_EndMoveBackward) == 0x000001, "Wrong size on RSBattleCharacter_C_EndMoveBackward");
static_assert(offsetof(RSBattleCharacter_C_EndMoveBackward, Result) == 0x000000, "Member 'RSBattleCharacter_C_EndMoveBackward::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BeginMoveBackward
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_BeginMoveBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BeginMoveBackward) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BeginMoveBackward");
static_assert(sizeof(RSBattleCharacter_C_BeginMoveBackward) == 0x000001, "Wrong size on RSBattleCharacter_C_BeginMoveBackward");
static_assert(offsetof(RSBattleCharacter_C_BeginMoveBackward, Result) == 0x000000, "Member 'RSBattleCharacter_C_BeginMoveBackward::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RestoreMaxSpeed
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_RestoreMaxSpeed final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_RestoreMaxSpeed) == 0x000004, "Wrong alignment on RSBattleCharacter_C_RestoreMaxSpeed");
static_assert(sizeof(RSBattleCharacter_C_RestoreMaxSpeed) == 0x00000C, "Wrong size on RSBattleCharacter_C_RestoreMaxSpeed");
static_assert(offsetof(RSBattleCharacter_C_RestoreMaxSpeed, ClaimantName) == 0x000000, "Member 'RSBattleCharacter_C_RestoreMaxSpeed::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RestoreMaxSpeed, Result) == 0x000008, "Member 'RSBattleCharacter_C_RestoreMaxSpeed::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ScaleMaxSpeed
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_ScaleMaxSpeed final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ScaleMaxSpeed) == 0x000004, "Wrong alignment on RSBattleCharacter_C_ScaleMaxSpeed");
static_assert(sizeof(RSBattleCharacter_C_ScaleMaxSpeed) == 0x000010, "Wrong size on RSBattleCharacter_C_ScaleMaxSpeed");
static_assert(offsetof(RSBattleCharacter_C_ScaleMaxSpeed, Scale) == 0x000000, "Member 'RSBattleCharacter_C_ScaleMaxSpeed::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ScaleMaxSpeed, ClaimantName) == 0x000004, "Member 'RSBattleCharacter_C_ScaleMaxSpeed::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ScaleMaxSpeed, Result) == 0x00000C, "Member 'RSBattleCharacter_C_ScaleMaxSpeed::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsAbleMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsAbleMove final
{
public:
	bool                                          IsAble;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsAbleMove) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsAbleMove");
static_assert(sizeof(RSBattleCharacter_C_IsAbleMove) == 0x000001, "Wrong size on RSBattleCharacter_C_IsAbleMove");
static_assert(offsetof(RSBattleCharacter_C_IsAbleMove, IsAble) == 0x000000, "Member 'RSBattleCharacter_C_IsAbleMove::IsAble' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.AddSpringArm
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_AddSpringArm final
{
public:
	class USpringArmComponent*                    SpringArm;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_400A[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class USpringArmComponent*                    CallFunc_AddComponent_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_AddSpringArm) == 0x000010, "Wrong alignment on RSBattleCharacter_C_AddSpringArm");
static_assert(sizeof(RSBattleCharacter_C_AddSpringArm) == 0x000050, "Wrong size on RSBattleCharacter_C_AddSpringArm");
static_assert(offsetof(RSBattleCharacter_C_AddSpringArm, SpringArm) == 0x000000, "Member 'RSBattleCharacter_C_AddSpringArm::SpringArm' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddSpringArm, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_AddSpringArm::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_AddSpringArm, CallFunc_AddComponent_ReturnValue) == 0x000040, "Member 'RSBattleCharacter_C_AddSpringArm::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DestroySpringArm
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_DestroySpringArm final
{
public:
	class USpringArmComponent*                    SpringArm;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DestroySpringArm) == 0x000008, "Wrong alignment on RSBattleCharacter_C_DestroySpringArm");
static_assert(sizeof(RSBattleCharacter_C_DestroySpringArm) == 0x000010, "Wrong size on RSBattleCharacter_C_DestroySpringArm");
static_assert(offsetof(RSBattleCharacter_C_DestroySpringArm, SpringArm) == 0x000000, "Member 'RSBattleCharacter_C_DestroySpringArm::SpringArm' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DestroySpringArm, Dummy) == 0x000008, "Member 'RSBattleCharacter_C_DestroySpringArm::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DestroySpringArm, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleCharacter_C_DestroySpringArm::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCapsuleHalfHeight
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetCapsuleHalfHeight final
{
public:
	float                                         HalfHeight;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCapsuleHalfHeight) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCapsuleHalfHeight");
static_assert(sizeof(RSBattleCharacter_C_GetCapsuleHalfHeight) == 0x000008, "Wrong size on RSBattleCharacter_C_GetCapsuleHalfHeight");
static_assert(offsetof(RSBattleCharacter_C_GetCapsuleHalfHeight, HalfHeight) == 0x000000, "Member 'RSBattleCharacter_C_GetCapsuleHalfHeight::HalfHeight' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCapsuleHalfHeight, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetCapsuleHalfHeight::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetHp
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_SetHp final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetHp) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetHp");
static_assert(sizeof(RSBattleCharacter_C_SetHp) == 0x000008, "Wrong size on RSBattleCharacter_C_SetHp");
static_assert(offsetof(RSBattleCharacter_C_SetHp, HP) == 0x000000, "Member 'RSBattleCharacter_C_SetHp::HP' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHp, bDummy) == 0x000004, "Member 'RSBattleCharacter_C_SetHp::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusAny
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusAny final
{
public:
	bool                                          bBadStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyBadStatus_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusAny) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusAny");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusAny) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusAny");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusAny, bBadStatus) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusAny::bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusAny, CallFunc_IsAnyBadStatus_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusAny::CallFunc_IsAnyBadStatus_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCharacterVisibility
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetCharacterVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetCharacterVisibility) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetCharacterVisibility");
static_assert(sizeof(RSBattleCharacter_C_SetCharacterVisibility) == 0x000002, "Wrong size on RSBattleCharacter_C_SetCharacterVisibility");
static_assert(offsetof(RSBattleCharacter_C_SetCharacterVisibility, bVisibility) == 0x000000, "Member 'RSBattleCharacter_C_SetCharacterVisibility::bVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCharacterVisibility, bDummy) == 0x000001, "Member 'RSBattleCharacter_C_SetCharacterVisibility::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCounterSuccess
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsCounterSuccess final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCounterSuccess) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsCounterSuccess");
static_assert(sizeof(RSBattleCharacter_C_IsCounterSuccess) == 0x000001, "Wrong size on RSBattleCharacter_C_IsCounterSuccess");
static_assert(offsetof(RSBattleCharacter_C_IsCounterSuccess, Success) == 0x000000, "Member 'RSBattleCharacter_C_IsCounterSuccess::Success' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StartVisionFog
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_StartVisionFog final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StartVisionFog) == 0x000001, "Wrong alignment on RSBattleCharacter_C_StartVisionFog");
static_assert(sizeof(RSBattleCharacter_C_StartVisionFog) == 0x000001, "Wrong size on RSBattleCharacter_C_StartVisionFog");
static_assert(offsetof(RSBattleCharacter_C_StartVisionFog, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_StartVisionFog::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetActorStartPoint
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetActorStartPoint final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetActorStartPoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetActorStartPoint");
static_assert(sizeof(RSBattleCharacter_C_GetActorStartPoint) == 0x000018, "Wrong size on RSBattleCharacter_C_GetActorStartPoint");
static_assert(offsetof(RSBattleCharacter_C_GetActorStartPoint, StartLocation) == 0x000000, "Member 'RSBattleCharacter_C_GetActorStartPoint::StartLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetActorStartPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetActorStartPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetNotifyAttackData
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_SetNotifyAttackData final
{
public:
	struct FFNotifyAttackData                     Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetNotifyAttackData) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetNotifyAttackData");
static_assert(sizeof(RSBattleCharacter_C_SetNotifyAttackData) == 0x000014, "Wrong size on RSBattleCharacter_C_SetNotifyAttackData");
static_assert(offsetof(RSBattleCharacter_C_SetNotifyAttackData, Data) == 0x000000, "Member 'RSBattleCharacter_C_SetNotifyAttackData::Data' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetNotifyAttackData, Dummy) == 0x000010, "Member 'RSBattleCharacter_C_SetNotifyAttackData::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetLockOnTargetInterface
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetLockOnTargetInterface final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetLockOnTargetInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetLockOnTargetInterface");
static_assert(sizeof(RSBattleCharacter_C_GetLockOnTargetInterface) == 0x000008, "Wrong size on RSBattleCharacter_C_GetLockOnTargetInterface");
static_assert(offsetof(RSBattleCharacter_C_GetLockOnTargetInterface, TargetActor) == 0x000000, "Member 'RSBattleCharacter_C_GetLockOnTargetInterface::TargetActor' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetAccelerating
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_GetAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetAccelerating) == 0x000001, "Wrong alignment on RSBattleCharacter_C_GetAccelerating");
static_assert(sizeof(RSBattleCharacter_C_GetAccelerating) == 0x000001, "Wrong size on RSBattleCharacter_C_GetAccelerating");
static_assert(offsetof(RSBattleCharacter_C_GetAccelerating, Accelerating) == 0x000000, "Member 'RSBattleCharacter_C_GetAccelerating::Accelerating' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetAccelerating
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dammy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetAccelerating) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetAccelerating");
static_assert(sizeof(RSBattleCharacter_C_SetAccelerating) == 0x000002, "Wrong size on RSBattleCharacter_C_SetAccelerating");
static_assert(offsetof(RSBattleCharacter_C_SetAccelerating, Accelerating) == 0x000000, "Member 'RSBattleCharacter_C_SetAccelerating::Accelerating' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetAccelerating, Dammy) == 0x000001, "Member 'RSBattleCharacter_C_SetAccelerating::Dammy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.MeshFitGround
// 0x03D0 (0x03D0 - 0x0000)
struct RSBattleCharacter_C_MeshFitGround final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleLimit;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndFit;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_400B[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        HitGroundLocation;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                TmpUpVector;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LUpVector;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_400C[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_3;                     // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetGroundLocationSimple_ReturnValue;      // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcMeshFitGroundVector_UpVector;         // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_400D[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0118(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_GetMeshFitGroundCheckLocationArray_Location; // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshFitGroundCheckLocationArray_CheckHeight; // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_400E[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0160(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetActorDeltaSeconds_ReturnValue;         // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZX_ReturnValue;                // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_ClampVectorLimitAngle_ClampVector;        // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_400F[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0210(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x02C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x034A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4010[0x1];                                     // 0x034B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4011[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0398(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_MeshFitGround) == 0x000010, "Wrong alignment on RSBattleCharacter_C_MeshFitGround");
static_assert(sizeof(RSBattleCharacter_C_MeshFitGround) == 0x0003D0, "Wrong size on RSBattleCharacter_C_MeshFitGround");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, InterpSpeed) == 0x000000, "Member 'RSBattleCharacter_C_MeshFitGround::InterpSpeed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, AngleLimit) == 0x000004, "Member 'RSBattleCharacter_C_MeshFitGround::AngleLimit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, bEndFit) == 0x000008, "Member 'RSBattleCharacter_C_MeshFitGround::bEndFit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, bDummy) == 0x000009, "Member 'RSBattleCharacter_C_MeshFitGround::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, HitGroundLocation) == 0x000010, "Member 'RSBattleCharacter_C_MeshFitGround::HitGroundLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, TmpUpVector) == 0x000020, "Member 'RSBattleCharacter_C_MeshFitGround::TmpUpVector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, LUpVector) == 0x00002C, "Member 'RSBattleCharacter_C_MeshFitGround::LUpVector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Less_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Array_Get_Item) == 0x000048, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Array_Get_Item_1) == 0x000054, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00006C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Normal_ReturnValue) == 0x000078, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Normal_ReturnValue_1) == 0x000084, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000090, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x00009C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Normal_ReturnValue_2) == 0x0000A8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Normal_ReturnValue_3) == 0x0000B4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Normal_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000C0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x0000CC, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GetGroundLocationSimple_ReturnValue) == 0x0000D8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GetGroundLocationSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakVector_X) == 0x0000F0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakVector_Y) == 0x0000F4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakVector_Z) == 0x0000F8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000FC, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_CalcMeshFitGroundVector_UpVector) == 0x000108, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_CalcMeshFitGroundVector_UpVector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, Temp_object_Variable) == 0x000118, "Member 'RSBattleCharacter_C_MeshFitGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GetMeshFitGroundCheckLocationArray_Location) == 0x000128, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GetMeshFitGroundCheckLocationArray_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GetMeshFitGroundCheckLocationArray_CheckHeight) == 0x000138, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GetMeshFitGroundCheckLocationArray_CheckHeight' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Add_FloatFloat_ReturnValue) == 0x00013C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_MakeVector_ReturnValue) == 0x000140, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Array_Length_ReturnValue) == 0x00014C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Vector_Up_ReturnValue) == 0x000150, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GetTransform_ReturnValue) == 0x000160, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GetActorDeltaSeconds_ReturnValue) == 0x000190, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GetActorDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GetActorForwardVector_ReturnValue) == 0x000194, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001A0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_MakeRotFromZX_ReturnValue) == 0x0001AC, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_MakeRotFromZX_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_ClampVectorLimitAngle_ClampVector) == 0x0001B8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_ClampVectorLimitAngle_ClampVector' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_InverseTransformRotation_ReturnValue) == 0x0001C4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_MakeVector_ReturnValue_1) == 0x0001D0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, Temp_int_Loop_Counter_Variable) == 0x0001DC, "Member 'RSBattleCharacter_C_MeshFitGround::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Less_IntInt_ReturnValue) == 0x0001E0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Add_IntInt_ReturnValue) == 0x0001E4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, Temp_int_Array_Index_Variable) == 0x0001E8, "Member 'RSBattleCharacter_C_MeshFitGround::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Array_Get_Item_2) == 0x0001EC, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_RInterpTo_ReturnValue) == 0x0001F8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakVector_X_1) == 0x000204, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakVector_Y_1) == 0x000208, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakVector_Z_1) == 0x00020C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000210, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_MakeVector_ReturnValue_2) == 0x000298, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x0002A4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Array_Add_ReturnValue) == 0x0002B0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002B4, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_LineTraceSingle_OutHit) == 0x0002C0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_LineTraceSingle_ReturnValue) == 0x000348, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_bBlockingHit) == 0x000349, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x00034A, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_Time) == 0x00034C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_Distance) == 0x000350, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_Location) == 0x000354, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_ImpactPoint) == 0x000360, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_Normal) == 0x00036C, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000378, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_PhysMat) == 0x000388, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_HitActor) == 0x000390, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_HitComponent) == 0x000398, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_HitBoneName) == 0x0003A0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_HitItem) == 0x0003A8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_FaceIndex) == 0x0003AC, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_TraceStart) == 0x0003B0, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_BreakHitResult_TraceEnd) == 0x0003BC, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_MeshFitGround, CallFunc_Array_Add_ReturnValue_1) == 0x0003C8, "Member 'RSBattleCharacter_C_MeshFitGround::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetMeshFitGroundCheckLocation
// 0x0024 (0x0024 - 0x0000)
struct RSBattleCharacter_C_GetMeshFitGroundCheckLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckHeight;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetMeshFitGroundCheckLocation");
static_assert(sizeof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation) == 0x000024, "Wrong size on RSBattleCharacter_C_GetMeshFitGroundCheckLocation");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation, Location) == 0x000000, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation, CheckHeight) == 0x00000C, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocation::CheckHeight' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMeshFitGroundCheckLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_GetMeshFitGroundCheckLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CancelMeshFitGround
// 0x008C (0x008C - 0x0000)
struct RSBattleCharacter_C_CancelMeshFitGround final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4012[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(RSBattleCharacter_C_CancelMeshFitGround) == 0x000004, "Wrong alignment on RSBattleCharacter_C_CancelMeshFitGround");
static_assert(sizeof(RSBattleCharacter_C_CancelMeshFitGround) == 0x00008C, "Wrong size on RSBattleCharacter_C_CancelMeshFitGround");
static_assert(offsetof(RSBattleCharacter_C_CancelMeshFitGround, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_CancelMeshFitGround::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CancelMeshFitGround, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000004, "Member 'RSBattleCharacter_C_CancelMeshFitGround::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StartSASChance
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_StartSASChance final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dammy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StartSASChance) == 0x000004, "Wrong alignment on RSBattleCharacter_C_StartSASChance");
static_assert(sizeof(RSBattleCharacter_C_StartSASChance) == 0x000008, "Wrong size on RSBattleCharacter_C_StartSASChance");
static_assert(offsetof(RSBattleCharacter_C_StartSASChance, Time) == 0x000000, "Member 'RSBattleCharacter_C_StartSASChance::Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StartSASChance, Dammy) == 0x000004, "Member 'RSBattleCharacter_C_StartSASChance::Dammy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EndSASChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_EndSASChance final
{
public:
	bool                                          Dammy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EndSASChance) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EndSASChance");
static_assert(sizeof(RSBattleCharacter_C_EndSASChance) == 0x000001, "Wrong size on RSBattleCharacter_C_EndSASChance");
static_assert(offsetof(RSBattleCharacter_C_EndSASChance, Dammy) == 0x000000, "Member 'RSBattleCharacter_C_EndSASChance::Dammy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetHitStopInterface
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_SetHitStopInterface final
{
public:
	EHCRestictedHitStopType                       HitStopType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCritical;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4013[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHitStopPlaying_isPlaying;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetHitStopInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetHitStopInterface");
static_assert(sizeof(RSBattleCharacter_C_SetHitStopInterface) == 0x000020, "Wrong size on RSBattleCharacter_C_SetHitStopInterface");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, HitStopType) == 0x000000, "Member 'RSBattleCharacter_C_SetHitStopInterface::HitStopType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, bCritical) == 0x000001, "Member 'RSBattleCharacter_C_SetHitStopInterface::bCritical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, bDummy) == 0x000002, "Member 'RSBattleCharacter_C_SetHitStopInterface::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattleCharacter_C_SetHitStopInterface::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'RSBattleCharacter_C_SetHitStopInterface::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, CallFunc_IsHitStopPlaying_isPlaying) == 0x000018, "Member 'RSBattleCharacter_C_SetHitStopInterface::CallFunc_IsHitStopPlaying_isPlaying' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHitStopInterface, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleCharacter_C_SetHitStopInterface::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UpdateCameraDither
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_UpdateCameraDither final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_UseDither;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4014[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraDither;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewValueTemp;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CameraChildrenConponents;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         CallFunc_UpdateCameraDitherInner_ReturnValue;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_UpdateCameraDither) == 0x000008, "Wrong alignment on RSBattleCharacter_C_UpdateCameraDither");
static_assert(sizeof(RSBattleCharacter_C_UpdateCameraDither) == 0x000028, "Wrong size on RSBattleCharacter_C_UpdateCameraDither");
static_assert(offsetof(RSBattleCharacter_C_UpdateCameraDither, DeltaSeconds) == 0x000000, "Member 'RSBattleCharacter_C_UpdateCameraDither::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateCameraDither, Param_UseDither) == 0x000004, "Member 'RSBattleCharacter_C_UpdateCameraDither::Param_UseDither' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateCameraDither, CameraDither) == 0x000008, "Member 'RSBattleCharacter_C_UpdateCameraDither::CameraDither' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateCameraDither, NewValueTemp) == 0x00000C, "Member 'RSBattleCharacter_C_UpdateCameraDither::NewValueTemp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateCameraDither, CameraChildrenConponents) == 0x000010, "Member 'RSBattleCharacter_C_UpdateCameraDither::CameraChildrenConponents' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateCameraDither, CallFunc_UpdateCameraDitherInner_ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_UpdateCameraDither::CallFunc_UpdateCameraDitherInner_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetCameraDither
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_SetCameraDither final
{
public:
	float                                         SetDitherValue;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetCameraDither) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetCameraDither");
static_assert(sizeof(RSBattleCharacter_C_SetCameraDither) == 0x000008, "Wrong size on RSBattleCharacter_C_SetCameraDither");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDither, SetDitherValue) == 0x000000, "Member 'RSBattleCharacter_C_SetCameraDither::SetDitherValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetCameraDither, Dummy) == 0x000004, "Member 'RSBattleCharacter_C_SetCameraDither::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetUseCameraDither
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_SetUseCameraDither final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCameraDither_Dummy;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetUseCameraDither) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetUseCameraDither");
static_assert(sizeof(RSBattleCharacter_C_SetUseCameraDither) == 0x000003, "Wrong size on RSBattleCharacter_C_SetUseCameraDither");
static_assert(offsetof(RSBattleCharacter_C_SetUseCameraDither, bUse) == 0x000000, "Member 'RSBattleCharacter_C_SetUseCameraDither::bUse' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetUseCameraDither, bDummy) == 0x000001, "Member 'RSBattleCharacter_C_SetUseCameraDither::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetUseCameraDither, CallFunc_SetCameraDither_Dummy) == 0x000002, "Member 'RSBattleCharacter_C_SetUseCameraDither::CallFunc_SetCameraDither_Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCounterWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsCounterWait final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCounterWait) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsCounterWait");
static_assert(sizeof(RSBattleCharacter_C_IsCounterWait) == 0x000001, "Wrong size on RSBattleCharacter_C_IsCounterWait");
static_assert(offsetof(RSBattleCharacter_C_IsCounterWait, bWait) == 0x000000, "Member 'RSBattleCharacter_C_IsCounterWait::bWait' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RequestDie
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_RequestDie final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_RequestDie) == 0x000001, "Wrong alignment on RSBattleCharacter_C_RequestDie");
static_assert(sizeof(RSBattleCharacter_C_RequestDie) == 0x000002, "Wrong size on RSBattleCharacter_C_RequestDie");
static_assert(offsetof(RSBattleCharacter_C_RequestDie, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_RequestDie::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RequestDie, CallFunc_OnDead_Dummy) == 0x000001, "Member 'RSBattleCharacter_C_RequestDie::CallFunc_OnDead_Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EndVisionFog
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_EndVisionFog final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EndVisionFog) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EndVisionFog");
static_assert(sizeof(RSBattleCharacter_C_EndVisionFog) == 0x000001, "Wrong size on RSBattleCharacter_C_EndVisionFog");
static_assert(offsetof(RSBattleCharacter_C_EndVisionFog, Dummy) == 0x000000, "Member 'RSBattleCharacter_C_EndVisionFog::Dummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EnableReactionCoefficient
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_EnableReactionCoefficient final
{
public:
	bool                                          bNormalAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychicAttack;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4015[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionSRate;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionLRate;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRate;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashRate;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAcceptAll;                                        // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EnableReactionCoefficient) == 0x000004, "Wrong alignment on RSBattleCharacter_C_EnableReactionCoefficient");
static_assert(sizeof(RSBattleCharacter_C_EnableReactionCoefficient) == 0x000018, "Wrong size on RSBattleCharacter_C_EnableReactionCoefficient");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, bNormalAttack) == 0x000000, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::bNormalAttack' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, bPsychicAttack) == 0x000001, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::bPsychicAttack' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, ReactionSRate) == 0x000004, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::ReactionSRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, ReactionLRate) == 0x000008, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::ReactionLRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, DownRate) == 0x00000C, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::DownRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, CrashRate) == 0x000010, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::CrashRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, bAcceptAll) == 0x000014, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::bAcceptAll' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EnableReactionCoefficient, Return) == 0x000015, "Member 'RSBattleCharacter_C_EnableReactionCoefficient::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DisableReactionCoefficient
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_DisableReactionCoefficient final
{
public:
	bool                                          bNormalAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychicAttack;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DisableReactionCoefficient) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DisableReactionCoefficient");
static_assert(sizeof(RSBattleCharacter_C_DisableReactionCoefficient) == 0x000003, "Wrong size on RSBattleCharacter_C_DisableReactionCoefficient");
static_assert(offsetof(RSBattleCharacter_C_DisableReactionCoefficient, bNormalAttack) == 0x000000, "Member 'RSBattleCharacter_C_DisableReactionCoefficient::bNormalAttack' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DisableReactionCoefficient, bPsychicAttack) == 0x000001, "Member 'RSBattleCharacter_C_DisableReactionCoefficient::bPsychicAttack' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DisableReactionCoefficient, Return) == 0x000002, "Member 'RSBattleCharacter_C_DisableReactionCoefficient::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SpawnSequencerEffectInterface
// 0x0050 (0x0050 - 0x0000)
struct RSBattleCharacter_C_SpawnSequencerEffectInterface final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class FName                                   AttachName;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SpawnSequencerEffectInterface) == 0x000010, "Wrong alignment on RSBattleCharacter_C_SpawnSequencerEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_SpawnSequencerEffectInterface) == 0x000050, "Wrong size on RSBattleCharacter_C_SpawnSequencerEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_SpawnSequencerEffectInterface, ClaimantName) == 0x000000, "Member 'RSBattleCharacter_C_SpawnSequencerEffectInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SpawnSequencerEffectInterface, Template) == 0x000008, "Member 'RSBattleCharacter_C_SpawnSequencerEffectInterface::Template' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SpawnSequencerEffectInterface, Transform) == 0x000010, "Member 'RSBattleCharacter_C_SpawnSequencerEffectInterface::Transform' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SpawnSequencerEffectInterface, AttachName) == 0x000040, "Member 'RSBattleCharacter_C_SpawnSequencerEffectInterface::AttachName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SpawnSequencerEffectInterface, Return) == 0x000048, "Member 'RSBattleCharacter_C_SpawnSequencerEffectInterface::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EndSequencerEffectInterface
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_EndSequencerEffectInterface final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EndSequencerEffectInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_EndSequencerEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_EndSequencerEffectInterface) == 0x00000C, "Wrong size on RSBattleCharacter_C_EndSequencerEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_EndSequencerEffectInterface, ClaimantName) == 0x000000, "Member 'RSBattleCharacter_C_EndSequencerEffectInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EndSequencerEffectInterface, Return) == 0x000008, "Member 'RSBattleCharacter_C_EndSequencerEffectInterface::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.UpdateSequencerEffectInterface
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_UpdateSequencerEffectInterface final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_UpdateSequencerEffectInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_UpdateSequencerEffectInterface");
static_assert(sizeof(RSBattleCharacter_C_UpdateSequencerEffectInterface) == 0x000008, "Wrong size on RSBattleCharacter_C_UpdateSequencerEffectInterface");
static_assert(offsetof(RSBattleCharacter_C_UpdateSequencerEffectInterface, DeltaSec) == 0x000000, "Member 'RSBattleCharacter_C_UpdateSequencerEffectInterface::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_UpdateSequencerEffectInterface, Return) == 0x000004, "Member 'RSBattleCharacter_C_UpdateSequencerEffectInterface::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsInScreen
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsInScreen final
{
public:
	bool                                          InScreen;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsInScreen) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsInScreen");
static_assert(sizeof(RSBattleCharacter_C_IsInScreen) == 0x000002, "Wrong size on RSBattleCharacter_C_IsInScreen");
static_assert(offsetof(RSBattleCharacter_C_IsInScreen, InScreen) == 0x000000, "Member 'RSBattleCharacter_C_IsInScreen::InScreen' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsInScreen, CallFunc_WasRecentlyRendered_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsInScreen::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.Get Event Bind Mesh Component
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_Get_Event_Bind_Mesh_Component final
{
public:
	TArray<class UStaticMeshComponent*>           MeshComponent;                                     // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           LEmptyArray;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_Get_Event_Bind_Mesh_Component) == 0x000008, "Wrong alignment on RSBattleCharacter_C_Get_Event_Bind_Mesh_Component");
static_assert(sizeof(RSBattleCharacter_C_Get_Event_Bind_Mesh_Component) == 0x000020, "Wrong size on RSBattleCharacter_C_Get_Event_Bind_Mesh_Component");
static_assert(offsetof(RSBattleCharacter_C_Get_Event_Bind_Mesh_Component, MeshComponent) == 0x000000, "Member 'RSBattleCharacter_C_Get_Event_Bind_Mesh_Component::MeshComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_Get_Event_Bind_Mesh_Component, LEmptyArray) == 0x000010, "Member 'RSBattleCharacter_C_Get_Event_Bind_Mesh_Component::LEmptyArray' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.RegisterBrainFieldNormalTransform
// 0x0040 (0x0040 - 0x0000)
struct RSBattleCharacter_C_RegisterBrainFieldNormalTransform final
{
public:
	struct FTransform                             InNormalTransform;                                 // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_RegisterBrainFieldNormalTransform) == 0x000010, "Wrong alignment on RSBattleCharacter_C_RegisterBrainFieldNormalTransform");
static_assert(sizeof(RSBattleCharacter_C_RegisterBrainFieldNormalTransform) == 0x000040, "Wrong size on RSBattleCharacter_C_RegisterBrainFieldNormalTransform");
static_assert(offsetof(RSBattleCharacter_C_RegisterBrainFieldNormalTransform, InNormalTransform) == 0x000000, "Member 'RSBattleCharacter_C_RegisterBrainFieldNormalTransform::InNormalTransform' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_RegisterBrainFieldNormalTransform, Return) == 0x000030, "Member 'RSBattleCharacter_C_RegisterBrainFieldNormalTransform::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckNoDamagePopUpFromAttacker
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker final
{
public:
	bool                                          bNoPopUp;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker");
static_assert(sizeof(RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker) == 0x000001, "Wrong size on RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker");
static_assert(offsetof(RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker, bNoPopUp) == 0x000000, "Member 'RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker::bNoPopUp' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetGroupIDInterface
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetGroupIDInterface final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4016[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_GroupID;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_SubGroupID;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetGroupIDInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetGroupIDInterface");
static_assert(sizeof(RSBattleCharacter_C_GetGroupIDInterface) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetGroupIDInterface");
static_assert(offsetof(RSBattleCharacter_C_GetGroupIDInterface, bSuccess) == 0x000000, "Member 'RSBattleCharacter_C_GetGroupIDInterface::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroupIDInterface, Param_GroupID) == 0x000004, "Member 'RSBattleCharacter_C_GetGroupIDInterface::Param_GroupID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroupIDInterface, Param_SubGroupID) == 0x000008, "Member 'RSBattleCharacter_C_GetGroupIDInterface::Param_SubGroupID' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StopMovementImmediately
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_StopMovementImmediately final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StopMovementImmediately) == 0x000001, "Wrong alignment on RSBattleCharacter_C_StopMovementImmediately");
static_assert(sizeof(RSBattleCharacter_C_StopMovementImmediately) == 0x000001, "Wrong size on RSBattleCharacter_C_StopMovementImmediately");
static_assert(offsetof(RSBattleCharacter_C_StopMovementImmediately, bDummy) == 0x000000, "Member 'RSBattleCharacter_C_StopMovementImmediately::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPsychicObjectThrowParameter
// 0x0024 (0x0024 - 0x0000)
struct RSBattleCharacter_C_GetPsychicObjectThrowParameter final
{
public:
	bool                                          Apply;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4017[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Directshot_throw_speed;                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Directshot_homing_speed;                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combo_throw_speed;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combo_homing_speed;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainfield_throw_speed;                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainfield_homing_speed;                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intercept_throw_speed;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intercept_homing_speed;                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPsychicObjectThrowParameter) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetPsychicObjectThrowParameter");
static_assert(sizeof(RSBattleCharacter_C_GetPsychicObjectThrowParameter) == 0x000024, "Wrong size on RSBattleCharacter_C_GetPsychicObjectThrowParameter");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Apply) == 0x000000, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Apply' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Directshot_throw_speed) == 0x000004, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Directshot_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Directshot_homing_speed) == 0x000008, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Directshot_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Combo_throw_speed) == 0x00000C, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Combo_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Combo_homing_speed) == 0x000010, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Combo_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, brainfield_throw_speed) == 0x000014, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::brainfield_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, brainfield_homing_speed) == 0x000018, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::brainfield_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Intercept_throw_speed) == 0x00001C, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Intercept_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetPsychicObjectThrowParameter, Intercept_homing_speed) == 0x000020, "Member 'RSBattleCharacter_C_GetPsychicObjectThrowParameter::Intercept_homing_speed' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterSkillTableWithReplace
// 0x01F0 (0x01F0 - 0x0000)
struct RSBattleCharacter_C_GetCharacterSkillTableWithReplace final
{
public:
	class UDataTable*                             OrgTable;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillCommonInfo;                                   // 0x0010(0x00F0)(Parm, OutParm)
	struct FHCSkillCommonInfo                     CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo; // 0x0100(0x00F0)()
};
static_assert(alignof(RSBattleCharacter_C_GetCharacterSkillTableWithReplace) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharacterSkillTableWithReplace");
static_assert(sizeof(RSBattleCharacter_C_GetCharacterSkillTableWithReplace) == 0x0001F0, "Wrong size on RSBattleCharacter_C_GetCharacterSkillTableWithReplace");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterSkillTableWithReplace, OrgTable) == 0x000000, "Member 'RSBattleCharacter_C_GetCharacterSkillTableWithReplace::OrgTable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterSkillTableWithReplace, SkillName) == 0x000008, "Member 'RSBattleCharacter_C_GetCharacterSkillTableWithReplace::SkillName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterSkillTableWithReplace, SkillCommonInfo) == 0x000010, "Member 'RSBattleCharacter_C_GetCharacterSkillTableWithReplace::SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterSkillTableWithReplace, CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo) == 0x000100, "Member 'RSBattleCharacter_C_GetCharacterSkillTableWithReplace::CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ReserveCrashVisionShockWave
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_ReserveCrashVisionShockWave final
{
public:
	float                                         EffectDelayTime;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ReserveCrashVisionShockWave) == 0x000004, "Wrong alignment on RSBattleCharacter_C_ReserveCrashVisionShockWave");
static_assert(sizeof(RSBattleCharacter_C_ReserveCrashVisionShockWave) == 0x000008, "Wrong size on RSBattleCharacter_C_ReserveCrashVisionShockWave");
static_assert(offsetof(RSBattleCharacter_C_ReserveCrashVisionShockWave, EffectDelayTime) == 0x000000, "Member 'RSBattleCharacter_C_ReserveCrashVisionShockWave::EffectDelayTime' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ReserveCrashVisionShockWave, bDummy) == 0x000004, "Member 'RSBattleCharacter_C_ReserveCrashVisionShockWave::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetIgnoreVisionSimulatorScore
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetIgnoreVisionSimulatorScore final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetIgnoreVisionSimulatorScore) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetIgnoreVisionSimulatorScore");
static_assert(sizeof(RSBattleCharacter_C_SetIgnoreVisionSimulatorScore) == 0x000002, "Wrong size on RSBattleCharacter_C_SetIgnoreVisionSimulatorScore");
static_assert(offsetof(RSBattleCharacter_C_SetIgnoreVisionSimulatorScore, bIgnore) == 0x000000, "Member 'RSBattleCharacter_C_SetIgnoreVisionSimulatorScore::bIgnore' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetIgnoreVisionSimulatorScore, bDummy) == 0x000001, "Member 'RSBattleCharacter_C_SetIgnoreVisionSimulatorScore::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetBrainCrashDamageLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetBrainCrashDamageLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetBrainCrashDamageLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetBrainCrashDamageLocation");
static_assert(sizeof(RSBattleCharacter_C_GetBrainCrashDamageLocation) == 0x000018, "Wrong size on RSBattleCharacter_C_GetBrainCrashDamageLocation");
static_assert(offsetof(RSBattleCharacter_C_GetBrainCrashDamageLocation, WorldLocation) == 0x000000, "Member 'RSBattleCharacter_C_GetBrainCrashDamageLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBrainCrashDamageLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetBrainCrashDamageLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetLandingTemplate
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_GetLandingTemplate final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4018[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ParticleManager_C*                  CallFunc_GetParticleManager_Particle_Manager;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4019[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ElementEffectFactory_C> CallFunc_GetLandingTemplate_self_CastInput;        // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        CallFunc_GetLandingTemplate_Template;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetLandingTemplate) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetLandingTemplate");
static_assert(sizeof(RSBattleCharacter_C_GetLandingTemplate) == 0x000038, "Wrong size on RSBattleCharacter_C_GetLandingTemplate");
static_assert(offsetof(RSBattleCharacter_C_GetLandingTemplate, SurfaceType) == 0x000000, "Member 'RSBattleCharacter_C_GetLandingTemplate::SurfaceType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetLandingTemplate, Template) == 0x000008, "Member 'RSBattleCharacter_C_GetLandingTemplate::Template' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetLandingTemplate, CallFunc_GetParticleManager_Particle_Manager) == 0x000010, "Member 'RSBattleCharacter_C_GetLandingTemplate::CallFunc_GetParticleManager_Particle_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetLandingTemplate, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_GetLandingTemplate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetLandingTemplate, CallFunc_GetLandingTemplate_self_CastInput) == 0x000020, "Member 'RSBattleCharacter_C_GetLandingTemplate::CallFunc_GetLandingTemplate_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetLandingTemplate, CallFunc_GetLandingTemplate_Template) == 0x000030, "Member 'RSBattleCharacter_C_GetLandingTemplate::CallFunc_GetLandingTemplate_Template' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetFootStepTemplate
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_GetFootStepTemplate final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ParticleManager_C*                  CallFunc_GetParticleManager_Particle_Manager;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ElementEffectFactory_C> CallFunc_GetFootStepTemplate_self_CastInput;       // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        CallFunc_GetFootStepTemplate_Template;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetFootStepTemplate) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetFootStepTemplate");
static_assert(sizeof(RSBattleCharacter_C_GetFootStepTemplate) == 0x000038, "Wrong size on RSBattleCharacter_C_GetFootStepTemplate");
static_assert(offsetof(RSBattleCharacter_C_GetFootStepTemplate, SurfaceType) == 0x000000, "Member 'RSBattleCharacter_C_GetFootStepTemplate::SurfaceType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetFootStepTemplate, Template) == 0x000008, "Member 'RSBattleCharacter_C_GetFootStepTemplate::Template' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetFootStepTemplate, CallFunc_GetParticleManager_Particle_Manager) == 0x000010, "Member 'RSBattleCharacter_C_GetFootStepTemplate::CallFunc_GetParticleManager_Particle_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetFootStepTemplate, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_GetFootStepTemplate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetFootStepTemplate, CallFunc_GetFootStepTemplate_self_CastInput) == 0x000020, "Member 'RSBattleCharacter_C_GetFootStepTemplate::CallFunc_GetFootStepTemplate_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetFootStepTemplate, CallFunc_GetFootStepTemplate_Template) == 0x000030, "Member 'RSBattleCharacter_C_GetFootStepTemplate::CallFunc_GetFootStepTemplate_Template' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnBeginConnectEffect
// 0x0038 (0x0038 - 0x0000)
struct RSBattleCharacter_C_OnBeginConnectEffect final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEffectConnectPoint                           SourceConnectPoint;                                // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceSocketName;                                  // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEffectConnectPoint                           TargetConnectPoint;                                // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSocketName;                                  // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          PlaySound;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnBeginConnectEffect) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OnBeginConnectEffect");
static_assert(sizeof(RSBattleCharacter_C_OnBeginConnectEffect) == 0x000038, "Wrong size on RSBattleCharacter_C_OnBeginConnectEffect");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, ParticleSystem) == 0x000000, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::ParticleSystem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, ObjectName) == 0x000008, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::ObjectName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, SourceConnectPoint) == 0x000010, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::SourceConnectPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, SourceSocketName) == 0x000014, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::SourceSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, TargetConnectPoint) == 0x00001C, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::TargetConnectPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, TargetSocketName) == 0x000020, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::TargetSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, PlaySound) == 0x000028, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::PlaySound' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnBeginConnectEffect, bDummy) == 0x000030, "Member 'RSBattleCharacter_C_OnBeginConnectEffect::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OnEndConnectEffect
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_OnEndConnectEffect final
{
public:
	class FName                                   ObjectName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OnEndConnectEffect) == 0x000004, "Wrong alignment on RSBattleCharacter_C_OnEndConnectEffect");
static_assert(sizeof(RSBattleCharacter_C_OnEndConnectEffect) == 0x00000C, "Wrong size on RSBattleCharacter_C_OnEndConnectEffect");
static_assert(offsetof(RSBattleCharacter_C_OnEndConnectEffect, ObjectName) == 0x000000, "Member 'RSBattleCharacter_C_OnEndConnectEffect::ObjectName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OnEndConnectEffect, bDummy) == 0x000008, "Member 'RSBattleCharacter_C_OnEndConnectEffect::bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.TalkEventStart
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_TalkEventStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoTalkEventStart_bDummy;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_TalkEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_TalkEventStart");
static_assert(sizeof(RSBattleCharacter_C_TalkEventStart) == 0x000003, "Wrong size on RSBattleCharacter_C_TalkEventStart");
static_assert(offsetof(RSBattleCharacter_C_TalkEventStart, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_TalkEventStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TalkEventStart, CallFunc_EventStart_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_TalkEventStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TalkEventStart, CallFunc_DoTalkEventStart_bDummy) == 0x000002, "Member 'RSBattleCharacter_C_TalkEventStart::CallFunc_DoTalkEventStart_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.TalkEventEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_TalkEventEnd final
{
public:
	bool                                          IsRestoreTransform;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoTalkEventEnd_bDummy;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_TalkEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_TalkEventEnd");
static_assert(sizeof(RSBattleCharacter_C_TalkEventEnd) == 0x000004, "Wrong size on RSBattleCharacter_C_TalkEventEnd");
static_assert(offsetof(RSBattleCharacter_C_TalkEventEnd, IsRestoreTransform) == 0x000000, "Member 'RSBattleCharacter_C_TalkEventEnd::IsRestoreTransform' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TalkEventEnd, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_TalkEventEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TalkEventEnd, CallFunc_EventEnd_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_TalkEventEnd::CallFunc_EventEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_TalkEventEnd, CallFunc_DoTalkEventEnd_bDummy) == 0x000003, "Member 'RSBattleCharacter_C_TalkEventEnd::CallFunc_DoTalkEventEnd_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StaticEventStart
// 0x0005 (0x0005 - 0x0000)
struct RSBattleCharacter_C_StaticEventStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateBadStateEffect_bDummy;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventStart_bDummy;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StaticEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_StaticEventStart");
static_assert(sizeof(RSBattleCharacter_C_StaticEventStart) == 0x000005, "Wrong size on RSBattleCharacter_C_StaticEventStart");
static_assert(offsetof(RSBattleCharacter_C_StaticEventStart, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_StaticEventStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventStart, CallFunc_UpdateBadStateEffect_bDummy) == 0x000001, "Member 'RSBattleCharacter_C_StaticEventStart::CallFunc_UpdateBadStateEffect_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventStart, CallFunc_IsEnable_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_StaticEventStart::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventStart, CallFunc_DoStaticEventStart_bDummy) == 0x000003, "Member 'RSBattleCharacter_C_StaticEventStart::CallFunc_DoStaticEventStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventStart, CallFunc_EventStart_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_StaticEventStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StaticEventEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_StaticEventEnd final
{
public:
	bool                                          IsRestoreTransform;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventEnd_bDummy;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StaticEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_StaticEventEnd");
static_assert(sizeof(RSBattleCharacter_C_StaticEventEnd) == 0x000004, "Wrong size on RSBattleCharacter_C_StaticEventEnd");
static_assert(offsetof(RSBattleCharacter_C_StaticEventEnd, IsRestoreTransform) == 0x000000, "Member 'RSBattleCharacter_C_StaticEventEnd::IsRestoreTransform' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventEnd, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_StaticEventEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventEnd, CallFunc_DoStaticEventEnd_bDummy) == 0x000002, "Member 'RSBattleCharacter_C_StaticEventEnd::CallFunc_DoStaticEventEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StaticEventEnd, CallFunc_EventEnd_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_StaticEventEnd::CallFunc_EventEnd_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EventStart
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_EventStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateIconOff_Dummy;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEventStart_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EventStart");
static_assert(sizeof(RSBattleCharacter_C_EventStart) == 0x000003, "Wrong size on RSBattleCharacter_C_EventStart");
static_assert(offsetof(RSBattleCharacter_C_EventStart, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_EventStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventStart, CallFunc_BadStateIconOff_Dummy) == 0x000001, "Member 'RSBattleCharacter_C_EventStart::CallFunc_BadStateIconOff_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventStart, CallFunc_DoEventStart_bDummy) == 0x000002, "Member 'RSBattleCharacter_C_EventStart::CallFunc_DoEventStart_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EventEnd
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_EventEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEventEnd_bDummy;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EventEnd");
static_assert(sizeof(RSBattleCharacter_C_EventEnd) == 0x000002, "Wrong size on RSBattleCharacter_C_EventEnd");
static_assert(offsetof(RSBattleCharacter_C_EventEnd, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_EventEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventEnd, CallFunc_DoEventEnd_bDummy) == 0x000001, "Member 'RSBattleCharacter_C_EventEnd::CallFunc_DoEventEnd_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DynamicEventStart
// 0x0005 (0x0005 - 0x0000)
struct RSBattleCharacter_C_DynamicEventStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateBadStateEffect_bDummy;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventStart_bDummy;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DynamicEventStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DynamicEventStart");
static_assert(sizeof(RSBattleCharacter_C_DynamicEventStart) == 0x000005, "Wrong size on RSBattleCharacter_C_DynamicEventStart");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventStart, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_DynamicEventStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventStart, CallFunc_UpdateBadStateEffect_bDummy) == 0x000001, "Member 'RSBattleCharacter_C_DynamicEventStart::CallFunc_UpdateBadStateEffect_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventStart, CallFunc_IsEnable_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_DynamicEventStart::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventStart, CallFunc_DoDynamicEventStart_bDummy) == 0x000003, "Member 'RSBattleCharacter_C_DynamicEventStart::CallFunc_DoDynamicEventStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventStart, CallFunc_EventStart_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_DynamicEventStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DynamicEventEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_DynamicEventEnd final
{
public:
	bool                                          IsRestoreTransform;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventEnd_bDummy;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DynamicEventEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DynamicEventEnd");
static_assert(sizeof(RSBattleCharacter_C_DynamicEventEnd) == 0x000004, "Wrong size on RSBattleCharacter_C_DynamicEventEnd");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventEnd, IsRestoreTransform) == 0x000000, "Member 'RSBattleCharacter_C_DynamicEventEnd::IsRestoreTransform' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventEnd, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_DynamicEventEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventEnd, CallFunc_DoDynamicEventEnd_bDummy) == 0x000002, "Member 'RSBattleCharacter_C_DynamicEventEnd::CallFunc_DoDynamicEventEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventEnd, CallFunc_EventEnd_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_DynamicEventEnd::CallFunc_EventEnd_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetHoodVisible
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetHoodVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetHoodVisible) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetHoodVisible");
static_assert(sizeof(RSBattleCharacter_C_SetHoodVisible) == 0x000002, "Wrong size on RSBattleCharacter_C_SetHoodVisible");
static_assert(offsetof(RSBattleCharacter_C_SetHoodVisible, Visible) == 0x000000, "Member 'RSBattleCharacter_C_SetHoodVisible::Visible' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetHoodVisible, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetHoodVisible::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.StopEventAnimMontage
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_StopEventAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_StopEventAnimMontage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_StopEventAnimMontage");
static_assert(sizeof(RSBattleCharacter_C_StopEventAnimMontage) == 0x000010, "Wrong size on RSBattleCharacter_C_StopEventAnimMontage");
static_assert(offsetof(RSBattleCharacter_C_StopEventAnimMontage, AnimMontage) == 0x000000, "Member 'RSBattleCharacter_C_StopEventAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_StopEventAnimMontage, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_StopEventAnimMontage::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.PlayEventAnimMontage
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_PlayEventAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Section;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401E[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_PlayEventAnimMontage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_PlayEventAnimMontage");
static_assert(sizeof(RSBattleCharacter_C_PlayEventAnimMontage) == 0x000020, "Wrong size on RSBattleCharacter_C_PlayEventAnimMontage");
static_assert(offsetof(RSBattleCharacter_C_PlayEventAnimMontage, AnimMontage) == 0x000000, "Member 'RSBattleCharacter_C_PlayEventAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PlayEventAnimMontage, Section) == 0x000008, "Member 'RSBattleCharacter_C_PlayEventAnimMontage::Section' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PlayEventAnimMontage, InPlayRate) == 0x000010, "Member 'RSBattleCharacter_C_PlayEventAnimMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PlayEventAnimMontage, ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_PlayEventAnimMontage::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PlayEventAnimMontage, CallFunc_PlayAnimMontage_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_PlayEventAnimMontage::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_PlayEventAnimMontage, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_PlayEventAnimMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEndEventAnimMontage
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_IsEndEventAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401F[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEndEventAnimMontage) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsEndEventAnimMontage");
static_assert(sizeof(RSBattleCharacter_C_IsEndEventAnimMontage) == 0x000020, "Wrong size on RSBattleCharacter_C_IsEndEventAnimMontage");
static_assert(offsetof(RSBattleCharacter_C_IsEndEventAnimMontage, AnimMontage) == 0x000000, "Member 'RSBattleCharacter_C_IsEndEventAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEndEventAnimMontage, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsEndEventAnimMontage::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEndEventAnimMontage, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleCharacter_C_IsEndEventAnimMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEndEventAnimMontage, CallFunc_GetCurrentMontage_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_IsEndEventAnimMontage::CallFunc_GetCurrentMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEndEventAnimMontage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_IsEndEventAnimMontage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetEventVisible
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_SetEventVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHiddenCharacterAttachment_ReturnValue; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetEventVisible) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetEventVisible");
static_assert(sizeof(RSBattleCharacter_C_SetEventVisible) == 0x000004, "Wrong size on RSBattleCharacter_C_SetEventVisible");
static_assert(offsetof(RSBattleCharacter_C_SetEventVisible, Visible) == 0x000000, "Member 'RSBattleCharacter_C_SetEventVisible::Visible' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetEventVisible, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetEventVisible::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetEventVisible, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_SetEventVisible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetEventVisible, CallFunc_SetHiddenCharacterAttachment_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_SetEventVisible::CallFunc_SetHiddenCharacterAttachment_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetShadowOffsetTexture
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_SetShadowOffsetTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4020[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4021[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetShadowOffsetTexture) == 0x000008, "Wrong alignment on RSBattleCharacter_C_SetShadowOffsetTexture");
static_assert(sizeof(RSBattleCharacter_C_SetShadowOffsetTexture) == 0x000030, "Wrong size on RSBattleCharacter_C_SetShadowOffsetTexture");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, Texture) == 0x000000, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::Texture' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, Temp_object_Variable) == 0x000010, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, Temp_bool_Variable) == 0x000019, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, K2Node_Select_Default) == 0x000020, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetTexture, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RSBattleCharacter_C_SetShadowOffsetTexture::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetShadowOffsetMapID
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_SetShadowOffsetMapID final
{
public:
	EMaterialShadowOffsetID                       ShadowOffsetID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4022[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Mask;                                              // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetShadowOffsetMapID) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetShadowOffsetMapID");
static_assert(sizeof(RSBattleCharacter_C_SetShadowOffsetMapID) == 0x000018, "Wrong size on RSBattleCharacter_C_SetShadowOffsetMapID");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetMapID, ShadowOffsetID) == 0x000000, "Member 'RSBattleCharacter_C_SetShadowOffsetMapID::ShadowOffsetID' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetMapID, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetShadowOffsetMapID::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetMapID, Mask) == 0x000004, "Member 'RSBattleCharacter_C_SetShadowOffsetMapID::Mask' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetMapID, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'RSBattleCharacter_C_SetShadowOffsetMapID::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetShadowOffsetMapID, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'RSBattleCharacter_C_SetShadowOffsetMapID::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ResetShadowOffset
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_ResetShadowOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetShadowOffsetMapID_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetShadowOffsetTexture_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ResetShadowOffset) == 0x000001, "Wrong alignment on RSBattleCharacter_C_ResetShadowOffset");
static_assert(sizeof(RSBattleCharacter_C_ResetShadowOffset) == 0x000003, "Wrong size on RSBattleCharacter_C_ResetShadowOffset");
static_assert(offsetof(RSBattleCharacter_C_ResetShadowOffset, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_ResetShadowOffset::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetShadowOffset, CallFunc_SetShadowOffsetMapID_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_ResetShadowOffset::CallFunc_SetShadowOffsetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ResetShadowOffset, CallFunc_SetShadowOffsetTexture_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_ResetShadowOffset::CallFunc_SetShadowOffsetTexture_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BattleSequencerStart
// 0x0005 (0x0005 - 0x0000)
struct RSBattleCharacter_C_BattleSequencerStart final
{
public:
	bool                                          IsSetEnemyEvent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoBattleSequencerStart_bDummy;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BattleSequencerStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BattleSequencerStart");
static_assert(sizeof(RSBattleCharacter_C_BattleSequencerStart) == 0x000005, "Wrong size on RSBattleCharacter_C_BattleSequencerStart");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerStart, IsSetEnemyEvent) == 0x000000, "Member 'RSBattleCharacter_C_BattleSequencerStart::IsSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerStart, bDriveSequence) == 0x000001, "Member 'RSBattleCharacter_C_BattleSequencerStart::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerStart, ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_BattleSequencerStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerStart, CallFunc_DoBattleSequencerStart_bDummy) == 0x000003, "Member 'RSBattleCharacter_C_BattleSequencerStart::CallFunc_DoBattleSequencerStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerStart, CallFunc_EventStart_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_BattleSequencerStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BattleSequencerEnd
// 0x0006 (0x0006 - 0x0000)
struct RSBattleCharacter_C_BattleSequencerEnd final
{
public:
	bool                                          IsRestoreTransform;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSetEnemyEvent;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoBattleSequencerEnd_bDummy;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BattleSequencerEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BattleSequencerEnd");
static_assert(sizeof(RSBattleCharacter_C_BattleSequencerEnd) == 0x000006, "Wrong size on RSBattleCharacter_C_BattleSequencerEnd");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerEnd, IsRestoreTransform) == 0x000000, "Member 'RSBattleCharacter_C_BattleSequencerEnd::IsRestoreTransform' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerEnd, IsSetEnemyEvent) == 0x000001, "Member 'RSBattleCharacter_C_BattleSequencerEnd::IsSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerEnd, bDriveSequence) == 0x000002, "Member 'RSBattleCharacter_C_BattleSequencerEnd::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerEnd, ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_BattleSequencerEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerEnd, CallFunc_DoBattleSequencerEnd_bDummy) == 0x000004, "Member 'RSBattleCharacter_C_BattleSequencerEnd::CallFunc_DoBattleSequencerEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BattleSequencerEnd, CallFunc_EventEnd_ReturnValue) == 0x000005, "Member 'RSBattleCharacter_C_BattleSequencerEnd::CallFunc_EventEnd_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.DynamicEventBeforeBindCharacter
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_DynamicEventBeforeBindCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventBeforeBindCharacter_bDummy; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_DynamicEventBeforeBindCharacter) == 0x000001, "Wrong alignment on RSBattleCharacter_C_DynamicEventBeforeBindCharacter");
static_assert(sizeof(RSBattleCharacter_C_DynamicEventBeforeBindCharacter) == 0x000002, "Wrong size on RSBattleCharacter_C_DynamicEventBeforeBindCharacter");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventBeforeBindCharacter, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_DynamicEventBeforeBindCharacter::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_DynamicEventBeforeBindCharacter, CallFunc_DoDynamicEventBeforeBindCharacter_bDummy) == 0x000001, "Member 'RSBattleCharacter_C_DynamicEventBeforeBindCharacter::CallFunc_DoDynamicEventBeforeBindCharacter_bDummy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EventInputRestrictNative
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_EventInputRestrictNative final
{
public:
	bool                                          Restrict;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EventInputRestrictNative) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EventInputRestrictNative");
static_assert(sizeof(RSBattleCharacter_C_EventInputRestrictNative) == 0x000002, "Wrong size on RSBattleCharacter_C_EventInputRestrictNative");
static_assert(offsetof(RSBattleCharacter_C_EventInputRestrictNative, Restrict) == 0x000000, "Member 'RSBattleCharacter_C_EventInputRestrictNative::Restrict' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventInputRestrictNative, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_EventInputRestrictNative::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EventManagerStart
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_EventManagerStart final
{
public:
	bool                                          EnableTick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Visibility;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EventManagerStart) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EventManagerStart");
static_assert(sizeof(RSBattleCharacter_C_EventManagerStart) == 0x000003, "Wrong size on RSBattleCharacter_C_EventManagerStart");
static_assert(offsetof(RSBattleCharacter_C_EventManagerStart, EnableTick) == 0x000000, "Member 'RSBattleCharacter_C_EventManagerStart::EnableTick' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventManagerStart, Visibility) == 0x000001, "Member 'RSBattleCharacter_C_EventManagerStart::Visibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventManagerStart, ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_EventManagerStart::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EventManagerEnd
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_EventManagerEnd final
{
public:
	bool                                          RestoreEnableTick;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RestoreVisibility;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EventManagerEnd) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EventManagerEnd");
static_assert(sizeof(RSBattleCharacter_C_EventManagerEnd) == 0x000003, "Wrong size on RSBattleCharacter_C_EventManagerEnd");
static_assert(offsetof(RSBattleCharacter_C_EventManagerEnd, RestoreEnableTick) == 0x000000, "Member 'RSBattleCharacter_C_EventManagerEnd::RestoreEnableTick' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventManagerEnd, RestoreVisibility) == 0x000001, "Member 'RSBattleCharacter_C_EventManagerEnd::RestoreVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EventManagerEnd, ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_EventManagerEnd::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharactersParameterTableInterface
// 0x01F8 (0x01F8 - 0x0000)
struct RSBattleCharacter_C_GetCharactersParameterTableInterface final
{
public:
	struct FCharactersParameterTable              ReturnValue;                                       // 0x0000(0x01F8)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(RSBattleCharacter_C_GetCharactersParameterTableInterface) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharactersParameterTableInterface");
static_assert(sizeof(RSBattleCharacter_C_GetCharactersParameterTableInterface) == 0x0001F8, "Wrong size on RSBattleCharacter_C_GetCharactersParameterTableInterface");
static_assert(offsetof(RSBattleCharacter_C_GetCharactersParameterTableInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetCharactersParameterTableInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcDefence
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_CalcDefence final
{
public:
	float                                         RefPhysicsDefence;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefObjDefence;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlameDefence;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectricPhysics;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CalcDefence) == 0x000004, "Wrong alignment on RSBattleCharacter_C_CalcDefence");
static_assert(sizeof(RSBattleCharacter_C_CalcDefence) == 0x000014, "Wrong size on RSBattleCharacter_C_CalcDefence");
static_assert(offsetof(RSBattleCharacter_C_CalcDefence, RefPhysicsDefence) == 0x000000, "Member 'RSBattleCharacter_C_CalcDefence::RefPhysicsDefence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDefence, RefObjDefence) == 0x000004, "Member 'RSBattleCharacter_C_CalcDefence::RefObjDefence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDefence, RefFlameDefence) == 0x000008, "Member 'RSBattleCharacter_C_CalcDefence::RefFlameDefence' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDefence, RefElectricPhysics) == 0x00000C, "Member 'RSBattleCharacter_C_CalcDefence::RefElectricPhysics' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDefence, ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_CalcDefence::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcDamageByDefence
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_CalcDamageByDefence final
{
public:
	float                                         RefPhysicsDamage;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefObjDamage;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlameDamage;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectricDamage;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCriticalDamageRate;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4023[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CalcDamageByDefence) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcDamageByDefence");
static_assert(sizeof(RSBattleCharacter_C_CalcDamageByDefence) == 0x000028, "Wrong size on RSBattleCharacter_C_CalcDamageByDefence");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, RefPhysicsDamage) == 0x000000, "Member 'RSBattleCharacter_C_CalcDamageByDefence::RefPhysicsDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, RefObjDamage) == 0x000004, "Member 'RSBattleCharacter_C_CalcDamageByDefence::RefObjDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, RefFlameDamage) == 0x000008, "Member 'RSBattleCharacter_C_CalcDamageByDefence::RefFlameDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, RefElectricDamage) == 0x00000C, "Member 'RSBattleCharacter_C_CalcDamageByDefence::RefElectricDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, RefCriticalDamageRate) == 0x000010, "Member 'RSBattleCharacter_C_CalcDamageByDefence::RefCriticalDamageRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, AttackActor) == 0x000018, "Member 'RSBattleCharacter_C_CalcDamageByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByDefence, ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_CalcDamageByDefence::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcDamageByAttack
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_CalcDamageByAttack final
{
public:
	float                                         RefPhysicsDamage;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefObjDamage;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlameDamage;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectricDamage;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCriticalDamageRate;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4024[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CalcDamageByAttack) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcDamageByAttack");
static_assert(sizeof(RSBattleCharacter_C_CalcDamageByAttack) == 0x000028, "Wrong size on RSBattleCharacter_C_CalcDamageByAttack");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, RefPhysicsDamage) == 0x000000, "Member 'RSBattleCharacter_C_CalcDamageByAttack::RefPhysicsDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, RefObjDamage) == 0x000004, "Member 'RSBattleCharacter_C_CalcDamageByAttack::RefObjDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, RefFlameDamage) == 0x000008, "Member 'RSBattleCharacter_C_CalcDamageByAttack::RefFlameDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, RefElectricDamage) == 0x00000C, "Member 'RSBattleCharacter_C_CalcDamageByAttack::RefElectricDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, RefCriticalDamageRate) == 0x000010, "Member 'RSBattleCharacter_C_CalcDamageByAttack::RefCriticalDamageRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, DefenseActor) == 0x000018, "Member 'RSBattleCharacter_C_CalcDamageByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcDamageByAttack, ReturnValue) == 0x000020, "Member 'RSBattleCharacter_C_CalcDamageByAttack::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcCritical
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_CalcCritical final
{
public:
	float                                         Critical;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4025[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAssassinAttack;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4026[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CalcCritical) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcCritical");
static_assert(sizeof(RSBattleCharacter_C_CalcCritical) == 0x000018, "Wrong size on RSBattleCharacter_C_CalcCritical");
static_assert(offsetof(RSBattleCharacter_C_CalcCritical, Critical) == 0x000000, "Member 'RSBattleCharacter_C_CalcCritical::Critical' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcCritical, DefenseActor) == 0x000008, "Member 'RSBattleCharacter_C_CalcCritical::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcCritical, bAssassinAttack) == 0x000010, "Member 'RSBattleCharacter_C_CalcCritical::bAssassinAttack' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcCritical, ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_CalcCritical::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcAccumulationByDefence
// 0x0040 (0x0040 - 0x0000)
struct RSBattleCharacter_C_CalcAccumulationByDefence final
{
public:
	float                                         RefWince;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefKnockback;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefDown;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefLaunch;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlame;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectric;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlooded;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefOil;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefConfusion;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashScale;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashCapCheckRate;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4027[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CalcAccumulationByDefence) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcAccumulationByDefence");
static_assert(sizeof(RSBattleCharacter_C_CalcAccumulationByDefence) == 0x000040, "Wrong size on RSBattleCharacter_C_CalcAccumulationByDefence");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefWince) == 0x000000, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefWince' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefKnockback) == 0x000004, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefKnockback' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefDown) == 0x000008, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefDown' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefLaunch) == 0x00000C, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefLaunch' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefFlame) == 0x000010, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefFlame' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefElectric) == 0x000014, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefElectric' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefFlooded) == 0x000018, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefFlooded' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefOil) == 0x00001C, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefOil' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefConfusion) == 0x000020, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefConfusion' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefCrashScale) == 0x000024, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefCrashScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, RefCrashCapCheckRate) == 0x000028, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::RefCrashCapCheckRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, AttackActor) == 0x000030, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByDefence, ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_CalcAccumulationByDefence::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcAccumulationByAttack
// 0x0138 (0x0138 - 0x0000)
struct RSBattleCharacter_C_CalcAccumulationByAttack final
{
public:
	float                                         RefWince;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefKnockback;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefDown;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefLaunch;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlame;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectric;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlooded;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefOil;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefConfusion;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashScale;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashCapCheckRate;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4028[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttackType                            AttackType;                                        // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyActor;                                        // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4029[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0040(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CalcAccumulationByAttack) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcAccumulationByAttack");
static_assert(sizeof(RSBattleCharacter_C_CalcAccumulationByAttack) == 0x000138, "Wrong size on RSBattleCharacter_C_CalcAccumulationByAttack");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefWince) == 0x000000, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefWince' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefKnockback) == 0x000004, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefKnockback' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefDown) == 0x000008, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefDown' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefLaunch) == 0x00000C, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefLaunch' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefFlame) == 0x000010, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefFlame' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefElectric) == 0x000014, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefElectric' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefFlooded) == 0x000018, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefFlooded' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefOil) == 0x00001C, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefOil' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefConfusion) == 0x000020, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefConfusion' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefCrashScale) == 0x000024, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefCrashScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, RefCrashCapCheckRate) == 0x000028, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::RefCrashCapCheckRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, DefenseActor) == 0x000030, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, AttackType) == 0x000038, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::AttackType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, bCopyActor) == 0x000039, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::bCopyActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, SkillInfo) == 0x000040, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcAccumulationByAttack, ReturnValue) == 0x000130, "Member 'RSBattleCharacter_C_CalcAccumulationByAttack::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcFinalDamageByDefence
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_CalcFinalDamageByDefence final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_402A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CalcFinalDamageByDefence) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcFinalDamageByDefence");
static_assert(sizeof(RSBattleCharacter_C_CalcFinalDamageByDefence) == 0x000018, "Wrong size on RSBattleCharacter_C_CalcFinalDamageByDefence");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByDefence, Damage) == 0x000000, "Member 'RSBattleCharacter_C_CalcFinalDamageByDefence::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByDefence, AttackActor) == 0x000008, "Member 'RSBattleCharacter_C_CalcFinalDamageByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByDefence, ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_CalcFinalDamageByDefence::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CalcFinalDamageByAttack
// 0x0108 (0x0108 - 0x0000)
struct RSBattleCharacter_C_CalcFinalDamageByAttack final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_402B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0010(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_CalcFinalDamageByAttack) == 0x000008, "Wrong alignment on RSBattleCharacter_C_CalcFinalDamageByAttack");
static_assert(sizeof(RSBattleCharacter_C_CalcFinalDamageByAttack) == 0x000108, "Wrong size on RSBattleCharacter_C_CalcFinalDamageByAttack");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByAttack, Damage) == 0x000000, "Member 'RSBattleCharacter_C_CalcFinalDamageByAttack::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByAttack, DefenseActor) == 0x000008, "Member 'RSBattleCharacter_C_CalcFinalDamageByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByAttack, SkillInfo) == 0x000010, "Member 'RSBattleCharacter_C_CalcFinalDamageByAttack::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CalcFinalDamageByAttack, ReturnValue) == 0x000100, "Member 'RSBattleCharacter_C_CalcFinalDamageByAttack::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.OverwriteAttackCollisionInfo
// 0x01E0 (0x01E0 - 0x0000)
struct RSBattleCharacter_C_OverwriteAttackCollisionInfo final
{
public:
	struct FHCCollisionCommonInfo                 RefCommonInfo;                                     // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHCSkillCommonInfo                     RefSkill;                                          // 0x0070(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_402C[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionCommonInfo                 NewLocalVar_0;                                     // 0x0168(0x0070)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_OverwriteAttackCollisionInfo) == 0x000008, "Wrong alignment on RSBattleCharacter_C_OverwriteAttackCollisionInfo");
static_assert(sizeof(RSBattleCharacter_C_OverwriteAttackCollisionInfo) == 0x0001E0, "Wrong size on RSBattleCharacter_C_OverwriteAttackCollisionInfo");
static_assert(offsetof(RSBattleCharacter_C_OverwriteAttackCollisionInfo, RefCommonInfo) == 0x000000, "Member 'RSBattleCharacter_C_OverwriteAttackCollisionInfo::RefCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OverwriteAttackCollisionInfo, RefSkill) == 0x000070, "Member 'RSBattleCharacter_C_OverwriteAttackCollisionInfo::RefSkill' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OverwriteAttackCollisionInfo, ReturnValue) == 0x000160, "Member 'RSBattleCharacter_C_OverwriteAttackCollisionInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OverwriteAttackCollisionInfo, NewLocalVar_0) == 0x000168, "Member 'RSBattleCharacter_C_OverwriteAttackCollisionInfo::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_OverwriteAttackCollisionInfo, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x0001D8, "Member 'RSBattleCharacter_C_OverwriteAttackCollisionInfo::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsPsychicFieldDamageRateToBoss
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss");
static_assert(sizeof(RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss) == 0x000001, "Wrong size on RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss");
static_assert(offsetof(RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxDamageRateLimit
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetMaxDamageRateLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetMaxDamageRateLimit) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetMaxDamageRateLimit");
static_assert(sizeof(RSBattleCharacter_C_GetMaxDamageRateLimit) == 0x000004, "Wrong size on RSBattleCharacter_C_GetMaxDamageRateLimit");
static_assert(offsetof(RSBattleCharacter_C_GetMaxDamageRateLimit, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetMaxDamageRateLimit::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxCrashScaleLimit
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetMaxCrashScaleLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetMaxCrashScaleLimit) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetMaxCrashScaleLimit");
static_assert(sizeof(RSBattleCharacter_C_GetMaxCrashScaleLimit) == 0x000004, "Wrong size on RSBattleCharacter_C_GetMaxCrashScaleLimit");
static_assert(offsetof(RSBattleCharacter_C_GetMaxCrashScaleLimit, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetMaxCrashScaleLimit::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsIgnoreCritical
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsIgnoreCritical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsIgnoreCritical) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsIgnoreCritical");
static_assert(sizeof(RSBattleCharacter_C_IsIgnoreCritical) == 0x000001, "Wrong size on RSBattleCharacter_C_IsIgnoreCritical");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreCritical, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsIgnoreCritical::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsIgnoreHitCheck
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_IsIgnoreHitCheck final
{
public:
	class UPrimitiveComponent*                    PPrimitive;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitPosition;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpawnWait_bSpawnWait;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsIgnoreHitCheck) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsIgnoreHitCheck");
static_assert(sizeof(RSBattleCharacter_C_IsIgnoreHitCheck) == 0x000018, "Wrong size on RSBattleCharacter_C_IsIgnoreHitCheck");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreHitCheck, PPrimitive) == 0x000000, "Member 'RSBattleCharacter_C_IsIgnoreHitCheck::PPrimitive' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreHitCheck, HitPosition) == 0x000008, "Member 'RSBattleCharacter_C_IsIgnoreHitCheck::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreHitCheck, ReturnValue) == 0x000014, "Member 'RSBattleCharacter_C_IsIgnoreHitCheck::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreHitCheck, CallFunc_IsSpawnWait_bSpawnWait) == 0x000015, "Member 'RSBattleCharacter_C_IsIgnoreHitCheck::CallFunc_IsSpawnWait_bSpawnWait' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCheckFriendlyFire
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_IsCheckFriendlyFire final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbHit;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCheckFriendlyFire) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsCheckFriendlyFire");
static_assert(sizeof(RSBattleCharacter_C_IsCheckFriendlyFire) == 0x000010, "Wrong size on RSBattleCharacter_C_IsCheckFriendlyFire");
static_assert(offsetof(RSBattleCharacter_C_IsCheckFriendlyFire, HitActor) == 0x000000, "Member 'RSBattleCharacter_C_IsCheckFriendlyFire::HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCheckFriendlyFire, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsCheckFriendlyFire::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCheckFriendlyFire, LbHit) == 0x000009, "Member 'RSBattleCharacter_C_IsCheckFriendlyFire::LbHit' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsObstacleHitCheck
// 0x01A8 (0x01A8 - 0x0000)
struct RSBattleCharacter_C_IsObstacleHitCheck final
{
public:
	class UPrimitiveComponent*                    PPrimitive;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PAttacker;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPosition;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LIgnore;                                           // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_402D[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LEndLocation;                                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LStartLocation;                                    // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         L_ActorsToIgnore;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      L_ObjTypes;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_return;                                          // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_402E[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_402F[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BulletBase_C*                       K2Node_DynamicCast_AsBP_Bullet_Base;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4030[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorStartPoint_StartLocation;         // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4031[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Enemy_Weapon_C*                     K2Node_DynamicCast_AsBP_Enemy_Weapon;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4032[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4033[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4034[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4035[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1; // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4036[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4037[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_IsObstacleHitCheck) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsObstacleHitCheck");
static_assert(sizeof(RSBattleCharacter_C_IsObstacleHitCheck) == 0x0001A8, "Wrong size on RSBattleCharacter_C_IsObstacleHitCheck");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, PPrimitive) == 0x000000, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::PPrimitive' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, PAttacker) == 0x000008, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::PAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, EndPosition) == 0x000010, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::EndPosition' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, LIgnore) == 0x00001D, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::LIgnore' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, LEndLocation) == 0x000020, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::LEndLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, LStartLocation) == 0x00002C, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::LStartLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, L_ActorsToIgnore) == 0x000038, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::L_ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, L_ObjTypes) == 0x000048, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::L_ObjTypes' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, L_return) == 0x000058, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000060, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_AsBP_Bullet_Base) == 0x000078, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_AsBP_Bullet_Base' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_GetActorStartPoint_StartLocation) == 0x000084, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_GetActorStartPoint_StartLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_AsBP_Enemy_Weapon) == 0x0000A0, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_AsBP_Enemy_Weapon' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_DoesImplementInterface_ReturnValue) == 0x0000A9, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000AC, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_IsValid_ReturnValue_1) == 0x0000B9, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_GetOwner_ReturnValue) == 0x0000C0, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000C8, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_IsValid_ReturnValue_2) == 0x0000D4, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_AsRSBattle_Character) == 0x0000D8, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_bSuccess_3) == 0x0000E0, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1) == 0x0000E8, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_DynamicCast_bSuccess_4) == 0x0000F8, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_IsEnemy_bEnemy) == 0x0000F9, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000FC, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, K2Node_MakeArray_Array) == 0x000108, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_LineTraceSingle_OutHit) == 0x000118, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_LineTraceSingle_ReturnValue) == 0x0001A0, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheck, CallFunc_Array_Add_ReturnValue) == 0x0001A4, "Member 'RSBattleCharacter_C_IsObstacleHitCheck::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsIgnoreAccelerator
// 0x0005 (0x0005 - 0x0000)
struct RSBattleCharacter_C_IsIgnoreAccelerator final
{
public:
	EHCSkillExtraType                             Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsIgnoreAccelerator) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsIgnoreAccelerator");
static_assert(sizeof(RSBattleCharacter_C_IsIgnoreAccelerator) == 0x000005, "Wrong size on RSBattleCharacter_C_IsIgnoreAccelerator");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreAccelerator, Type) == 0x000000, "Member 'RSBattleCharacter_C_IsIgnoreAccelerator::Type' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreAccelerator, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsIgnoreAccelerator::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreAccelerator, L_return) == 0x000002, "Member 'RSBattleCharacter_C_IsIgnoreAccelerator::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreAccelerator, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_IsIgnoreAccelerator::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsIgnoreAccelerator, CallFunc_GetAccelerating_Accelerating) == 0x000004, "Member 'RSBattleCharacter_C_IsIgnoreAccelerator::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsObstacleHitCheckToActor
// 0x00C8 (0x00C8 - 0x0000)
struct RSBattleCharacter_C_IsObstacleHitCheckToActor final
{
public:
	class AActor*                                 PTarget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4038[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorStartPoint_StartLocation;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4039[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsObstacleHitCheckToActor) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsObstacleHitCheckToActor");
static_assert(sizeof(RSBattleCharacter_C_IsObstacleHitCheckToActor) == 0x0000C8, "Wrong size on RSBattleCharacter_C_IsObstacleHitCheckToActor");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, PTarget) == 0x000000, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::PTarget' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, CallFunc_GetActorStartPoint_StartLocation) == 0x000018, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::CallFunc_GetActorStartPoint_StartLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, K2Node_MakeArray_Array) == 0x000028, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, CallFunc_LineTraceSingle_OutHit) == 0x000038, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsObstacleHitCheckToActor, CallFunc_LineTraceSingle_ReturnValue) == 0x0000C0, "Member 'RSBattleCharacter_C_IsObstacleHitCheckToActor::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHitCheckIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetHitCheckIgnoredActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetHitCheckIgnoredActor) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetHitCheckIgnoredActor");
static_assert(sizeof(RSBattleCharacter_C_GetHitCheckIgnoredActor) == 0x000008, "Wrong size on RSBattleCharacter_C_GetHitCheckIgnoredActor");
static_assert(offsetof(RSBattleCharacter_C_GetHitCheckIgnoredActor, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetHitCheckIgnoredActor::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BrainCrashUnlock
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BrainCrashUnlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BrainCrashUnlock) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BrainCrashUnlock");
static_assert(sizeof(RSBattleCharacter_C_BrainCrashUnlock) == 0x000002, "Wrong size on RSBattleCharacter_C_BrainCrashUnlock");
static_assert(offsetof(RSBattleCharacter_C_BrainCrashUnlock, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_BrainCrashUnlock::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BrainCrashUnlock, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_BrainCrashUnlock::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakNumber
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetWeakNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetWeakNumber) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetWeakNumber");
static_assert(sizeof(RSBattleCharacter_C_GetWeakNumber) == 0x000004, "Wrong size on RSBattleCharacter_C_GetWeakNumber");
static_assert(offsetof(RSBattleCharacter_C_GetWeakNumber, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetWeakNumber::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetEmphasisCrashGauge
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetEmphasisCrashGauge final
{
public:
	bool                                          bEmphasisCrashGauge;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetEmphasisCrashGauge) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetEmphasisCrashGauge");
static_assert(sizeof(RSBattleCharacter_C_SetEmphasisCrashGauge) == 0x000002, "Wrong size on RSBattleCharacter_C_SetEmphasisCrashGauge");
static_assert(offsetof(RSBattleCharacter_C_SetEmphasisCrashGauge, bEmphasisCrashGauge) == 0x000000, "Member 'RSBattleCharacter_C_SetEmphasisCrashGauge::bEmphasisCrashGauge' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetEmphasisCrashGauge, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetEmphasisCrashGauge::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsStartDamageAnimAdditional
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_IsStartDamageAnimAdditional final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x01C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x01C5(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsStartDamageAnimAdditional) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsStartDamageAnimAdditional");
static_assert(sizeof(RSBattleCharacter_C_IsStartDamageAnimAdditional) == 0x0001C8, "Wrong size on RSBattleCharacter_C_IsStartDamageAnimAdditional");
static_assert(offsetof(RSBattleCharacter_C_IsStartDamageAnimAdditional, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_IsStartDamageAnimAdditional::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsStartDamageAnimAdditional, Damage) == 0x0001C0, "Member 'RSBattleCharacter_C_IsStartDamageAnimAdditional::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsStartDamageAnimAdditional, IsDown) == 0x0001C4, "Member 'RSBattleCharacter_C_IsStartDamageAnimAdditional::IsDown' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsStartDamageAnimAdditional, ReturnValue) == 0x0001C5, "Member 'RSBattleCharacter_C_IsStartDamageAnimAdditional::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsStartDamageAnimAdditional, CallFunc_IsDead_ReturnValue) == 0x0001C6, "Member 'RSBattleCharacter_C_IsStartDamageAnimAdditional::CallFunc_IsDead_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCameraLookAtPos
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetCameraLookAtPos final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCameraLookAtPos) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCameraLookAtPos");
static_assert(sizeof(RSBattleCharacter_C_GetCameraLookAtPos) == 0x000018, "Wrong size on RSBattleCharacter_C_GetCameraLookAtPos");
static_assert(offsetof(RSBattleCharacter_C_GetCameraLookAtPos, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetCameraLookAtPos::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCameraLookAtPos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetCameraLookAtPos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraViewTarget
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetPlayerCameraViewTarget final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_403A[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPlayerCameraViewTarget) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetPlayerCameraViewTarget");
static_assert(sizeof(RSBattleCharacter_C_SetPlayerCameraViewTarget) == 0x000010, "Wrong size on RSBattleCharacter_C_SetPlayerCameraViewTarget");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraViewTarget, BlendTime) == 0x000000, "Member 'RSBattleCharacter_C_SetPlayerCameraViewTarget::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraViewTarget, BlendFunc) == 0x000004, "Member 'RSBattleCharacter_C_SetPlayerCameraViewTarget::BlendFunc' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraViewTarget, BlendExp) == 0x000008, "Member 'RSBattleCharacter_C_SetPlayerCameraViewTarget::BlendExp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraViewTarget, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetPlayerCameraViewTarget::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraRotation
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetPlayerCameraRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPlayerCameraRotation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetPlayerCameraRotation");
static_assert(sizeof(RSBattleCharacter_C_SetPlayerCameraRotation) == 0x000010, "Wrong size on RSBattleCharacter_C_SetPlayerCameraRotation");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraRotation, Rot) == 0x000000, "Member 'RSBattleCharacter_C_SetPlayerCameraRotation::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraRotation, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetPlayerCameraRotation::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_SetPlayerCameraMode final
{
public:
	EPlayerCameraMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPlayerCameraMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_SetPlayerCameraMode");
static_assert(sizeof(RSBattleCharacter_C_SetPlayerCameraMode) == 0x000002, "Wrong size on RSBattleCharacter_C_SetPlayerCameraMode");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraMode, Mode) == 0x000000, "Member 'RSBattleCharacter_C_SetPlayerCameraMode::Mode' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraMode, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_SetPlayerCameraMode::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetPlayerCameraLocation final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPlayerCameraLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetPlayerCameraLocation");
static_assert(sizeof(RSBattleCharacter_C_SetPlayerCameraLocation) == 0x000010, "Wrong size on RSBattleCharacter_C_SetPlayerCameraLocation");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraLocation, Pos) == 0x000000, "Member 'RSBattleCharacter_C_SetPlayerCameraLocation::Pos' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraLocation, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetPlayerCameraLocation::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_SetPlayerCameraFieldOfView final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPlayerCameraFieldOfView) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetPlayerCameraFieldOfView");
static_assert(sizeof(RSBattleCharacter_C_SetPlayerCameraFieldOfView) == 0x000008, "Wrong size on RSBattleCharacter_C_SetPlayerCameraFieldOfView");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraFieldOfView, FOV) == 0x000000, "Member 'RSBattleCharacter_C_SetPlayerCameraFieldOfView::FOV' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraFieldOfView, ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_SetPlayerCameraFieldOfView::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraDirection
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_SetPlayerCameraDirection final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPlayerCameraDirection) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetPlayerCameraDirection");
static_assert(sizeof(RSBattleCharacter_C_SetPlayerCameraDirection) == 0x000010, "Wrong size on RSBattleCharacter_C_SetPlayerCameraDirection");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraDirection, Pos) == 0x000000, "Member 'RSBattleCharacter_C_SetPlayerCameraDirection::Pos' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPlayerCameraDirection, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetPlayerCameraDirection::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraRotation
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetPlayerCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetPlayerCameraRotation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetPlayerCameraRotation");
static_assert(sizeof(RSBattleCharacter_C_GetPlayerCameraRotation) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetPlayerCameraRotation");
static_assert(offsetof(RSBattleCharacter_C_GetPlayerCameraRotation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPlayerCameraRotation::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_GetPlayerCameraMode final
{
public:
	EPlayerCameraMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPlayerCameraMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_GetPlayerCameraMode");
static_assert(sizeof(RSBattleCharacter_C_GetPlayerCameraMode) == 0x000001, "Wrong size on RSBattleCharacter_C_GetPlayerCameraMode");
static_assert(offsetof(RSBattleCharacter_C_GetPlayerCameraMode, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPlayerCameraMode::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraLocation
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetPlayerCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPlayerCameraLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetPlayerCameraLocation");
static_assert(sizeof(RSBattleCharacter_C_GetPlayerCameraLocation) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetPlayerCameraLocation");
static_assert(offsetof(RSBattleCharacter_C_GetPlayerCameraLocation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPlayerCameraLocation::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetPlayerCameraFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPlayerCameraFieldOfView) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetPlayerCameraFieldOfView");
static_assert(sizeof(RSBattleCharacter_C_GetPlayerCameraFieldOfView) == 0x000004, "Wrong size on RSBattleCharacter_C_GetPlayerCameraFieldOfView");
static_assert(offsetof(RSBattleCharacter_C_GetPlayerCameraFieldOfView, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPlayerCameraFieldOfView::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraDirection
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetPlayerCameraDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPlayerCameraDirection) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetPlayerCameraDirection");
static_assert(sizeof(RSBattleCharacter_C_GetPlayerCameraDirection) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetPlayerCameraDirection");
static_assert(offsetof(RSBattleCharacter_C_GetPlayerCameraDirection, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPlayerCameraDirection::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetRemoteActorRotation
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetRemoteActorRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetRemoteActorRotation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetRemoteActorRotation");
static_assert(sizeof(RSBattleCharacter_C_GetRemoteActorRotation) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetRemoteActorRotation");
static_assert(offsetof(RSBattleCharacter_C_GetRemoteActorRotation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetRemoteActorRotation::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetRemoteActorLocation
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetRemoteActorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetRemoteActorLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetRemoteActorLocation");
static_assert(sizeof(RSBattleCharacter_C_GetRemoteActorLocation) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetRemoteActorLocation");
static_assert(offsetof(RSBattleCharacter_C_GetRemoteActorLocation, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetRemoteActorLocation::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetFlyingInterface
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_SetFlyingInterface final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetFlyingInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetFlyingInterface");
static_assert(sizeof(RSBattleCharacter_C_SetFlyingInterface) == 0x00000C, "Wrong size on RSBattleCharacter_C_SetFlyingInterface");
static_assert(offsetof(RSBattleCharacter_C_SetFlyingInterface, ClaimantName) == 0x000000, "Member 'RSBattleCharacter_C_SetFlyingInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetFlyingInterface, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_SetFlyingInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ClearFlyingInterface
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_ClearFlyingInterface final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ClearFlyingInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_ClearFlyingInterface");
static_assert(sizeof(RSBattleCharacter_C_ClearFlyingInterface) == 0x00000C, "Wrong size on RSBattleCharacter_C_ClearFlyingInterface");
static_assert(offsetof(RSBattleCharacter_C_ClearFlyingInterface, ClaimantName) == 0x000000, "Member 'RSBattleCharacter_C_ClearFlyingInterface::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_ClearFlyingInterface, ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_ClearFlyingInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.ClearFlyingForceInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_ClearFlyingForceInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_ClearFlyingForceInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_ClearFlyingForceInterface");
static_assert(sizeof(RSBattleCharacter_C_ClearFlyingForceInterface) == 0x000001, "Wrong size on RSBattleCharacter_C_ClearFlyingForceInterface");
static_assert(offsetof(RSBattleCharacter_C_ClearFlyingForceInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_ClearFlyingForceInterface::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckExecuteAnimNotifyCharacterKind
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind final
{
public:
	ECharaExecuteNotifyKind                       Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExecute;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckExecuteNotifyKind_isExecute;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind");
static_assert(sizeof(RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind) == 0x000003, "Wrong size on RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind, Kind) == 0x000000, "Member 'RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind::Kind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind, bExecute) == 0x000001, "Member 'RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind::bExecute' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind, CallFunc_CheckExecuteNotifyKind_isExecute) == 0x000002, "Member 'RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind::CallFunc_CheckExecuteNotifyKind_isExecute' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsInvincibleCrashVisionDamage
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_IsInvincibleCrashVisionDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsInvincibleCrashVisionDamage) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsInvincibleCrashVisionDamage");
static_assert(sizeof(RSBattleCharacter_C_IsInvincibleCrashVisionDamage) == 0x00000C, "Wrong size on RSBattleCharacter_C_IsInvincibleCrashVisionDamage");
static_assert(offsetof(RSBattleCharacter_C_IsInvincibleCrashVisionDamage, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsInvincibleCrashVisionDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsInvincibleCrashVisionDamage, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_IsInvincibleCrashVisionDamage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsInvincibleCrashVisionDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsInvincibleCrashVisionDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableCrashVision
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_IsDisableCrashVision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDisableCrashVision) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsDisableCrashVision");
static_assert(sizeof(RSBattleCharacter_C_IsDisableCrashVision) == 0x00000C, "Wrong size on RSBattleCharacter_C_IsDisableCrashVision");
static_assert(offsetof(RSBattleCharacter_C_IsDisableCrashVision, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDisableCrashVision::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsDisableCrashVision, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_IsDisableCrashVision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsDisableCrashVision, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsDisableCrashVision::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetInvincibleCrashVisionDamage
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_SetInvincibleCrashVisionDamage final
{
public:
	bool                                          bInvincible;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403E[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetInvincibleCrashVisionDamage");
static_assert(sizeof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage) == 0x000014, "Wrong size on RSBattleCharacter_C_SetInvincibleCrashVisionDamage");
static_assert(offsetof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage, bInvincible) == 0x000000, "Member 'RSBattleCharacter_C_SetInvincibleCrashVisionDamage::bInvincible' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage, ClaimantName) == 0x000004, "Member 'RSBattleCharacter_C_SetInvincibleCrashVisionDamage::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetInvincibleCrashVisionDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000D, "Member 'RSBattleCharacter_C_SetInvincibleCrashVisionDamage::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetInvincibleCrashVisionDamage, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetInvincibleCrashVisionDamage::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetDisableCrashVision
// 0x0014 (0x0014 - 0x0000)
struct RSBattleCharacter_C_SetDisableCrashVision final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4040[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_SetDisableCrashVision) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetDisableCrashVision");
static_assert(sizeof(RSBattleCharacter_C_SetDisableCrashVision) == 0x000014, "Wrong size on RSBattleCharacter_C_SetDisableCrashVision");
static_assert(offsetof(RSBattleCharacter_C_SetDisableCrashVision, bDisable) == 0x000000, "Member 'RSBattleCharacter_C_SetDisableCrashVision::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableCrashVision, ClaimantName) == 0x000004, "Member 'RSBattleCharacter_C_SetDisableCrashVision::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableCrashVision, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_SetDisableCrashVision::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableCrashVision, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000D, "Member 'RSBattleCharacter_C_SetDisableCrashVision::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetDisableCrashVision, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_SetDisableCrashVision::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.SetPhotoModeDither
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_SetPhotoModeDither final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_SetPhotoModeDither) == 0x000004, "Wrong alignment on RSBattleCharacter_C_SetPhotoModeDither");
static_assert(sizeof(RSBattleCharacter_C_SetPhotoModeDither) == 0x000008, "Wrong size on RSBattleCharacter_C_SetPhotoModeDither");
static_assert(offsetof(RSBattleCharacter_C_SetPhotoModeDither, Value) == 0x000000, "Member 'RSBattleCharacter_C_SetPhotoModeDither::Value' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_SetPhotoModeDither, ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_SetPhotoModeDither::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.EndPhotoMode
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_EndPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateMaterialVisibility_ChangeVisibility; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateMaterialVisibility_NewVisibility;   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_EndPhotoMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_EndPhotoMode");
static_assert(sizeof(RSBattleCharacter_C_EndPhotoMode) == 0x000004, "Wrong size on RSBattleCharacter_C_EndPhotoMode");
static_assert(offsetof(RSBattleCharacter_C_EndPhotoMode, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_EndPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EndPhotoMode, CallFunc_UpdateMaterialVisibility_ChangeVisibility) == 0x000001, "Member 'RSBattleCharacter_C_EndPhotoMode::CallFunc_UpdateMaterialVisibility_ChangeVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EndPhotoMode, CallFunc_UpdateMaterialVisibility_NewVisibility) == 0x000002, "Member 'RSBattleCharacter_C_EndPhotoMode::CallFunc_UpdateMaterialVisibility_NewVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_EndPhotoMode, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_EndPhotoMode::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BeginPhotoMode
// 0x0034 (0x0034 - 0x0000)
struct RSBattleCharacter_C_BeginPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4041[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNotApplyPhotoModeMeshProfile_bNotApply; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4042[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateMaterialVisibility_ChangeVisibility; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateMaterialVisibility_NewVisibility;   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4043[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetForcedLOD_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCameraDither_Dummy;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGenerateOverlapEvents_ReturnValue;     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4044[0x1];                                     // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCollisionProfileName_ReturnValue;      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_BeginPhotoMode) == 0x000004, "Wrong alignment on RSBattleCharacter_C_BeginPhotoMode");
static_assert(sizeof(RSBattleCharacter_C_BeginPhotoMode) == 0x000034, "Wrong size on RSBattleCharacter_C_BeginPhotoMode");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_BeginPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_BreakVector_X) == 0x00000C, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_BreakVector_Y) == 0x000010, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_BreakVector_Z) == 0x000014, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_IsNotApplyPhotoModeMeshProfile_bNotApply) == 0x000018, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_IsNotApplyPhotoModeMeshProfile_bNotApply' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_UpdateMaterialVisibility_ChangeVisibility) == 0x000020, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_UpdateMaterialVisibility_ChangeVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_UpdateMaterialVisibility_NewVisibility) == 0x000021, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_UpdateMaterialVisibility_NewVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_GetForcedLOD_ReturnValue) == 0x000024, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_GetForcedLOD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_SetCameraDither_Dummy) == 0x000029, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_SetCameraDither_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_GetGenerateOverlapEvents_ReturnValue) == 0x00002A, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_GetGenerateOverlapEvents_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BeginPhotoMode, CallFunc_GetCollisionProfileName_ReturnValue) == 0x00002C, "Member 'RSBattleCharacter_C_BeginPhotoMode::CallFunc_GetCollisionProfileName_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPhotoModeSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetPhotoModeSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPhotoModeSkeletalMesh) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetPhotoModeSkeletalMesh");
static_assert(sizeof(RSBattleCharacter_C_GetPhotoModeSkeletalMesh) == 0x000008, "Wrong size on RSBattleCharacter_C_GetPhotoModeSkeletalMesh");
static_assert(offsetof(RSBattleCharacter_C_GetPhotoModeSkeletalMesh, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPhotoModeSkeletalMesh::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPhotoModeDitherDataName
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetPhotoModeDitherDataName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPhotoModeDitherDataName) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetPhotoModeDitherDataName");
static_assert(sizeof(RSBattleCharacter_C_GetPhotoModeDitherDataName) == 0x000008, "Wrong size on RSBattleCharacter_C_GetPhotoModeDitherDataName");
static_assert(offsetof(RSBattleCharacter_C_GetPhotoModeDitherDataName, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPhotoModeDitherDataName::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsPhotoModeManualOverlap
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsPhotoModeManualOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsPhotoModeManualOverlap) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsPhotoModeManualOverlap");
static_assert(sizeof(RSBattleCharacter_C_IsPhotoModeManualOverlap) == 0x000001, "Wrong size on RSBattleCharacter_C_IsPhotoModeManualOverlap");
static_assert(offsetof(RSBattleCharacter_C_IsPhotoModeManualOverlap, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsPhotoModeManualOverlap::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetPhotoModeManualOverlapCapsule
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule");
static_assert(sizeof(RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule) == 0x000008, "Wrong size on RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule");
static_assert(offsetof(RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.PhotoModeTick
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_PhotoModeTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_PhotoModeTick) == 0x000001, "Wrong alignment on RSBattleCharacter_C_PhotoModeTick");
static_assert(sizeof(RSBattleCharacter_C_PhotoModeTick) == 0x000001, "Wrong size on RSBattleCharacter_C_PhotoModeTick");
static_assert(offsetof(RSBattleCharacter_C_PhotoModeTick, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_PhotoModeTick::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBattling
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsBattling final
{
public:
	bool                                          bBatting;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBattling) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBattling");
static_assert(sizeof(RSBattleCharacter_C_IsBattling) == 0x000001, "Wrong size on RSBattleCharacter_C_IsBattling");
static_assert(offsetof(RSBattleCharacter_C_IsBattling, bBatting) == 0x000000, "Member 'RSBattleCharacter_C_IsBattling::bBatting' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCurrentAttackAttribute
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_IsCurrentAttackAttribute final
{
public:
	EAttackAttribute                              Attribute;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4045[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BitFlagCheck_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCurrentAttackAttribute) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsCurrentAttackAttribute");
static_assert(sizeof(RSBattleCharacter_C_IsCurrentAttackAttribute) == 0x00000C, "Wrong size on RSBattleCharacter_C_IsCurrentAttackAttribute");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttribute, Attribute) == 0x000000, "Member 'RSBattleCharacter_C_IsCurrentAttackAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttribute, bResult) == 0x000001, "Member 'RSBattleCharacter_C_IsCurrentAttackAttribute::bResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttribute, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_IsCurrentAttackAttribute::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttribute, CallFunc_BitFlagCheck_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsCurrentAttackAttribute::CallFunc_BitFlagCheck_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetRootLocation
// 0x001C (0x001C - 0x0000)
struct RSBattleCharacter_C_GetRootLocation final
{
public:
	struct FVector                                RootLocation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetRootLocation) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetRootLocation");
static_assert(sizeof(RSBattleCharacter_C_GetRootLocation) == 0x00001C, "Wrong size on RSBattleCharacter_C_GetRootLocation");
static_assert(offsetof(RSBattleCharacter_C_GetRootLocation, RootLocation) == 0x000000, "Member 'RSBattleCharacter_C_GetRootLocation::RootLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetRootLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetRootLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetRootLocation, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_GetRootLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsArmor
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_IsArmor final
{
public:
	class UPrimitiveComponent*                    Prim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsArmor) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsArmor");
static_assert(sizeof(RSBattleCharacter_C_IsArmor) == 0x000010, "Wrong size on RSBattleCharacter_C_IsArmor");
static_assert(offsetof(RSBattleCharacter_C_IsArmor, Prim) == 0x000000, "Member 'RSBattleCharacter_C_IsArmor::Prim' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsArmor, Return) == 0x000008, "Member 'RSBattleCharacter_C_IsArmor::Return' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetGroundLocation
// 0x0130 (0x0130 - 0x0000)
struct RSBattleCharacter_C_GetGroundLocation final
{
public:
	struct FVector                                GroundLocation;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RetValue;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGroundInfo_bFind;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4046[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetGroundInfo_hitResult;                  // 0x001C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4047[0x2];                                     // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetGroundLocation) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetGroundLocation");
static_assert(sizeof(RSBattleCharacter_C_GetGroundLocation) == 0x000130, "Wrong size on RSBattleCharacter_C_GetGroundLocation");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, GroundLocation) == 0x000000, "Member 'RSBattleCharacter_C_GetGroundLocation::GroundLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, RetValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetGroundLocation::RetValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_GetGroundInfo_bFind) == 0x000018, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_GetGroundInfo_bFind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_GetGroundInfo_hitResult) == 0x00001C, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_GetGroundInfo_hitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A4, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000A5, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_Time) == 0x0000A8, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_Distance) == 0x0000AC, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_Location) == 0x0000B0, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x0000BC, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_Normal) == 0x0000C8, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D4, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_PhysMat) == 0x0000E0, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_HitActor) == 0x0000E8, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_HitComponent) == 0x0000F0, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_HitBoneName) == 0x0000F8, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_HitItem) == 0x000100, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_FaceIndex) == 0x000104, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_TraceStart) == 0x000108, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_BreakHitResult_TraceEnd) == 0x000114, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000120, "Member 'RSBattleCharacter_C_GetGroundLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsInvalidDamage
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_IsInvalidDamage final
{
public:
	bool                                          InvalidDamage;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4048[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsInvalidDamage) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsInvalidDamage");
static_assert(sizeof(RSBattleCharacter_C_IsInvalidDamage) == 0x00000C, "Wrong size on RSBattleCharacter_C_IsInvalidDamage");
static_assert(offsetof(RSBattleCharacter_C_IsInvalidDamage, InvalidDamage) == 0x000000, "Member 'RSBattleCharacter_C_IsInvalidDamage::InvalidDamage' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsInvalidDamage, CallFunc_Map_Length_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_IsInvalidDamage::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsInvalidDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_IsInvalidDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharactersParameterComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetCharactersParameterComponent final
{
public:
	class UCharactersParameterComponent*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCharactersParameterComponent) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharactersParameterComponent");
static_assert(sizeof(RSBattleCharacter_C_GetCharactersParameterComponent) == 0x000008, "Wrong size on RSBattleCharacter_C_GetCharactersParameterComponent");
static_assert(offsetof(RSBattleCharacter_C_GetCharactersParameterComponent, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetCharactersParameterComponent::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxSpeedScale
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_GetMaxSpeedScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LScale;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4049[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetMaxSpeedScale) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetMaxSpeedScale");
static_assert(sizeof(RSBattleCharacter_C_GetMaxSpeedScale) == 0x000010, "Wrong size on RSBattleCharacter_C_GetMaxSpeedScale");
static_assert(offsetof(RSBattleCharacter_C_GetMaxSpeedScale, Scale) == 0x000000, "Member 'RSBattleCharacter_C_GetMaxSpeedScale::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMaxSpeedScale, LScale) == 0x000004, "Member 'RSBattleCharacter_C_GetMaxSpeedScale::LScale' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMaxSpeedScale, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_GetMaxSpeedScale::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMaxSpeedScale, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetMaxSpeedScale::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetDamageReactionDir
// 0x0320 (0x0320 - 0x0000)
struct RSBattleCharacter_C_GetDamageReactionDir final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FVector                                ReactionDir;                                       // 0x01C0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_ForwardDir;                                      // 0x01CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_AttackerLocation;                                // 0x01D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_result;                                          // 0x01E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_404A[0x6];                                     // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyWeaponInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Weapon_Interface;   // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLocationForHitDirection_IsEnemyWeapon; // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_404B[0x2];                                     // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationForHitDirection_Location;      // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0265(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_404C[0x2];                                     // 0x0266(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404D[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttackOwner_Owner;                     // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_404E[0x3];                                     // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_404F[0x7];                                     // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttackOwner_Owner_1;                   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4050[0x3];                                     // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_2;      // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4051[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x02FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue_1;               // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetDamageReactionDir) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetDamageReactionDir");
static_assert(sizeof(RSBattleCharacter_C_GetDamageReactionDir) == 0x000320, "Wrong size on RSBattleCharacter_C_GetDamageReactionDir");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_GetDamageReactionDir::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, ReactionDir) == 0x0001C0, "Member 'RSBattleCharacter_C_GetDamageReactionDir::ReactionDir' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, L_ForwardDir) == 0x0001CC, "Member 'RSBattleCharacter_C_GetDamageReactionDir::L_ForwardDir' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, L_AttackerLocation) == 0x0001D8, "Member 'RSBattleCharacter_C_GetDamageReactionDir::L_AttackerLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, L_result) == 0x0001E4, "Member 'RSBattleCharacter_C_GetDamageReactionDir::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_BreakVector_X) == 0x0001F0, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_BreakVector_Y) == 0x0001F4, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_BreakVector_Z) == 0x0001F8, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_MakeVector_ReturnValue) == 0x0001FC, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_MakeRotator_ReturnValue) == 0x000208, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_Normal_ReturnValue) == 0x000214, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000220, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_VSizeSquared_ReturnValue) == 0x00022C, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, K2Node_SwitchEnum_CmpSuccess) == 0x000230, "Member 'RSBattleCharacter_C_GetDamageReactionDir::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000231, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, K2Node_DynamicCast_AsBPI_Enemy_Weapon_Interface) == 0x000238, "Member 'RSBattleCharacter_C_GetDamageReactionDir::K2Node_DynamicCast_AsBPI_Enemy_Weapon_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, K2Node_DynamicCast_bSuccess) == 0x000248, "Member 'RSBattleCharacter_C_GetDamageReactionDir::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetLocationForHitDirection_IsEnemyWeapon) == 0x000249, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetLocationForHitDirection_IsEnemyWeapon' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetLocationForHitDirection_Location) == 0x00024C, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetLocationForHitDirection_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000258, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_IsValid_ReturnValue) == 0x000264, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_IsValid_ReturnValue_1) == 0x000265, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetActorForwardVector_ReturnValue) == 0x000268, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetAttackOwner_Owner) == 0x000278, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetAttackOwner_Owner' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_IsValid_ReturnValue_2) == 0x000280, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000284, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, Temp_bool_Variable) == 0x000290, "Member 'RSBattleCharacter_C_GetDamageReactionDir::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetAttackOwner_Owner_1) == 0x000298, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetAttackOwner_Owner_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, K2Node_Select_Default) == 0x0002A0, "Member 'RSBattleCharacter_C_GetDamageReactionDir::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_IsValid_ReturnValue_3) == 0x0002AC, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0002B0, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_GetActorForwardVector_ReturnValue_2) == 0x0002BC, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_GetActorForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_NegateVector_ReturnValue) == 0x0002C8, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x0002D4, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0002D8, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002E4, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_BreakVector_X_1) == 0x0002F0, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_BreakVector_Y_1) == 0x0002F4, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_BreakVector_Z_1) == 0x0002F8, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_MakeVector_ReturnValue_1) == 0x0002FC, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_Normal_ReturnValue_1) == 0x000308, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_VSizeSquared_ReturnValue_1) == 0x000314, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_VSizeSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetDamageReactionDir, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000318, "Member 'RSBattleCharacter_C_GetDamageReactionDir::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetGroundLocationSimple
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattleCharacter_C_GetGroundLocationSimple final
{
public:
	bool                                          bIncludeObject;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4052[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnGround_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4053[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetGroundLocation_GroundLocation;         // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4054[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetGroundLocationSimple) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetGroundLocationSimple");
static_assert(sizeof(RSBattleCharacter_C_GetGroundLocationSimple) == 0x0000A8, "Wrong size on RSBattleCharacter_C_GetGroundLocationSimple");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, bIncludeObject) == 0x000000, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::bIncludeObject' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, L_Location) == 0x000010, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_IsOnGround_ReturnValue) == 0x00001C, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_IsOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_GetGroundLocation_GroundLocation) == 0x000020, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_GetGroundLocation_GroundLocation' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_bBlockingHit) == 0x00002C, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_bInitialOverlap) == 0x00002D, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_Time) == 0x000030, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_Distance) == 0x000034, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_Location) == 0x000038, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_ImpactPoint) == 0x000044, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_Normal) == 0x000050, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_ImpactNormal) == 0x00005C, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_PhysMat) == 0x000068, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_HitActor) == 0x000070, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_HitComponent) == 0x000078, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_HitBoneName) == 0x000080, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_HitItem) == 0x000088, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_FaceIndex) == 0x00008C, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_TraceStart) == 0x000090, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundLocationSimple, CallFunc_BreakHitResult_TraceEnd) == 0x00009C, "Member 'RSBattleCharacter_C_GetGroundLocationSimple::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBrainCrashSuccess
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsBrainCrashSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBrainCrashSuccess) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBrainCrashSuccess");
static_assert(sizeof(RSBattleCharacter_C_IsBrainCrashSuccess) == 0x000001, "Wrong size on RSBattleCharacter_C_IsBrainCrashSuccess");
static_assert(offsetof(RSBattleCharacter_C_IsBrainCrashSuccess, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBrainCrashSuccess::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBrainCrashAccess
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsBrainCrashAccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBrainCrashAccess) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBrainCrashAccess");
static_assert(sizeof(RSBattleCharacter_C_IsBrainCrashAccess) == 0x000001, "Wrong size on RSBattleCharacter_C_IsBrainCrashAccess");
static_assert(offsetof(RSBattleCharacter_C_IsBrainCrashAccess, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBrainCrashAccess::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetBodyMeshes
// 0x0020 (0x0020 - 0x0000)
struct RSBattleCharacter_C_GetBodyMeshes final
{
public:
	TArray<class USkeletalMeshComponent*>         Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetBodyMeshes) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetBodyMeshes");
static_assert(sizeof(RSBattleCharacter_C_GetBodyMeshes) == 0x000020, "Wrong size on RSBattleCharacter_C_GetBodyMeshes");
static_assert(offsetof(RSBattleCharacter_C_GetBodyMeshes, Meshes) == 0x000000, "Member 'RSBattleCharacter_C_GetBodyMeshes::Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBodyMeshes, K2Node_MakeArray_Array) == 0x000010, "Member 'RSBattleCharacter_C_GetBodyMeshes::K2Node_MakeArray_Array' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterMovementLocationSimple
// 0x00C8 (0x00C8 - 0x0000)
struct RSBattleCharacter_C_GetCharacterMovementLocationSimple final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnGround_ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4055[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4056[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4057[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCharacterMovementLocationSimple) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharacterMovementLocationSimple");
static_assert(sizeof(RSBattleCharacter_C_GetCharacterMovementLocationSimple) == 0x0000C8, "Wrong size on RSBattleCharacter_C_GetCharacterMovementLocationSimple");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, L_Location) == 0x00000C, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakVector_X) == 0x000024, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakVector_Y) == 0x000028, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakVector_Z) == 0x00002C, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000030, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_IsOnGround_ReturnValue) == 0x000034, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_IsOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_bBlockingHit) == 0x000048, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_bInitialOverlap) == 0x000049, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_Time) == 0x00004C, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_Distance) == 0x000050, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_Location) == 0x000054, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_ImpactPoint) == 0x000060, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_Normal) == 0x00006C, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_ImpactNormal) == 0x000078, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_PhysMat) == 0x000088, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_HitActor) == 0x000090, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_HitComponent) == 0x000098, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_HitBoneName) == 0x0000A0, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_HitItem) == 0x0000A8, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_FaceIndex) == 0x0000AC, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_TraceStart) == 0x0000B0, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementLocationSimple, CallFunc_BreakHitResult_TraceEnd) == 0x0000BC, "Member 'RSBattleCharacter_C_GetCharacterMovementLocationSimple::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetGroundInfo
// 0x0170 (0x0170 - 0x0000)
struct RSBattleCharacter_C_GetGroundInfo final
{
public:
	bool                                          bFind;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4058[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                RetValue;                                          // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      HitObj;                                            // 0x0098(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00A8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetGroundInfo) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetGroundInfo");
static_assert(sizeof(RSBattleCharacter_C_GetGroundInfo) == 0x000170, "Wrong size on RSBattleCharacter_C_GetGroundInfo");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, bFind) == 0x000000, "Member 'RSBattleCharacter_C_GetGroundInfo::bFind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, HitResult) == 0x000004, "Member 'RSBattleCharacter_C_GetGroundInfo::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, RetValue) == 0x00008C, "Member 'RSBattleCharacter_C_GetGroundInfo::RetValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, HitObj) == 0x000098, "Member 'RSBattleCharacter_C_GetGroundInfo::HitObj' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, Temp_object_Variable) == 0x0000A8, "Member 'RSBattleCharacter_C_GetGroundInfo::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, K2Node_MakeArray_Array) == 0x0000B8, "Member 'RSBattleCharacter_C_GetGroundInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C8, "Member 'RSBattleCharacter_C_GetGroundInfo::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D4, "Member 'RSBattleCharacter_C_GetGroundInfo::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000E0, "Member 'RSBattleCharacter_C_GetGroundInfo::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetGroundInfo, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000168, "Member 'RSBattleCharacter_C_GetGroundInfo::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterMovementGroundInfoSimple
// 0x008C (0x008C - 0x0000)
struct RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple final
{
public:
	struct FHitResult                             Result;                                            // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple");
static_assert(sizeof(RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple) == 0x00008C, "Wrong size on RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple, Result) == 0x000000, "Member 'RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple::Result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple, ReturnValue) == 0x000088, "Member 'RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsInBeginPlay
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsInBeginPlay final
{
public:
	bool                                          InBegin;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsInBeginPlay) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsInBeginPlay");
static_assert(sizeof(RSBattleCharacter_C_IsInBeginPlay) == 0x000001, "Wrong size on RSBattleCharacter_C_IsInBeginPlay");
static_assert(offsetof(RSBattleCharacter_C_IsInBeginPlay, InBegin) == 0x000000, "Member 'RSBattleCharacter_C_IsInBeginPlay::InBegin' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetBadStateIconParam
// 0x0058 (0x0058 - 0x0000)
struct RSBattleCharacter_C_GetBadStateIconParam final
{
public:
	EHCBadState                                   BadType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4059[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStateAddParticleData               ParamData;                                         // 0x0008(0x0028)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBadStateAddParticleData               L_empty;                                           // 0x0030(0x0028)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetBadStateIconParam) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetBadStateIconParam");
static_assert(sizeof(RSBattleCharacter_C_GetBadStateIconParam) == 0x000058, "Wrong size on RSBattleCharacter_C_GetBadStateIconParam");
static_assert(offsetof(RSBattleCharacter_C_GetBadStateIconParam, BadType) == 0x000000, "Member 'RSBattleCharacter_C_GetBadStateIconParam::BadType' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBadStateIconParam, ParamData) == 0x000008, "Member 'RSBattleCharacter_C_GetBadStateIconParam::ParamData' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetBadStateIconParam, L_empty) == 0x000030, "Member 'RSBattleCharacter_C_GetBadStateIconParam::L_empty' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetBadStateIconCameraOffset
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetBadStateIconCameraOffset final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetBadStateIconCameraOffset) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetBadStateIconCameraOffset");
static_assert(sizeof(RSBattleCharacter_C_GetBadStateIconCameraOffset) == 0x000004, "Wrong size on RSBattleCharacter_C_GetBadStateIconCameraOffset");
static_assert(offsetof(RSBattleCharacter_C_GetBadStateIconCameraOffset, Value) == 0x000000, "Member 'RSBattleCharacter_C_GetBadStateIconCameraOffset::Value' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsAttackerTargetSelf
// 0x0280 (0x0280 - 0x0000)
struct RSBattleCharacter_C_IsAttackerTargetSelf final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405A[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTarget;                                           // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LAttacker;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetSelf;                                      // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405B[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable;                              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405C[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable_1;                            // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBattleEnemyInterface> K2Node_DynamicCast_AsBattle_Enemy_Interface;       // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405D[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTarget_ReturnValue;             // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405E[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405F[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActorInterface_TargetActor; // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4060[0x6];                                     // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer_bPlayer;                         // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4061[0x6];                                     // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x027A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsAttackerTargetSelf) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsAttackerTargetSelf");
static_assert(sizeof(RSBattleCharacter_C_IsAttackerTargetSelf) == 0x000280, "Wrong size on RSBattleCharacter_C_IsAttackerTargetSelf");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, ReturnValue) == 0x0001C0, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, LTarget) == 0x0001C8, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::LTarget' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, LAttacker) == 0x0001D0, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, IsTargetSelf) == 0x0001D8, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::IsTargetSelf' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, Temp_object_Variable) == 0x0001E0, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsValid_ReturnValue) == 0x0001E8, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsValid_ReturnValue_1) == 0x0001E9, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsValid_ReturnValue_2) == 0x0001EA, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001EB, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, Temp_object_Variable_1) == 0x0001F0, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_AsBattle_Enemy_Interface) == 0x0001F8, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_AsBattle_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_bSuccess) == 0x000208, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_GetCurrentTarget_ReturnValue) == 0x000210, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_GetCurrentTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsValid_ReturnValue_3) == 0x000218, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_AsPlayer_Interface) == 0x000220, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_bSuccess_1) == 0x000230, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_GetCurrentTargetActorInterface_TargetActor) == 0x000238, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_GetCurrentTargetActorInterface_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000240, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_bSuccess_2) == 0x000250, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000251, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000258, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_bSuccess_3) == 0x000268, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsPlayer_bPlayer) == 0x000269, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsPlayer_bPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000270, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, K2Node_DynamicCast_bSuccess_4) == 0x000278, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsValid_ReturnValue_4) == 0x000279, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerTargetSelf, CallFunc_IsValid_ReturnValue_5) == 0x00027A, "Member 'RSBattleCharacter_C_IsAttackerTargetSelf::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCameraDitherTableRowName
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetCameraDitherTableRowName final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCameraDitherTableRowName) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCameraDitherTableRowName");
static_assert(sizeof(RSBattleCharacter_C_GetCameraDitherTableRowName) == 0x000008, "Wrong size on RSBattleCharacter_C_GetCameraDitherTableRowName");
static_assert(offsetof(RSBattleCharacter_C_GetCameraDitherTableRowName, RowName) == 0x000000, "Member 'RSBattleCharacter_C_GetCameraDitherTableRowName::RowName' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharaKind
// 0x000C (0x000C - 0x0000)
struct RSBattleCharacter_C_GetCharaKind final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LCharaKind;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayer_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetCharaKind) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCharaKind");
static_assert(sizeof(RSBattleCharacter_C_GetCharaKind) == 0x00000C, "Wrong size on RSBattleCharacter_C_GetCharaKind");
static_assert(offsetof(RSBattleCharacter_C_GetCharaKind, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetCharaKind::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharaKind, LCharaKind) == 0x000004, "Member 'RSBattleCharacter_C_GetCharaKind::LCharaKind' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharaKind, CallFunc_IsPlayer_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_GetCharaKind::CallFunc_IsPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharaKind, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleCharacter_C_GetCharaKind::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharaKind, CallFunc_IsEnemy_ReturnValue) == 0x00000A, "Member 'RSBattleCharacter_C_GetCharaKind::CallFunc_IsEnemy_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectDispSwitch
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_BadStateEffectDispSwitch final
{
public:
	bool                                          bInDisp;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_BadStateEffectDispSwitch) == 0x000001, "Wrong alignment on RSBattleCharacter_C_BadStateEffectDispSwitch");
static_assert(sizeof(RSBattleCharacter_C_BadStateEffectDispSwitch) == 0x000002, "Wrong size on RSBattleCharacter_C_BadStateEffectDispSwitch");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectDispSwitch, bInDisp) == 0x000000, "Member 'RSBattleCharacter_C_BadStateEffectDispSwitch::bInDisp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_BadStateEffectDispSwitch, bSuccess) == 0x000001, "Member 'RSBattleCharacter_C_BadStateEffectDispSwitch::bSuccess' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadPsychicObjComboOnly
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDeadPsychicObjComboOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDeadPsychicObjComboOnly) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDeadPsychicObjComboOnly");
static_assert(sizeof(RSBattleCharacter_C_IsDeadPsychicObjComboOnly) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDeadPsychicObjComboOnly");
static_assert(offsetof(RSBattleCharacter_C_IsDeadPsychicObjComboOnly, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDeadPsychicObjComboOnly::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadChaseAttackOnly
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDeadChaseAttackOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDeadChaseAttackOnly) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDeadChaseAttackOnly");
static_assert(sizeof(RSBattleCharacter_C_IsDeadChaseAttackOnly) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDeadChaseAttackOnly");
static_assert(offsetof(RSBattleCharacter_C_IsDeadChaseAttackOnly, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDeadChaseAttackOnly::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCrashMaxWithGuts
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_IsCrashMaxWithGuts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDeadBrainCrashOnly_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCrashMaxWithGuts) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsCrashMaxWithGuts");
static_assert(sizeof(RSBattleCharacter_C_IsCrashMaxWithGuts) == 0x000004, "Wrong size on RSBattleCharacter_C_IsCrashMaxWithGuts");
static_assert(offsetof(RSBattleCharacter_C_IsCrashMaxWithGuts, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsCrashMaxWithGuts::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCrashMaxWithGuts, L_result) == 0x000001, "Member 'RSBattleCharacter_C_IsCrashMaxWithGuts::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCrashMaxWithGuts, CallFunc_IsDeadBrainCrashOnly_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_IsCrashMaxWithGuts::CallFunc_IsDeadBrainCrashOnly_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCrashMaxWithGuts, CallFunc_IsEnemy_bEnemy) == 0x000003, "Member 'RSBattleCharacter_C_IsCrashMaxWithGuts::CallFunc_IsEnemy_bEnemy' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadLaunchAttackOnly
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDeadLaunchAttackOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDeadLaunchAttackOnly) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDeadLaunchAttackOnly");
static_assert(sizeof(RSBattleCharacter_C_IsDeadLaunchAttackOnly) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDeadLaunchAttackOnly");
static_assert(offsetof(RSBattleCharacter_C_IsDeadLaunchAttackOnly, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDeadLaunchAttackOnly::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadPsychicObjOnly
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDeadPsychicObjOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDeadPsychicObjOnly) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDeadPsychicObjOnly");
static_assert(sizeof(RSBattleCharacter_C_IsDeadPsychicObjOnly) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDeadPsychicObjOnly");
static_assert(offsetof(RSBattleCharacter_C_IsDeadPsychicObjOnly, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDeadPsychicObjOnly::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadPhysicsAttackOnly
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsDeadPhysicsAttackOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDeadPhysicsAttackOnly) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDeadPhysicsAttackOnly");
static_assert(sizeof(RSBattleCharacter_C_IsDeadPhysicsAttackOnly) == 0x000001, "Wrong size on RSBattleCharacter_C_IsDeadPhysicsAttackOnly");
static_assert(offsetof(RSBattleCharacter_C_IsDeadPhysicsAttackOnly, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDeadPhysicsAttackOnly::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsNoDeadTutorial
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsNoDeadTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsNoDeadTutorial) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsNoDeadTutorial");
static_assert(sizeof(RSBattleCharacter_C_IsNoDeadTutorial) == 0x000001, "Wrong size on RSBattleCharacter_C_IsNoDeadTutorial");
static_assert(offsetof(RSBattleCharacter_C_IsNoDeadTutorial, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsNoDeadTutorial::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableReactionCoefficientInterface
// 0x0028 (0x0028 - 0x0000)
struct RSBattleCharacter_C_IsEnableReactionCoefficientInterface final
{
public:
	float                                         OutReactionSRate;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutReactionLRate;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutDownRate;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutCrashRate;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutAcceptAll;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableReactionCoefficient_bEnable;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4062[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableReactionCoefficient_ReactionSRate; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableReactionCoefficient_ReactionLRate; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableReactionCoefficient_DownRate;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableReactionCoefficient_CrashRate;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableReactionCoefficient_bAcceptAll;   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsEnableReactionCoefficientInterface");
static_assert(sizeof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface) == 0x000028, "Wrong size on RSBattleCharacter_C_IsEnableReactionCoefficientInterface");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, OutReactionSRate) == 0x000000, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::OutReactionSRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, OutReactionLRate) == 0x000004, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::OutReactionLRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, OutDownRate) == 0x000008, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::OutDownRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, OutCrashRate) == 0x00000C, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::OutCrashRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, OutAcceptAll) == 0x000010, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::OutAcceptAll' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, ReturnValue) == 0x000011, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, CallFunc_IsEnableReactionCoefficient_bEnable) == 0x000012, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::CallFunc_IsEnableReactionCoefficient_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, CallFunc_IsEnableReactionCoefficient_ReactionSRate) == 0x000014, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::CallFunc_IsEnableReactionCoefficient_ReactionSRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, CallFunc_IsEnableReactionCoefficient_ReactionLRate) == 0x000018, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::CallFunc_IsEnableReactionCoefficient_ReactionLRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, CallFunc_IsEnableReactionCoefficient_DownRate) == 0x00001C, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::CallFunc_IsEnableReactionCoefficient_DownRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, CallFunc_IsEnableReactionCoefficient_CrashRate) == 0x000020, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::CallFunc_IsEnableReactionCoefficient_CrashRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficientInterface, CallFunc_IsEnableReactionCoefficient_bAcceptAll) == 0x000024, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficientInterface::CallFunc_IsEnableReactionCoefficient_bAcceptAll' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CanSetTick
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_CanSetTick final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CanSetTick) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CanSetTick");
static_assert(sizeof(RSBattleCharacter_C_CanSetTick) == 0x000001, "Wrong size on RSBattleCharacter_C_CanSetTick");
static_assert(offsetof(RSBattleCharacter_C_CanSetTick, Result) == 0x000000, "Member 'RSBattleCharacter_C_CanSetTick::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsAttractSelfInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsAttractSelfInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttractSelf_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsAttractSelfInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsAttractSelfInterface");
static_assert(sizeof(RSBattleCharacter_C_IsAttractSelfInterface) == 0x000002, "Wrong size on RSBattleCharacter_C_IsAttractSelfInterface");
static_assert(offsetof(RSBattleCharacter_C_IsAttractSelfInterface, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsAttractSelfInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsAttractSelfInterface, CallFunc_IsAttractSelf_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsAttractSelfInterface::CallFunc_IsAttractSelf_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetGroupID
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetGroupID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetGroupID) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetGroupID");
static_assert(sizeof(RSBattleCharacter_C_GetGroupID) == 0x000004, "Wrong size on RSBattleCharacter_C_GetGroupID");
static_assert(offsetof(RSBattleCharacter_C_GetGroupID, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_GetGroupID::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetRootMotionMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_GetRootMotionMode final
{
public:
	uint8                                         Mode;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetRootMotionMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_GetRootMotionMode");
static_assert(sizeof(RSBattleCharacter_C_GetRootMotionMode) == 0x000001, "Wrong size on RSBattleCharacter_C_GetRootMotionMode");
static_assert(offsetof(RSBattleCharacter_C_GetRootMotionMode, Mode) == 0x000000, "Member 'RSBattleCharacter_C_GetRootMotionMode::Mode' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakTargetPointInterface
// 0x0024 (0x0024 - 0x0000)
struct RSBattleCharacter_C_GetWeakTargetPointInterface final
{
public:
	struct FVector                                AttackerPos;                                       // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWeakTargetPoint_Point;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetWeakTargetPointInterface) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetWeakTargetPointInterface");
static_assert(sizeof(RSBattleCharacter_C_GetWeakTargetPointInterface) == 0x000024, "Wrong size on RSBattleCharacter_C_GetWeakTargetPointInterface");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetPointInterface, AttackerPos) == 0x000000, "Member 'RSBattleCharacter_C_GetWeakTargetPointInterface::AttackerPos' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetPointInterface, ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetWeakTargetPointInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetPointInterface, CallFunc_GetWeakTargetPoint_Point) == 0x000018, "Member 'RSBattleCharacter_C_GetWeakTargetPointInterface::CallFunc_GetWeakTargetPoint_Point' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsNoDeadEvent
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsNoDeadEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsNoDeadEvent) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsNoDeadEvent");
static_assert(sizeof(RSBattleCharacter_C_IsNoDeadEvent) == 0x000001, "Wrong size on RSBattleCharacter_C_IsNoDeadEvent");
static_assert(offsetof(RSBattleCharacter_C_IsNoDeadEvent, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsNoDeadEvent::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsNoCrashChanceEvent
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsNoCrashChanceEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsNoCrashChanceEvent) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsNoCrashChanceEvent");
static_assert(sizeof(RSBattleCharacter_C_IsNoCrashChanceEvent) == 0x000001, "Wrong size on RSBattleCharacter_C_IsNoCrashChanceEvent");
static_assert(offsetof(RSBattleCharacter_C_IsNoCrashChanceEvent, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsNoCrashChanceEvent::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsRareSpawnEnemy
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsRareSpawnEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsRareSpawnEnemy) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsRareSpawnEnemy");
static_assert(sizeof(RSBattleCharacter_C_IsRareSpawnEnemy) == 0x000001, "Wrong size on RSBattleCharacter_C_IsRareSpawnEnemy");
static_assert(offsetof(RSBattleCharacter_C_IsRareSpawnEnemy, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsRareSpawnEnemy::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CheckRareSpawnHpRateCPP
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_CheckRareSpawnHpRateCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CheckRareSpawnHpRateCPP) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CheckRareSpawnHpRateCPP");
static_assert(sizeof(RSBattleCharacter_C_CheckRareSpawnHpRateCPP) == 0x000001, "Wrong size on RSBattleCharacter_C_CheckRareSpawnHpRateCPP");
static_assert(offsetof(RSBattleCharacter_C_CheckRareSpawnHpRateCPP, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_CheckRareSpawnHpRateCPP::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CanSetTickDistance
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_CanSetTickDistance final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CanSetTickDistance) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CanSetTickDistance");
static_assert(sizeof(RSBattleCharacter_C_CanSetTickDistance) == 0x000001, "Wrong size on RSBattleCharacter_C_CanSetTickDistance");
static_assert(offsetof(RSBattleCharacter_C_CanSetTickDistance, Result) == 0x000000, "Member 'RSBattleCharacter_C_CanSetTickDistance::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsSimulatorStartDirection
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsSimulatorStartDirection final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsSimulatorStartDirection) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsSimulatorStartDirection");
static_assert(sizeof(RSBattleCharacter_C_IsSimulatorStartDirection) == 0x000001, "Wrong size on RSBattleCharacter_C_IsSimulatorStartDirection");
static_assert(offsetof(RSBattleCharacter_C_IsSimulatorStartDirection, Result) == 0x000000, "Member 'RSBattleCharacter_C_IsSimulatorStartDirection::Result' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsNotApplyPhotoModeMeshProfile
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile final
{
public:
	bool                                          bNotApply;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile");
static_assert(sizeof(RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile) == 0x000001, "Wrong size on RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile");
static_assert(offsetof(RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile, bNotApply) == 0x000000, "Member 'RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile::bNotApply' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsControlPlayer
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsControlPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsControlPlayer) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsControlPlayer");
static_assert(sizeof(RSBattleCharacter_C_IsControlPlayer) == 0x000001, "Wrong size on RSBattleCharacter_C_IsControlPlayer");
static_assert(offsetof(RSBattleCharacter_C_IsControlPlayer, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsControlPlayer::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBerserkCharacter
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsBerserkCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBerserkCharacter) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBerserkCharacter");
static_assert(sizeof(RSBattleCharacter_C_IsBerserkCharacter) == 0x000001, "Wrong size on RSBattleCharacter_C_IsBerserkCharacter");
static_assert(offsetof(RSBattleCharacter_C_IsBerserkCharacter, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsBerserkCharacter::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetIsBattleMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_GetIsBattleMode final
{
public:
	bool                                          IsBattleMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_GetIsBattleMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_GetIsBattleMode");
static_assert(sizeof(RSBattleCharacter_C_GetIsBattleMode) == 0x000001, "Wrong size on RSBattleCharacter_C_GetIsBattleMode");
static_assert(offsetof(RSBattleCharacter_C_GetIsBattleMode, IsBattleMode) == 0x000000, "Member 'RSBattleCharacter_C_GetIsBattleMode::IsBattleMode' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsCurrentAttackAttributeAI
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_IsCurrentAttackAttributeAI final
{
public:
	EAttackAttribute                              Attribute;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurrentAttackAttribute_bResult;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsCurrentAttackAttributeAI) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsCurrentAttackAttributeAI");
static_assert(sizeof(RSBattleCharacter_C_IsCurrentAttackAttributeAI) == 0x000003, "Wrong size on RSBattleCharacter_C_IsCurrentAttackAttributeAI");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttributeAI, Attribute) == 0x000000, "Member 'RSBattleCharacter_C_IsCurrentAttackAttributeAI::Attribute' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttributeAI, bResult) == 0x000001, "Member 'RSBattleCharacter_C_IsCurrentAttackAttributeAI::bResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsCurrentAttackAttributeAI, CallFunc_IsCurrentAttackAttribute_bResult) == 0x000002, "Member 'RSBattleCharacter_C_IsCurrentAttackAttributeAI::CallFunc_IsCurrentAttackAttribute_bResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDead
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_IsDead final
{
public:
	bool                                          bDead;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDead) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDead");
static_assert(sizeof(RSBattleCharacter_C_IsDead) == 0x000003, "Wrong size on RSBattleCharacter_C_IsDead");
static_assert(offsetof(RSBattleCharacter_C_IsDead, bDead) == 0x000000, "Member 'RSBattleCharacter_C_IsDead::bDead' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsDead, CallFunc_IsDead_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsDead::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsDead, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_IsDead::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusConfusion
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusConfusion final
{
public:
	bool                                          bBadStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsConfusion_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusConfusion) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusConfusion");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusConfusion) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusConfusion");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusConfusion, bBadStatus) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusConfusion::bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusConfusion, CallFunc_IsConfusion_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusConfusion::CallFunc_IsConfusion_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusOil
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusOil final
{
public:
	bool                                          bBadStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOil_ReturnValue;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusOil) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusOil");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusOil) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusOil");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusOil, bBadStatus) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusOil::bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusOil, CallFunc_IsOil_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusOil::CallFunc_IsOil_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFlooded
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusFlooded final
{
public:
	bool                                          bBadStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlooded_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusFlooded) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusFlooded");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusFlooded) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusFlooded");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFlooded, bBadStatus) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusFlooded::bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFlooded, CallFunc_IsFlooded_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusFlooded::CallFunc_IsFlooded_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusElectric
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusElectric final
{
public:
	bool                                          bBadStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElectric_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusElectric) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusElectric");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusElectric) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusElectric");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusElectric, bBadStatus) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusElectric::bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusElectric, CallFunc_IsElectric_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusElectric::CallFunc_IsElectric_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFrame
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBadStatusFrame final
{
public:
	bool                                          bBadStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlame_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBadStatusFrame) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBadStatusFrame");
static_assert(sizeof(RSBattleCharacter_C_IsBadStatusFrame) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBadStatusFrame");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFrame, bBadStatus) == 0x000000, "Member 'RSBattleCharacter_C_IsBadStatusFrame::bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBadStatusFrame, CallFunc_IsFlame_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBadStatusFrame::CallFunc_IsFlame_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxHp
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetMaxHp final
{
public:
	int32                                         MaxHp;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHp_ReturnValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetMaxHp) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetMaxHp");
static_assert(sizeof(RSBattleCharacter_C_GetMaxHp) == 0x000008, "Wrong size on RSBattleCharacter_C_GetMaxHp");
static_assert(offsetof(RSBattleCharacter_C_GetMaxHp, MaxHp) == 0x000000, "Member 'RSBattleCharacter_C_GetMaxHp::MaxHp' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetMaxHp, CallFunc_GetMaxHp_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetMaxHp::CallFunc_GetMaxHp_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHp
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetHp final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHp_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetHp) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetHp");
static_assert(sizeof(RSBattleCharacter_C_GetHp) == 0x000008, "Wrong size on RSBattleCharacter_C_GetHp");
static_assert(offsetof(RSBattleCharacter_C_GetHp, HP) == 0x000000, "Member 'RSBattleCharacter_C_GetHp::HP' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHp, CallFunc_GetHp_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetHp::CallFunc_GetHp_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHPPercent
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetHPPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetHPPercent) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetHPPercent");
static_assert(sizeof(RSBattleCharacter_C_GetHPPercent) == 0x000008, "Wrong size on RSBattleCharacter_C_GetHPPercent");
static_assert(offsetof(RSBattleCharacter_C_GetHPPercent, Percent) == 0x000000, "Member 'RSBattleCharacter_C_GetHPPercent::Percent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHPPercent, CallFunc_GetHPPercent_ReturnValue) == 0x000004, "Member 'RSBattleCharacter_C_GetHPPercent::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.isForceCritical
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsForceCritical final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsForceCritical) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsForceCritical");
static_assert(sizeof(RSBattleCharacter_C_IsForceCritical) == 0x000001, "Wrong size on RSBattleCharacter_C_IsForceCritical");
static_assert(offsetof(RSBattleCharacter_C_IsForceCritical, bResult) == 0x000000, "Member 'RSBattleCharacter_C_IsForceCritical::bResult' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_GetTeam final
{
public:
	ETeamKind                                     Param_Team;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetTeam) == 0x000001, "Wrong alignment on RSBattleCharacter_C_GetTeam");
static_assert(sizeof(RSBattleCharacter_C_GetTeam) == 0x000001, "Wrong size on RSBattleCharacter_C_GetTeam");
static_assert(offsetof(RSBattleCharacter_C_GetTeam, Param_Team) == 0x000000, "Member 'RSBattleCharacter_C_GetTeam::Param_Team' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsPlayer
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsPlayer final
{
public:
	bool                                          bPlayer;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsPlayer) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsPlayer");
static_assert(sizeof(RSBattleCharacter_C_IsPlayer) == 0x000002, "Wrong size on RSBattleCharacter_C_IsPlayer");
static_assert(offsetof(RSBattleCharacter_C_IsPlayer, bPlayer) == 0x000000, "Member 'RSBattleCharacter_C_IsPlayer::bPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsPlayer, CallFunc_IsPlayer_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsPlayer::CallFunc_IsPlayer_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnemy
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsEnemy final
{
public:
	bool                                          bEnemy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnemy) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsEnemy");
static_assert(sizeof(RSBattleCharacter_C_IsEnemy) == 0x000002, "Wrong size on RSBattleCharacter_C_IsEnemy");
static_assert(offsetof(RSBattleCharacter_C_IsEnemy, bEnemy) == 0x000000, "Member 'RSBattleCharacter_C_IsEnemy::bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnemy, CallFunc_IsEnemy_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsEnemy::CallFunc_IsEnemy_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsMetalMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsMetalMode final
{
public:
	bool                                          bMetal;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsMetalMode) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsMetalMode");
static_assert(sizeof(RSBattleCharacter_C_IsMetalMode) == 0x000001, "Wrong size on RSBattleCharacter_C_IsMetalMode");
static_assert(offsetof(RSBattleCharacter_C_IsMetalMode, bMetal) == 0x000000, "Member 'RSBattleCharacter_C_IsMetalMode::bMetal' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakTargetPoint
// 0x0024 (0x0024 - 0x0000)
struct RSBattleCharacter_C_GetWeakTargetPoint final
{
public:
	struct FVector                                AttackerPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetWeakTargetPoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetWeakTargetPoint");
static_assert(sizeof(RSBattleCharacter_C_GetWeakTargetPoint) == 0x000024, "Wrong size on RSBattleCharacter_C_GetWeakTargetPoint");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetPoint, AttackerPos) == 0x000000, "Member 'RSBattleCharacter_C_GetWeakTargetPoint::AttackerPos' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetPoint, Point) == 0x00000C, "Member 'RSBattleCharacter_C_GetWeakTargetPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_GetWeakTargetPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetTopTargetPoint
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetTopTargetPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetTopTargetPoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetTopTargetPoint");
static_assert(sizeof(RSBattleCharacter_C_GetTopTargetPoint) == 0x000018, "Wrong size on RSBattleCharacter_C_GetTopTargetPoint");
static_assert(offsetof(RSBattleCharacter_C_GetTopTargetPoint, Point) == 0x000000, "Member 'RSBattleCharacter_C_GetTopTargetPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetTopTargetPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetTopTargetPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakUIPoint
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_GetWeakUIPoint final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetWeakUIPoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetWeakUIPoint");
static_assert(sizeof(RSBattleCharacter_C_GetWeakUIPoint) == 0x000010, "Wrong size on RSBattleCharacter_C_GetWeakUIPoint");
static_assert(offsetof(RSBattleCharacter_C_GetWeakUIPoint, Param_Index) == 0x000000, "Member 'RSBattleCharacter_C_GetWeakUIPoint::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetWeakUIPoint, Point) == 0x000004, "Member 'RSBattleCharacter_C_GetWeakUIPoint::Point' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakTargetComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattleCharacter_C_GetWeakTargetComponent final
{
public:
	class USceneComponent*                        WeakComponent;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetWeakTargetComponent) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetWeakTargetComponent");
static_assert(sizeof(RSBattleCharacter_C_GetWeakTargetComponent) == 0x000008, "Wrong size on RSBattleCharacter_C_GetWeakTargetComponent");
static_assert(offsetof(RSBattleCharacter_C_GetWeakTargetComponent, WeakComponent) == 0x000000, "Member 'RSBattleCharacter_C_GetWeakTargetComponent::WeakComponent' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetNotifyAttackData
// 0x0010 (0x0010 - 0x0000)
struct RSBattleCharacter_C_GetNotifyAttackData final
{
public:
	struct FFNotifyAttackData                     Data;                                              // 0x0000(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetNotifyAttackData) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetNotifyAttackData");
static_assert(sizeof(RSBattleCharacter_C_GetNotifyAttackData) == 0x000010, "Wrong size on RSBattleCharacter_C_GetNotifyAttackData");
static_assert(offsetof(RSBattleCharacter_C_GetNotifyAttackData, Data) == 0x000000, "Member 'RSBattleCharacter_C_GetNotifyAttackData::Data' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.CanTakeBrainField
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_CanTakeBrainField final
{
public:
	bool                                          CanTake;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_CanTakeBrainField) == 0x000001, "Wrong alignment on RSBattleCharacter_C_CanTakeBrainField");
static_assert(sizeof(RSBattleCharacter_C_CanTakeBrainField) == 0x000001, "Wrong size on RSBattleCharacter_C_CanTakeBrainField");
static_assert(offsetof(RSBattleCharacter_C_CanTakeBrainField, CanTake) == 0x000000, "Member 'RSBattleCharacter_C_CanTakeBrainField::CanTake' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsHitWeak_ChangeDefaultEffect
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect final
{
public:
	bool                                          ChangeDefault;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect");
static_assert(sizeof(RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect) == 0x000001, "Wrong size on RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect");
static_assert(offsetof(RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect, ChangeDefault) == 0x000000, "Member 'RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect::ChangeDefault' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableSlashEffect
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleCharacter_C_IsEnableSlashEffect final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bEnable;                                           // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnableSlashEffect) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsEnableSlashEffect");
static_assert(sizeof(RSBattleCharacter_C_IsEnableSlashEffect) == 0x0001C8, "Wrong size on RSBattleCharacter_C_IsEnableSlashEffect");
static_assert(offsetof(RSBattleCharacter_C_IsEnableSlashEffect, HitResult) == 0x000000, "Member 'RSBattleCharacter_C_IsEnableSlashEffect::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableSlashEffect, bEnable) == 0x0001C0, "Member 'RSBattleCharacter_C_IsEnableSlashEffect::bEnable' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsBrainCrashAccessInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleCharacter_C_IsBrainCrashAccessInterface final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsBrainCrashAccessInterface) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsBrainCrashAccessInterface");
static_assert(sizeof(RSBattleCharacter_C_IsBrainCrashAccessInterface) == 0x000002, "Wrong size on RSBattleCharacter_C_IsBrainCrashAccessInterface");
static_assert(offsetof(RSBattleCharacter_C_IsBrainCrashAccessInterface, bAccess) == 0x000000, "Member 'RSBattleCharacter_C_IsBrainCrashAccessInterface::bAccess' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsBrainCrashAccessInterface, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsBrainCrashAccessInterface::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetAutoAimRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattleCharacter_C_GetAutoAimRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetAutoAimRate) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetAutoAimRate");
static_assert(sizeof(RSBattleCharacter_C_GetAutoAimRate) == 0x000004, "Wrong size on RSBattleCharacter_C_GetAutoAimRate");
static_assert(offsetof(RSBattleCharacter_C_GetAutoAimRate, Rate) == 0x000000, "Member 'RSBattleCharacter_C_GetAutoAimRate::Rate' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterLV
// 0x0030 (0x0030 - 0x0000)
struct RSBattleCharacter_C_GetCharacterLV final
{
public:
	int32                                         LV;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4063[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Right_ReturnValue;                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCharacterLV) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharacterLV");
static_assert(sizeof(RSBattleCharacter_C_GetCharacterLV) == 0x000030, "Wrong size on RSBattleCharacter_C_GetCharacterLV");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterLV, LV) == 0x000000, "Member 'RSBattleCharacter_C_GetCharacterLV::LV' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterLV, CallFunc_Conv_NameToString_ReturnValue) == 0x000008, "Member 'RSBattleCharacter_C_GetCharacterLV::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterLV, CallFunc_Right_ReturnValue) == 0x000018, "Member 'RSBattleCharacter_C_GetCharacterLV::CallFunc_Right_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterLV, CallFunc_Conv_StringToInt_ReturnValue) == 0x000028, "Member 'RSBattleCharacter_C_GetCharacterLV::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableReactionCoefficient
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_IsEnableReactionCoefficient final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4064[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionSRate;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionLRate;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRate;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashRate;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAcceptAll;                                        // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttackType                            Temp_byte_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEnableReactionCoefficient) == 0x000004, "Wrong alignment on RSBattleCharacter_C_IsEnableReactionCoefficient");
static_assert(sizeof(RSBattleCharacter_C_IsEnableReactionCoefficient) == 0x000018, "Wrong size on RSBattleCharacter_C_IsEnableReactionCoefficient");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, bEnable) == 0x000000, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, ReactionSRate) == 0x000004, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::ReactionSRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, ReactionLRate) == 0x000008, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::ReactionLRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, DownRate) == 0x00000C, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::DownRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, CrashRate) == 0x000010, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::CrashRate' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, bAcceptAll) == 0x000014, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::bAcceptAll' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, Temp_byte_Variable) == 0x000015, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsEnableReactionCoefficient, K2Node_Select_Default) == 0x000016, "Member 'RSBattleCharacter_C_IsEnableReactionCoefficient::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsAttackerMainPlayer
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsAttackerMainPlayer final
{
public:
	bool                                          bMainPlayer;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsAttackerMainPlayer) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsAttackerMainPlayer");
static_assert(sizeof(RSBattleCharacter_C_IsAttackerMainPlayer) == 0x000001, "Wrong size on RSBattleCharacter_C_IsAttackerMainPlayer");
static_assert(offsetof(RSBattleCharacter_C_IsAttackerMainPlayer, bMainPlayer) == 0x000000, "Member 'RSBattleCharacter_C_IsAttackerMainPlayer::bMainPlayer' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterReplaceSkillTable
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetCharacterReplaceSkillTable final
{
public:
	class UDataTable*                             Original;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             SkillTable;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_GetReplaceSkillTable_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCharacterReplaceSkillTable) == 0x000008, "Wrong alignment on RSBattleCharacter_C_GetCharacterReplaceSkillTable");
static_assert(sizeof(RSBattleCharacter_C_GetCharacterReplaceSkillTable) == 0x000018, "Wrong size on RSBattleCharacter_C_GetCharacterReplaceSkillTable");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterReplaceSkillTable, Original) == 0x000000, "Member 'RSBattleCharacter_C_GetCharacterReplaceSkillTable::Original' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterReplaceSkillTable, SkillTable) == 0x000008, "Member 'RSBattleCharacter_C_GetCharacterReplaceSkillTable::SkillTable' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCharacterReplaceSkillTable, CallFunc_GetReplaceSkillTable_ReturnValue) == 0x000010, "Member 'RSBattleCharacter_C_GetCharacterReplaceSkillTable::CallFunc_GetReplaceSkillTable_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsOnGround
// 0x0088 (0x0088 - 0x0000)
struct RSBattleCharacter_C_IsOnGround final
{
public:
	bool                                          bIncludeObject;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4065[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsOnGround) == 0x000008, "Wrong alignment on RSBattleCharacter_C_IsOnGround");
static_assert(sizeof(RSBattleCharacter_C_IsOnGround) == 0x000088, "Wrong size on RSBattleCharacter_C_IsOnGround");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, bIncludeObject) == 0x000000, "Member 'RSBattleCharacter_C_IsOnGround::bIncludeObject' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsOnGround::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, L_result) == 0x000002, "Member 'RSBattleCharacter_C_IsOnGround::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_IsFlying_ReturnValue) == 0x000003, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_IsFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_bBlockingHit) == 0x000004, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x000005, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_Time) == 0x000008, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_Distance) == 0x00000C, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_Location) == 0x000010, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_ImpactPoint) == 0x00001C, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_Normal) == 0x000028, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000034, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_PhysMat) == 0x000040, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_HitActor) == 0x000048, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_HitComponent) == 0x000050, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_HitBoneName) == 0x000058, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_HitItem) == 0x000060, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_FaceIndex) == 0x000064, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_TraceStart) == 0x000068, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_BreakHitResult_TraceEnd) == 0x000074, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000080, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsOnGround, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000081, "Member 'RSBattleCharacter_C_IsOnGround::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableDamageHit
// 0x0003 (0x0003 - 0x0000)
struct RSBattleCharacter_C_IsDisableDamageHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDamageHit_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsDisableDamageHit) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsDisableDamageHit");
static_assert(sizeof(RSBattleCharacter_C_IsDisableDamageHit) == 0x000003, "Wrong size on RSBattleCharacter_C_IsDisableDamageHit");
static_assert(offsetof(RSBattleCharacter_C_IsDisableDamageHit, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsDisableDamageHit::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsDisableDamageHit, CallFunc_IsEnableDamageHit_ReturnValue) == 0x000001, "Member 'RSBattleCharacter_C_IsDisableDamageHit::CallFunc_IsEnableDamageHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_IsDisableDamageHit, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattleCharacter_C_IsDisableDamageHit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsInvisibleHPGauge
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsInvisibleHPGauge final
{
public:
	bool                                          bInvisible;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsInvisibleHPGauge) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsInvisibleHPGauge");
static_assert(sizeof(RSBattleCharacter_C_IsInvisibleHPGauge) == 0x000001, "Wrong size on RSBattleCharacter_C_IsInvisibleHPGauge");
static_assert(offsetof(RSBattleCharacter_C_IsInvisibleHPGauge, bInvisible) == 0x000000, "Member 'RSBattleCharacter_C_IsInvisibleHPGauge::bInvisible' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetTargetCursorPoint
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetTargetCursorPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetTargetCursorPoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetTargetCursorPoint");
static_assert(sizeof(RSBattleCharacter_C_GetTargetCursorPoint) == 0x000018, "Wrong size on RSBattleCharacter_C_GetTargetCursorPoint");
static_assert(offsetof(RSBattleCharacter_C_GetTargetCursorPoint, Point) == 0x000000, "Member 'RSBattleCharacter_C_GetTargetCursorPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetTargetCursorPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetTargetCursorPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetHpGaugePoint
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetHpGaugePoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetHpGaugePoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetHpGaugePoint");
static_assert(sizeof(RSBattleCharacter_C_GetHpGaugePoint) == 0x000018, "Wrong size on RSBattleCharacter_C_GetHpGaugePoint");
static_assert(offsetof(RSBattleCharacter_C_GetHpGaugePoint, Point) == 0x000000, "Member 'RSBattleCharacter_C_GetHpGaugePoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetHpGaugePoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetHpGaugePoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.GetCrashChanceCursorPoint
// 0x0018 (0x0018 - 0x0000)
struct RSBattleCharacter_C_GetCrashChanceCursorPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleCharacter_C_GetCrashChanceCursorPoint) == 0x000004, "Wrong alignment on RSBattleCharacter_C_GetCrashChanceCursorPoint");
static_assert(sizeof(RSBattleCharacter_C_GetCrashChanceCursorPoint) == 0x000018, "Wrong size on RSBattleCharacter_C_GetCrashChanceCursorPoint");
static_assert(offsetof(RSBattleCharacter_C_GetCrashChanceCursorPoint, Point) == 0x000000, "Member 'RSBattleCharacter_C_GetCrashChanceCursorPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleCharacter_C_GetCrashChanceCursorPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleCharacter_C_GetCrashChanceCursorPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsSpawnWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsSpawnWait final
{
public:
	bool                                          bSpawnWait;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsSpawnWait) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsSpawnWait");
static_assert(sizeof(RSBattleCharacter_C_IsSpawnWait) == 0x000001, "Wrong size on RSBattleCharacter_C_IsSpawnWait");
static_assert(offsetof(RSBattleCharacter_C_IsSpawnWait, bSpawnWait) == 0x000000, "Member 'RSBattleCharacter_C_IsSpawnWait::bSpawnWait' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsInvisibleMiniMap
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsInvisibleMiniMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsInvisibleMiniMap) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsInvisibleMiniMap");
static_assert(sizeof(RSBattleCharacter_C_IsInvisibleMiniMap) == 0x000001, "Wrong size on RSBattleCharacter_C_IsInvisibleMiniMap");
static_assert(offsetof(RSBattleCharacter_C_IsInvisibleMiniMap, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsInvisibleMiniMap::ReturnValue' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsHpGaugeAlwaysMax
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsHpGaugeAlwaysMax final
{
public:
	bool                                          bAlwaysMax;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsHpGaugeAlwaysMax) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsHpGaugeAlwaysMax");
static_assert(sizeof(RSBattleCharacter_C_IsHpGaugeAlwaysMax) == 0x000001, "Wrong size on RSBattleCharacter_C_IsHpGaugeAlwaysMax");
static_assert(offsetof(RSBattleCharacter_C_IsHpGaugeAlwaysMax, bAlwaysMax) == 0x000000, "Member 'RSBattleCharacter_C_IsHpGaugeAlwaysMax::bAlwaysMax' has a wrong offset!");

// Function RSBattleCharacter.RSBattleCharacter_C.IsEmphasisCrashGauge
// 0x0001 (0x0001 - 0x0000)
struct RSBattleCharacter_C_IsEmphasisCrashGauge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleCharacter_C_IsEmphasisCrashGauge) == 0x000001, "Wrong alignment on RSBattleCharacter_C_IsEmphasisCrashGauge");
static_assert(sizeof(RSBattleCharacter_C_IsEmphasisCrashGauge) == 0x000001, "Wrong size on RSBattleCharacter_C_IsEmphasisCrashGauge");
static_assert(offsetof(RSBattleCharacter_C_IsEmphasisCrashGauge, ReturnValue) == 0x000000, "Member 'RSBattleCharacter_C_IsEmphasisCrashGauge::ReturnValue' has a wrong offset!");

}

