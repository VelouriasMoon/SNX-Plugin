#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_EventUtility

#include "Basic.hpp"

#include "BPFL_EventUtility_classes.hpp"
#include "BPFL_EventUtility_parameters.hpp"


namespace SDK
{

// Function BPFL_EventUtility.BPFL_EventUtility_C.CheckProgressID
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MinProgressID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxProgressID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnEnable1                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::CheckProgressID(int32 MinProgressID, int32 MaxProgressID, class UObject* __WorldContext, bool* ReturnEnable1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "CheckProgressID");

	Params::BPFL_EventUtility_C_CheckProgressID Parms{};

	Parms.MinProgressID = MinProgressID;
	Parms.MaxProgressID = MaxProgressID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ReturnEnable1 != nullptr)
		*ReturnEnable1 = Parms.ReturnEnable1;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.CheckScenarioFlagList
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFScenarioFlagCheckData>  ScenarioFlagList                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnBool                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::CheckScenarioFlagList(TArray<struct FFScenarioFlagCheckData>& ScenarioFlagList, class UObject* __WorldContext, bool* ReturnBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "CheckScenarioFlagList");

	Params::BPFL_EventUtility_C_CheckScenarioFlagList Parms{};

	Parms.ScenarioFlagList = std::move(ScenarioFlagList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ScenarioFlagList = std::move(Parms.ScenarioFlagList);

	if (ReturnBool != nullptr)
		*ReturnBool = Parms.ReturnBool;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetCharaAnimInstance
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBPFL_EventUtility_C::GetCharaAnimInstance(const class UObject* Object, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetCharaAnimInstance");

	Params::BPFL_EventUtility_C_GetCharaAnimInstance Parms{};

	Parms.Object = Object;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetCharaFaceAnimMontage
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* UBPFL_EventUtility_C::GetCharaFaceAnimMontage(const class UObject* Object, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetCharaFaceAnimMontage");

	Params::BPFL_EventUtility_C_GetCharaFaceAnimMontage Parms{};

	Parms.Object = Object;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetCharaBodyAnimMontage
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* UBPFL_EventUtility_C::GetCharaBodyAnimMontage(const class UObject* Object, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetCharaBodyAnimMontage");

	Params::BPFL_EventUtility_C_GetCharaBodyAnimMontage Parms{};

	Parms.Object = Object;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.CheckScenarioFlag
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ScenarioFlag                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FlagValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::CheckScenarioFlag(class FName& ScenarioFlag, class UObject* __WorldContext, bool* FlagValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "CheckScenarioFlag");

	Params::BPFL_EventUtility_C_CheckScenarioFlag Parms{};

	Parms.ScenarioFlag = ScenarioFlag;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ScenarioFlag = Parms.ScenarioFlag;

	if (FlagValue != nullptr)
		*FlagValue = Parms.FlagValue;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.SetScenarioFlag
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ScenarioFlag                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::SetScenarioFlag(class FName& ScenarioFlag, bool Value, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "SetScenarioFlag");

	Params::BPFL_EventUtility_C_SetScenarioFlag Parms{};

	Parms.ScenarioFlag = ScenarioFlag;
	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ScenarioFlag = Parms.ScenarioFlag;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.CheckScenarioFlagListC
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FShowDestinationFlgCheck> ScenarioFlagList                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnBool                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::CheckScenarioFlagListC(TArray<struct FShowDestinationFlgCheck>& ScenarioFlagList, class UObject* __WorldContext, bool* ReturnBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "CheckScenarioFlagListC");

	Params::BPFL_EventUtility_C_CheckScenarioFlagListC Parms{};

	Parms.ScenarioFlagList = std::move(ScenarioFlagList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ScenarioFlagList = std::move(Parms.ScenarioFlagList);

	if (ReturnBool != nullptr)
		*ReturnBool = Parms.ReturnBool;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetEventAttachedMesh
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_MenuPlayerBase_C*             MenuPlayer                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              PrimitiveComp                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::GetEventAttachedMesh(class AActor* Actor, class UObject* __WorldContext, class ARSBattlePlayer_C** Player, class ABP_MenuPlayerBase_C** MenuPlayer, class USkeletalMeshComponent** SkeletalMeshComp, class UPrimitiveComponent** PrimitiveComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetEventAttachedMesh");

	Params::BPFL_EventUtility_C_GetEventAttachedMesh Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;

	if (MenuPlayer != nullptr)
		*MenuPlayer = Parms.MenuPlayer;

	if (SkeletalMeshComp != nullptr)
		*SkeletalMeshComp = Parms.SkeletalMeshComp;

	if (PrimitiveComp != nullptr)
		*PrimitiveComp = Parms.PrimitiveComp;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetSequenceObjectBindingIDPlayer
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class FName>                     ObjTags                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>BindingIds                                             (Parm, OutParm, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::GetSequenceObjectBindingIDPlayer(class ARSLevelSequenceActor* Sequencer, const class FText& PlayerId, TArray<class FName>& ObjTags, bool AllowSuffixNo, class UObject* __WorldContext, TArray<struct FMovieSceneObjectBindingID>* BindingIds, bool* IsFind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetSequenceObjectBindingIDPlayer");

	Params::BPFL_EventUtility_C_GetSequenceObjectBindingIDPlayer Parms{};

	Parms.Sequencer = Sequencer;
	Parms.PlayerId = std::move(PlayerId);
	Parms.ObjTags = std::move(ObjTags);
	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ObjTags = std::move(Parms.ObjTags);

	if (BindingIds != nullptr)
		*BindingIds = std::move(Parms.BindingIds);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetSequenceObjectBindingIDWeapon
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             WeaponId                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class FName>                     ObjTags                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>BindingIds                                             (Parm, OutParm, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FString>                   BindingNames                                           (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_EventUtility_C::GetSequenceObjectBindingIDWeapon(class ARSLevelSequenceActor* Sequencer, const class FText& WeaponId, TArray<class FName>& ObjTags, bool AllowSuffixNo, class UObject* __WorldContext, TArray<struct FMovieSceneObjectBindingID>* BindingIds, bool* IsFind, TArray<class FString>* BindingNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetSequenceObjectBindingIDWeapon");

	Params::BPFL_EventUtility_C_GetSequenceObjectBindingIDWeapon Parms{};

	Parms.Sequencer = Sequencer;
	Parms.WeaponId = std::move(WeaponId);
	Parms.ObjTags = std::move(ObjTags);
	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ObjTags = std::move(Parms.ObjTags);

	if (BindingIds != nullptr)
		*BindingIds = std::move(Parms.BindingIds);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;

	if (BindingNames != nullptr)
		*BindingNames = std::move(Parms.BindingNames);
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetSequenceObjectBindingIDInternal
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     PerfectMatch                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     ObjTags                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     SuffixList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>BindingIds                                             (Parm, OutParm, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FString>                   BindingNames                                           (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_EventUtility_C::GetSequenceObjectBindingIDInternal(class ARSLevelSequenceActor* Sequencer, TArray<class FText>& PerfectMatch, TArray<class FName>& ObjTags, TArray<class FText>& SuffixList, class UObject* __WorldContext, TArray<struct FMovieSceneObjectBindingID>* BindingIds, bool* IsFind, TArray<class FString>* BindingNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetSequenceObjectBindingIDInternal");

	Params::BPFL_EventUtility_C_GetSequenceObjectBindingIDInternal Parms{};

	Parms.Sequencer = Sequencer;
	Parms.PerfectMatch = std::move(PerfectMatch);
	Parms.ObjTags = std::move(ObjTags);
	Parms.SuffixList = std::move(SuffixList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PerfectMatch = std::move(Parms.PerfectMatch);
	ObjTags = std::move(Parms.ObjTags);
	SuffixList = std::move(Parms.SuffixList);

	if (BindingIds != nullptr)
		*BindingIds = std::move(Parms.BindingIds);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;

	if (BindingNames != nullptr)
		*BindingNames = std::move(Parms.BindingNames);
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.CheckBondsProgressID
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MinBondsProgressID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxBondsProgressID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               HeroID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               PartnerId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnEnable1                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::CheckBondsProgressID(int32 MinBondsProgressID, int32 MaxBondsProgressID, EPlayerID HeroID, EPlayerID PartnerId, class UObject* __WorldContext, bool* ReturnEnable1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "CheckBondsProgressID");

	Params::BPFL_EventUtility_C_CheckBondsProgressID Parms{};

	Parms.MinBondsProgressID = MinBondsProgressID;
	Parms.MaxBondsProgressID = MaxBondsProgressID;
	Parms.HeroID = HeroID;
	Parms.PartnerId = PartnerId;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ReturnEnable1 != nullptr)
		*ReturnEnable1 = Parms.ReturnEnable1;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.SetFrameParticleMIDArray
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   ParticleComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstanceDynamic*> MIDArray                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::SetFrameParticleMIDArray(class URSParticleSystemComponentBase* ParticleComponent, TArray<class UMaterialInstanceDynamic*>& MIDArray, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "SetFrameParticleMIDArray");

	Params::BPFL_EventUtility_C_SetFrameParticleMIDArray Parms{};

	Parms.ParticleComponent = ParticleComponent;
	Parms.MIDArray = std::move(MIDArray);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MIDArray = std::move(Parms.MIDArray);
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.SetupCutSceneActorHideDither
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DitherStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   NowTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   IgnoreActors                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    TargetPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TargetEnemy                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TargetPsychicObject                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TargetDeadEnpc                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TargetSavePoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   UpdatedTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::SetupCutSceneActorHideDither(float DeltaSeconds, bool DitherStart, float NowTime, float MaxTime, TArray<class AActor*>& IgnoreActors, bool TargetPlayer, bool TargetEnemy, bool TargetPsychicObject, bool TargetDeadEnpc, bool TargetSavePoint, class UObject* __WorldContext, float* UpdatedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "SetupCutSceneActorHideDither");

	Params::BPFL_EventUtility_C_SetupCutSceneActorHideDither Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.DitherStart = DitherStart;
	Parms.NowTime = NowTime;
	Parms.MaxTime = MaxTime;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.TargetPlayer = TargetPlayer;
	Parms.TargetEnemy = TargetEnemy;
	Parms.TargetPsychicObject = TargetPsychicObject;
	Parms.TargetDeadEnpc = TargetDeadEnpc;
	Parms.TargetSavePoint = TargetSavePoint;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	IgnoreActors = std::move(Parms.IgnoreActors);

	if (UpdatedTime != nullptr)
		*UpdatedTime = Parms.UpdatedTime;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.SetupSequencerTimeDilationCounter
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              LevelSequenceActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::SetupSequencerTimeDilationCounter(class ALevelSequenceActor* LevelSequenceActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "SetupSequencerTimeDilationCounter");

	Params::BPFL_EventUtility_C_SetupSequencerTimeDilationCounter Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetEventMesh
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_MenuPlayerBase_C*             MenuPlayer                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              PrimitiveComp                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::GetEventMesh(class AActor* Actor, class UObject* __WorldContext, class ARSBattlePlayer_C** Player, class ABP_MenuPlayerBase_C** MenuPlayer, class USkeletalMeshComponent** SkeletalMeshComp, class UPrimitiveComponent** PrimitiveComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetEventMesh");

	Params::BPFL_EventUtility_C_GetEventMesh Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;

	if (MenuPlayer != nullptr)
		*MenuPlayer = Parms.MenuPlayer;

	if (SkeletalMeshComp != nullptr)
		*SkeletalMeshComp = Parms.SkeletalMeshComp;

	if (PrimitiveComp != nullptr)
		*PrimitiveComp = Parms.PrimitiveComp;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.GetEventAttachedMeshWithSub
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelfActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   SubAttachParentActors                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_MenuPlayerBase_C*             MenuPlayer                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              PrimitiveComp                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::GetEventAttachedMeshWithSub(class AActor* SelfActor, TArray<class AActor*>& SubAttachParentActors, class UObject* __WorldContext, class ARSBattlePlayer_C** Player, class ABP_MenuPlayerBase_C** MenuPlayer, class USkeletalMeshComponent** SkeletalMeshComp, class UPrimitiveComponent** PrimitiveComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "GetEventAttachedMeshWithSub");

	Params::BPFL_EventUtility_C_GetEventAttachedMeshWithSub Parms{};

	Parms.SelfActor = SelfActor;
	Parms.SubAttachParentActors = std::move(SubAttachParentActors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	SubAttachParentActors = std::move(Parms.SubAttachParentActors);

	if (Player != nullptr)
		*Player = Parms.Player;

	if (MenuPlayer != nullptr)
		*MenuPlayer = Parms.MenuPlayer;

	if (SkeletalMeshComp != nullptr)
		*SkeletalMeshComp = Parms.SkeletalMeshComp;

	if (PrimitiveComp != nullptr)
		*PrimitiveComp = Parms.PrimitiveComp;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.SetupAttachParentWithSub
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelfActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   SubAttachParentActors                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Parent                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::SetupAttachParentWithSub(class AActor* SelfActor, TArray<class AActor*>& SubAttachParentActors, class FName SocketName, class UObject* __WorldContext, class AActor** Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "SetupAttachParentWithSub");

	Params::BPFL_EventUtility_C_SetupAttachParentWithSub Parms{};

	Parms.SelfActor = SelfActor;
	Parms.SubAttachParentActors = std::move(SubAttachParentActors);
	Parms.SocketName = SocketName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	SubAttachParentActors = std::move(Parms.SubAttachParentActors);

	if (Parent != nullptr)
		*Parent = Parms.Parent;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.Check Mesh Wire Visible
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWireVisible                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::Check_Mesh_Wire_Visible(class USkeletalMesh* SkeletalMesh, class UObject* __WorldContext, bool* IsWireVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "Check Mesh Wire Visible");

	Params::BPFL_EventUtility_C_Check_Mesh_Wire_Visible Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsWireVisible != nullptr)
		*IsWireVisible = Parms.IsWireVisible;
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.SetupPPMaskParticle
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_SequencerParticle_C*>  CustomSteniclActors                                    (Parm, OutParm, HasGetValueTypeHash)
// TArray<int32>                           RestoreCustomStencil                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_EventUtility_C::SetupPPMaskParticle(bool Enable, class UObject* __WorldContext, TArray<class ABP_SequencerParticle_C*>* CustomSteniclActors, TArray<int32>* RestoreCustomStencil)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "SetupPPMaskParticle");

	Params::BPFL_EventUtility_C_SetupPPMaskParticle Parms{};

	Parms.Enable = Enable;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CustomSteniclActors != nullptr)
		*CustomSteniclActors = std::move(Parms.CustomSteniclActors);

	if (RestoreCustomStencil != nullptr)
		*RestoreCustomStencil = std::move(Parms.RestoreCustomStencil);
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.RestorePPMaskParticle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_SequencerParticle_C*>  CustomSteniclActors                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<int32>                           RestoreCustomStencil                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_EventUtility_C::RestorePPMaskParticle(TArray<class ABP_SequencerParticle_C*>& CustomSteniclActors, TArray<int32>& RestoreCustomStencil, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "RestorePPMaskParticle");

	Params::BPFL_EventUtility_C_RestorePPMaskParticle Parms{};

	Parms.CustomSteniclActors = std::move(CustomSteniclActors);
	Parms.RestoreCustomStencil = std::move(RestoreCustomStencil);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	CustomSteniclActors = std::move(Parms.CustomSteniclActors);
	RestoreCustomStencil = std::move(Parms.RestoreCustomStencil);
}


// Function BPFL_EventUtility.BPFL_EventUtility_C.CheckOverProgressID
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ProgressId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnEnable1                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_EventUtility_C::CheckOverProgressID(int32 ProgressId, class UObject* __WorldContext, bool* ReturnEnable1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_EventUtility_C", "CheckOverProgressID");

	Params::BPFL_EventUtility_C_CheckOverProgressID Parms{};

	Parms.ProgressId = ProgressId;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ReturnEnable1 != nullptr)
		*ReturnEnable1 = Parms.ReturnEnable1;
}

}

