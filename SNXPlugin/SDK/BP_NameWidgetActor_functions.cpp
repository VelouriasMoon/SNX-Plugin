#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NameWidgetActor

#include "Basic.hpp"

#include "BP_NameWidgetActor_classes.hpp"
#include "BP_NameWidgetActor_parameters.hpp"


namespace SDK
{

// Function BP_NameWidgetActor.BP_NameWidgetActor_C.ExecuteUbergraph_BP_NameWidgetActor
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NameWidgetActor_C::ExecuteUbergraph_BP_NameWidgetActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NameWidgetActor_C", "ExecuteUbergraph_BP_NameWidgetActor");

	Params::BP_NameWidgetActor_C_ExecuteUbergraph_BP_NameWidgetActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NameWidgetActor.BP_NameWidgetActor_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NameWidgetActor_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NameWidgetActor_C", "ReceiveEndPlay");

	Params::BP_NameWidgetActor_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NameWidgetActor.BP_NameWidgetActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NameWidgetActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NameWidgetActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NameWidgetActor.BP_NameWidgetActor_C.StartEventCharaName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      CharaNameWidget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CharaID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_NameWidgetActor_C::StartEventCharaName(class ABPCaptureActor_C* CaptureActor, const struct FVector& Scale, class FName SocketName, class UUserWidget* CharaNameWidget, const class FString& CharaID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NameWidgetActor_C", "StartEventCharaName");

	Params::BP_NameWidgetActor_C_StartEventCharaName Parms{};

	Parms.CaptureActor = CaptureActor;
	Parms.Scale = std::move(Scale);
	Parms.SocketName = SocketName;
	Parms.CharaNameWidget = CharaNameWidget;
	Parms.CharaID = std::move(CharaID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NameWidgetActor.BP_NameWidgetActor_C.StartEventBossName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           bossId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBossNameMode                           Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FreeFixedDrawSecond                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      BossNameWidget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NameWidgetActor_C::StartEventBossName(class FName SocketName, const class FString& bossId, const struct FVector& Scale, EBossNameMode Mode, float FreeFixedDrawSecond, class UUserWidget* BossNameWidget, class ABPCaptureActor_C* CaptureActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NameWidgetActor_C", "StartEventBossName");

	Params::BP_NameWidgetActor_C_StartEventBossName Parms{};

	Parms.SocketName = SocketName;
	Parms.bossId = std::move(bossId);
	Parms.Scale = std::move(Scale);
	Parms.Mode = Mode;
	Parms.FreeFixedDrawSecond = FreeFixedDrawSecond;
	Parms.BossNameWidget = BossNameWidget;
	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);
}

}

