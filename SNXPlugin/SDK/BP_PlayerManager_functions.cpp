#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerManager

#include "Basic.hpp"

#include "BP_PlayerManager_classes.hpp"
#include "BP_PlayerManager_parameters.hpp"


namespace SDK
{

// Function BP_PlayerManager.BP_PlayerManager_C.DispatchSuccessResurrect__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           RevivePlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::DispatchSuccessResurrect__DelegateSignature(class AActor* RevivePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DispatchSuccessResurrect__DelegateSignature");

	Params::BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature Parms{};

	Parms.RevivePlayer = RevivePlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ExecuteUbergraph_BP_PlayerManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ExecuteUbergraph_BP_PlayerManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ExecuteUbergraph_BP_PlayerManager");

	Params::BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetPhotoModeHood_Native
// (Event, Public, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetPhotoModeHood_Native(ERSPartyPlayerKind Kind, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetPhotoModeHood_Native");

	Params::BP_PlayerManager_C_SetPhotoModeHood_Native Parms{};

	Parms.Kind = Kind;
	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.PlayPhotoModeFacialAnim_Native
// (Event, Public, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerFacialAnim_Native                Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::PlayPhotoModeFacialAnim_Native(ERSPartyPlayerKind Kind, EPlayerFacialAnim_Native Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PlayPhotoModeFacialAnim_Native");

	Params::BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native Parms{};

	Parms.Kind = Kind;
	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetBattleMember
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetBattleMember(ERSPartyPlayerKind Kind, EPlayerID ID, bool bSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetBattleMember");

	Params::BP_PlayerManager_C_SetBattleMember Parms{};

	Parms.Kind = Kind;
	Parms.ID = ID;
	Parms.bSpawn = bSpawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ReceiveEndPlay");

	Params::BP_PlayerManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ExecPartnerWarpCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ExecPartnerWarpCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ExecPartnerWarpCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.PlayerSetting
// (Event, Protected, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::PlayerSetting(ERSPartyPlayerKind Kind, class ARSCharacterBase* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PlayerSetting");

	Params::BP_PlayerManager_C_PlayerSetting Parms{};

	Parms.Kind = Kind;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventManagerRigitBodyEmptyUpdateSeconds
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RigitBodyEmptyUpdateSeconds                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::EventManagerRigitBodyEmptyUpdateSeconds(float RigitBodyEmptyUpdateSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventManagerRigitBodyEmptyUpdateSeconds");

	Params::BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds Parms{};

	Parms.RigitBodyEmptyUpdateSeconds = RigitBodyEmptyUpdateSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ReceiveTick");

	Params::BP_PlayerManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventGameOverRevivePlayer
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventGameOverRevivePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventGameOverRevivePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventBrainTalkRevival
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventBrainTalkRevival()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventBrainTalkRevival");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventCameraTopView
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventCameraTopView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventCameraTopView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventStartCutEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventStartCutEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventStartCutEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventEraseHUD
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventEraseHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventEraseHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventRecoverCamera
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventRecoverCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventRecoverCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventRecoverAnimationNPC
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventRecoverAnimationNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventRecoverAnimationNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventPlayerStandup
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventPlayerStandup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventPlayerStandup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventWaitStandupNPC
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventWaitStandupNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventWaitStandupNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventRecoverEffectPlayer
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventRecoverEffectPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventRecoverEffectPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventRecoverEffectNPC
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventRecoverEffectNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventRecoverEffectNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventBrainFieldOut
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventBrainFieldOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventBrainFieldOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventChangeDeadCamera
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventChangeDeadCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventChangeDeadCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventPlayerAnimationDead
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventPlayerAnimationDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventPlayerAnimationDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventBrainTalkDead
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventBrainTalkDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventBrainTalkDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventBrainTalkDeadBlur
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventBrainTalkDeadBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventBrainTalkDeadBlur");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventStartUIGameOver
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventStartUIGameOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventStartUIGameOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.Set Assist Count
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BadStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Revive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::Set_Assist_Count(int32 HP, int32 BadStatus, int32 Revive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "Set Assist Count");

	Params::BP_PlayerManager_C_Set_Assist_Count Parms{};

	Parms.HP = HP;
	Parms.BadStatus = BadStatus;
	Parms.Revive = Revive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IPresetAddPartyMember
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PresetName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCheckBattleMemberMain                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IPresetAddPartyMember(class FName PresetName, bool IsCheckBattleMemberMain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IPresetAddPartyMember");

	Params::BP_PlayerManager_C_IPresetAddPartyMember Parms{};

	Parms.PresetName = PresetName;
	Parms.IsCheckBattleMemberMain = IsCheckBattleMemberMain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ResetAssistThinkData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ResetAssistThinkData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ResetAssistThinkData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ResetSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ResetSkill(EPlayerID Player_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ResetSkill");

	Params::BP_PlayerManager_C_ResetSkill Parms{};

	Parms.Player_id_in = Player_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.AddSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            Skill_id_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AddSkill(EPlayerID Player_id_in, EPlayerSkill Skill_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AddSkill");

	Params::BP_PlayerManager_C_AddSkill Parms{};

	Parms.Player_id_in = Player_id_in;
	Parms.Skill_id_in = Skill_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::InitializePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           RevivePlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature(class AActor* RevivePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature");

	Params::BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature Parms{};

	Parms.RevivePlayer = RevivePlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           RevivePlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature(class AActor* RevivePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature");

	Params::BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature Parms{};

	Parms.RevivePlayer = RevivePlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventReviveBattleMember
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventReviveBattleMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventReviveBattleMember");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdateWarpPartner
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::UpdateWarpPartner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdateWarpPartner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.AllPlayerRigitBodyEmptyUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EmptyUpdateSeconds                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AllPlayerRigitBodyEmptyUpdate(float EmptyUpdateSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AllPlayerRigitBodyEmptyUpdate");

	Params::BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate Parms{};

	Parms.EmptyUpdateSeconds = EmptyUpdateSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ForceWarpToMainPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EventIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::ForceWarpToMainPlayer(ERSPartyPlayerKind Kind, float Delay, bool EventIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ForceWarpToMainPlayer");

	Params::BP_PlayerManager_C_ForceWarpToMainPlayer Parms{};

	Parms.Kind = Kind;
	Parms.Delay = Delay;
	Parms.EventIn = EventIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ForceWarp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   IdleRestoreDelay                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ForceWarp(ERSPartyPlayerKind Kind, const struct FTransform& Transform, float IdleRestoreDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ForceWarp");

	Params::BP_PlayerManager_C_ForceWarp Parms{};

	Parms.Kind = Kind;
	Parms.Transform = std::move(Transform);
	Parms.IdleRestoreDelay = IdleRestoreDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetLeftPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetLeftPlayer(class ARSBattlePlayer_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetLeftPlayer");

	Params::BP_PlayerManager_C_GetLeftPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetRightPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetRightPlayer(class ARSBattlePlayer_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetRightPlayer");

	Params::BP_PlayerManager_C_GetRightPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetMainPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetMainPlayer(class ARSBattlePlayer_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetMainPlayer");

	Params::BP_PlayerManager_C_GetMainPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayersAll
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ARSBattlePlayer_C*>        Player                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetPlayersAll(TArray<class ARSBattlePlayer_C*>* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetPlayersAll");

	Params::BP_PlayerManager_C_GetPlayersAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = std::move(Parms.Player);
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializeAssistThink
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::InitializeAssistThink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializeAssistThink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.RequestHpAssist
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Hp_percentage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::RequestHpAssist(float Hp_percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RequestHpAssist");

	Params::BP_PlayerManager_C_RequestHpAssist Parms{};

	Parms.Hp_percentage = Hp_percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.RequestStatusAssist
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::RequestStatusAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RequestStatusAssist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.RequestRevivalAssist
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_revival                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARSBattlePlayer_C*                AssistPlayer                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::RequestRevivalAssist(bool* Is_revival, class ARSBattlePlayer_C** AssistPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RequestRevivalAssist");

	Params::BP_PlayerManager_C_RequestRevivalAssist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_revival != nullptr)
		*Is_revival = Parms.Is_revival;

	if (AssistPlayer != nullptr)
		*AssistPlayer = Parms.AssistPlayer;
}


// Function BP_PlayerManager.BP_PlayerManager_C.ResetAssistThinkData_Internal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ResetAssistThinkData_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ResetAssistThinkData_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DecAssistCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConsumeItemID                          Item_id_in                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::DecAssistCount(EConsumeItemID Item_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DecAssistCount");

	Params::BP_PlayerManager_C_DecAssistCount Parms{};

	Parms.Item_id_in = Item_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ChangePlayerFromClass
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             PlayerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerManager_C::ChangePlayerFromClass(ERSPartyPlayerKind Kind, TSoftClassPtr<class UClass> PlayerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ChangePlayerFromClass");

	Params::BP_PlayerManager_C_ChangePlayerFromClass Parms{};

	Parms.Kind = Kind;
	Parms.PlayerClass = PlayerClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DoPlayerSetting
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::DoPlayerSetting(ERSPartyPlayerKind Kind, class ARSBattlePlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DoPlayerSetting");

	Params::BP_PlayerManager_C_DoPlayerSetting Parms{};

	Parms.Kind = Kind;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetSasStealth
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stealth_on_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetSasStealth(bool Stealth_on_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetSasStealth");

	Params::BP_PlayerManager_C_SetSasStealth Parms{};

	Parms.Stealth_on_in = Stealth_on_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.StartDeadGameOver
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::StartDeadGameOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "StartDeadGameOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.StartDeadRecover
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             RecoverCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::StartDeadRecover(class ARSBattleCharacter_C* RecoverCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "StartDeadRecover");

	Params::BP_PlayerManager_C_StartDeadRecover Parms{};

	Parms.RecoverCharacter = RecoverCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDeadGameOver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Playing                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsPlayingDeadGameOver(bool* Playing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayingDeadGameOver");

	Params::BP_PlayerManager_C_IsPlayingDeadGameOver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Playing != nullptr)
		*Playing = Parms.Playing;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingAnyDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Playing                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsPlayingAnyDead(bool* Playing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayingAnyDead");

	Params::BP_PlayerManager_C_IsPlayingAnyDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Playing != nullptr)
		*Playing = Parms.Playing;
}


// Function BP_PlayerManager.BP_PlayerManager_C.ChangeAreaLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SceneType                             SceneType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ChangeAreaLocation(E_SceneType SceneType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ChangeAreaLocation");

	Params::BP_PlayerManager_C_ChangeAreaLocation Parms{};

	Parms.SceneType = SceneType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayerBPSoftRef
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bENPC                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bMetamorphosis                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash)

TSoftClassPtr<class UClass> ABP_PlayerManager_C::GetPlayerBPSoftRef(EPlayerID PlayerId, bool bENPC, bool bMetamorphosis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetPlayerBPSoftRef");

	Params::BP_PlayerManager_C_GetPlayerBPSoftRef Parms{};

	Parms.PlayerId = PlayerId;
	Parms.bENPC = bENPC;
	Parms.bMetamorphosis = bMetamorphosis;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetForceBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetForceBrainField(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetForceBrainField");

	Params::BP_PlayerManager_C_SetForceBrainField Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetDisableGameOver
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetDisableGameOver(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetDisableGameOver");

	Params::BP_PlayerManager_C_SetDisableGameOver Parms{};

	Parms.bDisable = bDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdatePlayerParameter
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMaxHP                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FCharactersParameterTable        ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FCharactersParameterTable ABP_PlayerManager_C::UpdatePlayerParameter(EPlayerID PlayerId, bool bMaxHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdatePlayerParameter");

	Params::BP_PlayerManager_C_UpdatePlayerParameter Parms{};

	Parms.PlayerId = PlayerId;
	Parms.bMaxHP = bMaxHP;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializeSkillList
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::InitializeSkillList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializeSkillList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.AddSkill_Internal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            Skill_id_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AddSkill_Internal(EPlayerID Player_id_in, EPlayerSkill Skill_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AddSkill_Internal");

	Params::BP_PlayerManager_C_AddSkill_Internal Parms{};

	Parms.Player_id_in = Player_id_in;
	Parms.Skill_id_in = Skill_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.AddExp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Exp_value_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EnemyLevelIn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDirect                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   OutMainPlayerExp                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AddExp(int32 Exp_value_in, int32 EnemyLevelIn, bool bDirect, int32* OutMainPlayerExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AddExp");

	Params::BP_PlayerManager_C_AddExp Parms{};

	Parms.Exp_value_in = Exp_value_in;
	Parms.EnemyLevelIn = EnemyLevelIn;
	Parms.bDirect = bDirect;

	UObject::ProcessEvent(Func, &Parms);

	if (OutMainPlayerExp != nullptr)
		*OutMainPlayerExp = Parms.OutMainPlayerExp;
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetDisableBrainFieldFlag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetDisableBrainFieldFlag(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetDisableBrainFieldFlag");

	Params::BP_PlayerManager_C_SetDisableBrainFieldFlag Parms{};

	Parms.bDisable = bDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SubSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            Skill_id_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SubSkill(EPlayerID Player_id_in, EPlayerSkill Skill_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SubSkill");

	Params::BP_PlayerManager_C_SubSkill Parms{};

	Parms.Player_id_in = Player_id_in;
	Parms.Skill_id_in = Skill_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ResetSkill_Internal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ResetSkill_Internal(EPlayerID Player_id_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ResetSkill_Internal");

	Params::BP_PlayerManager_C_ResetSkill_Internal Parms{};

	Parms.Player_id_in = Player_id_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DebugPrintSkillList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::DebugPrintSkillList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DebugPrintSkillList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SpawnNotPartyPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bENPC                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bMetamorphosis                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class AActor*                           CreateOwner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SpawnNotPartyPlayer(EPlayerID PlayerId, bool bENPC, bool bMetamorphosis, const struct FTransform& Transform, class AActor* CreateOwner, class ARSBattlePlayer_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SpawnNotPartyPlayer");

	Params::BP_PlayerManager_C_SpawnNotPartyPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.bENPC = bENPC;
	Parms.bMetamorphosis = bMetamorphosis;
	Parms.Transform = std::move(Transform);
	Parms.CreateOwner = CreateOwner;

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializeHologram
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::InitializeHologram()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializeHologram");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.FinalizeHologram
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::FinalizeHologram()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "FinalizeHologram");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.PlayHologramAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     WeaponMontage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHologramRootMotion                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MotionIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EHologramKind                           HologramKind                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::PlayHologramAnimation(EPlayerID PlayerId, class UAnimMontage* AnimMontage, class UAnimMontage* WeaponMontage, bool bHologramRootMotion, int32 MotionIndex, EHologramKind HologramKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PlayHologramAnimation");

	Params::BP_PlayerManager_C_PlayHologramAnimation Parms{};

	Parms.PlayerId = PlayerId;
	Parms.AnimMontage = AnimMontage;
	Parms.WeaponMontage = WeaponMontage;
	Parms.bHologramRootMotion = bHologramRootMotion;
	Parms.MotionIndex = MotionIndex;
	Parms.HologramKind = HologramKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.StopHologramAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::StopHologramAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "StopHologramAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.HologramOn
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::HologramOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "HologramOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.HologramOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForceOff                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::HologramOff(bool bForceOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "HologramOff");

	Params::BP_PlayerManager_C_HologramOff Parms{};

	Parms.bForceOff = bForceOff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.PresetAddPartyMember
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PresetName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCheckBattleMemberMain                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotEquipSAS                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::PresetAddPartyMember(class FName PresetName, bool IsCheckBattleMemberMain, bool bNotEquipSAS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PresetAddPartyMember");

	Params::BP_PlayerManager_C_PresetAddPartyMember Parms{};

	Parms.PresetName = PresetName;
	Parms.IsCheckBattleMemberMain = IsCheckBattleMemberMain;
	Parms.bNotEquipSAS = bNotEquipSAS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.RecoverAllHp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUseParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::RecoverAllHp(bool bUseParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RecoverAllHp");

	Params::BP_PlayerManager_C_RecoverAllHp Parms{};

	Parms.bUseParticle = bUseParticle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.RecoverAllBadState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::RecoverAllBadState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RecoverAllBadState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.PlayHologramAnimationSequence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerHologramAnimKind                 Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::PlayHologramAnimationSequence(EPlayerID PlayerId, EPlayerHologramAnimKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PlayHologramAnimationSequence");

	Params::BP_PlayerManager_C_PlayHologramAnimationSequence Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ActivateResurrectIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                DeadPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ActivateResurrectIcon(class ARSBattlePlayer_C* DeadPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ActivateResurrectIcon");

	Params::BP_PlayerManager_C_ActivateResurrectIcon Parms{};

	Parms.DeadPlayer = DeadPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DeactivateResurrectIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                DeadPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::DeactivateResurrectIcon(class ARSBattlePlayer_C* DeadPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DeactivateResurrectIcon");

	Params::BP_PlayerManager_C_DeactivateResurrectIcon Parms{};

	Parms.DeadPlayer = DeadPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetRessurectComponent
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                DeadPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPlayerRessurectComponent*        Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetRessurectComponent(class ARSBattlePlayer_C* DeadPlayer, class UPlayerRessurectComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetRessurectComponent");

	Params::BP_PlayerManager_C_GetRessurectComponent Parms{};

	Parms.DeadPlayer = DeadPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetResurrectAblePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                DeadPlayer                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetResurrectAblePlayer(class ARSBattlePlayer_C** DeadPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetResurrectAblePlayer");

	Params::BP_PlayerManager_C_GetResurrectAblePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DeadPlayer != nullptr)
		*DeadPlayer = Parms.DeadPlayer;
}


// Function BP_PlayerManager.BP_PlayerManager_C.BeginResurrect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                DeadPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TimeRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::BeginResurrect(class ARSBattlePlayer_C* DeadPlayer, float TimeRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "BeginResurrect");

	Params::BP_PlayerManager_C_BeginResurrect Parms{};

	Parms.DeadPlayer = DeadPlayer;
	Parms.TimeRate = TimeRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SuspendResurrection
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::SuspendResurrection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SuspendResurrection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetPlayerCameraViewTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Blend_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                Blend_Func                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Blend_Exp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SetPlayerCameraViewTarget(float Blend_Time, EViewTargetBlendFunction Blend_Func, float Blend_Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetPlayerCameraViewTarget");

	Params::BP_PlayerManager_C_SetPlayerCameraViewTarget Parms{};

	Parms.Blend_Time = Blend_Time;
	Parms.Blend_Func = Blend_Func;
	Parms.Blend_Exp = Blend_Exp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializeRevive
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::InitializeRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializeRevive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetResurrectCableList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_CableBase_C*>          Param_ResurrectCableList                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetResurrectCableList(TArray<class ABP_CableBase_C*>* Param_ResurrectCableList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetResurrectCableList");

	Params::BP_PlayerManager_C_GetResurrectCableList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ResurrectCableList != nullptr)
		*Param_ResurrectCableList = std::move(Parms.Param_ResurrectCableList);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ChangeAccelerator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewCustomTImeDilation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::ChangeAccelerator(float NewCustomTImeDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ChangeAccelerator");

	Params::BP_PlayerManager_C_ChangeAccelerator Parms{};

	Parms.NewCustomTImeDilation = NewCustomTImeDilation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DebugCalcDPS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::DebugCalcDPS(struct FHCHitResult& HitResult, int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DebugCalcDPS");

	Params::BP_PlayerManager_C_DebugCalcDPS Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DebugUpdateCalcDPS
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::DebugUpdateCalcDPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DebugUpdateCalcDPS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsSkillLearnAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            InSkillID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsSkillLearnAble(EPlayerID InPlayerID, EPlayerSkill InSkillID, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsSkillLearnAble");

	Params::BP_PlayerManager_C_IsSkillLearnAble Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InSkillID = InSkillID;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_PlayerManager.BP_PlayerManager_C.LearnSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            InSkillID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::LearnSkill(EPlayerID InPlayerID, EPlayerSkill InSkillID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "LearnSkill");

	Params::BP_PlayerManager_C_LearnSkill Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InSkillID = InSkillID;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_PlayerManager.BP_PlayerManager_C.CheckSASHologramAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESASHologramAttackTiming                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSCharacterBase*                 RequestCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::CheckSASHologramAttack(ESASHologramAttackTiming Timing, class ARSCharacterBase* RequestCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CheckSASHologramAttack");

	Params::BP_PlayerManager_C_CheckSASHologramAttack Parms{};

	Parms.Timing = Timing;
	Parms.RequestCharacter = RequestCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdateMaterials
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::UpdateMaterials(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdateMaterials");

	Params::BP_PlayerManager_C_UpdateMaterials Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetAccessoryEquipNum
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PlayerManager_C::GetAccessoryEquipNum(EPlayerID PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetAccessoryEquipNum");

	Params::BP_PlayerManager_C_GetAccessoryEquipNum Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetAttentionCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag_in                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Look_at_actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Look_at_pos_in                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target_actor_in                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Actor_curve_in                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Change_fov                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Target_fov_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Fov_curve_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SetAttentionCamera(bool Flag_in, bool Look_at_actor, const struct FVector& Look_at_pos_in, class AActor* Target_actor_in, class UCurveFloat* Actor_curve_in, bool Change_fov, float Target_fov_in, class UCurveFloat* Fov_curve_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetAttentionCamera");

	Params::BP_PlayerManager_C_SetAttentionCamera Parms{};

	Parms.Flag_in = Flag_in;
	Parms.Look_at_actor = Look_at_actor;
	Parms.Look_at_pos_in = std::move(Look_at_pos_in);
	Parms.Target_actor_in = Target_actor_in;
	Parms.Actor_curve_in = Actor_curve_in;
	Parms.Change_fov = Change_fov;
	Parms.Target_fov_in = Target_fov_in;
	Parms.Fov_curve_in = Fov_curve_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetAttentionCameraOption
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Offset_angle_vt                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Offset_angle_vt_in                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Offset_angle_Hz                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Offset_angle_Hz_in                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SetAttentionCameraOption(bool Offset_angle_vt, float Offset_angle_vt_in, bool Offset_angle_Hz, float Offset_angle_Hz_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetAttentionCameraOption");

	Params::BP_PlayerManager_C_SetAttentionCameraOption Parms{};

	Parms.Offset_angle_vt = Offset_angle_vt;
	Parms.Offset_angle_vt_in = Offset_angle_vt_in;
	Parms.Offset_angle_Hz = Offset_angle_Hz;
	Parms.Offset_angle_Hz_in = Offset_angle_Hz_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayerInputTrgBrainField
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsPlayerInputTrgBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayerInputTrgBrainField");

	Params::BP_PlayerManager_C_IsPlayerInputTrgBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.SpawnChildYuito
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       InTransform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class ARSBattlePlayer_C*                OutChildYuito                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SpawnChildYuito(const struct FTransform& InTransform, class ARSBattlePlayer_C** OutChildYuito)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SpawnChildYuito");

	Params::BP_PlayerManager_C_SpawnChildYuito Parms{};

	Parms.InTransform = std::move(InTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (OutChildYuito != nullptr)
		*OutChildYuito = Parms.OutChildYuito;
}


// Function BP_PlayerManager.BP_PlayerManager_C.RegisterChildYuito
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                InChildYuito                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::RegisterChildYuito(class ARSBattlePlayer_C* InChildYuito)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RegisterChildYuito");

	Params::BP_PlayerManager_C_RegisterChildYuito Parms{};

	Parms.InChildYuito = InChildYuito;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ControlChildYuito
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bControl                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::ControlChildYuito(bool bControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ControlChildYuito");

	Params::BP_PlayerManager_C_ControlChildYuito Parms{};

	Parms.bControl = bControl;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.CheckNpcDrive
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENpcDriveCheckType                      CheckType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           EnemyActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               CombinationVisionPlayerID                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::CheckNpcDrive(ENpcDriveCheckType CheckType, class AActor* EnemyActor, EPlayerID CombinationVisionPlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CheckNpcDrive");

	Params::BP_PlayerManager_C_CheckNpcDrive Parms{};

	Parms.CheckType = CheckType;
	Parms.EnemyActor = EnemyActor;
	Parms.CombinationVisionPlayerID = CombinationVisionPlayerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.RegisterSasLinkEnpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                LinkPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::RegisterSasLinkEnpc(class ARSBattlePlayer_C* LinkPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "RegisterSasLinkEnpc");

	Params::BP_PlayerManager_C_RegisterSasLinkEnpc Parms{};

	Parms.LinkPlayer = LinkPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ClearSasLinkActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ClearSasLinkActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ClearSasLinkActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SasLinkEnpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SasLinkEnpc(E_SASKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SasLinkEnpc");

	Params::BP_PlayerManager_C_SasLinkEnpc Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdateBattleMemberAttachment
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::UpdateBattleMemberAttachment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdateBattleMemberAttachment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.OnAreaChangeNoneBattleLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::OnAreaChangeNoneBattleLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "OnAreaChangeNoneBattleLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetAssistCheckPlayerList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class ARSBattlePlayer_C*, int32>   AssistList                                             (Parm, OutParm)

void ABP_PlayerManager_C::GetAssistCheckPlayerList(TMap<class ARSBattlePlayer_C*, int32>* AssistList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetAssistCheckPlayerList");

	Params::BP_PlayerManager_C_GetAssistCheckPlayerList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AssistList != nullptr)
		*AssistList = std::move(Parms.AssistList);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ResetPlayerCollisionOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ResetPlayerCollisionOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ResetPlayerCollisionOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.AddMenuBGPlayerList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MenuPlayerBase_C*             Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AddMenuBGPlayerList(class ABP_MenuPlayerBase_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AddMenuBGPlayerList");

	Params::BP_PlayerManager_C_AddMenuBGPlayerList Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ClearMenuBGPlayerList
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ClearMenuBGPlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ClearMenuBGPlayerList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetMenuBGPlayerList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_MenuPlayerBase_C*>     PlayerList                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetMenuBGPlayerList(TArray<class ABP_MenuPlayerBase_C*>* PlayerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetMenuBGPlayerList");

	Params::BP_PlayerManager_C_GetMenuBGPlayerList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerList != nullptr)
		*PlayerList = std::move(Parms.PlayerList);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdateMenuBGPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPlayerInfo                      PlayerInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_PlayerManager_C::UpdateMenuBGPlayer(EPlayerID PlayerId, const struct FPlayerInfo& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdateMenuBGPlayer");

	Params::BP_PlayerManager_C_UpdateMenuBGPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetEnableBrainCrashExtraTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ExtraTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::SetEnableBrainCrashExtraTime(bool bEnable, float ExtraTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetEnableBrainCrashExtraTime");

	Params::BP_PlayerManager_C_SetEnableBrainCrashExtraTime Parms{};

	Parms.bEnable = bEnable;
	Parms.ExtraTime = ExtraTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetNpcThinkAssistAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag_in                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetNpcThinkAssistAttack(bool Flag_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetNpcThinkAssistAttack");

	Params::BP_PlayerManager_C_SetNpcThinkAssistAttack Parms{};

	Parms.Flag_in = Flag_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsNpcThinkAssistAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsNpcThinkAssistAttack(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsNpcThinkAssistAttack");

	Params::BP_PlayerManager_C_IsNpcThinkAssistAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_PlayerManager.BP_PlayerManager_C.PostSetBattleMember
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Spawn                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::PostSetBattleMember(ERSPartyPlayerKind Kind, EPlayerID ID, bool Spawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PostSetBattleMember");

	Params::BP_PlayerManager_C_PostSetBattleMember Parms{};

	Parms.Kind = Kind;
	Parms.ID = ID;
	Parms.Spawn = Spawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayerStatus
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerCommonStatus                     PlayerStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsPlayerStatus(ERSPartyPlayerKind Kind, EPlayerCommonStatus PlayerStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayerStatus");

	Params::BP_PlayerManager_C_IsPlayerStatus Parms{};

	Parms.Kind = Kind;
	Parms.PlayerStatus = PlayerStatus;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.DoEndPlay
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::DoEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DoEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcReviveDirectionManage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_NpcReviveDirectionActor_C*    Manage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetNpcReviveDirectionManage(class ABP_NpcReviveDirectionActor_C** Manage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetNpcReviveDirectionManage");

	Params::BP_PlayerManager_C_GetNpcReviveDirectionManage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Manage != nullptr)
		*Manage = Parms.Manage;
}


// Function BP_PlayerManager.BP_PlayerManager_C.OnEventBattleMameberRevive
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::OnEventBattleMameberRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "OnEventBattleMameberRevive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.AreaChangeForceWarp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       InTransform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InIdleRestoreDelay                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AreaChangeForceWarp(const struct FTransform& InTransform, float InIdleRestoreDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AreaChangeForceWarp");

	Params::BP_PlayerManager_C_AreaChangeForceWarp Parms{};

	Parms.InTransform = std::move(InTransform);
	Parms.InIdleRestoreDelay = InIdleRestoreDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.CalcMenuParameterEquipWeapon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InWeaponID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Attack                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Psychic                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defence                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::CalcMenuParameterEquipWeapon(EPlayerID InPlayerID, int32 InWeaponID, bool* bSuccess, int32* Attack, int32* Psychic, int32* Defence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CalcMenuParameterEquipWeapon");

	Params::BP_PlayerManager_C_CalcMenuParameterEquipWeapon Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InWeaponID = InWeaponID;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Attack != nullptr)
		*Attack = Parms.Attack;

	if (Psychic != nullptr)
		*Psychic = Parms.Psychic;

	if (Defence != nullptr)
		*Defence = Parms.Defence;
}


// Function BP_PlayerManager.BP_PlayerManager_C.CalcMenuParameterEquipAccessory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAccessory                        InSlot                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InAccessoryID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Attack                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Psychic                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defence                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::CalcMenuParameterEquipAccessory(EPlayerID InPlayerID, EPlayerAccessory InSlot, int32 InAccessoryID, bool* bSuccess, int32* Attack, int32* Psychic, int32* Defence, int32* HP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CalcMenuParameterEquipAccessory");

	Params::BP_PlayerManager_C_CalcMenuParameterEquipAccessory Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InSlot = InSlot;
	Parms.InAccessoryID = InAccessoryID;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Attack != nullptr)
		*Attack = Parms.Attack;

	if (Psychic != nullptr)
		*Psychic = Parms.Psychic;

	if (Defence != nullptr)
		*Defence = Parms.Defence;

	if (HP != nullptr)
		*HP = Parms.HP;
}


// Function BP_PlayerManager.BP_PlayerManager_C.CalcMenuParameterSkill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            InSkill                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Attack                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Psychic                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defence                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::CalcMenuParameterSkill(EPlayerID InPlayerID, EPlayerSkill InSkill, bool* bSuccess, int32* Attack, int32* Psychic, int32* Defence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CalcMenuParameterSkill");

	Params::BP_PlayerManager_C_CalcMenuParameterSkill Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InSkill = InSkill;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Attack != nullptr)
		*Attack = Parms.Attack;

	if (Psychic != nullptr)
		*Psychic = Parms.Psychic;

	if (Defence != nullptr)
		*Defence = Parms.Defence;
}


// Function BP_PlayerManager.BP_PlayerManager_C.AddBondsValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAddBondsType                           Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               TargetPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::AddBondsValue(EAddBondsType Type, EPlayerID TargetPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "AddBondsValue");

	Params::BP_PlayerManager_C_AddBondsValue Parms{};

	Parms.Type = Type;
	Parms.TargetPlayer = TargetPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcAssistCountHP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PlayerManager_C::GetNpcAssistCountHP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetNpcAssistCountHP");

	Params::BP_PlayerManager_C_GetNpcAssistCountHP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcAssistCountBadStatus
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PlayerManager_C::GetNpcAssistCountBadStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetNpcAssistCountBadStatus");

	Params::BP_PlayerManager_C_GetNpcAssistCountBadStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcAssistCountRevive
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PlayerManager_C::GetNpcAssistCountRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetNpcAssistCountRevive");

	Params::BP_PlayerManager_C_GetNpcAssistCountRevive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.Set Assist Count_Internal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BadStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Revive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::Set_Assist_Count_Internal(int32 HP, int32 BadStatus, int32 Revive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "Set Assist Count_Internal");

	Params::BP_PlayerManager_C_Set_Assist_Count_Internal Parms{};

	Parms.HP = HP;
	Parms.BadStatus = BadStatus;
	Parms.Revive = Revive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetSkillLearnPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            InSkillID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetSkillLearnPoint(EPlayerID InPlayerID, EPlayerSkill InSkillID, int32* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetSkillLearnPoint");

	Params::BP_PlayerManager_C_GetSkillLearnPoint Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InSkillID = InSkillID;

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = Parms.Point;
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializeLevelDifferentExpRateData
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::InitializeLevelDifferentExpRateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializeLevelDifferentExpRateData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DebugCalcCurrentSkillPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PlayerManager_C::DebugCalcCurrentSkillPoint(EPlayerID ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DebugCalcCurrentSkillPoint");

	Params::BP_PlayerManager_C_DebugCalcCurrentSkillPoint Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.ReCalcRemainingSkillPoint
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PlayerManager_C::ReCalcRemainingSkillPoint(EPlayerID ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ReCalcRemainingSkillPoint");

	Params::BP_PlayerManager_C_ReCalcRemainingSkillPoint Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.ReserveMainPlayerDeadSequence
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ReserveMainPlayerDeadSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ReserveMainPlayerDeadSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.StartMainPlayerDeadSequence
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::StartMainPlayerDeadSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "StartMainPlayerDeadSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.ClearResuestStatusAssist
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::ClearResuestStatusAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "ClearResuestStatusAssist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DoStatusAssist
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::DoStatusAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DoStatusAssist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdateAssist
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::UpdateAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdateAssist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsNeedFrameWait");

	Params::BP_PlayerManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.InitializeManager
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EManagerProcTiming                      Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::InitializeManager(EManagerProcTiming Timing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "InitializeManager");

	Params::BP_PlayerManager_C_InitializeManager Parms{};

	Parms.Timing = Timing;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetBattleMemberCore
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::SetBattleMemberCore(ERSPartyPlayerKind Kind, EPlayerID ID, bool bSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetBattleMemberCore");

	Params::BP_PlayerManager_C_SetBattleMemberCore Parms{};

	Parms.Kind = Kind;
	Parms.ID = ID;
	Parms.bSpawn = bSpawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetHologramManageActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerHologram_C*             Param_HologramManageActor                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetHologramManageActor(class ABP_PlayerHologram_C** Param_HologramManageActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetHologramManageActor");

	Params::BP_PlayerManager_C_GetHologramManageActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_HologramManageActor != nullptr)
		*Param_HologramManageActor = Parms.Param_HologramManageActor;
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventEquipSetoMaskBegin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventEquipSetoMaskBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventEquipSetoMaskBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventEquipSetoMaskEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::EventEquipSetoMaskEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventEquipSetoMaskEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.UpdateTriggerEffect
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerManager_C::UpdateTriggerEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "UpdateTriggerEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetAjitoNpcWarpOffset
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetAjitoNpcWarpOffset(struct FVector* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetAjitoNpcWarpOffset");

	Params::BP_PlayerManager_C_GetAjitoNpcWarpOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsCanSASUse_fromNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASButton                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsCanSASUse_fromNative(E_SASButton Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsCanSASUse_fromNative");

	Params::BP_PlayerManager_C_IsCanSASUse_fromNative Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.CheckNpcDriveDefeatedCombinationVision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCSkillCommonInfo               SkillInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_PlayerManager_C::CheckNpcDriveDefeatedCombinationVision(struct FHCSkillCommonInfo& SkillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CheckNpcDriveDefeatedCombinationVision");

	Params::BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision Parms{};

	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	SkillInfo = std::move(Parms.SkillInfo);
}


// Function BP_PlayerManager.BP_PlayerManager_C.CheckNpcDriveCombinationVisionHit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCSkillCommonInfo               SkillInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_PlayerManager_C::CheckNpcDriveCombinationVisionHit(struct FHCSkillCommonInfo& SkillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "CheckNpcDriveCombinationVisionHit");

	Params::BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit Parms{};

	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	SkillInfo = std::move(Parms.SkillInfo);
}


// Function BP_PlayerManager.BP_PlayerManager_C.DoNotifyBattleSimulatorEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMissionCancel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::DoNotifyBattleSimulatorEnd(bool bMissionCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "DoNotifyBattleSimulatorEnd");

	Params::BP_PlayerManager_C_DoNotifyBattleSimulatorEnd Parms{};

	Parms.bMissionCancel = bMissionCancel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetPhotoModeFacialList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EPlayerFacialAnim>               FacialList                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetPhotoModeFacialList(ERSPartyPlayerKind Kind, TArray<EPlayerFacialAnim>* FacialList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetPhotoModeFacialList");

	Params::BP_PlayerManager_C_GetPhotoModeFacialList Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (FacialList != nullptr)
		*FacialList = std::move(Parms.FacialList);
}


// Function BP_PlayerManager.BP_PlayerManager_C.PlayPhotoModeFacialAnim
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerFacialAnim                       Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::PlayPhotoModeFacialAnim(ERSPartyPlayerKind Kind, EPlayerFacialAnim Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "PlayPhotoModeFacialAnim");

	Params::BP_PlayerManager_C_PlayPhotoModeFacialAnim Parms{};

	Parms.Kind = Kind;
	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.SetPhotoModeHood
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::SetPhotoModeHood(ERSPartyPlayerKind Kind, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "SetPhotoModeHood");

	Params::BP_PlayerManager_C_SetPhotoModeHood Parms{};

	Parms.Kind = Kind;
	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsVisiblePhotoModeHood
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bVisible                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsVisiblePhotoModeHood(ERSPartyPlayerKind Kind, bool* bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsVisiblePhotoModeHood");

	Params::BP_PlayerManager_C_IsVisiblePhotoModeHood Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bVisible != nullptr)
		*bVisible = Parms.bVisible;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetPhotoModeFacialList_Native
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EPlayerFacialAnim_Native>        ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

TArray<EPlayerFacialAnim_Native> ABP_PlayerManager_C::GetPhotoModeFacialList_Native(ERSPartyPlayerKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetPhotoModeFacialList_Native");

	Params::BP_PlayerManager_C_GetPhotoModeFacialList_Native Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsVisiblePhotoModeHood_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsVisiblePhotoModeHood_Native(ERSPartyPlayerKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsVisiblePhotoModeHood_Native");

	Params::BP_PlayerManager_C_IsVisiblePhotoModeHood_Native Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsEnablePhotoModePlayer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsEnablePhotoModePlayer(ERSPartyPlayerKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsEnablePhotoModePlayer");

	Params::BP_PlayerManager_C_IsEnablePhotoModePlayer Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsHoodCostumeID
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CostumeId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsHoodCostumeID(EPlayerID PlayerId, int32 CostumeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsHoodCostumeID");

	Params::BP_PlayerManager_C_IsHoodCostumeID Parms{};

	Parms.PlayerId = PlayerId;
	Parms.CostumeId = CostumeId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventManagerStart
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableTick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::EventManagerStart(bool EnableTick, bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventManagerStart");

	Params::BP_PlayerManager_C_EventManagerStart Parms{};

	Parms.EnableTick = EnableTick;
	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.EventManagerEnd
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestoreEnableTick                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RestoreVisibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "EventManagerEnd");

	Params::BP_PlayerManager_C_EventManagerEnd Parms{};

	Parms.RestoreEnableTick = RestoreEnableTick;
	Parms.RestoreVisibility = RestoreVisibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetCommandAccelerator
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAcceleratorParam                Command                                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::GetCommandAccelerator(struct FAcceleratorParam* Command, bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetCommandAccelerator");

	Params::BP_PlayerManager_C_GetCommandAccelerator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Command != nullptr)
		*Command = std::move(Parms.Command);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayerWeaponActorList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGetPlayerWeaponType                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   WeaponList                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetPlayerWeaponActorList(class AActor* OwnerPlayer, EGetPlayerWeaponType Type, TArray<class AActor*>* WeaponList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetPlayerWeaponActorList");

	Params::BP_PlayerManager_C_GetPlayerWeaponActorList Parms{};

	Parms.OwnerPlayer = OwnerPlayer;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponList != nullptr)
		*WeaponList = std::move(Parms.WeaponList);
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetMainPlayerCostumeID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CostumeId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetMainPlayerCostumeID(int32* CostumeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetMainPlayerCostumeID");

	Params::BP_PlayerManager_C_GetMainPlayerCostumeID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CostumeId != nullptr)
		*CostumeId = Parms.CostumeId;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetCameraPitchMaxAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MaxLowAngle                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxUpAngle                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetCameraPitchMaxAngle(float* MaxLowAngle, float* MaxUpAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetCameraPitchMaxAngle");

	Params::BP_PlayerManager_C_GetCameraPitchMaxAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxLowAngle != nullptr)
		*MaxLowAngle = Parms.MaxLowAngle;

	if (MaxUpAngle != nullptr)
		*MaxUpAngle = Parms.MaxUpAngle;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsInAntiWarpField
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bInAntiWarp                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsInAntiWarpField(bool* bInAntiWarp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsInAntiWarpField");

	Params::BP_PlayerManager_C_IsInAntiWarpField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInAntiWarp != nullptr)
		*bInAntiWarp = Parms.bInAntiWarp;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDeadRecover
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Playing                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsPlayingDeadRecover(bool* Playing) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayingDeadRecover");

	Params::BP_PlayerManager_C_IsPlayingDeadRecover Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Playing != nullptr)
		*Playing = Parms.Playing;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsForceBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bInfinite                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsForceBrainField(bool* bInfinite) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsForceBrainField");

	Params::BP_PlayerManager_C_IsForceBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInfinite != nullptr)
		*bInfinite = Parms.bInfinite;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsDisableGameOver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bDisableGameOver                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsDisableGameOver(bool* Param_bDisableGameOver) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsDisableGameOver");

	Params::BP_PlayerManager_C_IsDisableGameOver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bDisableGameOver != nullptr)
		*Param_bDisableGameOver = Parms.Param_bDisableGameOver;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetSkillData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerSkill                            Skill_id_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FCharactersSkillData             Skill_data                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetSkillData(EPlayerSkill Skill_id_in, bool* Return, struct FCharactersSkillData* Skill_data) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetSkillData");

	Params::BP_PlayerManager_C_GetSkillData Parms{};

	Parms.Skill_id_in = Skill_id_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;

	if (Skill_data != nullptr)
		*Skill_data = std::move(Parms.Skill_data);
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsDisableBrainFieldFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bDisableBrainFieldFlag                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsDisableBrainFieldFlag(bool* Param_bDisableBrainFieldFlag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsDisableBrainFieldFlag");

	Params::BP_PlayerManager_C_IsDisableBrainFieldFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bDisableBrainFieldFlag != nullptr)
		*Param_bDisableBrainFieldFlag = Parms.Param_bDisableBrainFieldFlag;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsSkillLearned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            Skill_id_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Learned                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsSkillLearned(EPlayerID Player_id_in, EPlayerSkill Skill_id_in, bool* Learned) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsSkillLearned");

	Params::BP_PlayerManager_C_IsSkillLearned Parms{};

	Parms.Player_id_in = Player_id_in;
	Parms.Skill_id_in = Skill_id_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Learned != nullptr)
		*Learned = Parms.Learned;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayerSkillPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerID                               Player_id_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Skill_point                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetPlayerSkillPoint(EPlayerID Player_id_in, int32* Skill_point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetPlayerSkillPoint");

	Params::BP_PlayerManager_C_GetPlayerSkillPoint Parms{};

	Parms.Player_id_in = Player_id_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Skill_point != nullptr)
		*Skill_point = Parms.Skill_point;
}


// Function BP_PlayerManager.BP_PlayerManager_C.GetLearnedSkillParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSkill                            Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLearned                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Parameter                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Parameter2                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::GetLearnedSkillParameter(EPlayerID PlayerId, EPlayerSkill Skill, bool* bLearned, float* Parameter, float* Parameter2) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "GetLearnedSkillParameter");

	Params::BP_PlayerManager_C_GetLearnedSkillParameter Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);

	if (bLearned != nullptr)
		*bLearned = Parms.bLearned;

	if (Parameter != nullptr)
		*Parameter = Parms.Parameter;

	if (Parameter2 != nullptr)
		*Parameter2 = Parms.Parameter2;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsHologramOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bON                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsHologramOn(bool* bON) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsHologramOn");

	Params::BP_PlayerManager_C_IsHologramOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bON != nullptr)
		*bON = Parms.bON;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsEnpcSASLinkAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsEnpcSASLinkAble(bool* bOK) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsEnpcSASLinkAble");

	Params::BP_PlayerManager_C_IsEnpcSASLinkAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsBrainCrashAccessExtraTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ExtraTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerManager_C::IsBrainCrashAccessExtraTime(bool* bEnable, float* ExtraTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsBrainCrashAccessExtraTime");

	Params::BP_PlayerManager_C_IsBrainCrashAccessExtraTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;

	if (ExtraTime != nullptr)
		*ExtraTime = Parms.ExtraTime;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsExecResurrect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bExec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsExecResurrect(bool* bExec) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsExecResurrect");

	Params::BP_PlayerManager_C_IsExecResurrect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExec != nullptr)
		*bExec = Parms.bExec;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsExecNpcReviveDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bExec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerManager_C::IsExecNpcReviveDirection(bool* bExec) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsExecNpcReviveDirection");

	Params::BP_PlayerManager_C_IsExecNpcReviveDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExec != nullptr)
		*bExec = Parms.bExec;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsExecNpcReviveDirection_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsExecNpcReviveDirection_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsExecNpcReviveDirection_CallFromCPP");

	Params::BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsExecResurrect_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsExecResurrect_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsExecResurrect_CallFromCPP");

	Params::BP_PlayerManager_C_IsExecResurrect_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDeadRecover_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsPlayingDeadRecover_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayingDeadRecover_CallFromCPP");

	Params::BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDead_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsPlayingDead_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayingDead_CallFromCPP");

	Params::BP_PlayerManager_C_IsPlayingDead_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingRecover_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerManager_C::IsPlayingRecover_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerManager_C", "IsPlayingRecover_CallFromCPP");

	Params::BP_PlayerManager_C_IsPlayingRecover_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

