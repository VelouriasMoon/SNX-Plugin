#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_EventManager

#include "Basic.hpp"

#include "BPI_EventManager_classes.hpp"
#include "BPI_EventManager_parameters.hpp"


namespace SDK
{

// Function BPI_EventManager.BPI_EventManager_C.ISetProgressID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ProgressId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EventManager_C::ISetProgressID(int32 ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "ISetProgressID");

	Params::BPI_EventManager_C_ISetProgressID Parms{};

	Parms.ProgressId = ProgressId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EventManager.BPI_EventManager_C.AddEventTriggerCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommand            TriggerCommand                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EventManager_C::AddEventTriggerCommand(const struct FFEventTriggerCommand& TriggerCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "AddEventTriggerCommand");

	Params::BPI_EventManager_C_AddEventTriggerCommand Parms{};

	Parms.TriggerCommand = std::move(TriggerCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EventManager.BPI_EventManager_C.LoadMakeEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MakeEventPathString                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_EventManager_C::LoadMakeEvent(const class FString& MakeEventPathString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "LoadMakeEvent");

	Params::BPI_EventManager_C_LoadMakeEvent Parms{};

	Parms.MakeEventPathString = std::move(MakeEventPathString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EventManager.BPI_EventManager_C.AddEventTriggerCommandByPath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventTriggerCheckType                  TriggerType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           TriggerCommandPath                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   TriggerWaitTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EventPriority                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EventManager_C::AddEventTriggerCommandByPath(EEventTriggerCheckType TriggerType, const class FString& TriggerCommandPath, float TriggerWaitTime, int32 EventPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "AddEventTriggerCommandByPath");

	Params::BPI_EventManager_C_AddEventTriggerCommandByPath Parms{};

	Parms.TriggerType = TriggerType;
	Parms.TriggerCommandPath = std::move(TriggerCommandPath);
	Parms.TriggerWaitTime = TriggerWaitTime;
	Parms.EventPriority = EventPriority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EventManager.BPI_EventManager_C.GetProgressID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ProgressId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EventManager_C::GetProgressID(int32* ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "GetProgressID");

	Params::BPI_EventManager_C_GetProgressID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProgressId != nullptr)
		*ProgressId = Parms.ProgressId;
}


// Function BPI_EventManager.BPI_EventManager_C.SetEventPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EventManager_C::SetEventPause(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "SetEventPause");

	Params::BPI_EventManager_C_SetEventPause Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EventManager.BPI_EventManager_C.IsEventPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EventManager_C::IsEventPause(bool* IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "IsEventPause");

	Params::BPI_EventManager_C_IsEventPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPause != nullptr)
		*IsPause = Parms.IsPause;
}


// Function BPI_EventManager.BPI_EventManager_C.GetEventTriggerCommendNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventTriggerCheckType                  CheckType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EventManager_C::GetEventTriggerCommendNum(EEventTriggerCheckType CheckType, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "GetEventTriggerCommendNum");

	Params::BPI_EventManager_C_GetEventTriggerCommendNum Parms{};

	Parms.CheckType = CheckType;

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BPI_EventManager.BPI_EventManager_C.AddBattleSimulatorEndEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           EventObject                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EventManager_C::AddBattleSimulatorEndEvent(class UClass* EventObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "AddBattleSimulatorEndEvent");

	Params::BPI_EventManager_C_AddBattleSimulatorEndEvent Parms{};

	Parms.EventObject = EventObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EventManager.BPI_EventManager_C.SetENPCPresetPlayerCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPlayerCameraPreset                     Preset_Basic                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EventManager_C::SetENPCPresetPlayerCamera(bool Enable, EPlayerCameraPreset Preset_Basic, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EventManager_C", "SetENPCPresetPlayerCamera");

	Params::BPI_EventManager_C_SetENPCPresetPlayerCamera Parms{};

	Parms.Enable = Enable;
	Parms.Preset_Basic = Preset_Basic;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}

}

