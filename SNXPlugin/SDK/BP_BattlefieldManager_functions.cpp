#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlefieldManager

#include "Basic.hpp"

#include "BP_BattlefieldManager_classes.hpp"
#include "BP_BattlefieldManager_parameters.hpp"


namespace SDK
{

// Function BP_BattlefieldManager.BP_BattlefieldManager_C.ExecuteUbergraph_BP_BattlefieldManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::ExecuteUbergraph_BP_BattlefieldManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "ExecuteUbergraph_BP_BattlefieldManager");

	Params::BP_BattlefieldManager_C_ExecuteUbergraph_BP_BattlefieldManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.SetEnableEnemyOutField
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BFGroupID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::SetEnableEnemyOutField(bool Enable, int32 BFGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "SetEnableEnemyOutField");

	Params::BP_BattlefieldManager_C_SetEnableEnemyOutField Parms{};

	Parms.Enable = Enable;
	Parms.BFGroupID = BFGroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BattlefieldManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnHpDownEvent_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCharacterHPEventInfo            EventInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_BattlefieldManager_C::OnHpDownEvent_Event_0(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnHpDownEvent_Event_0");

	Params::BP_BattlefieldManager_C_OnHpDownEvent_Event_0 Parms{};

	Parms.Actor = Actor;
	Parms.EventInfo = std::move(EventInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.GroupBattleStartDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattlefieldManager_C::GroupBattleStartDispatcher_Event_0(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "GroupBattleStartDispatcher_Event_0");

	Params::BP_BattlefieldManager_C_GroupBattleStartDispatcher_Event_0 Parms{};

	Parms.GroupID = GroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnDeadDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattlefieldManager_C::OnDeadDispatcher_Event_0(int32 GroupID, int32 SubGroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnDeadDispatcher_Event_0");

	Params::BP_BattlefieldManager_C_OnDeadDispatcher_Event_0 Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.BindEvents
// (BlueprintCallable, BlueprintEvent)

void ABP_BattlefieldManager_C::BindEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "BindEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.UpdateBattlefield
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::UpdateBattlefield(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "UpdateBattlefield");

	Params::BP_BattlefieldManager_C_UpdateBattlefield Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.UpdateInit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::UpdateInit(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "UpdateInit");

	Params::BP_BattlefieldManager_C_UpdateInit Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.UpdateStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::UpdateStart(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "UpdateStart");

	Params::BP_BattlefieldManager_C_UpdateStart Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.UpdateExec
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::UpdateExec(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "UpdateExec");

	Params::BP_BattlefieldManager_C_UpdateExec Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.UpdateEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::UpdateEnd(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "UpdateEnd");

	Params::BP_BattlefieldManager_C_UpdateEnd Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnEnemyDead
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattlefieldManager_C::OnEnemyDead(int32 GroupID, int32 SubGroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnEnemyDead");

	Params::BP_BattlefieldManager_C_OnEnemyDead Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnFoundBattlefieldStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattlefieldManager_C::OnFoundBattlefieldStart(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnFoundBattlefieldStart");

	Params::BP_BattlefieldManager_C_OnFoundBattlefieldStart Parms{};

	Parms.GroupID = GroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnHpDownEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCharacterHPEventInfo            EventInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_BattlefieldManager_C::OnHpDownEvent(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnHpDownEvent");

	Params::BP_BattlefieldManager_C_OnHpDownEvent Parms{};

	Parms.Actor = Actor;
	Parms.EventInfo = std::move(EventInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.InitializeAtAreaStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BattlefieldManager_C::InitializeAtAreaStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "InitializeAtAreaStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.UpdateFenceList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BattlefieldManager_C::UpdateFenceList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "UpdateFenceList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.ResetFenceRandomSeed
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::ResetFenceRandomSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "ResetFenceRandomSeed");

	Params::BP_BattlefieldManager_C_ResetFenceRandomSeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnLoad_SaveData
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::OnLoad_SaveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnLoad_SaveData");

	Params::BP_BattlefieldManager_C_OnLoad_SaveData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.OnSave_SaveData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::OnSave_SaveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "OnSave_SaveData");

	Params::BP_BattlefieldManager_C_OnSave_SaveData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.InitializeAtStartBattlefield
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBattlefieldInfo                 CurrentBFInfo                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::InitializeAtStartBattlefield(const struct FBattlefieldInfo& CurrentBFInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "InitializeAtStartBattlefield");

	Params::BP_BattlefieldManager_C_InitializeAtStartBattlefield Parms{};

	Parms.CurrentBFInfo = std::move(CurrentBFInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.CheckBattlefieldEventStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBattlefieldInfo                 BFInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_BattlefieldManager_C::CheckBattlefieldEventStart(const struct FBattlefieldInfo& BFInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "CheckBattlefieldEventStart");

	Params::BP_BattlefieldManager_C_CheckBattlefieldEventStart Parms{};

	Parms.BFInfo = std::move(BFInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.CheckBattlefieldEventStartOne
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TutorialGroupID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TutorialSubGroupID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Param_MakeEventActorClass                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattlefieldManager_C::CheckBattlefieldEventStartOne(int32 GroupID, int32 SubGroupID, int32 TutorialGroupID, int32 TutorialSubGroupID, class UClass* Param_MakeEventActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "CheckBattlefieldEventStartOne");

	Params::BP_BattlefieldManager_C_CheckBattlefieldEventStartOne Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;
	Parms.TutorialGroupID = TutorialGroupID;
	Parms.TutorialSubGroupID = TutorialSubGroupID;
	Parms.Param_MakeEventActorClass = Param_MakeEventActorClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.ResetAllBFInfoStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocationChange                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattlefieldManager_C::ResetAllBFInfoStatus(bool IsLocationChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "ResetAllBFInfoStatus");

	Params::BP_BattlefieldManager_C_ResetAllBFInfoStatus Parms{};

	Parms.IsLocationChange = IsLocationChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.IsAnyFenceEnabled
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::IsAnyFenceEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "IsAnyFenceEnabled");

	Params::BP_BattlefieldManager_C_IsAnyFenceEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.IsExistBattlefieldEnemies
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BFGroupID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FirstSubGroup                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::IsExistBattlefieldEnemies(int32 BFGroupID, int32 SubGroupID, int32* FirstSubGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "IsExistBattlefieldEnemies");

	Params::BP_BattlefieldManager_C_IsExistBattlefieldEnemies Parms{};

	Parms.BFGroupID = BFGroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);

	if (FirstSubGroup != nullptr)
		*FirstSubGroup = Parms.FirstSubGroup;

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.IsExistBattlefieldEnemiesStrictly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BFGroupID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BattlefieldManager_C::IsExistBattlefieldEnemiesStrictly(int32 BFGroupID, int32 SubGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "IsExistBattlefieldEnemiesStrictly");

	Params::BP_BattlefieldManager_C_IsExistBattlefieldEnemiesStrictly Parms{};

	Parms.BFGroupID = BFGroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlefieldManager.BP_BattlefieldManager_C.Setting Enemy BFGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BattlefieldManager_C::Setting_Enemy_BFGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlefieldManager_C", "Setting Enemy BFGroup");

	UObject::ProcessEvent(Func, nullptr);
}

}

