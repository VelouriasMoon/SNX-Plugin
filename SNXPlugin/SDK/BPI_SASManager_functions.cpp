#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SASManager

#include "Basic.hpp"

#include "BPI_SASManager_classes.hpp"
#include "BPI_SASManager_parameters.hpp"


namespace SDK
{

// Function BPI_SASManager.BPI_SASManager_C.Start
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCommand                     Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::Start(const struct FFSASCommand& Parameter, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "Start");

	Params::BPI_SASManager_C_Start Parms{};

	Parms.Parameter = std::move(Parameter);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SASManager.BPI_SASManager_C.RegisterActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::RegisterActor(class AActor* Actor, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "RegisterActor");

	Params::BPI_SASManager_C_RegisterActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SASManager.BPI_SASManager_C.UnregisterActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::UnregisterActor(class AActor* Actor, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "UnregisterActor");

	Params::BPI_SASManager_C_UnregisterActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SASManager.BPI_SASManager_C.CancelSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SAS_Kind                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCancelSASCost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::CancelSAS(E_SASKind SAS_Kind, bool bCancelSASCost, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "CancelSAS");

	Params::BPI_SASManager_C_CancelSAS Parms{};

	Parms.SAS_Kind = SAS_Kind;
	Parms.bCancelSASCost = bCancelSASCost;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SASManager.BPI_SASManager_C.EndSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCommand                     Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::EndSAS(const struct FFSASCommand& Parameter, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "EndSAS");

	Params::BPI_SASManager_C_EndSAS Parms{};

	Parms.Parameter = std::move(Parameter);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SASManager.BPI_SASManager_C.GetCurrentCutinSASType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SASType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SASManager_C::GetCurrentCutinSASType(E_SASKind* SASType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "GetCurrentCutinSASType");

	Params::BPI_SASManager_C_GetCurrentCutinSASType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SASType != nullptr)
		*SASType = Parms.SASType;
}


// Function BPI_SASManager.BPI_SASManager_C.IsReserved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               SAS_Kind                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reserved                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::IsReserved(E_SASKind SAS_Kind, bool* Reserved) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "IsReserved");

	Params::BPI_SASManager_C_IsReserved Parms{};

	Parms.SAS_Kind = SAS_Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (Reserved != nullptr)
		*Reserved = Parms.Reserved;
}


// Function BPI_SASManager.BPI_SASManager_C.IsAnyReserved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Reserved                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::IsAnyReserved(bool* Reserved) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "IsAnyReserved");

	Params::BPI_SASManager_C_IsAnyReserved Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Reserved != nullptr)
		*Reserved = Parms.Reserved;
}


// Function BPI_SASManager.BPI_SASManager_C.IsCutInReserved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reserved                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::IsCutInReserved(E_SASKind SasKind, bool* Reserved) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "IsCutInReserved");

	Params::BPI_SASManager_C_IsCutInReserved Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	if (Reserved != nullptr)
		*Reserved = Parms.Reserved;
}


// Function BPI_SASManager.BPI_SASManager_C.IsAnyCutInReserved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Reserved                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_SASManager_C::IsAnyCutInReserved(bool* Reserved) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "IsAnyCutInReserved");

	Params::BPI_SASManager_C_IsAnyCutInReserved Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Reserved != nullptr)
		*Reserved = Parms.Reserved;
}


// Function BPI_SASManager.BPI_SASManager_C.GetSASExtendTimeRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SASManager_C::GetSASExtendTimeRate(float* Rate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SASManager_C", "GetSASExtendTimeRate");

	Params::BPI_SASManager_C_GetSASExtendTimeRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}

}

