#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttackComponentBaseBP

#include "Basic.hpp"

#include "AttackComponentBaseBP_classes.hpp"
#include "AttackComponentBaseBP_parameters.hpp"


namespace SDK
{

// Function AttackComponentBaseBP.AttackComponentBaseBP_C.ExecuteUbergraph_AttackComponentBaseBP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::ExecuteUbergraph_AttackComponentBaseBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "ExecuteUbergraph_AttackComponentBaseBP");

	Params::AttackComponentBaseBP_C_ExecuteUbergraph_AttackComponentBaseBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.OnPlayerTickEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::OnPlayerTickEvent(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "OnPlayerTickEvent");

	Params::AttackComponentBaseBP_C_OnPlayerTickEvent Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.UnbindEventPlayerTick
// (BlueprintCallable, BlueprintEvent)

void UAttackComponentBaseBP_C::UnbindEventPlayerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "UnbindEventPlayerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.BindOnPlayerTick
// (BlueprintCallable, BlueprintEvent)

void UAttackComponentBaseBP_C::BindOnPlayerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "BindOnPlayerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UAttackComponentBaseBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.EventMontageBlendingOut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::EventMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "EventMontageBlendingOut");

	Params::AttackComponentBaseBP_C_EventMontageBlendingOut Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.UnbindOnMontageBlendingOut
// (BlueprintCallable, BlueprintEvent)

void UAttackComponentBaseBP_C::UnbindOnMontageBlendingOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "UnbindOnMontageBlendingOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.BindOnMontageBlendingOut
// (BlueprintCallable, BlueprintEvent)

void UAttackComponentBaseBP_C::BindOnMontageBlendingOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "BindOnMontageBlendingOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.StartSwordFade
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bin                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::StartSwordFade(bool bin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "StartSwordFade");

	Params::AttackComponentBaseBP_C_StartSwordFade Parms{};

	Parms.bin = bin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SetAttackState
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     WeaponMontage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAddComboCount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EWeaponAttackAnimStopType               WeaponAnimStopType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::SetAttackState(int32 Param, class UAnimMontage* Montage, class UAnimMontage* WeaponMontage, bool bAddComboCount, EWeaponAttackAnimStopType WeaponAnimStopType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "SetAttackState");

	Params::AttackComponentBaseBP_C_SetAttackState Parms{};

	Parms.Param = Param;
	Parms.Montage = Montage;
	Parms.WeaponMontage = WeaponMontage;
	Parms.bAddComboCount = bAddComboCount;
	Parms.WeaponAnimStopType = WeaponAnimStopType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SetBranchMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBranch                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::SetBranchMode(bool bBranch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "SetBranchMode");

	Params::AttackComponentBaseBP_C_SetBranchMode Parms{};

	Parms.bBranch = bBranch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SetIgnoreCheckStartAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnore                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::SetIgnoreCheckStartAttack(bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "SetIgnoreCheckStartAttack");

	Params::AttackComponentBaseBP_C_SetIgnoreCheckStartAttack Parms{};

	Parms.bIgnore = bIgnore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.SpawnEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFAttackEffectData               Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::SpawnEffect(struct FFAttackEffectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "SpawnEffect");

	Params::AttackComponentBaseBP_C_SpawnEffect Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.StopEffect
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFAttackEffectData               Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::StopEffect(struct FFAttackEffectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "StopEffect");

	Params::AttackComponentBaseBP_C_StopEffect Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.EndAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::EndAttack(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "EndAttack");

	Params::AttackComponentBaseBP_C_EndAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.EnableTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::EnableTick(class FName ClaimantName, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "EnableTick");

	Params::AttackComponentBaseBP_C_EnableTick Parms{};

	Parms.ClaimantName = ClaimantName;
	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.PreSetAttackState
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::PreSetAttackState(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "PreSetAttackState");

	Params::AttackComponentBaseBP_C_PreSetAttackState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.CopyPlayMontage
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::CopyPlayMontage(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "CopyPlayMontage");

	Params::AttackComponentBaseBP_C_CopyPlayMontage Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.CopyStopMontage
// (Public, BlueprintCallable, BlueprintEvent)

void UAttackComponentBaseBP_C::CopyStopMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "CopyStopMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsNameCurrentSection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SearchName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMatch                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsNameCurrentSection(class FName SearchName, bool* IsMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "IsNameCurrentSection");

	Params::AttackComponentBaseBP_C_IsNameCurrentSection Parms{};

	Parms.SearchName = SearchName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMatch != nullptr)
		*IsMatch = Parms.IsMatch;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.PlayHologramAnimation
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     WeaponMontage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHologramRootMotion                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MotionIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EHologramKind                           HologramKind                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::PlayHologramAnimation(EPlayerID PlayerId, class UAnimMontage* Montage, class UAnimMontage* WeaponMontage, bool bHologramRootMotion, int32 MotionIndex, EHologramKind HologramKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "PlayHologramAnimation");

	Params::AttackComponentBaseBP_C_PlayHologramAnimation Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Montage = Montage;
	Parms.WeaponMontage = WeaponMontage;
	Parms.bHologramRootMotion = bHologramRootMotion;
	Parms.MotionIndex = MotionIndex;
	Parms.HologramKind = HologramKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.PlayAttackMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     UpperAnimMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     WeaponAnimMontage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponAttackAnimStopType               WeaponAnimStopType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::PlayAttackMontage(class UAnimMontage* AnimMontage, class UAnimMontage* UpperAnimMontage, class UAnimMontage* WeaponAnimMontage, float PlayRate, class FName SectionName, EWeaponAttackAnimStopType WeaponAnimStopType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "PlayAttackMontage");

	Params::AttackComponentBaseBP_C_PlayAttackMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.UpperAnimMontage = UpperAnimMontage;
	Parms.WeaponAnimMontage = WeaponAnimMontage;
	Parms.PlayRate = PlayRate;
	Parms.SectionName = SectionName;
	Parms.WeaponAnimStopType = WeaponAnimStopType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.DoEndAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::DoEndAttack(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "DoEndAttack");

	Params::AttackComponentBaseBP_C_DoEndAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.DoPlayerTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::DoPlayerTick(float DeltaSeconds, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "DoPlayerTick");

	Params::AttackComponentBaseBP_C_DoPlayerTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.ChangeCharacterCollisionPriority
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterHitPriority                   Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::ChangeCharacterCollisionPriority(ECharacterHitPriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "ChangeCharacterCollisionPriority");

	Params::AttackComponentBaseBP_C_ChangeCharacterCollisionPriority Parms{};

	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsComboCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCombo                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsComboCheck(bool* bCombo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "IsComboCheck");

	Params::AttackComponentBaseBP_C_IsComboCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCombo != nullptr)
		*bCombo = Parms.bCombo;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.ResetFootIKCustomParam
// (Public, BlueprintCallable, BlueprintEvent)

void UAttackComponentBaseBP_C::ResetFootIKCustomParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "ResetFootIKCustomParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.isReserve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bReserve                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsReserve(bool* bReserve) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "isReserve");

	Params::AttackComponentBaseBP_C_IsReserve Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReserve != nullptr)
		*bReserve = Parms.bReserve;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsEnableAcceptInputAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsEnableAcceptInputAttack(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "IsEnableAcceptInputAttack");

	Params::AttackComponentBaseBP_C_IsEnableAcceptInputAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsEnableAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsEnableAttack(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "IsEnableAttack");

	Params::AttackComponentBaseBP_C_IsEnableAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsBranchMode
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bBranchFlag                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsBranchMode(bool* Param_bBranchFlag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "IsBranchMode");

	Params::AttackComponentBaseBP_C_IsBranchMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bBranchFlag != nullptr)
		*Param_bBranchFlag = Parms.Param_bBranchFlag;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.IsIgnoreCheckStartAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bIgnoreCheckStartAttack                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAttackComponentBaseBP_C::IsIgnoreCheckStartAttack(bool* Param_bIgnoreCheckStartAttack) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "IsIgnoreCheckStartAttack");

	Params::AttackComponentBaseBP_C_IsIgnoreCheckStartAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bIgnoreCheckStartAttack != nullptr)
		*Param_bIgnoreCheckStartAttack = Parms.Param_bIgnoreCheckStartAttack;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.GetCurrentMontage
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAttackComponentBaseBP_C::GetCurrentMontage(class UAnimMontage** Montage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "GetCurrentMontage");

	Params::AttackComponentBaseBP_C_GetCurrentMontage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Montage != nullptr)
		*Montage = Parms.Montage;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.GetBranchComboAttackInputKind
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// ERSAttackInputKind                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ERSAttackInputKind UAttackComponentBaseBP_C::GetBranchComboAttackInputKind() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "GetBranchComboAttackInputKind");

	Params::AttackComponentBaseBP_C_GetBranchComboAttackInputKind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AttackComponentBaseBP.AttackComponentBaseBP_C.GetBranchComboCount
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UAttackComponentBaseBP_C::GetBranchComboCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponentBaseBP_C", "GetBranchComboCount");

	Params::AttackComponentBaseBP_C_GetBranchComboCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

