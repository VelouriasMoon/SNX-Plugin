#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AjitoMember

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "S_AjitoPresentOmInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "ECharaFacialID_structs.hpp"
#include "EPlayerFacialAnim_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AjitoMember.BP_AjitoMember_C
// 0x0260 (0x05F0 - 0x0390)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_AjitoMember_C : public AAjitoMember
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULookAtComponent_C*                     LookAtComponent;                                   // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent;                      // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FacialWeightTimeLine_Track_C1F987CE41C5437D7D192BBB64F0D918; // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FacialWeightTimeLine__Direction_C1F987CE41C5437D7D192BBB64F0D918; // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E0[0x3];                                     // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FacialWeightTimeLine;                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             AnimInfoTable;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAjitoAnimInstance*                   AnimInst;                                          // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UASStateMachine*                        StateMachine;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UASAnimationSet*                        AnimationSet;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceActive;                                       // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E1[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AttachedActors;                                    // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TMap<class FName, struct FTransform>          AttachTransformMap;                                // 0x03F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         AttachHideActors;                                  // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class UDataTable*                             AttachTransDataTable;                              // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FVector>             AttachRotMap;                                      // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_AjitoManager_C*                     AjitoManager;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharaFacialID                                FacialMotionType;                                  // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E2[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           RipSyncAnimMontage;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   StoreVoiceAtomComp;                                // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FacialBaseAnimMontage;                             // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RipSyncDefaultMontage;                             // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FacialBaseDefaultMontage;                          // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetTalkRipSyncMontage;                           // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E3[0x3];                                     // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastPresentId;                                     // 0x04E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NeededPresentId;                                   // 0x04EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E4[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNpcDataParam*                          NpcDefaultParamData;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCostumeID;                                  // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E5[0x4];                                     // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CanAttachActors;                                   // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class FName                                   PrevAnimAssetName;                                 // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FS_AjitoPresentOmInfo> RandomOmActionInfo;                                // 0x0520(0x0050)(Edit, BlueprintVisible)
	bool                                          LookAtTrainning;                                   // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoRipSync;                                         // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCurrentBlend;                                    // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E6[0x1];                                     // 0x0573(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FacialInterpFrame;                                 // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PhotoModeBackupPrifileName;                        // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PhotoModeBackupGenerateOverlap;                    // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E7[0x3];                                     // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhotoModeBackupDitherValue;                        // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CurrentFacialMontage;                              // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           PhotoModeBackupFacialMontage;                      // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhotoModeBackupFacialBlendWeight;                  // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E8[0x4];                                     // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              PhotoModeFacialDataTableAsset;                     // 0x05A0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UDataTable*                             PhotoModeFacialDataTable;                          // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnablePhotoModeFacial;                            // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E9[0x7];                                     // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PhotoModeFacialMontage;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhotoModeBackupLod;                                // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AjitoMember(int32 EntryPoint);
	void RegisterEffectInterface(class URSParticleSystemComponentBase* Particle);
	void I_LoadFacialAnimation();
	void I_SetFacialMotionType(ECharaFacialID Param_FacialMotionType);
	void AnimNotify_AttachIdle();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Event_BrainTalkBt_BirthKizunaEp(EPlayerID Param_PlayerId);
	void RequestTalkEnd();
	void RequestTalkStart();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ChangeAnimation(ENpcAnimationKind AnimKind);
	void RegisterInterruptTelepoEffectInterface(class URSParticleSystemComponentBase* Particle);
	void FacialWeightTimeLine__UpdateFunc();
	void FacialWeightTimeLine__FinishedFunc();
	void UserConstructionScript();
	void InitializeActionSystem();
	void GetAnimationSet(TSoftObjectPtr<class UASAnimationSet>* NewParam);
	void GetStateMachine(TSoftObjectPtr<class UASStateMachine>* Param_StateMachine);
	void GetAnimInfoDataTableRow(struct FS_AjitoMemberInfo* Info, bool* Error);
	void LoadActionSystemAsset(class UASStateMachine** Param_StateMachine, class UASAnimationSet** Param_AnimationSet);
	void SetState(EAjitoMemberState Stat);
	void SetHoodVisible();
	void SetActive(bool Active);
	void InitializeAfterVisible();
	void FinalizeInAfterUnvisible();
	void Get_Actor_by_Name(class FName Param_Name, class AActor** Actor);
	void SetStateToSkeletalMesh(class USkeletalMeshComponent* SkeletalMesh, EAjitoMemberState State);
	void InitAttachment(const struct FAjitoMemberAttach& AjitoMemberAttach);
	void LoadAttachTable();
	bool UpdateActionIcon();
	void UpdateActionIconTalkOrKizuna();
	void SetActorHiddenAndCollision(class AActor* Actor, bool Visible);
	void Test();
	void UpdateAcceceryAttachment();
	void SetVisibleAllAttachment(bool Visible);
	bool IsTalkEnablePlayer();
	bool SetAttachmentVisible(bool Visible);
	void SetupCharacterMaterial(bool Enable);
	void GetAjitoManager(class ABP_AjitoManager_C** AjitoMan);
	void Load_Facial_Animation();
	void UpdateFacial();
	void UpdateRipSync();
	void StartRipSyncMontage();
	void StopRipSyncMontage();
	void LoadMessageRipSyncMontage(ECharaFacialID FacialID);
	void ResetRipSyncMontage();
	void IsRipSyncEnableVoice(bool* Enable);
	void UpdateLookAtEye(float DeltaTime);
	void CheckAndGetBookOmId(bool* IsBookReading, class FName* BookOmName, class FName* RemoveBgName);
	void IsItemPresented(class FName PresentID, bool* Presented);
	void SetCostume(int32 NewCostumeID);
	void UpdateCostume();
	void MakeAllAttachItemList();
	void UpdateIconOffset(float DeltaTime);
	void GetTagsActors(const class FString& Param_Tags, TArray<class AActor*>* Actors);
	void InitializeActionItemVisible();
	void IsMyMessage(const class FString& MessageLabel, bool* Result);
	void RemoveAllAttachedParticle();
	void Stop_SE();
	void StopFacialAnimation();
	void PlayFacialBaseDefaultMontage();
	void UpdateStateForTalkEventWithVoice();
	void IsClearScenario(EPlayerID Param_PlayerId, bool* Cleared);
	bool SetAjitoMemberMaterialScalarParameter(const class FName ParameterName, const float ParameterValue);
	void PlayPhotoModeFacial(EPlayerFacialAnim Anim);
	void DestroyAttachmentMeshComponent(class USceneComponent* DestroyMeshComponent, bool* bDummy);
	void EquipAttachmentInterface(EPlayerAttachment Param_Index, int32 AttachmentItemID, EPlayerID EquipPlayerID, int32 EquipMeshIndex, bool* bDummy);
	void GetAttachedCharacterMesh(EPlayerID EquipPlayerID, int32 EquipMeshIndex, class USkeletalMeshComponent** Mesh);
	void AttachmentVisibilityOffOnHead(bool bOff, bool* bDummy);
	void AttachmentVisibilityOffOnBackBody(bool bVisibility, float FadeTime, bool* bDummy);
	void SetVoiceAtomComp(class URSAtomComponentBase* AtomComp, bool* Return);
	void SetActiveInterface(bool Active, bool* Dummy);
	void GetAjitoPlayerID(EPlayerID* Param_PlayerId);
	void PlayPhotoModeFacialInterface(EPlayerFacialAnim Anim, bool* bDummy);
	void PhotoModeHoodVisibleInterface(bool bVisible, bool* bDummy);
	bool SetDrawMessageFacial(const class FString& MessageLabel);
	ETextGender GetNpcMeshGenderType();
	bool GetChangePeopleDataHidden();
	bool SetPhotoModeDither(float Value);
	bool EndPhotoMode();
	bool BeginPhotoMode();
	class USkeletalMeshComponent* GetPhotoModeSkeletalMesh();
	class FName GetPhotoModeDitherDataName();
	bool IsPhotoModeManualOverlap();
	class UCapsuleComponent* GetPhotoModeManualOverlapCapsule();
	bool PhotoModeTick();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AjitoMember_C">();
	}
	static class ABP_AjitoMember_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AjitoMember_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_AjitoMember_C) == 0x000010, "Wrong alignment on ABP_AjitoMember_C");
static_assert(sizeof(ABP_AjitoMember_C) == 0x0005F0, "Wrong size on ABP_AjitoMember_C");
static_assert(offsetof(ABP_AjitoMember_C, UberGraphFrame) == 0x000390, "Member 'ABP_AjitoMember_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, LookAtComponent) == 0x000398, "Member 'ABP_AjitoMember_C::LookAtComponent' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, BP_AttachmentManageComponent) == 0x0003A0, "Member 'ABP_AjitoMember_C::BP_AttachmentManageComponent' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialWeightTimeLine_Track_C1F987CE41C5437D7D192BBB64F0D918) == 0x0003A8, "Member 'ABP_AjitoMember_C::FacialWeightTimeLine_Track_C1F987CE41C5437D7D192BBB64F0D918' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialWeightTimeLine__Direction_C1F987CE41C5437D7D192BBB64F0D918) == 0x0003AC, "Member 'ABP_AjitoMember_C::FacialWeightTimeLine__Direction_C1F987CE41C5437D7D192BBB64F0D918' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialWeightTimeLine) == 0x0003B0, "Member 'ABP_AjitoMember_C::FacialWeightTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AnimInfoTable) == 0x0003B8, "Member 'ABP_AjitoMember_C::AnimInfoTable' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AnimInst) == 0x0003C0, "Member 'ABP_AjitoMember_C::AnimInst' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, StateMachine) == 0x0003C8, "Member 'ABP_AjitoMember_C::StateMachine' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AnimationSet) == 0x0003D0, "Member 'ABP_AjitoMember_C::AnimationSet' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, ForceActive) == 0x0003D8, "Member 'ABP_AjitoMember_C::ForceActive' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AttachedActors) == 0x0003E0, "Member 'ABP_AjitoMember_C::AttachedActors' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AttachTransformMap) == 0x0003F0, "Member 'ABP_AjitoMember_C::AttachTransformMap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AttachHideActors) == 0x000440, "Member 'ABP_AjitoMember_C::AttachHideActors' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AttachTransDataTable) == 0x000450, "Member 'ABP_AjitoMember_C::AttachTransDataTable' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AttachRotMap) == 0x000458, "Member 'ABP_AjitoMember_C::AttachRotMap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, AjitoManager) == 0x0004A8, "Member 'ABP_AjitoMember_C::AjitoManager' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialMotionType) == 0x0004B0, "Member 'ABP_AjitoMember_C::FacialMotionType' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, RipSyncAnimMontage) == 0x0004B8, "Member 'ABP_AjitoMember_C::RipSyncAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, StoreVoiceAtomComp) == 0x0004C0, "Member 'ABP_AjitoMember_C::StoreVoiceAtomComp' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialBaseAnimMontage) == 0x0004C8, "Member 'ABP_AjitoMember_C::FacialBaseAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, RipSyncDefaultMontage) == 0x0004D0, "Member 'ABP_AjitoMember_C::RipSyncDefaultMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialBaseDefaultMontage) == 0x0004D8, "Member 'ABP_AjitoMember_C::FacialBaseDefaultMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, IsSetTalkRipSyncMontage) == 0x0004E0, "Member 'ABP_AjitoMember_C::IsSetTalkRipSyncMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, LastPresentId) == 0x0004E4, "Member 'ABP_AjitoMember_C::LastPresentId' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, NeededPresentId) == 0x0004EC, "Member 'ABP_AjitoMember_C::NeededPresentId' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, NpcDefaultParamData) == 0x0004F8, "Member 'ABP_AjitoMember_C::NpcDefaultParamData' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, CurrentCostumeID) == 0x000500, "Member 'ABP_AjitoMember_C::CurrentCostumeID' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, CanAttachActors) == 0x000508, "Member 'ABP_AjitoMember_C::CanAttachActors' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PrevAnimAssetName) == 0x000518, "Member 'ABP_AjitoMember_C::PrevAnimAssetName' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, RandomOmActionInfo) == 0x000520, "Member 'ABP_AjitoMember_C::RandomOmActionInfo' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, LookAtTrainning) == 0x000570, "Member 'ABP_AjitoMember_C::LookAtTrainning' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, NoRipSync) == 0x000571, "Member 'ABP_AjitoMember_C::NoRipSync' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, IsCurrentBlend) == 0x000572, "Member 'ABP_AjitoMember_C::IsCurrentBlend' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, FacialInterpFrame) == 0x000574, "Member 'ABP_AjitoMember_C::FacialInterpFrame' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeBackupPrifileName) == 0x000578, "Member 'ABP_AjitoMember_C::PhotoModeBackupPrifileName' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeBackupGenerateOverlap) == 0x000580, "Member 'ABP_AjitoMember_C::PhotoModeBackupGenerateOverlap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeBackupDitherValue) == 0x000584, "Member 'ABP_AjitoMember_C::PhotoModeBackupDitherValue' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, CurrentFacialMontage) == 0x000588, "Member 'ABP_AjitoMember_C::CurrentFacialMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeBackupFacialMontage) == 0x000590, "Member 'ABP_AjitoMember_C::PhotoModeBackupFacialMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeBackupFacialBlendWeight) == 0x000598, "Member 'ABP_AjitoMember_C::PhotoModeBackupFacialBlendWeight' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeFacialDataTableAsset) == 0x0005A0, "Member 'ABP_AjitoMember_C::PhotoModeFacialDataTableAsset' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeFacialDataTable) == 0x0005C8, "Member 'ABP_AjitoMember_C::PhotoModeFacialDataTable' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, bEnablePhotoModeFacial) == 0x0005D0, "Member 'ABP_AjitoMember_C::bEnablePhotoModeFacial' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeFacialMontage) == 0x0005D8, "Member 'ABP_AjitoMember_C::PhotoModeFacialMontage' has a wrong offset!");
static_assert(offsetof(ABP_AjitoMember_C, PhotoModeBackupLod) == 0x0005E0, "Member 'ABP_AjitoMember_C::PhotoModeBackupLod' has a wrong offset!");

}

