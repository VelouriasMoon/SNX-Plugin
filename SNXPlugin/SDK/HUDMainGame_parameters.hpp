#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUDMainGame

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_ui_pk_weight_gauge_button_structs.hpp"
#include "UMG_structs.hpp"
#include "Enum_ui_object_guide_structs.hpp"
#include "Enum_ui_action_icon_device_type_structs.hpp"
#include "Enum_ui_pk_weight_gauge_size_structs.hpp"
#include "Engine_structs.hpp"
#include "PsychicGrabButtonType_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function HUDMainGame.HUDMainGame_C.BattleDamage2D__DelegateSignature
// 0x0014 (0x0014 - 0x0000)
struct HUDMainGame_C_BattleDamage2D__DelegateSignature final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Position2D;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCritical;                                        // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSasCritical;                                     // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrashCritical;                              // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHeal;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeak;                                            // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNoDamage;                                        // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_BattleDamage2D__DelegateSignature) == 0x000004, "Wrong alignment on HUDMainGame_C_BattleDamage2D__DelegateSignature");
static_assert(sizeof(HUDMainGame_C_BattleDamage2D__DelegateSignature) == 0x000014, "Wrong size on HUDMainGame_C_BattleDamage2D__DelegateSignature");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, Damage) == 0x000000, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::Damage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, Position2D) == 0x000004, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::Position2D' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsPlayer) == 0x00000C, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsPlayer' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsCritical) == 0x00000D, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsSasCritical) == 0x00000E, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsSasCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsBrainCrashCritical) == 0x00000F, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsHeal) == 0x000010, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsHeal' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsWeak) == 0x000011, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsWeak' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D__DelegateSignature, IsNoDamage) == 0x000012, "Member 'HUDMainGame_C_BattleDamage2D__DelegateSignature::IsNoDamage' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.BattleDamage3D__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct HUDMainGame_C_BattleDamage3D__DelegateSignature final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position3D;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCritical;                                        // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSasCritical;                                     // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrashCritical;                              // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHeal;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeak;                                            // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNoDamage;                                        // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656A[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   CrushTarget;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CrushBonus;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0024(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_BattleDamage3D__DelegateSignature) == 0x000008, "Wrong alignment on HUDMainGame_C_BattleDamage3D__DelegateSignature");
static_assert(sizeof(HUDMainGame_C_BattleDamage3D__DelegateSignature) == 0x000030, "Wrong size on HUDMainGame_C_BattleDamage3D__DelegateSignature");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, Damage) == 0x000000, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::Damage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, Position3D) == 0x000004, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::Position3D' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsPlayer) == 0x000010, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsPlayer' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsCritical) == 0x000011, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsSasCritical) == 0x000012, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsSasCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsBrainCrashCritical) == 0x000013, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsHeal) == 0x000014, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsHeal' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsWeak) == 0x000015, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsWeak' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, IsNoDamage) == 0x000016, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::IsNoDamage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, CrushTarget) == 0x000018, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::CrushTarget' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, CrushBonus) == 0x000020, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::CrushBonus' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage3D__DelegateSignature, Offset) == 0x000024, "Member 'HUDMainGame_C_BattleDamage3D__DelegateSignature::Offset' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ExecuteUbergraph_HUDMainGame
// 0x03A0 (0x03A0 - 0x0000)
struct HUDMainGame_C_ExecuteUbergraph_HUDMainGame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_656B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_EndCredits_C*                    CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StopAutoSaveIcon_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656C[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMainManager_C*                  CallFunc_GetGameMainManager_GameMainManager;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoSaveDataCapture_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_CustomEvent_Key_5;                          // 0x0028(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656E[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_CustomEvent_Key_4;                          // 0x0048(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_4;          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_5;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_6;          // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_7;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_8;          // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_9;          // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_10;         // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_11;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_12;         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_13;         // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_14;         // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_15;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_16;         // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_17;         // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_18;         // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_19;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_20;         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_21;         // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_22;         // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_23;         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_24;         // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_25;         // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_26;         // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_27;         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_28;         // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_29;         // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_30;         // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_31;         // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_32;         // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_33;         // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_34;         // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_35;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_36;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_37;         // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656F[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6570[0x1];                                     // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_DrawMessage_ReturnValue;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6571[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6572[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartTownName_ReturnValue;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartCharaName_ReturnValue;               // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartCharaName_ReturnValue_1;             // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6573[0x1];                                     // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_DrawChoiceMessage_ReturnValue;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartAutoSaveIcon_ReturnValue;            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SkipMessage_ReturnValue;                  // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6574[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6575[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_DrawMessage_ReturnValue_1;                // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6576[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 Damage, const struct FVector2D& Position2D, bool IsPlayer, bool IsCritical, bool IsSasCritical, bool IsBrainCrashCritical, bool IsHeal, bool IsWeak, bool IsNoDamage)> K2Node_CreateDelegate_OutputDelegate;              // 0x00CC(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_getDebugKeyboard_ReturnValue;             // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_getDebugKeyboard_ReturnValue_1;           // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isPlayBrainTuto_ReturnValue;              // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlayDecideAnimeBrainTuto_ReturnValue;     // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenBrainTuto_ReturnValue;                // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndStaffRoll_ReturnValue;               // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChangePlayUI_ReturnValue;                 // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 Damage, const struct FVector& Position3D, bool IsPlayer, bool IsCritical, bool IsSasCritical, bool IsBrainCrashCritical, bool IsHeal, bool IsWeak, bool IsNoDamage, class ARSBattleCharacter_C* CrushTarget, int32 CrushBonus, const struct FVector2D& Offset)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x00F8(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0110(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_1; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SkipMessage_ReturnValue_1;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLogBrainFieldAddTime_ReturnValue;      // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartCode_ReturnValue;                    // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_startVisionSimulatorResult_ReturnValue;   // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndLoading_ReturnValue;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartLoading_ReturnValue;                 // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6577[0x2];                                     // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_target_1;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CurrentHP;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_BaseHP;                         // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsAlways;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6578[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Time;                           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_CustomEvent_Player_1;                       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_index;                          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6579[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657A[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_CustomEvent_Boss;                           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_IsEnemy_self_CastInput;                   // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossHpDisp_IsDisp;                      // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657B[0x1];                                     // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_SizeX;                                // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SizeY;                                // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_visibleflag;                          // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657C[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control_1;     // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657D[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control_2;     // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657E[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_target;                         // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Bonus;                          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_657F[0x4];                                     // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character_1;         // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCrushBonus_ReturnValue;                // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecuteBrainTalkWidget_IsExecute;       // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6580[0x1];                                     // 0x01CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DelaySecond;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6581[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_InputManager_C*                     CallFunc_GetInputManager_BP_InputManager;          // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6582[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSGamepadLayout*                       CallFunc_GetGamepadLayout_ReturnValue;             // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGamepadLayout*                       CallFunc_GetGamepadLayout_ReturnValue_1;           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_3;                       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_3;                          // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_2;                       // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_2;                          // 0x021B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_1;                       // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_1;                          // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6583[0x2];                                     // 0x021E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FKey& KeyName)>   K2Node_CreateDelegate_OutputDelegate_4;            // 0x0220(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(const struct FKey& KeyName)>   K2Node_CreateDelegate_OutputDelegate_5;            // 0x0230(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6584[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x0248(0x0010)(ZeroConstructor, NoDestructor)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Damage_1;                       // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_Position2D;                     // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsPlayer_1;                     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsCritical_1;                   // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsSasCritical_1;                // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsBrainCrashCritical_1;         // 0x029B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsHeal_1;                       // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsWeak_1;                       // 0x029D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsNoDamage_1;                   // 0x029E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6585[0x1];                                     // 0x029F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Damage;                         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Position3D;                     // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsPlayer;                       // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsCritical;                     // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsSasCritical;                  // 0x02B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsBrainCrashCritical;           // 0x02B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsHeal;                         // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsWeak;                         // 0x02B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsNoDamage;                     // 0x02B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6586[0x1];                                     // 0x02B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_CustomEvent_CrushTarget;                    // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CrushBonus;                     // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_Offset;                         // 0x02C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_PhotoMode_C*                     CallFunc_Create_ReturnValue_1;                     // 0x02D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_MissionStartEnd_C*               CallFunc_Create_ReturnValue_2;                     // 0x02D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_MissionStartEnd_C*               CallFunc_Create_ReturnValue_3;                     // 0x02E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6587[0x6];                                     // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InputManager_C*                     CallFunc_GetInputManager_BP_InputManager_1;        // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue;                   // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6588[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout;                         // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key;                            // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6589[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_characterID;                          // 0x0304(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ExpressionID;                         // 0x0308(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_658A[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_MessageID;                            // 0x0310(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DrawSecond;                           // 0x0320(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658B[0x3];                                     // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        K2Node_CustomEvent_Player;                         // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeTown_ReturnValue;                   // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658C[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Name_1;                               // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentCustomTimeDilation;            // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_658D[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Name;                                 // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_MissionSimulator_C*              CallFunc_Create_ReturnValue_4;                     // 0x0368(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658E[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager_1;           // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658F[0x2];                                     // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isPause;                              // 0x0388(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlatFormType                                 CallFunc_GetPlatformType_ReturnValue;              // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x038A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6590[0x1];                                     // 0x038B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x038C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame) == 0x000008, "Wrong alignment on HUDMainGame_C_ExecuteUbergraph_HUDMainGame");
static_assert(sizeof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame) == 0x0003A0, "Wrong size on HUDMainGame_C_ExecuteUbergraph_HUDMainGame");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, EntryPoint) == 0x000000, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Create_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StopAutoSaveIcon_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StopAutoSaveIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetGameMainManager_GameMainManager) == 0x000018, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetGameMainManager_GameMainManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_DoSaveDataCapture_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_DoSaveDataCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Key_5) == 0x000028, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Key_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000040, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000041, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x000042, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Key_4) == 0x000048, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Key_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x000060, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_4) == 0x000061, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_5) == 0x000062, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_6) == 0x000063, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_7) == 0x000064, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_8) == 0x000065, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_9) == 0x000066, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_10) == 0x000067, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_11) == 0x000068, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_12) == 0x000069, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_13) == 0x00006A, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_14) == 0x00006B, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_15) == 0x00006C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_16) == 0x00006D, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_17) == 0x00006E, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_18) == 0x00006F, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_19) == 0x000070, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_20) == 0x000071, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_21) == 0x000072, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_22) == 0x000073, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_23) == 0x000074, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_24) == 0x000075, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_25) == 0x000076, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_26) == 0x000077, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_27) == 0x000078, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_28) == 0x000079, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_29) == 0x00007A, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_30) == 0x00007B, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_31) == 0x00007C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_32) == 0x00007D, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_33) == 0x00007E, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_34) == 0x00007F, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_35) == 0x000080, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_36) == 0x000081, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_KeyKey_ReturnValue_37) == 0x000082, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_KeyKey_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Not_PreBool_ReturnValue) == 0x000088, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Conv_IntToByte_ReturnValue) == 0x000089, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetValidValue_ReturnValue) == 0x00008A, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_DrawMessage_ReturnValue) == 0x00008C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_DrawMessage_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_SwitchInteger_CmpSuccess) == 0x000090, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Add_IntInt_ReturnValue_1) == 0x000094, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Percent_IntInt_ReturnValue) == 0x000098, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Not_PreBool_ReturnValue_1) == 0x00009C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000A0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StartTownName_ReturnValue) == 0x0000A4, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StartTownName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StartCharaName_ReturnValue) == 0x0000A5, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StartCharaName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StartCharaName_ReturnValue_1) == 0x0000A6, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StartCharaName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_DrawChoiceMessage_ReturnValue) == 0x0000A8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_DrawChoiceMessage_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StartAutoSaveIcon_ReturnValue) == 0x0000AC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StartAutoSaveIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000AD, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_SkipMessage_ReturnValue) == 0x0000AE, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_SkipMessage_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x0000B0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_DrawMessage_ReturnValue_1) == 0x0000BC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_DrawMessage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_PlayAnimation_ReturnValue) == 0x0000C0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000C8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate) == 0x0000CC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000DC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_getDebugKeyboard_ReturnValue) == 0x0000E0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_getDebugKeyboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_getDebugKeyboard_ReturnValue_1) == 0x0000E1, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_getDebugKeyboard_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_isPlayBrainTuto_ReturnValue) == 0x0000E2, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_isPlayBrainTuto_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_PlayDecideAnimeBrainTuto_ReturnValue) == 0x0000E3, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_PlayDecideAnimeBrainTuto_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_OpenBrainTuto_ReturnValue) == 0x0000E4, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_OpenBrainTuto_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsEndStaffRoll_ReturnValue) == 0x0000E5, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsEndStaffRoll_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_ChangePlayUI_ReturnValue) == 0x0000E6, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_ChangePlayUI_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000E7, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000E8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000F8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, Temp_int_Variable) == 0x000108, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x00010C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_3) == 0x000110, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_1) == 0x000120, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_SkipMessage_ReturnValue_1) == 0x000124, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_SkipMessage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_SetLogBrainFieldAddTime_ReturnValue) == 0x000125, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_SetLogBrainFieldAddTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StartCode_ReturnValue) == 0x000126, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StartCode_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_startVisionSimulatorResult_ReturnValue) == 0x000127, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_startVisionSimulatorResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EndLoading_ReturnValue) == 0x000128, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EndLoading_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_StartLoading_ReturnValue) == 0x000129, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_StartLoading_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_DeltaSeconds) == 0x00012C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_target_1) == 0x000130, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_target_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_CurrentHP) == 0x000138, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_CurrentHP' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_BaseHP) == 0x00013C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_BaseHP' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsAlways) == 0x000140, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsAlways' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Time) == 0x000144, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Player_1) == 0x000148, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Player_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_index) == 0x000150, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_index' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_AsRSBattle_Character) == 0x000158, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_bSuccess_1) == 0x000160, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Boss) == 0x000168, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Boss' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsEnemy_self_CastInput) == 0x000170, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsEnemy_self_CastInput' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsEnemy_bEnemy) == 0x000180, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_1) == 0x000181, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsBossHpDisp_IsDisp) == 0x000182, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsBossHpDisp_IsDisp' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_SizeX) == 0x000184, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_SizeX' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_SizeY) == 0x000188, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_SizeY' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_visibleflag) == 0x00018C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_visibleflag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_2) == 0x00018D, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_AsUi_Menu_Battle_Control_1) == 0x000190, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_AsUi_Menu_Battle_Control_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_bSuccess_2) == 0x000198, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_AsUi_Menu_Battle_Control_2) == 0x0001A0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_AsUi_Menu_Battle_Control_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_bSuccess_3) == 0x0001A8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_target) == 0x0001B0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Bonus) == 0x0001B8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Bonus' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_AsRSBattle_Character_1) == 0x0001C0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_AsRSBattle_Character_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_DynamicCast_bSuccess_4) == 0x0001C8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_SetCrushBonus_ReturnValue) == 0x0001C9, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_SetCrushBonus_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsExecuteBrainTalkWidget_IsExecute) == 0x0001CA, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsExecuteBrainTalkWidget_IsExecute' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_DelaySecond) == 0x0001CC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_DelaySecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Not_PreBool_ReturnValue_4) == 0x0001D0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Conv_FloatToString_ReturnValue) == 0x0001D8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Concat_StrStr_ReturnValue) == 0x0001E8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetInputManager_BP_InputManager) == 0x0001F8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetInputManager_BP_InputManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_3) == 0x000200, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetGamepadLayout_ReturnValue) == 0x000208, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetGamepadLayout_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetGamepadLayout_ReturnValue_1) == 0x000210, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetGamepadLayout_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_layout_3) == 0x000218, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_layout_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Key_3) == 0x000219, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Key_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_layout_2) == 0x00021A, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_layout_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Key_2) == 0x00021B, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Key_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_layout_1) == 0x00021C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_layout_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Key_1) == 0x00021D, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Key_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_4) == 0x000220, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_5) == 0x000230, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Add_FloatFloat_ReturnValue) == 0x000240, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000244, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_6) == 0x000248, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Conv_IntToString_ReturnValue) == 0x000258, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000268, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000278, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000288, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Damage_1) == 0x00028C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Damage_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Position2D) == 0x000290, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Position2D' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsPlayer_1) == 0x000298, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsPlayer_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsCritical_1) == 0x000299, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsCritical_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsSasCritical_1) == 0x00029A, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsSasCritical_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsBrainCrashCritical_1) == 0x00029B, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsBrainCrashCritical_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsHeal_1) == 0x00029C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsHeal_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsWeak_1) == 0x00029D, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsWeak_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsNoDamage_1) == 0x00029E, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsNoDamage_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Damage) == 0x0002A0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Position3D) == 0x0002A4, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Position3D' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsPlayer) == 0x0002B0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsPlayer' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsCritical) == 0x0002B1, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsSasCritical) == 0x0002B2, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsSasCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsBrainCrashCritical) == 0x0002B3, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsHeal) == 0x0002B4, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsHeal' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsWeak) == 0x0002B5, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsWeak' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_IsNoDamage) == 0x0002B6, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_IsNoDamage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_CrushTarget) == 0x0002B8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_CrushTarget' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_CrushBonus) == 0x0002C0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_CrushBonus' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Offset) == 0x0002C4, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Offset' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_speed) == 0x0002CC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Create_ReturnValue_1) == 0x0002D0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Create_ReturnValue_2) == 0x0002D8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Create_ReturnValue_3) == 0x0002E0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Create_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_4) == 0x0002E8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_5) == 0x0002E9, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetInputManager_BP_InputManager_1) == 0x0002F0, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetInputManager_BP_InputManager_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetOnPress_ReturnValue) == 0x0002F8, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetOnPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, Temp_int_Variable_1) == 0x0002FC, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_layout) == 0x000300, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_layout' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Key) == 0x000301, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Key' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_characterID) == 0x000304, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_characterID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_ExpressionID) == 0x000308, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_ExpressionID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_MessageID) == 0x000310, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_MessageID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_DrawSecond) == 0x000320, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_DrawSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_6) == 0x000324, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CustomEvent_Player) == 0x000328, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000330, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_ChangeTown_ReturnValue) == 0x000334, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_ChangeTown_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_Name_1) == 0x000338, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_Name_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_CurrentCustomTimeDilation) == 0x000348, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_Name) == 0x000350, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetGameSystemManager_Manager) == 0x000360, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_Create_ReturnValue_4) == 0x000368, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_Create_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_7) == 0x000370, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetGameSystemManager_Manager_1) == 0x000378, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetGameSystemManager_Manager_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000380, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_IsValid_ReturnValue_8) == 0x000381, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000384, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_Event_isPause) == 0x000388, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_Event_isPause' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GetPlatformType_ReturnValue) == 0x000389, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GetPlatformType_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00038A, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, K2Node_CreateDelegate_OutputDelegate_7) == 0x00038C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExecuteUbergraph_HUDMainGame, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00039C, "Member 'HUDMainGame_C_ExecuteUbergraph_HUDMainGame::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PauseBrainTalkForEventFromNative
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_PauseBrainTalkForEventFromNative final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PauseBrainTalkForEventFromNative) == 0x000001, "Wrong alignment on HUDMainGame_C_PauseBrainTalkForEventFromNative");
static_assert(sizeof(HUDMainGame_C_PauseBrainTalkForEventFromNative) == 0x000001, "Wrong size on HUDMainGame_C_PauseBrainTalkForEventFromNative");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEventFromNative, IsPause) == 0x000000, "Member 'HUDMainGame_C_PauseBrainTalkForEventFromNative::IsPause' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.RemoveCustomTimeDilation_FromNative
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_RemoveCustomTimeDilation_FromNative final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_RemoveCustomTimeDilation_FromNative) == 0x000008, "Wrong alignment on HUDMainGame_C_RemoveCustomTimeDilation_FromNative");
static_assert(sizeof(HUDMainGame_C_RemoveCustomTimeDilation_FromNative) == 0x000010, "Wrong size on HUDMainGame_C_RemoveCustomTimeDilation_FromNative");
static_assert(offsetof(HUDMainGame_C_RemoveCustomTimeDilation_FromNative, Param_Name) == 0x000000, "Member 'HUDMainGame_C_RemoveCustomTimeDilation_FromNative::Param_Name' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetCustomTimeDilation_FromNative
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetCustomTimeDilation_FromNative final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         CurrentCustomTimeDilation;                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetCustomTimeDilation_FromNative) == 0x000008, "Wrong alignment on HUDMainGame_C_SetCustomTimeDilation_FromNative");
static_assert(sizeof(HUDMainGame_C_SetCustomTimeDilation_FromNative) == 0x000018, "Wrong size on HUDMainGame_C_SetCustomTimeDilation_FromNative");
static_assert(offsetof(HUDMainGame_C_SetCustomTimeDilation_FromNative, Param_Name) == 0x000000, "Member 'HUDMainGame_C_SetCustomTimeDilation_FromNative::Param_Name' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetCustomTimeDilation_FromNative, CurrentCustomTimeDilation) == 0x000010, "Member 'HUDMainGame_C_SetCustomTimeDilation_FromNative::CurrentCustomTimeDilation' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Event_SetPlayer
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_Event_SetPlayer final
{
public:
	class ARsBattleHero_C*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_Event_SetPlayer) == 0x000008, "Wrong alignment on HUDMainGame_C_Event_SetPlayer");
static_assert(sizeof(HUDMainGame_C_Event_SetPlayer) == 0x000008, "Wrong size on HUDMainGame_C_Event_SetPlayer");
static_assert(offsetof(HUDMainGame_C_Event_SetPlayer, Player) == 0x000000, "Member 'HUDMainGame_C_Event_SetPlayer::Player' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OpenBrainTalkFromNative
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_OpenBrainTalkFromNative final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExpressionID;                                      // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 MessageID;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         DrawSecond;                                        // 0x0018(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_OpenBrainTalkFromNative) == 0x000008, "Wrong alignment on HUDMainGame_C_OpenBrainTalkFromNative");
static_assert(sizeof(HUDMainGame_C_OpenBrainTalkFromNative) == 0x000020, "Wrong size on HUDMainGame_C_OpenBrainTalkFromNative");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalkFromNative, CharacterId) == 0x000000, "Member 'HUDMainGame_C_OpenBrainTalkFromNative::CharacterId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalkFromNative, ExpressionID) == 0x000004, "Member 'HUDMainGame_C_OpenBrainTalkFromNative::ExpressionID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalkFromNative, MessageID) == 0x000008, "Member 'HUDMainGame_C_OpenBrainTalkFromNative::MessageID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalkFromNative, DrawSecond) == 0x000018, "Member 'HUDMainGame_C_OpenBrainTalkFromNative::DrawSecond' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OnOpenBrainMessage
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_OnOpenBrainMessage final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_OnOpenBrainMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_OnOpenBrainMessage");
static_assert(sizeof(HUDMainGame_C_OnOpenBrainMessage) == 0x000002, "Wrong size on HUDMainGame_C_OnOpenBrainMessage");
static_assert(offsetof(HUDMainGame_C_OnOpenBrainMessage, Layout) == 0x000000, "Member 'HUDMainGame_C_OnOpenBrainMessage::Layout' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OnOpenBrainMessage, Key) == 0x000001, "Member 'HUDMainGame_C_OnOpenBrainMessage::Key' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartStaffRoll
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_StartStaffRoll final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartStaffRoll) == 0x000004, "Wrong alignment on HUDMainGame_C_StartStaffRoll");
static_assert(sizeof(HUDMainGame_C_StartStaffRoll) == 0x000004, "Wrong size on HUDMainGame_C_StartStaffRoll");
static_assert(offsetof(HUDMainGame_C_StartStaffRoll, Speed) == 0x000000, "Member 'HUDMainGame_C_StartStaffRoll::Speed' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.BattleDamage_3D_Event
// 0x0030 (0x0030 - 0x0000)
struct HUDMainGame_C_BattleDamage_3D_Event final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position3D;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCritical;                                        // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSasCritical;                                     // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrashCritical;                              // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHeal;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeak;                                            // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNoDamage;                                        // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6591[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   CrushTarget;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CrushBonus;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0024(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_BattleDamage_3D_Event) == 0x000008, "Wrong alignment on HUDMainGame_C_BattleDamage_3D_Event");
static_assert(sizeof(HUDMainGame_C_BattleDamage_3D_Event) == 0x000030, "Wrong size on HUDMainGame_C_BattleDamage_3D_Event");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, Damage) == 0x000000, "Member 'HUDMainGame_C_BattleDamage_3D_Event::Damage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, Position3D) == 0x000004, "Member 'HUDMainGame_C_BattleDamage_3D_Event::Position3D' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsPlayer) == 0x000010, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsPlayer' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsCritical) == 0x000011, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsSasCritical) == 0x000012, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsSasCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsBrainCrashCritical) == 0x000013, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsHeal) == 0x000014, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsHeal' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsWeak) == 0x000015, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsWeak' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, IsNoDamage) == 0x000016, "Member 'HUDMainGame_C_BattleDamage_3D_Event::IsNoDamage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, CrushTarget) == 0x000018, "Member 'HUDMainGame_C_BattleDamage_3D_Event::CrushTarget' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, CrushBonus) == 0x000020, "Member 'HUDMainGame_C_BattleDamage_3D_Event::CrushBonus' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage_3D_Event, Offset) == 0x000024, "Member 'HUDMainGame_C_BattleDamage_3D_Event::Offset' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.BattleDamage2D_Event
// 0x0014 (0x0014 - 0x0000)
struct HUDMainGame_C_BattleDamage2D_Event final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Position2D;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCritical;                                        // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSasCritical;                                     // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrashCritical;                              // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHeal;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeak;                                            // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNoDamage;                                        // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_BattleDamage2D_Event) == 0x000004, "Wrong alignment on HUDMainGame_C_BattleDamage2D_Event");
static_assert(sizeof(HUDMainGame_C_BattleDamage2D_Event) == 0x000014, "Wrong size on HUDMainGame_C_BattleDamage2D_Event");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, Damage) == 0x000000, "Member 'HUDMainGame_C_BattleDamage2D_Event::Damage' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, Position2D) == 0x000004, "Member 'HUDMainGame_C_BattleDamage2D_Event::Position2D' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsPlayer) == 0x00000C, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsPlayer' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsCritical) == 0x00000D, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsSasCritical) == 0x00000E, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsSasCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsBrainCrashCritical) == 0x00000F, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsHeal) == 0x000010, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsHeal' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsWeak) == 0x000011, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsWeak' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleDamage2D_Event, IsNoDamage) == 0x000012, "Member 'HUDMainGame_C_BattleDamage2D_Event::IsNoDamage' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OnOpenDetailmap
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_OnOpenDetailmap final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_OnOpenDetailmap) == 0x000001, "Wrong alignment on HUDMainGame_C_OnOpenDetailmap");
static_assert(sizeof(HUDMainGame_C_OnOpenDetailmap) == 0x000002, "Wrong size on HUDMainGame_C_OnOpenDetailmap");
static_assert(offsetof(HUDMainGame_C_OnOpenDetailmap, Layout) == 0x000000, "Member 'HUDMainGame_C_OnOpenDetailmap::Layout' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OnOpenDetailmap, Key) == 0x000001, "Member 'HUDMainGame_C_OnOpenDetailmap::Key' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OnOpenMenu
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_OnOpenMenu final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_OnOpenMenu) == 0x000001, "Wrong alignment on HUDMainGame_C_OnOpenMenu");
static_assert(sizeof(HUDMainGame_C_OnOpenMenu) == 0x000002, "Wrong size on HUDMainGame_C_OnOpenMenu");
static_assert(offsetof(HUDMainGame_C_OnOpenMenu, Layout) == 0x000000, "Member 'HUDMainGame_C_OnOpenMenu::Layout' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OnOpenMenu, Key) == 0x000001, "Member 'HUDMainGame_C_OnOpenMenu::Key' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OnOpenWorldmap
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_OnOpenWorldmap final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_OnOpenWorldmap) == 0x000001, "Wrong alignment on HUDMainGame_C_OnOpenWorldmap");
static_assert(sizeof(HUDMainGame_C_OnOpenWorldmap) == 0x000002, "Wrong size on HUDMainGame_C_OnOpenWorldmap");
static_assert(offsetof(HUDMainGame_C_OnOpenWorldmap, Layout) == 0x000000, "Member 'HUDMainGame_C_OnOpenWorldmap::Layout' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OnOpenWorldmap, Key) == 0x000001, "Member 'HUDMainGame_C_OnOpenWorldmap::Key' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Event_PlayBrainTalkVoice
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_Event_PlayBrainTalkVoice final
{
public:
	float                                         DelaySecond;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_Event_PlayBrainTalkVoice) == 0x000004, "Wrong alignment on HUDMainGame_C_Event_PlayBrainTalkVoice");
static_assert(sizeof(HUDMainGame_C_Event_PlayBrainTalkVoice) == 0x000004, "Wrong size on HUDMainGame_C_Event_PlayBrainTalkVoice");
static_assert(offsetof(HUDMainGame_C_Event_PlayBrainTalkVoice, DelaySecond) == 0x000000, "Member 'HUDMainGame_C_Event_PlayBrainTalkVoice::DelaySecond' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Event_CrushBonus
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_Event_CrushBonus final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         bonus;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_Event_CrushBonus) == 0x000008, "Wrong alignment on HUDMainGame_C_Event_CrushBonus");
static_assert(sizeof(HUDMainGame_C_Event_CrushBonus) == 0x000010, "Wrong size on HUDMainGame_C_Event_CrushBonus");
static_assert(offsetof(HUDMainGame_C_Event_CrushBonus, Target) == 0x000000, "Member 'HUDMainGame_C_Event_CrushBonus::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Event_CrushBonus, bonus) == 0x000008, "Member 'HUDMainGame_C_Event_CrushBonus::bonus' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DebugChangeVisible
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_DebugChangeVisible final
{
public:
	bool                                          Visibleflag;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DebugChangeVisible) == 0x000001, "Wrong alignment on HUDMainGame_C_DebugChangeVisible");
static_assert(sizeof(HUDMainGame_C_DebugChangeVisible) == 0x000001, "Wrong size on HUDMainGame_C_DebugChangeVisible");
static_assert(offsetof(HUDMainGame_C_DebugChangeVisible, Visibleflag) == 0x000000, "Member 'HUDMainGame_C_DebugChangeVisible::Visibleflag' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ReceiveDrawHUD
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_ReceiveDrawHUD final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SizeY;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_ReceiveDrawHUD) == 0x000004, "Wrong alignment on HUDMainGame_C_ReceiveDrawHUD");
static_assert(sizeof(HUDMainGame_C_ReceiveDrawHUD) == 0x000008, "Wrong size on HUDMainGame_C_ReceiveDrawHUD");
static_assert(offsetof(HUDMainGame_C_ReceiveDrawHUD, SizeX) == 0x000000, "Member 'HUDMainGame_C_ReceiveDrawHUD::SizeX' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ReceiveDrawHUD, SizeY) == 0x000004, "Member 'HUDMainGame_C_ReceiveDrawHUD::SizeY' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.UpdateBossEnemyHpWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_UpdateBossEnemyHpWidget final
{
public:
	class ARSBattleCharacter_C*                   Boss;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_UpdateBossEnemyHpWidget) == 0x000008, "Wrong alignment on HUDMainGame_C_UpdateBossEnemyHpWidget");
static_assert(sizeof(HUDMainGame_C_UpdateBossEnemyHpWidget) == 0x000008, "Wrong size on HUDMainGame_C_UpdateBossEnemyHpWidget");
static_assert(offsetof(HUDMainGame_C_UpdateBossEnemyHpWidget, Boss) == 0x000000, "Member 'HUDMainGame_C_UpdateBossEnemyHpWidget::Boss' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.UpdatePlayerHpWidget
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_UpdatePlayerHpWidget final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_UpdatePlayerHpWidget) == 0x000008, "Wrong alignment on HUDMainGame_C_UpdatePlayerHpWidget");
static_assert(sizeof(HUDMainGame_C_UpdatePlayerHpWidget) == 0x000010, "Wrong size on HUDMainGame_C_UpdatePlayerHpWidget");
static_assert(offsetof(HUDMainGame_C_UpdatePlayerHpWidget, Player) == 0x000000, "Member 'HUDMainGame_C_UpdatePlayerHpWidget::Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_UpdatePlayerHpWidget, Param_Index) == 0x000008, "Member 'HUDMainGame_C_UpdatePlayerHpWidget::Param_Index' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetCharacterDamage
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetCharacterDamage final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentHp;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BaseHp;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlways;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6592[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetCharacterDamage) == 0x000008, "Wrong alignment on HUDMainGame_C_SetCharacterDamage");
static_assert(sizeof(HUDMainGame_C_SetCharacterDamage) == 0x000018, "Wrong size on HUDMainGame_C_SetCharacterDamage");
static_assert(offsetof(HUDMainGame_C_SetCharacterDamage, Target) == 0x000000, "Member 'HUDMainGame_C_SetCharacterDamage::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetCharacterDamage, CurrentHp) == 0x000008, "Member 'HUDMainGame_C_SetCharacterDamage::CurrentHp' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetCharacterDamage, BaseHp) == 0x00000C, "Member 'HUDMainGame_C_SetCharacterDamage::BaseHp' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetCharacterDamage, IsAlways) == 0x000010, "Member 'HUDMainGame_C_SetCharacterDamage::IsAlways' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetCharacterDamage, Time) == 0x000014, "Member 'HUDMainGame_C_SetCharacterDamage::Time' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_ReceiveTick) == 0x000004, "Wrong alignment on HUDMainGame_C_ReceiveTick");
static_assert(sizeof(HUDMainGame_C_ReceiveTick) == 0x000004, "Wrong size on HUDMainGame_C_ReceiveTick");
static_assert(offsetof(HUDMainGame_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'HUDMainGame_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.KeyboardPressInputEvent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_KeyboardPressInputEvent final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_KeyboardPressInputEvent) == 0x000008, "Wrong alignment on HUDMainGame_C_KeyboardPressInputEvent");
static_assert(sizeof(HUDMainGame_C_KeyboardPressInputEvent) == 0x000018, "Wrong size on HUDMainGame_C_KeyboardPressInputEvent");
static_assert(offsetof(HUDMainGame_C_KeyboardPressInputEvent, Key) == 0x000000, "Member 'HUDMainGame_C_KeyboardPressInputEvent::Key' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.KeyboardReleaseInputEvent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_KeyboardReleaseInputEvent final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_KeyboardReleaseInputEvent) == 0x000008, "Wrong alignment on HUDMainGame_C_KeyboardReleaseInputEvent");
static_assert(sizeof(HUDMainGame_C_KeyboardReleaseInputEvent) == 0x000018, "Wrong size on HUDMainGame_C_KeyboardReleaseInputEvent");
static_assert(offsetof(HUDMainGame_C_KeyboardReleaseInputEvent, Key) == 0x000000, "Member 'HUDMainGame_C_KeyboardReleaseInputEvent::Key' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitBattleMenu
// 0x00A0 (0x00A0 - 0x0000)
struct HUDMainGame_C_InitBattleMenu final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6593[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6594[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetRightPlayerBP_Player;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetLeftPlayerBP_Player;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6595[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6596[0x5];                                     // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface_2;    // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6597[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetMainPlayerBP_Player;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              CallFunc_Create_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_2;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnInitializeHUD_bDummy;                   // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_InitBattleMenu) == 0x000008, "Wrong alignment on HUDMainGame_C_InitBattleMenu");
static_assert(sizeof(HUDMainGame_C_InitBattleMenu) == 0x0000A0, "Wrong size on HUDMainGame_C_InitBattleMenu");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x000008, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1) == 0x000020, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_GetRightPlayerBP_Player) == 0x000038, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_GetRightPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_GetLeftPlayerBP_Player) == 0x000040, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_GetLeftPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_AsRSBattle_Player) == 0x000048, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x000058, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_bSuccess_3) == 0x000060, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_IsValid_ReturnValue_1) == 0x000062, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_AsRSGame_Mode_BPInterface_2) == 0x000068, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_AsRSGame_Mode_BPInterface_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_bSuccess_4) == 0x000078, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_GetMainPlayerBP_Player) == 0x000080, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_GetMainPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_Create_ReturnValue) == 0x000088, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_AsRSBattle_Player_2) == 0x000090, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_AsRSBattle_Player_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, K2Node_DynamicCast_bSuccess_5) == 0x000098, "Member 'HUDMainGame_C_InitBattleMenu::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_IsValid_ReturnValue_2) == 0x000099, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitBattleMenu, CallFunc_OnInitializeHUD_bDummy) == 0x00009A, "Member 'HUDMainGame_C_InitBattleMenu::CallFunc_OnInitializeHUD_bDummy' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetBrainCrashTarget
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_SetBrainCrashTarget final
{
public:
	class ARSBattleCharacter_C*                   Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBrainCrashTarget_bSuccess;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetBrainCrashTarget) == 0x000008, "Wrong alignment on HUDMainGame_C_SetBrainCrashTarget");
static_assert(sizeof(HUDMainGame_C_SetBrainCrashTarget) == 0x000010, "Wrong size on HUDMainGame_C_SetBrainCrashTarget");
static_assert(offsetof(HUDMainGame_C_SetBrainCrashTarget, Target) == 0x000000, "Member 'HUDMainGame_C_SetBrainCrashTarget::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetBrainCrashTarget, Success) == 0x000008, "Member 'HUDMainGame_C_SetBrainCrashTarget::Success' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetBrainCrashTarget, CallFunc_SetBrainCrashTarget_bSuccess) == 0x000009, "Member 'HUDMainGame_C_SetBrainCrashTarget::CallFunc_SetBrainCrashTarget_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitMessageWidget
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_InitMessageWidget final
{
public:
	class UWB_ui_Caption_1_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Caption_Guide_1_C*               CallFunc_Create_ReturnValue_1;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitMessageWidget) == 0x000008, "Wrong alignment on HUDMainGame_C_InitMessageWidget");
static_assert(sizeof(HUDMainGame_C_InitMessageWidget) == 0x000010, "Wrong size on HUDMainGame_C_InitMessageWidget");
static_assert(offsetof(HUDMainGame_C_InitMessageWidget, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitMessageWidget::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitMessageWidget, CallFunc_Create_ReturnValue_1) == 0x000008, "Member 'HUDMainGame_C_InitMessageWidget::CallFunc_Create_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogKillEnemy
// 0x0070 (0x0070 - 0x0000)
struct HUDMainGame_C_SetLogKillEnemy final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _ID;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6598[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Base;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class AMessageHudManager*                     CallFunc_GetMessageHudManager_MessageHudManager;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6599[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_UniqueNameFromId_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue_1;                    // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogKillEnemy) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogKillEnemy");
static_assert(sizeof(HUDMainGame_C_SetLogKillEnemy) == 0x000070, "Wrong size on HUDMainGame_C_SetLogKillEnemy");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CharacterId) == 0x000000, "Member 'HUDMainGame_C_SetLogKillEnemy::CharacterId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, _ID) == 0x000008, "Member 'HUDMainGame_C_SetLogKillEnemy::_ID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, _Base) == 0x000010, "Member 'HUDMainGame_C_SetLogKillEnemy::_Base' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_GetMessageHudManager_MessageHudManager) == 0x000020, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_GetMessageHudManager_MessageHudManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_Conv_NameToString_ReturnValue) == 0x000028, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_Conv_StringToInt_ReturnValue) == 0x000038, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_GetDataBaseManager_Manager) == 0x000040, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_UniqueNameFromId_ReturnValue) == 0x000048, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_UniqueNameFromId_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_GetText_ReturnValue) == 0x000050, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogKillEnemy, CallFunc_GetText_ReturnValue_1) == 0x000060, "Member 'HUDMainGame_C_SetLogKillEnemy::CallFunc_GetText_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PlayerUseItem
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_PlayerUseItem final
{
public:
	bool                                          IsUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UseCurrentItem_IsUse;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PlayerUseItem) == 0x000008, "Wrong alignment on HUDMainGame_C_PlayerUseItem");
static_assert(sizeof(HUDMainGame_C_PlayerUseItem) == 0x000018, "Wrong size on HUDMainGame_C_PlayerUseItem");
static_assert(offsetof(HUDMainGame_C_PlayerUseItem, IsUse) == 0x000000, "Member 'HUDMainGame_C_PlayerUseItem::IsUse' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PlayerUseItem, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_PlayerUseItem::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PlayerUseItem, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_PlayerUseItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PlayerUseItem, CallFunc_UseCurrentItem_IsUse) == 0x000011, "Member 'HUDMainGame_C_PlayerUseItem::CallFunc_UseCurrentItem_IsUse' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitLoading
// 0x0030 (0x0030 - 0x0000)
struct HUDMainGame_C_InitLoading final
{
public:
	class UWB_ui_Loading_chapter_C*               CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Loading_interlude_C*             CallFunc_Create_ReturnValue_1;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Loading_chara_1_C*               CallFunc_Create_ReturnValue_2;                     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Loading_1_C*                     CallFunc_Create_ReturnValue_3;                     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659B[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitLoading) == 0x000008, "Wrong alignment on HUDMainGame_C_InitLoading");
static_assert(sizeof(HUDMainGame_C_InitLoading) == 0x000030, "Wrong size on HUDMainGame_C_InitLoading");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitLoading::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_Create_ReturnValue_1) == 0x000008, "Member 'HUDMainGame_C_InitLoading::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_Create_ReturnValue_2) == 0x000010, "Member 'HUDMainGame_C_InitLoading::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_Create_ReturnValue_3) == 0x000018, "Member 'HUDMainGame_C_InitLoading::CallFunc_Create_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_MakeLiteralByte_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_InitLoading::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000021, "Member 'HUDMainGame_C_InitLoading::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000024, "Member 'HUDMainGame_C_InitLoading::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitLoading, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000028, "Member 'HUDMainGame_C_InitLoading::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PsychicIconSetWeakShow
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_PsychicIconSetWeakShow final
{
public:
	class ARSBattleCharacter_C*                   Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WeakIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicGrabButtonType                        Button;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShow;                                            // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PsychicIconSetWeakShow) == 0x000008, "Wrong alignment on HUDMainGame_C_PsychicIconSetWeakShow");
static_assert(sizeof(HUDMainGame_C_PsychicIconSetWeakShow) == 0x000010, "Wrong size on HUDMainGame_C_PsychicIconSetWeakShow");
static_assert(offsetof(HUDMainGame_C_PsychicIconSetWeakShow, Actor) == 0x000000, "Member 'HUDMainGame_C_PsychicIconSetWeakShow::Actor' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicIconSetWeakShow, WeakIndex) == 0x000008, "Member 'HUDMainGame_C_PsychicIconSetWeakShow::WeakIndex' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicIconSetWeakShow, Button) == 0x00000C, "Member 'HUDMainGame_C_PsychicIconSetWeakShow::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicIconSetWeakShow, IsShow) == 0x00000D, "Member 'HUDMainGame_C_PsychicIconSetWeakShow::IsShow' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.AddActionIcon
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_AddActionIcon final
{
public:
	class UUIActionIcon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Action_1_C*                      ActionIcon;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Action_1_C*                      CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_AddActionIcon) == 0x000008, "Wrong alignment on HUDMainGame_C_AddActionIcon");
static_assert(sizeof(HUDMainGame_C_AddActionIcon) == 0x000020, "Wrong size on HUDMainGame_C_AddActionIcon");
static_assert(offsetof(HUDMainGame_C_AddActionIcon, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_AddActionIcon::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_AddActionIcon, ActionIcon) == 0x000008, "Member 'HUDMainGame_C_AddActionIcon::ActionIcon' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_AddActionIcon, CallFunc_Create_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_AddActionIcon::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_AddActionIcon, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'HUDMainGame_C_AddActionIcon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.RemoveActionIcon
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_RemoveActionIcon final
{
public:
	class UUIActionIcon*                          ActionIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_RemoveActionIcon) == 0x000008, "Wrong alignment on HUDMainGame_C_RemoveActionIcon");
static_assert(sizeof(HUDMainGame_C_RemoveActionIcon) == 0x000010, "Wrong size on HUDMainGame_C_RemoveActionIcon");
static_assert(offsetof(HUDMainGame_C_RemoveActionIcon, ActionIcon) == 0x000000, "Member 'HUDMainGame_C_RemoveActionIcon::ActionIcon' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_RemoveActionIcon, ReturnValue) == 0x000008, "Member 'HUDMainGame_C_RemoveActionIcon::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_RemoveActionIcon, CallFunc_Array_RemoveItem_ReturnValue) == 0x000009, "Member 'HUDMainGame_C_RemoveActionIcon::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreateDetailMap
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CreateDetailMap final
{
public:
	class UWB_ui_DetailMap_Parts_1_C*             CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreateDetailMap) == 0x000008, "Wrong alignment on HUDMainGame_C_CreateDetailMap");
static_assert(sizeof(HUDMainGame_C_CreateDetailMap) == 0x000008, "Wrong size on HUDMainGame_C_CreateDetailMap");
static_assert(offsetof(HUDMainGame_C_CreateDetailMap, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreateDetailMap::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitAreaNext
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitAreaNext final
{
public:
	class UWB_ui_Area_next_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitAreaNext) == 0x000008, "Wrong alignment on HUDMainGame_C_InitAreaNext");
static_assert(sizeof(HUDMainGame_C_InitAreaNext) == 0x000008, "Wrong size on HUDMainGame_C_InitAreaNext");
static_assert(offsetof(HUDMainGame_C_InitAreaNext, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitAreaNext::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitAreaHere
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitAreaHere final
{
public:
	class UWB_ui_Area_here_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitAreaHere) == 0x000008, "Wrong alignment on HUDMainGame_C_InitAreaHere");
static_assert(sizeof(HUDMainGame_C_InitAreaHere) == 0x000008, "Wrong size on HUDMainGame_C_InitAreaHere");
static_assert(offsetof(HUDMainGame_C_InitAreaHere, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitAreaHere::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EndAreaNext
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_EndAreaNext final
{
public:
	bool                                          CallFunc_End_ReturnValue;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EndAreaNext) == 0x000001, "Wrong alignment on HUDMainGame_C_EndAreaNext");
static_assert(sizeof(HUDMainGame_C_EndAreaNext) == 0x000001, "Wrong size on HUDMainGame_C_EndAreaNext");
static_assert(offsetof(HUDMainGame_C_EndAreaNext, CallFunc_End_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_EndAreaNext::CallFunc_End_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsEndGameOver
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsEndGameOver final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndGameOver_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsEndGameOver) == 0x000001, "Wrong alignment on HUDMainGame_C_IsEndGameOver");
static_assert(sizeof(HUDMainGame_C_IsEndGameOver) == 0x000002, "Wrong size on HUDMainGame_C_IsEndGameOver");
static_assert(offsetof(HUDMainGame_C_IsEndGameOver, IsEnd) == 0x000000, "Member 'HUDMainGame_C_IsEndGameOver::IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndGameOver, CallFunc_IsEndGameOver_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsEndGameOver::CallFunc_IsEndGameOver_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetGameOverResult
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_GetGameOverResult final
{
public:
	EGameOverResult                               Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameOverResult                               CallFunc_GetGameOverResult_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetGameOverResult) == 0x000001, "Wrong alignment on HUDMainGame_C_GetGameOverResult");
static_assert(sizeof(HUDMainGame_C_GetGameOverResult) == 0x000002, "Wrong size on HUDMainGame_C_GetGameOverResult");
static_assert(offsetof(HUDMainGame_C_GetGameOverResult, Result) == 0x000000, "Member 'HUDMainGame_C_GetGameOverResult::Result' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetGameOverResult, CallFunc_GetGameOverResult_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_GetGameOverResult::CallFunc_GetGameOverResult_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.UpdateItemMenuUI
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_UpdateItemMenuUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_UpdateItemMenuUI) == 0x000008, "Wrong alignment on HUDMainGame_C_UpdateItemMenuUI");
static_assert(sizeof(HUDMainGame_C_UpdateItemMenuUI) == 0x000018, "Wrong size on HUDMainGame_C_UpdateItemMenuUI");
static_assert(offsetof(HUDMainGame_C_UpdateItemMenuUI, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_UpdateItemMenuUI::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_UpdateItemMenuUI, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_UpdateItemMenuUI::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_UpdateItemMenuUI, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_UpdateItemMenuUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitBrainTalk
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitBrainTalk final
{
public:
	class UWB_ui_BrainTalk_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitBrainTalk) == 0x000008, "Wrong alignment on HUDMainGame_C_InitBrainTalk");
static_assert(sizeof(HUDMainGame_C_InitBrainTalk) == 0x000008, "Wrong size on HUDMainGame_C_InitBrainTalk");
static_assert(offsetof(HUDMainGame_C_InitBrainTalk, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitBrainTalk::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OpenBrainTalk
// 0x0118 (0x0118 - 0x0000)
struct HUDMainGame_C_OpenBrainTalk final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExpressionID;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 MessageID;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         DrawSecond;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMessageDataCell                       _Cell;                                             // 0x0020(0x0060)(Edit, BlueprintVisible)
	int32                                         CallFunc_GetCurrentState_State;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659E[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGameInstance*                        CallFunc_GetRSGameInstance_RSGameInstance;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659F[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMessageDataCell                       CallFunc_GetBrainTalkMessage_ReturnValue;          // 0x00A8(0x0060)()
	class USoundAtomCue*                          CallFunc_GetAtomCueByLoadedCueSheet_ReturnValue;   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_PlayVoice_ReturnValue;                    // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_OpenBrainTalk) == 0x000008, "Wrong alignment on HUDMainGame_C_OpenBrainTalk");
static_assert(sizeof(HUDMainGame_C_OpenBrainTalk) == 0x000118, "Wrong size on HUDMainGame_C_OpenBrainTalk");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CharacterId) == 0x000000, "Member 'HUDMainGame_C_OpenBrainTalk::CharacterId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, ExpressionID) == 0x000004, "Member 'HUDMainGame_C_OpenBrainTalk::ExpressionID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, MessageID) == 0x000008, "Member 'HUDMainGame_C_OpenBrainTalk::MessageID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, DrawSecond) == 0x000018, "Member 'HUDMainGame_C_OpenBrainTalk::DrawSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, _Cell) == 0x000020, "Member 'HUDMainGame_C_OpenBrainTalk::_Cell' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_GetCurrentState_State) == 0x000080, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_GetCurrentState_State' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000084, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_GetSoundManager_SoundManager) == 0x000088, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_GetRSGameInstance_RSGameInstance) == 0x000090, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_GetRSGameInstance_RSGameInstance' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_GetBrainTalkManager_ReturnValue) == 0x0000A0, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_GetBrainTalkManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_GetBrainTalkMessage_ReturnValue) == 0x0000A8, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_GetBrainTalkMessage_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_GetAtomCueByLoadedCueSheet_ReturnValue) == 0x000108, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_GetAtomCueByLoadedCueSheet_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_OpenBrainTalk, CallFunc_PlayVoice_ReturnValue) == 0x000110, "Member 'HUDMainGame_C_OpenBrainTalk::CallFunc_PlayVoice_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DrawMessage
// 0x0048 (0x0048 - 0x0000)
struct HUDMainGame_C_DrawMessage final
{
public:
	class FString                                 Talker;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Message;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         WindowType;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawSecond;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableSkip;                                      // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A0[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   Voice;                                             // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkipVoiceEnd;                                    // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWaitMode;                                        // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A1[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddDrawMessageNormal_MessageIndex;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_DrawMessage) == 0x000008, "Wrong alignment on HUDMainGame_C_DrawMessage");
static_assert(sizeof(HUDMainGame_C_DrawMessage) == 0x000048, "Wrong size on HUDMainGame_C_DrawMessage");
static_assert(offsetof(HUDMainGame_C_DrawMessage, Talker) == 0x000000, "Member 'HUDMainGame_C_DrawMessage::Talker' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, Message) == 0x000010, "Member 'HUDMainGame_C_DrawMessage::Message' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, WindowType) == 0x000020, "Member 'HUDMainGame_C_DrawMessage::WindowType' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, DrawSecond) == 0x000024, "Member 'HUDMainGame_C_DrawMessage::DrawSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, IsEnableSkip) == 0x000028, "Member 'HUDMainGame_C_DrawMessage::IsEnableSkip' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, Voice) == 0x000030, "Member 'HUDMainGame_C_DrawMessage::Voice' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, IsSkipVoiceEnd) == 0x000038, "Member 'HUDMainGame_C_DrawMessage::IsSkipVoiceEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, IsWaitMode) == 0x000039, "Member 'HUDMainGame_C_DrawMessage::IsWaitMode' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, ReturnValue) == 0x00003C, "Member 'HUDMainGame_C_DrawMessage::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawMessage, CallFunc_AddDrawMessageNormal_MessageIndex) == 0x000040, "Member 'HUDMainGame_C_DrawMessage::CallFunc_AddDrawMessageNormal_MessageIndex' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetupSAS
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_SetupSAS final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetupSAS) == 0x000008, "Wrong alignment on HUDMainGame_C_SetupSAS");
static_assert(sizeof(HUDMainGame_C_SetupSAS) == 0x000010, "Wrong size on HUDMainGame_C_SetupSAS");
static_assert(offsetof(HUDMainGame_C_SetupSAS, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_SetupSAS::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetupSAS, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_SetupSAS::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsExecuteBrainTalkWidget
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsExecuteBrainTalkWidget final
{
public:
	bool                                          IsExecute;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsExecuteBrainTalkWidget) == 0x000001, "Wrong alignment on HUDMainGame_C_IsExecuteBrainTalkWidget");
static_assert(sizeof(HUDMainGame_C_IsExecuteBrainTalkWidget) == 0x000002, "Wrong size on HUDMainGame_C_IsExecuteBrainTalkWidget");
static_assert(offsetof(HUDMainGame_C_IsExecuteBrainTalkWidget, IsExecute) == 0x000000, "Member 'HUDMainGame_C_IsExecuteBrainTalkWidget::IsExecute' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsExecuteBrainTalkWidget, CallFunc_IsPlaying_IsPlaying) == 0x000001, "Member 'HUDMainGame_C_IsExecuteBrainTalkWidget::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsExecuteBrainTalkMessage
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_IsExecuteBrainTalkMessage final
{
public:
	bool                                          IsExecute;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndTalk_IsEnd;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsExecuteBrainTalkMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_IsExecuteBrainTalkMessage");
static_assert(sizeof(HUDMainGame_C_IsExecuteBrainTalkMessage) == 0x000003, "Wrong size on HUDMainGame_C_IsExecuteBrainTalkMessage");
static_assert(offsetof(HUDMainGame_C_IsExecuteBrainTalkMessage, IsExecute) == 0x000000, "Member 'HUDMainGame_C_IsExecuteBrainTalkMessage::IsExecute' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsExecuteBrainTalkMessage, CallFunc_IsEndTalk_IsEnd) == 0x000001, "Member 'HUDMainGame_C_IsExecuteBrainTalkMessage::CallFunc_IsEndTalk_IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsExecuteBrainTalkMessage, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsExecuteBrainTalkMessage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreatePartyWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CreatePartyWidget final
{
public:
	class UWB_ui_MainContents_C*                  CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreatePartyWidget) == 0x000008, "Wrong alignment on HUDMainGame_C_CreatePartyWidget");
static_assert(sizeof(HUDMainGame_C_CreatePartyWidget) == 0x000008, "Wrong size on HUDMainGame_C_CreatePartyWidget");
static_assert(offsetof(HUDMainGame_C_CreatePartyWidget, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreatePartyWidget::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.NextBrainTalkMessage
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_NextBrainTalkMessage final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBrainTalk_IsSuccess;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_NextBrainTalkMessage) == 0x000004, "Wrong alignment on HUDMainGame_C_NextBrainTalkMessage");
static_assert(sizeof(HUDMainGame_C_NextBrainTalkMessage) == 0x000008, "Wrong size on HUDMainGame_C_NextBrainTalkMessage");
static_assert(offsetof(HUDMainGame_C_NextBrainTalkMessage, Param_Index) == 0x000000, "Member 'HUDMainGame_C_NextBrainTalkMessage::Param_Index' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_NextBrainTalkMessage, ReturnValue) == 0x000004, "Member 'HUDMainGame_C_NextBrainTalkMessage::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_NextBrainTalkMessage, CallFunc_SetBrainTalk_IsSuccess) == 0x000005, "Member 'HUDMainGame_C_NextBrainTalkMessage::CallFunc_SetBrainTalk_IsSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogGetMoney
// 0x00E0 (0x00E0 - 0x0000)
struct HUDMainGame_C_SetLogGetMoney final
{
public:
	int32                                         GetMoney;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A2[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogGetMoney) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogGetMoney");
static_assert(sizeof(HUDMainGame_C_SetLogGetMoney) == 0x0000E0, "Wrong size on HUDMainGame_C_SetLogGetMoney");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, GetMoney) == 0x000000, "Member 'HUDMainGame_C_SetLogGetMoney::GetMoney' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, DrawTime) == 0x000004, "Member 'HUDMainGame_C_SetLogGetMoney::DrawTime' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_GetDataBaseManager_Manager) == 0x000008, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_GetText_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000048, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'HUDMainGame_C_SetLogGetMoney::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A0, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, K2Node_MakeArray_Array) == 0x0000A8, "Member 'HUDMainGame_C_SetLogGetMoney::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoney, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'HUDMainGame_C_SetLogGetMoney::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogGetExperience
// 0x00E0 (0x00E0 - 0x0000)
struct HUDMainGame_C_SetLogGetExperience final
{
public:
	int32                                         GetExp;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65A3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A4[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogGetExperience) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogGetExperience");
static_assert(sizeof(HUDMainGame_C_SetLogGetExperience) == 0x0000E0, "Wrong size on HUDMainGame_C_SetLogGetExperience");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, GetExp) == 0x000000, "Member 'HUDMainGame_C_SetLogGetExperience::GetExp' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_GetDataBaseManager_Manager) == 0x000008, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_GetText_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000048, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'HUDMainGame_C_SetLogGetExperience::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A0, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, K2Node_MakeArray_Array) == 0x0000A8, "Member 'HUDMainGame_C_SetLogGetExperience::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetExperience, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'HUDMainGame_C_SetLogGetExperience::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DrawChoiceMessage
// 0x0070 (0x0070 - 0x0000)
struct HUDMainGame_C_DrawChoiceMessage final
{
public:
	int32                                         ChoiceNum;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65A5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Choice0;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Choice1;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Choice2;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Choice3;                                           // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Choice4;                                           // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         DefaultIndex;                                      // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CancelIndex;                                       // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawSecond;                                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableCancel;                                    // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWaitMode;                                        // 0x0065(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A6[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddDrawMessageChoice_MessageIndex;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_DrawChoiceMessage) == 0x000008, "Wrong alignment on HUDMainGame_C_DrawChoiceMessage");
static_assert(sizeof(HUDMainGame_C_DrawChoiceMessage) == 0x000070, "Wrong size on HUDMainGame_C_DrawChoiceMessage");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, ChoiceNum) == 0x000000, "Member 'HUDMainGame_C_DrawChoiceMessage::ChoiceNum' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, Choice0) == 0x000008, "Member 'HUDMainGame_C_DrawChoiceMessage::Choice0' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, Choice1) == 0x000018, "Member 'HUDMainGame_C_DrawChoiceMessage::Choice1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, Choice2) == 0x000028, "Member 'HUDMainGame_C_DrawChoiceMessage::Choice2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, Choice3) == 0x000038, "Member 'HUDMainGame_C_DrawChoiceMessage::Choice3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, Choice4) == 0x000048, "Member 'HUDMainGame_C_DrawChoiceMessage::Choice4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, DefaultIndex) == 0x000058, "Member 'HUDMainGame_C_DrawChoiceMessage::DefaultIndex' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, CancelIndex) == 0x00005C, "Member 'HUDMainGame_C_DrawChoiceMessage::CancelIndex' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, DrawSecond) == 0x000060, "Member 'HUDMainGame_C_DrawChoiceMessage::DrawSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, IsEnableCancel) == 0x000064, "Member 'HUDMainGame_C_DrawChoiceMessage::IsEnableCancel' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, IsWaitMode) == 0x000065, "Member 'HUDMainGame_C_DrawChoiceMessage::IsWaitMode' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, ReturnValue) == 0x000068, "Member 'HUDMainGame_C_DrawChoiceMessage::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DrawChoiceMessage, CallFunc_AddDrawMessageChoice_MessageIndex) == 0x00006C, "Member 'HUDMainGame_C_DrawChoiceMessage::CallFunc_AddDrawMessageChoice_MessageIndex' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SkipMessage
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_SkipMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SkipMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_SkipMessage");
static_assert(sizeof(HUDMainGame_C_SkipMessage) == 0x000001, "Wrong size on HUDMainGame_C_SkipMessage");
static_assert(offsetof(HUDMainGame_C_SkipMessage, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_SkipMessage::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetChoiceResult
// 0x000C (0x000C - 0x0000)
struct HUDMainGame_C_GetChoiceResult final
{
public:
	int32                                         MessageIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChoiceResult_Result;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetChoiceResult) == 0x000004, "Wrong alignment on HUDMainGame_C_GetChoiceResult");
static_assert(sizeof(HUDMainGame_C_GetChoiceResult) == 0x00000C, "Wrong size on HUDMainGame_C_GetChoiceResult");
static_assert(offsetof(HUDMainGame_C_GetChoiceResult, MessageIndex) == 0x000000, "Member 'HUDMainGame_C_GetChoiceResult::MessageIndex' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetChoiceResult, Result) == 0x000004, "Member 'HUDMainGame_C_GetChoiceResult::Result' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetChoiceResult, CallFunc_GetChoiceResult_Result) == 0x000008, "Member 'HUDMainGame_C_GetChoiceResult::CallFunc_GetChoiceResult_Result' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetLastChoiceResult
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_GetLastChoiceResult final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLastChoiceResult_Result;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetLastChoiceResult) == 0x000004, "Wrong alignment on HUDMainGame_C_GetLastChoiceResult");
static_assert(sizeof(HUDMainGame_C_GetLastChoiceResult) == 0x000008, "Wrong size on HUDMainGame_C_GetLastChoiceResult");
static_assert(offsetof(HUDMainGame_C_GetLastChoiceResult, Result) == 0x000000, "Member 'HUDMainGame_C_GetLastChoiceResult::Result' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetLastChoiceResult, CallFunc_GetLastChoiceResult_Result) == 0x000004, "Member 'HUDMainGame_C_GetLastChoiceResult::CallFunc_GetLastChoiceResult_Result' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CheckEndMessage
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CheckEndMessage final
{
public:
	int32                                         MessageIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnd;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEndMessage_IsEnd;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CheckEndMessage) == 0x000004, "Wrong alignment on HUDMainGame_C_CheckEndMessage");
static_assert(sizeof(HUDMainGame_C_CheckEndMessage) == 0x000008, "Wrong size on HUDMainGame_C_CheckEndMessage");
static_assert(offsetof(HUDMainGame_C_CheckEndMessage, MessageIndex) == 0x000000, "Member 'HUDMainGame_C_CheckEndMessage::MessageIndex' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CheckEndMessage, IsEnd) == 0x000004, "Member 'HUDMainGame_C_CheckEndMessage::IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CheckEndMessage, CallFunc_CheckEndMessage_IsEnd) == 0x000005, "Member 'HUDMainGame_C_CheckEndMessage::CallFunc_CheckEndMessage_IsEnd' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CheckEndAllMessage
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_CheckEndAllMessage final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagCheckClose;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEndAllMessage_IsEnd;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CheckEndAllMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_CheckEndAllMessage");
static_assert(sizeof(HUDMainGame_C_CheckEndAllMessage) == 0x000003, "Wrong size on HUDMainGame_C_CheckEndAllMessage");
static_assert(offsetof(HUDMainGame_C_CheckEndAllMessage, IsEnd) == 0x000000, "Member 'HUDMainGame_C_CheckEndAllMessage::IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CheckEndAllMessage, FlagCheckClose) == 0x000001, "Member 'HUDMainGame_C_CheckEndAllMessage::FlagCheckClose' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CheckEndAllMessage, CallFunc_CheckEndAllMessage_IsEnd) == 0x000002, "Member 'HUDMainGame_C_CheckEndAllMessage::CallFunc_CheckEndAllMessage_IsEnd' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreateWorldMap
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CreateWorldMap final
{
public:
	class UWB_ui_WorldMap_C*                      CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreateWorldMap) == 0x000008, "Wrong alignment on HUDMainGame_C_CreateWorldMap");
static_assert(sizeof(HUDMainGame_C_CreateWorldMap) == 0x000008, "Wrong size on HUDMainGame_C_CreateWorldMap");
static_assert(offsetof(HUDMainGame_C_CreateWorldMap, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreateWorldMap::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartWorldMap
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_StartWorldMap final
{
public:
	bool                                          IsDetailMap;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartWorldMap) == 0x000001, "Wrong alignment on HUDMainGame_C_StartWorldMap");
static_assert(sizeof(HUDMainGame_C_StartWorldMap) == 0x000001, "Wrong size on HUDMainGame_C_StartWorldMap");
static_assert(offsetof(HUDMainGame_C_StartWorldMap, IsDetailMap) == 0x000000, "Member 'HUDMainGame_C_StartWorldMap::IsDetailMap' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.BattleMenuPlayDamageEffect
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_BattleMenuPlayDamageEffect final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_BattleMenuPlayDamageEffect) == 0x000008, "Wrong alignment on HUDMainGame_C_BattleMenuPlayDamageEffect");
static_assert(sizeof(HUDMainGame_C_BattleMenuPlayDamageEffect) == 0x000018, "Wrong size on HUDMainGame_C_BattleMenuPlayDamageEffect");
static_assert(offsetof(HUDMainGame_C_BattleMenuPlayDamageEffect, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_BattleMenuPlayDamageEffect::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleMenuPlayDamageEffect, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_BattleMenuPlayDamageEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_BattleMenuPlayDamageEffect, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_BattleMenuPlayDamageEffect::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetBrainTalkBugMode
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_SetBrainTalkBugMode final
{
public:
	bool                                          IsBug;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetBrainTalkBugMode) == 0x000001, "Wrong alignment on HUDMainGame_C_SetBrainTalkBugMode");
static_assert(sizeof(HUDMainGame_C_SetBrainTalkBugMode) == 0x000001, "Wrong size on HUDMainGame_C_SetBrainTalkBugMode");
static_assert(offsetof(HUDMainGame_C_SetBrainTalkBugMode, IsBug) == 0x000000, "Member 'HUDMainGame_C_SetBrainTalkBugMode::IsBug' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitCharaName
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitCharaName final
{
public:
	class UWB_ui_CharaName_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitCharaName) == 0x000008, "Wrong alignment on HUDMainGame_C_InitCharaName");
static_assert(sizeof(HUDMainGame_C_InitCharaName) == 0x000008, "Wrong size on HUDMainGame_C_InitCharaName");
static_assert(offsetof(HUDMainGame_C_InitCharaName, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitCharaName::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitTownName
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitTownName final
{
public:
	class UWB_ui_TownName_C*                      CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitTownName) == 0x000008, "Wrong alignment on HUDMainGame_C_InitTownName");
static_assert(sizeof(HUDMainGame_C_InitTownName) == 0x000008, "Wrong size on HUDMainGame_C_InitTownName");
static_assert(offsetof(HUDMainGame_C_InitTownName, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitTownName::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartCharaName
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartCharaName final
{
public:
	class FString                                 CharaID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartCharaName) == 0x000008, "Wrong alignment on HUDMainGame_C_StartCharaName");
static_assert(sizeof(HUDMainGame_C_StartCharaName) == 0x000018, "Wrong size on HUDMainGame_C_StartCharaName");
static_assert(offsetof(HUDMainGame_C_StartCharaName, CharaID) == 0x000000, "Member 'HUDMainGame_C_StartCharaName::CharaID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartCharaName, ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartCharaName::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartTownName
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_StartTownName final
{
public:
	int32                                         LocationId;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartTownName) == 0x000004, "Wrong alignment on HUDMainGame_C_StartTownName");
static_assert(sizeof(HUDMainGame_C_StartTownName) == 0x000008, "Wrong size on HUDMainGame_C_StartTownName");
static_assert(offsetof(HUDMainGame_C_StartTownName, LocationId) == 0x000000, "Member 'HUDMainGame_C_StartTownName::LocationId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTownName, ReturnValue) == 0x000004, "Member 'HUDMainGame_C_StartTownName::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Init
// 0x0058 (0x0058 - 0x0000)
struct HUDMainGame_C_Init final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          _IsEnableInit;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A8[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65AA[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetMainPlayerBP_Player;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65AB[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_ShopContents_C*                  CallFunc_Create_ReturnValue;                       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_Init) == 0x000008, "Wrong alignment on HUDMainGame_C_Init");
static_assert(sizeof(HUDMainGame_C_Init) == 0x000058, "Wrong size on HUDMainGame_C_Init");
static_assert(offsetof(HUDMainGame_C_Init, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_Init::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, _IsEnableInit) == 0x000001, "Member 'HUDMainGame_C_Init::_IsEnableInit' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, K2Node_SwitchInteger_CmpSuccess) == 0x000002, "Member 'HUDMainGame_C_Init::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_GetDataBaseManager_Manager) == 0x000008, "Member 'HUDMainGame_C_Init::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_Init::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'HUDMainGame_C_Init::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x000020, "Member 'HUDMainGame_C_Init::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'HUDMainGame_C_Init::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_GetMainPlayerBP_Player) == 0x000038, "Member 'HUDMainGame_C_Init::CallFunc_GetMainPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'HUDMainGame_C_Init::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_GetPlayerController_ReturnValue) == 0x000048, "Member 'HUDMainGame_C_Init::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Init, CallFunc_Create_ReturnValue) == 0x000050, "Member 'HUDMainGame_C_Init::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ProcBattleMenu
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_ProcBattleMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ProcBattleMenu) == 0x000001, "Wrong alignment on HUDMainGame_C_ProcBattleMenu");
static_assert(sizeof(HUDMainGame_C_ProcBattleMenu) == 0x000001, "Wrong size on HUDMainGame_C_ProcBattleMenu");
static_assert(offsetof(HUDMainGame_C_ProcBattleMenu, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_ProcBattleMenu::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsBrainTalkFinishedWait
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsBrainTalkFinishedWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndTalk_IsEnd;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsBrainTalkFinishedWait) == 0x000001, "Wrong alignment on HUDMainGame_C_IsBrainTalkFinishedWait");
static_assert(sizeof(HUDMainGame_C_IsBrainTalkFinishedWait) == 0x000002, "Wrong size on HUDMainGame_C_IsBrainTalkFinishedWait");
static_assert(offsetof(HUDMainGame_C_IsBrainTalkFinishedWait, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsBrainTalkFinishedWait::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsBrainTalkFinishedWait, CallFunc_IsEndTalk_IsEnd) == 0x000001, "Member 'HUDMainGame_C_IsBrainTalkFinishedWait::CallFunc_IsEndTalk_IsEnd' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetIntercept
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetIntercept final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetIntercept) == 0x000008, "Wrong alignment on HUDMainGame_C_SetIntercept");
static_assert(sizeof(HUDMainGame_C_SetIntercept) == 0x000018, "Wrong size on HUDMainGame_C_SetIntercept");
static_assert(offsetof(HUDMainGame_C_SetIntercept, Target) == 0x000000, "Member 'HUDMainGame_C_SetIntercept::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetIntercept, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetIntercept::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetIntercept, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetIntercept::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ResetIntercept
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_ResetIntercept final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ResetIntercept) == 0x000008, "Wrong alignment on HUDMainGame_C_ResetIntercept");
static_assert(sizeof(HUDMainGame_C_ResetIntercept) == 0x000010, "Wrong size on HUDMainGame_C_ResetIntercept");
static_assert(offsetof(HUDMainGame_C_ResetIntercept, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_ResetIntercept::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ResetIntercept, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_ResetIntercept::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.UpdateItemNum
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_UpdateItemNum final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_UpdateItemNum) == 0x000008, "Wrong alignment on HUDMainGame_C_UpdateItemNum");
static_assert(sizeof(HUDMainGame_C_UpdateItemNum) == 0x000010, "Wrong size on HUDMainGame_C_UpdateItemNum");
static_assert(offsetof(HUDMainGame_C_UpdateItemNum, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_UpdateItemNum::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_UpdateItemNum, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_UpdateItemNum::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetMessageVoice
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_GetMessageVoice final
{
public:
	class URSAtomComponentBase*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetMessageVoice) == 0x000008, "Wrong alignment on HUDMainGame_C_GetMessageVoice");
static_assert(sizeof(HUDMainGame_C_GetMessageVoice) == 0x000008, "Wrong size on HUDMainGame_C_GetMessageVoice");
static_assert(offsetof(HUDMainGame_C_GetMessageVoice, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_GetMessageVoice::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetSkipAllMessage
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_SetSkipAllMessage final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetSkipAllMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_SetSkipAllMessage");
static_assert(sizeof(HUDMainGame_C_SetSkipAllMessage) == 0x000001, "Wrong size on HUDMainGame_C_SetSkipAllMessage");
static_assert(offsetof(HUDMainGame_C_SetSkipAllMessage, IsSkip) == 0x000000, "Member 'HUDMainGame_C_SetSkipAllMessage::IsSkip' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartLoadingChara
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartLoadingChara final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65AC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAccountManager*                      CallFunc_GetRSAccountManager_RSAcountManager;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65AD[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartLoadingChara) == 0x000008, "Wrong alignment on HUDMainGame_C_StartLoadingChara");
static_assert(sizeof(HUDMainGame_C_StartLoadingChara) == 0x000018, "Wrong size on HUDMainGame_C_StartLoadingChara");
static_assert(offsetof(HUDMainGame_C_StartLoadingChara, ID) == 0x000000, "Member 'HUDMainGame_C_StartLoadingChara::ID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChara, CallFunc_GetRSAccountManager_RSAcountManager) == 0x000008, "Member 'HUDMainGame_C_StartLoadingChara::CallFunc_GetRSAccountManager_RSAcountManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChara, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartLoadingChara::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChara, CallFunc_MakeLiteralByte_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_StartLoadingChara::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChara, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'HUDMainGame_C_StartLoadingChara::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartLoadingInterlude
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartLoadingInterlude final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65AE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAccountManager*                      CallFunc_GetRSAccountManager_RSAcountManager;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65AF[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartLoadingInterlude) == 0x000008, "Wrong alignment on HUDMainGame_C_StartLoadingInterlude");
static_assert(sizeof(HUDMainGame_C_StartLoadingInterlude) == 0x000018, "Wrong size on HUDMainGame_C_StartLoadingInterlude");
static_assert(offsetof(HUDMainGame_C_StartLoadingInterlude, ID) == 0x000000, "Member 'HUDMainGame_C_StartLoadingInterlude::ID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingInterlude, CallFunc_GetRSAccountManager_RSAcountManager) == 0x000008, "Member 'HUDMainGame_C_StartLoadingInterlude::CallFunc_GetRSAccountManager_RSAcountManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingInterlude, CallFunc_MakeLiteralByte_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartLoadingInterlude::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingInterlude, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_StartLoadingInterlude::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingInterlude, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'HUDMainGame_C_StartLoadingInterlude::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartLoadingChapter
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartLoadingChapter final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAccountManager*                      CallFunc_GetRSAccountManager_RSAcountManager;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65B1[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartLoadingChapter) == 0x000008, "Wrong alignment on HUDMainGame_C_StartLoadingChapter");
static_assert(sizeof(HUDMainGame_C_StartLoadingChapter) == 0x000018, "Wrong size on HUDMainGame_C_StartLoadingChapter");
static_assert(offsetof(HUDMainGame_C_StartLoadingChapter, ID) == 0x000000, "Member 'HUDMainGame_C_StartLoadingChapter::ID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChapter, CallFunc_GetRSAccountManager_RSAcountManager) == 0x000008, "Member 'HUDMainGame_C_StartLoadingChapter::CallFunc_GetRSAccountManager_RSAcountManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChapter, CallFunc_MakeLiteralByte_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartLoadingChapter::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChapter, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_StartLoadingChapter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoadingChapter, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'HUDMainGame_C_StartLoadingChapter::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetUIAnimationSpeed
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetUIAnimationSpeed final
{
public:
	float                                         UIAnimationSpeed;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetUIAnimationSpeed) == 0x000004, "Wrong alignment on HUDMainGame_C_SetUIAnimationSpeed");
static_assert(sizeof(HUDMainGame_C_SetUIAnimationSpeed) == 0x000004, "Wrong size on HUDMainGame_C_SetUIAnimationSpeed");
static_assert(offsetof(HUDMainGame_C_SetUIAnimationSpeed, UIAnimationSpeed) == 0x000000, "Member 'HUDMainGame_C_SetUIAnimationSpeed::UIAnimationSpeed' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreateSaveLoad
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CreateSaveLoad final
{
public:
	class UWB_ui_SaveLoad_C*                      CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreateSaveLoad) == 0x000008, "Wrong alignment on HUDMainGame_C_CreateSaveLoad");
static_assert(sizeof(HUDMainGame_C_CreateSaveLoad) == 0x000008, "Wrong size on HUDMainGame_C_CreateSaveLoad");
static_assert(offsetof(HUDMainGame_C_CreateSaveLoad, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreateSaveLoad::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.initAutoSave
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitAutoSave final
{
public:
	class UWB_ui_Auto_Save_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitAutoSave) == 0x000008, "Wrong alignment on HUDMainGame_C_InitAutoSave");
static_assert(sizeof(HUDMainGame_C_InitAutoSave) == 0x000008, "Wrong size on HUDMainGame_C_InitAutoSave");
static_assert(offsetof(HUDMainGame_C_InitAutoSave, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitAutoSave::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicGauge
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicGauge final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicGauge) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicGauge");
static_assert(sizeof(HUDMainGame_C_SetPsychicGauge) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicGauge");
static_assert(offsetof(HUDMainGame_C_SetPsychicGauge, Param) == 0x000000, "Member 'HUDMainGame_C_SetPsychicGauge::Param' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGauge, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicGauge::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGauge, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicWeightGaugeStyle
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_SetPsychicWeightGaugeStyle final
{
public:
	Enum_ui_pk_weight_gauge_button                Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ui_pk_weight_gauge_size                  Size;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B3[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B5[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetPsychicWeightGaugeStyle) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicWeightGaugeStyle");
static_assert(sizeof(HUDMainGame_C_SetPsychicWeightGaugeStyle) == 0x000028, "Wrong size on HUDMainGame_C_SetPsychicWeightGaugeStyle");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, Button) == 0x000000, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, Size) == 0x000001, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::Size' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, MaxLevel) == 0x000004, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::MaxLevel' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000010, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, CallFunc_Conv_IntToByte_ReturnValue) == 0x000019, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00001C, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, CallFunc_GetValidValue_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000021, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeStyle, CallFunc_GetValidValue_ReturnValue_1) == 0x000022, "Member 'HUDMainGame_C_SetPsychicWeightGaugeStyle::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartPsychicWeightGauge
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_StartPsychicWeightGauge final
{
public:
	Enum_ui_pk_weight_gauge_button                Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExObject;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65B7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartPsychicWeightGauge) == 0x000008, "Wrong alignment on HUDMainGame_C_StartPsychicWeightGauge");
static_assert(sizeof(HUDMainGame_C_StartPsychicWeightGauge) == 0x000028, "Wrong size on HUDMainGame_C_StartPsychicWeightGauge");
static_assert(offsetof(HUDMainGame_C_StartPsychicWeightGauge, Button) == 0x000000, "Member 'HUDMainGame_C_StartPsychicWeightGauge::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPsychicWeightGauge, Target) == 0x000008, "Member 'HUDMainGame_C_StartPsychicWeightGauge::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPsychicWeightGauge, IsExObject) == 0x000010, "Member 'HUDMainGame_C_StartPsychicWeightGauge::IsExObject' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPsychicWeightGauge, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000018, "Member 'HUDMainGame_C_StartPsychicWeightGauge::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPsychicWeightGauge, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'HUDMainGame_C_StartPsychicWeightGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EndPsychicWeightGauge
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_EndPsychicWeightGauge final
{
public:
	Enum_ui_pk_weight_gauge_button                Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65B8[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EndPsychicWeightGauge) == 0x000008, "Wrong alignment on HUDMainGame_C_EndPsychicWeightGauge");
static_assert(sizeof(HUDMainGame_C_EndPsychicWeightGauge) == 0x000018, "Wrong size on HUDMainGame_C_EndPsychicWeightGauge");
static_assert(offsetof(HUDMainGame_C_EndPsychicWeightGauge, Button) == 0x000000, "Member 'HUDMainGame_C_EndPsychicWeightGauge::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPsychicWeightGauge, IsSuccess) == 0x000001, "Member 'HUDMainGame_C_EndPsychicWeightGauge::IsSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPsychicWeightGauge, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_EndPsychicWeightGauge::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPsychicWeightGauge, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_EndPsychicWeightGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPsychicWeightGauge, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_EndPsychicWeightGauge::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicWeightGauge
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_SetPsychicWeightGauge final
{
public:
	Enum_ui_pk_weight_gauge_button                Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65B9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Percent;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetPsychicWeightGauge) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicWeightGauge");
static_assert(sizeof(HUDMainGame_C_SetPsychicWeightGauge) == 0x000020, "Wrong size on HUDMainGame_C_SetPsychicWeightGauge");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, Button) == 0x000000, "Member 'HUDMainGame_C_SetPsychicWeightGauge::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, Level) == 0x000004, "Member 'HUDMainGame_C_SetPsychicWeightGauge::Level' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, Percent) == 0x000008, "Member 'HUDMainGame_C_SetPsychicWeightGauge::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'HUDMainGame_C_SetPsychicWeightGauge::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000010, "Member 'HUDMainGame_C_SetPsychicWeightGauge::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HUDMainGame_C_SetPsychicWeightGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, CallFunc_Conv_IntToByte_ReturnValue) == 0x000019, "Member 'HUDMainGame_C_SetPsychicWeightGauge::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGauge, CallFunc_GetValidValue_ReturnValue) == 0x00001A, "Member 'HUDMainGame_C_SetPsychicWeightGauge::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartPursuitIcon
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartPursuitIcon final
{
public:
	EPsychicObjectUniqueInputType                 LeftInput;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               LeftButton;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputType                 CenterInput;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               CenterButton;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputType                 RightInput;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               RightButton;                                       // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ui_action_icon_device_type               DeviceType;                                        // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagDrawMouse;                                     // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartPursuitIcon) == 0x000008, "Wrong alignment on HUDMainGame_C_StartPursuitIcon");
static_assert(sizeof(HUDMainGame_C_StartPursuitIcon) == 0x000018, "Wrong size on HUDMainGame_C_StartPursuitIcon");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, LeftInput) == 0x000000, "Member 'HUDMainGame_C_StartPursuitIcon::LeftInput' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, LeftButton) == 0x000001, "Member 'HUDMainGame_C_StartPursuitIcon::LeftButton' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, CenterInput) == 0x000002, "Member 'HUDMainGame_C_StartPursuitIcon::CenterInput' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, CenterButton) == 0x000003, "Member 'HUDMainGame_C_StartPursuitIcon::CenterButton' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, RightInput) == 0x000004, "Member 'HUDMainGame_C_StartPursuitIcon::RightInput' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, RightButton) == 0x000005, "Member 'HUDMainGame_C_StartPursuitIcon::RightButton' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, DeviceType) == 0x000006, "Member 'HUDMainGame_C_StartPursuitIcon::DeviceType' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, FlagDrawMouse) == 0x000007, "Member 'HUDMainGame_C_StartPursuitIcon::FlagDrawMouse' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_StartPursuitIcon::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPursuitIcon, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_StartPursuitIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EndPursuitIcon
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_EndPursuitIcon final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65BA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EndPursuitIcon) == 0x000008, "Wrong alignment on HUDMainGame_C_EndPursuitIcon");
static_assert(sizeof(HUDMainGame_C_EndPursuitIcon) == 0x000018, "Wrong size on HUDMainGame_C_EndPursuitIcon");
static_assert(offsetof(HUDMainGame_C_EndPursuitIcon, IsSuccess) == 0x000000, "Member 'HUDMainGame_C_EndPursuitIcon::IsSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPursuitIcon, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_EndPursuitIcon::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPursuitIcon, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_EndPursuitIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicWeightGaugeVisible
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicWeightGaugeVisible final
{
public:
	Enum_ui_pk_weight_gauge_button                Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65BB[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicWeightGaugeVisible) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicWeightGaugeVisible");
static_assert(sizeof(HUDMainGame_C_SetPsychicWeightGaugeVisible) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicWeightGaugeVisible");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeVisible, Button) == 0x000000, "Member 'HUDMainGame_C_SetPsychicWeightGaugeVisible::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeVisible, IsVisible) == 0x000001, "Member 'HUDMainGame_C_SetPsychicWeightGaugeVisible::IsVisible' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeVisible, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicWeightGaugeVisible::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeVisible, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicWeightGaugeVisible::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicWeightGaugeReverse
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicWeightGaugeReverse final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65BC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicWeightGaugeReverse) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicWeightGaugeReverse");
static_assert(sizeof(HUDMainGame_C_SetPsychicWeightGaugeReverse) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicWeightGaugeReverse");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeReverse, IsReverse) == 0x000000, "Member 'HUDMainGame_C_SetPsychicWeightGaugeReverse::IsReverse' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeReverse, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicWeightGaugeReverse::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeReverse, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicWeightGaugeReverse::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetPsychicWeightGaugeReverseFlag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_GetPsychicWeightGaugeReverseFlag final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65BD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPsychicWeightGaugeReverseFlag_IsReverse; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_GetPsychicWeightGaugeReverseFlag) == 0x000008, "Wrong alignment on HUDMainGame_C_GetPsychicWeightGaugeReverseFlag");
static_assert(sizeof(HUDMainGame_C_GetPsychicWeightGaugeReverseFlag) == 0x000018, "Wrong size on HUDMainGame_C_GetPsychicWeightGaugeReverseFlag");
static_assert(offsetof(HUDMainGame_C_GetPsychicWeightGaugeReverseFlag, IsReverse) == 0x000000, "Member 'HUDMainGame_C_GetPsychicWeightGaugeReverseFlag::IsReverse' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetPsychicWeightGaugeReverseFlag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_GetPsychicWeightGaugeReverseFlag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetPsychicWeightGaugeReverseFlag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_GetPsychicWeightGaugeReverseFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetPsychicWeightGaugeReverseFlag, CallFunc_GetPsychicWeightGaugeReverseFlag_IsReverse) == 0x000011, "Member 'HUDMainGame_C_GetPsychicWeightGaugeReverseFlag::CallFunc_GetPsychicWeightGaugeReverseFlag_IsReverse' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartTutorial
// 0x00E8 (0x00E8 - 0x0000)
struct HUDMainGame_C_StartTutorial final
{
public:
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHelpTutorialData*                      CallFunc_GetHelpTutorialData_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EHelpTutorial, struct FHelpDBDataCell>   CallFunc_GetHelpDataAsset_returnHelpMap;           // 0x0010(0x0050)()
	TArray<EHelpTutorial>                         CallFunc_Map_Keys_Keys;                            // 0x0060(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65BE[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager_1;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHelpTutorialData*                      CallFunc_GetHelpTutorialData_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EHelpTutorial, struct FHelpDBDataCell>   CallFunc_GetHelpDataAsset_returnHelpMap_1;         // 0x0088(0x0050)()
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartTutorial) == 0x000008, "Wrong alignment on HUDMainGame_C_StartTutorial");
static_assert(sizeof(HUDMainGame_C_StartTutorial) == 0x0000E8, "Wrong size on HUDMainGame_C_StartTutorial");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_GetDataBaseManager_Manager) == 0x000000, "Member 'HUDMainGame_C_StartTutorial::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_GetHelpTutorialData_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_StartTutorial::CallFunc_GetHelpTutorialData_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_GetHelpDataAsset_returnHelpMap) == 0x000010, "Member 'HUDMainGame_C_StartTutorial::CallFunc_GetHelpDataAsset_returnHelpMap' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_Map_Keys_Keys) == 0x000060, "Member 'HUDMainGame_C_StartTutorial::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'HUDMainGame_C_StartTutorial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_GetDataBaseManager_Manager_1) == 0x000078, "Member 'HUDMainGame_C_StartTutorial::CallFunc_GetDataBaseManager_Manager_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_GetHelpTutorialData_ReturnValue_1) == 0x000080, "Member 'HUDMainGame_C_StartTutorial::CallFunc_GetHelpTutorialData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_GetHelpDataAsset_returnHelpMap_1) == 0x000088, "Member 'HUDMainGame_C_StartTutorial::CallFunc_GetHelpDataAsset_returnHelpMap_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_Map_Length_ReturnValue) == 0x0000D8, "Member 'HUDMainGame_C_StartTutorial::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000DC, "Member 'HUDMainGame_C_StartTutorial::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutorial, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E0, "Member 'HUDMainGame_C_StartTutorial::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.UsePsychicGauge
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_UsePsychicGauge final
{
public:
	float                                         UsePercent;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65BF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_UsePsychicGauge) == 0x000008, "Wrong alignment on HUDMainGame_C_UsePsychicGauge");
static_assert(sizeof(HUDMainGame_C_UsePsychicGauge) == 0x000018, "Wrong size on HUDMainGame_C_UsePsychicGauge");
static_assert(offsetof(HUDMainGame_C_UsePsychicGauge, UsePercent) == 0x000000, "Member 'HUDMainGame_C_UsePsychicGauge::UsePercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_UsePsychicGauge, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_UsePsychicGauge::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_UsePsychicGauge, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_UsePsychicGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ErrorPsychicGauge
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_ErrorPsychicGauge final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ErrorPsychicGauge) == 0x000008, "Wrong alignment on HUDMainGame_C_ErrorPsychicGauge");
static_assert(sizeof(HUDMainGame_C_ErrorPsychicGauge) == 0x000010, "Wrong size on HUDMainGame_C_ErrorPsychicGauge");
static_assert(offsetof(HUDMainGame_C_ErrorPsychicGauge, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_ErrorPsychicGauge::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ErrorPsychicGauge, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_ErrorPsychicGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitDebugParam
// 0x01E0 (0x01E0 - 0x0000)
struct HUDMainGame_C_InitDebugParam final
{
public:
	class FText                                   _TextLoadingTipsID;                                // 0x0000(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextLogWaitTime;                                  // 0x0018(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextLogDrawTime;                                  // 0x0030(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextDriveGaugeEnableBrainField;                   // 0x0048(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextSasHidePsychicGauge;                          // 0x0060(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextSasHideLockIcon;                              // 0x0078(0x0018)(Edit, BlueprintVisible)
	class UUi_menu_battle_control_C*              _BattleMenu;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   _TextUnlockWorldMap;                               // 0x0098(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextInput;                                        // 0x00B0(0x0018)(Edit, BlueprintVisible)
	class FText                                   _TextVisible;                                      // 0x00C8(0x0018)(Edit, BlueprintVisible)
	class UObject*                                _Manager;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue;                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemInt*                      K2Node_DynamicCast_AsDebugging_Item_Int;           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C0[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetValue_ReturnValue;                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_1;                 // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemFloat*                    K2Node_DynamicCast_AsDebugging_Item_Float;         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C1[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValue_ReturnValue_1;                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_2;                 // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemFloat*                    K2Node_DynamicCast_AsDebugging_Item_Float_1;       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C2[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValue_ReturnValue_2;                   // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_3;                 // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool;          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetValue_ReturnValue_3;                   // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C3[0x6];                                     // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_4;                 // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool_1;        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetValue_ReturnValue_4;                   // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C4[0x6];                                     // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_5;                 // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool_2;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetValue_ReturnValue_5;                   // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C5[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_6;                 // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool_3;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetValue_ReturnValue_6;                   // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C6[0x6];                                     // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C7[0x6];                                     // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_7;                 // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool_4;        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C8[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue_8;                 // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool_5;        // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReady_ReturnValue;                      // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C9[0x5];                                     // 0x01CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_InitDebugParam) == 0x000008, "Wrong alignment on HUDMainGame_C_InitDebugParam");
static_assert(sizeof(HUDMainGame_C_InitDebugParam) == 0x0001E0, "Wrong size on HUDMainGame_C_InitDebugParam");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextLoadingTipsID) == 0x000000, "Member 'HUDMainGame_C_InitDebugParam::_TextLoadingTipsID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextLogWaitTime) == 0x000018, "Member 'HUDMainGame_C_InitDebugParam::_TextLogWaitTime' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextLogDrawTime) == 0x000030, "Member 'HUDMainGame_C_InitDebugParam::_TextLogDrawTime' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextDriveGaugeEnableBrainField) == 0x000048, "Member 'HUDMainGame_C_InitDebugParam::_TextDriveGaugeEnableBrainField' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextSasHidePsychicGauge) == 0x000060, "Member 'HUDMainGame_C_InitDebugParam::_TextSasHidePsychicGauge' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextSasHideLockIcon) == 0x000078, "Member 'HUDMainGame_C_InitDebugParam::_TextSasHideLockIcon' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _BattleMenu) == 0x000090, "Member 'HUDMainGame_C_InitDebugParam::_BattleMenu' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextUnlockWorldMap) == 0x000098, "Member 'HUDMainGame_C_InitDebugParam::_TextUnlockWorldMap' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextInput) == 0x0000B0, "Member 'HUDMainGame_C_InitDebugParam::_TextInput' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _TextVisible) == 0x0000C8, "Member 'HUDMainGame_C_InitDebugParam::_TextVisible' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, _Manager) == 0x0000E0, "Member 'HUDMainGame_C_InitDebugParam::_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue) == 0x0000E8, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Int) == 0x0000F0, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Int' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue) == 0x0000FC, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_1) == 0x000100, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Float) == 0x000108, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Float' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue_1) == 0x000114, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_2) == 0x000118, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Float_1) == 0x000120, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Float_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_2) == 0x000128, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue_2) == 0x00012C, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_3) == 0x000130, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Bool) == 0x000138, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Bool' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_3) == 0x000140, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue_3) == 0x000141, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_4) == 0x000148, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Bool_1) == 0x000150, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Bool_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_4) == 0x000158, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue_4) == 0x000159, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_5) == 0x000160, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Bool_2) == 0x000168, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Bool_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_5) == 0x000170, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue_5) == 0x000171, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_6) == 0x000178, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Bool_3) == 0x000180, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Bool_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_6) == 0x000188, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetValue_ReturnValue_6) == 0x000189, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000190, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_7) == 0x000198, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_IsValid_ReturnValue) == 0x000199, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_7) == 0x0001A0, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Bool_4) == 0x0001A8, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Bool_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_8) == 0x0001B0, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_SearchItem_ReturnValue_8) == 0x0001B8, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_SearchItem_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_AsDebugging_Item_Bool_5) == 0x0001C0, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_AsDebugging_Item_Bool_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, K2Node_DynamicCast_bSuccess_9) == 0x0001C8, "Member 'HUDMainGame_C_InitDebugParam::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_IsValid_ReturnValue_1) == 0x0001C9, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_IsReady_ReturnValue) == 0x0001CA, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_IsReady_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_GetDebuggingManager_Manager) == 0x0001D0, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_Not_PreBool_ReturnValue) == 0x0001D8, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_InitDebugParam, CallFunc_BooleanAND_ReturnValue) == 0x0001D9, "Member 'HUDMainGame_C_InitDebugParam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetDebugInvisible
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_GetDebugInvisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTDebugInvisibleAll_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_GetDebugInvisible) == 0x000001, "Wrong alignment on HUDMainGame_C_GetDebugInvisible");
static_assert(sizeof(HUDMainGame_C_GetDebugInvisible) == 0x000002, "Wrong size on HUDMainGame_C_GetDebugInvisible");
static_assert(offsetof(HUDMainGame_C_GetDebugInvisible, IsVisible) == 0x000000, "Member 'HUDMainGame_C_GetDebugInvisible::IsVisible' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetDebugInvisible, CallFunc_IsTDebugInvisibleAll_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_GetDebugInvisible::CallFunc_IsTDebugInvisibleAll_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetDebugMinimapDispAdd
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_SetDebugMinimapDispAdd final
{
public:
	bool                                          Param_DebugMinimapDispAdd;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetDebugMinimapDispAdd) == 0x000001, "Wrong alignment on HUDMainGame_C_SetDebugMinimapDispAdd");
static_assert(sizeof(HUDMainGame_C_SetDebugMinimapDispAdd) == 0x000001, "Wrong size on HUDMainGame_C_SetDebugMinimapDispAdd");
static_assert(offsetof(HUDMainGame_C_SetDebugMinimapDispAdd, Param_DebugMinimapDispAdd) == 0x000000, "Member 'HUDMainGame_C_SetDebugMinimapDispAdd::Param_DebugMinimapDispAdd' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetDebugMinimapDispAdd
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_GetDebugMinimapDispAdd final
{
public:
	bool                                          Param_DebugMinimapDispAdd;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_GetDebugMinimapDispAdd) == 0x000001, "Wrong alignment on HUDMainGame_C_GetDebugMinimapDispAdd");
static_assert(sizeof(HUDMainGame_C_GetDebugMinimapDispAdd) == 0x000001, "Wrong size on HUDMainGame_C_GetDebugMinimapDispAdd");
static_assert(offsetof(HUDMainGame_C_GetDebugMinimapDispAdd, Param_DebugMinimapDispAdd) == 0x000000, "Member 'HUDMainGame_C_GetDebugMinimapDispAdd::Param_DebugMinimapDispAdd' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StopAutoSaveIcon
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_StopAutoSaveIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StopAutoSaveIcon) == 0x000001, "Wrong alignment on HUDMainGame_C_StopAutoSaveIcon");
static_assert(sizeof(HUDMainGame_C_StopAutoSaveIcon) == 0x000001, "Wrong size on HUDMainGame_C_StopAutoSaveIcon");
static_assert(offsetof(HUDMainGame_C_StopAutoSaveIcon, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_StopAutoSaveIcon::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartAutoSaveIcon
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_StartAutoSaveIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartAutoSaveIcon) == 0x000001, "Wrong alignment on HUDMainGame_C_StartAutoSaveIcon");
static_assert(sizeof(HUDMainGame_C_StartAutoSaveIcon) == 0x000001, "Wrong size on HUDMainGame_C_StartAutoSaveIcon");
static_assert(offsetof(HUDMainGame_C_StartAutoSaveIcon, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_StartAutoSaveIcon::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreateOperation
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CreateOperation final
{
public:
	class UWB_ui_Operation_C*                     CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreateOperation) == 0x000008, "Wrong alignment on HUDMainGame_C_CreateOperation");
static_assert(sizeof(HUDMainGame_C_CreateOperation) == 0x000008, "Wrong size on HUDMainGame_C_CreateOperation");
static_assert(offsetof(HUDMainGame_C_CreateOperation, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreateOperation::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartOperation
// 0x00E8 (0x00E8 - 0x0000)
struct HUDMainGame_C_StartOperation final
{
public:
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHelpTutorialData*                      CallFunc_GetHelpTutorialData_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FTutorialDBDataCell> CallFunc_GetTutorialDataAsset_returnTutorialMap;   // 0x0010(0x0050)()
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0060(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65CA[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager_1;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHelpTutorialData*                      CallFunc_GetHelpTutorialData_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FTutorialDBDataCell> CallFunc_GetTutorialDataAsset_returnTutorialMap_1; // 0x0088(0x0050)()
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartOperation) == 0x000008, "Wrong alignment on HUDMainGame_C_StartOperation");
static_assert(sizeof(HUDMainGame_C_StartOperation) == 0x0000E8, "Wrong size on HUDMainGame_C_StartOperation");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_GetDataBaseManager_Manager) == 0x000000, "Member 'HUDMainGame_C_StartOperation::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_GetHelpTutorialData_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_StartOperation::CallFunc_GetHelpTutorialData_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_GetTutorialDataAsset_returnTutorialMap) == 0x000010, "Member 'HUDMainGame_C_StartOperation::CallFunc_GetTutorialDataAsset_returnTutorialMap' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_Map_Keys_Keys) == 0x000060, "Member 'HUDMainGame_C_StartOperation::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'HUDMainGame_C_StartOperation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_GetDataBaseManager_Manager_1) == 0x000078, "Member 'HUDMainGame_C_StartOperation::CallFunc_GetDataBaseManager_Manager_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_GetHelpTutorialData_ReturnValue_1) == 0x000080, "Member 'HUDMainGame_C_StartOperation::CallFunc_GetHelpTutorialData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_GetTutorialDataAsset_returnTutorialMap_1) == 0x000088, "Member 'HUDMainGame_C_StartOperation::CallFunc_GetTutorialDataAsset_returnTutorialMap_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_Map_Length_ReturnValue) == 0x0000D8, "Member 'HUDMainGame_C_StartOperation::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000DC, "Member 'HUDMainGame_C_StartOperation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartOperation, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E0, "Member 'HUDMainGame_C_StartOperation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreateNoticeMessage
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_CreateNoticeMessage final
{
public:
	class UWB_ui_Notice_C*                        CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreateNoticeMessage) == 0x000008, "Wrong alignment on HUDMainGame_C_CreateNoticeMessage");
static_assert(sizeof(HUDMainGame_C_CreateNoticeMessage) == 0x000008, "Wrong size on HUDMainGame_C_CreateNoticeMessage");
static_assert(offsetof(HUDMainGame_C_CreateNoticeMessage, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreateNoticeMessage::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreateNoticeQuest
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_CreateNoticeQuest final
{
public:
	class UWB_ui_Notice_Quest_C*                  CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Notice_Quest_reward_C*           CallFunc_Create_ReturnValue_1;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreateNoticeQuest) == 0x000008, "Wrong alignment on HUDMainGame_C_CreateNoticeQuest");
static_assert(sizeof(HUDMainGame_C_CreateNoticeQuest) == 0x000010, "Wrong size on HUDMainGame_C_CreateNoticeQuest");
static_assert(offsetof(HUDMainGame_C_CreateNoticeQuest, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreateNoticeQuest::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CreateNoticeQuest, CallFunc_Create_ReturnValue_1) == 0x000008, "Member 'HUDMainGame_C_CreateNoticeQuest::CallFunc_Create_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicWeightGaugeEnableFlag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicWeightGaugeEnableFlag final
{
public:
	Enum_ui_pk_weight_gauge_button                Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnable;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65CB[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicWeightGaugeEnableFlag) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicWeightGaugeEnableFlag");
static_assert(sizeof(HUDMainGame_C_SetPsychicWeightGaugeEnableFlag) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicWeightGaugeEnableFlag");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableFlag, Button) == 0x000000, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableFlag::Button' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableFlag, IsEnable) == 0x000001, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableFlag::IsEnable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableFlag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableFlag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableFlag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.LevelUpMain
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_LevelUpMain final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65CC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_LevelUpMain) == 0x000008, "Wrong alignment on HUDMainGame_C_LevelUpMain");
static_assert(sizeof(HUDMainGame_C_LevelUpMain) == 0x000018, "Wrong size on HUDMainGame_C_LevelUpMain");
static_assert(offsetof(HUDMainGame_C_LevelUpMain, Level) == 0x000000, "Member 'HUDMainGame_C_LevelUpMain::Level' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_LevelUpMain, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_LevelUpMain::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_LevelUpMain, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_LevelUpMain::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SasChangePage
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SasChangePage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65CD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SasChangePage) == 0x000008, "Wrong alignment on HUDMainGame_C_SasChangePage");
static_assert(sizeof(HUDMainGame_C_SasChangePage) == 0x000018, "Wrong size on HUDMainGame_C_SasChangePage");
static_assert(offsetof(HUDMainGame_C_SasChangePage, Page) == 0x000000, "Member 'HUDMainGame_C_SasChangePage::Page' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SasChangePage, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SasChangePage::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SasChangePage, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SasChangePage::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartTutoOperation
// 0x0038 (0x0038 - 0x0000)
struct HUDMainGame_C_StartTutoOperation final
{
public:
	class FName                                   HelpTutoID;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65CE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartTutoOperation_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartTutoOperation) == 0x000008, "Wrong alignment on HUDMainGame_C_StartTutoOperation");
static_assert(sizeof(HUDMainGame_C_StartTutoOperation) == 0x000038, "Wrong size on HUDMainGame_C_StartTutoOperation");
static_assert(offsetof(HUDMainGame_C_StartTutoOperation, HelpTutoID) == 0x000000, "Member 'HUDMainGame_C_StartTutoOperation::HelpTutoID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutoOperation, ReturnValue) == 0x000008, "Member 'HUDMainGame_C_StartTutoOperation::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutoOperation, CallFunc_Conv_NameToString_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartTutoOperation::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutoOperation, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_StartTutoOperation::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartTutoOperation, CallFunc_StartTutoOperation_ReturnValue) == 0x000030, "Member 'HUDMainGame_C_StartTutoOperation::CallFunc_StartTutoOperation_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CloseTutoOperation
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_CloseTutoOperation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CloseTutoOperation_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CloseTutoOperation) == 0x000001, "Wrong alignment on HUDMainGame_C_CloseTutoOperation");
static_assert(sizeof(HUDMainGame_C_CloseTutoOperation) == 0x000002, "Wrong size on HUDMainGame_C_CloseTutoOperation");
static_assert(offsetof(HUDMainGame_C_CloseTutoOperation, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CloseTutoOperation::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CloseTutoOperation, CallFunc_CloseTutoOperation_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_CloseTutoOperation::CallFunc_CloseTutoOperation_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.isTutoOperation
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsTutoOperation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isTutoOperation_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsTutoOperation) == 0x000001, "Wrong alignment on HUDMainGame_C_IsTutoOperation");
static_assert(sizeof(HUDMainGame_C_IsTutoOperation) == 0x000002, "Wrong size on HUDMainGame_C_IsTutoOperation");
static_assert(offsetof(HUDMainGame_C_IsTutoOperation, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsTutoOperation::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsTutoOperation, CallFunc_isTutoOperation_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsTutoOperation::CallFunc_isTutoOperation_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetVisibleAreaHere
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_SetVisibleAreaHere final
{
public:
	bool                                          Visibleflag;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetVisibleAreaHere) == 0x000001, "Wrong alignment on HUDMainGame_C_SetVisibleAreaHere");
static_assert(sizeof(HUDMainGame_C_SetVisibleAreaHere) == 0x000001, "Wrong size on HUDMainGame_C_SetVisibleAreaHere");
static_assert(offsetof(HUDMainGame_C_SetVisibleAreaHere, Visibleflag) == 0x000000, "Member 'HUDMainGame_C_SetVisibleAreaHere::Visibleflag' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetVisibleAreaNext
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_SetVisibleAreaNext final
{
public:
	bool                                          Visibleflag;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetVisibleAreaNext) == 0x000001, "Wrong alignment on HUDMainGame_C_SetVisibleAreaNext");
static_assert(sizeof(HUDMainGame_C_SetVisibleAreaNext) == 0x000001, "Wrong size on HUDMainGame_C_SetVisibleAreaNext");
static_assert(offsetof(HUDMainGame_C_SetVisibleAreaNext, Visibleflag) == 0x000000, "Member 'HUDMainGame_C_SetVisibleAreaNext::Visibleflag' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.isVisibleAreaHere
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_IsVisibleAreaHere final
{
public:
	bool                                          Visibleflag;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsVisibleAreaHere) == 0x000001, "Wrong alignment on HUDMainGame_C_IsVisibleAreaHere");
static_assert(sizeof(HUDMainGame_C_IsVisibleAreaHere) == 0x000003, "Wrong size on HUDMainGame_C_IsVisibleAreaHere");
static_assert(offsetof(HUDMainGame_C_IsVisibleAreaHere, Visibleflag) == 0x000000, "Member 'HUDMainGame_C_IsVisibleAreaHere::Visibleflag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsVisibleAreaHere, CallFunc_GetVisibility_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsVisibleAreaHere::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsVisibleAreaHere, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsVisibleAreaHere::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.isVisibleAreaNext
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_IsVisibleAreaNext final
{
public:
	bool                                          Visibleflag;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsVisibleAreaNext) == 0x000001, "Wrong alignment on HUDMainGame_C_IsVisibleAreaNext");
static_assert(sizeof(HUDMainGame_C_IsVisibleAreaNext) == 0x000003, "Wrong size on HUDMainGame_C_IsVisibleAreaNext");
static_assert(offsetof(HUDMainGame_C_IsVisibleAreaNext, Visibleflag) == 0x000000, "Member 'HUDMainGame_C_IsVisibleAreaNext::Visibleflag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsVisibleAreaNext, CallFunc_GetVisibility_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsVisibleAreaNext::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsVisibleAreaNext, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsVisibleAreaNext::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartAreaNext
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_StartAreaNext final
{
public:
	int32                                         LocationId;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PortalID;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWorldMap;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Start_ReturnValue;                        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartAreaNext) == 0x000004, "Wrong alignment on HUDMainGame_C_StartAreaNext");
static_assert(sizeof(HUDMainGame_C_StartAreaNext) == 0x000010, "Wrong size on HUDMainGame_C_StartAreaNext");
static_assert(offsetof(HUDMainGame_C_StartAreaNext, LocationId) == 0x000000, "Member 'HUDMainGame_C_StartAreaNext::LocationId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaNext, AreaId) == 0x000004, "Member 'HUDMainGame_C_StartAreaNext::AreaId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaNext, PortalID) == 0x000008, "Member 'HUDMainGame_C_StartAreaNext::PortalID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaNext, IsWorldMap) == 0x00000C, "Member 'HUDMainGame_C_StartAreaNext::IsWorldMap' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaNext, ReturnValue) == 0x00000D, "Member 'HUDMainGame_C_StartAreaNext::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaNext, CallFunc_Start_ReturnValue) == 0x00000E, "Member 'HUDMainGame_C_StartAreaNext::CallFunc_Start_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartAreaHere
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_StartAreaHere final
{
public:
	int32                                         LocationId;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PortalID;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartAreaHere) == 0x000004, "Wrong alignment on HUDMainGame_C_StartAreaHere");
static_assert(sizeof(HUDMainGame_C_StartAreaHere) == 0x000010, "Wrong size on HUDMainGame_C_StartAreaHere");
static_assert(offsetof(HUDMainGame_C_StartAreaHere, LocationId) == 0x000000, "Member 'HUDMainGame_C_StartAreaHere::LocationId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaHere, AreaId) == 0x000004, "Member 'HUDMainGame_C_StartAreaHere::AreaId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaHere, PortalID) == 0x000008, "Member 'HUDMainGame_C_StartAreaHere::PortalID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartAreaHere, ReturnValue) == 0x00000C, "Member 'HUDMainGame_C_StartAreaHere::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetBrainCrashEnable
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_SetBrainCrashEnable final
{
public:
	class ARSBattleCharacter_C*                   Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnable;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65CF[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SetBrainCrashEnable_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetBrainCrashEnable) == 0x000008, "Wrong alignment on HUDMainGame_C_SetBrainCrashEnable");
static_assert(sizeof(HUDMainGame_C_SetBrainCrashEnable) == 0x000010, "Wrong size on HUDMainGame_C_SetBrainCrashEnable");
static_assert(offsetof(HUDMainGame_C_SetBrainCrashEnable, Target) == 0x000000, "Member 'HUDMainGame_C_SetBrainCrashEnable::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetBrainCrashEnable, IsEnable) == 0x000008, "Member 'HUDMainGame_C_SetBrainCrashEnable::IsEnable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetBrainCrashEnable, CallFunc_SetBrainCrashEnable_ReturnValue) == 0x00000C, "Member 'HUDMainGame_C_SetBrainCrashEnable::CallFunc_SetBrainCrashEnable_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetPercent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetPercent) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetPercent");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetPercent) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetPercent");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetPercent, Percent) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetPercent::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetPercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetPercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetPercent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetPercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetUnlockBrainField
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetUnlockBrainField final
{
public:
	bool                                          IsUnlock;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetUnlockBrainField) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetUnlockBrainField");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetUnlockBrainField) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetUnlockBrainField");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetUnlockBrainField, IsUnlock) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetUnlockBrainField::IsUnlock' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetUnlockBrainField, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetUnlockBrainField::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetUnlockBrainField, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetUnlockBrainField::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetDriveMode
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetDriveMode final
{
public:
	bool                                          IsDriveMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetDriveMode) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetDriveMode");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetDriveMode) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetDriveMode");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDriveMode, IsDriveMode) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetDriveMode::IsDriveMode' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDriveMode, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetDriveMode::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDriveMode, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetDriveMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetBrainFieldMode
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetBrainFieldMode final
{
public:
	bool                                          Param_IsBrainField;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetBrainFieldMode) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetBrainFieldMode");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetBrainFieldMode) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetBrainFieldMode");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainFieldMode, Param_IsBrainField) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetBrainFieldMode::Param_IsBrainField' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainFieldMode, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetBrainFieldMode::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainFieldMode, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetBrainFieldMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CreatePresentWidget
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_CreatePresentWidget final
{
public:
	class UWB_ui_Present_C*                       CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Present_next_C*                  CallFunc_Create_ReturnValue_1;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_CreatePresentWidget) == 0x000008, "Wrong alignment on HUDMainGame_C_CreatePresentWidget");
static_assert(sizeof(HUDMainGame_C_CreatePresentWidget) == 0x000010, "Wrong size on HUDMainGame_C_CreatePresentWidget");
static_assert(offsetof(HUDMainGame_C_CreatePresentWidget, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CreatePresentWidget::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CreatePresentWidget, CallFunc_Create_ReturnValue_1) == 0x000008, "Member 'HUDMainGame_C_CreatePresentWidget::CallFunc_Create_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.RushPursuitIcon
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_RushPursuitIcon final
{
public:
	bool                                          Left;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Center;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Right;                                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D4[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_RushPursuitIcon) == 0x000008, "Wrong alignment on HUDMainGame_C_RushPursuitIcon");
static_assert(sizeof(HUDMainGame_C_RushPursuitIcon) == 0x000018, "Wrong size on HUDMainGame_C_RushPursuitIcon");
static_assert(offsetof(HUDMainGame_C_RushPursuitIcon, Left) == 0x000000, "Member 'HUDMainGame_C_RushPursuitIcon::Left' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_RushPursuitIcon, Center) == 0x000001, "Member 'HUDMainGame_C_RushPursuitIcon::Center' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_RushPursuitIcon, Right) == 0x000002, "Member 'HUDMainGame_C_RushPursuitIcon::Right' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_RushPursuitIcon, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_RushPursuitIcon::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_RushPursuitIcon, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_RushPursuitIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PresentGetSelectItemID
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_PresentGetSelectItemID final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_PresentGetSelectItemID) == 0x000004, "Wrong alignment on HUDMainGame_C_PresentGetSelectItemID");
static_assert(sizeof(HUDMainGame_C_PresentGetSelectItemID) == 0x000008, "Wrong size on HUDMainGame_C_PresentGetSelectItemID");
static_assert(offsetof(HUDMainGame_C_PresentGetSelectItemID, ItemId) == 0x000000, "Member 'HUDMainGame_C_PresentGetSelectItemID::ItemId' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PresentGetSelectFlag
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_PresentGetSelectFlag final
{
public:
	bool                                          SelectFlag;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSelectFlag_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PresentGetSelectFlag) == 0x000001, "Wrong alignment on HUDMainGame_C_PresentGetSelectFlag");
static_assert(sizeof(HUDMainGame_C_PresentGetSelectFlag) == 0x000002, "Wrong size on HUDMainGame_C_PresentGetSelectFlag");
static_assert(offsetof(HUDMainGame_C_PresentGetSelectFlag, SelectFlag) == 0x000000, "Member 'HUDMainGame_C_PresentGetSelectFlag::SelectFlag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PresentGetSelectFlag, CallFunc_GetSelectFlag_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_PresentGetSelectFlag::CallFunc_GetSelectFlag_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogGetItem
// 0x0118 (0x0118 - 0x0000)
struct HUDMainGame_C_SetLogGetItem final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ItemNum;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _drawTime;                                         // 0x0014(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D5[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MessageID;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NameItemName;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMessageHudManager*                     CallFunc_GetMessageHudManager_MessageHudManager;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D7[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D8[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemDataCell                          CallFunc_GetItemDataCell_ItemData;                 // 0x0048(0x0080)()
	bool                                          CallFunc_GetItemDataCell_ReturnValue;              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D9[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65DA[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue_1;                    // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetLogGetItem) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogGetItem");
static_assert(sizeof(HUDMainGame_C_SetLogGetItem) == 0x000118, "Wrong size on HUDMainGame_C_SetLogGetItem");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, ItemName) == 0x000000, "Member 'HUDMainGame_C_SetLogGetItem::ItemName' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, ItemNum) == 0x000010, "Member 'HUDMainGame_C_SetLogGetItem::ItemNum' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, _drawTime) == 0x000014, "Member 'HUDMainGame_C_SetLogGetItem::_drawTime' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, ReturnValue) == 0x000018, "Member 'HUDMainGame_C_SetLogGetItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, MessageID) == 0x00001C, "Member 'HUDMainGame_C_SetLogGetItem::MessageID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, NameItemName) == 0x000024, "Member 'HUDMainGame_C_SetLogGetItem::NameItemName' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_GetMessageHudManager_MessageHudManager) == 0x000030, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_GetMessageHudManager_MessageHudManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000038, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_Conv_StringToName_ReturnValue) == 0x00003C, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_GetItemDataCell_ItemData) == 0x000048, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_GetItemDataCell_ItemData' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_GetItemDataCell_ReturnValue) == 0x0000C8, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_GetItemDataCell_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_Conv_IntToString_ReturnValue) == 0x0000D0, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, K2Node_SwitchEnum_CmpSuccess) == 0x0000E0, "Member 'HUDMainGame_C_SetLogGetItem::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_GetDataBaseManager_Manager) == 0x0000E8, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_GetText_ReturnValue) == 0x0000F0, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_GetText_ReturnValue_1) == 0x000100, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_GetText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetItem, CallFunc_NotEqual_NameName_ReturnValue) == 0x000110, "Member 'HUDMainGame_C_SetLogGetItem::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetupMinimapEtcIcon
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_SetupMinimapEtcIcon final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetupMinimapEtcIcon) == 0x000008, "Wrong alignment on HUDMainGame_C_SetupMinimapEtcIcon");
static_assert(sizeof(HUDMainGame_C_SetupMinimapEtcIcon) == 0x000010, "Wrong size on HUDMainGame_C_SetupMinimapEtcIcon");
static_assert(offsetof(HUDMainGame_C_SetupMinimapEtcIcon, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_SetupMinimapEtcIcon::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetupMinimapEtcIcon, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_SetupMinimapEtcIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetupMinimapEtcIcon, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'HUDMainGame_C_SetupMinimapEtcIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DebugDriveGauge
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_DebugDriveGauge final
{
public:
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65DB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65DC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65DD[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DebugDriveGauge) == 0x000004, "Wrong alignment on HUDMainGame_C_DebugDriveGauge");
static_assert(sizeof(HUDMainGame_C_DebugDriveGauge) == 0x000028, "Wrong size on HUDMainGame_C_DebugDriveGauge");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000010, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_FClamp_ReturnValue_1) == 0x000014, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, CallFunc_FClamp_ReturnValue_2) == 0x000020, "Member 'HUDMainGame_C_DebugDriveGauge::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugDriveGauge, K2Node_SwitchInteger_CmpSuccess) == 0x000024, "Member 'HUDMainGame_C_DebugDriveGauge::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogLevelUp
// 0x0060 (0x0060 - 0x0000)
struct HUDMainGame_C_SetLogLevelUp final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMessageHudManager*                     CallFunc_GetMessageHudManager_MessageHudManager;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue_1;                    // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogLevelUp) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogLevelUp");
static_assert(sizeof(HUDMainGame_C_SetLogLevelUp) == 0x000060, "Wrong size on HUDMainGame_C_SetLogLevelUp");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CharacterId) == 0x000000, "Member 'HUDMainGame_C_SetLogLevelUp::CharacterId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_GetMessageHudManager_MessageHudManager) == 0x000008, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_GetMessageHudManager_MessageHudManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_Conv_NameToString_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_GetDataBaseManager_Manager) == 0x000020, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_GetText_ReturnValue) == 0x000038, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_Conv_StringToName_ReturnValue) == 0x000048, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogLevelUp, CallFunc_GetText_ReturnValue_1) == 0x000050, "Member 'HUDMainGame_C_SetLogLevelUp::CallFunc_GetText_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicGaugeLevel
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicGaugeLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65DE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicGaugeLevel) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicGaugeLevel");
static_assert(sizeof(HUDMainGame_C_SetPsychicGaugeLevel) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicGaugeLevel");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeLevel, Level) == 0x000000, "Member 'HUDMainGame_C_SetPsychicGaugeLevel::Level' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeLevel, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicGaugeLevel::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeLevel, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicGaugeLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetEnemyHpWidgetVisible
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_SetEnemyHpWidgetVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetEnemyHpWidgetVisible) == 0x000001, "Wrong alignment on HUDMainGame_C_SetEnemyHpWidgetVisible");
static_assert(sizeof(HUDMainGame_C_SetEnemyHpWidgetVisible) == 0x000002, "Wrong size on HUDMainGame_C_SetEnemyHpWidgetVisible");
static_assert(offsetof(HUDMainGame_C_SetEnemyHpWidgetVisible, IsVisible) == 0x000000, "Member 'HUDMainGame_C_SetEnemyHpWidgetVisible::IsVisible' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetEnemyHpWidgetVisible, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_SetEnemyHpWidgetVisible::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartSasHologram
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartSasHologram final
{
public:
	EPlayerID                                     CharaID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrashVision;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65DF[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartSasHologram) == 0x000008, "Wrong alignment on HUDMainGame_C_StartSasHologram");
static_assert(sizeof(HUDMainGame_C_StartSasHologram) == 0x000018, "Wrong size on HUDMainGame_C_StartSasHologram");
static_assert(offsetof(HUDMainGame_C_StartSasHologram, CharaID) == 0x000000, "Member 'HUDMainGame_C_StartSasHologram::CharaID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasHologram, IsCrashVision) == 0x000001, "Member 'HUDMainGame_C_StartSasHologram::IsCrashVision' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasHologram, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_StartSasHologram::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasHologram, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_StartSasHologram::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StopSasHologram
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_StopSasHologram final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StopSasHologram) == 0x000008, "Wrong alignment on HUDMainGame_C_StopSasHologram");
static_assert(sizeof(HUDMainGame_C_StopSasHologram) == 0x000010, "Wrong size on HUDMainGame_C_StopSasHologram");
static_assert(offsetof(HUDMainGame_C_StopSasHologram, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_StopSasHologram::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StopSasHologram, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_StopSasHologram::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DecideSasHologram
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_DecideSasHologram final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DecideSasHologram) == 0x000008, "Wrong alignment on HUDMainGame_C_DecideSasHologram");
static_assert(sizeof(HUDMainGame_C_DecideSasHologram) == 0x000010, "Wrong size on HUDMainGame_C_DecideSasHologram");
static_assert(offsetof(HUDMainGame_C_DecideSasHologram, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_DecideSasHologram::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DecideSasHologram, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_DecideSasHologram::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicWeightGaugeEnableComboFlag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65E0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag");
static_assert(sizeof(HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag, IsEnable) == 0x000000, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag::IsEnable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicWeightGaugeEnableComboFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconStickHoldPercent
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_SetPursuitIconStickHoldPercent final
{
public:
	float                                         LeftPercent;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenterPercent;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightPercent;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65E1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconStickHoldPercent) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconStickHoldPercent");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconStickHoldPercent) == 0x000020, "Wrong size on HUDMainGame_C_SetPursuitIconStickHoldPercent");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHoldPercent, LeftPercent) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconStickHoldPercent::LeftPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHoldPercent, CenterPercent) == 0x000004, "Member 'HUDMainGame_C_SetPursuitIconStickHoldPercent::CenterPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHoldPercent, RightPercent) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconStickHoldPercent::RightPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHoldPercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconStickHoldPercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHoldPercent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HUDMainGame_C_SetPursuitIconStickHoldPercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconStickRoll
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPursuitIconStickRoll final
{
public:
	bool                                          FlagLeft;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagCenter;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagRight;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65E2[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconStickRoll) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconStickRoll");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconStickRoll) == 0x000018, "Wrong size on HUDMainGame_C_SetPursuitIconStickRoll");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRoll, FlagLeft) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconStickRoll::FlagLeft' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRoll, FlagCenter) == 0x000001, "Member 'HUDMainGame_C_SetPursuitIconStickRoll::FlagCenter' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRoll, FlagRight) == 0x000002, "Member 'HUDMainGame_C_SetPursuitIconStickRoll::FlagRight' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRoll, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconStickRoll::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRoll, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconStickRoll::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogItemOverFlow
// 0x0050 (0x0050 - 0x0000)
struct HUDMainGame_C_SetLogItemOverFlow final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         _drawTime;                                         // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65E3[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMessageHudManager*                     CallFunc_GetMessageHudManager_MessageHudManager;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue_1;                    // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogItemOverFlow) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogItemOverFlow");
static_assert(sizeof(HUDMainGame_C_SetLogItemOverFlow) == 0x000050, "Wrong size on HUDMainGame_C_SetLogItemOverFlow");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, ItemName) == 0x000000, "Member 'HUDMainGame_C_SetLogItemOverFlow::ItemName' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, _drawTime) == 0x000010, "Member 'HUDMainGame_C_SetLogItemOverFlow::_drawTime' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, ReturnValue) == 0x000014, "Member 'HUDMainGame_C_SetLogItemOverFlow::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, CallFunc_GetMessageHudManager_MessageHudManager) == 0x000018, "Member 'HUDMainGame_C_SetLogItemOverFlow::CallFunc_GetMessageHudManager_MessageHudManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, CallFunc_Conv_StringToName_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_SetLogItemOverFlow::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, CallFunc_GetDataBaseManager_Manager) == 0x000028, "Member 'HUDMainGame_C_SetLogItemOverFlow::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, CallFunc_GetText_ReturnValue) == 0x000030, "Member 'HUDMainGame_C_SetLogItemOverFlow::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogItemOverFlow, CallFunc_GetText_ReturnValue_1) == 0x000040, "Member 'HUDMainGame_C_SetLogItemOverFlow::CallFunc_GetText_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconStickHold
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPursuitIconStickHold final
{
public:
	bool                                          FlagLeft;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagCenter;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagRight;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65E4[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconStickHold) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconStickHold");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconStickHold) == 0x000018, "Wrong size on HUDMainGame_C_SetPursuitIconStickHold");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHold, FlagLeft) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconStickHold::FlagLeft' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHold, FlagCenter) == 0x000001, "Member 'HUDMainGame_C_SetPursuitIconStickHold::FlagCenter' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHold, FlagRight) == 0x000002, "Member 'HUDMainGame_C_SetPursuitIconStickHold::FlagRight' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHold, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconStickHold::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickHold, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconStickHold::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconRushPercent
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_SetPursuitIconRushPercent final
{
public:
	float                                         LeftPercent;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenterPercent;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightPercent;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65E5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconRushPercent) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconRushPercent");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconRushPercent) == 0x000020, "Wrong size on HUDMainGame_C_SetPursuitIconRushPercent");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconRushPercent, LeftPercent) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconRushPercent::LeftPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconRushPercent, CenterPercent) == 0x000004, "Member 'HUDMainGame_C_SetPursuitIconRushPercent::CenterPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconRushPercent, RightPercent) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconRushPercent::RightPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconRushPercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconRushPercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconRushPercent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HUDMainGame_C_SetPursuitIconRushPercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconStickRollStart
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPursuitIconStickRollStart final
{
public:
	bool                                          FlagStartLeft;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagStartCenter;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagStartRight;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65E6[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconStickRollStart) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconStickRollStart");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconStickRollStart) == 0x000018, "Wrong size on HUDMainGame_C_SetPursuitIconStickRollStart");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRollStart, FlagStartLeft) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconStickRollStart::FlagStartLeft' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRollStart, FlagStartCenter) == 0x000001, "Member 'HUDMainGame_C_SetPursuitIconStickRollStart::FlagStartCenter' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRollStart, FlagStartRight) == 0x000002, "Member 'HUDMainGame_C_SetPursuitIconStickRollStart::FlagStartRight' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRollStart, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconStickRollStart::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconStickRollStart, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconStickRollStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ItemSetEnableUse
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_ItemSetEnableUse final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65E7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ItemSetEnableUse) == 0x000008, "Wrong alignment on HUDMainGame_C_ItemSetEnableUse");
static_assert(sizeof(HUDMainGame_C_ItemSetEnableUse) == 0x000018, "Wrong size on HUDMainGame_C_ItemSetEnableUse");
static_assert(offsetof(HUDMainGame_C_ItemSetEnableUse, IsEnable) == 0x000000, "Member 'HUDMainGame_C_ItemSetEnableUse::IsEnable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemSetEnableUse, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_ItemSetEnableUse::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemSetEnableUse, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_ItemSetEnableUse::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DroneGuideOpen
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DroneGuideOpen final
{
public:
	Enum_ui_object_guide                          ObjectType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65E8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DroneGuideOpen) == 0x000008, "Wrong alignment on HUDMainGame_C_DroneGuideOpen");
static_assert(sizeof(HUDMainGame_C_DroneGuideOpen) == 0x000018, "Wrong size on HUDMainGame_C_DroneGuideOpen");
static_assert(offsetof(HUDMainGame_C_DroneGuideOpen, ObjectType) == 0x000000, "Member 'HUDMainGame_C_DroneGuideOpen::ObjectType' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DroneGuideOpen, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DroneGuideOpen::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DroneGuideOpen, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DroneGuideOpen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DroneGuideClose
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_DroneGuideClose final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DroneGuideClose) == 0x000008, "Wrong alignment on HUDMainGame_C_DroneGuideClose");
static_assert(sizeof(HUDMainGame_C_DroneGuideClose) == 0x000010, "Wrong size on HUDMainGame_C_DroneGuideClose");
static_assert(offsetof(HUDMainGame_C_DroneGuideClose, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_DroneGuideClose::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DroneGuideClose, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_DroneGuideClose::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconButtonHoldPercent
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_SetPursuitIconButtonHoldPercent final
{
public:
	float                                         LeftPercent;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenterPercent;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightPercent;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65E9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconButtonHoldPercent) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconButtonHoldPercent");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconButtonHoldPercent) == 0x000020, "Wrong size on HUDMainGame_C_SetPursuitIconButtonHoldPercent");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHoldPercent, LeftPercent) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconButtonHoldPercent::LeftPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHoldPercent, CenterPercent) == 0x000004, "Member 'HUDMainGame_C_SetPursuitIconButtonHoldPercent::CenterPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHoldPercent, RightPercent) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconButtonHoldPercent::RightPercent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHoldPercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconButtonHoldPercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHoldPercent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HUDMainGame_C_SetPursuitIconButtonHoldPercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPursuitIconButtonHold
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPursuitIconButtonHold final
{
public:
	bool                                          IsHoldLeft;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHoldCenter;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHoldRight;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65EA[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPursuitIconButtonHold) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPursuitIconButtonHold");
static_assert(sizeof(HUDMainGame_C_SetPursuitIconButtonHold) == 0x000018, "Wrong size on HUDMainGame_C_SetPursuitIconButtonHold");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHold, IsHoldLeft) == 0x000000, "Member 'HUDMainGame_C_SetPursuitIconButtonHold::IsHoldLeft' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHold, IsHoldCenter) == 0x000001, "Member 'HUDMainGame_C_SetPursuitIconButtonHold::IsHoldCenter' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHold, IsHoldRight) == 0x000002, "Member 'HUDMainGame_C_SetPursuitIconButtonHold::IsHoldRight' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHold, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPursuitIconButtonHold::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPursuitIconButtonHold, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPursuitIconButtonHold::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ItemMenuSetRecastPercent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_ItemMenuSetRecastPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65EB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ItemMenuSetRecastPercent) == 0x000008, "Wrong alignment on HUDMainGame_C_ItemMenuSetRecastPercent");
static_assert(sizeof(HUDMainGame_C_ItemMenuSetRecastPercent) == 0x000018, "Wrong size on HUDMainGame_C_ItemMenuSetRecastPercent");
static_assert(offsetof(HUDMainGame_C_ItemMenuSetRecastPercent, Percent) == 0x000000, "Member 'HUDMainGame_C_ItemMenuSetRecastPercent::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemMenuSetRecastPercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_ItemMenuSetRecastPercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemMenuSetRecastPercent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_ItemMenuSetRecastPercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.OnTitleBack
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_OnTitleBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_OnTitleBack) == 0x000001, "Wrong alignment on HUDMainGame_C_OnTitleBack");
static_assert(sizeof(HUDMainGame_C_OnTitleBack) == 0x000001, "Wrong size on HUDMainGame_C_OnTitleBack");
static_assert(offsetof(HUDMainGame_C_OnTitleBack, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_OnTitleBack::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ItemShiftLeft
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_ItemShiftLeft final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ItemShiftLeft) == 0x000008, "Wrong alignment on HUDMainGame_C_ItemShiftLeft");
static_assert(sizeof(HUDMainGame_C_ItemShiftLeft) == 0x000010, "Wrong size on HUDMainGame_C_ItemShiftLeft");
static_assert(offsetof(HUDMainGame_C_ItemShiftLeft, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_ItemShiftLeft::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemShiftLeft, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_ItemShiftLeft::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ItemShiftRight
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_ItemShiftRight final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ItemShiftRight) == 0x000008, "Wrong alignment on HUDMainGame_C_ItemShiftRight");
static_assert(sizeof(HUDMainGame_C_ItemShiftRight) == 0x000010, "Wrong size on HUDMainGame_C_ItemShiftRight");
static_assert(offsetof(HUDMainGame_C_ItemShiftRight, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_ItemShiftRight::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemShiftRight, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_ItemShiftRight::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ExpBonusOpen
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_ExpBonusOpen final
{
public:
	float                                         bonus;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65EC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ExpBonusOpen) == 0x000008, "Wrong alignment on HUDMainGame_C_ExpBonusOpen");
static_assert(sizeof(HUDMainGame_C_ExpBonusOpen) == 0x000018, "Wrong size on HUDMainGame_C_ExpBonusOpen");
static_assert(offsetof(HUDMainGame_C_ExpBonusOpen, bonus) == 0x000000, "Member 'HUDMainGame_C_ExpBonusOpen::bonus' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExpBonusOpen, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_ExpBonusOpen::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExpBonusOpen, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_ExpBonusOpen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ExpBonusClose
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_ExpBonusClose final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ExpBonusClose) == 0x000008, "Wrong alignment on HUDMainGame_C_ExpBonusClose");
static_assert(sizeof(HUDMainGame_C_ExpBonusClose) == 0x000010, "Wrong size on HUDMainGame_C_ExpBonusClose");
static_assert(offsetof(HUDMainGame_C_ExpBonusClose, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_ExpBonusClose::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExpBonusClose, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_ExpBonusClose::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ExpBonusUpdate
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_ExpBonusUpdate final
{
public:
	float                                         bonus;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65ED[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ExpBonusUpdate) == 0x000008, "Wrong alignment on HUDMainGame_C_ExpBonusUpdate");
static_assert(sizeof(HUDMainGame_C_ExpBonusUpdate) == 0x000018, "Wrong size on HUDMainGame_C_ExpBonusUpdate");
static_assert(offsetof(HUDMainGame_C_ExpBonusUpdate, bonus) == 0x000000, "Member 'HUDMainGame_C_ExpBonusUpdate::bonus' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExpBonusUpdate, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_ExpBonusUpdate::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ExpBonusUpdate, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_ExpBonusUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetDrivePercent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetDrivePercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65EE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetDrivePercent) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetDrivePercent");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetDrivePercent) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetDrivePercent");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDrivePercent, Percent) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetDrivePercent::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDrivePercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetDrivePercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDrivePercent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetDrivePercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetBrainPercent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetBrainPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65EF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetBrainPercent) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetBrainPercent");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetBrainPercent) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetBrainPercent");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainPercent, Percent) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetBrainPercent::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainPercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetBrainPercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainPercent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetBrainPercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetStockFlag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetStockFlag final
{
public:
	bool                                          StockFlag;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseItemFlag;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetStockFlag) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetStockFlag");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetStockFlag) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetStockFlag");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetStockFlag, StockFlag) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetStockFlag::StockFlag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetStockFlag, UseItemFlag) == 0x000001, "Member 'HUDMainGame_C_DriveGaugeSetStockFlag::UseItemFlag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetStockFlag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetStockFlag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetStockFlag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetStockFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetDownFlag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetDownFlag final
{
public:
	bool                                          DownFlag;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetDownFlag) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetDownFlag");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetDownFlag) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetDownFlag");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDownFlag, DownFlag) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetDownFlag::DownFlag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDownFlag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetDownFlag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDownFlag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetDownFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetDisableFlag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetDisableFlag final
{
public:
	bool                                          DisableFlag;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetDisableFlag) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetDisableFlag");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetDisableFlag) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetDisableFlag");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDisableFlag, DisableFlag) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetDisableFlag::DisableFlag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDisableFlag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetDisableFlag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetDisableFlag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetDisableFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetRemainingSecond
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetRemainingSecond final
{
public:
	int32                                         Second;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65F3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetRemainingSecond) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetRemainingSecond");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetRemainingSecond) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetRemainingSecond");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetRemainingSecond, Second) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetRemainingSecond::Second' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetRemainingSecond, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetRemainingSecond::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetRemainingSecond, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetRemainingSecond::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetBrainChargePercent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetBrainChargePercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65F4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetBrainChargePercent) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetBrainChargePercent");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetBrainChargePercent) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetBrainChargePercent");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainChargePercent, Percent) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetBrainChargePercent::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainChargePercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetBrainChargePercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetBrainChargePercent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetBrainChargePercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ChangeSoundState
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_ChangeSoundState final
{
public:
	ESoundState                                   State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F5[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeSoundState_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ChangeSoundState) == 0x000008, "Wrong alignment on HUDMainGame_C_ChangeSoundState");
static_assert(sizeof(HUDMainGame_C_ChangeSoundState) == 0x000018, "Wrong size on HUDMainGame_C_ChangeSoundState");
static_assert(offsetof(HUDMainGame_C_ChangeSoundState, State) == 0x000000, "Member 'HUDMainGame_C_ChangeSoundState::State' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ChangeSoundState, ReturnValue) == 0x000001, "Member 'HUDMainGame_C_ChangeSoundState::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ChangeSoundState, CallFunc_GetSoundManager_SoundManager) == 0x000008, "Member 'HUDMainGame_C_ChangeSoundState::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ChangeSoundState, CallFunc_ChangeSoundState_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_ChangeSoundState::CallFunc_ChangeSoundState_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DriveGaugeSetVisibleBrainKeyGuide
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide final
{
public:
	bool                                          Visibleflag;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide) == 0x000008, "Wrong alignment on HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide");
static_assert(sizeof(HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide) == 0x000018, "Wrong size on HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide, Visibleflag) == 0x000000, "Member 'HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide::Visibleflag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DriveGaugeSetVisibleBrainKeyGuide::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MiniTipsOpen
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_MiniTipsOpen final
{
public:
	int32                                         TipsID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65F7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MiniTipsOpen) == 0x000008, "Wrong alignment on HUDMainGame_C_MiniTipsOpen");
static_assert(sizeof(HUDMainGame_C_MiniTipsOpen) == 0x000018, "Wrong size on HUDMainGame_C_MiniTipsOpen");
static_assert(offsetof(HUDMainGame_C_MiniTipsOpen, TipsID) == 0x000000, "Member 'HUDMainGame_C_MiniTipsOpen::TipsID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsOpen, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_MiniTipsOpen::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsOpen, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_MiniTipsOpen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MiniTipsClose
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_MiniTipsClose final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MiniTipsClose) == 0x000008, "Wrong alignment on HUDMainGame_C_MiniTipsClose");
static_assert(sizeof(HUDMainGame_C_MiniTipsClose) == 0x000010, "Wrong size on HUDMainGame_C_MiniTipsClose");
static_assert(offsetof(HUDMainGame_C_MiniTipsClose, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_MiniTipsClose::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsClose, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_MiniTipsClose::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsValidMessageVoiceToMessageBuffer
// 0x002C (0x002C - 0x0000)
struct HUDMainGame_C_IsValidMessageVoiceToMessageBuffer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          IsValidVoice;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F8[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65F9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65FA[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65FB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65FC[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer) == 0x000004, "Wrong alignment on HUDMainGame_C_IsValidMessageVoiceToMessageBuffer");
static_assert(sizeof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer) == 0x00002C, "Wrong size on HUDMainGame_C_IsValidMessageVoiceToMessageBuffer");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, IsValidVoice) == 0x000001, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::IsValidVoice' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, Temp_int_Array_Index_Variable) == 0x000004, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsValidMessageVoiceToMessageBuffer, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'HUDMainGame_C_IsValidMessageVoiceToMessageBuffer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetPsychicGaugeEffect
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetPsychicGaugeEffect final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetPsychicGaugeEffect) == 0x000008, "Wrong alignment on HUDMainGame_C_SetPsychicGaugeEffect");
static_assert(sizeof(HUDMainGame_C_SetPsychicGaugeEffect) == 0x000018, "Wrong size on HUDMainGame_C_SetPsychicGaugeEffect");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeEffect, Param_Index) == 0x000000, "Member 'HUDMainGame_C_SetPsychicGaugeEffect::Param_Index' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeEffect, Time) == 0x000004, "Member 'HUDMainGame_C_SetPsychicGaugeEffect::Time' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeEffect, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetPsychicGaugeEffect::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetPsychicGaugeEffect, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetPsychicGaugeEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SasFireStart
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_SasFireStart final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SasFireStart) == 0x000008, "Wrong alignment on HUDMainGame_C_SasFireStart");
static_assert(sizeof(HUDMainGame_C_SasFireStart) == 0x000010, "Wrong size on HUDMainGame_C_SasFireStart");
static_assert(offsetof(HUDMainGame_C_SasFireStart, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_SasFireStart::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SasFireStart, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_SasFireStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SasFireEnd
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SasFireEnd final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65FD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SasFireEnd) == 0x000008, "Wrong alignment on HUDMainGame_C_SasFireEnd");
static_assert(sizeof(HUDMainGame_C_SasFireEnd) == 0x000018, "Wrong size on HUDMainGame_C_SasFireEnd");
static_assert(offsetof(HUDMainGame_C_SasFireEnd, IsSuccess) == 0x000000, "Member 'HUDMainGame_C_SasFireEnd::IsSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SasFireEnd, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SasFireEnd::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SasFireEnd, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SasFireEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SasFireRush
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_SasFireRush final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SasFireRush) == 0x000008, "Wrong alignment on HUDMainGame_C_SasFireRush");
static_assert(sizeof(HUDMainGame_C_SasFireRush) == 0x000010, "Wrong size on HUDMainGame_C_SasFireRush");
static_assert(offsetof(HUDMainGame_C_SasFireRush, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_SasFireRush::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SasFireRush, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_SasFireRush::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsEnableOpenMenu
// 0x0012 (0x0012 - 0x0000)
struct HUDMainGame_C_IsEnableOpenMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFade_ReturnValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFadeAnimation_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_2;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_3;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_4;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndGameOver_IsEnd;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsEnableOpenMenu) == 0x000001, "Wrong alignment on HUDMainGame_C_IsEnableOpenMenu");
static_assert(sizeof(HUDMainGame_C_IsEnableOpenMenu) == 0x000012, "Wrong size on HUDMainGame_C_IsEnableOpenMenu");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsEnableOpenMenu::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, LbEnable) == 0x000001, "Member 'HUDMainGame_C_IsEnableOpenMenu::LbEnable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsFade_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsFade_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsFadeAnimation_ReturnValue) == 0x000003, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsFadeAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000004, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsPlaying_IsPlaying) == 0x000005, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsPlaying_IsPlaying_1) == 0x000006, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsPlaying_IsPlaying_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsPlaying_IsPlaying_2) == 0x000007, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsPlaying_IsPlaying_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsPlaying_IsPlaying_3) == 0x000008, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsPlaying_IsPlaying_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsPlaying_IsPlaying_4) == 0x000009, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsPlaying_IsPlaying_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_IsEndGameOver_IsEnd) == 0x00000A, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_IsEndGameOver_IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_BooleanOR_ReturnValue_1) == 0x00000C, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_BooleanOR_ReturnValue_2) == 0x00000D, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_BooleanOR_ReturnValue_3) == 0x00000E, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_BooleanOR_ReturnValue_4) == 0x00000F, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_BooleanOR_ReturnValue_5) == 0x000010, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenMenu, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_IsEnableOpenMenu::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MiniTipsStartDraw
// 0x00A8 (0x00A8 - 0x0000)
struct HUDMainGame_C_MiniTipsStartDraw final
{
public:
	EHelpTutorial                                 TipsID;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65FE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _RetValue;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65FF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHelpTutorialData*                      CallFunc_GetHelpTutorialData_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EHelpTutorial, struct FMiniHelpRowDataCell> CallFunc_GetMiniHelpDataAsset_returnMiniHelpMap;   // 0x0020(0x0050)()
	struct FMiniHelpRowDataCell                   CallFunc_Map_Find_Value;                           // 0x0070(0x0020)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6600[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MiniTipsStartDraw) == 0x000008, "Wrong alignment on HUDMainGame_C_MiniTipsStartDraw");
static_assert(sizeof(HUDMainGame_C_MiniTipsStartDraw) == 0x0000A8, "Wrong size on HUDMainGame_C_MiniTipsStartDraw");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, TipsID) == 0x000000, "Member 'HUDMainGame_C_MiniTipsStartDraw::TipsID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, ReturnValue) == 0x000004, "Member 'HUDMainGame_C_MiniTipsStartDraw::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, _RetValue) == 0x000008, "Member 'HUDMainGame_C_MiniTipsStartDraw::_RetValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, CallFunc_GetDataBaseManager_Manager) == 0x000010, "Member 'HUDMainGame_C_MiniTipsStartDraw::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, CallFunc_GetHelpTutorialData_ReturnValue) == 0x000018, "Member 'HUDMainGame_C_MiniTipsStartDraw::CallFunc_GetHelpTutorialData_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, CallFunc_GetMiniHelpDataAsset_returnMiniHelpMap) == 0x000020, "Member 'HUDMainGame_C_MiniTipsStartDraw::CallFunc_GetMiniHelpDataAsset_returnMiniHelpMap' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, CallFunc_Map_Find_Value) == 0x000070, "Member 'HUDMainGame_C_MiniTipsStartDraw::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'HUDMainGame_C_MiniTipsStartDraw::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000098, "Member 'HUDMainGame_C_MiniTipsStartDraw::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStartDraw, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'HUDMainGame_C_MiniTipsStartDraw::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MiniTipsStopDraw
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_MiniTipsStopDraw final
{
public:
	EHelpTutorial                                 TipsID;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6601[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MiniTipsStopDraw) == 0x000008, "Wrong alignment on HUDMainGame_C_MiniTipsStopDraw");
static_assert(sizeof(HUDMainGame_C_MiniTipsStopDraw) == 0x000018, "Wrong size on HUDMainGame_C_MiniTipsStopDraw");
static_assert(offsetof(HUDMainGame_C_MiniTipsStopDraw, TipsID) == 0x000000, "Member 'HUDMainGame_C_MiniTipsStopDraw::TipsID' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStopDraw, ReturnValue) == 0x000001, "Member 'HUDMainGame_C_MiniTipsStopDraw::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStopDraw, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_MiniTipsStopDraw::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsStopDraw, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_MiniTipsStopDraw::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLoadingFlagEventSetup
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetLoadingFlagEventSetup final
{
public:
	bool                                          IsSetup;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndLoading_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetLoadingFlagEventSetup) == 0x000001, "Wrong alignment on HUDMainGame_C_SetLoadingFlagEventSetup");
static_assert(sizeof(HUDMainGame_C_SetLoadingFlagEventSetup) == 0x000004, "Wrong size on HUDMainGame_C_SetLoadingFlagEventSetup");
static_assert(offsetof(HUDMainGame_C_SetLoadingFlagEventSetup, IsSetup) == 0x000000, "Member 'HUDMainGame_C_SetLoadingFlagEventSetup::IsSetup' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLoadingFlagEventSetup, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_SetLoadingFlagEventSetup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLoadingFlagEventSetup, CallFunc_EndLoading_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_SetLoadingFlagEventSetup::CallFunc_EndLoading_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLoadingFlagEventSetup, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'HUDMainGame_C_SetLoadingFlagEventSetup::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PsychicTimerOpen
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_PsychicTimerOpen final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PsychicTimerOpen) == 0x000008, "Wrong alignment on HUDMainGame_C_PsychicTimerOpen");
static_assert(sizeof(HUDMainGame_C_PsychicTimerOpen) == 0x000010, "Wrong size on HUDMainGame_C_PsychicTimerOpen");
static_assert(offsetof(HUDMainGame_C_PsychicTimerOpen, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_PsychicTimerOpen::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicTimerOpen, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_PsychicTimerOpen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PsychicTimerClose
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_PsychicTimerClose final
{
public:
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PsychicTimerClose) == 0x000008, "Wrong alignment on HUDMainGame_C_PsychicTimerClose");
static_assert(sizeof(HUDMainGame_C_PsychicTimerClose) == 0x000010, "Wrong size on HUDMainGame_C_PsychicTimerClose");
static_assert(offsetof(HUDMainGame_C_PsychicTimerClose, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000000, "Member 'HUDMainGame_C_PsychicTimerClose::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicTimerClose, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'HUDMainGame_C_PsychicTimerClose::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PsychicTimerSetGaugePercent
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_PsychicTimerSetGaugePercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6602[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PsychicTimerSetGaugePercent) == 0x000008, "Wrong alignment on HUDMainGame_C_PsychicTimerSetGaugePercent");
static_assert(sizeof(HUDMainGame_C_PsychicTimerSetGaugePercent) == 0x000018, "Wrong size on HUDMainGame_C_PsychicTimerSetGaugePercent");
static_assert(offsetof(HUDMainGame_C_PsychicTimerSetGaugePercent, Percent) == 0x000000, "Member 'HUDMainGame_C_PsychicTimerSetGaugePercent::Percent' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicTimerSetGaugePercent, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_PsychicTimerSetGaugePercent::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicTimerSetGaugePercent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_PsychicTimerSetGaugePercent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogGetMoneyFromNative
// 0x000C (0x000C - 0x0000)
struct HUDMainGame_C_SetLogGetMoneyFromNative final
{
public:
	int32                                         GetMoney;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _drawTime;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetLogGetMoneyFromNative) == 0x000004, "Wrong alignment on HUDMainGame_C_SetLogGetMoneyFromNative");
static_assert(sizeof(HUDMainGame_C_SetLogGetMoneyFromNative) == 0x00000C, "Wrong size on HUDMainGame_C_SetLogGetMoneyFromNative");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoneyFromNative, GetMoney) == 0x000000, "Member 'HUDMainGame_C_SetLogGetMoneyFromNative::GetMoney' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoneyFromNative, _drawTime) == 0x000004, "Member 'HUDMainGame_C_SetLogGetMoneyFromNative::_drawTime' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogGetMoneyFromNative, ReturnValue) == 0x000008, "Member 'HUDMainGame_C_SetLogGetMoneyFromNative::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsOpenLoadingUI
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_IsOpenLoadingUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_3;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsOpenLoadingUI) == 0x000001, "Wrong alignment on HUDMainGame_C_IsOpenLoadingUI");
static_assert(sizeof(HUDMainGame_C_IsOpenLoadingUI) == 0x000008, "Wrong size on HUDMainGame_C_IsOpenLoadingUI");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsOpenLoadingUI::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_IsPlaying_IsPlaying) == 0x000001, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_IsPlaying_IsPlaying_1) == 0x000002, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_IsPlaying_IsPlaying_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_IsPlaying_IsPlaying_2) == 0x000003, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_IsPlaying_IsPlaying_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_IsPlaying_IsPlaying_3) == 0x000004, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_IsPlaying_IsPlaying_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsOpenLoadingUI, CallFunc_BooleanOR_ReturnValue_2) == 0x000007, "Member 'HUDMainGame_C_IsOpenLoadingUI::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogDrawTime
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_SetLogDrawTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetLogDrawTime) == 0x000004, "Wrong alignment on HUDMainGame_C_SetLogDrawTime");
static_assert(sizeof(HUDMainGame_C_SetLogDrawTime) == 0x000008, "Wrong size on HUDMainGame_C_SetLogDrawTime");
static_assert(offsetof(HUDMainGame_C_SetLogDrawTime, Time) == 0x000000, "Member 'HUDMainGame_C_SetLogDrawTime::Time' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogDrawTime, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'HUDMainGame_C_SetLogDrawTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetLogDrawTime
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_GetLogDrawTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetLogDrawTime) == 0x000004, "Wrong alignment on HUDMainGame_C_GetLogDrawTime");
static_assert(sizeof(HUDMainGame_C_GetLogDrawTime) == 0x000004, "Wrong size on HUDMainGame_C_GetLogDrawTime");
static_assert(offsetof(HUDMainGame_C_GetLogDrawTime, Time) == 0x000000, "Member 'HUDMainGame_C_GetLogDrawTime::Time' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogWaitTime
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_SetLogWaitTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetLogWaitTime) == 0x000004, "Wrong alignment on HUDMainGame_C_SetLogWaitTime");
static_assert(sizeof(HUDMainGame_C_SetLogWaitTime) == 0x000008, "Wrong size on HUDMainGame_C_SetLogWaitTime");
static_assert(offsetof(HUDMainGame_C_SetLogWaitTime, Time) == 0x000000, "Member 'HUDMainGame_C_SetLogWaitTime::Time' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogWaitTime, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'HUDMainGame_C_SetLogWaitTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetLogWaitTime
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_GetLogWaitTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetLogWaitTime) == 0x000004, "Wrong alignment on HUDMainGame_C_GetLogWaitTime");
static_assert(sizeof(HUDMainGame_C_GetLogWaitTime) == 0x000004, "Wrong size on HUDMainGame_C_GetLogWaitTime");
static_assert(offsetof(HUDMainGame_C_GetLogWaitTime, Time) == 0x000000, "Member 'HUDMainGame_C_GetLogWaitTime::Time' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Is Init Loading Chara
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_Is_Init_Loading_Chara final
{
public:
	bool                                          Isinit;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_Is_Init_Loading_Chara) == 0x000001, "Wrong alignment on HUDMainGame_C_Is_Init_Loading_Chara");
static_assert(sizeof(HUDMainGame_C_Is_Init_Loading_Chara) == 0x000004, "Wrong size on HUDMainGame_C_Is_Init_Loading_Chara");
static_assert(offsetof(HUDMainGame_C_Is_Init_Loading_Chara, Isinit) == 0x000000, "Member 'HUDMainGame_C_Is_Init_Loading_Chara::Isinit' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Init_Loading_Chara, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_Is_Init_Loading_Chara::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Init_Loading_Chara, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000002, "Member 'HUDMainGame_C_Is_Init_Loading_Chara::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Init_Loading_Chara, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'HUDMainGame_C_Is_Init_Loading_Chara::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsCurrentMessageWithVoice
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_IsCurrentMessageWithVoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsCurrentMessageWithVoice) == 0x000001, "Wrong alignment on HUDMainGame_C_IsCurrentMessageWithVoice");
static_assert(sizeof(HUDMainGame_C_IsCurrentMessageWithVoice) == 0x000001, "Wrong size on HUDMainGame_C_IsCurrentMessageWithVoice");
static_assert(offsetof(HUDMainGame_C_IsCurrentMessageWithVoice, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsCurrentMessageWithVoice::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetDebugLoadingID
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetDebugLoadingID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetDebugLoadingID) == 0x000004, "Wrong alignment on HUDMainGame_C_SetDebugLoadingID");
static_assert(sizeof(HUDMainGame_C_SetDebugLoadingID) == 0x000004, "Wrong size on HUDMainGame_C_SetDebugLoadingID");
static_assert(offsetof(HUDMainGame_C_SetDebugLoadingID, ID) == 0x000000, "Member 'HUDMainGame_C_SetDebugLoadingID::ID' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetDebugLoadingID
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_GetDebugLoadingID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetDebugLoadingID) == 0x000004, "Wrong alignment on HUDMainGame_C_GetDebugLoadingID");
static_assert(sizeof(HUDMainGame_C_GetDebugLoadingID) == 0x000004, "Wrong size on HUDMainGame_C_GetDebugLoadingID");
static_assert(offsetof(HUDMainGame_C_GetDebugLoadingID, ID) == 0x000000, "Member 'HUDMainGame_C_GetDebugLoadingID::ID' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLoadingCharaID
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetLoadingCharaID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLoadingCharaID) == 0x000004, "Wrong alignment on HUDMainGame_C_SetLoadingCharaID");
static_assert(sizeof(HUDMainGame_C_SetLoadingCharaID) == 0x000004, "Wrong size on HUDMainGame_C_SetLoadingCharaID");
static_assert(offsetof(HUDMainGame_C_SetLoadingCharaID, ID) == 0x000000, "Member 'HUDMainGame_C_SetLoadingCharaID::ID' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLoadingInterludeID
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetLoadingInterludeID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLoadingInterludeID) == 0x000004, "Wrong alignment on HUDMainGame_C_SetLoadingInterludeID");
static_assert(sizeof(HUDMainGame_C_SetLoadingInterludeID) == 0x000004, "Wrong size on HUDMainGame_C_SetLoadingInterludeID");
static_assert(offsetof(HUDMainGame_C_SetLoadingInterludeID, ID) == 0x000000, "Member 'HUDMainGame_C_SetLoadingInterludeID::ID' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLoadingChapterID
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetLoadingChapterID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLoadingChapterID) == 0x000004, "Wrong alignment on HUDMainGame_C_SetLoadingChapterID");
static_assert(sizeof(HUDMainGame_C_SetLoadingChapterID) == 0x000004, "Wrong size on HUDMainGame_C_SetLoadingChapterID");
static_assert(offsetof(HUDMainGame_C_SetLoadingChapterID, ID) == 0x000000, "Member 'HUDMainGame_C_SetLoadingChapterID::ID' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ItemMenuGetCurrentItemID
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_ItemMenuGetCurrentItemID final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6603[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_ItemMenuGetCurrentItemID_ItemID;          // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_ItemMenuGetCurrentItemID) == 0x000008, "Wrong alignment on HUDMainGame_C_ItemMenuGetCurrentItemID");
static_assert(sizeof(HUDMainGame_C_ItemMenuGetCurrentItemID) == 0x000020, "Wrong size on HUDMainGame_C_ItemMenuGetCurrentItemID");
static_assert(offsetof(HUDMainGame_C_ItemMenuGetCurrentItemID, ItemId) == 0x000000, "Member 'HUDMainGame_C_ItemMenuGetCurrentItemID::ItemId' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemMenuGetCurrentItemID, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_ItemMenuGetCurrentItemID::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemMenuGetCurrentItemID, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_ItemMenuGetCurrentItemID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemMenuGetCurrentItemID, CallFunc_ItemMenuGetCurrentItemID_ItemID) == 0x000014, "Member 'HUDMainGame_C_ItemMenuGetCurrentItemID::CallFunc_ItemMenuGetCurrentItemID_ItemID' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.InitSasWindow
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_InitSasWindow final
{
public:
	class UWB_ui_SasSkill_Popup_C*                CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_InitSasWindow) == 0x000008, "Wrong alignment on HUDMainGame_C_InitSasWindow");
static_assert(sizeof(HUDMainGame_C_InitSasWindow) == 0x000008, "Wrong size on HUDMainGame_C_InitSasWindow");
static_assert(offsetof(HUDMainGame_C_InitSasWindow, CallFunc_Create_ReturnValue) == 0x000000, "Member 'HUDMainGame_C_InitSasWindow::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartSasWindow
// 0x0030 (0x0030 - 0x0000)
struct HUDMainGame_C_StartSasWindow final
{
public:
	EPlayerID                                     Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEx1;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEx2;                                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6604[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _KeyItemNameDLC2;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   _KeyItemNameDLC1;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6605[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemNum_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6606[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemNum_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartSasWindow) == 0x000008, "Wrong alignment on HUDMainGame_C_StartSasWindow");
static_assert(sizeof(HUDMainGame_C_StartSasWindow) == 0x000030, "Wrong size on HUDMainGame_C_StartSasWindow");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, Target) == 0x000000, "Member 'HUDMainGame_C_StartSasWindow::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, IsEx1) == 0x000001, "Member 'HUDMainGame_C_StartSasWindow::IsEx1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, IsEx2) == 0x000002, "Member 'HUDMainGame_C_StartSasWindow::IsEx2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, _KeyItemNameDLC2) == 0x000004, "Member 'HUDMainGame_C_StartSasWindow::_KeyItemNameDLC2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, _KeyItemNameDLC1) == 0x00000C, "Member 'HUDMainGame_C_StartSasWindow::_KeyItemNameDLC1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, CallFunc_GetUserParamManager_UserParamManager) == 0x000018, "Member 'HUDMainGame_C_StartSasWindow::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, CallFunc_GetItemNum_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_StartSasWindow::CallFunc_GetItemNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'HUDMainGame_C_StartSasWindow::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, CallFunc_GetItemNum_ReturnValue_1) == 0x000028, "Member 'HUDMainGame_C_StartSasWindow::CallFunc_GetItemNum_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindow, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00002C, "Member 'HUDMainGame_C_StartSasWindow::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogUpdateGoal
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_SetLogUpdateGoal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6607[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogUpdateGoal) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogUpdateGoal");
static_assert(sizeof(HUDMainGame_C_SetLogUpdateGoal) == 0x000020, "Wrong size on HUDMainGame_C_SetLogUpdateGoal");
static_assert(offsetof(HUDMainGame_C_SetLogUpdateGoal, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_SetLogUpdateGoal::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogUpdateGoal, CallFunc_GetDataBaseManager_Manager) == 0x000008, "Member 'HUDMainGame_C_SetLogUpdateGoal::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogUpdateGoal, CallFunc_GetText_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_SetLogUpdateGoal::CallFunc_GetText_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartSasWindowNative
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_StartSasWindowNative final
{
public:
	EPlayerID                                     Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEx1;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEx2;                                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartSasWindowNative) == 0x000001, "Wrong alignment on HUDMainGame_C_StartSasWindowNative");
static_assert(sizeof(HUDMainGame_C_StartSasWindowNative) == 0x000004, "Wrong size on HUDMainGame_C_StartSasWindowNative");
static_assert(offsetof(HUDMainGame_C_StartSasWindowNative, Target) == 0x000000, "Member 'HUDMainGame_C_StartSasWindowNative::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindowNative, IsEx1) == 0x000001, "Member 'HUDMainGame_C_StartSasWindowNative::IsEx1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindowNative, IsEx2) == 0x000002, "Member 'HUDMainGame_C_StartSasWindowNative::IsEx2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartSasWindowNative, ReturnValue) == 0x000003, "Member 'HUDMainGame_C_StartSasWindowNative::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MiniTipsSuccessStartDraw
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_MiniTipsSuccessStartDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6608[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MiniTipsSuccessStartDraw) == 0x000008, "Wrong alignment on HUDMainGame_C_MiniTipsSuccessStartDraw");
static_assert(sizeof(HUDMainGame_C_MiniTipsSuccessStartDraw) == 0x000018, "Wrong size on HUDMainGame_C_MiniTipsSuccessStartDraw");
static_assert(offsetof(HUDMainGame_C_MiniTipsSuccessStartDraw, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_MiniTipsSuccessStartDraw::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsSuccessStartDraw, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_MiniTipsSuccessStartDraw::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsSuccessStartDraw, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_MiniTipsSuccessStartDraw::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MiniTipsSuccessStopDraw
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_MiniTipsSuccessStopDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6609[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MiniTipsSuccessStopDraw) == 0x000008, "Wrong alignment on HUDMainGame_C_MiniTipsSuccessStopDraw");
static_assert(sizeof(HUDMainGame_C_MiniTipsSuccessStopDraw) == 0x000018, "Wrong size on HUDMainGame_C_MiniTipsSuccessStopDraw");
static_assert(offsetof(HUDMainGame_C_MiniTipsSuccessStopDraw, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_MiniTipsSuccessStopDraw::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsSuccessStopDraw, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_MiniTipsSuccessStopDraw::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MiniTipsSuccessStopDraw, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_MiniTipsSuccessStopDraw::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MessageSetDebugDrawFlag
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_MessageSetDebugDrawFlag final
{
public:
	bool                                          IsDraw;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MessageSetDebugDrawFlag) == 0x000001, "Wrong alignment on HUDMainGame_C_MessageSetDebugDrawFlag");
static_assert(sizeof(HUDMainGame_C_MessageSetDebugDrawFlag) == 0x000002, "Wrong size on HUDMainGame_C_MessageSetDebugDrawFlag");
static_assert(offsetof(HUDMainGame_C_MessageSetDebugDrawFlag, IsDraw) == 0x000000, "Member 'HUDMainGame_C_MessageSetDebugDrawFlag::IsDraw' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MessageSetDebugDrawFlag, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_MessageSetDebugDrawFlag::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartMinimapBrainField
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_StartMinimapBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartMinimapBrainField_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartMinimapBrainField) == 0x000001, "Wrong alignment on HUDMainGame_C_StartMinimapBrainField");
static_assert(sizeof(HUDMainGame_C_StartMinimapBrainField) == 0x000003, "Wrong size on HUDMainGame_C_StartMinimapBrainField");
static_assert(offsetof(HUDMainGame_C_StartMinimapBrainField, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_StartMinimapBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartMinimapBrainField, CallFunc_StartMinimapBrainField_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_StartMinimapBrainField::CallFunc_StartMinimapBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartMinimapBrainField, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_StartMinimapBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EndMinimapBrainField
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_EndMinimapBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndMinimapBrainField_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EndMinimapBrainField) == 0x000001, "Wrong alignment on HUDMainGame_C_EndMinimapBrainField");
static_assert(sizeof(HUDMainGame_C_EndMinimapBrainField) == 0x000003, "Wrong size on HUDMainGame_C_EndMinimapBrainField");
static_assert(offsetof(HUDMainGame_C_EndMinimapBrainField, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_EndMinimapBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndMinimapBrainField, CallFunc_EndMinimapBrainField_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_EndMinimapBrainField::CallFunc_EndMinimapBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndMinimapBrainField, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_EndMinimapBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PsychicTimerSetState
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_PsychicTimerSetState final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_660A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PsychicTimerSetState) == 0x000008, "Wrong alignment on HUDMainGame_C_PsychicTimerSetState");
static_assert(sizeof(HUDMainGame_C_PsychicTimerSetState) == 0x000018, "Wrong size on HUDMainGame_C_PsychicTimerSetState");
static_assert(offsetof(HUDMainGame_C_PsychicTimerSetState, Param_Index) == 0x000000, "Member 'HUDMainGame_C_PsychicTimerSetState::Param_Index' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicTimerSetState, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_PsychicTimerSetState::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PsychicTimerSetState, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_PsychicTimerSetState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartMessageGuide
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_StartMessageGuide final
{
public:
	bool                                          FlagSkip;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlagPhotoMode;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartMessageGuide) == 0x000001, "Wrong alignment on HUDMainGame_C_StartMessageGuide");
static_assert(sizeof(HUDMainGame_C_StartMessageGuide) == 0x000003, "Wrong size on HUDMainGame_C_StartMessageGuide");
static_assert(offsetof(HUDMainGame_C_StartMessageGuide, FlagSkip) == 0x000000, "Member 'HUDMainGame_C_StartMessageGuide::FlagSkip' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartMessageGuide, FlagPhotoMode) == 0x000001, "Member 'HUDMainGame_C_StartMessageGuide::FlagPhotoMode' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartMessageGuide, ReturnValue) == 0x000002, "Member 'HUDMainGame_C_StartMessageGuide::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CloseMessageGuide
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_CloseMessageGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CloseMessageGuide) == 0x000001, "Wrong alignment on HUDMainGame_C_CloseMessageGuide");
static_assert(sizeof(HUDMainGame_C_CloseMessageGuide) == 0x000001, "Wrong size on HUDMainGame_C_CloseMessageGuide");
static_assert(offsetof(HUDMainGame_C_CloseMessageGuide, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CloseMessageGuide::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetDebugFlagDrawShortcutGuide
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_SetDebugFlagDrawShortcutGuide final
{
public:
	bool                                          IsDraw;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_660B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetDebugFlagDrawShortcutGuide) == 0x000008, "Wrong alignment on HUDMainGame_C_SetDebugFlagDrawShortcutGuide");
static_assert(sizeof(HUDMainGame_C_SetDebugFlagDrawShortcutGuide) == 0x000018, "Wrong size on HUDMainGame_C_SetDebugFlagDrawShortcutGuide");
static_assert(offsetof(HUDMainGame_C_SetDebugFlagDrawShortcutGuide, IsDraw) == 0x000000, "Member 'HUDMainGame_C_SetDebugFlagDrawShortcutGuide::IsDraw' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetDebugFlagDrawShortcutGuide, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_SetDebugFlagDrawShortcutGuide::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetDebugFlagDrawShortcutGuide, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_SetDebugFlagDrawShortcutGuide::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.GetDebugFlagDrawShortcutGuide
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_GetDebugFlagDrawShortcutGuide final
{
public:
	bool                                          IsDraw;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_660C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDebugFlagDrawShortcutGuide_IsDraw;     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_GetDebugFlagDrawShortcutGuide) == 0x000008, "Wrong alignment on HUDMainGame_C_GetDebugFlagDrawShortcutGuide");
static_assert(sizeof(HUDMainGame_C_GetDebugFlagDrawShortcutGuide) == 0x000018, "Wrong size on HUDMainGame_C_GetDebugFlagDrawShortcutGuide");
static_assert(offsetof(HUDMainGame_C_GetDebugFlagDrawShortcutGuide, IsDraw) == 0x000000, "Member 'HUDMainGame_C_GetDebugFlagDrawShortcutGuide::IsDraw' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetDebugFlagDrawShortcutGuide, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_GetDebugFlagDrawShortcutGuide::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetDebugFlagDrawShortcutGuide, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_GetDebugFlagDrawShortcutGuide::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetDebugFlagDrawShortcutGuide, CallFunc_GetDebugFlagDrawShortcutGuide_IsDraw) == 0x000011, "Member 'HUDMainGame_C_GetDebugFlagDrawShortcutGuide::CallFunc_GetDebugFlagDrawShortcutGuide_IsDraw' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Set Player Wait Flag
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_Set_Player_Wait_Flag final
{
public:
	bool                                          IsWait;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_660D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_Set_Player_Wait_Flag) == 0x000008, "Wrong alignment on HUDMainGame_C_Set_Player_Wait_Flag");
static_assert(sizeof(HUDMainGame_C_Set_Player_Wait_Flag) == 0x000018, "Wrong size on HUDMainGame_C_Set_Player_Wait_Flag");
static_assert(offsetof(HUDMainGame_C_Set_Player_Wait_Flag, IsWait) == 0x000000, "Member 'HUDMainGame_C_Set_Player_Wait_Flag::IsWait' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Player_Wait_Flag, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_Set_Player_Wait_Flag::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Player_Wait_Flag, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_Set_Player_Wait_Flag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetLogBrainFieldAddTime
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_SetLogBrainFieldAddTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_660E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseManager*                       CallFunc_GetDataBaseManager_Manager;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetText_ReturnValue;                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_SetLogBrainFieldAddTime) == 0x000008, "Wrong alignment on HUDMainGame_C_SetLogBrainFieldAddTime");
static_assert(sizeof(HUDMainGame_C_SetLogBrainFieldAddTime) == 0x000020, "Wrong size on HUDMainGame_C_SetLogBrainFieldAddTime");
static_assert(offsetof(HUDMainGame_C_SetLogBrainFieldAddTime, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_SetLogBrainFieldAddTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogBrainFieldAddTime, CallFunc_GetDataBaseManager_Manager) == 0x000008, "Member 'HUDMainGame_C_SetLogBrainFieldAddTime::CallFunc_GetDataBaseManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetLogBrainFieldAddTime, CallFunc_GetText_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_SetLogBrainFieldAddTime::CallFunc_GetText_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PkObjectTimerStart
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_PkObjectTimerStart final
{
public:
	class ARSCharacterBase*                       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSecond;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSecond;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenDirect;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PkObjectTimerStart) == 0x000008, "Wrong alignment on HUDMainGame_C_PkObjectTimerStart");
static_assert(sizeof(HUDMainGame_C_PkObjectTimerStart) == 0x000018, "Wrong size on HUDMainGame_C_PkObjectTimerStart");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerStart, Target) == 0x000000, "Member 'HUDMainGame_C_PkObjectTimerStart::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerStart, MaxSecond) == 0x000008, "Member 'HUDMainGame_C_PkObjectTimerStart::MaxSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerStart, CurrentSecond) == 0x00000C, "Member 'HUDMainGame_C_PkObjectTimerStart::CurrentSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerStart, OpenDirect) == 0x000010, "Member 'HUDMainGame_C_PkObjectTimerStart::OpenDirect' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PkObjectTimerStop
// 0x0008 (0x0008 - 0x0000)
struct HUDMainGame_C_PkObjectTimerStop final
{
public:
	class ARSCharacterBase*                       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_PkObjectTimerStop) == 0x000008, "Wrong alignment on HUDMainGame_C_PkObjectTimerStop");
static_assert(sizeof(HUDMainGame_C_PkObjectTimerStop) == 0x000008, "Wrong size on HUDMainGame_C_PkObjectTimerStop");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerStop, Target) == 0x000000, "Member 'HUDMainGame_C_PkObjectTimerStop::Target' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PkObjectTimerUpdate
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_PkObjectTimerUpdate final
{
public:
	class ARSCharacterBase*                       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSecond;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSecond;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_PkObjectTimerUpdate) == 0x000008, "Wrong alignment on HUDMainGame_C_PkObjectTimerUpdate");
static_assert(sizeof(HUDMainGame_C_PkObjectTimerUpdate) == 0x000010, "Wrong size on HUDMainGame_C_PkObjectTimerUpdate");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerUpdate, Target) == 0x000000, "Member 'HUDMainGame_C_PkObjectTimerUpdate::Target' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerUpdate, MaxSecond) == 0x000008, "Member 'HUDMainGame_C_PkObjectTimerUpdate::MaxSecond' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PkObjectTimerUpdate, CurrentSecond) == 0x00000C, "Member 'HUDMainGame_C_PkObjectTimerUpdate::CurrentSecond' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Set Pause Event Widgets
// 0x0058 (0x0058 - 0x0000)
struct HUDMainGame_C_Set_Pause_Event_Widgets final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_660F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6610[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6611[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6612[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUIBase*>                        K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWidgetPauseFlag_ReturnValue;           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Xor_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWidgetPauseFlag_ReturnValue_1;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_Set_Pause_Event_Widgets) == 0x000008, "Wrong alignment on HUDMainGame_C_Set_Pause_Event_Widgets");
static_assert(sizeof(HUDMainGame_C_Set_Pause_Event_Widgets) == 0x000058, "Wrong size on HUDMainGame_C_Set_Pause_Event_Widgets");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, IsPause) == 0x000000, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::IsPause' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, Temp_int_Array_Index_Variable) == 0x000008, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, Temp_int_Loop_Num_Variable_1) == 0x000018, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Less_IntInt_ReturnValue_1) == 0x000024, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, K2Node_MakeArray_Array) == 0x000030, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_GetWidgetPauseFlag_ReturnValue) == 0x000044, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_GetWidgetPauseFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Xor_IntInt_ReturnValue) == 0x00004C, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Xor_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_GetWidgetPauseFlag_ReturnValue_1) == 0x000050, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_GetWidgetPauseFlag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Set_Pause_Event_Widgets, CallFunc_Or_IntInt_ReturnValue) == 0x000054, "Member 'HUDMainGame_C_Set_Pause_Event_Widgets::CallFunc_Or_IntInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsPlayTownName
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsPlayTownName final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAnimation_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsPlayTownName) == 0x000001, "Wrong alignment on HUDMainGame_C_IsPlayTownName");
static_assert(sizeof(HUDMainGame_C_IsPlayTownName) == 0x000002, "Wrong size on HUDMainGame_C_IsPlayTownName");
static_assert(offsetof(HUDMainGame_C_IsPlayTownName, Result) == 0x000000, "Member 'HUDMainGame_C_IsPlayTownName::Result' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsPlayTownName, CallFunc_IsPlayingAnimation_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsPlayTownName::CallFunc_IsPlayingAnimation_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsCurrentMessageWithChoices
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_IsCurrentMessageWithChoices final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsCurrentMessageWithChoices) == 0x000001, "Wrong alignment on HUDMainGame_C_IsCurrentMessageWithChoices");
static_assert(sizeof(HUDMainGame_C_IsCurrentMessageWithChoices) == 0x000001, "Wrong size on HUDMainGame_C_IsCurrentMessageWithChoices");
static_assert(offsetof(HUDMainGame_C_IsCurrentMessageWithChoices, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsCurrentMessageWithChoices::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsFoundCustomTimeDilationRegistName_FromNative
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative final
{
public:
	class FString                                 RegistName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsFound;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6613[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentCustomTimeDilation;                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRegistName_IsFound;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6614[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsRegistName_CurrentCustomTimeDilation;   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative) == 0x000008, "Wrong alignment on HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative");
static_assert(sizeof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative) == 0x000028, "Wrong size on HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, RegistName) == 0x000000, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::RegistName' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, IsFound) == 0x000010, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::IsFound' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, CurrentCustomTimeDilation) == 0x000014, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, CallFunc_GetGameSystemManager_Manager) == 0x000018, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, CallFunc_IsRegistName_IsFound) == 0x000021, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::CallFunc_IsRegistName_IsFound' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative, CallFunc_IsRegistName_CurrentCustomTimeDilation) == 0x000024, "Member 'HUDMainGame_C_IsFoundCustomTimeDilationRegistName_FromNative::CallFunc_IsRegistName_CurrentCustomTimeDilation' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CanPlayCutScene_FromNative
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_CanPlayCutScene_FromNative final
{
public:
	bool                                          IsTipsCheck;                                       // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPlayCutScene_OK;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CanPlayCutScene_FromNative) == 0x000001, "Wrong alignment on HUDMainGame_C_CanPlayCutScene_FromNative");
static_assert(sizeof(HUDMainGame_C_CanPlayCutScene_FromNative) == 0x000003, "Wrong size on HUDMainGame_C_CanPlayCutScene_FromNative");
static_assert(offsetof(HUDMainGame_C_CanPlayCutScene_FromNative, IsTipsCheck) == 0x000000, "Member 'HUDMainGame_C_CanPlayCutScene_FromNative::IsTipsCheck' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CanPlayCutScene_FromNative, ReturnValue) == 0x000001, "Member 'HUDMainGame_C_CanPlayCutScene_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CanPlayCutScene_FromNative, CallFunc_CanPlayCutScene_OK) == 0x000002, "Member 'HUDMainGame_C_CanPlayCutScene_FromNative::CallFunc_CanPlayCutScene_OK' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.PauseBrainTalkForEvent
// 0x0038 (0x0038 - 0x0000)
struct HUDMainGame_C_PauseBrainTalkForEvent final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6615[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAnyDead_Playing;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6616[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStartTalkEventPauseBT_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6617[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_1;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndTalk_IsEnd;                          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_PauseBrainTalkForEvent) == 0x000008, "Wrong alignment on HUDMainGame_C_PauseBrainTalkForEvent");
static_assert(sizeof(HUDMainGame_C_PauseBrainTalkForEvent) == 0x000038, "Wrong size on HUDMainGame_C_PauseBrainTalkForEvent");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, IsPause) == 0x000000, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::IsPause' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsPlayingAnyDead_Playing) == 0x000011, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsPlayingAnyDead_Playing' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000018, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsStartTalkEventPauseBT_ReturnValue) == 0x000021, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsStartTalkEventPauseBT_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_GetBrainTalkManager_BrainTalkManager_1) == 0x000028, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_GetBrainTalkManager_BrainTalkManager_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsEndTalk_IsEnd) == 0x000031, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsEndTalk_IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_PauseBrainTalkForEvent, CallFunc_IsValid_ReturnValue_3) == 0x000032, "Member 'HUDMainGame_C_PauseBrainTalkForEvent::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsEnableOpenTips
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_IsEnableOpenTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsEnableOpenTips) == 0x000001, "Wrong alignment on HUDMainGame_C_IsEnableOpenTips");
static_assert(sizeof(HUDMainGame_C_IsEnableOpenTips) == 0x000003, "Wrong size on HUDMainGame_C_IsEnableOpenTips");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenTips, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsEnableOpenTips::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenTips, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsEnableOpenTips::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenTips, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsEnableOpenTips::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CheckEndChoiceMessage
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_CheckEndChoiceMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckFlagChoice_Flag;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CheckEndChoiceMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_CheckEndChoiceMessage");
static_assert(sizeof(HUDMainGame_C_CheckEndChoiceMessage) == 0x000003, "Wrong size on HUDMainGame_C_CheckEndChoiceMessage");
static_assert(offsetof(HUDMainGame_C_CheckEndChoiceMessage, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CheckEndChoiceMessage::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CheckEndChoiceMessage, CallFunc_CheckFlagChoice_Flag) == 0x000001, "Member 'HUDMainGame_C_CheckEndChoiceMessage::CallFunc_CheckFlagChoice_Flag' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CheckEndChoiceMessage, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_CheckEndChoiceMessage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.ItemSetNoMotionUse
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_ItemSetNoMotionUse final
{
public:
	bool                                          IsNoMotion;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6618[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_ItemSetNoMotionUse) == 0x000008, "Wrong alignment on HUDMainGame_C_ItemSetNoMotionUse");
static_assert(sizeof(HUDMainGame_C_ItemSetNoMotionUse) == 0x000018, "Wrong size on HUDMainGame_C_ItemSetNoMotionUse");
static_assert(offsetof(HUDMainGame_C_ItemSetNoMotionUse, IsNoMotion) == 0x000000, "Member 'HUDMainGame_C_ItemSetNoMotionUse::IsNoMotion' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemSetNoMotionUse, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_ItemSetNoMotionUse::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_ItemSetNoMotionUse, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_ItemSetNoMotionUse::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CanEndLoading
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_CanEndLoading final
{
public:
	bool                                          Can_End;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClosable_Closable;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CanEndLoading) == 0x000001, "Wrong alignment on HUDMainGame_C_CanEndLoading");
static_assert(sizeof(HUDMainGame_C_CanEndLoading) == 0x000002, "Wrong size on HUDMainGame_C_CanEndLoading");
static_assert(offsetof(HUDMainGame_C_CanEndLoading, Can_End) == 0x000000, "Member 'HUDMainGame_C_CanEndLoading::Can_End' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_CanEndLoading, CallFunc_IsClosable_Closable) == 0x000001, "Member 'HUDMainGame_C_CanEndLoading::CallFunc_IsClosable_Closable' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsPlayMessageOpenAnimation
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsPlayMessageOpenAnimation final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayOpenAnimation_IsPlay;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsPlayMessageOpenAnimation) == 0x000001, "Wrong alignment on HUDMainGame_C_IsPlayMessageOpenAnimation");
static_assert(sizeof(HUDMainGame_C_IsPlayMessageOpenAnimation) == 0x000002, "Wrong size on HUDMainGame_C_IsPlayMessageOpenAnimation");
static_assert(offsetof(HUDMainGame_C_IsPlayMessageOpenAnimation, IsPlay) == 0x000000, "Member 'HUDMainGame_C_IsPlayMessageOpenAnimation::IsPlay' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsPlayMessageOpenAnimation, CallFunc_IsPlayOpenAnimation_IsPlay) == 0x000001, "Member 'HUDMainGame_C_IsPlayMessageOpenAnimation::CallFunc_IsPlayOpenAnimation_IsPlay' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetUUIVitalityEN02Visible
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_SetUUIVitalityEN02Visible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetUUIVitalityEN02Visible) == 0x000001, "Wrong alignment on HUDMainGame_C_SetUUIVitalityEN02Visible");
static_assert(sizeof(HUDMainGame_C_SetUUIVitalityEN02Visible) == 0x000002, "Wrong size on HUDMainGame_C_SetUUIVitalityEN02Visible");
static_assert(offsetof(HUDMainGame_C_SetUUIVitalityEN02Visible, IsVisible) == 0x000000, "Member 'HUDMainGame_C_SetUUIVitalityEN02Visible::IsVisible' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetUUIVitalityEN02Visible, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_SetUUIVitalityEN02Visible::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EnemyHpWidgetDisappearInstantly
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_EnemyHpWidgetDisappearInstantly final
{
public:
	class ARSCharacterBase*                       InTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EnemyHpWidgetDisappearInstantly) == 0x000008, "Wrong alignment on HUDMainGame_C_EnemyHpWidgetDisappearInstantly");
static_assert(sizeof(HUDMainGame_C_EnemyHpWidgetDisappearInstantly) == 0x000018, "Wrong size on HUDMainGame_C_EnemyHpWidgetDisappearInstantly");
static_assert(offsetof(HUDMainGame_C_EnemyHpWidgetDisappearInstantly, InTarget) == 0x000000, "Member 'HUDMainGame_C_EnemyHpWidgetDisappearInstantly::InTarget' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EnemyHpWidgetDisappearInstantly, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_EnemyHpWidgetDisappearInstantly::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EnemyHpWidgetDisappearInstantly, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_EnemyHpWidgetDisappearInstantly::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EnemyHpWidgetDisappearInstantly, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_EnemyHpWidgetDisappearInstantly::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.DebugSetFlagBrainMessageTest
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_DebugSetFlagBrainMessageTest final
{
public:
	bool                                          IsTest;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6619[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_MainContents_C*                  K2Node_DynamicCast_AsWB_Ui_Main_Contents;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_DebugSetFlagBrainMessageTest) == 0x000008, "Wrong alignment on HUDMainGame_C_DebugSetFlagBrainMessageTest");
static_assert(sizeof(HUDMainGame_C_DebugSetFlagBrainMessageTest) == 0x000018, "Wrong size on HUDMainGame_C_DebugSetFlagBrainMessageTest");
static_assert(offsetof(HUDMainGame_C_DebugSetFlagBrainMessageTest, IsTest) == 0x000000, "Member 'HUDMainGame_C_DebugSetFlagBrainMessageTest::IsTest' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugSetFlagBrainMessageTest, K2Node_DynamicCast_AsWB_Ui_Main_Contents) == 0x000008, "Member 'HUDMainGame_C_DebugSetFlagBrainMessageTest::K2Node_DynamicCast_AsWB_Ui_Main_Contents' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_DebugSetFlagBrainMessageTest, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_DebugSetFlagBrainMessageTest::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartCode
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_StartCode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_Code_C*                          CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartCode) == 0x000008, "Wrong alignment on HUDMainGame_C_StartCode");
static_assert(sizeof(HUDMainGame_C_StartCode) == 0x000010, "Wrong size on HUDMainGame_C_StartCode");
static_assert(offsetof(HUDMainGame_C_StartCode, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_StartCode::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartCode, CallFunc_Create_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_StartCode::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartKeyword
// 0x0010 (0x0010 - 0x0000)
struct HUDMainGame_C_StartKeyword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_Keyword_C*                       CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartKeyword) == 0x000008, "Wrong alignment on HUDMainGame_C_StartKeyword");
static_assert(sizeof(HUDMainGame_C_StartKeyword) == 0x000010, "Wrong size on HUDMainGame_C_StartKeyword");
static_assert(offsetof(HUDMainGame_C_StartKeyword, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_StartKeyword::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartKeyword, CallFunc_Create_ReturnValue) == 0x000008, "Member 'HUDMainGame_C_StartKeyword::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.CloseMessage
// 0x0001 (0x0001 - 0x0000)
struct HUDMainGame_C_CloseMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_CloseMessage) == 0x000001, "Wrong alignment on HUDMainGame_C_CloseMessage");
static_assert(sizeof(HUDMainGame_C_CloseMessage) == 0x000001, "Wrong size on HUDMainGame_C_CloseMessage");
static_assert(offsetof(HUDMainGame_C_CloseMessage, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_CloseMessage::ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.startVisionSimulatorResult
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_StartVisionSimulatorResult final
{
public:
	bool                                          IsCheckMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MissionTitle;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_MissionResult_C*                 CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_MissionResult_C*                 K2Node_DynamicCast_AsWB_Ui_Mission_Result;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartVisionSimulatorResult) == 0x000008, "Wrong alignment on HUDMainGame_C_StartVisionSimulatorResult");
static_assert(sizeof(HUDMainGame_C_StartVisionSimulatorResult) == 0x000028, "Wrong size on HUDMainGame_C_StartVisionSimulatorResult");
static_assert(offsetof(HUDMainGame_C_StartVisionSimulatorResult, IsCheckMode) == 0x000000, "Member 'HUDMainGame_C_StartVisionSimulatorResult::IsCheckMode' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartVisionSimulatorResult, MissionTitle) == 0x000004, "Member 'HUDMainGame_C_StartVisionSimulatorResult::MissionTitle' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartVisionSimulatorResult, ReturnValue) == 0x00000C, "Member 'HUDMainGame_C_StartVisionSimulatorResult::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartVisionSimulatorResult, CallFunc_Create_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartVisionSimulatorResult::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartVisionSimulatorResult, K2Node_DynamicCast_AsWB_Ui_Mission_Result) == 0x000018, "Member 'HUDMainGame_C_StartVisionSimulatorResult::K2Node_DynamicCast_AsWB_Ui_Mission_Result' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartVisionSimulatorResult, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'HUDMainGame_C_StartVisionSimulatorResult::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsEnableOpenPhotoMode
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_IsEnableOpenPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFadeAnimation_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTalkEvent_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutSceneEventNative_ReturnValue;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFade_ReturnValue;                       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_1;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_2;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_3;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndGameOver_IsEnd;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying_4;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsEnableOpenPhotoMode) == 0x000008, "Wrong alignment on HUDMainGame_C_IsEnableOpenPhotoMode");
static_assert(sizeof(HUDMainGame_C_IsEnableOpenPhotoMode) == 0x000028, "Wrong size on HUDMainGame_C_IsEnableOpenPhotoMode");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, LbEnable) == 0x000001, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::LbEnable' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsFadeAnimation_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsFadeAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsTalkEvent_ReturnValue) == 0x000012, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsTalkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsCutSceneEventNative_ReturnValue) == 0x000013, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsCutSceneEventNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsFade_ReturnValue) == 0x000014, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsFade_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsPlaying_IsPlaying) == 0x000015, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsPlaying_IsPlaying_1) == 0x000016, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsPlaying_IsPlaying_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsPlaying_IsPlaying_2) == 0x000017, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsPlaying_IsPlaying_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsPlaying_IsPlaying_3) == 0x000018, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsPlaying_IsPlaying_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsEndGameOver_IsEnd) == 0x000019, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsEndGameOver_IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_IsPlaying_IsPlaying_4) == 0x00001A, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_IsPlaying_IsPlaying_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_BooleanOR_ReturnValue_1) == 0x00001C, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_BooleanOR_ReturnValue_2) == 0x00001D, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_BooleanOR_ReturnValue_3) == 0x00001E, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_BooleanOR_ReturnValue_4) == 0x00001F, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_BooleanOR_ReturnValue_5) == 0x000020, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEnableOpenPhotoMode, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'HUDMainGame_C_IsEnableOpenPhotoMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EndPhotoMode
// 0x0028 (0x0028 - 0x0000)
struct HUDMainGame_C_EndPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutSceneEventNative_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6620[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeSoundState_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndPhotoMode_ReturnValue;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EndPhotoMode) == 0x000008, "Wrong alignment on HUDMainGame_C_EndPhotoMode");
static_assert(sizeof(HUDMainGame_C_EndPhotoMode) == 0x000028, "Wrong size on HUDMainGame_C_EndPhotoMode");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_EndPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'HUDMainGame_C_EndPhotoMode::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_EndPhotoMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, CallFunc_IsCutSceneEventNative_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_EndPhotoMode::CallFunc_IsCutSceneEventNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, CallFunc_GetSoundManager_SoundManager) == 0x000018, "Member 'HUDMainGame_C_EndPhotoMode::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, CallFunc_ChangeSoundState_ReturnValue) == 0x000020, "Member 'HUDMainGame_C_EndPhotoMode::CallFunc_ChangeSoundState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndPhotoMode, CallFunc_EndPhotoMode_ReturnValue) == 0x000021, "Member 'HUDMainGame_C_EndPhotoMode::CallFunc_EndPhotoMode_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartPhotoMode
// 0x0068 (0x0068 - 0x0000)
struct HUDMainGame_C_StartPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6621[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue_1;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPhotoModeOutlineSetting_ReturnValue;    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6622[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeSoundState_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6623[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6624[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutSceneEventNative_ReturnValue;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6625[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue_2;    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartPhotoMode_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_StartPhotoMode) == 0x000008, "Wrong alignment on HUDMainGame_C_StartPhotoMode");
static_assert(sizeof(HUDMainGame_C_StartPhotoMode) == 0x000068, "Wrong size on HUDMainGame_C_StartPhotoMode");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_StartPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetScalarParameterValue_ReturnValue) == 0x000004, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetScalarParameterValue_ReturnValue_1) == 0x000008, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_IsPhotoModeOutlineSetting_ReturnValue) == 0x00000C, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_IsPhotoModeOutlineSetting_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetSoundManager_SoundManager) == 0x000010, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_ChangeSoundState_ReturnValue) == 0x000018, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_ChangeSoundState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetEventManager_EventManager) == 0x000020, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000028, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetCameraLocation_ReturnValue) == 0x000034, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_BreakVector_X) == 0x000040, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_BreakVector_Y) == 0x000044, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_BreakVector_Z) == 0x000048, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_IsCutSceneEventNative_ReturnValue) == 0x00004C, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_IsCutSceneEventNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, K2Node_MakeStruct_LinearColor) == 0x000050, "Member 'HUDMainGame_C_StartPhotoMode::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_GetScalarParameterValue_ReturnValue_2) == 0x000060, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_GetScalarParameterValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartPhotoMode, CallFunc_StartPhotoMode_ReturnValue) == 0x000064, "Member 'HUDMainGame_C_StartPhotoMode::CallFunc_StartPhotoMode_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.SetVisionSimulatorTimerDraw
// 0x0004 (0x0004 - 0x0000)
struct HUDMainGame_C_SetVisionSimulatorTimerDraw final
{
public:
	bool                                          IsDraw;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisionSimulatorTimerDraw_ReturnValue;  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisionSimulatorTimerDraw_ReturnValue_1; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_SetVisionSimulatorTimerDraw) == 0x000001, "Wrong alignment on HUDMainGame_C_SetVisionSimulatorTimerDraw");
static_assert(sizeof(HUDMainGame_C_SetVisionSimulatorTimerDraw) == 0x000004, "Wrong size on HUDMainGame_C_SetVisionSimulatorTimerDraw");
static_assert(offsetof(HUDMainGame_C_SetVisionSimulatorTimerDraw, IsDraw) == 0x000000, "Member 'HUDMainGame_C_SetVisionSimulatorTimerDraw::IsDraw' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetVisionSimulatorTimerDraw, ReturnValue) == 0x000001, "Member 'HUDMainGame_C_SetVisionSimulatorTimerDraw::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetVisionSimulatorTimerDraw, CallFunc_SetVisionSimulatorTimerDraw_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_SetVisionSimulatorTimerDraw::CallFunc_SetVisionSimulatorTimerDraw_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_SetVisionSimulatorTimerDraw, CallFunc_SetVisionSimulatorTimerDraw_ReturnValue_1) == 0x000003, "Member 'HUDMainGame_C_SetVisionSimulatorTimerDraw::CallFunc_SetVisionSimulatorTimerDraw_ReturnValue_1' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.StartLoading
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_StartLoading final
{
public:
	bool                                          IsFadeWhite;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6626[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAccountManager*                      CallFunc_GetRSAccountManager_RSAcountManager;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6627[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_StartLoading) == 0x000008, "Wrong alignment on HUDMainGame_C_StartLoading");
static_assert(sizeof(HUDMainGame_C_StartLoading) == 0x000018, "Wrong size on HUDMainGame_C_StartLoading");
static_assert(offsetof(HUDMainGame_C_StartLoading, IsFadeWhite) == 0x000000, "Member 'HUDMainGame_C_StartLoading::IsFadeWhite' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoading, ReturnValue) == 0x000001, "Member 'HUDMainGame_C_StartLoading::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoading, CallFunc_GetRSAccountManager_RSAcountManager) == 0x000008, "Member 'HUDMainGame_C_StartLoading::CallFunc_GetRSAccountManager_RSAcountManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoading, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_StartLoading::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoading, CallFunc_MakeLiteralByte_ReturnValue) == 0x000011, "Member 'HUDMainGame_C_StartLoading::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_StartLoading, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'HUDMainGame_C_StartLoading::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.EndLoading
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_EndLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6628[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAccountManager*                      CallFunc_GetRSAccountManager_RSAcountManager;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_EndLoading) == 0x000008, "Wrong alignment on HUDMainGame_C_EndLoading");
static_assert(sizeof(HUDMainGame_C_EndLoading) == 0x000018, "Wrong size on HUDMainGame_C_EndLoading");
static_assert(offsetof(HUDMainGame_C_EndLoading, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_EndLoading::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndLoading, CallFunc_GetRSAccountManager_RSAcountManager) == 0x000008, "Member 'HUDMainGame_C_EndLoading::CallFunc_GetRSAccountManager_RSAcountManager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_EndLoading, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_EndLoading::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsLogMessageEmpty
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsLogMessageEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLogMessageEmpty_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsLogMessageEmpty) == 0x000001, "Wrong alignment on HUDMainGame_C_IsLogMessageEmpty");
static_assert(sizeof(HUDMainGame_C_IsLogMessageEmpty) == 0x000002, "Wrong size on HUDMainGame_C_IsLogMessageEmpty");
static_assert(offsetof(HUDMainGame_C_IsLogMessageEmpty, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsLogMessageEmpty::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsLogMessageEmpty, CallFunc_IsLogMessageEmpty_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsLogMessageEmpty::CallFunc_IsLogMessageEmpty_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsPlaySasWindow
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsPlaySasWindow final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsPlaySasWindow) == 0x000001, "Wrong alignment on HUDMainGame_C_IsPlaySasWindow");
static_assert(sizeof(HUDMainGame_C_IsPlaySasWindow) == 0x000002, "Wrong size on HUDMainGame_C_IsPlaySasWindow");
static_assert(offsetof(HUDMainGame_C_IsPlaySasWindow, IsPlay) == 0x000000, "Member 'HUDMainGame_C_IsPlaySasWindow::IsPlay' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsPlaySasWindow, CallFunc_IsPlaying_IsPlaying) == 0x000001, "Member 'HUDMainGame_C_IsPlaySasWindow::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsPlaySasWindowNative
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsPlaySasWindowNative final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySasWindow_IsPlay;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsPlaySasWindowNative) == 0x000001, "Wrong alignment on HUDMainGame_C_IsPlaySasWindowNative");
static_assert(sizeof(HUDMainGame_C_IsPlaySasWindowNative) == 0x000002, "Wrong size on HUDMainGame_C_IsPlaySasWindowNative");
static_assert(offsetof(HUDMainGame_C_IsPlaySasWindowNative, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsPlaySasWindowNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsPlaySasWindowNative, CallFunc_IsPlaySasWindow_IsPlay) == 0x000001, "Member 'HUDMainGame_C_IsPlaySasWindowNative::CallFunc_IsPlaySasWindow_IsPlay' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsDrawMiniTipsSuccess
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_IsDrawMiniTipsSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6629[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_menu_battle_control_C*              K2Node_DynamicCast_AsUi_Menu_Battle_Control;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDrawMiniTipsSuccess_IsDraw;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsDrawMiniTipsSuccess) == 0x000008, "Wrong alignment on HUDMainGame_C_IsDrawMiniTipsSuccess");
static_assert(sizeof(HUDMainGame_C_IsDrawMiniTipsSuccess) == 0x000018, "Wrong size on HUDMainGame_C_IsDrawMiniTipsSuccess");
static_assert(offsetof(HUDMainGame_C_IsDrawMiniTipsSuccess, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsDrawMiniTipsSuccess::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsDrawMiniTipsSuccess, K2Node_DynamicCast_AsUi_Menu_Battle_Control) == 0x000008, "Member 'HUDMainGame_C_IsDrawMiniTipsSuccess::K2Node_DynamicCast_AsUi_Menu_Battle_Control' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsDrawMiniTipsSuccess, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUDMainGame_C_IsDrawMiniTipsSuccess::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsDrawMiniTipsSuccess, CallFunc_IsDrawMiniTipsSuccess_IsDraw) == 0x000011, "Member 'HUDMainGame_C_IsDrawMiniTipsSuccess::CallFunc_IsDrawMiniTipsSuccess_IsDraw' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.MessageGetDebugDrawFlag
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_MessageGetDebugDrawFlag final
{
public:
	bool                                          IsDraw;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Debug_Draw_Flag_IsDraw;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_MessageGetDebugDrawFlag) == 0x000001, "Wrong alignment on HUDMainGame_C_MessageGetDebugDrawFlag");
static_assert(sizeof(HUDMainGame_C_MessageGetDebugDrawFlag) == 0x000003, "Wrong size on HUDMainGame_C_MessageGetDebugDrawFlag");
static_assert(offsetof(HUDMainGame_C_MessageGetDebugDrawFlag, IsDraw) == 0x000000, "Member 'HUDMainGame_C_MessageGetDebugDrawFlag::IsDraw' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MessageGetDebugDrawFlag, CallFunc_Get_Debug_Draw_Flag_IsDraw) == 0x000001, "Member 'HUDMainGame_C_MessageGetDebugDrawFlag::CallFunc_Get_Debug_Draw_Flag_IsDraw' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_MessageGetDebugDrawFlag, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_MessageGetDebugDrawFlag::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsDrawMessageGuide
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsDrawMessageGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsDrawMessageGuide) == 0x000001, "Wrong alignment on HUDMainGame_C_IsDrawMessageGuide");
static_assert(sizeof(HUDMainGame_C_IsDrawMessageGuide) == 0x000002, "Wrong size on HUDMainGame_C_IsDrawMessageGuide");
static_assert(offsetof(HUDMainGame_C_IsDrawMessageGuide, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsDrawMessageGuide::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsDrawMessageGuide, CallFunc_IsPlaying_IsPlaying) == 0x000001, "Member 'HUDMainGame_C_IsDrawMessageGuide::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsBrainField
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_IsBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_662A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InBranField_FromNative_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsBrainField) == 0x000008, "Wrong alignment on HUDMainGame_C_IsBrainField");
static_assert(sizeof(HUDMainGame_C_IsBrainField) == 0x000018, "Wrong size on HUDMainGame_C_IsBrainField");
static_assert(offsetof(HUDMainGame_C_IsBrainField, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsBrainField, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'HUDMainGame_C_IsBrainField::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsBrainField, CallFunc_InBranField_FromNative_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_IsBrainField::CallFunc_InBranField_FromNative_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.Is Players Brain Field
// 0x0018 (0x0018 - 0x0000)
struct HUDMainGame_C_Is_Players_Brain_Field final
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_662B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InBranField_FromNative_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_Is_Players_Brain_Field) == 0x000008, "Wrong alignment on HUDMainGame_C_Is_Players_Brain_Field");
static_assert(sizeof(HUDMainGame_C_Is_Players_Brain_Field) == 0x000018, "Wrong size on HUDMainGame_C_Is_Players_Brain_Field");
static_assert(offsetof(HUDMainGame_C_Is_Players_Brain_Field, Return_Value) == 0x000000, "Member 'HUDMainGame_C_Is_Players_Brain_Field::Return_Value' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Players_Brain_Field, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'HUDMainGame_C_Is_Players_Brain_Field::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Players_Brain_Field, CallFunc_InBranField_FromNative_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_Is_Players_Brain_Field::CallFunc_InBranField_FromNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Players_Brain_Field, CallFunc_IsUserIsPlayer_IsPlayer) == 0x000011, "Member 'HUDMainGame_C_Is_Players_Brain_Field::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_Is_Players_Brain_Field, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'HUDMainGame_C_Is_Players_Brain_Field::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsPlayMessageOpenAnimationNative
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsPlayMessageOpenAnimationNative final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayOpenAnimation_IsPlay;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsPlayMessageOpenAnimationNative) == 0x000001, "Wrong alignment on HUDMainGame_C_IsPlayMessageOpenAnimationNative");
static_assert(sizeof(HUDMainGame_C_IsPlayMessageOpenAnimationNative) == 0x000002, "Wrong size on HUDMainGame_C_IsPlayMessageOpenAnimationNative");
static_assert(offsetof(HUDMainGame_C_IsPlayMessageOpenAnimationNative, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsPlayMessageOpenAnimationNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsPlayMessageOpenAnimationNative, CallFunc_IsPlayOpenAnimation_IsPlay) == 0x000001, "Member 'HUDMainGame_C_IsPlayMessageOpenAnimationNative::CallFunc_IsPlayOpenAnimation_IsPlay' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.isEndKeyword
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_IsEndKeyword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsEndKeyword) == 0x000001, "Wrong alignment on HUDMainGame_C_IsEndKeyword");
static_assert(sizeof(HUDMainGame_C_IsEndKeyword) == 0x000003, "Wrong size on HUDMainGame_C_IsEndKeyword");
static_assert(offsetof(HUDMainGame_C_IsEndKeyword, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsEndKeyword::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndKeyword, CallFunc_IsPlaying_IsPlaying) == 0x000001, "Member 'HUDMainGame_C_IsEndKeyword::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndKeyword, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsEndKeyword::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.isCancelKeyword
// 0x0002 (0x0002 - 0x0000)
struct HUDMainGame_C_IsCancelKeyword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isCancel_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsCancelKeyword) == 0x000001, "Wrong alignment on HUDMainGame_C_IsCancelKeyword");
static_assert(sizeof(HUDMainGame_C_IsCancelKeyword) == 0x000002, "Wrong size on HUDMainGame_C_IsCancelKeyword");
static_assert(offsetof(HUDMainGame_C_IsCancelKeyword, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsCancelKeyword::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsCancelKeyword, CallFunc_isCancel_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsCancelKeyword::CallFunc_isCancel_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.getResultKeyword
// 0x0020 (0x0020 - 0x0000)
struct HUDMainGame_C_GetResultKeyword final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	class FString                                 CallFunc_getResult_ReturnValue;                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(HUDMainGame_C_GetResultKeyword) == 0x000008, "Wrong alignment on HUDMainGame_C_GetResultKeyword");
static_assert(sizeof(HUDMainGame_C_GetResultKeyword) == 0x000020, "Wrong size on HUDMainGame_C_GetResultKeyword");
static_assert(offsetof(HUDMainGame_C_GetResultKeyword, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_GetResultKeyword::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_GetResultKeyword, CallFunc_getResult_ReturnValue) == 0x000010, "Member 'HUDMainGame_C_GetResultKeyword::CallFunc_getResult_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.isEndVisionSimulatorResult
// 0x0005 (0x0005 - 0x0000)
struct HUDMainGame_C_IsEndVisionSimulatorResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          _IsEnd;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_IsPlaying;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsEndVisionSimulatorResult) == 0x000001, "Wrong alignment on HUDMainGame_C_IsEndVisionSimulatorResult");
static_assert(sizeof(HUDMainGame_C_IsEndVisionSimulatorResult) == 0x000005, "Wrong size on HUDMainGame_C_IsEndVisionSimulatorResult");
static_assert(offsetof(HUDMainGame_C_IsEndVisionSimulatorResult, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsEndVisionSimulatorResult::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndVisionSimulatorResult, _IsEnd) == 0x000001, "Member 'HUDMainGame_C_IsEndVisionSimulatorResult::_IsEnd' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndVisionSimulatorResult, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsEndVisionSimulatorResult::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndVisionSimulatorResult, CallFunc_IsPlaying_IsPlaying) == 0x000003, "Member 'HUDMainGame_C_IsEndVisionSimulatorResult::CallFunc_IsPlaying_IsPlaying' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsEndVisionSimulatorResult, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'HUDMainGame_C_IsEndVisionSimulatorResult::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HUDMainGame.HUDMainGame_C.IsDrawMessageSkipGuide
// 0x0003 (0x0003 - 0x0000)
struct HUDMainGame_C_IsDrawMessageSkipGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDrawMessageGuide_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUDMainGame_C_IsDrawMessageSkipGuide) == 0x000001, "Wrong alignment on HUDMainGame_C_IsDrawMessageSkipGuide");
static_assert(sizeof(HUDMainGame_C_IsDrawMessageSkipGuide) == 0x000003, "Wrong size on HUDMainGame_C_IsDrawMessageSkipGuide");
static_assert(offsetof(HUDMainGame_C_IsDrawMessageSkipGuide, ReturnValue) == 0x000000, "Member 'HUDMainGame_C_IsDrawMessageSkipGuide::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsDrawMessageSkipGuide, CallFunc_IsDrawMessageGuide_ReturnValue) == 0x000001, "Member 'HUDMainGame_C_IsDrawMessageSkipGuide::CallFunc_IsDrawMessageGuide_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUDMainGame_C_IsDrawMessageSkipGuide, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'HUDMainGame_C_IsDrawMessageSkipGuide::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

