#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PsychicObjectManager

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "PsychicObjectCommonParameter_structs.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "PsychicObjectSizeParameter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BrainFieldPsyObjDataTable_structs.hpp"
#include "PsychicObjectBulletData_structs.hpp"
#include "PsychicObjectSoundData2_structs.hpp"
#include "SPsychicCaptureMaterial_structs.hpp"
#include "PsychicObjectPhysicParameter_structs.hpp"
#include "PsychicObjectCaptureParameter_structs.hpp"
#include "PsychicGrabParameterSizeData_structs.hpp"
#include "UniqueObjectCommonParameter_structs.hpp"
#include "UniqueObjectCameraParameter_structs.hpp"
#include "PsychicGrabMovementData_structs.hpp"
#include "PsychicGrabButtonType_structs.hpp"
#include "PsychicGrabMovementSizeData_structs.hpp"
#include "PsychicGrabParameterData_structs.hpp"
#include "UniqueObjectContainerEnemyInfo_structs.hpp"
#include "PsychicGrabPosData_structs.hpp"
#include "PsychicObjectData_structs.hpp"
#include "UniqueObjectElectricPoleEffectParameter_structs.hpp"
#include "PsychicObjectID_structs.hpp"
#include "Enum_ui_pk_weight_gauge_button_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PsychicObjectManager.PsychicObjectManager_C
// 0x0C98 (0x1110 - 0x0478)
class APsychicObjectManager_C final : public APsychicObjectManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PsychicObjectManagerAsyncComponent_C* BP_PsychicObjectManagerAsyncComponent;             // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PsychicBattle_C*                   BPC_PsychicBattle;                                 // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PsychicObjectSearchComponent_C*     BP_PsychicObjectSearchComponent;                   // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         HUDMainGame;                                       // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPsychicObjectInfo_C*                   WorkObjInfo;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPsychicObjectInfo_C*>           PsychicObjectListOld;                              // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         PsychicObjectRegNo;                                // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7412[0x4];                                     // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        MainPlayer;                                        // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               WorkPsyObj;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainField;                                       // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldSearchPause;                            // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7413[0x6];                                     // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        BrainFieldOwner;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerBrainField;                                 // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7414[0x3];                                     // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnTileSize;                                     // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnSideTileNum;                                  // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnOriginPos;                                    // 0x04F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             SpawnDataTable;                                    // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       BrainFieldObjectList;                              // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 TileGroupList;                                     // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 SpawnTimeList;                                     // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 SpawnIndexList;                                    // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     SpawnTransformList;                                // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       DestroyList;                                       // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SpawnTimer;                                        // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnIndex;                                        // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckBrnObjNum;                                    // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckBrnObjIndex;                                  // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnTimeMin;                                      // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnTimeMax;                                      // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpareReady;                                       // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7415[0x7];                                     // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrainFieldPsyObjDataTable             SpawnDataList;                                     // 0x0588(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SpareThrowList;                                    // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SpareDropList;                                     // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SpareSwingList;                                    // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         TotalWeightThrow;                                  // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalWeightDrop;                                   // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalWeightSwing;                                  // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7416[0x4];                                     // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SpawnWeightThrowList;                              // 0x05F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 SpawnWeightDropList;                               // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 SpawnWeightSwingList;                              // 0x0618(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         EmissionRateSign;                                  // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissionLoopTime;                                  // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissionRateMax;                                   // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissionRateMin;                                   // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckRangeExtra;                                   // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckRangeSq;                                      // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckPsyObjNum;                                    // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckPsyObjIndex;                                  // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSPsychicCaptureMaterial>       CaptureMaterialParameterList;                      // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       TransferObjList;                                   // 0x0658(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 TransferIdList;                                    // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicClusterList;                                // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         EmPsyObjOwnerList;                                 // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           EmPsyObjClassList;                                 // 0x0698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       EmPsyObjList;                                      // 0x06A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       EmPsyObjDestroyList;                               // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bTestLevelSequence;                                // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7417[0x3];                                     // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TestLevelSequenceIndex;                            // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   TestLevelSequenceEnemy;                            // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               TestLevelSequenceObj;                              // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             TestLevelSequenceTimer;                            // 0x06E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDtPsyObjCommonParameter;                          // 0x06EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7418[0x3];                                     // 0x06ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPsychicObjectCommonParameter          DtPsyObjCommonParameter;                           // 0x06F0(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsyObjSizeParameter;                            // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7419[0x7];                                     // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RnPsyObjSizeParameter;                             // 0x0868(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FPsychicObjectSizeParameter>    DtPsyObjSizeParameter;                             // 0x0878(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsyObjPhysicParameter;                          // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741A[0x7];                                     // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RnPsyObjPhysicParameter;                           // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FPsychicObjectPhysicParameter>  DtPsyObjPhysicParameter;                           // 0x08A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsyObjAttackParameter;                          // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741B[0x7];                                     // 0x08B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RnPsyObjAttackParameter;                           // 0x08B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FHCCollisionCommonInfo>         DtPsyObjAttackParamCommonInfoList;                 // 0x08C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FHCSkillCommonInfo>             DtPsyObjAttackParamSkillInfoList;                  // 0x08D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtUnqObjParameter;                                // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741C[0x7];                                     // 0x08E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RnUnqObjParameter;                                 // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FUniqueObjectCommonParameter>   DtUnqObjParameter;                                 // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtUnqObjCameraParameter;                          // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741D[0x7];                                     // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RnUnqObjCameraParameter;                           // 0x0918(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FUniqueObjectCameraParameter>   DtUnqObjCameraParameter;                           // 0x0928(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsychicGrabMovement;                            // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741E[0x7];                                     // 0x0939(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPsychicGrabMovementData               DtPsychicGrabMovement;                             // 0x0940(0x00B0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDtPsychicGrabMovementSize;                        // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741F[0x7];                                     // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPsychicGrabMovementSizeData>   DtPsychicGrabMovementSize;                         // 0x09F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsychicGrabParameter;                           // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7420[0x3];                                     // 0x0A09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPsychicGrabParameterData              DtPsychicGrabParameter;                            // 0x0A0C(0x0034)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDtPsychicGrabParameterSize;                       // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7421[0x7];                                     // 0x0A41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPsychicGrabParameterSizeData>  DtPsychicGrabParameterSize;                        // 0x0A48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtGrabPos;                                        // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7422[0x7];                                     // 0x0A59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPsychicGrabPosData>            DtGrabPosList;                                     // 0x0A60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsychicObjectData;                              // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7423[0x7];                                     // 0x0A71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPsychicObjectData>             DtPsychicObjectDataList;                           // 0x0A78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDtPsychicCaptureData;                             // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7424[0x7];                                     // 0x0A89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPsychicObjectCaptureParameter> DtPsychicCaptureData;                              // 0x0A90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bRespawnUpdate;                                    // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInstantRespawn;                                   // 0x0AA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7425[0x6];                                     // 0x0AA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       RespawnPsyObjList;                                 // 0x0AA8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       RespawnUnqObjList;                                 // 0x0AB8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 RespawnPsyTimeList;                                // 0x0AC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 RespawnUnqTimeList;                                // 0x0AD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         RespawnTimer;                                      // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnRestrictRange;                              // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnRestrictRangeSq;                            // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnRequeueTime;                                // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicBulletFreeList;                             // 0x0AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicBulletWorkList;                             // 0x0B08(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PsychicBulletIndex;                                // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletMagazine;                             // 0x0B1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletMax;                                  // 0x0B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletCount;                                // 0x0B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHidePsyObj;                                       // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7426[0x7];                                     // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PsyObjHiddenList;                                  // 0x0B30(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bBattleDisable;                                    // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUpdateFocus;                                      // 0x0B41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7427[0x2];                                     // 0x0B42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusSearchRadiusRate;                             // 0x0B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusSearchAngle;                                  // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7428[0x4];                                     // 0x0B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               FocusPsychicObject;                                // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APsychicAnimObject_C*>           AinmObjList;                                       // 0x0B58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class APsychicAnimObject_C*>           AnimObjClearList;                                  // 0x0B68(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AnimObjNum;                                        // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7429[0x4];                                     // 0x0B7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UAnimMontage>>    UniqueObjectMontageList;                           // 0x0B80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UniqueInputEnd;                                    // 0x0B90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bUniqueObjectInput;                                // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_742A[0x7];                                     // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               FocusUniqueObject;                                 // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapGimmickAttackObjectBase_C*       FocusMapGimmick;                                   // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFocusUnique;                                      // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFocusUniquePsy;                                   // 0x0BB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFocusUniqueMap;                                   // 0x0BBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_742B[0x5];                                     // 0x0BBB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CapturePsychicObjectOld;                           // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               UniqueInputObject;                                 // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicBulletSbFreeList;                           // 0x0BD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicBulletSbWorkList;                           // 0x0BE0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PsychicBulletSbMagazine;                           // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletSbMax;                                // 0x0BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletSbCount;                              // 0x0BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_742C[0x4];                                     // 0x0BFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicBulletSrFreeList;                           // 0x0C00(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicBulletSrWorkList;                           // 0x0C10(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PsychicBulletSrMagazine;                           // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletSrMax;                                // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicBulletSrCount;                              // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawBulletInfo;                              // 0x0C2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_742D[0x3];                                     // 0x0C2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUniqueObjectElectricPoleEffectParameter> ElectricPoleEffectList;                            // 0x0C30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  bPsyObjSoundDt;                                    // 0x0C40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FPsychicObjectSoundData2>       PsyObjSoundDtList;                                 // 0x0C50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CaptureEnemyObjectOld;                             // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureNrmPlayer;                                 // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureNrmObject;                                 // 0x0C69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureNrm;                                       // 0x0C6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureUnqObject;                                 // 0x0C6B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureUnqPlayer;                                 // 0x0C6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureUnq;                                       // 0x0C6D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyPsyObj;                                       // 0x0C6E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyPsyObjPause;                                  // 0x0C6F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyPsyObjUpdate;                                 // 0x0C70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbCopyPsyObjPrint;                                // 0x0C71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_742E[0x2];                                     // 0x0C72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CopyPsyObjKeepMax;                                 // 0x0C74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         CopyPsyObjClassList;                               // 0x0C78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       CopyPsyObjList;                                    // 0x0C88(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       CopyPsyObjList2;                                   // 0x0C98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CopyPsychicObject0;                                // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CopyPsychicObject1;                                // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FUniqueObjectContainerEnemyInfo> DtEnemyInfoList;                                   // 0x0CB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDbDrawEaseCurve;                                  // 0x0CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDrawPsyObjAttackSphere;                         // 0x0CC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEasingFunc                                   DbEaseType;                                        // 0x0CCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_742F[0x1];                                     // 0x0CCB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DbEaseExp;                                         // 0x0CCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPsychicBattleInput;                               // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7430[0x7];                                     // 0x0CD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       ChildPsychicObjectList;                            // 0x0CD8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FPsychicObjectBulletData>       PsychicObjectBulletDataList;                       // 0x0CE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CapturedPsychicObject;                             // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CapturedNpcObject;                                 // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CapturedEnemyObject;                               // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               AttackPsychicObject;                               // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               AttackUniqueObject;                                // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               AttackNpcObject;                                   // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               AttackEnemyObject;                                 // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               AttackEnemyUnique;                                 // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckPsychicGaugeEnable;                          // 0x0D38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7431[0x7];                                     // 0x0D39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 WeightGaugeObject;                                 // 0x0D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 WeightGaugeUnique;                                 // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 WeightGaugeGimmick;                                // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattleCharacter_C*>           PsychicComboSlowCheckActorList;                    // 0x0D58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniqueObjectUse;                                  // 0x0D68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7432[0x7];                                     // 0x0D69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueObjectUse;                                   // 0x0D70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         PsychicFieldActorList;                             // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         PsychicFieldTargetList;                            // 0x0D90(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PsychicFieldSearchRadius;                          // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicFieldObjectNum;                             // 0x0DA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicFieldCaptureNum;                            // 0x0DA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPsychicFieldCapture;                              // 0x0DAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicFieldAttract;                              // 0x0DAD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicFieldAction;                               // 0x0DAE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicFieldSafety;                               // 0x0DAF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<EPsychicObjectSizeType>                PsychicFieldSizeList;                              // 0x0DB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 PsychicFieldDelayTimeList;                         // 0x0DC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  PsychicFieldCaptureList;                           // 0x0DD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             PsychicFieldCaptureTimer;                          // 0x0DE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RespawnTimeNormal;                                 // 0x0DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTimeUnique;                                 // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTimeInstant;                                // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawRespawn;                                 // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7433[0x7];                                     // 0x0DF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           BrainFieldSafetySizeSoftList;                      // 0x0E00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   BrainFieldSafetySwingSoftList;                     // 0x0E10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDebugPsychicFieldPrint;                           // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7434[0x7];                                     // 0x0E39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPsychicObjectSizeType>                EmPsyObjSizeList;                                  // 0x0E40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         EmPsyObjSizeLen;                                   // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnPsyObjSafety;                                   // 0x0E54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugDrawEmPsyObj;                                 // 0x0E55(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7435[0x2];                                     // 0x0E56(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PsyObjActionDirectShotList;                        // 0x0E58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         PsyObjActionUniqueObjectList;                      // 0x0E68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         PsyObjActionMapGimmickList;                        // 0x0E78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPsyObjActionCheckTimer;                           // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7436[0x3];                                     // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             PsyObjActionJustDodgeTimer;                        // 0x0E8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PsyObjActionJustDodgeTime;                         // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             PsyObjActionInterceptTimer;                        // 0x0E9C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PsyObjActionInterceptTime;                         // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawAnimObjList;                             // 0x0EAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawPsyObjAction;                            // 0x0EAD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawObjectStatus;                            // 0x0EAE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNewObjectSystem;                                  // 0x0EAF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class ABP_PsychicObjectIntercept_C*>   InterceptObjectList;                               // 0x0EB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         InterceptObjectListNum;                            // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7437[0x4];                                     // 0x0EC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectIntercept_C*           InterceptObject;                                   // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawInterceptObject;                         // 0x0ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7438[0x7];                                     // 0x0ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EnemyInterceptableThrow;                           // 0x0ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDebugTraceRecordDraw;                             // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7439[0x3];                                     // 0x0EE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugTraceRecordNum;                               // 0x0EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugTraceRecordIndex;                             // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTraceRecordRadius;                            // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordSttList;                           // 0x0EF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordEndList;                           // 0x0F08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  DebugTraceRecordHitList;                           // 0x0F18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordHitPosList;                        // 0x0F28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordHitNrlList;                        // 0x0F38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordExtra0List;                        // 0x0F48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordExtra1List;                        // 0x0F58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordExtra2List;                        // 0x0F68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        DebugTraceRecordExtra3List;                        // 0x0F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         DebugTraceRecordRadiusEx0;                         // 0x0F88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTraceRecordRadiusEx1;                         // 0x0F8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTraceRecordRadiusEx2;                         // 0x0F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTraceRecordRadiusEx3;                         // 0x0F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugTraceRecordColorEx0;                          // 0x0F98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugTraceRecordColorEx1;                          // 0x0FA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugTraceRecordColorEx2;                          // 0x0FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugTraceRecordColorEx3;                          // 0x0FC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInBossGauge;                                      // 0x0FD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_743A[0x7];                                     // 0x0FD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATriggerEffectManager*                  TrgEffMgr;                                         // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugMapGimmickExMode;                            // 0x0FE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMapGimmickExMode;                                 // 0x0FE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_743B[0x6];                                     // 0x0FEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MapGimmickObjectBase_C*             MapGimmickEx;                                      // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 RegisterRefNameDebug;                              // 0x0FF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RegisterRefNameArea;                               // 0x1008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RegisterRefNameBrainField;                         // 0x1018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RegisterRefNameDebugCreate;                        // 0x1028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniqueObjectSkipDisableCamera;                    // 0x1038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawRegisterPos;                             // 0x1039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawArrangePos;                              // 0x103A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawRegisterActorTick;                       // 0x103B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawRegisterMeshTick;                        // 0x103C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawRegisterCompTick;                        // 0x103D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugDrawEmPsyObjLine;                             // 0x103E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueObjectAutoTakeItem;                         // 0x103F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FName>                           InputModeLockRefList;                              // 0x1040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       EventPsyObjList;                                   // 0x1050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDebugPrintPsyObjInfo;                             // 0x1060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawFocusObjPhase;                           // 0x1061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawFocusObjState;                           // 0x1062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawFocusObjCollision;                       // 0x1063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawFocusObjAsyncCmn;                        // 0x1064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGaugeCheckEnable;                           // 0x1065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGaugeCheckMapGimmickEnable;                 // 0x1066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGaugeCheckProc;                             // 0x1067(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGaugeCheck;                                 // 0x1068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGaugeCheckApply;                            // 0x1069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGaugeCheckMapGimmick;                       // 0x106A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_743C[0x1];                                     // 0x106B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeightGaugeCheckTagName;                           // 0x106C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_743D[0x4];                                     // 0x1074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               WeightGaugeCheckObj;                               // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   DbActorSoftClass;                                  // 0x1080(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   DbActorSoftClass2;                                 // 0x10A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  bPsyObjSoundRegister;                              // 0x10D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       CopyPsyObjList3;                                   // 0x10E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CopyPsychicObject2;                                // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       CopyPsyObjList4;                                   // 0x10F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CopyPsychicObject3;                                // 0x1108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UniqueInputEnd__DelegateSignature();
	void EnemyInterceptableThrow__DelegateSignature(class AActor* Psy_obj_actor_in, class AActor* Target_actor_in);
	void ExecuteUbergraph_PsychicObjectManager(int32 EntryPoint);
	void OnFinishedPsychicBattle(EPsychicBattleType PsychicBattleType);
	void OnStartPsychicBattle(EPsychicBattleType PsychicBattleType);
	void DelayBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void PB_BGActorsVisible();
	void PB_ChangePoleBreak();
	void PB_EmitPoleParticle();
	void PB_BattleAnimation();
	void PB_DamagePlayer();
	void PB_DamageEnemy();
	void PB_StartInputEnemy();
	void PB_StartInputPlayer();
	void PB_StartBattle();
	void UserConstructionScript();
	void AddPsychicObjectInfo(class AActor* Object);
	void InitializeBrainField();
	void UpdateBrainField();
	void FinalizeBrainField();
	void DebugPrintPsyObjSpawnList();
	void CalcSpawnWorldTransformOld(const struct FTransform& Local_transform_in, int32 Tile_no_in, float RotAngle_in, struct FTransform* World_transform_out);
	void ConvGroupToRowNameOld(int32 Group_in, int32 Index_in, int32 RowName_in, int32* Row_name_out, int32* Group_out, int32* Index_out);
	void UpdateBrainFieldAfterOld();
	void UpdateEmission();
	void SetEmission(bool Flag_in);
	void SetMainPlayer();
	void GetSparePsyObjOld(EPsychicGrabButtonType button_type_in, class ABP_PsychicObjectBasic_C** Psy_obj_out);
	void SpawnSparePsyObjOld(EPsychicGrabButtonType button_type_in, int32 Index_in, bool* Return);
	void DebugPrintSpareData();
	void IsSparePsyObjReadyOld(bool* Return);
	void ClearPsychicObjectInfoAll();
	void AreaChangeRestorePsychicObject();
	void AreaChangeStartPsychicObject();
	void DebugDispSpareList();
	void GetPsychicCaptureMaterialParameter(E_SASKind Sas_kind_in, struct FSPsychicCaptureMaterial* Material_param);
	void GetUserParamTransferObject(EConsumeItemID Item_id_in, PsychicObjectID::EPsychicObjectID* Psy_obj_id);
	void InitTransferObject();
	void ClearTransferObject();
	void UseTransferObject(EConsumeItemID Item_id_in);
	void ConvTransferItemIDToIndex(EConsumeItemID Item_id_in, int32* Param_Index);
	void ConvTempIDToPsyObjID(int32 Temp_id_in, PsychicObjectID::EPsychicObjectID Psy_obj_id_in, PsychicObjectID::EPsychicObjectID* Psy_obj_id_out, int32* Temp_id_out);
	void ConvPsyObjIDtoSoftClass(PsychicObjectID::EPsychicObjectID Psy_obj_id_in, TSoftClassPtr<class UClass>* Psy_obj_soft_class);
	void ConvTransferItemIDToName(EConsumeItemID Item_id_in, class FName* Item_name);
	void DebugDispTransferObject();
	void CreatePsychicCluster(class ABP_PsychicObjectBasic_C*& Psychic_object_in, TArray<class ABP_PsychicObjectBasic_C*>* Cluster_list);
	void CreateEnemyPsychicObject(class ARSBattleCharacter_C* Enemy_owner_in, TArray<TSoftClassPtr<class UClass>>& Object_list_in, class FName List_name, bool Drop_type_in);
	void GetEnemyPsychicObject(class ARSBattleCharacter_C* Owner_in, class FName List_name, bool Random_obj, E_SASKind Sas_kind_in, class ABP_PsychicObjectBasic_C** Em_psy_obj);
	void DestroyEnemyPsychicObject(class ARSBattleCharacter_C* Em_owner_in, class FName List_name);
	void UpdateEnemyPsychicObject();
	void DebugDisplayEnemyPsychicObject();
	void DebugStartTestLevelSequence(class ARSBattleCharacter_C* Enemy_in);
	void DebugUpdateTestLevelSequence();
	void LoadDataTable();
	void SetPsychicObjectParameter(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void GetGrabMovementData(struct FPsychicGrabMovementData* Grab_movement_data);
	void GetGrabMovementSizeData(EPsychicObjectSizeType Obj_size_in, struct FPsychicGrabMovementSizeData* Grab_movement_size_data);
	void GetGrabParameterData(struct FPsychicGrabParameterData* Grab_parameter_data);
	void GetGrabParameterSizeData(EPsychicObjectSizeType Obj_size_in, struct FPsychicGrabParameterSizeData* Grab_parameter_size_data);
	void GetGrabPosData(int32 Grab_index_in, struct FPsychicGrabPosData* Grab_pos_data);
	void GetAttackParameter(class ABP_PsychicObjectBasic_C* Psy_obj_in, struct FHCCollisionCommonInfo* Common_info, struct FHCSkillCommonInfo* Skill_info);
	void SetPsychicObjectTickRadius(float Radius_in);
	void SetPsyObjRespawn(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void UpdatePsyObjRespawn();
	void DebugDispPsyObjRespawn();
	void CreatePsychicBullet(BattlePrototype::EPsychicObjectID Psy_obj_id_in, class ABP_PsychicObjectBasic_C* Psy_obj_in, int32 bul_magazine, int32 bul_max);
	void UpdatePsychicBullet();
	void GetPsychicBullet(BattlePrototype::EPsychicObjectID Psy_obj_id_in, class ABP_PsychicObjectBasic_C* Parent_obj_in, class ABP_PsychicObjectBasic_C** Psy_bullet);
	void ResetPsychicBullet(class ABP_PsychicObjectBasic_C* Psy_bullet_in);
	void DebugDispPsychicBullet();
	void SetPsychicObjectHidden(bool Flag_in);
	void UpdateFocusPsychicObject();
	void CaptureFocusObject(class ARsBattleHero_C* Capture_owner_in, bool Unique_obj_in, bool Combo_in, bool Npc_in, bool Enemy_in, bool Air_in, bool* Return);
	void AttackCaptureObject(class ABP_PsychicObjectBasic_C* Psy_obj_in, class AActor* Target_actor_in, bool Direct_drop_in, bool Npc_in, bool Enemy_in, int32 Copy_count_in, bool* Return, class ABP_PsychicObjectBasic_C** Unique_object);
	void CancelCaptureObject(bool Npc_in, bool Enemy_in);
	void AttackComboCaptureObject(class AActor* Target_actor_in, int32 Attack_level_in, int32 Attack_index_in, float Attract_time_in, class UAnimSequence* Anim_seq_in, bool Air_combo_in, bool Enemy_direct_shot_in, bool Npc_in, bool Enemy_in, int32 Copy_count_in, bool* Return, class ABP_PsychicObjectBasic_C** Combo_obj);
	void CreateAnimObject();
	void UpdateAnimObject();
	void GetAnimObject(class APsychicAnimObject_C** Anim_obj);
	void DeleteAnimObject(class APsychicAnimObject_C* Anim_obj_in);
	void ClearAnimObjectList();
	void GetUniqueObjectMontageOld(class ABP_PsychicObjectBasic_C* Psy_obj_in, EPsychicObjectUniqueMontageIndex Montage_index_in, bool Left_in);
	void DebugDrawEaseCurve();
	void GetElectricPoleDataTable(TArray<struct FUniqueObjectElectricPoleEffectParameter>* Param_ElectricPoleEffectList);
	void SetUniqueObjectInput(bool Flag_in);
	void IsUniqueObjectInput(bool* Return);
	void SetUniqueInputObject(class ABP_PsychicObjectBasic_C* Unq_input_in);
	void GetAttackObjectOld(class ABP_PsychicObjectBasic_C** Psy_obj);
	void SetFocusSearch(bool Flag_in);
	void SetPsyObjDtSound(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void LoadDataTableSound(bool Flag_in, int32 Index_in);
	void SetWeightGaugeEnable(bool Player_in, bool Flag_in, bool Unq_obj_in, class ABP_PsychicObjectBasic_C* Psy_obj_in, bool AttackFlag);
	void CanCapture(bool Unq_obj_in, bool* Return);
	void SetFocusPause(bool Flag_in, class FName Tag_name_in);
	bool CheckEnemyObject(bool bUnqObj, bool ChkCapture, bool ChkAttack);
	void SetInstantRespawn(bool Flag_in);
	void SetCopyPsychicObject(bool Flag_in);
	void UpdateCopyPsychicObject();
	void ResetCopyPsychicObject();
	void SetCopyPsychicObjectPause(bool Flag_in);
	void GetCopyPsychicObject(class ABP_PsychicObjectBasic_C* Parent_obj_in, class ABP_PsychicObjectBasic_C** Copy_psy_obj_0, class ABP_PsychicObjectBasic_C** Copy_psy_obj_1, class ABP_PsychicObjectBasic_C** Copy_psy_obj_2, class ABP_PsychicObjectBasic_C** Copy_psy_obj_3);
	void CopyCaptureObject(class ABP_PsychicObjectBasic_C* Parent_obj_in, int32 Copy_count_in, bool Direct_drop_in, bool Combo_in, int32 Comb_level_in);
	void GetCopyPsychicObjectPos(class ABP_PsychicObjectBasic_C* Parent_obj_in, int32 Copy_index_in, struct FVector* Copy_obj_pos_0, struct FVector* Copy_obj_pos_1, struct FVector* Copy_obj_pos_2, struct FVector* Copy_obj_pos_3);
	void AttackCopyPsychicObject(class USkeletalMeshComponent* AnimObjMesh);
	void GetDataTableParamEnemyInfo(class AActor* Em_actor_in, struct FUniqueObjectContainerEnemyInfo* Data_table);
	void ResetFocusPsychicObject(bool Loading_start_in, class FName Tag_name_in);
	void GetAttackRowName(const class FString& Name_in, TArray<class FName>* Row_name_list);
	void DebugDrawPsyObjAttackSphere();
	void LoadPsychicBattle(EPsychicBattleType PsychicBattleType);
	void FinalizePsychicBattle();
	void IsPlayPsychicBattle(bool* Play);
	void IsBattleSequencePsychicBattle(bool* Play);
	void StartPsychicBattle(EPsychicBattleType PsychicBattleType, class ABP_PsychicObjectBasic_C* Psychic_Object_Actor);
	void SetPsychicBattleRate(float PsychicBattleType);
	void EndBattleSequencePsychicBattle(bool Win);
	void GetCameraParameterRowName(const class FString& Name_in, class FName* Row_name_list);
	void GetUnqObjBeamsID(bool Rail, BattlePrototype::EPsychicObjectID* ID);
	void GetUnqObjClass(BattlePrototype::EPsychicObjectID Psy_obj_id, TSoftClassPtr<class UClass>* ID);
	void GetUniqueObjectParameter(const class FString& Name_in, struct FUniqueObjectCommonParameter* Parameter);
	void CreateChildPsychicObject(class ABP_PsychicObjectBasic_C* Parent_obj_in, TSoftClassPtr<class UClass> Child_class_in, int32 Child_num_in, TArray<class ABP_PsychicObjectBasic_C*>* Child_list);
	void DestroyChildPsychicObject(TArray<class ABP_PsychicObjectBasic_C*>& Child_list_in);
	void ClearChildPsychicObject();
	void GetPsychicBulletDataIndex(BattlePrototype::EPsychicObjectID PsyObjId, int32* Param_Index);
	void SetPsychicBulletData(BattlePrototype::EPsychicObjectID PsyObjId, int32* Param_Index);
	void RemovePsychicBulletOwner(class ABP_PsychicObjectBasic_C* Owner_obj_in);
	void SetFocus(bool Flag_in, bool Unq_obj_in, bool Map_gmk_in, class AActor* Object_actor_in);
	void SetPsychicGaugeCheck();
	void UpdatePsychicGaugeCheck();
	void GetHudMain(class AHUDMainGame_C** Param_HUDMainGame);
	void UpdatePsychicComboCheck();
	void CancelPsychicObjectAction(bool Event_in, bool Psychic_battle_in, bool Npc_in, bool Enemy_in);
	void RegisterPsychicSlowActor(class ARSBattleCharacter_C* SlowActor);
	void UnregisterPsychicSlowActor(class ARSBattleCharacter_C* SlowActor);
	void SetPsychicComboSlow(bool bSlow);
	void DebugSetPsychicObjectWeight(float Weight_in);
	void ClearUniqueObject(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void SetUniqueObjectUse(bool Flag_in, class ABP_PsychicObjectBasic_C* Unq_obj_in);
	void IsUniqueObjectUse(bool* Is_use);
	void SetPsychicFieldCapture(int32 Capture_num_in);
	void IsPsychicFieldCaptureFinish(bool* Finish);
	void SetPsychicFieldAttract();
	void SetPsychicFieldThrow();
	void SetPsychicFieldTarget();
	void CancelPsychicField();
	void UpdatePsychicField();
	void SetFocusSearchRadiusRate(float Rate_in);
	void CheckPsychicFieldObject(TArray<class AActor*>& Actor_list_in);
	void SetPsychicFieldWeightGauge(bool Flag_in);
	void GetAvailableRegisterSizeArraySafety(int32 Len_in, TArray<EPsychicObjectSizeType>& Request_size_in, TArray<EPsychicObjectSizeType>* Size_array, bool* Safety);
	void GetRandomRegisterPsychicObjectSafety(EPsychicObjectSizeType Obj_size_in, bool Safety_in, class ABP_PsychicObjectBasic_C** Psy_obj);
	void GetRandomRegisterSwingObjectSafety(class ABP_PsychicObjectBasic_C** Psy_obj);
	void CheckPsychicObjectAction(bool Direct_shot, bool Unq_obj_capture, bool Unq_obj_action, bool Psychic_field, bool Just_dodge, bool* Return);
	void SetPsychicObjectAction(bool Direct_shot, bool Unique_object, bool Map_gimmick, bool Flag_in, const class FString& Obj_name_in, bool Just_dodge, bool Intercept, bool Psychic_field);
	void UpdatePsychicObjectAction();
	void ResetPsychicObjectAction();
	void DebugDrawAnimObjectList();
	void GetUniqueEffectParam(bool brain_field, EPsychicObjectBrainFieldAttackType brain_field_attack_type_in, int32 brain_field_level_in, bool Psychic_field, int32 Psychic_field_obj_num_in, bool* Return, struct FPsychicObjectSizeParameter* Parameter);
	void DebugDrawPsychicObjectAction();
	void GetFocusObject(bool Unq_obj_in, bool Npc_in, bool Enemy_in, class ABP_PsychicObjectBasic_C** Focus_obj);
	void DebugDrawObjectStatus();
	void GetCaptureObject(bool Npc_in, bool Enemy_in, bool Unq_obj_in, bool Check_obj_type_in, class ABP_PsychicObjectBasic_C** Capture_obj);
	void SetCaptureObject(class ABP_PsychicObjectBasic_C* Psy_obj_in, bool Npc_in, bool Enemy_in);
	void GetAttackObject(bool Unq_obj_in, bool Npc_in, bool Enemy_in, class ABP_PsychicObjectBasic_C** Attack_obj_);
	void SetAttackObject(class ABP_PsychicObjectBasic_C* Psy_obj_in, bool Unq_obj_in, bool Npc_in, bool Enemy_in);
	void GetPsychicObject(bool Unq_obj_in, bool Npc_in, bool Enemy_in, bool Focus_in, bool Capture_in, bool Attack_in, class ABP_PsychicObjectBasic_C** Psy_obj);
	void SetIntercept(class AActor* Obj_actor_in, class ARSBattleCharacter_C* Intercepter_in, class ARSBattleCharacter_C* New_target_in);
	void CreateInterceptObject();
	void SetInterceptObjectActive();
	void DeleteInterceptObject();
	void DebugDrawInterceptObject();
	void DebugCreatePsychicObject(TSoftClassPtr<class UClass> Psy_obj_class_in);
	void InitDebugTraceRecord(float Radius_in, float Radius_ex_0_in, float Radius_ex_1_in, float Radius_ex_2_in, float Radius_ex_3_in, const struct FLinearColor& Color_ex_0_in, const struct FLinearColor& Color_ex_1_in, const struct FLinearColor& Color_ex_2_in, const struct FLinearColor& Color_ex_3_in);
	void AddDebugTraceRecord(const struct FVector& Stt_pos_in, const struct FVector& End_pos_in, bool Hit_in, const struct FVector& Hit_pos_in, const struct FVector& Hit_nrl_in, const struct FVector& Extra_0_in, const struct FVector& Extra_1_in, const struct FVector& Extra_2_in, const struct FVector& Extra_3_in);
	void DrawDebugTraceRecord(bool Flag_in);
	void NextDebugTraceRecord(bool back_in, bool One0, bool One00, bool One000);
	void UpdateDebugTraceRecord();
	void DebugDrawRotArrow(const struct FVector& Pos_in, const struct FRotator& Rot_in, float Len_in, float Size_in, float Time_in);
	bool CheckNpcObject(bool bUnqObj, bool bEnemy, bool ChkCapture, bool ChkAttack);
	void CancelPsychicObjectHoming(bool Npc_in, bool Enemy_in);
	void SetUsingBossGauge(bool Param_bInBossGauge);
	void SetMapGimmickExMode(bool Flag_in, class ABP_MapGimmickObjectBase_C* Actor_in);
	void SetMapGimmickEx(class ABP_MapGimmickObjectBase_C* Actor_in);
	void ExceptionallyAllowTriggerEffect(bool* Allow);
	void DebugPrintRegisterList();
	void SetUniqueObjectSkipDisableCamera(bool bSkip);
	void IsUniqueObjectSkipDisableCamera(bool* Return_);
	void DebugDrawRegisterPos();
	void RespawnEnemyObject();
	void DebugDrawRegisterObjInfo();
	void SetUniqueObjectAutoTakeItem(bool Flag_in);
	void IsUniqueObjectAutoTakeItem(bool* Return);
	void SetLockInputMode(bool Flag_in, class FName Ref_name_in);
	void DebugDrawInputModeLock();
	void AddEventPsychicObject(TArray<class AActor*>& Actor_list_in);
	void SetEventPsychicObject();
	void ClearEventPsychicObject();
	void UpdateDestroyList();
	void DebugDrawPsyObjInfo();
	bool IsNeedFrameWait();
	void SetDebugPrintPsyObjInfo();
	void DebugDrawFcousObj();
	void LostCaptureOwner(class AActor* Capture_owner_in, bool Npc_in, bool Enemy_in);
	void ChangeUniqueObjectTargetActor(class AActor* Old_actor_in, class AActor* New_actor_in);
	void SetWeightGaugeCheck(bool Flag_in, bool Force_in, class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void ResetWeightGaugeCheck();
	void StartWeightGaugeCheck(bool Map_gimmick_in);
	void EndWeightGaugeCheck();
	void CancelCopyPsychicObject();
	bool EventManagerStart(bool EnableTick, bool Visibility);
	bool EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility);

	void GetInterceptAttackParam(bool* bFind, struct FHCCollisionCommonInfo* CommonInfo, struct FHCSkillCommonInfo* SkillInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PsychicObjectManager_C">();
	}
	static class APsychicObjectManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APsychicObjectManager_C>();
	}
};
static_assert(alignof(APsychicObjectManager_C) == 0x000008, "Wrong alignment on APsychicObjectManager_C");
static_assert(sizeof(APsychicObjectManager_C) == 0x001110, "Wrong size on APsychicObjectManager_C");
static_assert(offsetof(APsychicObjectManager_C, UberGraphFrame) == 0x000478, "Member 'APsychicObjectManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BP_PsychicObjectManagerAsyncComponent) == 0x000480, "Member 'APsychicObjectManager_C::BP_PsychicObjectManagerAsyncComponent' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BPC_PsychicBattle) == 0x000488, "Member 'APsychicObjectManager_C::BPC_PsychicBattle' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BP_PsychicObjectSearchComponent) == 0x000490, "Member 'APsychicObjectManager_C::BP_PsychicObjectSearchComponent' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DefaultSceneRoot) == 0x000498, "Member 'APsychicObjectManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, HUDMainGame) == 0x0004A0, "Member 'APsychicObjectManager_C::HUDMainGame' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WorkObjInfo) == 0x0004A8, "Member 'APsychicObjectManager_C::WorkObjInfo' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicObjectListOld) == 0x0004B0, "Member 'APsychicObjectManager_C::PsychicObjectListOld' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicObjectRegNo) == 0x0004C0, "Member 'APsychicObjectManager_C::PsychicObjectRegNo' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, MainPlayer) == 0x0004C8, "Member 'APsychicObjectManager_C::MainPlayer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WorkPsyObj) == 0x0004D0, "Member 'APsychicObjectManager_C::WorkPsyObj' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bBrainField) == 0x0004D8, "Member 'APsychicObjectManager_C::bBrainField' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bBrainFieldSearchPause) == 0x0004D9, "Member 'APsychicObjectManager_C::bBrainFieldSearchPause' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BrainFieldOwner) == 0x0004E0, "Member 'APsychicObjectManager_C::BrainFieldOwner' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPlayerBrainField) == 0x0004E8, "Member 'APsychicObjectManager_C::bPlayerBrainField' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnTileSize) == 0x0004EC, "Member 'APsychicObjectManager_C::SpawnTileSize' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnSideTileNum) == 0x0004F0, "Member 'APsychicObjectManager_C::SpawnSideTileNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnOriginPos) == 0x0004F4, "Member 'APsychicObjectManager_C::SpawnOriginPos' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnDataTable) == 0x000500, "Member 'APsychicObjectManager_C::SpawnDataTable' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BrainFieldObjectList) == 0x000508, "Member 'APsychicObjectManager_C::BrainFieldObjectList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TileGroupList) == 0x000518, "Member 'APsychicObjectManager_C::TileGroupList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnTimeList) == 0x000528, "Member 'APsychicObjectManager_C::SpawnTimeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnIndexList) == 0x000538, "Member 'APsychicObjectManager_C::SpawnIndexList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnTransformList) == 0x000548, "Member 'APsychicObjectManager_C::SpawnTransformList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DestroyList) == 0x000558, "Member 'APsychicObjectManager_C::DestroyList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnTimer) == 0x000568, "Member 'APsychicObjectManager_C::SpawnTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnIndex) == 0x00056C, "Member 'APsychicObjectManager_C::SpawnIndex' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CheckBrnObjNum) == 0x000570, "Member 'APsychicObjectManager_C::CheckBrnObjNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CheckBrnObjIndex) == 0x000574, "Member 'APsychicObjectManager_C::CheckBrnObjIndex' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnTimeMin) == 0x000578, "Member 'APsychicObjectManager_C::SpawnTimeMin' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnTimeMax) == 0x00057C, "Member 'APsychicObjectManager_C::SpawnTimeMax' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bSpareReady) == 0x000580, "Member 'APsychicObjectManager_C::bSpareReady' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnDataList) == 0x000588, "Member 'APsychicObjectManager_C::SpawnDataList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpareThrowList) == 0x0005B8, "Member 'APsychicObjectManager_C::SpareThrowList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpareDropList) == 0x0005C8, "Member 'APsychicObjectManager_C::SpareDropList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpareSwingList) == 0x0005D8, "Member 'APsychicObjectManager_C::SpareSwingList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TotalWeightThrow) == 0x0005E8, "Member 'APsychicObjectManager_C::TotalWeightThrow' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TotalWeightDrop) == 0x0005EC, "Member 'APsychicObjectManager_C::TotalWeightDrop' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TotalWeightSwing) == 0x0005F0, "Member 'APsychicObjectManager_C::TotalWeightSwing' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnWeightThrowList) == 0x0005F8, "Member 'APsychicObjectManager_C::SpawnWeightThrowList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnWeightDropList) == 0x000608, "Member 'APsychicObjectManager_C::SpawnWeightDropList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, SpawnWeightSwingList) == 0x000618, "Member 'APsychicObjectManager_C::SpawnWeightSwingList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmissionRateSign) == 0x000628, "Member 'APsychicObjectManager_C::EmissionRateSign' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmissionLoopTime) == 0x00062C, "Member 'APsychicObjectManager_C::EmissionLoopTime' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmissionRateMax) == 0x000630, "Member 'APsychicObjectManager_C::EmissionRateMax' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmissionRateMin) == 0x000634, "Member 'APsychicObjectManager_C::EmissionRateMin' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CheckRangeExtra) == 0x000638, "Member 'APsychicObjectManager_C::CheckRangeExtra' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CheckRangeSq) == 0x00063C, "Member 'APsychicObjectManager_C::CheckRangeSq' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CheckPsyObjNum) == 0x000640, "Member 'APsychicObjectManager_C::CheckPsyObjNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CheckPsyObjIndex) == 0x000644, "Member 'APsychicObjectManager_C::CheckPsyObjIndex' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CaptureMaterialParameterList) == 0x000648, "Member 'APsychicObjectManager_C::CaptureMaterialParameterList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TransferObjList) == 0x000658, "Member 'APsychicObjectManager_C::TransferObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TransferIdList) == 0x000668, "Member 'APsychicObjectManager_C::TransferIdList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicClusterList) == 0x000678, "Member 'APsychicObjectManager_C::PsychicClusterList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmPsyObjOwnerList) == 0x000688, "Member 'APsychicObjectManager_C::EmPsyObjOwnerList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmPsyObjClassList) == 0x000698, "Member 'APsychicObjectManager_C::EmPsyObjClassList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmPsyObjList) == 0x0006A8, "Member 'APsychicObjectManager_C::EmPsyObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmPsyObjDestroyList) == 0x0006B8, "Member 'APsychicObjectManager_C::EmPsyObjDestroyList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bTestLevelSequence) == 0x0006C8, "Member 'APsychicObjectManager_C::bTestLevelSequence' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TestLevelSequenceIndex) == 0x0006CC, "Member 'APsychicObjectManager_C::TestLevelSequenceIndex' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TestLevelSequenceEnemy) == 0x0006D0, "Member 'APsychicObjectManager_C::TestLevelSequenceEnemy' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TestLevelSequenceObj) == 0x0006D8, "Member 'APsychicObjectManager_C::TestLevelSequenceObj' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TestLevelSequenceTimer) == 0x0006E0, "Member 'APsychicObjectManager_C::TestLevelSequenceTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsyObjCommonParameter) == 0x0006EC, "Member 'APsychicObjectManager_C::bDtPsyObjCommonParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsyObjCommonParameter) == 0x0006F0, "Member 'APsychicObjectManager_C::DtPsyObjCommonParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsyObjSizeParameter) == 0x000860, "Member 'APsychicObjectManager_C::bDtPsyObjSizeParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RnPsyObjSizeParameter) == 0x000868, "Member 'APsychicObjectManager_C::RnPsyObjSizeParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsyObjSizeParameter) == 0x000878, "Member 'APsychicObjectManager_C::DtPsyObjSizeParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsyObjPhysicParameter) == 0x000888, "Member 'APsychicObjectManager_C::bDtPsyObjPhysicParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RnPsyObjPhysicParameter) == 0x000890, "Member 'APsychicObjectManager_C::RnPsyObjPhysicParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsyObjPhysicParameter) == 0x0008A0, "Member 'APsychicObjectManager_C::DtPsyObjPhysicParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsyObjAttackParameter) == 0x0008B0, "Member 'APsychicObjectManager_C::bDtPsyObjAttackParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RnPsyObjAttackParameter) == 0x0008B8, "Member 'APsychicObjectManager_C::RnPsyObjAttackParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsyObjAttackParamCommonInfoList) == 0x0008C8, "Member 'APsychicObjectManager_C::DtPsyObjAttackParamCommonInfoList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsyObjAttackParamSkillInfoList) == 0x0008D8, "Member 'APsychicObjectManager_C::DtPsyObjAttackParamSkillInfoList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtUnqObjParameter) == 0x0008E8, "Member 'APsychicObjectManager_C::bDtUnqObjParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RnUnqObjParameter) == 0x0008F0, "Member 'APsychicObjectManager_C::RnUnqObjParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtUnqObjParameter) == 0x000900, "Member 'APsychicObjectManager_C::DtUnqObjParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtUnqObjCameraParameter) == 0x000910, "Member 'APsychicObjectManager_C::bDtUnqObjCameraParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RnUnqObjCameraParameter) == 0x000918, "Member 'APsychicObjectManager_C::RnUnqObjCameraParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtUnqObjCameraParameter) == 0x000928, "Member 'APsychicObjectManager_C::DtUnqObjCameraParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsychicGrabMovement) == 0x000938, "Member 'APsychicObjectManager_C::bDtPsychicGrabMovement' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsychicGrabMovement) == 0x000940, "Member 'APsychicObjectManager_C::DtPsychicGrabMovement' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsychicGrabMovementSize) == 0x0009F0, "Member 'APsychicObjectManager_C::bDtPsychicGrabMovementSize' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsychicGrabMovementSize) == 0x0009F8, "Member 'APsychicObjectManager_C::DtPsychicGrabMovementSize' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsychicGrabParameter) == 0x000A08, "Member 'APsychicObjectManager_C::bDtPsychicGrabParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsychicGrabParameter) == 0x000A0C, "Member 'APsychicObjectManager_C::DtPsychicGrabParameter' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsychicGrabParameterSize) == 0x000A40, "Member 'APsychicObjectManager_C::bDtPsychicGrabParameterSize' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsychicGrabParameterSize) == 0x000A48, "Member 'APsychicObjectManager_C::DtPsychicGrabParameterSize' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtGrabPos) == 0x000A58, "Member 'APsychicObjectManager_C::bDtGrabPos' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtGrabPosList) == 0x000A60, "Member 'APsychicObjectManager_C::DtGrabPosList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsychicObjectData) == 0x000A70, "Member 'APsychicObjectManager_C::bDtPsychicObjectData' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsychicObjectDataList) == 0x000A78, "Member 'APsychicObjectManager_C::DtPsychicObjectDataList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDtPsychicCaptureData) == 0x000A88, "Member 'APsychicObjectManager_C::bDtPsychicCaptureData' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtPsychicCaptureData) == 0x000A90, "Member 'APsychicObjectManager_C::DtPsychicCaptureData' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bRespawnUpdate) == 0x000AA0, "Member 'APsychicObjectManager_C::bRespawnUpdate' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bInstantRespawn) == 0x000AA1, "Member 'APsychicObjectManager_C::bInstantRespawn' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnPsyObjList) == 0x000AA8, "Member 'APsychicObjectManager_C::RespawnPsyObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnUnqObjList) == 0x000AB8, "Member 'APsychicObjectManager_C::RespawnUnqObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnPsyTimeList) == 0x000AC8, "Member 'APsychicObjectManager_C::RespawnPsyTimeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnUnqTimeList) == 0x000AD8, "Member 'APsychicObjectManager_C::RespawnUnqTimeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnTimer) == 0x000AE8, "Member 'APsychicObjectManager_C::RespawnTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnRestrictRange) == 0x000AEC, "Member 'APsychicObjectManager_C::RespawnRestrictRange' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnRestrictRangeSq) == 0x000AF0, "Member 'APsychicObjectManager_C::RespawnRestrictRangeSq' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnRequeueTime) == 0x000AF4, "Member 'APsychicObjectManager_C::RespawnRequeueTime' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletFreeList) == 0x000AF8, "Member 'APsychicObjectManager_C::PsychicBulletFreeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletWorkList) == 0x000B08, "Member 'APsychicObjectManager_C::PsychicBulletWorkList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletIndex) == 0x000B18, "Member 'APsychicObjectManager_C::PsychicBulletIndex' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletMagazine) == 0x000B1C, "Member 'APsychicObjectManager_C::PsychicBulletMagazine' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletMax) == 0x000B20, "Member 'APsychicObjectManager_C::PsychicBulletMax' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletCount) == 0x000B24, "Member 'APsychicObjectManager_C::PsychicBulletCount' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bHidePsyObj) == 0x000B28, "Member 'APsychicObjectManager_C::bHidePsyObj' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjHiddenList) == 0x000B30, "Member 'APsychicObjectManager_C::PsyObjHiddenList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bBattleDisable) == 0x000B40, "Member 'APsychicObjectManager_C::bBattleDisable' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bUpdateFocus) == 0x000B41, "Member 'APsychicObjectManager_C::bUpdateFocus' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, FocusSearchRadiusRate) == 0x000B44, "Member 'APsychicObjectManager_C::FocusSearchRadiusRate' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, FocusSearchAngle) == 0x000B48, "Member 'APsychicObjectManager_C::FocusSearchAngle' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, FocusPsychicObject) == 0x000B50, "Member 'APsychicObjectManager_C::FocusPsychicObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AinmObjList) == 0x000B58, "Member 'APsychicObjectManager_C::AinmObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AnimObjClearList) == 0x000B68, "Member 'APsychicObjectManager_C::AnimObjClearList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AnimObjNum) == 0x000B78, "Member 'APsychicObjectManager_C::AnimObjNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, UniqueObjectMontageList) == 0x000B80, "Member 'APsychicObjectManager_C::UniqueObjectMontageList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, UniqueInputEnd) == 0x000B90, "Member 'APsychicObjectManager_C::UniqueInputEnd' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bUniqueObjectInput) == 0x000BA0, "Member 'APsychicObjectManager_C::bUniqueObjectInput' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, FocusUniqueObject) == 0x000BA8, "Member 'APsychicObjectManager_C::FocusUniqueObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, FocusMapGimmick) == 0x000BB0, "Member 'APsychicObjectManager_C::FocusMapGimmick' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bFocusUnique) == 0x000BB8, "Member 'APsychicObjectManager_C::bFocusUnique' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bFocusUniquePsy) == 0x000BB9, "Member 'APsychicObjectManager_C::bFocusUniquePsy' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bFocusUniqueMap) == 0x000BBA, "Member 'APsychicObjectManager_C::bFocusUniqueMap' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CapturePsychicObjectOld) == 0x000BC0, "Member 'APsychicObjectManager_C::CapturePsychicObjectOld' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, UniqueInputObject) == 0x000BC8, "Member 'APsychicObjectManager_C::UniqueInputObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSbFreeList) == 0x000BD0, "Member 'APsychicObjectManager_C::PsychicBulletSbFreeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSbWorkList) == 0x000BE0, "Member 'APsychicObjectManager_C::PsychicBulletSbWorkList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSbMagazine) == 0x000BF0, "Member 'APsychicObjectManager_C::PsychicBulletSbMagazine' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSbMax) == 0x000BF4, "Member 'APsychicObjectManager_C::PsychicBulletSbMax' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSbCount) == 0x000BF8, "Member 'APsychicObjectManager_C::PsychicBulletSbCount' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSrFreeList) == 0x000C00, "Member 'APsychicObjectManager_C::PsychicBulletSrFreeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSrWorkList) == 0x000C10, "Member 'APsychicObjectManager_C::PsychicBulletSrWorkList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSrMagazine) == 0x000C20, "Member 'APsychicObjectManager_C::PsychicBulletSrMagazine' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSrMax) == 0x000C24, "Member 'APsychicObjectManager_C::PsychicBulletSrMax' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicBulletSrCount) == 0x000C28, "Member 'APsychicObjectManager_C::PsychicBulletSrCount' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawBulletInfo) == 0x000C2C, "Member 'APsychicObjectManager_C::bDebugDrawBulletInfo' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, ElectricPoleEffectList) == 0x000C30, "Member 'APsychicObjectManager_C::ElectricPoleEffectList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsyObjSoundDt) == 0x000C40, "Member 'APsychicObjectManager_C::bPsyObjSoundDt' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjSoundDtList) == 0x000C50, "Member 'APsychicObjectManager_C::PsyObjSoundDtList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CaptureEnemyObjectOld) == 0x000C60, "Member 'APsychicObjectManager_C::CaptureEnemyObjectOld' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCaptureNrmPlayer) == 0x000C68, "Member 'APsychicObjectManager_C::bCaptureNrmPlayer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCaptureNrmObject) == 0x000C69, "Member 'APsychicObjectManager_C::bCaptureNrmObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCaptureNrm) == 0x000C6A, "Member 'APsychicObjectManager_C::bCaptureNrm' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCaptureUnqObject) == 0x000C6B, "Member 'APsychicObjectManager_C::bCaptureUnqObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCaptureUnqPlayer) == 0x000C6C, "Member 'APsychicObjectManager_C::bCaptureUnqPlayer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCaptureUnq) == 0x000C6D, "Member 'APsychicObjectManager_C::bCaptureUnq' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCopyPsyObj) == 0x000C6E, "Member 'APsychicObjectManager_C::bCopyPsyObj' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCopyPsyObjPause) == 0x000C6F, "Member 'APsychicObjectManager_C::bCopyPsyObjPause' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCopyPsyObjUpdate) == 0x000C70, "Member 'APsychicObjectManager_C::bCopyPsyObjUpdate' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDbCopyPsyObjPrint) == 0x000C71, "Member 'APsychicObjectManager_C::bDbCopyPsyObjPrint' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsyObjKeepMax) == 0x000C74, "Member 'APsychicObjectManager_C::CopyPsyObjKeepMax' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsyObjClassList) == 0x000C78, "Member 'APsychicObjectManager_C::CopyPsyObjClassList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsyObjList) == 0x000C88, "Member 'APsychicObjectManager_C::CopyPsyObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsyObjList2) == 0x000C98, "Member 'APsychicObjectManager_C::CopyPsyObjList2' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsychicObject0) == 0x000CA8, "Member 'APsychicObjectManager_C::CopyPsychicObject0' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsychicObject1) == 0x000CB0, "Member 'APsychicObjectManager_C::CopyPsychicObject1' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DtEnemyInfoList) == 0x000CB8, "Member 'APsychicObjectManager_C::DtEnemyInfoList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDbDrawEaseCurve) == 0x000CC8, "Member 'APsychicObjectManager_C::bDbDrawEaseCurve' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDbDrawPsyObjAttackSphere) == 0x000CC9, "Member 'APsychicObjectManager_C::bDbDrawPsyObjAttackSphere' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DbEaseType) == 0x000CCA, "Member 'APsychicObjectManager_C::DbEaseType' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DbEaseExp) == 0x000CCC, "Member 'APsychicObjectManager_C::DbEaseExp' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsychicBattleInput) == 0x000CD0, "Member 'APsychicObjectManager_C::bPsychicBattleInput' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, ChildPsychicObjectList) == 0x000CD8, "Member 'APsychicObjectManager_C::ChildPsychicObjectList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicObjectBulletDataList) == 0x000CE8, "Member 'APsychicObjectManager_C::PsychicObjectBulletDataList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CapturedPsychicObject) == 0x000CF8, "Member 'APsychicObjectManager_C::CapturedPsychicObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CapturedNpcObject) == 0x000D00, "Member 'APsychicObjectManager_C::CapturedNpcObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CapturedEnemyObject) == 0x000D08, "Member 'APsychicObjectManager_C::CapturedEnemyObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AttackPsychicObject) == 0x000D10, "Member 'APsychicObjectManager_C::AttackPsychicObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AttackUniqueObject) == 0x000D18, "Member 'APsychicObjectManager_C::AttackUniqueObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AttackNpcObject) == 0x000D20, "Member 'APsychicObjectManager_C::AttackNpcObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AttackEnemyObject) == 0x000D28, "Member 'APsychicObjectManager_C::AttackEnemyObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, AttackEnemyUnique) == 0x000D30, "Member 'APsychicObjectManager_C::AttackEnemyUnique' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bCheckPsychicGaugeEnable) == 0x000D38, "Member 'APsychicObjectManager_C::bCheckPsychicGaugeEnable' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WeightGaugeObject) == 0x000D40, "Member 'APsychicObjectManager_C::WeightGaugeObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WeightGaugeUnique) == 0x000D48, "Member 'APsychicObjectManager_C::WeightGaugeUnique' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WeightGaugeGimmick) == 0x000D50, "Member 'APsychicObjectManager_C::WeightGaugeGimmick' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicComboSlowCheckActorList) == 0x000D58, "Member 'APsychicObjectManager_C::PsychicComboSlowCheckActorList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bUniqueObjectUse) == 0x000D68, "Member 'APsychicObjectManager_C::bUniqueObjectUse' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, UniqueObjectUse) == 0x000D70, "Member 'APsychicObjectManager_C::UniqueObjectUse' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldActorList) == 0x000D80, "Member 'APsychicObjectManager_C::PsychicFieldActorList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldTargetList) == 0x000D90, "Member 'APsychicObjectManager_C::PsychicFieldTargetList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldSearchRadius) == 0x000DA0, "Member 'APsychicObjectManager_C::PsychicFieldSearchRadius' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldObjectNum) == 0x000DA4, "Member 'APsychicObjectManager_C::PsychicFieldObjectNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldCaptureNum) == 0x000DA8, "Member 'APsychicObjectManager_C::PsychicFieldCaptureNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsychicFieldCapture) == 0x000DAC, "Member 'APsychicObjectManager_C::bPsychicFieldCapture' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsychicFieldAttract) == 0x000DAD, "Member 'APsychicObjectManager_C::bPsychicFieldAttract' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsychicFieldAction) == 0x000DAE, "Member 'APsychicObjectManager_C::bPsychicFieldAction' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsychicFieldSafety) == 0x000DAF, "Member 'APsychicObjectManager_C::bPsychicFieldSafety' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldSizeList) == 0x000DB0, "Member 'APsychicObjectManager_C::PsychicFieldSizeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldDelayTimeList) == 0x000DC0, "Member 'APsychicObjectManager_C::PsychicFieldDelayTimeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldCaptureList) == 0x000DD0, "Member 'APsychicObjectManager_C::PsychicFieldCaptureList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsychicFieldCaptureTimer) == 0x000DE0, "Member 'APsychicObjectManager_C::PsychicFieldCaptureTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnTimeNormal) == 0x000DEC, "Member 'APsychicObjectManager_C::RespawnTimeNormal' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnTimeUnique) == 0x000DF0, "Member 'APsychicObjectManager_C::RespawnTimeUnique' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RespawnTimeInstant) == 0x000DF4, "Member 'APsychicObjectManager_C::RespawnTimeInstant' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawRespawn) == 0x000DF8, "Member 'APsychicObjectManager_C::bDebugDrawRespawn' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BrainFieldSafetySizeSoftList) == 0x000E00, "Member 'APsychicObjectManager_C::BrainFieldSafetySizeSoftList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, BrainFieldSafetySwingSoftList) == 0x000E10, "Member 'APsychicObjectManager_C::BrainFieldSafetySwingSoftList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugPsychicFieldPrint) == 0x000E38, "Member 'APsychicObjectManager_C::bDebugPsychicFieldPrint' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmPsyObjSizeList) == 0x000E40, "Member 'APsychicObjectManager_C::EmPsyObjSizeList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EmPsyObjSizeLen) == 0x000E50, "Member 'APsychicObjectManager_C::EmPsyObjSizeLen' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bEnPsyObjSafety) == 0x000E54, "Member 'APsychicObjectManager_C::bEnPsyObjSafety' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugDrawEmPsyObj) == 0x000E55, "Member 'APsychicObjectManager_C::DebugDrawEmPsyObj' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionDirectShotList) == 0x000E58, "Member 'APsychicObjectManager_C::PsyObjActionDirectShotList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionUniqueObjectList) == 0x000E68, "Member 'APsychicObjectManager_C::PsyObjActionUniqueObjectList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionMapGimmickList) == 0x000E78, "Member 'APsychicObjectManager_C::PsyObjActionMapGimmickList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsyObjActionCheckTimer) == 0x000E88, "Member 'APsychicObjectManager_C::bPsyObjActionCheckTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionJustDodgeTimer) == 0x000E8C, "Member 'APsychicObjectManager_C::PsyObjActionJustDodgeTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionJustDodgeTime) == 0x000E98, "Member 'APsychicObjectManager_C::PsyObjActionJustDodgeTime' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionInterceptTimer) == 0x000E9C, "Member 'APsychicObjectManager_C::PsyObjActionInterceptTimer' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, PsyObjActionInterceptTime) == 0x000EA8, "Member 'APsychicObjectManager_C::PsyObjActionInterceptTime' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawAnimObjList) == 0x000EAC, "Member 'APsychicObjectManager_C::bDebugDrawAnimObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawPsyObjAction) == 0x000EAD, "Member 'APsychicObjectManager_C::bDebugDrawPsyObjAction' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawObjectStatus) == 0x000EAE, "Member 'APsychicObjectManager_C::bDebugDrawObjectStatus' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bNewObjectSystem) == 0x000EAF, "Member 'APsychicObjectManager_C::bNewObjectSystem' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, InterceptObjectList) == 0x000EB0, "Member 'APsychicObjectManager_C::InterceptObjectList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, InterceptObjectListNum) == 0x000EC0, "Member 'APsychicObjectManager_C::InterceptObjectListNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, InterceptObject) == 0x000EC8, "Member 'APsychicObjectManager_C::InterceptObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawInterceptObject) == 0x000ED0, "Member 'APsychicObjectManager_C::bDebugDrawInterceptObject' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EnemyInterceptableThrow) == 0x000ED8, "Member 'APsychicObjectManager_C::EnemyInterceptableThrow' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugTraceRecordDraw) == 0x000EE8, "Member 'APsychicObjectManager_C::bDebugTraceRecordDraw' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordNum) == 0x000EEC, "Member 'APsychicObjectManager_C::DebugTraceRecordNum' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordIndex) == 0x000EF0, "Member 'APsychicObjectManager_C::DebugTraceRecordIndex' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordRadius) == 0x000EF4, "Member 'APsychicObjectManager_C::DebugTraceRecordRadius' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordSttList) == 0x000EF8, "Member 'APsychicObjectManager_C::DebugTraceRecordSttList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordEndList) == 0x000F08, "Member 'APsychicObjectManager_C::DebugTraceRecordEndList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordHitList) == 0x000F18, "Member 'APsychicObjectManager_C::DebugTraceRecordHitList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordHitPosList) == 0x000F28, "Member 'APsychicObjectManager_C::DebugTraceRecordHitPosList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordHitNrlList) == 0x000F38, "Member 'APsychicObjectManager_C::DebugTraceRecordHitNrlList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordExtra0List) == 0x000F48, "Member 'APsychicObjectManager_C::DebugTraceRecordExtra0List' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordExtra1List) == 0x000F58, "Member 'APsychicObjectManager_C::DebugTraceRecordExtra1List' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordExtra2List) == 0x000F68, "Member 'APsychicObjectManager_C::DebugTraceRecordExtra2List' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordExtra3List) == 0x000F78, "Member 'APsychicObjectManager_C::DebugTraceRecordExtra3List' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordRadiusEx0) == 0x000F88, "Member 'APsychicObjectManager_C::DebugTraceRecordRadiusEx0' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordRadiusEx1) == 0x000F8C, "Member 'APsychicObjectManager_C::DebugTraceRecordRadiusEx1' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordRadiusEx2) == 0x000F90, "Member 'APsychicObjectManager_C::DebugTraceRecordRadiusEx2' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordRadiusEx3) == 0x000F94, "Member 'APsychicObjectManager_C::DebugTraceRecordRadiusEx3' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordColorEx0) == 0x000F98, "Member 'APsychicObjectManager_C::DebugTraceRecordColorEx0' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordColorEx1) == 0x000FA8, "Member 'APsychicObjectManager_C::DebugTraceRecordColorEx1' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordColorEx2) == 0x000FB8, "Member 'APsychicObjectManager_C::DebugTraceRecordColorEx2' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugTraceRecordColorEx3) == 0x000FC8, "Member 'APsychicObjectManager_C::DebugTraceRecordColorEx3' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bInBossGauge) == 0x000FD8, "Member 'APsychicObjectManager_C::bInBossGauge' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, TrgEffMgr) == 0x000FE0, "Member 'APsychicObjectManager_C::TrgEffMgr' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugMapGimmickExMode) == 0x000FE8, "Member 'APsychicObjectManager_C::bDebugMapGimmickExMode' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bMapGimmickExMode) == 0x000FE9, "Member 'APsychicObjectManager_C::bMapGimmickExMode' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, MapGimmickEx) == 0x000FF0, "Member 'APsychicObjectManager_C::MapGimmickEx' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RegisterRefNameDebug) == 0x000FF8, "Member 'APsychicObjectManager_C::RegisterRefNameDebug' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RegisterRefNameArea) == 0x001008, "Member 'APsychicObjectManager_C::RegisterRefNameArea' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RegisterRefNameBrainField) == 0x001018, "Member 'APsychicObjectManager_C::RegisterRefNameBrainField' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, RegisterRefNameDebugCreate) == 0x001028, "Member 'APsychicObjectManager_C::RegisterRefNameDebugCreate' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bUniqueObjectSkipDisableCamera) == 0x001038, "Member 'APsychicObjectManager_C::bUniqueObjectSkipDisableCamera' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawRegisterPos) == 0x001039, "Member 'APsychicObjectManager_C::bDebugDrawRegisterPos' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawArrangePos) == 0x00103A, "Member 'APsychicObjectManager_C::bDebugDrawArrangePos' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawRegisterActorTick) == 0x00103B, "Member 'APsychicObjectManager_C::bDebugDrawRegisterActorTick' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawRegisterMeshTick) == 0x00103C, "Member 'APsychicObjectManager_C::bDebugDrawRegisterMeshTick' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawRegisterCompTick) == 0x00103D, "Member 'APsychicObjectManager_C::bDebugDrawRegisterCompTick' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DebugDrawEmPsyObjLine) == 0x00103E, "Member 'APsychicObjectManager_C::DebugDrawEmPsyObjLine' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bUniqueObjectAutoTakeItem) == 0x00103F, "Member 'APsychicObjectManager_C::bUniqueObjectAutoTakeItem' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, InputModeLockRefList) == 0x001040, "Member 'APsychicObjectManager_C::InputModeLockRefList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, EventPsyObjList) == 0x001050, "Member 'APsychicObjectManager_C::EventPsyObjList' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugPrintPsyObjInfo) == 0x001060, "Member 'APsychicObjectManager_C::bDebugPrintPsyObjInfo' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawFocusObjPhase) == 0x001061, "Member 'APsychicObjectManager_C::bDebugDrawFocusObjPhase' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawFocusObjState) == 0x001062, "Member 'APsychicObjectManager_C::bDebugDrawFocusObjState' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawFocusObjCollision) == 0x001063, "Member 'APsychicObjectManager_C::bDebugDrawFocusObjCollision' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bDebugDrawFocusObjAsyncCmn) == 0x001064, "Member 'APsychicObjectManager_C::bDebugDrawFocusObjAsyncCmn' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bWeightGaugeCheckEnable) == 0x001065, "Member 'APsychicObjectManager_C::bWeightGaugeCheckEnable' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bWeightGaugeCheckMapGimmickEnable) == 0x001066, "Member 'APsychicObjectManager_C::bWeightGaugeCheckMapGimmickEnable' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bWeightGaugeCheckProc) == 0x001067, "Member 'APsychicObjectManager_C::bWeightGaugeCheckProc' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bWeightGaugeCheck) == 0x001068, "Member 'APsychicObjectManager_C::bWeightGaugeCheck' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bWeightGaugeCheckApply) == 0x001069, "Member 'APsychicObjectManager_C::bWeightGaugeCheckApply' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bWeightGaugeCheckMapGimmick) == 0x00106A, "Member 'APsychicObjectManager_C::bWeightGaugeCheckMapGimmick' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WeightGaugeCheckTagName) == 0x00106C, "Member 'APsychicObjectManager_C::WeightGaugeCheckTagName' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, WeightGaugeCheckObj) == 0x001078, "Member 'APsychicObjectManager_C::WeightGaugeCheckObj' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DbActorSoftClass) == 0x001080, "Member 'APsychicObjectManager_C::DbActorSoftClass' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, DbActorSoftClass2) == 0x0010A8, "Member 'APsychicObjectManager_C::DbActorSoftClass2' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, bPsyObjSoundRegister) == 0x0010D0, "Member 'APsychicObjectManager_C::bPsyObjSoundRegister' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsyObjList3) == 0x0010E0, "Member 'APsychicObjectManager_C::CopyPsyObjList3' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsychicObject2) == 0x0010F0, "Member 'APsychicObjectManager_C::CopyPsychicObject2' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsyObjList4) == 0x0010F8, "Member 'APsychicObjectManager_C::CopyPsyObjList4' has a wrong offset!");
static_assert(offsetof(APsychicObjectManager_C, CopyPsychicObject3) == 0x001108, "Member 'APsychicObjectManager_C::CopyPsychicObject3' has a wrong offset!");

}

