#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageFloatingControlComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C
// 0x0190 (0x0250 - 0x00C0)
class UBP_DamageFloatingControlComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDataTable*                             DamageFloatingParamTable;                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RowName;                                           // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Weight;                                            // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attenuation;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyFallCoefficient;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyMaxFallSpeed;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalFallCoefficient;                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalMaxFallSpeed;                                // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_838F[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0118(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFall;                                             // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8390[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifiedHighestPointTime;                          // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeforeAddLocation;                                 // 0x012C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HighestPointTimeLocation;                          // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ModifiedBeforeAddLocation;                         // 0x013C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalHighestPointTime;                          // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CoefficientScale;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FloatingRotationXVector;                           // 0x0150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingPitchCosd;                                 // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingPitchSind;                                 // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingPitch;                                     // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFallTiming;                                     // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLanding;                                          // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8391[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrictionCoefficient;                               // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LandingLocation;                                   // 0x0178(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingTime;                                       // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHighestPoint;                                     // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8392[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalMaxTime;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ModifiedMaxTime;                                   // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTeleport;                                         // 0x0194(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8393[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableTeleportTime;                                // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeforeElapsedTime;                                 // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallTimingMinAngle;                                // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallTimingMaxAngle;                                // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinFallTiming;                                     // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8394[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DispatchBeginFall;                                 // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bHit;                                              // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8395[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DispathFailedFall;                                 // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                BeforeOwnerLocation;                               // 0x01D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFailedFall;                                       // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bOnce;                                             // 0x01E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8396[0x2];                                     // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CorrectHitDir;                                     // 0x01E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CorrectPower;                                      // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSlowMode;                                         // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8397[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   OwnerCharacter;                                    // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             IgnoreLandingCheckTimer;                           // 0x0208(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8398[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SlowDeltaSecondsRateCurve;                         // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowTimer;                                         // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckTimer;                                        // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitFloatingHeight;                               // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLimitHeight;                                      // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckFailedFall;                                  // 0x022D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8399[0x2];                                     // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             CheckFailedFallTimer;                              // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             ForceFailedFallTimer;                              // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         IgnoreLandingCheckTime;                            // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DispatchBeginFall__DelegateSignature();
	void DispathFailedFall__DelegateSignature();
	void ExecuteUbergraph_BP_DamageFloatingControlComponent(int32 EntryPoint);
	void UnbindUpdate();
	void BindUpdate();
	void ReceiveBeginPlay();
	void Update(float DeltaSec);
	void Start(float Param_Power, const struct FRotator& Param_Rotation, const struct FVector& Param_HitDir);
	void GetActive(bool* Param_bActive);
	void End();
	void SetLanding(bool Param_bLanding);
	void SetSlowMode(bool bSlow);
	void IsIgnoreLandingCheck(bool* bIgnoreLandingCheck);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageFloatingControlComponent_C">();
	}
	static class UBP_DamageFloatingControlComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DamageFloatingControlComponent_C>();
	}
};
static_assert(alignof(UBP_DamageFloatingControlComponent_C) == 0x000008, "Wrong alignment on UBP_DamageFloatingControlComponent_C");
static_assert(sizeof(UBP_DamageFloatingControlComponent_C) == 0x000250, "Wrong size on UBP_DamageFloatingControlComponent_C");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_DamageFloatingControlComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, DamageFloatingParamTable) == 0x0000C8, "Member 'UBP_DamageFloatingControlComponent_C::DamageFloatingParamTable' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, RowName) == 0x0000D0, "Member 'UBP_DamageFloatingControlComponent_C::RowName' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, Power) == 0x0000D8, "Member 'UBP_DamageFloatingControlComponent_C::Power' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, Rotation) == 0x0000DC, "Member 'UBP_DamageFloatingControlComponent_C::Rotation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, Weight) == 0x0000E8, "Member 'UBP_DamageFloatingControlComponent_C::Weight' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, Attenuation) == 0x0000EC, "Member 'UBP_DamageFloatingControlComponent_C::Attenuation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FlyFallCoefficient) == 0x0000F0, "Member 'UBP_DamageFloatingControlComponent_C::FlyFallCoefficient' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FlyMaxFallSpeed) == 0x0000F4, "Member 'UBP_DamageFloatingControlComponent_C::FlyMaxFallSpeed' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, NormalFallCoefficient) == 0x0000F8, "Member 'UBP_DamageFloatingControlComponent_C::NormalFallCoefficient' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, NormalMaxFallSpeed) == 0x0000FC, "Member 'UBP_DamageFloatingControlComponent_C::NormalMaxFallSpeed' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bActive) == 0x000100, "Member 'UBP_DamageFloatingControlComponent_C::bActive' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, ElapsedTime) == 0x000104, "Member 'UBP_DamageFloatingControlComponent_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, StartLocation) == 0x000108, "Member 'UBP_DamageFloatingControlComponent_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, Gravity) == 0x000114, "Member 'UBP_DamageFloatingControlComponent_C::Gravity' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, HitDir) == 0x000118, "Member 'UBP_DamageFloatingControlComponent_C::HitDir' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bFall) == 0x000124, "Member 'UBP_DamageFloatingControlComponent_C::bFall' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, ModifiedHighestPointTime) == 0x000128, "Member 'UBP_DamageFloatingControlComponent_C::ModifiedHighestPointTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, BeforeAddLocation) == 0x00012C, "Member 'UBP_DamageFloatingControlComponent_C::BeforeAddLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, HighestPointTimeLocation) == 0x000138, "Member 'UBP_DamageFloatingControlComponent_C::HighestPointTimeLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, ModifiedBeforeAddLocation) == 0x00013C, "Member 'UBP_DamageFloatingControlComponent_C::ModifiedBeforeAddLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, OriginalHighestPointTime) == 0x000148, "Member 'UBP_DamageFloatingControlComponent_C::OriginalHighestPointTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, CoefficientScale) == 0x00014C, "Member 'UBP_DamageFloatingControlComponent_C::CoefficientScale' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FloatingRotationXVector) == 0x000150, "Member 'UBP_DamageFloatingControlComponent_C::FloatingRotationXVector' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FloatingPitchCosd) == 0x00015C, "Member 'UBP_DamageFloatingControlComponent_C::FloatingPitchCosd' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FloatingPitchSind) == 0x000160, "Member 'UBP_DamageFloatingControlComponent_C::FloatingPitchSind' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FloatingPitch) == 0x000164, "Member 'UBP_DamageFloatingControlComponent_C::FloatingPitch' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, GravityScale) == 0x000168, "Member 'UBP_DamageFloatingControlComponent_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, MaxFallTiming) == 0x00016C, "Member 'UBP_DamageFloatingControlComponent_C::MaxFallTiming' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bLanding) == 0x000170, "Member 'UBP_DamageFloatingControlComponent_C::bLanding' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FrictionCoefficient) == 0x000174, "Member 'UBP_DamageFloatingControlComponent_C::FrictionCoefficient' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, LandingLocation) == 0x000178, "Member 'UBP_DamageFloatingControlComponent_C::LandingLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, LandingTime) == 0x000184, "Member 'UBP_DamageFloatingControlComponent_C::LandingTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bHighestPoint) == 0x000188, "Member 'UBP_DamageFloatingControlComponent_C::bHighestPoint' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, OriginalMaxTime) == 0x00018C, "Member 'UBP_DamageFloatingControlComponent_C::OriginalMaxTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, ModifiedMaxTime) == 0x000190, "Member 'UBP_DamageFloatingControlComponent_C::ModifiedMaxTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bTeleport) == 0x000194, "Member 'UBP_DamageFloatingControlComponent_C::bTeleport' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, EnableTeleportTime) == 0x000198, "Member 'UBP_DamageFloatingControlComponent_C::EnableTeleportTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, BeforeElapsedTime) == 0x00019C, "Member 'UBP_DamageFloatingControlComponent_C::BeforeElapsedTime' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FallTimingMinAngle) == 0x0001A0, "Member 'UBP_DamageFloatingControlComponent_C::FallTimingMinAngle' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, FallTimingMaxAngle) == 0x0001A4, "Member 'UBP_DamageFloatingControlComponent_C::FallTimingMaxAngle' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, MinFallTiming) == 0x0001A8, "Member 'UBP_DamageFloatingControlComponent_C::MinFallTiming' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, DispatchBeginFall) == 0x0001B0, "Member 'UBP_DamageFloatingControlComponent_C::DispatchBeginFall' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bHit) == 0x0001C0, "Member 'UBP_DamageFloatingControlComponent_C::bHit' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, DispathFailedFall) == 0x0001C8, "Member 'UBP_DamageFloatingControlComponent_C::DispathFailedFall' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, BeforeOwnerLocation) == 0x0001D8, "Member 'UBP_DamageFloatingControlComponent_C::BeforeOwnerLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bFailedFall) == 0x0001E4, "Member 'UBP_DamageFloatingControlComponent_C::bFailedFall' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bOnce) == 0x0001E5, "Member 'UBP_DamageFloatingControlComponent_C::bOnce' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, CorrectHitDir) == 0x0001E8, "Member 'UBP_DamageFloatingControlComponent_C::CorrectHitDir' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, CorrectPower) == 0x0001F4, "Member 'UBP_DamageFloatingControlComponent_C::CorrectPower' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bSlowMode) == 0x0001F8, "Member 'UBP_DamageFloatingControlComponent_C::bSlowMode' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, OwnerCharacter) == 0x000200, "Member 'UBP_DamageFloatingControlComponent_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, IgnoreLandingCheckTimer) == 0x000208, "Member 'UBP_DamageFloatingControlComponent_C::IgnoreLandingCheckTimer' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, SlowDeltaSecondsRateCurve) == 0x000218, "Member 'UBP_DamageFloatingControlComponent_C::SlowDeltaSecondsRateCurve' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, SlowTimer) == 0x000220, "Member 'UBP_DamageFloatingControlComponent_C::SlowTimer' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, CheckTimer) == 0x000224, "Member 'UBP_DamageFloatingControlComponent_C::CheckTimer' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, LimitFloatingHeight) == 0x000228, "Member 'UBP_DamageFloatingControlComponent_C::LimitFloatingHeight' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bLimitHeight) == 0x00022C, "Member 'UBP_DamageFloatingControlComponent_C::bLimitHeight' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, bCheckFailedFall) == 0x00022D, "Member 'UBP_DamageFloatingControlComponent_C::bCheckFailedFall' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, CheckFailedFallTimer) == 0x000230, "Member 'UBP_DamageFloatingControlComponent_C::CheckFailedFallTimer' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, ForceFailedFallTimer) == 0x00023C, "Member 'UBP_DamageFloatingControlComponent_C::ForceFailedFallTimer' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloatingControlComponent_C, IgnoreLandingCheckTime) == 0x000248, "Member 'UBP_DamageFloatingControlComponent_C::IgnoreLandingCheckTime' has a wrong offset!");

}

