#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputManager

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_InputManager.BP_InputManager_C.ExecuteUbergraph_BP_InputManager
// 0x0628 (0x0628 - 0x0000)
struct BP_InputManager_C_ExecuteUbergraph_BP_InputManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A79[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSGameInstance*                        CallFunc_GetRSGameInstance_RSGameInstance;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_27;                    // 0x0010(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_26;                    // 0x0028(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0040(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_25;                    // 0x0058(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_24;                    // 0x0070(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0088(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x00A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x00B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x00D0(0x0018)(HasGetValueTypeHash)
	TDelegate<void(EInputDeviceType NewType, EInputDeviceType OldType)> K2Node_CreateDelegate_OutputDelegate;              // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	struct FKey                                   K2Node_InputActionEvent_Key_23;                    // 0x00F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_22;                    // 0x0110(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0128(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_21;                    // 0x0140(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_20;                    // 0x0158(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_4;                            // 0x0170(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_19;                    // 0x0188(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_18;                    // 0x01A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_5;                            // 0x01B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_17;                    // 0x01D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_16;                    // 0x01E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_6;                            // 0x0200(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_15;                    // 0x0218(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_14;                    // 0x0230(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_7;                            // 0x0248(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_13;                    // 0x0260(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_12;                    // 0x0278(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_8;                            // 0x0290(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_11;                    // 0x02A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_10;                    // 0x02C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_9;                            // 0x02D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x02F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x0308(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_10;                           // 0x0320(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x0338(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x0350(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_11;                           // 0x0368(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0380(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0398(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_12;                           // 0x03B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x03C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x03E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_13;                           // 0x03F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0410(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0428(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_14;                           // 0x0440(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_15;                           // 0x0458(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A7A[0x4];                                     // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_16;                           // 0x0478(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_30;                    // 0x0490(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_31;                    // 0x04A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_17;                           // 0x04C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_32;                    // 0x04D8(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A7B[0x4];                                     // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_28;                    // 0x0508(0x0018)(HasGetValueTypeHash)
	EInputDeviceType                              K2Node_CustomEvent_newType;                        // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceType                              K2Node_CustomEvent_oldType;                        // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A7C[0x2];                                     // 0x0522(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputMouseDelta_DeltaX;                // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputMouseDelta_DeltaY;                // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A7D[0x7];                                     // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_33;                    // 0x0548(0x0018)(HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A7E[0x7];                                     // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_18;                           // 0x0568(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_34;                    // 0x0580(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_35;                    // 0x0598(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A7F[0x4];                                     // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_19;                           // 0x05B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_36;                    // 0x05D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_37;                    // 0x05E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_29;                    // 0x0600(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0618(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x061C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0624(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager) == 0x000008, "Wrong alignment on BP_InputManager_C_ExecuteUbergraph_BP_InputManager");
static_assert(sizeof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager) == 0x000628, "Wrong size on BP_InputManager_C_ExecuteUbergraph_BP_InputManager");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, EntryPoint) == 0x000000, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetRSGameInstance_RSGameInstance) == 0x000008, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetRSGameInstance_RSGameInstance' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_27) == 0x000010, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_27' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_26) == 0x000028, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_26' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable) == 0x000040, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_25) == 0x000058, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_25' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_24) == 0x000070, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_24' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_1) == 0x000088, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputKeyEvent_Key_1) == 0x0000A0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputKeyEvent_Key) == 0x0000B8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_2) == 0x0000D0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_CreateDelegate_OutputDelegate) == 0x0000E8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_23) == 0x0000F8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_23' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_22) == 0x000110, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_22' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_3) == 0x000128, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_21) == 0x000140, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_21' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_20) == 0x000158, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_20' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_4) == 0x000170, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_19) == 0x000188, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_19' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_18) == 0x0001A0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_18' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_5) == 0x0001B8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_17) == 0x0001D0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_17' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_16) == 0x0001E8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_16' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_6) == 0x000200, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_15) == 0x000218, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_14) == 0x000230, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_7) == 0x000248, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_13) == 0x000260, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_12) == 0x000278, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_8) == 0x000290, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_11) == 0x0002A8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_10) == 0x0002C0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_9) == 0x0002D8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_9) == 0x0002F0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_8) == 0x000308, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_10) == 0x000320, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_7) == 0x000338, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_6) == 0x000350, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_11) == 0x000368, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_5) == 0x000380, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_4) == 0x000398, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_12) == 0x0003B0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_3) == 0x0003C8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_2) == 0x0003E0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_13) == 0x0003F8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_1) == 0x000410, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key) == 0x000428, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_14) == 0x000440, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_15) == 0x000458, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputAxisEvent_AxisValue_4) == 0x000470, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_16) == 0x000478, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_30) == 0x000490, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_30' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_31) == 0x0004A8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_31' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_17) == 0x0004C0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_32) == 0x0004D8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_32' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputAxisEvent_AxisValue_3) == 0x0004F0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputAxisEvent_AxisValue_2) == 0x0004F4, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_Event_DeltaSeconds) == 0x0004F8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetPlayerController_ReturnValue) == 0x000500, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_28) == 0x000508, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_28' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_CustomEvent_newType) == 0x000520, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_CustomEvent_newType' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_CustomEvent_oldType) == 0x000521, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_CustomEvent_oldType' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputAxisEvent_AxisValue_1) == 0x000524, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetPlayerController_ReturnValue_1) == 0x000528, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetInputMouseDelta_DeltaX) == 0x000530, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetInputMouseDelta_DeltaX' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetInputMouseDelta_DeltaY) == 0x000534, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetInputMouseDelta_DeltaY' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetMousePosition_LocationX) == 0x000538, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetMousePosition_LocationY) == 0x00053C, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetMousePosition_ReturnValue) == 0x000540, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_33) == 0x000548, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_33' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_Event_EndPlayReason) == 0x000560, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_18) == 0x000568, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_34) == 0x000580, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_34' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_35) == 0x000598, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_35' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputAxisEvent_AxisValue) == 0x0005B0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, Temp_struct_Variable_19) == 0x0005B8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_36) == 0x0005D0, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_36' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_37) == 0x0005E8, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_37' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, K2Node_InputActionEvent_Key_29) == 0x000600, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::K2Node_InputActionEvent_Key_29' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000618, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00061C, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000620, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ExecuteUbergraph_BP_InputManager, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000624, "Member 'BP_InputManager_C_ExecuteUbergraph_BP_InputManager::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0");
static_assert(sizeof(BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0");
static_assert(offsetof(BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'BP_InputManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_InputManager_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_InputManager_C_ReceiveEndPlay");
static_assert(sizeof(BP_InputManager_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_InputManager_C_ReceiveEndPlay");
static_assert(offsetof(BP_InputManager_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_InputManager_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18
// 0x0004 (0x0004 - 0x0000)
struct BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18) == 0x000004, "Wrong alignment on BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18");
static_assert(sizeof(BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18) == 0x000004, "Wrong size on BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18");
static_assert(offsetof(BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18, AxisValue) == 0x000000, "Member 'BP_InputManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_18::AxisValue' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.ChangeDeviceTypeEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_InputManager_C_ChangeDeviceTypeEvent final
{
public:
	EInputDeviceType                              NewType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceType                              OldType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_ChangeDeviceTypeEvent) == 0x000001, "Wrong alignment on BP_InputManager_C_ChangeDeviceTypeEvent");
static_assert(sizeof(BP_InputManager_C_ChangeDeviceTypeEvent) == 0x000002, "Wrong size on BP_InputManager_C_ChangeDeviceTypeEvent");
static_assert(offsetof(BP_InputManager_C_ChangeDeviceTypeEvent, NewType) == 0x000000, "Member 'BP_InputManager_C_ChangeDeviceTypeEvent::NewType' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_ChangeDeviceTypeEvent, OldType) == 0x000001, "Member 'BP_InputManager_C_ChangeDeviceTypeEvent::OldType' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_InputManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_InputManager_C_ReceiveTick");
static_assert(sizeof(BP_InputManager_C_ReceiveTick) == 0x000004, "Wrong size on BP_InputManager_C_ReceiveTick");
static_assert(offsetof(BP_InputManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_InputManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19
// 0x0004 (0x0004 - 0x0000)
struct BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19) == 0x000004, "Wrong alignment on BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19");
static_assert(sizeof(BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19) == 0x000004, "Wrong size on BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19");
static_assert(offsetof(BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19, AxisValue) == 0x000000, "Member 'BP_InputManager_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_19::AxisValue' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22
// 0x0004 (0x0004 - 0x0000)
struct BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22) == 0x000004, "Wrong alignment on BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22");
static_assert(sizeof(BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22) == 0x000004, "Wrong size on BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22");
static_assert(offsetof(BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22, AxisValue) == 0x000000, "Member 'BP_InputManager_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_22::AxisValue' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1");
static_assert(sizeof(BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1");
static_assert(offsetof(BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'BP_InputManager_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RUP_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RUP_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RUP_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_R1_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_R1_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_R1_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_R2_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4");
static_assert(sizeof(BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4");
static_assert(offsetof(BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_R2_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5");
static_assert(sizeof(BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5");
static_assert(offsetof(BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_R2_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_R3_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6");
static_assert(sizeof(BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6");
static_assert(offsetof(BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_R3_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7");
static_assert(sizeof(BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7");
static_assert(offsetof(BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_R3_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RDOWN_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RDOWN_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RDOWN_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_L1_K2Node_InputActionEvent_10
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10");
static_assert(sizeof(BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10");
static_assert(offsetof(BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_10::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_L1_K2Node_InputActionEvent_11
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11");
static_assert(sizeof(BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11");
static_assert(offsetof(BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_L1_K2Node_InputActionEvent_11::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RLEFT_K2Node_InputActionEvent_12
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_12::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RLEFT_K2Node_InputActionEvent_13
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RLEFT_K2Node_InputActionEvent_13::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_L2_K2Node_InputActionEvent_14
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14");
static_assert(sizeof(BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14");
static_assert(offsetof(BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_14::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_L2_K2Node_InputActionEvent_15
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15");
static_assert(sizeof(BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15");
static_assert(offsetof(BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_L2_K2Node_InputActionEvent_15::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_L3_K2Node_InputActionEvent_16
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16");
static_assert(sizeof(BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16");
static_assert(offsetof(BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_16::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_L3_K2Node_InputActionEvent_17
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17");
static_assert(sizeof(BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17");
static_assert(offsetof(BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_L3_K2Node_InputActionEvent_17::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RRIGHT_K2Node_InputActionEvent_18
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_18::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_RRIGHT_K2Node_InputActionEvent_19
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19");
static_assert(sizeof(BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19");
static_assert(offsetof(BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_RRIGHT_K2Node_InputActionEvent_19::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Select_K2Node_InputActionEvent_20
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_20::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Select_K2Node_InputActionEvent_21
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Select_K2Node_InputActionEvent_21::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Pause_K2Node_InputActionEvent_22
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_22::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Pause_K2Node_InputActionEvent_23
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Pause_K2Node_InputActionEvent_23::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_AnyKey_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0");
static_assert(sizeof(BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0");
static_assert(offsetof(BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_AnyKey_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1");
static_assert(sizeof(BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1");
static_assert(offsetof(BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LUP_K2Node_InputActionEvent_24
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_24::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LUP_K2Node_InputActionEvent_25
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LUP_K2Node_InputActionEvent_25::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Decide_K2Node_InputActionEvent_26
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_26::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Decide_K2Node_InputActionEvent_27
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Decide_K2Node_InputActionEvent_27::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LDOWN_K2Node_InputActionEvent_28
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_28::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LDOWN_K2Node_InputActionEvent_29
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LDOWN_K2Node_InputActionEvent_29::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LLEFT_K2Node_InputActionEvent_30
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_30::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LLEFT_K2Node_InputActionEvent_31
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LLEFT_K2Node_InputActionEvent_31::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Cancel_K2Node_InputActionEvent_32
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_32::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Cancel_K2Node_InputActionEvent_33
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Cancel_K2Node_InputActionEvent_33::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LRIGHT_K2Node_InputActionEvent_34
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_34::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_LRIGHT_K2Node_InputActionEvent_35
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35");
static_assert(sizeof(BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35");
static_assert(offsetof(BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_LRIGHT_K2Node_InputActionEvent_35::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Mouse_K2Node_InputActionEvent_36
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_36::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.InpActEvt_Mouse_K2Node_InputActionEvent_37
// 0x0018 (0x0018 - 0x0000)
struct BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37) == 0x000008, "Wrong alignment on BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37");
static_assert(sizeof(BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37) == 0x000018, "Wrong size on BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37");
static_assert(offsetof(BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37, Key) == 0x000000, "Member 'BP_InputManager_C_InpActEvt_Mouse_K2Node_InputActionEvent_37::Key' has a wrong offset!");

// Function BP_InputManager.BP_InputManager_C.DebugDrawInput
// 0x09C8 (0x09C8 - 0x0000)
struct BP_InputManager_C_DebugDrawInput final
{
public:
	class FText                                   Temp_text_Variable;                                // 0x0000(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_1;                              // 0x0018(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A80[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A81[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0070(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_5;                              // 0x0088(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_2;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A82[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_6;                              // 0x00A8(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_7;                              // 0x00C0(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_3;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A83[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_8;                              // 0x00E0(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_9;                              // 0x00F8(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_4;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A84[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_10;                             // 0x0118(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_11;                             // 0x0130(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_5;                              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A85[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_12;                             // 0x0150(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_13;                             // 0x0168(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_6;                              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A86[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_14;                             // 0x0188(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_15;                             // 0x01A0(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_7;                              // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A87[0x7];                                     // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_16;                             // 0x01C0(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_17;                             // 0x01D8(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_8;                              // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A88[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_18;                             // 0x01F8(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_19;                             // 0x0210(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_9;                              // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A89[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_20;                             // 0x0230(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_21;                             // 0x0248(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_10;                             // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8A[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_22;                             // 0x0268(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_23;                             // 0x0280(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_11;                             // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8B[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_24;                             // 0x02A0(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_25;                             // 0x02B8(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_12;                             // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8C[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_26;                             // 0x02D8(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_27;                             // 0x02F0(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_13;                             // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8D[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_28;                             // 0x0310(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_29;                             // 0x0328(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_14;                             // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8E[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_30;                             // 0x0348(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_31;                             // 0x0360(0x0018)(ConstParm)
	bool                                          Temp_bool_Variable_15;                             // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8F[0x7];                                     // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InputManager_C*                     CallFunc_GetInputManager_BP_InputManager;          // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetDebuggingManager_DebuggingManager;     // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          CallFunc_GetCurrentLayoutType_ReturnValue;         // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A90[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInterface>            K2Node_DynamicCast_AsBPDebugging_Manager_Interface; // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDebugDispControllerInput_bRet;         // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetOnPress_ReturnValue;                   // 0x03AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetOnPress_ReturnValue_1;                 // 0x03AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A91[0x1];                                     // 0x03AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x03B0(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x03C8(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_1;                           // 0x0408(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_2;                 // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A92[0x7];                                     // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0428(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_3;                 // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A93[0x7];                                     // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x0470(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0488(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_3;                           // 0x04C8(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_4;                 // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A94[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x04E8(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_5;                 // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A95[0x7];                                     // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_4;                           // 0x0530(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0548(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_5;                           // 0x0588(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_6;                 // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A96[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x05A8(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_7;                 // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A97[0x7];                                     // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_6;                           // 0x05F0(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0608(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_7;                           // 0x0648(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_8;                 // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A98[0x7];                                     // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0668(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_9;                 // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A99[0x7];                                     // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_8;                           // 0x06B0(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x06C8(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_9;                           // 0x0708(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_10;                // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9A[0x7];                                     // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0728(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_11;                // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9B[0x7];                                     // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_10;                          // 0x0770(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x0788(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_11;                          // 0x07C8(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_12;                // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9C[0x7];                                     // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_11;           // 0x07E8(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_13;                // 0x0828(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9D[0x7];                                     // 0x0829(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_12;                          // 0x0830(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_12;           // 0x0848(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_13;                          // 0x0888(0x0018)(ConstParm)
	bool                                          CallFunc_GetOnPress_ReturnValue_14;                // 0x08A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9E[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_13;           // 0x08A8(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetOnPress_ReturnValue_15;                // 0x08E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9F[0x7];                                     // 0x08E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_14;                          // 0x08F0(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_14;           // 0x0908(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_15;                          // 0x0948(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_15;           // 0x0960(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x09A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x09B0(0x0018)()
};
static_assert(alignof(BP_InputManager_C_DebugDrawInput) == 0x000008, "Wrong alignment on BP_InputManager_C_DebugDrawInput");
static_assert(sizeof(BP_InputManager_C_DebugDrawInput) == 0x0009C8, "Wrong size on BP_InputManager_C_DebugDrawInput");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable) == 0x000000, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_1) == 0x000018, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable) == 0x000030, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_2) == 0x000038, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_3) == 0x000050, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_1) == 0x000068, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_4) == 0x000070, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_5) == 0x000088, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_2) == 0x0000A0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_6) == 0x0000A8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_7) == 0x0000C0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_3) == 0x0000D8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_8) == 0x0000E0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_9) == 0x0000F8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_4) == 0x000110, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_10) == 0x000118, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_11) == 0x000130, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_5) == 0x000148, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_12) == 0x000150, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_13) == 0x000168, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_6) == 0x000180, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_14) == 0x000188, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_15) == 0x0001A0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_7) == 0x0001B8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_16) == 0x0001C0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_17) == 0x0001D8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_8) == 0x0001F0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_18) == 0x0001F8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_19) == 0x000210, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_9) == 0x000228, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_20) == 0x000230, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_21) == 0x000248, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_10) == 0x000260, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_22) == 0x000268, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_23) == 0x000280, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_11) == 0x000298, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_24) == 0x0002A0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_25) == 0x0002B8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_12) == 0x0002D0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_26) == 0x0002D8, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_27) == 0x0002F0, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_13) == 0x000308, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_28) == 0x000310, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_29) == 0x000328, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_14) == 0x000340, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_30) == 0x000348, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_text_Variable_31) == 0x000360, "Member 'BP_InputManager_C_DebugDrawInput::Temp_text_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, Temp_bool_Variable_15) == 0x000378, "Member 'BP_InputManager_C_DebugDrawInput::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetInputManager_BP_InputManager) == 0x000380, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetInputManager_BP_InputManager' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetDebuggingManager_DebuggingManager) == 0x000388, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetDebuggingManager_DebuggingManager' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetCurrentLayoutType_ReturnValue) == 0x000390, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetCurrentLayoutType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_DynamicCast_AsBPDebugging_Manager_Interface) == 0x000398, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_DynamicCast_AsBPDebugging_Manager_Interface' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_DynamicCast_bSuccess) == 0x0003A8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_SwitchEnum_CmpSuccess) == 0x0003A9, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetDebugDispControllerInput_bRet) == 0x0003AA, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetDebugDispControllerInput_bRet' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_IsValid_ReturnValue) == 0x0003AB, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_IsValid_ReturnValue_1) == 0x0003AC, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue) == 0x0003AD, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_1) == 0x0003AE, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default) == 0x0003B0, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData) == 0x0003C8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_1) == 0x000408, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_2) == 0x000420, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_1) == 0x000428, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_3) == 0x000468, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_2) == 0x000470, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_2) == 0x000488, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_3) == 0x0004C8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_4) == 0x0004E0, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_3) == 0x0004E8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_5) == 0x000528, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_4) == 0x000530, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_4) == 0x000548, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_5) == 0x000588, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_6) == 0x0005A0, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_5) == 0x0005A8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_7) == 0x0005E8, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_6) == 0x0005F0, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_6) == 0x000608, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_7) == 0x000648, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_8) == 0x000660, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_7) == 0x000668, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_9) == 0x0006A8, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_8) == 0x0006B0, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_8) == 0x0006C8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_9) == 0x000708, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_10) == 0x000720, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_9) == 0x000728, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_11) == 0x000768, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_10) == 0x000770, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_10) == 0x000788, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_11) == 0x0007C8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_12) == 0x0007E0, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_11) == 0x0007E8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_11' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_13) == 0x000828, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_12) == 0x000830, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_12) == 0x000848, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_12' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_13) == 0x000888, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_14) == 0x0008A0, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_13) == 0x0008A8, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_13' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_GetOnPress_ReturnValue_15) == 0x0008E8, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_GetOnPress_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_14) == 0x0008F0, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_14) == 0x000908, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_14' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_Select_Default_15) == 0x000948, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_Select_Default_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeStruct_FormatArgumentData_15) == 0x000960, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeStruct_FormatArgumentData_15' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, K2Node_MakeArray_Array) == 0x0009A0, "Member 'BP_InputManager_C_DebugDrawInput::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_InputManager_C_DebugDrawInput, CallFunc_Format_ReturnValue) == 0x0009B0, "Member 'BP_InputManager_C_DebugDrawInput::CallFunc_Format_ReturnValue' has a wrong offset!");

}

