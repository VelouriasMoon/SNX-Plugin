#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapImageTracker

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class MagicLeapImageTracker.MagicLeapImageTrackerComponent
// 0x0080 (0x0280 - 0x0200)
class UMagicLeapImageTrackerComponent final : public USceneComponent
{
public:
	class UTexture2D*                             TargetImageTexture;                                // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_MagicLeapImageTrackerComponent;               // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongerDimension;                                   // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStationary;                                     // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUnreliablePose;                                // 0x021D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AD[0x2];                                     // 0x021E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetImageTargetSucceeded;                         // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSetImageTargetFailed;                            // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnImageTargetFound;                                // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnImageTargetLost;                                 // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnImageTargetUnreliableTracking;                   // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AE[0x10];                                    // 0x0270(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool RemoveTargetAsync();
	bool SetTargetAsync(class UTexture2D* ImageTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MagicLeapImageTrackerComponent">();
	}
	static class UMagicLeapImageTrackerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMagicLeapImageTrackerComponent>();
	}
};
static_assert(alignof(UMagicLeapImageTrackerComponent) == 0x000010, "Wrong alignment on UMagicLeapImageTrackerComponent");
static_assert(sizeof(UMagicLeapImageTrackerComponent) == 0x000280, "Wrong size on UMagicLeapImageTrackerComponent");
static_assert(offsetof(UMagicLeapImageTrackerComponent, TargetImageTexture) == 0x000200, "Member 'UMagicLeapImageTrackerComponent::TargetImageTexture' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, Name_MagicLeapImageTrackerComponent) == 0x000208, "Member 'UMagicLeapImageTrackerComponent::Name_MagicLeapImageTrackerComponent' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, LongerDimension) == 0x000218, "Member 'UMagicLeapImageTrackerComponent::LongerDimension' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, bIsStationary) == 0x00021C, "Member 'UMagicLeapImageTrackerComponent::bIsStationary' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, bUseUnreliablePose) == 0x00021D, "Member 'UMagicLeapImageTrackerComponent::bUseUnreliablePose' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded) == 0x000220, "Member 'UMagicLeapImageTrackerComponent::OnSetImageTargetSucceeded' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, OnSetImageTargetFailed) == 0x000230, "Member 'UMagicLeapImageTrackerComponent::OnSetImageTargetFailed' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, OnImageTargetFound) == 0x000240, "Member 'UMagicLeapImageTrackerComponent::OnImageTargetFound' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, OnImageTargetLost) == 0x000250, "Member 'UMagicLeapImageTrackerComponent::OnImageTargetLost' has a wrong offset!");
static_assert(offsetof(UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking) == 0x000260, "Member 'UMagicLeapImageTrackerComponent::OnImageTargetUnreliableTracking' has a wrong offset!");

// Class MagicLeapImageTracker.MagicLeapImageTrackerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMagicLeapImageTrackerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EnableImageTracking(bool bEnable);
	static int32 GetMaxSimultaneousTargets();
	static bool IsImageTrackingEnabled();
	static void SetMaxSimultaneousTargets(int32 MaxSimultaneousTargets);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MagicLeapImageTrackerFunctionLibrary">();
	}
	static class UMagicLeapImageTrackerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMagicLeapImageTrackerFunctionLibrary>();
	}
};
static_assert(alignof(UMagicLeapImageTrackerFunctionLibrary) == 0x000008, "Wrong alignment on UMagicLeapImageTrackerFunctionLibrary");
static_assert(sizeof(UMagicLeapImageTrackerFunctionLibrary) == 0x000028, "Wrong size on UMagicLeapImageTrackerFunctionLibrary");

}

