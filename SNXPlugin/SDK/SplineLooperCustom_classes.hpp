#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineLooperCustom

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ClassOrderOptions_structs.hpp"
#include "ScaleOptions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SplineLooperCustom.SplineLooperCustom_C
// 0x0160 (0x0400 - 0x02A0)
class ASplineLooperCustom_C final : public ASplineLooperBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       SpawnSpline;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         SpawnActorClasses;                                 // 0x02B8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	EClassOrderOptions                            SpawnClassOrder;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52B3[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnLimit;                                        // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             AdditionalTransform;                               // 0x02D0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Spacing;                                           // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectionRotationSpeed;                            // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScaleOptions                                 ScaleOption;                                       // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CloseLoop;                                         // 0x030D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RotateAlongSpline;                                 // 0x030E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Flip_to_speed__direction;                          // 0x030F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Floor;                                             // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52B4[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Preview_Mesh;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewAllowUse;                                   // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52B5[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PreviewColor;                                      // 0x0324(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52B6[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_52B7[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0350(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InitialSpeed;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceAlongSpline;                               // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewDistanceAlongSpline;                            // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52B8[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SplineLocations;                                   // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SplinePoint;                                       // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArrayIndex;                                        // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnOrderIndex;                                   // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52B9[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SplineActor;                                       // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          PreviewMeshInstance;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         SplineActors;                                      // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ForwardMovement;                                   // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52BA[0x7];                                     // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      FloorTraceTypes;                                   // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PreviewMaterial;                                   // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Allow_Mesh;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RenderLayer;                                       // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SplineLooperCustom(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetActorsVisible(bool Visible);
	void SetRenderLayer(uint8 Layer);
	void PrivateSetupActorLayer(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SplineLooperCustom_C">();
	}
	static class ASplineLooperCustom_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineLooperCustom_C>();
	}
};
static_assert(alignof(ASplineLooperCustom_C) == 0x000010, "Wrong alignment on ASplineLooperCustom_C");
static_assert(sizeof(ASplineLooperCustom_C) == 0x000400, "Wrong size on ASplineLooperCustom_C");
static_assert(offsetof(ASplineLooperCustom_C, UberGraphFrame) == 0x0002A0, "Member 'ASplineLooperCustom_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SpawnSpline) == 0x0002A8, "Member 'ASplineLooperCustom_C::SpawnSpline' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, DefaultSceneRoot) == 0x0002B0, "Member 'ASplineLooperCustom_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SpawnActorClasses) == 0x0002B8, "Member 'ASplineLooperCustom_C::SpawnActorClasses' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SpawnClassOrder) == 0x0002C8, "Member 'ASplineLooperCustom_C::SpawnClassOrder' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SpawnLimit) == 0x0002CC, "Member 'ASplineLooperCustom_C::SpawnLimit' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, AdditionalTransform) == 0x0002D0, "Member 'ASplineLooperCustom_C::AdditionalTransform' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Spacing) == 0x000300, "Member 'ASplineLooperCustom_C::Spacing' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Speed) == 0x000304, "Member 'ASplineLooperCustom_C::Speed' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, DirectionRotationSpeed) == 0x000308, "Member 'ASplineLooperCustom_C::DirectionRotationSpeed' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, ScaleOption) == 0x00030C, "Member 'ASplineLooperCustom_C::ScaleOption' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, CloseLoop) == 0x00030D, "Member 'ASplineLooperCustom_C::CloseLoop' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, RotateAlongSpline) == 0x00030E, "Member 'ASplineLooperCustom_C::RotateAlongSpline' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Flip_to_speed__direction) == 0x00030F, "Member 'ASplineLooperCustom_C::Flip_to_speed__direction' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Floor) == 0x000310, "Member 'ASplineLooperCustom_C::Floor' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Preview_Mesh) == 0x000318, "Member 'ASplineLooperCustom_C::Preview_Mesh' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, PreviewAllowUse) == 0x000320, "Member 'ASplineLooperCustom_C::PreviewAllowUse' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, PreviewColor) == 0x000324, "Member 'ASplineLooperCustom_C::PreviewColor' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Transforms) == 0x000338, "Member 'ASplineLooperCustom_C::Transforms' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Transform) == 0x000350, "Member 'ASplineLooperCustom_C::Transform' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, InitialSpeed) == 0x000380, "Member 'ASplineLooperCustom_C::InitialSpeed' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, DistanceAlongSpline) == 0x000384, "Member 'ASplineLooperCustom_C::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, NewDistanceAlongSpline) == 0x000388, "Member 'ASplineLooperCustom_C::NewDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SplineLocations) == 0x000390, "Member 'ASplineLooperCustom_C::SplineLocations' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SplinePoint) == 0x0003A0, "Member 'ASplineLooperCustom_C::SplinePoint' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, ArrayIndex) == 0x0003A4, "Member 'ASplineLooperCustom_C::ArrayIndex' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SpawnOrderIndex) == 0x0003A8, "Member 'ASplineLooperCustom_C::SpawnOrderIndex' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SplineActor) == 0x0003B0, "Member 'ASplineLooperCustom_C::SplineActor' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, PreviewMeshInstance) == 0x0003B8, "Member 'ASplineLooperCustom_C::PreviewMeshInstance' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, SplineActors) == 0x0003C0, "Member 'ASplineLooperCustom_C::SplineActors' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, ForwardMovement) == 0x0003D0, "Member 'ASplineLooperCustom_C::ForwardMovement' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, FloorTraceTypes) == 0x0003D8, "Member 'ASplineLooperCustom_C::FloorTraceTypes' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, PreviewMaterial) == 0x0003E8, "Member 'ASplineLooperCustom_C::PreviewMaterial' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, Allow_Mesh) == 0x0003F0, "Member 'ASplineLooperCustom_C::Allow_Mesh' has a wrong offset!");
static_assert(offsetof(ASplineLooperCustom_C, RenderLayer) == 0x0003F8, "Member 'ASplineLooperCustom_C::RenderLayer' has a wrong offset!");

}

