#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StageParameterSettingVolumeManager

#include "Basic.hpp"

#include "BP_StageParameterSettingVolumeManager_classes.hpp"
#include "BP_StageParameterSettingVolumeManager_parameters.hpp"


namespace SDK
{

// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.ExecuteUbergraph_BP_StageParameterSettingVolumeManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StageParameterSettingVolumeManager_C::ExecuteUbergraph_BP_StageParameterSettingVolumeManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "ExecuteUbergraph_BP_StageParameterSettingVolumeManager");

	Params::BP_StageParameterSettingVolumeManager_C_ExecuteUbergraph_BP_StageParameterSettingVolumeManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StageParameterSettingVolumeManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "ReceiveTick");

	Params::BP_StageParameterSettingVolumeManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.ForceUpdateDelayed
// (BlueprintCallable, BlueprintEvent)

void ABP_StageParameterSettingVolumeManager_C::ForceUpdateDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "ForceUpdateDelayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.SetupActorInternal
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ParamScalarNames                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           ParamScalars                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     ParamVectorNames                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FLinearColor>             ParamVectors                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_StageParameterSettingVolumeManager_C::SetupActorInternal(const class AActor* Actor, const struct FVector& Location, const TArray<class FName>& ParamScalarNames, const TArray<float>& ParamScalars, const TArray<class FName>& ParamVectorNames, const TArray<struct FLinearColor>& ParamVectors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "SetupActorInternal");

	Params::BP_StageParameterSettingVolumeManager_C_SetupActorInternal Parms{};

	Parms.Actor = Actor;
	Parms.Location = std::move(Location);
	Parms.ParamScalarNames = std::move(ParamScalarNames);
	Parms.ParamScalars = std::move(ParamScalars);
	Parms.ParamVectorNames = std::move(ParamVectorNames);
	Parms.ParamVectors = std::move(ParamVectors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.ForceUpdate
// (BlueprintCallable, BlueprintEvent)

void ABP_StageParameterSettingVolumeManager_C::ForceUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "ForceUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.Private_SetupActorInternal
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ParamScalarNames                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           ParamScalars                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     ParamVectorNames                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FLinearColor>             ParamVectors                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_StageParameterSettingVolumeManager_C::Private_SetupActorInternal(class AActor* Actor, TArray<class FName>& ParamScalarNames, TArray<float>& ParamScalars, TArray<class FName>& ParamVectorNames, TArray<struct FLinearColor>& ParamVectors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "Private_SetupActorInternal");

	Params::BP_StageParameterSettingVolumeManager_C_Private_SetupActorInternal Parms{};

	Parms.Actor = Actor;
	Parms.ParamScalarNames = std::move(ParamScalarNames);
	Parms.ParamScalars = std::move(ParamScalars);
	Parms.ParamVectorNames = std::move(ParamVectorNames);
	Parms.ParamVectors = std::move(ParamVectors);

	UObject::ProcessEvent(Func, &Parms);

	ParamScalarNames = std::move(Parms.ParamScalarNames);
	ParamScalars = std::move(Parms.ParamScalars);
	ParamVectorNames = std::move(Parms.ParamVectorNames);
	ParamVectors = std::move(Parms.ParamVectors);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.PrivateUpdateSimulate
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StageParameterSettingVolumeManager_C::PrivateUpdateSimulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "PrivateUpdateSimulate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StageParameterSettingVolumeManager.BP_StageParameterSettingVolumeManager_C.DebugSetDisable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_StageParameterSettingVolumeManager_C::DebugSetDisable(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StageParameterSettingVolumeManager_C", "DebugSetDisable");

	Params::BP_StageParameterSettingVolumeManager_C_DebugSetDisable Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}

}

