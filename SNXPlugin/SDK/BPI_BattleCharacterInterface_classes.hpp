#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCharacterInterface

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BattleCharacterInterface_C final : public IInterface
{
public:
	void SetCharacterVisibility(bool bVisibility, bool* bDummy);
	void IsBadStausMetalMode();
	void SetCounterWait(bool Wait_on_in);
	void SetCounter();
	void IsCounterSuccess(bool* Success);
	void StartVisionFog(bool* Dummy);
	void GetActorStartPoint(struct FVector* StartLocation);
	void SetNotifyAttackData(const struct FFNotifyAttackData& Data, bool* Dummy);
	void GetLockOnTargetInterface(class AActor** TargetActor);
	void GetAccelerating(bool* Accelerating);
	void SetAccelerating(bool Accelerating, bool* Dammy);
	void MeshFitGround(float InterpSpeed, float AngleLimit, bool bEndFit, bool* bDummy);
	void GetMeshFitGroundCheckLocation(struct FVector* Location, float* CheckHeight);
	void CancelMeshFitGround(bool* bDummy);
	void StartSASChance(float Time, bool* Dammy);
	void EndSASChance(bool* Dammy);
	void SetHitStopInterface(EHCRestictedHitStopType HitStopType, bool bCritical, bool* bDummy);
	void UpdateCameraDither(float DeltaSeconds, bool UseDither, float* CameraDither);
	void SetCameraDither(float SetDitherValue, bool* Dummy);
	void SetUseCameraDither(bool bUse, bool* bDummy);
	void IsCounterWait(bool* bWait);
	void RequestDie(bool* bDummy);
	void EndVisionFog(bool* Dummy);
	void EnableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, float ReactionSRate, float ReactionLRate, float DownRate, float CrashRate, bool bAcceptAll, bool* Return);
	void DisableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, bool* Return);
	void SpawnSequencerEffectInterface(class FName ClaimantName, class UParticleSystem* Template, const struct FTransform& Transform, class FName AttachName, bool* Return);
	void EndSequencerEffectInterface(class FName ClaimantName, bool* Return);
	void UpdateSequencerEffectInterface(float DeltaSec, bool* Return);
	void IsInScreen(bool* InScreen);
	void Get_Event_Bind_Mesh_Component(TArray<class UStaticMeshComponent*>* MeshComponent);
	void AreaChangeFadeOut();
	void RegisterBrainFieldNormalTransform(const struct FTransform& InNormalTransform, bool* Return);
	void CheckNoDamagePopUpFromAttacker(bool* bNoPopUp);
	void GetGroupIDInterface(bool* bSuccess, int32* GroupID, int32* SubGroupID);
	void StopMovementImmediately(bool* bDummy);
	void GetPsychicObjectThrowParameter(bool* Apply, float* Directshot_throw_speed, float* Directshot_homing_speed, float* Combo_throw_speed, float* Combo_homing_speed, float* brainfield_throw_speed, float* brainfield_homing_speed, float* Intercept_throw_speed, float* Intercept_homing_speed);
	void GetCharacterSkillTableWithReplace(class UDataTable*& OrgTable, class FName SkillName, struct FHCSkillCommonInfo* SkillCommonInfo);
	void ReserveCrashVisionShockWave(float EffectDelayTime, bool* bDummy);
	void SetIgnoreVisionSimulatorScore(bool bIgnore, bool* bDummy);

	void IsForceCritical(bool* bResult) const;
	void GetTeam(ETeamKind* Team) const;
	void IsPlayer(bool* bPlayer) const;
	void IsEnemy(bool* bEnemy) const;
	void IsMetalMode(bool* bMetal) const;
	void GetWeakTargetPoint(const struct FVector& AttackerPos, struct FVector* Point) const;
	void GetTopTargetPoint(struct FVector* Point) const;
	void GetWeakUIPoint(int32 Param_Index, struct FVector* Point) const;
	void GetWeakTargetComponent(class USceneComponent** WeakComponent) const;
	void GetNotifyAttackData(struct FFNotifyAttackData* Data) const;
	void CanTakeBrainField(bool* CanTake) const;
	void IsHitWeak_ChangeDefaultEffect(bool* ChangeDefault) const;
	void IsEnableSlashEffect(struct FHCHitResult& HitResult, bool* bEnable) const;
	void IsBrainCrashAccessInterface(bool* bAccess) const;
	void GetAutoAimRate(float* Rate) const;
	void GetCharacterLV(int32* LV) const;
	void IsEnableReactionCoefficient(bool* bEnable, float* ReactionSRate, float* ReactionLRate, float* DownRate, float* CrashRate, bool* bAcceptAll) const;
	void IsAttackerMainPlayer(bool* bMainPlayer) const;
	void GetCharacterReplaceSkillTable(class UDataTable* Original, class UDataTable** SkillTable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BattleCharacterInterface_C">();
	}
	static class IBPI_BattleCharacterInterface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BattleCharacterInterface_C>();
	}
};
static_assert(alignof(IBPI_BattleCharacterInterface_C) == 0x000008, "Wrong alignment on IBPI_BattleCharacterInterface_C");
static_assert(sizeof(IBPI_BattleCharacterInterface_C) == 0x000028, "Wrong size on IBPI_BattleCharacterInterface_C");

}

