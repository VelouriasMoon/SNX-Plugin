#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponBase

#include "Basic.hpp"

#include "BP_WeaponBase_classes.hpp"
#include "BP_WeaponBase_parameters.hpp"


namespace SDK
{

// Function BP_WeaponBase.BP_WeaponBase_C.DispatchThrowHit__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::DispatchThrowHit__DelegateSignature(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "DispatchThrowHit__DelegateSignature");

	Params::BP_WeaponBase_C_DispatchThrowHit__DelegateSignature Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ExecuteUbergraph_BP_WeaponBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ExecuteUbergraph_BP_WeaponBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ExecuteUbergraph_BP_WeaponBase");

	Params::BP_WeaponBase_C_ExecuteUbergraph_BP_WeaponBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ReceiveTick");

	Params::BP_WeaponBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_WeaponBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponBase.BP_WeaponBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_WeaponBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponBase.BP_WeaponBase_C.TakeBackOwner
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::TakeBackOwner(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "TakeBackOwner");

	Params::BP_WeaponBase_C_TakeBackOwner Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ThrowToPoint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ThrowToPoint(float Speed, const struct FVector& TargetPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ThrowToPoint");

	Params::BP_WeaponBase_C_ThrowToPoint Parms{};

	Parms.Speed = Speed;
	Parms.TargetPoint = std::move(TargetPoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ThrowToTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckHeightOnGround                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ThrowToTarget(float Speed, class AActor* TargetActor, float CheckHeightOnGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ThrowToTarget");

	Params::BP_WeaponBase_C_ThrowToTarget Parms{};

	Parms.Speed = Speed;
	Parms.TargetActor = TargetActor;
	Parms.CheckHeightOnGround = CheckHeightOnGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ThrowUpdate
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ThrowUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ThrowUpdate");

	Params::BP_WeaponBase_C_ThrowUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ThrowStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponThrowType                        Param_ThrowType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckHeightOnGround                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ThrowStart(EWeaponThrowType Param_ThrowType, float CheckHeightOnGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ThrowStart");

	Params::BP_WeaponBase_C_ThrowStart Parms{};

	Parms.Param_ThrowType = Param_ThrowType;
	Parms.CheckHeightOnGround = CheckHeightOnGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.Attach
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::Attach(class ARSBattlePlayer_C* Param_Owner, class USceneComponent* Component, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "Attach");

	Params::BP_WeaponBase_C_Attach Parms{};

	Parms.Param_Owner = Param_Owner;
	Parms.Component = Component;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ThrowEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttach                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::ThrowEnd(bool bAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ThrowEnd");

	Params::BP_WeaponBase_C_ThrowEnd Parms{};

	Parms.bAttach = bAttach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.TakeBackUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::TakeBackUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "TakeBackUpdate");

	Params::BP_WeaponBase_C_TakeBackUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetBattleEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetBattleEffect(bool bON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetBattleEffect");

	Params::BP_WeaponBase_C_SetBattleEffect Parms{};

	Parms.bON = bON;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetWeaponVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetWeaponVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetWeaponVisibility");

	Params::BP_WeaponBase_C_SetWeaponVisibility Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.Initialize
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::Initialize(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "Initialize");

	Params::BP_WeaponBase_C_Initialize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetMaterialColor_PsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   G                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetMaterialColor_PsychicEmission(float R, float G, float B, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetMaterialColor_PsychicEmission");

	Params::BP_WeaponBase_C_SetMaterialColor_PsychicEmission Parms{};

	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetMaterialAlpha_PsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetMaterialAlpha_PsychicEmission(float Alpha, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetMaterialAlpha_PsychicEmission");

	Params::BP_WeaponBase_C_SetMaterialAlpha_PsychicEmission Parms{};

	Parms.Alpha = Alpha;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ResetMaterialColor_PsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ResetMaterialColor_PsychicEmission(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ResetMaterialColor_PsychicEmission");

	Params::BP_WeaponBase_C_ResetMaterialColor_PsychicEmission Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ResetMaterialAlpha_PsychicEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ResetMaterialAlpha_PsychicEmission(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ResetMaterialAlpha_PsychicEmission");

	Params::BP_WeaponBase_C_ResetMaterialAlpha_PsychicEmission Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetWeaponMaterialScalarParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bExtraMaterial                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetWeaponMaterialScalarParameter(class FName ParamName, float Value, bool bExtraMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetWeaponMaterialScalarParameter");

	Params::BP_WeaponBase_C_SetWeaponMaterialScalarParameter Parms{};

	Parms.ParamName = ParamName;
	Parms.Value = Value;
	Parms.bExtraMaterial = bExtraMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetLoopAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetLoopAnim(bool bBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetLoopAnim");

	Params::BP_WeaponBase_C_SetLoopAnim Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetTransAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetTransAnim(bool bBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetTransAnim");

	Params::BP_WeaponBase_C_SetTransAnim Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetBattleEmission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Force_in                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Flag_in                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Lerp_time_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetBattleEmission(bool Force_in, bool Flag_in, float Lerp_time_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetBattleEmission");

	Params::BP_WeaponBase_C_SetBattleEmission Parms{};

	Parms.Force_in = Force_in;
	Parms.Flag_in = Flag_in;
	Parms.Lerp_time_in = Lerp_time_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.UpdateBattleEmission
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeaponBase_C::UpdateBattleEmission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "UpdateBattleEmission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetWeaponMaterialScalarArrayParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bExtraMaterial                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetWeaponMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value, bool bExtraMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetWeaponMaterialScalarArrayParameter");

	Params::BP_WeaponBase_C_SetWeaponMaterialScalarArrayParameter Parms{};

	Parms.ParamName = std::move(ParamName);
	Parms.Value = std::move(Value);
	Parms.bExtraMaterial = bExtraMaterial;

	UObject::ProcessEvent(Func, &Parms);

	ParamName = std::move(Parms.ParamName);
	Value = std::move(Parms.Value);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetWeaponMaterialVectorParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bExtraMaterial                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetWeaponMaterialVectorParameter(class FName ParameterName, const struct FLinearColor& Color, bool bExtraMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetWeaponMaterialVectorParameter");

	Params::BP_WeaponBase_C_SetWeaponMaterialVectorParameter Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Color = std::move(Color);
	Parms.bExtraMaterial = bExtraMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetWeaponMaterialVectorArrayParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FLinearColor>             Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bExtraMaterial                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::SetWeaponMaterialVectorArrayParameter(TArray<class FName>& ParameterName, TArray<struct FLinearColor>& Color, bool bExtraMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetWeaponMaterialVectorArrayParameter");

	Params::BP_WeaponBase_C_SetWeaponMaterialVectorArrayParameter Parms{};

	Parms.ParameterName = std::move(ParameterName);
	Parms.Color = std::move(Color);
	Parms.bExtraMaterial = bExtraMaterial;

	UObject::ProcessEvent(Func, &Parms);

	ParameterName = std::move(Parms.ParameterName);
	Color = std::move(Parms.Color);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetMaterial_Emissive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Emissive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetMaterial_Emissive(float Emissive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetMaterial_Emissive");

	Params::BP_WeaponBase_C_SetMaterial_Emissive Parms{};

	Parms.Emissive = Emissive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetMaterial_EmissiveColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetMaterial_EmissiveColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetMaterial_EmissiveColor");

	Params::BP_WeaponBase_C_SetMaterial_EmissiveColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetMaterial_EmissiveColorType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetMaterial_EmissiveColorType(E_SASKind SasKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetMaterial_EmissiveColorType");

	Params::BP_WeaponBase_C_SetMaterial_EmissiveColorType Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ResetMaterial_EmissiveColorType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::ResetMaterial_EmissiveColorType(E_SASKind SasKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ResetMaterial_EmissiveColorType");

	Params::BP_WeaponBase_C_ResetMaterial_EmissiveColorType Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetWeaponTickEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::SetWeaponTickEnabled(bool bEnabled, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetWeaponTickEnabled");

	Params::BP_WeaponBase_C_SetWeaponTickEnabled Parms{};

	Parms.bEnabled = bEnabled;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.GetExtraMaterialInstanceArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> MaterialInstance                                       (Parm, OutParm, HasGetValueTypeHash)

void ABP_WeaponBase_C::GetExtraMaterialInstanceArray(TArray<class UMaterialInstanceDynamic*>* MaterialInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "GetExtraMaterialInstanceArray");

	Params::BP_WeaponBase_C_GetExtraMaterialInstanceArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaterialInstance != nullptr)
		*MaterialInstance = std::move(Parms.MaterialInstance);
}


// Function BP_WeaponBase.BP_WeaponBase_C.GetExtraMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USkeletalMeshComponent*>   ExtraMesh                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_WeaponBase_C::GetExtraMesh(TArray<class USkeletalMeshComponent*>* ExtraMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "GetExtraMesh");

	Params::BP_WeaponBase_C_GetExtraMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraMesh != nullptr)
		*ExtraMesh = std::move(Parms.ExtraMesh);
}


// Function BP_WeaponBase.BP_WeaponBase_C.ResetMaterialInstanceArray
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeaponBase_C::ResetMaterialInstanceArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "ResetMaterialInstanceArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponBase.BP_WeaponBase_C.LoadMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InWeaponID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ResetMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::LoadMesh(int32 InWeaponID, bool ResetMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "LoadMesh");

	Params::BP_WeaponBase_C_LoadMesh Parms{};

	Parms.InWeaponID = InWeaponID;
	Parms.ResetMaterial = ResetMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponBase.BP_WeaponBase_C.SetHologramFlag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeaponBase_C::SetHologramFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "SetHologramFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponBase.BP_WeaponBase_C.DoLoadMeshAfter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisableStringWeapon                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::DoLoadMeshAfter(bool bDisableStringWeapon, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "DoLoadMeshAfter");

	Params::BP_WeaponBase_C_DoLoadMeshAfter Parms{};

	Parms.bDisableStringWeapon = bDisableStringWeapon;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.DoAttachAfter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisableStringWeapon                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::DoAttachAfter(bool bDisableStringWeapon, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "DoAttachAfter");

	Params::BP_WeaponBase_C_DoAttachAfter Parms{};

	Parms.bDisableStringWeapon = bDisableStringWeapon;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_WeaponBase.BP_WeaponBase_C.GetProxyRequestedPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::GetProxyRequestedPlayer(class ARSBattlePlayer_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "GetProxyRequestedPlayer");

	Params::BP_WeaponBase_C_GetProxyRequestedPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BP_WeaponBase.BP_WeaponBase_C.GetProxyMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::GetProxyMesh(class UMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "GetProxyMesh");

	Params::BP_WeaponBase_C_GetProxyMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function BP_WeaponBase.BP_WeaponBase_C.CheckExecuteAnimNotifyCharacterKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharaExecuteNotifyKind                 Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bExecute                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::CheckExecuteAnimNotifyCharacterKind(ECharaExecuteNotifyKind Kind, bool* bExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "CheckExecuteAnimNotifyCharacterKind");

	Params::BP_WeaponBase_C_CheckExecuteAnimNotifyCharacterKind Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bExecute != nullptr)
		*bExecute = Parms.bExecute;
}


// Function BP_WeaponBase.BP_WeaponBase_C.GetThrowPoint
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponBase_C::GetThrowPoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "GetThrowPoint");

	Params::BP_WeaponBase_C_GetThrowPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function BP_WeaponBase.BP_WeaponBase_C.GetAttachTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::GetAttachTransform(struct FTransform* Transform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "GetAttachTransform");

	Params::BP_WeaponBase_C_GetAttachTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_WeaponBase.BP_WeaponBase_C.IsThrowHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeaponBase_C::IsThrowHit(bool* bHit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponBase_C", "IsThrowHit");

	Params::BP_WeaponBase_C_IsThrowHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;
}

}

