#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_WeaponCh0200

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EPlayerComboPattern_structs.hpp"


namespace SDK::Params
{

// Function BPI_WeaponCh0200.BPI_WeaponCh0200_C.BeginRangeParticle
// 0x0001 (0x0001 - 0x0000)
struct BPI_WeaponCh0200_C_BeginRangeParticle final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_WeaponCh0200_C_BeginRangeParticle) == 0x000001, "Wrong alignment on BPI_WeaponCh0200_C_BeginRangeParticle");
static_assert(sizeof(BPI_WeaponCh0200_C_BeginRangeParticle) == 0x000001, "Wrong size on BPI_WeaponCh0200_C_BeginRangeParticle");
static_assert(offsetof(BPI_WeaponCh0200_C_BeginRangeParticle, bDummy) == 0x000000, "Member 'BPI_WeaponCh0200_C_BeginRangeParticle::bDummy' has a wrong offset!");

// Function BPI_WeaponCh0200.BPI_WeaponCh0200_C.EndRangeParticle
// 0x0001 (0x0001 - 0x0000)
struct BPI_WeaponCh0200_C_EndRangeParticle final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_WeaponCh0200_C_EndRangeParticle) == 0x000001, "Wrong alignment on BPI_WeaponCh0200_C_EndRangeParticle");
static_assert(sizeof(BPI_WeaponCh0200_C_EndRangeParticle) == 0x000001, "Wrong size on BPI_WeaponCh0200_C_EndRangeParticle");
static_assert(offsetof(BPI_WeaponCh0200_C_EndRangeParticle, bDummy) == 0x000000, "Member 'BPI_WeaponCh0200_C_EndRangeParticle::bDummy' has a wrong offset!");

// Function BPI_WeaponCh0200.BPI_WeaponCh0200_C.SetRangeParticleType
// 0x0002 (0x0002 - 0x0000)
struct BPI_WeaponCh0200_C_SetRangeParticleType final
{
public:
	EPlayerComboPattern                           ComboPattern;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_WeaponCh0200_C_SetRangeParticleType) == 0x000001, "Wrong alignment on BPI_WeaponCh0200_C_SetRangeParticleType");
static_assert(sizeof(BPI_WeaponCh0200_C_SetRangeParticleType) == 0x000002, "Wrong size on BPI_WeaponCh0200_C_SetRangeParticleType");
static_assert(offsetof(BPI_WeaponCh0200_C_SetRangeParticleType, ComboPattern) == 0x000000, "Member 'BPI_WeaponCh0200_C_SetRangeParticleType::ComboPattern' has a wrong offset!");
static_assert(offsetof(BPI_WeaponCh0200_C_SetRangeParticleType, bDummy) == 0x000001, "Member 'BPI_WeaponCh0200_C_SetRangeParticleType::bDummy' has a wrong offset!");

// Function BPI_WeaponCh0200.BPI_WeaponCh0200_C.SetTargetInRange
// 0x0002 (0x0002 - 0x0000)
struct BPI_WeaponCh0200_C_SetTargetInRange final
{
public:
	bool                                          bInRange;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_WeaponCh0200_C_SetTargetInRange) == 0x000001, "Wrong alignment on BPI_WeaponCh0200_C_SetTargetInRange");
static_assert(sizeof(BPI_WeaponCh0200_C_SetTargetInRange) == 0x000002, "Wrong size on BPI_WeaponCh0200_C_SetTargetInRange");
static_assert(offsetof(BPI_WeaponCh0200_C_SetTargetInRange, bInRange) == 0x000000, "Member 'BPI_WeaponCh0200_C_SetTargetInRange::bInRange' has a wrong offset!");
static_assert(offsetof(BPI_WeaponCh0200_C_SetTargetInRange, bDummy) == 0x000001, "Member 'BPI_WeaponCh0200_C_SetTargetInRange::bDummy' has a wrong offset!");

// Function BPI_WeaponCh0200.BPI_WeaponCh0200_C.SetWeaponScaleWp0200
// 0x0010 (0x0010 - 0x0000)
struct BPI_WeaponCh0200_C_SetWeaponScaleWp0200 final
{
public:
	struct FVector                                InScale;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_WeaponCh0200_C_SetWeaponScaleWp0200) == 0x000004, "Wrong alignment on BPI_WeaponCh0200_C_SetWeaponScaleWp0200");
static_assert(sizeof(BPI_WeaponCh0200_C_SetWeaponScaleWp0200) == 0x000010, "Wrong size on BPI_WeaponCh0200_C_SetWeaponScaleWp0200");
static_assert(offsetof(BPI_WeaponCh0200_C_SetWeaponScaleWp0200, InScale) == 0x000000, "Member 'BPI_WeaponCh0200_C_SetWeaponScaleWp0200::InScale' has a wrong offset!");
static_assert(offsetof(BPI_WeaponCh0200_C_SetWeaponScaleWp0200, bDummy) == 0x00000C, "Member 'BPI_WeaponCh0200_C_SetWeaponScaleWp0200::bDummy' has a wrong offset!");

}

