#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollisionHitSoundComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.ExecuteUbergraph_BP_CollisionHitSoundComponent
// 0x0028 (0x0028 - 0x0000)
struct BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_Sound_Manager;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent) == 0x000028, "Wrong size on BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent, EntryPoint) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent, CallFunc_GetSoundManager_Sound_Manager) == 0x000008, "Member 'BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent::CallFunc_GetSoundManager_Sound_Manager' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CollisionHitSoundComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CollisionHitSoundComponent_C_ReceiveTick");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_CollisionHitSoundComponent_C_ReceiveTick");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionHitSound
// 0x0188 (0x0188 - 0x0000)
struct BP_CollisionHitSoundComponent_C_CollisionHitSound final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impulse;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0014(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsHitSound;                                        // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsHitSound;                                       // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469C[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          LPlaySound;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOwnerVelocity;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsFound;                                          // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469D[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469E[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetOwnerMaterials_OwnerMaterials;         // 0x00B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469F[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A0[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A1[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A2[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A3[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A4[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_Array_Get_Item;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRSCollisionSound                      CallFunc_GetCollisionSound_CollisionSound;         // 0x0120(0x0028)()
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x014C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A5[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A6[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x015C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A7[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A8[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_CollisionHitSound) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_CollisionHitSound");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_CollisionHitSound) == 0x000188, "Wrong size on BP_CollisionHitSoundComponent_C_CollisionHitSound");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, OtherActor) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Impulse) == 0x000008, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Impulse' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, HitResult) == 0x000014, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::HitResult' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, IsHitSound) == 0x00009C, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::IsHitSound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, LIsHitSound) == 0x00009D, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::LIsHitSound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, LPlaySound) == 0x0000A0, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::LPlaySound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, LOwnerVelocity) == 0x0000A8, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::LOwnerVelocity' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, LIsFound) == 0x0000AC, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::LIsFound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_int_Array_Index_Variable) == 0x0000B0, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetOwnerMaterials_OwnerMaterials) == 0x0000B8, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetOwnerMaterials_OwnerMaterials' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_bool_True_if_break_was_hit_Variable) == 0x0000C8, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Array_Length_ReturnValue) == 0x0000CC, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Not_PreBool_ReturnValue) == 0x0000D0, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_int_Loop_Counter_Variable) == 0x0000D4, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Add_IntInt_ReturnValue) == 0x0000D8, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetOwner_ReturnValue) == 0x0000E0, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000E8, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetVelocity_ReturnValue) == 0x0000EC, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_VSize_ReturnValue) == 0x0000F8, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0000FC, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000100, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000104, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000108, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00010C, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_RandomFloatInRange_ReturnValue) == 0x000110, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_int_Array_Index_Variable_1) == 0x000114, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Array_Get_Item) == 0x000118, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetCollisionSound_CollisionSound) == 0x000120, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetCollisionSound_CollisionSound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x000148, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_bool_Variable) == 0x00014C, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_int_Loop_Counter_Variable_1) == 0x000150, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Less_IntInt_ReturnValue) == 0x000154, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Add_IntInt_ReturnValue_1) == 0x000158, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, Temp_bool_Variable_1) == 0x00015C, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_GetOwner_ReturnValue_1) == 0x000160, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000168, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Array_Get_Item_1) == 0x000178, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Array_Length_ReturnValue_1) == 0x000180, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000184, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_Less_IntInt_ReturnValue_1) == 0x000185, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionHitSound, CallFunc_BooleanAND_ReturnValue) == 0x000186, "Member 'BP_CollisionHitSoundComponent_C_CollisionHitSound::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionRollSound
// 0x0198 (0x0198 - 0x0000)
struct BP_CollisionHitSoundComponent_C_CollisionRollSound final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impulse;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0014(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsRolling;                                         // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsSoundPlay;                                      // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A9[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          RollSound;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMatchAxis;                                       // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	bool                                          LIsFound;                                          // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46AA[0x5];                                     // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetOwnerMaterials_OwnerMaterials;         // 0x00B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46AB[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46AC[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_Array_Get_Item;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46AD[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRSCollisionSound                      CallFunc_GetCollisionSound_CollisionSound;         // 0x00E0(0x0028)()
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46AE[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46AF[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B0[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_2;        // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B1[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_3;        // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B2[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_CollisionRollSound) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_CollisionRollSound");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_CollisionRollSound) == 0x000198, "Wrong size on BP_CollisionHitSoundComponent_C_CollisionRollSound");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, OtherActor) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, Impulse) == 0x000008, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::Impulse' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, HitResult) == 0x000014, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::HitResult' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, IsRolling) == 0x00009C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::IsRolling' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, LIsSoundPlay) == 0x00009D, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::LIsSoundPlay' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, RollSound) == 0x0000A0, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::RollSound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, IsMatchAxis) == 0x0000A8, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::IsMatchAxis' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, LIsFound) == 0x0000A9, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::LIsFound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_IsValid_ReturnValue) == 0x0000AA, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_GetOwnerMaterials_OwnerMaterials) == 0x0000B0, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_GetOwnerMaterials_OwnerMaterials' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_IsValid_ReturnValue_1) == 0x0000C4, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_IsPlaying_ReturnValue) == 0x0000C5, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, Temp_int_Array_Index_Variable) == 0x0000C8, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_IsValid_ReturnValue_2) == 0x0000D8, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_GetCollisionSound_CollisionSound) == 0x0000E0, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_GetCollisionSound_CollisionSound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_IsPlaying_ReturnValue_1) == 0x000108, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00010C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000118, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_GetOwner_ReturnValue) == 0x000120, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000128, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000138, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000140, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_K2_GetActorRotation_ReturnValue_2) == 0x00014C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_K2_GetActorRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000158, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_K2_GetActorRotation_ReturnValue_3) == 0x00015C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_K2_GetActorRotation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, Temp_int_Loop_Counter_Variable) == 0x000168, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_GetVelocity_ReturnValue) == 0x00016C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_Add_IntInt_ReturnValue) == 0x00017C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_GetVelocity_ReturnValue_1) == 0x000180, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x00018C, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_Abs_ReturnValue) == 0x000190, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionRollSound, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000194, "Member 'BP_CollisionHitSoundComponent_C_CollisionRollSound::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionFallSound
// 0x0108 (0x0108 - 0x0000)
struct BP_CollisionHitSoundComponent_C_CollisionFallSound final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impulse;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0014(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsFall;                                            // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsFall;                                           // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B3[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateMovePow;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsFound;                                          // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B4[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B5[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_2;        // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_CollisionFallSound) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_CollisionFallSound");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_CollisionFallSound) == 0x000108, "Wrong size on BP_CollisionHitSoundComponent_C_CollisionFallSound");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, OtherActor) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, Impulse) == 0x000008, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::Impulse' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, HitResult) == 0x000014, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::HitResult' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, IsFall) == 0x00009C, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::IsFall' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, LIsFall) == 0x00009D, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::LIsFall' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, RotateMovePow) == 0x0000A0, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::RotateMovePow' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, LIsFound) == 0x0000A4, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::LIsFound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000A8, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000B4, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_BreakRotator_Roll) == 0x0000C0, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_BreakRotator_Pitch) == 0x0000C4, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_BreakRotator_Yaw) == 0x0000C8, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_MakeVector_ReturnValue) == 0x0000CC, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x0000D8, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000E4, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_K2_GetActorRotation_ReturnValue_2) == 0x0000E8, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_K2_GetActorRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x0000F4, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000100, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionFallSound, CallFunc_BooleanAND_ReturnValue) == 0x000101, "Member 'BP_CollisionHitSoundComponent_C_CollisionFallSound::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionSound
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CollisionHitSoundComponent_C_CollisionSound final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impulse;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0014(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          LIsRoll;                                           // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsFall;                                           // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsHit;                                            // 0x009E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B6[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B7[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CollisionRollSound_IsRolling;             // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CollisionHitSound_IsHitSound;             // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_CollisionSound) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_CollisionSound");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_CollisionSound) == 0x0000E8, "Wrong size on BP_CollisionHitSoundComponent_C_CollisionSound");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, OtherActor) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, Impulse) == 0x000008, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::Impulse' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, HitResult) == 0x000014, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::HitResult' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, LIsRoll) == 0x00009C, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::LIsRoll' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, LIsFall) == 0x00009D, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::LIsFall' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, LIsHit) == 0x00009E, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::LIsHit' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_IsValid_ReturnValue) == 0x00009F, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_BooleanOR_ReturnValue) == 0x0000A0, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_GetOwner_ReturnValue) == 0x0000A8, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B0, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_IsValid_ReturnValue_1) == 0x0000BC, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_IsPlaying_ReturnValue) == 0x0000BD, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_GetOwner_ReturnValue_1) == 0x0000C0, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000C8, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D4, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_VSize_ReturnValue) == 0x0000E0, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000E4, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_CollisionRollSound_IsRolling) == 0x0000E5, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_CollisionRollSound_IsRolling' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_CollisionSound, CallFunc_CollisionHitSound_IsHitSound) == 0x0000E6, "Member 'BP_CollisionHitSoundComponent_C_CollisionSound::CallFunc_CollisionHitSound_IsHitSound' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.UpdateCollisionParam
// 0x002C (0x002C - 0x0000)
struct BP_CollisionHitSoundComponent_C_UpdateCollisionParam final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B8[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B9[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam) == 0x000004, "Wrong alignment on BP_CollisionHitSoundComponent_C_UpdateCollisionParam");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam) == 0x00002C, "Wrong size on BP_CollisionHitSoundComponent_C_UpdateCollisionParam");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, Temp_bool_Variable) == 0x000010, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Array_Length_ReturnValue_1) == 0x000024, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_UpdateCollisionParam, CallFunc_Less_IntInt_ReturnValue_1) == 0x000029, "Member 'BP_CollisionHitSoundComponent_C_UpdateCollisionParam::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.GetCollisionSound
// 0x0178 (0x0178 - 0x0000)
struct BP_CollisionHitSoundComponent_C_GetCollisionSound final
{
public:
	struct FHitResult                             OtherHitResult;                                    // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UMaterialInterface*                     OwnerMaterial;                                     // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRSCollisionSound                      CollisionSound;                                    // 0x0090(0x0028)(Parm, OutParm)
	class UPhysicalMaterial*                      CallFunc_GetPhysicalMaterial_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BA[0x2];                                     // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46BB[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRSCollisionSoundInfo                  K2Node_MakeStruct_RSCollisionSoundInfo;            // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRSCollisionSound                      CallFunc_GetPhyshicsCollisionSound_CollisionSound; // 0x0150(0x0028)()
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_GetCollisionSound) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_GetCollisionSound");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_GetCollisionSound) == 0x000178, "Wrong size on BP_CollisionHitSoundComponent_C_GetCollisionSound");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, OtherHitResult) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::OtherHitResult' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, OwnerMaterial) == 0x000088, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::OwnerMaterial' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CollisionSound) == 0x000090, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CollisionSound' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_GetPhysicalMaterial_ReturnValue) == 0x0000B8, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_GetPhysicalMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C0, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C1, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_Time) == 0x0000C4, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_Distance) == 0x0000C8, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_Location) == 0x0000CC, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D8, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_Normal) == 0x0000E4, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F0, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_FaceIndex) == 0x000124, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_TraceStart) == 0x000128, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_BreakHitResult_TraceEnd) == 0x000134, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, K2Node_MakeStruct_RSCollisionSoundInfo) == 0x000140, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::K2Node_MakeStruct_RSCollisionSoundInfo' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetCollisionSound, CallFunc_GetPhyshicsCollisionSound_CollisionSound) == 0x000150, "Member 'BP_CollisionHitSoundComponent_C_GetCollisionSound::CallFunc_GetPhyshicsCollisionSound_CollisionSound' has a wrong offset!");

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.GetOwnerMaterials
// 0x0030 (0x0030 - 0x0000)
struct BP_CollisionHitSoundComponent_C_GetOwnerMaterials final
{
public:
	TArray<class UMaterialInterface*>             OwnerMaterials;                                    // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BC[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_CollisionHitSoundComponent_C_GetOwnerMaterials) == 0x000008, "Wrong alignment on BP_CollisionHitSoundComponent_C_GetOwnerMaterials");
static_assert(sizeof(BP_CollisionHitSoundComponent_C_GetOwnerMaterials) == 0x000030, "Wrong size on BP_CollisionHitSoundComponent_C_GetOwnerMaterials");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetOwnerMaterials, OwnerMaterials) == 0x000000, "Member 'BP_CollisionHitSoundComponent_C_GetOwnerMaterials::OwnerMaterials' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetOwnerMaterials, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000010, "Member 'BP_CollisionHitSoundComponent_C_GetOwnerMaterials::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetOwnerMaterials, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CollisionHitSoundComponent_C_GetOwnerMaterials::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CollisionHitSoundComponent_C_GetOwnerMaterials, CallFunc_GetMaterials_ReturnValue) == 0x000020, "Member 'BP_CollisionHitSoundComponent_C_GetOwnerMaterials::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

}

