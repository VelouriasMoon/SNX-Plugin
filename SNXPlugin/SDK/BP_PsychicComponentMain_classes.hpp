#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PsychicComponentMain

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "PsychicObjectDeformType_structs.hpp"
#include "PsychicObjectAttackSwingType_structs.hpp"
#include "PsychicObjectSoundGroup_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "PsychicObjectGroupID_structs.hpp"
#include "SPsychicCaptureMaterial_structs.hpp"
#include "PsychicObjectAttackType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PsychicObjectID_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PsychicComponentMain.BP_PsychicComponentMain_C
// 0x0BA0 (0x0C60 - 0x00C0)
class UBP_PsychicComponentMain_C final : public UActorComponent
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         AuraComp;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         ShadowComp;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DirectionComp;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitPrimitiveCompOld;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    AttackPrimitiveComp;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    DodgePrimitiveComp;                                // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInertialMoveComponent_C*               InertialMoveComp;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           OwnerMovement;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        GrabOwner;                                         // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicGrabAttachment_C*               GrabAttach;                                        // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               ObjOwner;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MeshOwner;                                         // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               PlayerFixParam;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RegNo;                                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequestIndex;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GrabIndex;                                         // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         brainIndex;                                        // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectGroupID                         DataGroup;                                         // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectID             ObjectID;                                          // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        ObjectSize;                                        // 0x014A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        EffectSize;                                        // 0x014B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectAttackSwingType                 SwingType;                                         // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSoundGroup                      SoundGroup;                                        // 0x014D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F0B[0x2];                                     // 0x014E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GrabAttachSocket;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPsychicActive;                                    // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckRegister;                                    // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckFixParam;                                    // 0x015A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipInitPhysics;                                  // 0x015B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStaticMesh;                                       // 0x015C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkeletalMesh;                                     // 0x015D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUnique;                                           // 0x015E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldSpawn;                                  // 0x015F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTransferObj;                                      // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabMove;                                         // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAccelerateFilter;                                 // 0x0162(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrab;                                             // 0x0163(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNoReuse;                                          // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SASKind                                     SasKind;                                           // 0x0165(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F0C[0x2];                                     // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_SASKind>                             SasKindList;                                       // 0x0168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bBulletObj;                                        // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F0D[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorArrangeTransform;                             // 0x0180(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             MeshArrangeTransform;                              // 0x01B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PsychicDeltaSecond;                                // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicDeltaRate;                                  // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGrabGauge;                                        // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F0E[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrabGaugeAdd;                                      // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabGaugeBase;                                     // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabGauge;                                         // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            LiftUpHeightCurve;                                 // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLiftUp;                                           // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F0F[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftStartTime;                                     // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftStartTimer;                                    // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpHeight;                                      // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpTime;                                        // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftRate;                                          // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftHeightStt;                                     // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LiftPosCen;                                        // 0x021C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LiftRotStt;                                        // 0x0228(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F10[0x4];                                     // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            GrabMoveHeightCurve;                               // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabMoveSpeedCurve;                                // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabMoveRotateCurve;                               // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabMoveDecelCurve;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabMoveReturnCurve;                               // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabReloadSpeedCurve;                              // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabReloadHeightCurve;                             // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGrabMoving;                                       // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabMoveCurve;                                    // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabReload;                                       // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabMoveDecel;                                    // 0x0273(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabMoveReturn;                                   // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabMoveAttack;                                   // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F11[0x2];                                     // 0x0276(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrabMoveTime;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveTimer;                                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveHeight;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveRate;                                      // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabMovePosStt;                                    // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               GrabMoveRotStt;                                    // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                GrabMovePosCen;                                    // 0x02A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               GrabMoveRotCen;                                    // 0x02AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         GrabMoveDecelTime;                                 // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveReturnTime;                                // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveBounceTimer;                               // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveSlopeDistSq;                               // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabMoveSlopeMax;                                  // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabMoveSpeed;                                     // 0x02CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabDecelSpeedStt;                                 // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabReloadTime;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainReloadTime;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComboReloadTime;                                   // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           GrabFloatPosCurve;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           GrabFloatAngleCurve;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGrabFloat;                                        // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F12[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrabFloatLength;                                   // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabFloatPosRange;                                 // 0x0308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabFloatAngleRange;                               // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabFloatTimer;                                    // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabFloatSpeedRate;                                // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabFloatPosRate;                                  // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrabFloatRotRate;                                  // 0x0334(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AuraMaterialInstance;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FlashMaterialInstance;                             // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAura;                                             // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAuraOn;                                           // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStencilOn;                                        // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F13[0x1];                                     // 0x0353(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AuraGrowTime;                                      // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StencilValue;                                      // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AuraRate;                                          // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius;                             // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackCountMax;                                    // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackCount;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackExec;                                       // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicCombo;                                     // 0x036D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicEx;                                        // 0x036E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDelay;                                      // 0x036F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackStart;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckHit;                                         // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackHit;                                        // 0x0372(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitFloor;                                         // 0x0373(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitWall;                                          // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitCelling;                                       // 0x0375(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckDrop;                                        // 0x0376(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	PsychicObjectAttackType::EPsychicObjectAttackType AttackType;                                        // 0x0377(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EHCSkillExtraType>                     SkillInfoExtraTypeList;                            // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             AttackDelayTimer;                                  // 0x0388(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEffectAttack;                                     // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F14[0x3];                                     // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        EffectAttack;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectAttackTimer;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectAttackDelay;                                 // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectAttackParticleRate;                          // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F15[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CameraShakeTypeThrow;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeTypeDrop;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeTypeSwing;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeScale;                                  // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrow;                                            // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F16[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowDirection;                                    // 0x03D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowLimitTime;                                    // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowLimitTimer;                                   // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ThrowSpeedCurve;                                   // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ThrowAngleCurve;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowRotSpeed;                                     // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowTime;                                         // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowDirectionFront;                               // 0x0400(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowNormalTimeSecond;                             // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrowAnim;                                        // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F17[0x3];                                     // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowAnimTime;                                     // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnimTimer;                                    // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecThrowStt;                                       // 0x041C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWeakPoint;                                        // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F18[0x3];                                     // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeakPointIndex;                                    // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroy;                                          // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNoFade;                                           // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDestroyFade;                                      // 0x0432(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bApplyDamp;                                        // 0x0433(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDispose;                                          // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F19[0x3];                                     // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestroyDelay;                                      // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyTime;                                       // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyTimer;                                      // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DampValue;                                         // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDbDispName;                                       // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispIndex;                                      // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispState;                                      // 0x044A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispSearchInfo;                                 // 0x044B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispDistance;                                   // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispPos;                                        // 0x044D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispGauge;                                      // 0x044E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispHit;                                        // 0x044F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispAttack;                                     // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispArrow;                                      // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispAura;                                       // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbUseInertialMove;                                // 0x0453(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1A[0x4];                                     // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SoundLiftUp;                                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundAtomCue*>                  SoundAttack;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class USoundAtomCue*                          SoundAttackThrow;                                  // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          SoundAttackCombo;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          SoundHitGround;                                    // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          SoundHitEnemy;                                     // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabStartSpeedCurve;                               // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GrabStartRotateCurve;                              // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 GrabStartTimeRange;                                // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 GrabStartSpeedRange;                               // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 GrabStartRotateRange;                              // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         GrabStartMoveTime;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabStartRotateTime;                               // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGrabStartRight;                                   // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGrabStart;                                        // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1B[0x2];                                     // 0x04DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VecGrabStart;                                      // 0x04DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosGrabStart;                                      // 0x04E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabStartRate;                                     // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabStartTimeRate;                                 // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabStartSpeedRate;                                // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabStartRotateRate;                               // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDeformable;                                       // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPsychicObjectDeformType                      DeformType;                                        // 0x0505(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1C[0x2];                                     // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeformRange;                                       // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeformRate;                                        // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeformRandom;                                      // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosImpact;                                         // 0x0514(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDbDispDeform;                                     // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1D[0x3];                                     // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PosPrevThrow;                                      // 0x0524(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ThrowStartAngleCurve;                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowStartRotSpeed;                                // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowStartInitAngle;                               // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrowStart;                                       // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1E[0x3];                                     // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowStartRate;                                    // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ThrowAllHeightCurve;                               // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAllHeight;                                    // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrowAll;                                         // 0x0554(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThrowAllTarget;                                   // 0x0555(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1F[0x2];                                     // 0x0556(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowAllTargetPos;                                 // 0x0558(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAllTimer;                                     // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThrowAllIndex;                                     // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowAllVector;                                    // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowAllOffset;                                    // 0x0578(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAllAngle;                                     // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAllAngleExt;                                  // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAllRadius;                                    // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAllRadiusExt;                                 // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatTime;                                    // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatHeightBase;                              // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatHeightRange;                             // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatSlopeDistSq;                             // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatSlopeMax;                                // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatSlopeMin;                                // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BrainFloatPos;                                     // 0x05AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFloat;                                       // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F20[0x3];                                     // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotBrainFloatStt;                                  // 0x05BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PosBrainFloatEnd;                                  // 0x05C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainFloatTimer;                                   // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainFloatSlope;                                   // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFacetsApparition;                                 // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F21[0x3];                                     // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FacetAffectPoint;                                  // 0x05E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetTime;                                         // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetTimer;                                        // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetTimerSign;                                    // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetDistance;                                     // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetAxisOffset;                                   // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetBulgeOffset;                                  // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetBulgeDistacne;                                // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetTurn;                                         // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetScaleMin;                                     // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetAffectPointTop;                               // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacetAffectPointBtm;                               // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainAppear;                                      // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainDisappear;                                   // 0x0619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F22[0x2];                                     // 0x061A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrainAppearTime;                                   // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFieldAttack;                                 // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F23[0x3];                                     // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrainFieldAttackWaitTime;                          // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldAttackWaitTimer;                         // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInTime;                                        // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeOutTime;                                       // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFade;                                             // 0x0634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeOut;                                          // 0x0635(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F24[0x2];                                     // 0x0636(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTimer;                                         // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleRateCapture;                               // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleRateCaptureAura;                           // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleRateFire;                                  // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleRateThunder;                               // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleRateCopy;                                  // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCueSheet*                     SoundCueSheet;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTeleport;                                         // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTeleportStart;                                    // 0x0659(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTeleportAttach;                                   // 0x065A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F25[0x1];                                     // 0x065B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TeleportOffset;                                    // 0x065C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportTime;                                      // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportTimer;                                     // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportStt;                                       // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportEnd;                                       // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportRate;                                      // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAdjustAttach;                                     // 0x067C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F26[0x3];                                     // 0x067D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustTime;                                        // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustTimer;                                       // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustSPosStt;                                     // 0x0688(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AdjustRotStt;                                      // 0x0694(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureMaterial;                                  // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F27[0x3];                                     // 0x06A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureMaterialRate;                               // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDbDispCollision;                                  // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SASKind                                     SasKindPrev;                                       // 0x06A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStealth;                                          // 0x06AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStealthLerp;                                      // 0x06AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStealthStart;                                     // 0x06AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F28[0x3];                                     // 0x06AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StealthTime;                                       // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthTimer;                                      // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthStt;                                        // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthEnd;                                        // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthRate;                                       // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFullHoming;                                       // 0x06C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F29[0x3];                                     // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HomingRoll;                                        // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F2A[0x4];                                     // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CopyObjSource;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               CopyObj;                                           // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyObj;                                          // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyCombo;                                        // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyAppear;                                       // 0x06E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyObjUpdate;                                    // 0x06E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             CopyEffectTimer;                                   // 0x06E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CopyEffectRate;                                    // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopyEffectTime;                                    // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTransferAppear;                                   // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F2B[0x3];                                     // 0x06F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransferTime;                                      // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransferTimer;                                     // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosCenPrev;                                        // 0x0704(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopyDelayTime;                                     // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             CopyDelayTimer;                                    // 0x0714(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CopyOffsetPos;                                     // 0x0720(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewAttach;                                        // 0x072C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F2C[0x3];                                     // 0x072D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   EmPsyObjOwner;                                     // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   EmPsyObjAttacker;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmPsyObjOccupiedMain;                              // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIntercepted;                                      // 0x0741(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F2D[0x2];                                     // 0x0742(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ParticleSizeCapture;                               // 0x0744(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleSizeCaptureAura;                           // 0x0750(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleSizeFire;                                  // 0x075C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleSizeThunder;                               // 0x0768(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleSizeCopy;                                  // 0x0774(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEffectSas;                                        // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F2E[0x3];                                     // 0x0781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectSasTimer;                                    // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialParamNormal;                               // 0x0788(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialParamFire;                                 // 0x0828(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialParamThunder;                              // 0x08C8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialParamStart;                                // 0x0968(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveNormal;                               // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveFire;                                 // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveThunder;                              // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveStart;                                // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrowDirect;                                      // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLiftUpDirect;                                     // 0x0A29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F2F[0x2];                                     // 0x0A2A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             LiftUpDirectTimer;                                 // 0x0A2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LiftUpDirectTime;                                  // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpDirectHeight;                                // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkPosStt;                                        // 0x0A40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkPosEnd;                                        // 0x0A4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkRotStt;                                        // 0x0A58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               WorkRotEnd;                                        // 0x0A64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             PreviousTransform;                                 // 0x0A70(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             UpdateLastTransform;                               // 0x0AA0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bKeepAttackCollision;                              // 0x0AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F30[0x7];                                     // 0x0AD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 CaptureMeshListOld;                                // 0x0AD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bSkipInitVisibility;                               // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F31[0x7];                                     // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionCommonInfo                 EnemyCommonInfo;                                   // 0x0AF0(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHCSkillCommonInfo                     EnemySkillInfo;                                    // 0x0B60(0x00F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseEnemyInfo;                                     // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInterceptReserve;                                 // 0x0C51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipInitPhysics2;                                 // 0x0C52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAbolishMainSimulate;                              // 0x0C53(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SetupComponentParam(class UMeshComponent* Meah_comp, class UMeshComponent* Aura_comp, class UMeshComponent* Shadow_comp, class USceneComponent* Dir_comp, class UInertialMoveComponent_C* Inertial_move_comp, class UPrimitiveComponent* Hit_primitive, class UPrimitiveComponent* Attack_primitive);
	void Update(float Delta_second);
	void UpdateThrowLinear(float DeltaSeconds);
	void StartMoveThrow();
	struct FVector CalcDirectionVectorToTarget(bool bPlayerTarget, bool bNowRot, bool* Return);
	void SetAttackThrow(class AActor* Param_TargetActor, bool Force_throw, bool Psychic_combo, bool Psychic_ex_in, bool Check_attach);
	void UpdateGrabGauge(bool* Return);
	void DebugDisplay();
	void UpdateGrabMove();
	void StartGrabMove(bool bForce, bool bReload, bool bCombo);
	void DebugDisplayName(const class FString& Str_in, class FString* Return);
	void DebugDisplayState(const class FString& Str_in, class FString* Return);
	void DebugDisplaySearchInfo(const class FString& Str, class FString* Return);
	void DebugDisplayDistance(const class FString& Str, class FString* Return);
	void DebugDisplayPos(const class FString& Str, class FString* Return);
	void DebugDisplayGauge(const class FString& Str, class FString* Return);
	void SetGrab(bool Flag_in, class ARsBattleHero_C* Grab_owner_in, int32 Grab_index_in);
	void Initialize(class UMeshComponent* Mesh_comp, class UMeshComponent* Aura_comp, class UMeshComponent* Shadow_comp, class USceneComponent* Dir_comp, class UInertialMoveComponent_C* Inertial_move_comp, class UPrimitiveComponent* Hit_primitive, class UPrimitiveComponent* Attack_primitive, PsychicObjectID::EPsychicObjectID PsychicObjectID_in, bool Is_static, bool Is_skeletal);
	void DebugDisplayHit();
	void DebugDisplayAttack(const class FString& Str, class FString* Return);
	void DebugDisplayArrow();
	void CanPsyAction(bool* Return);
	void SetAttackParam(bool Flag_in, bool Set_time_limit_in);
	void SetActiveComponent(bool bActive);
	void CalcDirectionVectorHoming(struct FVector* Vector, struct FVector* Rot);
	void UpdateThrowCurve(float DeltaSeconds);
	void UpdateThrow();
	void UpdateThrowSpeed(float DeltaSecond);
	void UpdateThrowRotate(float DeltaSecond);
	void IsHoming(bool* Return);
	void CheckHitBackGround(bool Check_floor, bool Check_wall, bool Check_celling, bool* Return);
	void CheckThrowLimit(float InputPin);
	void GetImpactPos(struct FVector* Param_PosImpact);
	void DecAttackCount(int32* Count);
	void SetLiftUp();
	void UpdateLiftUp(bool* bDone);
	void CheckGrabIndex(int32 Param_GrabIndex, bool* Return);
	void ReloadGrab(int32 New_grab_index, bool bCombo);
	void GetVectorToCentre(struct FVector* Vector);
	void InitParam(bool Force_clear);
	void UpdatePosRot();
	void GetAttachPos(struct FVector* Grab_pos);
	void GetGrabOwnerTarget(class AActor** Target);
	void UpdateEffectAura();
	void DebugDisplayAura(const class FString& Str, class FString* Return);
	void GetPsychicDeltaSecond(bool bPsychicSpeed, bool bGetRate, float* Delta_second, float* Rate);
	void SetGrabMove();
	void SetEffectAttackOld(bool Flag, PsychicObjectAttackType::EPsychicObjectAttackType Attack_type);
	void SetEffectDestroy();
	void SetDestroyMain(bool Force, bool No_fade_in, bool* Return);
	void UpdateDestroy();
	void CalcDeltaSecond(float Delta_second, float* Calc_delta_second);
	void AddForce();
	void UpdateEffectAttackOld();
	void SetAccelerateFilter(bool Flag);
	void SetOutline(bool Flag_in);
	void CallLiftUpSE();
	void UpdateThrowSnapOld(float Delta_second);
	void SetActionCount(int32 Count, bool bPress);
	void UpdatePsychicDelta(float Delta_second);
	void CanThrow(bool* Return);
	void InitializeAura();
	void InitializeDataGroup();
	void CallAttackSE(bool bForceThrow, bool Param_bPsychicCombo, int32 Param_Index);
	void IsDestroy(bool* Return);
	void SetGrabStart(bool bRight, const struct FVector& Vec_start);
	void UpdateGrabStart(bool* Return);
	void SetGrabGauge(bool Flag_in);
	void CallHitGroundSE();
	void CallHitEnemySE();
	void InitializeSoundGroup();
	void InitializeGrabStart();
	void CheckAttach();
	void SetAttach(bool bAttach, bool bForce);
	void SetSasAttributeOld(E_SASKind Param_SasKind, bool Force);
	void SetAttackSkillInfo(const struct FHCSkillCommonInfo& WorkSkillInfo, struct FHCSkillCommonInfo* Return);
	void SetGrabAttachMain();
	void SetEffectHitEnemyThrow(bool Check_background);
	void SetImpactPos(const struct FVector& Impact_pos_in);
	void InitializeDeform();
	void GetArrowDirection(struct FVector* Direction);
	void DebugDisplayDeform();
	void InitializeDataTableOld(PsychicObjectID::EPsychicObjectID PsychicObjectID_in);
	void CheckAttackAtrribute(E_SASKind Attribute_in, bool* Return);
	void SetGrabAttackAttributeOld();
	void SetAttackAttributeOld(E_SASKind Attribute_in, bool Force);
	void IsHitBackground(bool* Return);
	void ConvVectorToActorFrontVector(const struct FVector& World_vector, struct FVector* Actor_vector);
	void GetAttackPos(struct FVector* Attack_pos);
	void SetAttackThrowAll(class AActor* Target_actor, int32 Throw_all_index, float Throw_all_angle, const struct FVector& Throw_all_offset);
	void UpdateThrowAll();
	void GetCharacterHitCapsule(class ARSBattleCharacter_C* Character, class UCapsuleComponent** Capsule);
	void GetCharacterHitOrigin(class ARSBattleCharacter_C* Character, struct FVector* Capsule_pos);
	void CalcCharacterHitRadius(class ARSBattleCharacter_C* Character, bool bHorizontal, float* Radius);
	void SetEffectAuraFlashOld(bool Flag);
	void SetBrainGrab(bool Flag_in, int32 brain_index_in, class ARsBattleHero_C* Grab_owner_in, const struct FVector& brain_pos_in);
	void UpdateBrainFloatOld();
	void SetEffectAuraGrow(bool Flag_in, bool Force_off, bool Instance_on);
	void SetReloadGrab(class ARsBattleHero_C* Grab_owner_in, int32 Grab_index_in, bool Flag_in);
	void SetRequestFromSearch(int32 Request_index_in, float Grab_gauge_in);
	void SetRequestFromBrain(int32 Request_index_in);
	void InitializeBrainField(float Float_height_base_in, float Float_height_range_in);
	void SetUniqueGrab(bool Flag_in, class ARsBattleHero_C* Grab_owner_in, int32 Grab_index_in, class FName Socket_name);
	void SetHitThrow();
	void UpdateFacetsApparition();
	void SetFacetApparition(bool Flag_in);
	void SetFacetApparitionMaterial(class UPrimitiveComponent* Mesh_in, const struct FVector& Affect_pos_in, const struct FVector& Up_vec_in);
	void SetBrainAppear(bool Flag_in);
	void UpdateBrainAppear();
	void SetBrainAppearPosOld();
	void SetMIParameterFadeOut(float Value_in);
	void SetMIParameterAura(float Value_in);
	void SetMIParameterEmission(float Value_in);
	void SetMIParameterDeformFlag(float Value_in);
	void SetMIParameterImpactPos(const struct FVector& Impact_pos_in);
	void SetBrainFieldAttack(class ARsBattleHero_C* Grab_owner_in, float Wait_time_in);
	void UpdateBrainFieldAttack();
	void IsBrainCapture(bool* Return);
	void SetFade(bool Fade_out_in, float Fade_time_in);
	void UpdateEffectFade();
	void IsFadeFinish(bool* Return);
	void IsFadeProcessing(bool* Flag);
	void SetCollisionResponse(ECollisionResponse Response_in);
	void SetEffectPsychicGaugeOld(bool Flag_in);
	void UpdateEffect();
	void SetRegNo(int32 Reg_no_in, bool* Return);
	void GetRegNo(int32* Reg_no_out);
	void SetPsyObjPosRot(const struct FVector& Pos_in, const struct FRotator& Rot_in, bool Root_pos, bool Root_rot, bool Sweep, bool Teleport);
	void TerminateSound();
	void SetNoReuse(bool Flag_in);
	void IsRequest(bool* Return);
	void InitAreaChange(int32 Grab_index_in, const struct FVector& Grab_pos_in, E_SASKind Sas_kind_in, int32 Attack_count_in);
	void DebugDisplayIndex(const class FString& Str_in, class FString* Str_out);
	void SetActivePsyObj(bool Flag_in, bool* Return);
	void IsPsychicActive(bool* Return);
	void SetGrabSource(bool Flag);
	void SetBrainFloatSwing(bool Flag_in);
	void CheckAttackType(PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in, bool* Return);
	void PrintErrorString(const class FString& Err_str_in);
	void SetGrabMesh(bool No_adjust_in);
	void SetVisibilityPsyObj(bool Flag_in, bool Mesh_only, bool* Return);
	void SetCollisionPsyObj(bool Flag_in, bool Is_capsule, bool* Return);
	void SetSasTeleport(bool Flag_in, float Time_in);
	void UpdateEffectTeleport();
	void SetMIParameterTeleport(float Value_in);
	void InitializePsychicComponent();
	void SetPsychicAction(class AActor* Target_actor_in, bool Psychic_combo_in, bool* Rwmove);
	void GetAttackDirection(bool Is_swing_direction, bool* Return, struct FVector* Attack_direction);
	void SetHit(bool Hit_enemy_in, bool Hit_background_in, const struct FHCHitResult& Result_in, const struct FVector& Eft_pos_in, bool* Return);
	void SetHitEffect(bool Hit_enemy_in, bool Hit_background_in, const struct FVector& Eft_pos_in, bool* Return);
	void GetAttackCollision(bool Throw_in, class UPrimitiveComponent** Attack_collision);
	void RequestPsychicCombo(bool* Return);
	void GetAnimationLength(float* Length);
	void SetPsychicSimulatePhysics(ECollisionEnabled Mesh_collision_in, bool Simulate_in, bool Gravity_in);
	void SetSasCopy(bool Flag_in);
	void SetAttackInfo(class AActor* Target_actor_in, bool Psychic_combo_in, bool Psychic_ex_in, bool Set_time_limit_in);
	void SetAdjust(float Time_in);
	void UpdateAdjust();
	void SetAnimNotifyInputPsychic();
	void SetAnimNotifyEnablePsychic(bool Flag_in);
	void SetAnimNotifyReturnMove();
	void SetAttackCollision(bool Flag_in, class USkeletalMeshComponent* Skeletal_mesh_in);
	void SetAttackCollisionParam(bool Flag_in, class UPrimitiveComponent* Attack_prim_in, class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void Finalize();
	void SetDispose(bool Is_Unique_in, bool Is_brain_in);
	void SetHitSEOld(bool Hit_enemy_in, bool Hit_background_in, bool* Return);
	void SetPsychicActionNew(PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in, class AActor* Target_actor_in, bool Psychic_combo_in, bool Psychic_ex_in, bool* Remove);
	void IsAllAttackEnable(bool* Return);
	void DebugDisplayCollision();
	void DebugDrawPrimitive(class UPrimitiveComponent* Prim_comp_in, int32 Segment_in, const struct FLinearColor& Color_in, float Duration_in, float Thickness_in);
	void SetAttackCollisionSize();
	void SetSas(E_SASKind Sas_kind_in);
	void SetSasEffectOld();
	void SetSasStealth(bool Flag_in, float Time_in);
	void UpdateEffectStealth();
	void SetMIParameterStealth(float Value_in);
	void UpdateSystem(float Delta_second_in);
	void UpdateMain();
	void UpdatePsychicComponent();
	void GetObjectSize(EPsychicObjectSizeType* Object_Size);
	void FinalizePsychicComponent();
	void SetAttackType(PsychicObjectAttackType::EPsychicObjectAttackType Action_type_in);
	void GetAttackAction(PsychicObjectAttackType::EPsychicObjectAttackType* Return);
	void InitCopyObj(class ABP_PsychicObjectBasic_C*& Src_psy_obj_in);
	void SetCopyObjAppear();
	void UpdateCopyObj();
	void IsTickOn(bool* Return);
	void IsAttackDelay(bool* Delay);
	void SetAttackDelay(class ARsBattleHero_C* Grab_owner_in, float Delay_time_in);
	void UpdateAttackDelay();
	void InitTransferObject();
	void SetTransferObjectAppear();
	void UpdateEffectTransfer();
	void SetCopyObject(class ABP_PsychicObjectBasic_C* Copy_obj_in);
	void UpdateEffectCopy();
	void SetPsychicActionEnemy(PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in, class AActor* Target_actor_in);
	void SetPsychicActionCopy();
	void SetPsychicActionCommon();
	void SetHitBarrier();
	void IsCheckBackground(bool* Return);
	void SetAttachRush();
	void GetPsychicObjectPosInfo(struct FVector* PosPrev, struct FVector* PosNow);
	void SetGrabCopy();
	void SetCollisionProfileOld(bool bCaptured);
	void SetEffectCopy();
	void SetMIParameterCopy(float Value_in);
	void InitPsychicCluster(class ABP_PsychicObjectBasic_C*& Core_psy_obj_in, int32 Index_in);
	void IsNewAttach(bool* Return);
	void InitEnemyPsychicObjectMain(class ARSBattleCharacter_C* Owner_in);
	void IsEnemyPsychicObjectOccupiedMain(bool* Occupied);
	void SetEnemyPsychicObjectActiveMain(bool Active_in, const struct FVector& Obj_pos_in);
	void SetEnemyPsychicObjectThrowMain(class AActor* Target_actor_in, float Throw_speed_in);
	void InterceptAttack(class ARSBattleCharacter_C* Intercepter_in, class ARSBattleCharacter_C* New_target_in);
	void GetCameraShakeData(class UClass** Camera_shake, float* Scale);
	void GetDisplayName(class FString* Param_Name);
	void SetSwingType(EPsychicObjectAttackSwingType Swing_type_in);
	void SetAttackCount(int32 Attack_count_in);
	void SetCopyObjUpdate(bool Flag_in);
	void CheckPsychicObjectID(TArray<BattlePrototype::EPsychicObjectID>& Check_list_in, bool* Return);
	void GetPsychicObjectID(BattlePrototype::EPsychicObjectID* Psychic_object_id);
	void InitPsychicBulletOld();
	void SetAttackPsychicBulletOld(class ARsBattleHero_C* Grab_owner_in, class AActor* Target_actor_in, float Spread_angle_in);
	void UpdateEffectSasOld();
	void LoadMaterialCurve(const struct FSPsychicCaptureMaterial& SPsychicCaptureMaterial, class UCurveVector** AsCurve_Vector);
	void GetMaterialParam(E_SASKind Sas_kind_in, struct FSPsychicCaptureMaterial* Material_param);
	void GetMaterialCurve(E_SASKind Sas_kind_in, class UCurveVector** Material_curve);
	void SetPsychicActive(bool Flag_in);
	void SetAttackThrowDirect(class ARsBattleHero_C* Grab_owner_in, class AActor* Target_actor_in);
	void SetLiftUpDirect(bool Flag_in);
	void UpdateLiftUpDirect();
	void SetAttackSkillInfoExtraType(TArray<EHCSkillExtraType>& Extra_type_list_in);
	void SetMaterialCaptureStartOld(bool Flag_in);
	void AddCaptureMeshList(class UMeshComponent* Mesh_in);
	void SetEnemyPsychicObjectInfoMain(const struct FHCCollisionCommonInfo& InCommonInfo, const struct FHCSkillCommonInfo& InSkillInfo);
	void InterceptReserve();
	void InterceptCancel();
	void DebugPrintAbolishString(const class FString& Func_name_in);
	void DebugPrintCheckSimulate(const class FString& Str_in, bool Skip_screen_in);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PsychicComponentMain_C">();
	}
	static class UBP_PsychicComponentMain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PsychicComponentMain_C>();
	}
};
static_assert(alignof(UBP_PsychicComponentMain_C) == 0x000010, "Wrong alignment on UBP_PsychicComponentMain_C");
static_assert(sizeof(UBP_PsychicComponentMain_C) == 0x000C60, "Wrong size on UBP_PsychicComponentMain_C");
static_assert(offsetof(UBP_PsychicComponentMain_C, MeshComp) == 0x0000C0, "Member 'UBP_PsychicComponentMain_C::MeshComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AuraComp) == 0x0000C8, "Member 'UBP_PsychicComponentMain_C::AuraComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ShadowComp) == 0x0000D0, "Member 'UBP_PsychicComponentMain_C::ShadowComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DirectionComp) == 0x0000D8, "Member 'UBP_PsychicComponentMain_C::DirectionComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, HitPrimitiveCompOld) == 0x0000E0, "Member 'UBP_PsychicComponentMain_C::HitPrimitiveCompOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AttackPrimitiveComp) == 0x0000E8, "Member 'UBP_PsychicComponentMain_C::AttackPrimitiveComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DodgePrimitiveComp) == 0x0000F0, "Member 'UBP_PsychicComponentMain_C::DodgePrimitiveComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, InertialMoveComp) == 0x0000F8, "Member 'UBP_PsychicComponentMain_C::InertialMoveComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, OwnerMovement) == 0x000100, "Member 'UBP_PsychicComponentMain_C::OwnerMovement' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabOwner) == 0x000108, "Member 'UBP_PsychicComponentMain_C::GrabOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabAttach) == 0x000110, "Member 'UBP_PsychicComponentMain_C::GrabAttach' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ObjOwner) == 0x000118, "Member 'UBP_PsychicComponentMain_C::ObjOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TargetActor) == 0x000120, "Member 'UBP_PsychicComponentMain_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MeshOwner) == 0x000128, "Member 'UBP_PsychicComponentMain_C::MeshOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PlayerFixParam) == 0x000130, "Member 'UBP_PsychicComponentMain_C::PlayerFixParam' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, RegNo) == 0x000138, "Member 'UBP_PsychicComponentMain_C::RegNo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, RequestIndex) == 0x00013C, "Member 'UBP_PsychicComponentMain_C::RequestIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabIndex) == 0x000140, "Member 'UBP_PsychicComponentMain_C::GrabIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, brainIndex) == 0x000144, "Member 'UBP_PsychicComponentMain_C::brainIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DataGroup) == 0x000148, "Member 'UBP_PsychicComponentMain_C::DataGroup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ObjectID) == 0x000149, "Member 'UBP_PsychicComponentMain_C::ObjectID' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ObjectSize) == 0x00014A, "Member 'UBP_PsychicComponentMain_C::ObjectSize' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EffectSize) == 0x00014B, "Member 'UBP_PsychicComponentMain_C::EffectSize' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SwingType) == 0x00014C, "Member 'UBP_PsychicComponentMain_C::SwingType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundGroup) == 0x00014D, "Member 'UBP_PsychicComponentMain_C::SoundGroup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabAttachSocket) == 0x000150, "Member 'UBP_PsychicComponentMain_C::GrabAttachSocket' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bPsychicActive) == 0x000158, "Member 'UBP_PsychicComponentMain_C::bPsychicActive' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCheckRegister) == 0x000159, "Member 'UBP_PsychicComponentMain_C::bCheckRegister' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCheckFixParam) == 0x00015A, "Member 'UBP_PsychicComponentMain_C::bCheckFixParam' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bSkipInitPhysics) == 0x00015B, "Member 'UBP_PsychicComponentMain_C::bSkipInitPhysics' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bStaticMesh) == 0x00015C, "Member 'UBP_PsychicComponentMain_C::bStaticMesh' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bSkeletalMesh) == 0x00015D, "Member 'UBP_PsychicComponentMain_C::bSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bUnique) == 0x00015E, "Member 'UBP_PsychicComponentMain_C::bUnique' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bBrainFieldSpawn) == 0x00015F, "Member 'UBP_PsychicComponentMain_C::bBrainFieldSpawn' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bTransferObj) == 0x000160, "Member 'UBP_PsychicComponentMain_C::bTransferObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabMove) == 0x000161, "Member 'UBP_PsychicComponentMain_C::bGrabMove' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAccelerateFilter) == 0x000162, "Member 'UBP_PsychicComponentMain_C::bAccelerateFilter' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrab) == 0x000163, "Member 'UBP_PsychicComponentMain_C::bGrab' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bNoReuse) == 0x000164, "Member 'UBP_PsychicComponentMain_C::bNoReuse' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SasKind) == 0x000165, "Member 'UBP_PsychicComponentMain_C::SasKind' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SasKindList) == 0x000168, "Member 'UBP_PsychicComponentMain_C::SasKindList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bBulletObj) == 0x000178, "Member 'UBP_PsychicComponentMain_C::bBulletObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ActorArrangeTransform) == 0x000180, "Member 'UBP_PsychicComponentMain_C::ActorArrangeTransform' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MeshArrangeTransform) == 0x0001B0, "Member 'UBP_PsychicComponentMain_C::MeshArrangeTransform' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PsychicDeltaSecond) == 0x0001E0, "Member 'UBP_PsychicComponentMain_C::PsychicDeltaSecond' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PsychicDeltaRate) == 0x0001E4, "Member 'UBP_PsychicComponentMain_C::PsychicDeltaRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabGauge) == 0x0001E8, "Member 'UBP_PsychicComponentMain_C::bGrabGauge' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabGaugeAdd) == 0x0001EC, "Member 'UBP_PsychicComponentMain_C::GrabGaugeAdd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabGaugeBase) == 0x0001F0, "Member 'UBP_PsychicComponentMain_C::GrabGaugeBase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabGauge) == 0x0001F4, "Member 'UBP_PsychicComponentMain_C::GrabGauge' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftUpHeightCurve) == 0x0001F8, "Member 'UBP_PsychicComponentMain_C::LiftUpHeightCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bLiftUp) == 0x000200, "Member 'UBP_PsychicComponentMain_C::bLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftStartTime) == 0x000204, "Member 'UBP_PsychicComponentMain_C::LiftStartTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftStartTimer) == 0x000208, "Member 'UBP_PsychicComponentMain_C::LiftStartTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftUpHeight) == 0x00020C, "Member 'UBP_PsychicComponentMain_C::LiftUpHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftUpTime) == 0x000210, "Member 'UBP_PsychicComponentMain_C::LiftUpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftRate) == 0x000214, "Member 'UBP_PsychicComponentMain_C::LiftRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftHeightStt) == 0x000218, "Member 'UBP_PsychicComponentMain_C::LiftHeightStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftPosCen) == 0x00021C, "Member 'UBP_PsychicComponentMain_C::LiftPosCen' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftRotStt) == 0x000228, "Member 'UBP_PsychicComponentMain_C::LiftRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveHeightCurve) == 0x000238, "Member 'UBP_PsychicComponentMain_C::GrabMoveHeightCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveSpeedCurve) == 0x000240, "Member 'UBP_PsychicComponentMain_C::GrabMoveSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveRotateCurve) == 0x000248, "Member 'UBP_PsychicComponentMain_C::GrabMoveRotateCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveDecelCurve) == 0x000250, "Member 'UBP_PsychicComponentMain_C::GrabMoveDecelCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveReturnCurve) == 0x000258, "Member 'UBP_PsychicComponentMain_C::GrabMoveReturnCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabReloadSpeedCurve) == 0x000260, "Member 'UBP_PsychicComponentMain_C::GrabReloadSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabReloadHeightCurve) == 0x000268, "Member 'UBP_PsychicComponentMain_C::GrabReloadHeightCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabMoving) == 0x000270, "Member 'UBP_PsychicComponentMain_C::bGrabMoving' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabMoveCurve) == 0x000271, "Member 'UBP_PsychicComponentMain_C::bGrabMoveCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabReload) == 0x000272, "Member 'UBP_PsychicComponentMain_C::bGrabReload' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabMoveDecel) == 0x000273, "Member 'UBP_PsychicComponentMain_C::bGrabMoveDecel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabMoveReturn) == 0x000274, "Member 'UBP_PsychicComponentMain_C::bGrabMoveReturn' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabMoveAttack) == 0x000275, "Member 'UBP_PsychicComponentMain_C::bGrabMoveAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveTime) == 0x000278, "Member 'UBP_PsychicComponentMain_C::GrabMoveTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveTimer) == 0x00027C, "Member 'UBP_PsychicComponentMain_C::GrabMoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveHeight) == 0x000280, "Member 'UBP_PsychicComponentMain_C::GrabMoveHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveRate) == 0x000284, "Member 'UBP_PsychicComponentMain_C::GrabMoveRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMovePosStt) == 0x000288, "Member 'UBP_PsychicComponentMain_C::GrabMovePosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveRotStt) == 0x000294, "Member 'UBP_PsychicComponentMain_C::GrabMoveRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMovePosCen) == 0x0002A0, "Member 'UBP_PsychicComponentMain_C::GrabMovePosCen' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveRotCen) == 0x0002AC, "Member 'UBP_PsychicComponentMain_C::GrabMoveRotCen' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveDecelTime) == 0x0002B8, "Member 'UBP_PsychicComponentMain_C::GrabMoveDecelTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveReturnTime) == 0x0002BC, "Member 'UBP_PsychicComponentMain_C::GrabMoveReturnTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveBounceTimer) == 0x0002C0, "Member 'UBP_PsychicComponentMain_C::GrabMoveBounceTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveSlopeDistSq) == 0x0002C4, "Member 'UBP_PsychicComponentMain_C::GrabMoveSlopeDistSq' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveSlopeMax) == 0x0002C8, "Member 'UBP_PsychicComponentMain_C::GrabMoveSlopeMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabMoveSpeed) == 0x0002CC, "Member 'UBP_PsychicComponentMain_C::GrabMoveSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabDecelSpeedStt) == 0x0002D8, "Member 'UBP_PsychicComponentMain_C::GrabDecelSpeedStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabReloadTime) == 0x0002E4, "Member 'UBP_PsychicComponentMain_C::GrabReloadTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainReloadTime) == 0x0002E8, "Member 'UBP_PsychicComponentMain_C::BrainReloadTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ComboReloadTime) == 0x0002EC, "Member 'UBP_PsychicComponentMain_C::ComboReloadTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatPosCurve) == 0x0002F0, "Member 'UBP_PsychicComponentMain_C::GrabFloatPosCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatAngleCurve) == 0x0002F8, "Member 'UBP_PsychicComponentMain_C::GrabFloatAngleCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabFloat) == 0x000300, "Member 'UBP_PsychicComponentMain_C::bGrabFloat' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatLength) == 0x000304, "Member 'UBP_PsychicComponentMain_C::GrabFloatLength' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatPosRange) == 0x000308, "Member 'UBP_PsychicComponentMain_C::GrabFloatPosRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatAngleRange) == 0x000314, "Member 'UBP_PsychicComponentMain_C::GrabFloatAngleRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatTimer) == 0x000320, "Member 'UBP_PsychicComponentMain_C::GrabFloatTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatSpeedRate) == 0x000324, "Member 'UBP_PsychicComponentMain_C::GrabFloatSpeedRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatPosRate) == 0x000328, "Member 'UBP_PsychicComponentMain_C::GrabFloatPosRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabFloatRotRate) == 0x000334, "Member 'UBP_PsychicComponentMain_C::GrabFloatRotRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AuraMaterialInstance) == 0x000340, "Member 'UBP_PsychicComponentMain_C::AuraMaterialInstance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FlashMaterialInstance) == 0x000348, "Member 'UBP_PsychicComponentMain_C::FlashMaterialInstance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAura) == 0x000350, "Member 'UBP_PsychicComponentMain_C::bAura' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAuraOn) == 0x000351, "Member 'UBP_PsychicComponentMain_C::bAuraOn' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bStencilOn) == 0x000352, "Member 'UBP_PsychicComponentMain_C::bStencilOn' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AuraGrowTime) == 0x000354, "Member 'UBP_PsychicComponentMain_C::AuraGrowTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, StencilValue) == 0x000358, "Member 'UBP_PsychicComponentMain_C::StencilValue' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AuraRate) == 0x00035C, "Member 'UBP_PsychicComponentMain_C::AuraRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AttackCollisionRadius) == 0x000360, "Member 'UBP_PsychicComponentMain_C::AttackCollisionRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AttackCountMax) == 0x000364, "Member 'UBP_PsychicComponentMain_C::AttackCountMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AttackCount) == 0x000368, "Member 'UBP_PsychicComponentMain_C::AttackCount' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAttackExec) == 0x00036C, "Member 'UBP_PsychicComponentMain_C::bAttackExec' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bPsychicCombo) == 0x00036D, "Member 'UBP_PsychicComponentMain_C::bPsychicCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bPsychicEx) == 0x00036E, "Member 'UBP_PsychicComponentMain_C::bPsychicEx' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAttackDelay) == 0x00036F, "Member 'UBP_PsychicComponentMain_C::bAttackDelay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAttackStart) == 0x000370, "Member 'UBP_PsychicComponentMain_C::bAttackStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCheckHit) == 0x000371, "Member 'UBP_PsychicComponentMain_C::bCheckHit' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAttackHit) == 0x000372, "Member 'UBP_PsychicComponentMain_C::bAttackHit' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bHitFloor) == 0x000373, "Member 'UBP_PsychicComponentMain_C::bHitFloor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bHitWall) == 0x000374, "Member 'UBP_PsychicComponentMain_C::bHitWall' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bHitCelling) == 0x000375, "Member 'UBP_PsychicComponentMain_C::bHitCelling' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCheckDrop) == 0x000376, "Member 'UBP_PsychicComponentMain_C::bCheckDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AttackType) == 0x000377, "Member 'UBP_PsychicComponentMain_C::AttackType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SkillInfoExtraTypeList) == 0x000378, "Member 'UBP_PsychicComponentMain_C::SkillInfoExtraTypeList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AttackDelayTimer) == 0x000388, "Member 'UBP_PsychicComponentMain_C::AttackDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bEffectAttack) == 0x000394, "Member 'UBP_PsychicComponentMain_C::bEffectAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EffectAttack) == 0x000398, "Member 'UBP_PsychicComponentMain_C::EffectAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EffectAttackTimer) == 0x0003A0, "Member 'UBP_PsychicComponentMain_C::EffectAttackTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EffectAttackDelay) == 0x0003A4, "Member 'UBP_PsychicComponentMain_C::EffectAttackDelay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EffectAttackParticleRate) == 0x0003A8, "Member 'UBP_PsychicComponentMain_C::EffectAttackParticleRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CameraShakeTypeThrow) == 0x0003B0, "Member 'UBP_PsychicComponentMain_C::CameraShakeTypeThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CameraShakeTypeDrop) == 0x0003B8, "Member 'UBP_PsychicComponentMain_C::CameraShakeTypeDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CameraShakeTypeSwing) == 0x0003C0, "Member 'UBP_PsychicComponentMain_C::CameraShakeTypeSwing' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CameraShakeScale) == 0x0003C8, "Member 'UBP_PsychicComponentMain_C::CameraShakeScale' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bThrow) == 0x0003CC, "Member 'UBP_PsychicComponentMain_C::bThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowDirection) == 0x0003D0, "Member 'UBP_PsychicComponentMain_C::ThrowDirection' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowSpeed) == 0x0003DC, "Member 'UBP_PsychicComponentMain_C::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowLimitTime) == 0x0003E0, "Member 'UBP_PsychicComponentMain_C::ThrowLimitTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowLimitTimer) == 0x0003E4, "Member 'UBP_PsychicComponentMain_C::ThrowLimitTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowSpeedCurve) == 0x0003E8, "Member 'UBP_PsychicComponentMain_C::ThrowSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAngleCurve) == 0x0003F0, "Member 'UBP_PsychicComponentMain_C::ThrowAngleCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowRotSpeed) == 0x0003F8, "Member 'UBP_PsychicComponentMain_C::ThrowRotSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowTime) == 0x0003FC, "Member 'UBP_PsychicComponentMain_C::ThrowTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowDirectionFront) == 0x000400, "Member 'UBP_PsychicComponentMain_C::ThrowDirectionFront' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowNormalTimeSecond) == 0x00040C, "Member 'UBP_PsychicComponentMain_C::ThrowNormalTimeSecond' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bThrowAnim) == 0x000410, "Member 'UBP_PsychicComponentMain_C::bThrowAnim' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAnimTime) == 0x000414, "Member 'UBP_PsychicComponentMain_C::ThrowAnimTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAnimTimer) == 0x000418, "Member 'UBP_PsychicComponentMain_C::ThrowAnimTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, VecThrowStt) == 0x00041C, "Member 'UBP_PsychicComponentMain_C::VecThrowStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bWeakPoint) == 0x000428, "Member 'UBP_PsychicComponentMain_C::bWeakPoint' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, WeakPointIndex) == 0x00042C, "Member 'UBP_PsychicComponentMain_C::WeakPointIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDestroy) == 0x000430, "Member 'UBP_PsychicComponentMain_C::bDestroy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bNoFade) == 0x000431, "Member 'UBP_PsychicComponentMain_C::bNoFade' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDestroyFade) == 0x000432, "Member 'UBP_PsychicComponentMain_C::bDestroyFade' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bApplyDamp) == 0x000433, "Member 'UBP_PsychicComponentMain_C::bApplyDamp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDispose) == 0x000434, "Member 'UBP_PsychicComponentMain_C::bDispose' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DestroyDelay) == 0x000438, "Member 'UBP_PsychicComponentMain_C::DestroyDelay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DestroyTime) == 0x00043C, "Member 'UBP_PsychicComponentMain_C::DestroyTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DestroyTimer) == 0x000440, "Member 'UBP_PsychicComponentMain_C::DestroyTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DampValue) == 0x000444, "Member 'UBP_PsychicComponentMain_C::DampValue' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispName) == 0x000448, "Member 'UBP_PsychicComponentMain_C::bDbDispName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispIndex) == 0x000449, "Member 'UBP_PsychicComponentMain_C::bDbDispIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispState) == 0x00044A, "Member 'UBP_PsychicComponentMain_C::bDbDispState' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispSearchInfo) == 0x00044B, "Member 'UBP_PsychicComponentMain_C::bDbDispSearchInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispDistance) == 0x00044C, "Member 'UBP_PsychicComponentMain_C::bDbDispDistance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispPos) == 0x00044D, "Member 'UBP_PsychicComponentMain_C::bDbDispPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispGauge) == 0x00044E, "Member 'UBP_PsychicComponentMain_C::bDbDispGauge' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispHit) == 0x00044F, "Member 'UBP_PsychicComponentMain_C::bDbDispHit' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispAttack) == 0x000450, "Member 'UBP_PsychicComponentMain_C::bDbDispAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispArrow) == 0x000451, "Member 'UBP_PsychicComponentMain_C::bDbDispArrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispAura) == 0x000452, "Member 'UBP_PsychicComponentMain_C::bDbDispAura' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbUseInertialMove) == 0x000453, "Member 'UBP_PsychicComponentMain_C::bDbUseInertialMove' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundLiftUp) == 0x000458, "Member 'UBP_PsychicComponentMain_C::SoundLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundAttack) == 0x000460, "Member 'UBP_PsychicComponentMain_C::SoundAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundAttackThrow) == 0x000470, "Member 'UBP_PsychicComponentMain_C::SoundAttackThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundAttackCombo) == 0x000478, "Member 'UBP_PsychicComponentMain_C::SoundAttackCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundHitGround) == 0x000480, "Member 'UBP_PsychicComponentMain_C::SoundHitGround' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundHitEnemy) == 0x000488, "Member 'UBP_PsychicComponentMain_C::SoundHitEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartSpeedCurve) == 0x000490, "Member 'UBP_PsychicComponentMain_C::GrabStartSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartRotateCurve) == 0x000498, "Member 'UBP_PsychicComponentMain_C::GrabStartRotateCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartTimeRange) == 0x0004A0, "Member 'UBP_PsychicComponentMain_C::GrabStartTimeRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartSpeedRange) == 0x0004B0, "Member 'UBP_PsychicComponentMain_C::GrabStartSpeedRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartRotateRange) == 0x0004C0, "Member 'UBP_PsychicComponentMain_C::GrabStartRotateRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartMoveTime) == 0x0004D0, "Member 'UBP_PsychicComponentMain_C::GrabStartMoveTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartRotateTime) == 0x0004D4, "Member 'UBP_PsychicComponentMain_C::GrabStartRotateTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabStartRight) == 0x0004D8, "Member 'UBP_PsychicComponentMain_C::bGrabStartRight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bGrabStart) == 0x0004D9, "Member 'UBP_PsychicComponentMain_C::bGrabStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, VecGrabStart) == 0x0004DC, "Member 'UBP_PsychicComponentMain_C::VecGrabStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PosGrabStart) == 0x0004E8, "Member 'UBP_PsychicComponentMain_C::PosGrabStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartRate) == 0x0004F4, "Member 'UBP_PsychicComponentMain_C::GrabStartRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartTimeRate) == 0x0004F8, "Member 'UBP_PsychicComponentMain_C::GrabStartTimeRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartSpeedRate) == 0x0004FC, "Member 'UBP_PsychicComponentMain_C::GrabStartSpeedRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, GrabStartRotateRate) == 0x000500, "Member 'UBP_PsychicComponentMain_C::GrabStartRotateRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDeformable) == 0x000504, "Member 'UBP_PsychicComponentMain_C::bDeformable' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DeformType) == 0x000505, "Member 'UBP_PsychicComponentMain_C::DeformType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DeformRange) == 0x000508, "Member 'UBP_PsychicComponentMain_C::DeformRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DeformRate) == 0x00050C, "Member 'UBP_PsychicComponentMain_C::DeformRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, DeformRandom) == 0x000510, "Member 'UBP_PsychicComponentMain_C::DeformRandom' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PosImpact) == 0x000514, "Member 'UBP_PsychicComponentMain_C::PosImpact' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispDeform) == 0x000520, "Member 'UBP_PsychicComponentMain_C::bDbDispDeform' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PosPrevThrow) == 0x000524, "Member 'UBP_PsychicComponentMain_C::PosPrevThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowStartAngleCurve) == 0x000530, "Member 'UBP_PsychicComponentMain_C::ThrowStartAngleCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowStartRotSpeed) == 0x000538, "Member 'UBP_PsychicComponentMain_C::ThrowStartRotSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowStartInitAngle) == 0x00053C, "Member 'UBP_PsychicComponentMain_C::ThrowStartInitAngle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bThrowStart) == 0x000540, "Member 'UBP_PsychicComponentMain_C::bThrowStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowStartRate) == 0x000544, "Member 'UBP_PsychicComponentMain_C::ThrowStartRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllHeightCurve) == 0x000548, "Member 'UBP_PsychicComponentMain_C::ThrowAllHeightCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllHeight) == 0x000550, "Member 'UBP_PsychicComponentMain_C::ThrowAllHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bThrowAll) == 0x000554, "Member 'UBP_PsychicComponentMain_C::bThrowAll' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bThrowAllTarget) == 0x000555, "Member 'UBP_PsychicComponentMain_C::bThrowAllTarget' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllTargetPos) == 0x000558, "Member 'UBP_PsychicComponentMain_C::ThrowAllTargetPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllTimer) == 0x000564, "Member 'UBP_PsychicComponentMain_C::ThrowAllTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllIndex) == 0x000568, "Member 'UBP_PsychicComponentMain_C::ThrowAllIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllVector) == 0x00056C, "Member 'UBP_PsychicComponentMain_C::ThrowAllVector' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllOffset) == 0x000578, "Member 'UBP_PsychicComponentMain_C::ThrowAllOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllAngle) == 0x000584, "Member 'UBP_PsychicComponentMain_C::ThrowAllAngle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllAngleExt) == 0x000588, "Member 'UBP_PsychicComponentMain_C::ThrowAllAngleExt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllRadius) == 0x00058C, "Member 'UBP_PsychicComponentMain_C::ThrowAllRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ThrowAllRadiusExt) == 0x000590, "Member 'UBP_PsychicComponentMain_C::ThrowAllRadiusExt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatTime) == 0x000594, "Member 'UBP_PsychicComponentMain_C::BrainFloatTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatHeightBase) == 0x000598, "Member 'UBP_PsychicComponentMain_C::BrainFloatHeightBase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatHeightRange) == 0x00059C, "Member 'UBP_PsychicComponentMain_C::BrainFloatHeightRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatSlopeDistSq) == 0x0005A0, "Member 'UBP_PsychicComponentMain_C::BrainFloatSlopeDistSq' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatSlopeMax) == 0x0005A4, "Member 'UBP_PsychicComponentMain_C::BrainFloatSlopeMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatSlopeMin) == 0x0005A8, "Member 'UBP_PsychicComponentMain_C::BrainFloatSlopeMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFloatPos) == 0x0005AC, "Member 'UBP_PsychicComponentMain_C::BrainFloatPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bBrainFloat) == 0x0005B8, "Member 'UBP_PsychicComponentMain_C::bBrainFloat' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, RotBrainFloatStt) == 0x0005BC, "Member 'UBP_PsychicComponentMain_C::RotBrainFloatStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PosBrainFloatEnd) == 0x0005C8, "Member 'UBP_PsychicComponentMain_C::PosBrainFloatEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, brainFloatTimer) == 0x0005D4, "Member 'UBP_PsychicComponentMain_C::brainFloatTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, brainFloatSlope) == 0x0005D8, "Member 'UBP_PsychicComponentMain_C::brainFloatSlope' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bFacetsApparition) == 0x0005DC, "Member 'UBP_PsychicComponentMain_C::bFacetsApparition' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetAffectPoint) == 0x0005E0, "Member 'UBP_PsychicComponentMain_C::FacetAffectPoint' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetTime) == 0x0005EC, "Member 'UBP_PsychicComponentMain_C::FacetTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetTimer) == 0x0005F0, "Member 'UBP_PsychicComponentMain_C::FacetTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetTimerSign) == 0x0005F4, "Member 'UBP_PsychicComponentMain_C::FacetTimerSign' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetDistance) == 0x0005F8, "Member 'UBP_PsychicComponentMain_C::FacetDistance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetAxisOffset) == 0x0005FC, "Member 'UBP_PsychicComponentMain_C::FacetAxisOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetBulgeOffset) == 0x000600, "Member 'UBP_PsychicComponentMain_C::FacetBulgeOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetBulgeDistacne) == 0x000604, "Member 'UBP_PsychicComponentMain_C::FacetBulgeDistacne' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetTurn) == 0x000608, "Member 'UBP_PsychicComponentMain_C::FacetTurn' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetScaleMin) == 0x00060C, "Member 'UBP_PsychicComponentMain_C::FacetScaleMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetAffectPointTop) == 0x000610, "Member 'UBP_PsychicComponentMain_C::FacetAffectPointTop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FacetAffectPointBtm) == 0x000614, "Member 'UBP_PsychicComponentMain_C::FacetAffectPointBtm' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bBrainAppear) == 0x000618, "Member 'UBP_PsychicComponentMain_C::bBrainAppear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bBrainDisappear) == 0x000619, "Member 'UBP_PsychicComponentMain_C::bBrainDisappear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainAppearTime) == 0x00061C, "Member 'UBP_PsychicComponentMain_C::BrainAppearTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bBrainFieldAttack) == 0x000620, "Member 'UBP_PsychicComponentMain_C::bBrainFieldAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFieldAttackWaitTime) == 0x000624, "Member 'UBP_PsychicComponentMain_C::BrainFieldAttackWaitTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, BrainFieldAttackWaitTimer) == 0x000628, "Member 'UBP_PsychicComponentMain_C::BrainFieldAttackWaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FadeInTime) == 0x00062C, "Member 'UBP_PsychicComponentMain_C::FadeInTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FadeOutTime) == 0x000630, "Member 'UBP_PsychicComponentMain_C::FadeOutTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bFade) == 0x000634, "Member 'UBP_PsychicComponentMain_C::bFade' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bFadeOut) == 0x000635, "Member 'UBP_PsychicComponentMain_C::bFadeOut' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, FadeTimer) == 0x000638, "Member 'UBP_PsychicComponentMain_C::FadeTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleRateCapture) == 0x00063C, "Member 'UBP_PsychicComponentMain_C::ParticleRateCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleRateCaptureAura) == 0x000640, "Member 'UBP_PsychicComponentMain_C::ParticleRateCaptureAura' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleRateFire) == 0x000644, "Member 'UBP_PsychicComponentMain_C::ParticleRateFire' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleRateThunder) == 0x000648, "Member 'UBP_PsychicComponentMain_C::ParticleRateThunder' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleRateCopy) == 0x00064C, "Member 'UBP_PsychicComponentMain_C::ParticleRateCopy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SoundCueSheet) == 0x000650, "Member 'UBP_PsychicComponentMain_C::SoundCueSheet' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bTeleport) == 0x000658, "Member 'UBP_PsychicComponentMain_C::bTeleport' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bTeleportStart) == 0x000659, "Member 'UBP_PsychicComponentMain_C::bTeleportStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bTeleportAttach) == 0x00065A, "Member 'UBP_PsychicComponentMain_C::bTeleportAttach' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TeleportOffset) == 0x00065C, "Member 'UBP_PsychicComponentMain_C::TeleportOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TeleportTime) == 0x000668, "Member 'UBP_PsychicComponentMain_C::TeleportTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TeleportTimer) == 0x00066C, "Member 'UBP_PsychicComponentMain_C::TeleportTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TeleportStt) == 0x000670, "Member 'UBP_PsychicComponentMain_C::TeleportStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TeleportEnd) == 0x000674, "Member 'UBP_PsychicComponentMain_C::TeleportEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TeleportRate) == 0x000678, "Member 'UBP_PsychicComponentMain_C::TeleportRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAdjustAttach) == 0x00067C, "Member 'UBP_PsychicComponentMain_C::bAdjustAttach' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AdjustTime) == 0x000680, "Member 'UBP_PsychicComponentMain_C::AdjustTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AdjustTimer) == 0x000684, "Member 'UBP_PsychicComponentMain_C::AdjustTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AdjustSPosStt) == 0x000688, "Member 'UBP_PsychicComponentMain_C::AdjustSPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, AdjustRotStt) == 0x000694, "Member 'UBP_PsychicComponentMain_C::AdjustRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCaptureMaterial) == 0x0006A0, "Member 'UBP_PsychicComponentMain_C::bCaptureMaterial' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CaptureMaterialRate) == 0x0006A4, "Member 'UBP_PsychicComponentMain_C::CaptureMaterialRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bDbDispCollision) == 0x0006A8, "Member 'UBP_PsychicComponentMain_C::bDbDispCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, SasKindPrev) == 0x0006A9, "Member 'UBP_PsychicComponentMain_C::SasKindPrev' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bStealth) == 0x0006AA, "Member 'UBP_PsychicComponentMain_C::bStealth' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bStealthLerp) == 0x0006AB, "Member 'UBP_PsychicComponentMain_C::bStealthLerp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bStealthStart) == 0x0006AC, "Member 'UBP_PsychicComponentMain_C::bStealthStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, StealthTime) == 0x0006B0, "Member 'UBP_PsychicComponentMain_C::StealthTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, StealthTimer) == 0x0006B4, "Member 'UBP_PsychicComponentMain_C::StealthTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, StealthStt) == 0x0006B8, "Member 'UBP_PsychicComponentMain_C::StealthStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, StealthEnd) == 0x0006BC, "Member 'UBP_PsychicComponentMain_C::StealthEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, StealthRate) == 0x0006C0, "Member 'UBP_PsychicComponentMain_C::StealthRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bFullHoming) == 0x0006C4, "Member 'UBP_PsychicComponentMain_C::bFullHoming' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, HomingRoll) == 0x0006C8, "Member 'UBP_PsychicComponentMain_C::HomingRoll' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyObjSource) == 0x0006D0, "Member 'UBP_PsychicComponentMain_C::CopyObjSource' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyObj) == 0x0006D8, "Member 'UBP_PsychicComponentMain_C::CopyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCopyObj) == 0x0006E0, "Member 'UBP_PsychicComponentMain_C::bCopyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCopyCombo) == 0x0006E1, "Member 'UBP_PsychicComponentMain_C::bCopyCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCopyAppear) == 0x0006E2, "Member 'UBP_PsychicComponentMain_C::bCopyAppear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bCopyObjUpdate) == 0x0006E3, "Member 'UBP_PsychicComponentMain_C::bCopyObjUpdate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyEffectTimer) == 0x0006E4, "Member 'UBP_PsychicComponentMain_C::CopyEffectTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyEffectRate) == 0x0006F0, "Member 'UBP_PsychicComponentMain_C::CopyEffectRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyEffectTime) == 0x0006F4, "Member 'UBP_PsychicComponentMain_C::CopyEffectTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bTransferAppear) == 0x0006F8, "Member 'UBP_PsychicComponentMain_C::bTransferAppear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TransferTime) == 0x0006FC, "Member 'UBP_PsychicComponentMain_C::TransferTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, TransferTimer) == 0x000700, "Member 'UBP_PsychicComponentMain_C::TransferTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PosCenPrev) == 0x000704, "Member 'UBP_PsychicComponentMain_C::PosCenPrev' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyDelayTime) == 0x000710, "Member 'UBP_PsychicComponentMain_C::CopyDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyDelayTimer) == 0x000714, "Member 'UBP_PsychicComponentMain_C::CopyDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CopyOffsetPos) == 0x000720, "Member 'UBP_PsychicComponentMain_C::CopyOffsetPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bNewAttach) == 0x00072C, "Member 'UBP_PsychicComponentMain_C::bNewAttach' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EmPsyObjOwner) == 0x000730, "Member 'UBP_PsychicComponentMain_C::EmPsyObjOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EmPsyObjAttacker) == 0x000738, "Member 'UBP_PsychicComponentMain_C::EmPsyObjAttacker' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EmPsyObjOccupiedMain) == 0x000740, "Member 'UBP_PsychicComponentMain_C::EmPsyObjOccupiedMain' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bIntercepted) == 0x000741, "Member 'UBP_PsychicComponentMain_C::bIntercepted' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleSizeCapture) == 0x000744, "Member 'UBP_PsychicComponentMain_C::ParticleSizeCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleSizeCaptureAura) == 0x000750, "Member 'UBP_PsychicComponentMain_C::ParticleSizeCaptureAura' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleSizeFire) == 0x00075C, "Member 'UBP_PsychicComponentMain_C::ParticleSizeFire' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleSizeThunder) == 0x000768, "Member 'UBP_PsychicComponentMain_C::ParticleSizeThunder' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, ParticleSizeCopy) == 0x000774, "Member 'UBP_PsychicComponentMain_C::ParticleSizeCopy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bEffectSas) == 0x000780, "Member 'UBP_PsychicComponentMain_C::bEffectSas' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EffectSasTimer) == 0x000784, "Member 'UBP_PsychicComponentMain_C::EffectSasTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialParamNormal) == 0x000788, "Member 'UBP_PsychicComponentMain_C::MaterialParamNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialParamFire) == 0x000828, "Member 'UBP_PsychicComponentMain_C::MaterialParamFire' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialParamThunder) == 0x0008C8, "Member 'UBP_PsychicComponentMain_C::MaterialParamThunder' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialParamStart) == 0x000968, "Member 'UBP_PsychicComponentMain_C::MaterialParamStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialCurveNormal) == 0x000A08, "Member 'UBP_PsychicComponentMain_C::MaterialCurveNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialCurveFire) == 0x000A10, "Member 'UBP_PsychicComponentMain_C::MaterialCurveFire' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialCurveThunder) == 0x000A18, "Member 'UBP_PsychicComponentMain_C::MaterialCurveThunder' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, MaterialCurveStart) == 0x000A20, "Member 'UBP_PsychicComponentMain_C::MaterialCurveStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bThrowDirect) == 0x000A28, "Member 'UBP_PsychicComponentMain_C::bThrowDirect' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bLiftUpDirect) == 0x000A29, "Member 'UBP_PsychicComponentMain_C::bLiftUpDirect' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftUpDirectTimer) == 0x000A2C, "Member 'UBP_PsychicComponentMain_C::LiftUpDirectTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftUpDirectTime) == 0x000A38, "Member 'UBP_PsychicComponentMain_C::LiftUpDirectTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, LiftUpDirectHeight) == 0x000A3C, "Member 'UBP_PsychicComponentMain_C::LiftUpDirectHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, WorkPosStt) == 0x000A40, "Member 'UBP_PsychicComponentMain_C::WorkPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, WorkPosEnd) == 0x000A4C, "Member 'UBP_PsychicComponentMain_C::WorkPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, WorkRotStt) == 0x000A58, "Member 'UBP_PsychicComponentMain_C::WorkRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, WorkRotEnd) == 0x000A64, "Member 'UBP_PsychicComponentMain_C::WorkRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, PreviousTransform) == 0x000A70, "Member 'UBP_PsychicComponentMain_C::PreviousTransform' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, UpdateLastTransform) == 0x000AA0, "Member 'UBP_PsychicComponentMain_C::UpdateLastTransform' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bKeepAttackCollision) == 0x000AD0, "Member 'UBP_PsychicComponentMain_C::bKeepAttackCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, CaptureMeshListOld) == 0x000AD8, "Member 'UBP_PsychicComponentMain_C::CaptureMeshListOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bSkipInitVisibility) == 0x000AE8, "Member 'UBP_PsychicComponentMain_C::bSkipInitVisibility' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EnemyCommonInfo) == 0x000AF0, "Member 'UBP_PsychicComponentMain_C::EnemyCommonInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, EnemySkillInfo) == 0x000B60, "Member 'UBP_PsychicComponentMain_C::EnemySkillInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bUseEnemyInfo) == 0x000C50, "Member 'UBP_PsychicComponentMain_C::bUseEnemyInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bInterceptReserve) == 0x000C51, "Member 'UBP_PsychicComponentMain_C::bInterceptReserve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bSkipInitPhysics2) == 0x000C52, "Member 'UBP_PsychicComponentMain_C::bSkipInitPhysics2' has a wrong offset!");
static_assert(offsetof(UBP_PsychicComponentMain_C, bAbolishMainSimulate) == 0x000C53, "Member 'UBP_PsychicComponentMain_C::bAbolishMainSimulate' has a wrong offset!");

}

