#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageFloatingControlComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ST_DamageFloatingData_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.ExecuteUbergraph_BP_DamageFloatingControlComponent
// 0x0030 (0x0030 - 0x0000)
struct BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_839A[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent) == 0x000008, "Wrong alignment on BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent) == 0x000030, "Wrong size on BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, EntryPoint) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000014, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, Temp_bool_IsClosed_Variable) == 0x000015, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, Temp_bool_Has_Been_Initd_Variable_1) == 0x000016, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, K2Node_DynamicCast_AsRSBattle_Character) == 0x000020, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent, Temp_bool_IsClosed_Variable_1) == 0x000029, "Member 'BP_DamageFloatingControlComponent_C_ExecuteUbergraph_BP_DamageFloatingControlComponent::Temp_bool_IsClosed_Variable_1' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.Update
// 0x06E0 (0x06E0 - 0x0000)
struct BP_DamageFloatingControlComponent_C_Update final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LAfterLocation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LBeforeLocation;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LOwnerCharacter;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LWorkLimitHeight;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LGroundLocation;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAfterUseValue;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LBeforeUseValue;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseValue;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDeltaSeconds;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LLimitMoveZ;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839C[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LOwner;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LMoveDistance;                                     // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LAddLocation;                                      // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0070(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839D[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_839E[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_1;         // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_839F[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleHalfHeight_HalfHeight;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_HalfHeight_1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83A0[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_2;         // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A1[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_3;         // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A2[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_Radius_1;                // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A3[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A4[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A5[0x2];                                     // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A6[0x1];                                     // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83A7[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base;             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A8[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83A9[0x1];                                     // 0x018B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83AA[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83AB[0x2];                                     // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83AC[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83AD[0x4];                                     // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0250(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_2;                     // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_2;                   // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83AE[0x1];                                     // 0x026B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_5;                          // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83AF[0x3];                                     // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2; // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B0[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B1[0x3];                                     // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B2[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_3;        // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B3[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_4;        // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B4[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B5[0x3];                                     // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_18;       // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_19;       // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_20;       // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0344(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B6[0x3];                                     // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_8;                          // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_8;                          // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_8;                          // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_4;                // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B7[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x03B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x03C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0453(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83B8[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x04A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x04B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x04C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83B9[0x3];                                     // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_21;       // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_5;                // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_6;                // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_22;       // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_9;                          // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_9;                          // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_9;                          // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_10;                         // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_10;                         // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_10;                         // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0504(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_11;                         // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_11;                         // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_11;                         // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x051C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83BA[0x3];                                     // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0520(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x0534(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83BB[0x3];                                     // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_4;                     // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x053C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0548(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_12;                         // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_12;                         // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_12;                         // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit_1;    // 0x0564(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue_1; // 0x05EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83BC[0x3];                                     // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x05F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x05F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83BD[0x2];                                     // 0x05F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0600(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x060C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0618(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0624(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0640(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0658(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0664(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83BE[0x3];                                     // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0674(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_7;                // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_13;                         // 0x0684(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_13;                         // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_13;                         // 0x068C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_23;       // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_24;       // 0x0694(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_25;       // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_26;       // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_5;                     // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3; // 0x06A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_27;       // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_5;        // 0x06B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83BF[0x3];                                     // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetGroundLocationSimple_ReturnValue;      // 0x06B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_28;       // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x06C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_7;        // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x06CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActive_bActive;                        // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_Update) == 0x000008, "Wrong alignment on BP_DamageFloatingControlComponent_C_Update");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_Update) == 0x0006E0, "Wrong size on BP_DamageFloatingControlComponent_C_Update");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, DeltaSec) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_Update::DeltaSec' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LAfterLocation) == 0x000004, "Member 'BP_DamageFloatingControlComponent_C_Update::LAfterLocation' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LBeforeLocation) == 0x000010, "Member 'BP_DamageFloatingControlComponent_C_Update::LBeforeLocation' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LOwnerCharacter) == 0x000020, "Member 'BP_DamageFloatingControlComponent_C_Update::LOwnerCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LWorkLimitHeight) == 0x000028, "Member 'BP_DamageFloatingControlComponent_C_Update::LWorkLimitHeight' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LGroundLocation) == 0x00002C, "Member 'BP_DamageFloatingControlComponent_C_Update::LGroundLocation' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LAfterUseValue) == 0x000038, "Member 'BP_DamageFloatingControlComponent_C_Update::LAfterUseValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LBeforeUseValue) == 0x00003C, "Member 'BP_DamageFloatingControlComponent_C_Update::LBeforeUseValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, UseValue) == 0x000040, "Member 'BP_DamageFloatingControlComponent_C_Update::UseValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LDeltaSeconds) == 0x000044, "Member 'BP_DamageFloatingControlComponent_C_Update::LDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LLimitMoveZ) == 0x000048, "Member 'BP_DamageFloatingControlComponent_C_Update::LLimitMoveZ' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LOwner) == 0x000050, "Member 'BP_DamageFloatingControlComponent_C_Update::LOwner' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LMoveDistance) == 0x000058, "Member 'BP_DamageFloatingControlComponent_C_Update::LMoveDistance' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, LAddLocation) == 0x000064, "Member 'BP_DamageFloatingControlComponent_C_Update::LAddLocation' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, Temp_object_Variable) == 0x000070, "Member 'BP_DamageFloatingControlComponent_C_Update::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000090, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_AsCommon_AIInterface_1) == 0x0000A8, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_AsCommon_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetCapsuleHalfHeight_HalfHeight) == 0x0000BC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetCapsuleHalfHeight_HalfHeight' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetCapsuleHalfHeight_HalfHeight_1) == 0x0000C0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetCapsuleHalfHeight_HalfHeight_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_AsCommon_AIInterface_2) == 0x0000C8, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_AsCommon_AIInterface_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_bSuccess_2) == 0x0000D8, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_AsCommon_AIInterface_3) == 0x0000E0, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_AsCommon_AIInterface_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_bSuccess_3) == 0x0000F0, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetCapsuleRadius_Radius) == 0x0000F4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetCapsuleRadius_Radius_1) == 0x0000F8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetCapsuleRadius_Radius_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsValid_ReturnValue) == 0x0000FC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000100, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X) == 0x00010C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y) == 0x000110, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z) == 0x000114, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000118, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsValid_ReturnValue_1) == 0x000124, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_1) == 0x000128, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_1) == 0x00012C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_1) == 0x000130, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsOver_ReturnValue) == 0x000134, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsEnable_ReturnValue) == 0x000135, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_2) == 0x000138, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_2) == 0x00013C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_2) == 0x000140, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000144, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_3) == 0x000150, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_3) == 0x000154, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_3) == 0x000158, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00015C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsOver_ReturnValue_1) == 0x00015D, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsEnable_ReturnValue_1) == 0x00015E, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000160, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FClamp_ReturnValue) == 0x000164, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000168, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00016C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000170, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_AsRSCharacter_Base) == 0x000178, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_AsRSCharacter_Base' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_DynamicCast_bSuccess_4) == 0x000180, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000184, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Not_PreBool_ReturnValue) == 0x000188, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Not_PreBool_ReturnValue_1) == 0x000189, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x00018A, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00018C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_4) == 0x000198, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_4) == 0x00019C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_4) == 0x0001A0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakRotator_Roll) == 0x0001A4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakRotator_Pitch) == 0x0001A8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakRotator_Yaw) == 0x0001AC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FClamp_ReturnValue_1) == 0x0001B0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeRotator_ReturnValue) == 0x0001B4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue) == 0x0001C0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0001C4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue) == 0x0001C8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0001D4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001D8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0001E4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0001E8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_VectorVector_ReturnValue) == 0x0001F4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000200, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000204, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000208, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00020C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000210, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000214, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BooleanAND_ReturnValue) == 0x000215, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000218, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x00021C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000220, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x000224, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000228, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x00022C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetTimeRange_MinTime) == 0x000230, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetTimeRange_MaxTime) == 0x000234, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000238, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetFloatValue_ReturnValue) == 0x00023C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FMax_ReturnValue) == 0x000240, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000244, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_FloatFloat_ReturnValue) == 0x000248, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, Temp_object_Variable_1) == 0x000250, "Member 'BP_DamageFloatingControlComponent_C_Update::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetOwner_ReturnValue) == 0x000260, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsValid_ReturnValue_2) == 0x000268, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsOver_ReturnValue_2) == 0x000269, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsOver_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsEnable_ReturnValue_2) == 0x00026A, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsEnable_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_5) == 0x00026C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_5) == 0x000270, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_5) == 0x000274, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000278, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000284, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2) == 0x000288, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00028C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_1) == 0x000290, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000294, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x000298, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_2) == 0x00029C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0002A0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_6) == 0x0002AC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_6) == 0x0002B0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_6) == 0x0002B4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0002B8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x0002BC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x0002C0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x0002C4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x0002C8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0002CC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x0002D0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x0002D4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NotEqual_FloatFloat_ReturnValue_3) == 0x0002D8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NotEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FClamp_ReturnValue_2) == 0x0002DC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0002E0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NotEqual_FloatFloat_ReturnValue_4) == 0x0002E4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NotEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue_1) == 0x0002E8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BooleanAND_ReturnValue_1) == 0x0002F4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0002F8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_18) == 0x0002FC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_19) == 0x000300, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000304, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakRotator_Roll_1) == 0x000310, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakRotator_Pitch_1) == 0x000314, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakRotator_Yaw_1) == 0x000318, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_20) == 0x00031C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeRotator_ReturnValue_1) == 0x000320, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x00032C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_7) == 0x000338, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_7) == 0x00033C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_7) == 0x000340, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000344, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000350, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000354, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_3) == 0x000360, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectVector_ReturnValue) == 0x000364, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_8) == 0x000370, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_8) == 0x000374, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_8) == 0x000378, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue_2) == 0x00037C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FClamp_ReturnValue_3) == 0x000388, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_4) == 0x00038C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue_3) == 0x000390, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00039C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0003A8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_MakeArray_Array) == 0x0003B0, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetOwner_ReturnValue_1) == 0x0003C0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x0003C8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000450, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_IsValid_ReturnValue_3) == 0x000451, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_bBlockingHit) == 0x000452, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_bInitialOverlap) == 0x000453, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Time) == 0x000454, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Distance) == 0x000458, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Location) == 0x00045C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_ImpactPoint) == 0x000468, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Normal) == 0x000474, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_ImpactNormal) == 0x000480, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_PhysMat) == 0x000490, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitActor) == 0x000498, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitComponent) == 0x0004A0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitBoneName) == 0x0004A8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitItem) == 0x0004B0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_FaceIndex) == 0x0004B4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_TraceStart) == 0x0004B8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_TraceEnd) == 0x0004C4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0004D0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_21) == 0x0004D4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_5) == 0x0004D8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_6) == 0x0004DC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_22) == 0x0004E0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_9) == 0x0004E4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_9' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_9) == 0x0004E8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_9' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_9) == 0x0004EC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_9' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0004F0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x0004F4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_10) == 0x0004F8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_10' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_10) == 0x0004FC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_10' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_10) == 0x000500, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_10' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue_4) == 0x000504, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_11) == 0x000510, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_11' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_11) == 0x000514, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_11' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_11) == 0x000518, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_11' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00051C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000520, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Abs_ReturnValue) == 0x00052C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Abs_ReturnValue_1) == 0x000530, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x000534, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FClamp_ReturnValue_4) == 0x000538, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FClamp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue_5) == 0x00053C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, K2Node_MakeArray_Array_1) == 0x000548, "Member 'BP_DamageFloatingControlComponent_C_Update::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_12) == 0x000558, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_12' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_12) == 0x00055C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_12' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_12) == 0x000560, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_12' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_CapsuleTraceSingleForObjects_OutHit_1) == 0x000564, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_CapsuleTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_CapsuleTraceSingleForObjects_ReturnValue_1) == 0x0005EC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_CapsuleTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0005F0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0005F4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0005F5, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Time_1) == 0x0005F8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Distance_1) == 0x0005FC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Location_1) == 0x000600, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_ImpactPoint_1) == 0x00060C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_Normal_1) == 0x000618, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000624, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_PhysMat_1) == 0x000630, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitActor_1) == 0x000638, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitComponent_1) == 0x000640, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitBoneName_1) == 0x000648, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_HitItem_1) == 0x000650, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_FaceIndex_1) == 0x000654, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_TraceStart_1) == 0x000658, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakHitResult_TraceEnd_1) == 0x000664, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000670, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000674, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_SelectFloat_ReturnValue_7) == 0x000680, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_SelectFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_X_13) == 0x000684, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_X_13' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Y_13) == 0x000688, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Y_13' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_BreakVector_Z_13) == 0x00068C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_BreakVector_Z_13' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_23) == 0x000690, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_24) == 0x000694, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_25) == 0x000698, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_26) == 0x00069C, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_FClamp_ReturnValue_5) == 0x0006A0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_FClamp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3) == 0x0006A4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x0006A8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_27) == 0x0006AC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_NotEqual_FloatFloat_ReturnValue_5) == 0x0006B0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_NotEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetGroundLocationSimple_ReturnValue) == 0x0006B4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetGroundLocationSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue_28) == 0x0006C0, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0006C4, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_Subtract_FloatFloat_ReturnValue_7) == 0x0006C8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_Subtract_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_MakeVector_ReturnValue_6) == 0x0006CC, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Update, CallFunc_GetActive_bActive) == 0x0006D8, "Member 'BP_DamageFloatingControlComponent_C_Update::CallFunc_GetActive_bActive' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.Start
// 0x01A8 (0x01A8 - 0x0000)
struct BP_DamageFloatingControlComponent_C_Start final
{
public:
	float                                         Param_Power;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Param_Rotation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Param_HitDir;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseValue;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C0[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C1[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C2[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C3[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C4[0x2];                                     // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C5[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C6[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_3;        // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C7[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C8[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83C9[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_4;        // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83CA[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_5;        // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83CB[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_3;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_6;        // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83CC[0x2];                                     // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83CD[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83CE[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83CF[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_DamageFloatingData                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0184(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_Start) == 0x000008, "Wrong alignment on BP_DamageFloatingControlComponent_C_Start");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_Start) == 0x0001A8, "Wrong size on BP_DamageFloatingControlComponent_C_Start");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, Param_Power) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_Start::Param_Power' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, Param_Rotation) == 0x000004, "Member 'BP_DamageFloatingControlComponent_C_Start::Param_Rotation' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, Param_HitDir) == 0x000010, "Member 'BP_DamageFloatingControlComponent_C_Start::Param_HitDir' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, UseValue) == 0x00001C, "Member 'BP_DamageFloatingControlComponent_C_Start::UseValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000030, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NormalizeToRange_ReturnValue) == 0x000040, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Lerp_ReturnValue) == 0x000044, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000050, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_SelectFloat_ReturnValue) == 0x000054, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000058, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_X) == 0x00006C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Y) == 0x000070, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Z) == 0x000074, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000078, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00007C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x00007D, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000080, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BooleanAND_ReturnValue_1) == 0x000084, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x00008C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000090, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_SelectFloat_ReturnValue_1) == 0x000094, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000098, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00009C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x0000A8, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_X_1) == 0x0000AC, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Y_1) == 0x0000B0, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Z_1) == 0x0000B4, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0000B8, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue_3) == 0x0000BC, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x0000C0, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BooleanAND_ReturnValue_2) == 0x0000C4, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000C8, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x0000CC, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D0, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x0000D4, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0000D8, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0000DC, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_SelectFloat_ReturnValue_2) == 0x0000E0, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakRotator_Roll_1) == 0x0000E4, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakRotator_Pitch_1) == 0x0000E8, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakRotator_Yaw_1) == 0x0000EC, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x0000F0, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0000FC, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x000100, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x000104, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000108, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue_4) == 0x000114, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_X_2) == 0x000118, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Y_2) == 0x00011C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Z_2) == 0x000120, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x000124, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000128, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00012C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x000130, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000134, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue_5) == 0x000140, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_X_3) == 0x000144, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Y_3) == 0x000148, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BreakVector_Z_3) == 0x00014C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x000150, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_NotEqual_FloatFloat_ReturnValue_6) == 0x000154, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_NotEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_BooleanAND_ReturnValue_3) == 0x000155, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000158, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GetOwner_ReturnValue) == 0x000160, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_IsValid_ReturnValue) == 0x000168, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00016C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_DegSin_ReturnValue) == 0x000178, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_DegCos_ReturnValue) == 0x00017C, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_IsValid_ReturnValue_1) == 0x000180, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GetDataTableRowFromName_OutRow) == 0x000184, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_Start, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001A4, "Member 'BP_DamageFloatingControlComponent_C_Start::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.GetActive
// 0x0001 (0x0001 - 0x0000)
struct BP_DamageFloatingControlComponent_C_GetActive final
{
public:
	bool                                          Param_bActive;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_GetActive) == 0x000001, "Wrong alignment on BP_DamageFloatingControlComponent_C_GetActive");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_GetActive) == 0x000001, "Wrong size on BP_DamageFloatingControlComponent_C_GetActive");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_GetActive, Param_bActive) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_GetActive::Param_bActive' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.End
// 0x0008 (0x0008 - 0x0000)
struct BP_DamageFloatingControlComponent_C_End final
{
public:
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_End) == 0x000008, "Wrong alignment on BP_DamageFloatingControlComponent_C_End");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_End) == 0x000008, "Wrong size on BP_DamageFloatingControlComponent_C_End");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_End, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_End::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.SetLanding
// 0x0020 (0x0020 - 0x0000)
struct BP_DamageFloatingControlComponent_C_SetLanding final
{
public:
	bool                                          Param_bLanding;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_SetLanding) == 0x000008, "Wrong alignment on BP_DamageFloatingControlComponent_C_SetLanding");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_SetLanding) == 0x000020, "Wrong size on BP_DamageFloatingControlComponent_C_SetLanding");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_SetLanding, Param_bLanding) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_SetLanding::Param_bLanding' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_SetLanding, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_DamageFloatingControlComponent_C_SetLanding::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_SetLanding, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_DamageFloatingControlComponent_C_SetLanding::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_SetLanding, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_DamageFloatingControlComponent_C_SetLanding::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.SetSlowMode
// 0x0001 (0x0001 - 0x0000)
struct BP_DamageFloatingControlComponent_C_SetSlowMode final
{
public:
	bool                                          bSlow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_SetSlowMode) == 0x000001, "Wrong alignment on BP_DamageFloatingControlComponent_C_SetSlowMode");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_SetSlowMode) == 0x000001, "Wrong size on BP_DamageFloatingControlComponent_C_SetSlowMode");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_SetSlowMode, bSlow) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_SetSlowMode::bSlow' has a wrong offset!");

// Function BP_DamageFloatingControlComponent.BP_DamageFloatingControlComponent_C.IsIgnoreLandingCheck
// 0x0004 (0x0004 - 0x0000)
struct BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck final
{
public:
	bool                                          bIgnoreLandingCheck;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIgnoreLandingCheck;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck) == 0x000001, "Wrong alignment on BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck");
static_assert(sizeof(BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck) == 0x000004, "Wrong size on BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck, bIgnoreLandingCheck) == 0x000000, "Member 'BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck::bIgnoreLandingCheck' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck, LIgnoreLandingCheck) == 0x000001, "Member 'BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck::LIgnoreLandingCheck' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck, CallFunc_IsEnable_ReturnValue) == 0x000002, "Member 'BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck, CallFunc_IsOver_ReturnValue) == 0x000003, "Member 'BP_DamageFloatingControlComponent_C_IsIgnoreLandingCheck::CallFunc_IsOver_ReturnValue' has a wrong offset!");

}

