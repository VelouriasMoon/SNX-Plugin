#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UseItemComponent

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EPlayerBattleVoiceType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UseItemComponent.BP_UseItemComponent_C
// 0x0070 (0x0130 - 0x00C0)
class UBP_UseItemComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         HUDMainGame;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FItemDataCell>                  ItemDataList;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EConsumeItemID                                ItemId;                                            // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHelpPlayer;                                       // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89E4[0x2];                                     // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecastTimeOld;                                     // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReviveNpc;                                        // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89E5[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameTimer>                     RecastTimerList;                                   // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EConsumeItemID                                CurrentItemID;                                     // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89E6[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 RecastTimeList;                                    // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 OriginalRecastTimeList;                            // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_UseItemComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ItemApply(bool bRevive);
	void SetItemID(EConsumeItemID InItemId, bool bInHelpPlayer, bool bInReviveNpc);
	void SpawnItemUseParticle(bool bAttach, class FName SocketName, bool bRevive);
	void SpawnItemEffectParticle(class USkeletalMeshComponent* TargetMesh);
	void GetItemTargetList(TArray<class ARSBattlePlayer_C*>* TargetList);
	void NpcItemCancelCheck(class ARSBattlePlayer_C* TargetPlayer);
	void GetItemData(EConsumeItemID Item_id_in, bool* bFound, struct FItemDataCell* Item_data);
	void GetItemAttackValue(EConsumeItemID Item_id_in, float* Value);
	void GetItemPsychicValue(EConsumeItemID Item_id_in, float* Value);
	void GetItemVitalityValue(EConsumeItemID Item_id_in, float* Value);
	void GetItemDefenceValue(EConsumeItemID Item_id_in, float* Value);
	void GetItemName(EConsumeItemID Item_id_in, class FName* Param_Name);
	void SetRecastTimer();
	void UpdateRecastTimer();
	void InitRecastTimeParameter();
	void ResetRecastTime();
	void GetItemTypeNum(EConsumeItemID ItemIdIn, int32* ItemTypeNum);
	void SetCurrentItemID();

	void IsRecastItem(bool* bRecast, EConsumeItemID* Param_ItemId) const;
	void GetItemID(EConsumeItemID* Item) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UseItemComponent_C">();
	}
	static class UBP_UseItemComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UseItemComponent_C>();
	}
};
static_assert(alignof(UBP_UseItemComponent_C) == 0x000008, "Wrong alignment on UBP_UseItemComponent_C");
static_assert(sizeof(UBP_UseItemComponent_C) == 0x000130, "Wrong size on UBP_UseItemComponent_C");
static_assert(offsetof(UBP_UseItemComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_UseItemComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, OwnerPlayer) == 0x0000C8, "Member 'UBP_UseItemComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, HUDMainGame) == 0x0000D0, "Member 'UBP_UseItemComponent_C::HUDMainGame' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, ItemDataList) == 0x0000D8, "Member 'UBP_UseItemComponent_C::ItemDataList' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, ItemId) == 0x0000E8, "Member 'UBP_UseItemComponent_C::ItemId' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, bHelpPlayer) == 0x0000E9, "Member 'UBP_UseItemComponent_C::bHelpPlayer' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, RecastTimeOld) == 0x0000EC, "Member 'UBP_UseItemComponent_C::RecastTimeOld' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, bReviveNpc) == 0x0000F0, "Member 'UBP_UseItemComponent_C::bReviveNpc' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, RecastTimerList) == 0x0000F8, "Member 'UBP_UseItemComponent_C::RecastTimerList' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, CurrentItemID) == 0x000108, "Member 'UBP_UseItemComponent_C::CurrentItemID' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, RecastTimeList) == 0x000110, "Member 'UBP_UseItemComponent_C::RecastTimeList' has a wrong offset!");
static_assert(offsetof(UBP_UseItemComponent_C, OriginalRecastTimeList) == 0x000120, "Member 'UBP_UseItemComponent_C::OriginalRecastTimeList' has a wrong offset!");

}

