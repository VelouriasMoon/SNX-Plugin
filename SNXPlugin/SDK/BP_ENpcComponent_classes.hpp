#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ENpcComponent

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Enum_EnemySound_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ENpcComponent.BP_ENpcComponent_C
// 0x0518 (0x05E0 - 0x00C8)
class UBP_ENpcComponent_C final : public UPlayerENpcBaseComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBoss;                                             // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9404[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TickClaimantList;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bBattle;                                           // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9405[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       PsychicObjectArray;                                // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   PsychicManagerName;                                // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       HitPsychicObjectArray;                             // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	ENpcKind                                      ENpcKind;                                          // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadBrainField;                                  // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseBrainField;                                    // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDispHud;                                          // 0x0123(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CurrentDispHudTime;                                // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DispHudTime;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReactionChance_0;                                 // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9406[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             ReactionChanceTimer;                               // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ReactionChanceTime;                                // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndChanceDrawingTime;                              // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeforeElapsedTime;                                 // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndChanceProbability;                              // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9407[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DodgeProbabilityFromPlayer;                        // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 DodgeProbabilityFromENPC;                          // 0x0160(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             DodgeCheckIntervalTimer;                           // 0x0170(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DodgeCheckIntervalTime;                            // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetChanceEndAction;                               // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9408[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitBattleStartLocation;                           // 0x0184(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndChanceCounterNormalProbability;                 // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndChanceCounterIntenseProbability;                // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      EndChanceCounterThinkType;                         // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableEndChanceCounter;                           // 0x0199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIntence;                                          // 0x019A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSelectChanceCounterOnce;                          // 0x019B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSeeThrough;                                       // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	SDK::ENpcKind                                 PreEnpcKind;                                       // 0x019D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitSpTrigger;                                     // 0x019E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9409[0x1];                                     // 0x019F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpActiveHpRate;                                    // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActiveSpTrigger;                                  // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_940A[0x3];                                     // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BFStartHpList;                                     // 0x01A8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CurrentBFStartHpIndex;                             // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpStart;                                          // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnpcSp;                                           // 0x01BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_940B[0x2];                                     // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             SpTriggerTimer;                                    // 0x01C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_940C[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpTriggerAttacker;                                 // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SpTriggerReceiver;                                 // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefalutSpTriggerStartHitSlowDelayTime;             // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSpTriggerStartSequencerDelayTime;           // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpTriggerState;                                    // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorkSpTriggerStartHitSlowDelayTime;                // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorkSpTriggerStartSequencerDelayTime;              // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrive;                                           // 0x01F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTimerPauseFlag;                                   // 0x01F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_940D[0x2];                                     // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_SASKind>                             SasKindList;                                       // 0x01F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 SASTimerList;                                      // 0x0208(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         HardenHP;                                          // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHardenHP;                                       // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadENPCBrainCrash;                              // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_940E[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EventDispatcherSASStart;                           // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsFirstUseSAS;                                     // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_940F[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstUseSASPastTime;                               // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirstUseSASIntervalTime;                           // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASFireCoolTimer;                                  // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASFireIntervalTime;                               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9410[0x4];                                     // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  SASStartingFlags;                                  // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 InterceptCheckObj;                                 // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptProbability;                              // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableInterceptDistance;                           // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableIntercept;                                  // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBindInterceptableEvent;                           // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInterceptInterval;                                // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9411[0x1];                                     // 0x0273(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             InterceptTimer;                                    // 0x0274(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InterceptIntervalTime;                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceSASRegistTime;                                // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceSASRegistPastTime;                            // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASElectricCoolTimer;                              // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASElectricIntervalTime;                           // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASStealthCoolTimer;                               // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASStealthIntervalTime;                            // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHitTrigger;                                      // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9412[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SASStartingTimer;                                  // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SASAcceptTime;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9413[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BFEndHpList;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CurrentBFEndHpIndex;                               // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DriveStartHP;                                      // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDodgeRangeAttack;                           // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInitDuelPole;                                    // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDuelPoleStart;                                   // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9414[0x1];                                     // 0x02D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DuelPoleStartHP;                                   // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdateDuelPole;                                  // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DuelPoleType;                                      // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DuelPoleCheckState;                                // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSealDodge;                                        // 0x02DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSealReactionChance;                               // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9415[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPlayerAIBattleThinkType>              EndChanceActionList;                               // 0x02E0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          bEnpcSpAll;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDriveThinkChange;                                // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCheckBrainFieldBT;                               // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSasFire;                                         // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSasElectric;                                     // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSasTeleport;                                     // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBrainFieldThinkChange;                           // 0x02F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChangedBrainFieldThink;                          // 0x02F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             DiscoverIconTimer;                                 // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   DiscoverTickClaimantName;                          // 0x0304(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DiscoverIconDispSeconds;                           // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Discover_Component_C*               EnpcDiscoverComponent;                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUnDiscover;                                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReadyDrive;                                       // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableTriggerSequenerReception;                   // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9416[0x1];                                     // 0x031B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SASStartTimer;                                     // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SASCounter;                                        // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9417[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SASStartTime;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_SASKind                                     ExecuteSASKind;                                    // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9418[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              UsedSasEnpc;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SASCodeFadeTime;                                   // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASCodeFadeTimer;                                  // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnpcSASCameraAttention_ActorIn;                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnpcSASCameraAttention_ChangeFov;                  // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9419[0x3];                                     // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnpcSASCameraAttention_TargetFov;                  // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnpcSASCameraAttention_FovIn;                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnpcSASCameraAttention_ActorOut;                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnpcSASCameraAttention_FovOut;                     // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ENPCBrainFieldTime;                                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNotDispHud;                                       // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941A[0x3];                                     // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StsrtBattleTimer;                                  // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SASUseCounter;                                     // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASTimeOutCounter;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartSASTimeOutCount;                            // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFriendEnemy;                                     // 0x0395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUpdateTriggerHit;                                 // 0x0396(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941B[0x1];                                     // 0x0397(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             EndUpdateTriggerHitTimer;                          // 0x0398(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDriveAttack;                                     // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReadyBrainField;                                  // 0x03A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAddBossList;                                      // 0x03A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCancelDrive;                                     // 0x03A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsForceWait;                                      // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941C[0x3];                                     // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerDamageDataNum;                                // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OwnerDirectDamageDataNum;                          // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsApplyPsychicObjectThrowParameter;                // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941D[0x3];                                     // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectshotThrowSpeed;                              // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectshotHomingSpeed;                             // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComboThrowSpeed;                                   // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComboHomingSpeed;                                  // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainfieldThrowSpeed;                              // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainfieldHomingSpeed;                             // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptThrowSpeed;                               // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterceptHomingSpeed;                              // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDownResetBattleThink;                           // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941E[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           DeadBeforeHitResult;                               // 0x03E0(0x01C0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsHitUniqueObject;                                 // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941F[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               HitUniqueObject;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdateDeadStaging;                                // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9420[0x3];                                     // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             DeadStagingTimer;                                  // 0x05B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DelayDeadStagingTime;                              // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateDeadStagingTime;                             // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeadStagingState;                                  // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeadStagingClaimantName;                           // 0x05CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdateOwnerDestroy;                               // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisableBattleStartBT;                             // 0x05D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckedBattleStartBT;                             // 0x05D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLoadEm8220;                                       // 0x05D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSimulatorWait;                                   // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAcceptBrainField;                                 // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableBattleStartVoice;                           // 0x05DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void EventDispatcherSASStart__DelegateSignature(EPlayerID SAS_PlayerID);
	void ExecuteUbergraph_BP_ENpcComponent(int32 EntryPoint);
	void CheckBattleStartBT();
	void OnSetEnemyBrainFieldEnd();
	void OnSetEnemyBrainFieldStart();
	void OnInterceptableThrow(class AActor* Psy_obj_actor_in, class AActor* Target_actor_in);
	void UnBindInterceptableThrow();
	void BindInterceptableThrow();
	void UnbindEnpcSASTick();
	void BindEnpcSASTick();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void SetEnemyBrainCrashPerformance(bool* bReturn);
	void SetEnemyBrainFieldStart();
	void SetEnemyBrainFieldEnd(bool bMoveBrainField, bool* bDummy);
	void OnSwitchVisibleBrainFieldLevel(bool bVisible);
	void SetEnemyWait();
	void ResetEnemyWait();
	void SetEnemyStealthSeeEnable(bool bON, bool* bReturn);
	void SetBoss(bool Param_bBoss);
	void SetTickEnable(bool bEnable, class FName ClaimantName);
	void On_Owner_Destroy();
	void NotifyStartBattle(bool bBrainFieldEnable);
	void NotifyEndBattle();
	void Notify_Dead();
	void UpdatePsychicObject();
	void AddPsychicObject(class ABP_PsychicObjectBasic_C* AddObj);
	void AddHitPsychicObject(class ABP_PsychicObjectBasic_C* HitPsychicObj, bool* IsAdd);
	void UpdateBrainField(float DeltaSec);
	void HitPsychicObjAddImpulse(class ABP_PsychicObjectBasic_C* HitPsychicObj);
	void UpdateHpDisplay(float DeltaSec);
	void IsPossibleDodgeNormalAttack(bool* bPossible, bool* bForceDodge);
	void IsReactionChance(bool* Param_bReactionChance);
	void UpdateReactionChance();
	void StartReactionChance();
	void EndReactionChance(bool bDown, bool bForce);
	void UpdateDodge();
	void SetChanceEndAction();
	void IsIntence(bool* Param_bIntence);
	void SetIntence(bool Param_bIntence);
	void StartSeeThrough();
	void EndSeeThrough();
	void UpdateSeeThrough();
	void SetEnpcKind(SDK::ENpcKind NewKind);
	void GetENpcKind(SDK::ENpcKind* Param_ENpcKind);
	void ResetEnpcKind();
	void SetHitSpTrigger(bool bHit);
	void GetHitSpTrigger(bool* Param_bHitSpTrigger);
	void GetSpActiveHpRate(float* ActiveHpRate);
	void GetActiveSpTrigger(bool* Param_bActiveSpTrigger);
	void SetActiveSpTrigger(bool Active);
	void CanSpTrigger(bool* bCanSpTrigger);
	void Check_Brain_Field_Start_Hp();
	void IsSpStart(bool* Param_bSpStart);
	void SetSpStart(bool Param_bSpStart);
	void UpdateEnpcSp();
	void StartEnpcSp(class AActor* Attacker, class AActor* Enemy);
	void EndEnpcSp();
	void CheckDriveStartHp();
	void RegisterEnpcSAS(E_SASKind Kind);
	void UnregisterSAS(E_SASKind Kind, bool bNoEffect);
	void ForceEndEnpcSAS();
	void UpdateSAS(float DeltaSeconds);
	void SetTimerPause(bool bPause);
	void ActiveEnpcSAS(E_SASKind Kind);
	void AddHardenDamage(float Damage);
	void SetHardenHP();
	void EndEnpcSAS(E_SASKind Kind);
	void IsUseBrainField(bool* Param_bUseBrainField);
	void Update_Execute_SAS(float DeltaSec);
	void SetSASStartingFlag(E_SASKind SasKind, bool Flag);
	void GetSASStartingFlag(E_SASKind SasKind, bool* Flag);
	void SetInterceptCheckObj(class AActor* InObj);
	void GetInterceptCheckObj(class AActor** OutObj);
	void ClearInterceptCheckObj();
	void StartInterceptAction(class AActor* InObj, class AActor* InTarget);
	void EndInterceptAction();
	void UpdateInterceptInterval(float DeltaSec);
	void IsDispStealthEffect(bool* bOutDisp);
	void IsActiveEnpcSASAll(bool* Active);
	void ResetForceSASRegist();
	void SetHitTrigger(bool Param_IsHitTrigger);
	void UpdateSASStartingTimer(E_SASKind SasKind, float DeltaSec, bool* IsReset);
	void CheckDriveStartBrainField(bool IsReady);
	void SetDuelPoleType(bool bDuelType, bool bCheckState, bool* bIsCompleted);
	void CheckDuelPoleStartHp();
	void UpdateStartInitDuelPole();
	void ChangeDuelPoleType(bool bDuelType, bool bDuelPoleCheckState);
	void SetRandomDuelPole();
	void StartStealthCriticalHitSlow(const struct FHCHitResult& HitResult);
	void IsSpTriggerAll(bool* IsSpTrigger);
	void SetSpTriggerAll(bool bSpTriggerAll);
	void ShowUnDiscoverIcon(bool IsForceDispIcon, bool* bDummy);
	void ShowDiscoverIcon(bool* bDummy);
	void UpdateDiscoverIcon(float DeltaSeconds, bool* bDummy);
	void GetDiscoverComponent(class UBP_Discover_Component_C** DiscoverComponent);
	void Exec_Drive(bool bForceExec, bool* bDummy);
	void EnableTriggerSequencerReception(bool Enable);
	void IsEnableTriggerSequencerReception(bool* Enable);
	void SetENPCOutline(bool Enable);
	void SetENPCOutlineColor(bool Enable);
	void IsActiveEnpcSASAcceleTelepo(bool* Param_IsActive);
	void GetDyingHpRate(float* DyingHpRate);
	void GetENPCBrainFieldTime(float* Param_ENPCBrainFieldTime);
	bool SetHitTrigger_CallFromCPP(bool bIsHitTrigger);
	bool StartReactionChance_CallFromCPP();
	void IsStartBattleTimer(bool* IsEffective);
	void UpdateStartBattleTimer(float DeltaSec);
	void FinishStartBattleTimer();
	void CancelDrive(bool* bDummy);
	void SetReadyDrive(bool bReady, bool* bDummy);
	void UpdateTriggerHit(float DeltaSec);
	void EnableUpdateTriggerHit(bool bEnable);
	void IsDriveAttacked(bool* IsAttacked);
	void SetDriveAttack();
	void IsReadyDriveWithCancel(bool* IsReadyDrive);
	void StartDriveDirect();
	void IsForceWait(bool* Param_bIsForceWait);
	void SetForceWait();
	void GetEnpcPsychicObjectThrowParameter(bool* IsApply, float* Param_DirectshotThrowSpeed, float* Param_DirectshotHomingSpeed, float* Param_ComboThrowSpeed, float* Param_ComboHomingSpeed, float* Param_BrainfieldThrowSpeed, float* Param_BrainfieldHomingSpeed, float* Param_InterceptThrowSpeed, float* Param_InterceptHomingSpeed);
	void IsResetBattleThink(bool* IsReset);
	void UpdateSpawn(float DeltaSec);
	void InitSpawn();
	void EnemyBrainFieldMoveNormalFieldOther();
	void SetDeadBeforeHitResult(const struct FHCHitResult& HitResult);
	void GetDeadBeforeHitResult(struct FHCHitResult* HitResult);
	void CheckHitUniqueObject(const struct FHCHitResult& HitResult);
	void UpdateHitUniqueObject();
	void Update_Dead_Staging(float DeltaSec);
	void StartDeadStaging();
	void IsCloseBrainField(bool* bCloseBrainField);
	void UpdateOwnerDestroy();
	void PlayBattleStartBT();
	void SetSimulatorWait(bool NewWait);
	void IsAcceptBrainField(bool* bAccept);
	void IsEnableStartBattle(bool* bBattleSimulator, bool* bEnableStartBattle);
	void LoadEnpcBrainFieldAsset();

	void GetEnemyInterfaceSound(Enum_EnemySound* Sound) const;
	void IsEnemyInterfaceBrainAccess(bool* bResult) const;
	void IsEnemyBossActive(bool* bResult) const;
	void IsEnemyActive(bool* bResult) const;
	void IsEnemyStateAttack(bool* bReturn) const;
	void IsEnemyStateDamage(bool* bReturn) const;
	void IsEnemyStateDamageDown(bool* bReturn) const;
	void GetEnemyGroundTransform(const struct FTransform& Transform, struct FTransform* Return) const;
	void IsBossEnemy(bool* Param_bBoss) const;
	void IsEnableEnemyMoveRange(bool* bReturn) const;
	void GetDistanceToPlayer(float* Distance) const;
	void IsInvisibleHPGauge(bool* bInvisible) const;
	void IsActiveEnpcSAS(E_SASKind Kind, bool* bActive) const;
	void GetSASMaxTime(E_SASKind Kind, float* Time) const;
	void IsEnableDodgeRangeAttack(bool* bEnable) const;
	void IsReadyDrive(bool* bReady) const;
	void GetSimulatorWait(bool* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ENpcComponent_C">();
	}
	static class UBP_ENpcComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ENpcComponent_C>();
	}
};
static_assert(alignof(UBP_ENpcComponent_C) == 0x000008, "Wrong alignment on UBP_ENpcComponent_C");
static_assert(sizeof(UBP_ENpcComponent_C) == 0x0005E0, "Wrong size on UBP_ENpcComponent_C");
static_assert(offsetof(UBP_ENpcComponent_C, UberGraphFrame) == 0x0000C8, "Member 'UBP_ENpcComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, OwnerPlayer) == 0x0000D0, "Member 'UBP_ENpcComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bBoss) == 0x0000D8, "Member 'UBP_ENpcComponent_C::bBoss' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, TickClaimantList) == 0x0000E0, "Member 'UBP_ENpcComponent_C::TickClaimantList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bBattle) == 0x0000F0, "Member 'UBP_ENpcComponent_C::bBattle' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, PsychicObjectArray) == 0x0000F8, "Member 'UBP_ENpcComponent_C::PsychicObjectArray' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, PsychicManagerName) == 0x000108, "Member 'UBP_ENpcComponent_C::PsychicManagerName' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, HitPsychicObjectArray) == 0x000110, "Member 'UBP_ENpcComponent_C::HitPsychicObjectArray' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ENpcKind) == 0x000120, "Member 'UBP_ENpcComponent_C::ENpcKind' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsLoadBrainField) == 0x000121, "Member 'UBP_ENpcComponent_C::IsLoadBrainField' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bUseBrainField) == 0x000122, "Member 'UBP_ENpcComponent_C::bUseBrainField' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bDispHud) == 0x000123, "Member 'UBP_ENpcComponent_C::bDispHud' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, CurrentDispHudTime) == 0x000124, "Member 'UBP_ENpcComponent_C::CurrentDispHudTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DispHudTime) == 0x000128, "Member 'UBP_ENpcComponent_C::DispHudTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bReactionChance_0) == 0x00012C, "Member 'UBP_ENpcComponent_C::bReactionChance_0' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ReactionChanceTimer) == 0x000130, "Member 'UBP_ENpcComponent_C::ReactionChanceTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ReactionChanceTime) == 0x00013C, "Member 'UBP_ENpcComponent_C::ReactionChanceTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndChanceDrawingTime) == 0x000140, "Member 'UBP_ENpcComponent_C::EndChanceDrawingTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, BeforeElapsedTime) == 0x000144, "Member 'UBP_ENpcComponent_C::BeforeElapsedTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndChanceProbability) == 0x000148, "Member 'UBP_ENpcComponent_C::EndChanceProbability' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DodgeProbabilityFromPlayer) == 0x000150, "Member 'UBP_ENpcComponent_C::DodgeProbabilityFromPlayer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DodgeProbabilityFromENPC) == 0x000160, "Member 'UBP_ENpcComponent_C::DodgeProbabilityFromENPC' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DodgeCheckIntervalTimer) == 0x000170, "Member 'UBP_ENpcComponent_C::DodgeCheckIntervalTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DodgeCheckIntervalTime) == 0x00017C, "Member 'UBP_ENpcComponent_C::DodgeCheckIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bSetChanceEndAction) == 0x000180, "Member 'UBP_ENpcComponent_C::bSetChanceEndAction' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InitBattleStartLocation) == 0x000184, "Member 'UBP_ENpcComponent_C::InitBattleStartLocation' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndChanceCounterNormalProbability) == 0x000190, "Member 'UBP_ENpcComponent_C::EndChanceCounterNormalProbability' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndChanceCounterIntenseProbability) == 0x000194, "Member 'UBP_ENpcComponent_C::EndChanceCounterIntenseProbability' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndChanceCounterThinkType) == 0x000198, "Member 'UBP_ENpcComponent_C::EndChanceCounterThinkType' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnableEndChanceCounter) == 0x000199, "Member 'UBP_ENpcComponent_C::bEnableEndChanceCounter' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bIntence) == 0x00019A, "Member 'UBP_ENpcComponent_C::bIntence' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bSelectChanceCounterOnce) == 0x00019B, "Member 'UBP_ENpcComponent_C::bSelectChanceCounterOnce' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bSeeThrough) == 0x00019C, "Member 'UBP_ENpcComponent_C::bSeeThrough' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, PreEnpcKind) == 0x00019D, "Member 'UBP_ENpcComponent_C::PreEnpcKind' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bHitSpTrigger) == 0x00019E, "Member 'UBP_ENpcComponent_C::bHitSpTrigger' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SpActiveHpRate) == 0x0001A0, "Member 'UBP_ENpcComponent_C::SpActiveHpRate' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bActiveSpTrigger) == 0x0001A4, "Member 'UBP_ENpcComponent_C::bActiveSpTrigger' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, BFStartHpList) == 0x0001A8, "Member 'UBP_ENpcComponent_C::BFStartHpList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, CurrentBFStartHpIndex) == 0x0001B8, "Member 'UBP_ENpcComponent_C::CurrentBFStartHpIndex' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bSpStart) == 0x0001BC, "Member 'UBP_ENpcComponent_C::bSpStart' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnpcSp) == 0x0001BD, "Member 'UBP_ENpcComponent_C::bEnpcSp' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SpTriggerTimer) == 0x0001C0, "Member 'UBP_ENpcComponent_C::SpTriggerTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SpTriggerAttacker) == 0x0001D0, "Member 'UBP_ENpcComponent_C::SpTriggerAttacker' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SpTriggerReceiver) == 0x0001D8, "Member 'UBP_ENpcComponent_C::SpTriggerReceiver' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DefalutSpTriggerStartHitSlowDelayTime) == 0x0001E0, "Member 'UBP_ENpcComponent_C::DefalutSpTriggerStartHitSlowDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DefaultSpTriggerStartSequencerDelayTime) == 0x0001E4, "Member 'UBP_ENpcComponent_C::DefaultSpTriggerStartSequencerDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SpTriggerState) == 0x0001E8, "Member 'UBP_ENpcComponent_C::SpTriggerState' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, WorkSpTriggerStartHitSlowDelayTime) == 0x0001EC, "Member 'UBP_ENpcComponent_C::WorkSpTriggerStartHitSlowDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, WorkSpTriggerStartSequencerDelayTime) == 0x0001F0, "Member 'UBP_ENpcComponent_C::WorkSpTriggerStartSequencerDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsDrive) == 0x0001F4, "Member 'UBP_ENpcComponent_C::IsDrive' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bTimerPauseFlag) == 0x0001F5, "Member 'UBP_ENpcComponent_C::bTimerPauseFlag' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SasKindList) == 0x0001F8, "Member 'UBP_ENpcComponent_C::SasKindList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASTimerList) == 0x000208, "Member 'UBP_ENpcComponent_C::SASTimerList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, HardenHP) == 0x000218, "Member 'UBP_ENpcComponent_C::HardenHP' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, MaxHardenHP) == 0x00021C, "Member 'UBP_ENpcComponent_C::MaxHardenHP' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsLoadENPCBrainCrash) == 0x000220, "Member 'UBP_ENpcComponent_C::IsLoadENPCBrainCrash' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EventDispatcherSASStart) == 0x000228, "Member 'UBP_ENpcComponent_C::EventDispatcherSASStart' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsFirstUseSAS) == 0x000238, "Member 'UBP_ENpcComponent_C::IsFirstUseSAS' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, FirstUseSASPastTime) == 0x00023C, "Member 'UBP_ENpcComponent_C::FirstUseSASPastTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, FirstUseSASIntervalTime) == 0x000240, "Member 'UBP_ENpcComponent_C::FirstUseSASIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASFireCoolTimer) == 0x000244, "Member 'UBP_ENpcComponent_C::SASFireCoolTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASFireIntervalTime) == 0x000248, "Member 'UBP_ENpcComponent_C::SASFireIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASStartingFlags) == 0x000250, "Member 'UBP_ENpcComponent_C::SASStartingFlags' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InterceptCheckObj) == 0x000260, "Member 'UBP_ENpcComponent_C::InterceptCheckObj' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InterceptProbability) == 0x000268, "Member 'UBP_ENpcComponent_C::InterceptProbability' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnableInterceptDistance) == 0x00026C, "Member 'UBP_ENpcComponent_C::EnableInterceptDistance' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnableIntercept) == 0x000270, "Member 'UBP_ENpcComponent_C::bEnableIntercept' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bBindInterceptableEvent) == 0x000271, "Member 'UBP_ENpcComponent_C::bBindInterceptableEvent' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bInterceptInterval) == 0x000272, "Member 'UBP_ENpcComponent_C::bInterceptInterval' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InterceptTimer) == 0x000274, "Member 'UBP_ENpcComponent_C::InterceptTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InterceptIntervalTime) == 0x000280, "Member 'UBP_ENpcComponent_C::InterceptIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ForceSASRegistTime) == 0x000284, "Member 'UBP_ENpcComponent_C::ForceSASRegistTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ForceSASRegistPastTime) == 0x000288, "Member 'UBP_ENpcComponent_C::ForceSASRegistPastTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASElectricCoolTimer) == 0x00028C, "Member 'UBP_ENpcComponent_C::SASElectricCoolTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASElectricIntervalTime) == 0x000290, "Member 'UBP_ENpcComponent_C::SASElectricIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASStealthCoolTimer) == 0x000294, "Member 'UBP_ENpcComponent_C::SASStealthCoolTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASStealthIntervalTime) == 0x000298, "Member 'UBP_ENpcComponent_C::SASStealthIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsHitTrigger) == 0x00029C, "Member 'UBP_ENpcComponent_C::IsHitTrigger' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASStartingTimer) == 0x0002A0, "Member 'UBP_ENpcComponent_C::SASStartingTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASAcceptTime) == 0x0002B0, "Member 'UBP_ENpcComponent_C::SASAcceptTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, BFEndHpList) == 0x0002B8, "Member 'UBP_ENpcComponent_C::BFEndHpList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, CurrentBFEndHpIndex) == 0x0002C8, "Member 'UBP_ENpcComponent_C::CurrentBFEndHpIndex' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DriveStartHP) == 0x0002CC, "Member 'UBP_ENpcComponent_C::DriveStartHP' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnableDodgeRangeAttack) == 0x0002D0, "Member 'UBP_ENpcComponent_C::bEnableDodgeRangeAttack' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsInitDuelPole) == 0x0002D1, "Member 'UBP_ENpcComponent_C::IsInitDuelPole' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsDuelPoleStart) == 0x0002D2, "Member 'UBP_ENpcComponent_C::IsDuelPoleStart' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DuelPoleStartHP) == 0x0002D4, "Member 'UBP_ENpcComponent_C::DuelPoleStartHP' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsUpdateDuelPole) == 0x0002D8, "Member 'UBP_ENpcComponent_C::IsUpdateDuelPole' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DuelPoleType) == 0x0002D9, "Member 'UBP_ENpcComponent_C::DuelPoleType' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DuelPoleCheckState) == 0x0002DA, "Member 'UBP_ENpcComponent_C::DuelPoleCheckState' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bSealDodge) == 0x0002DB, "Member 'UBP_ENpcComponent_C::bSealDodge' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bSealReactionChance) == 0x0002DC, "Member 'UBP_ENpcComponent_C::bSealReactionChance' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndChanceActionList) == 0x0002E0, "Member 'UBP_ENpcComponent_C::EndChanceActionList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnpcSpAll) == 0x0002F0, "Member 'UBP_ENpcComponent_C::bEnpcSpAll' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsDriveThinkChange) == 0x0002F1, "Member 'UBP_ENpcComponent_C::IsDriveThinkChange' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsCheckBrainFieldBT) == 0x0002F2, "Member 'UBP_ENpcComponent_C::IsCheckBrainFieldBT' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsSasFire) == 0x0002F3, "Member 'UBP_ENpcComponent_C::IsSasFire' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsSasElectric) == 0x0002F4, "Member 'UBP_ENpcComponent_C::IsSasElectric' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsSasTeleport) == 0x0002F5, "Member 'UBP_ENpcComponent_C::IsSasTeleport' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsBrainFieldThinkChange) == 0x0002F6, "Member 'UBP_ENpcComponent_C::IsBrainFieldThinkChange' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsChangedBrainFieldThink) == 0x0002F7, "Member 'UBP_ENpcComponent_C::IsChangedBrainFieldThink' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DiscoverIconTimer) == 0x0002F8, "Member 'UBP_ENpcComponent_C::DiscoverIconTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DiscoverTickClaimantName) == 0x000304, "Member 'UBP_ENpcComponent_C::DiscoverTickClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DiscoverIconDispSeconds) == 0x00030C, "Member 'UBP_ENpcComponent_C::DiscoverIconDispSeconds' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcDiscoverComponent) == 0x000310, "Member 'UBP_ENpcComponent_C::EnpcDiscoverComponent' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bUnDiscover) == 0x000318, "Member 'UBP_ENpcComponent_C::bUnDiscover' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bReadyDrive) == 0x000319, "Member 'UBP_ENpcComponent_C::bReadyDrive' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnableTriggerSequenerReception) == 0x00031A, "Member 'UBP_ENpcComponent_C::bEnableTriggerSequenerReception' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASStartTimer) == 0x00031C, "Member 'UBP_ENpcComponent_C::SASStartTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASCounter) == 0x000320, "Member 'UBP_ENpcComponent_C::SASCounter' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASStartTime) == 0x000328, "Member 'UBP_ENpcComponent_C::SASStartTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ExecuteSASKind) == 0x000338, "Member 'UBP_ENpcComponent_C::ExecuteSASKind' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, UsedSasEnpc) == 0x000340, "Member 'UBP_ENpcComponent_C::UsedSasEnpc' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASCodeFadeTime) == 0x000350, "Member 'UBP_ENpcComponent_C::SASCodeFadeTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASCodeFadeTimer) == 0x000354, "Member 'UBP_ENpcComponent_C::SASCodeFadeTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcSASCameraAttention_ActorIn) == 0x000358, "Member 'UBP_ENpcComponent_C::EnpcSASCameraAttention_ActorIn' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcSASCameraAttention_ChangeFov) == 0x000360, "Member 'UBP_ENpcComponent_C::EnpcSASCameraAttention_ChangeFov' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcSASCameraAttention_TargetFov) == 0x000364, "Member 'UBP_ENpcComponent_C::EnpcSASCameraAttention_TargetFov' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcSASCameraAttention_FovIn) == 0x000368, "Member 'UBP_ENpcComponent_C::EnpcSASCameraAttention_FovIn' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcSASCameraAttention_ActorOut) == 0x000370, "Member 'UBP_ENpcComponent_C::EnpcSASCameraAttention_ActorOut' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EnpcSASCameraAttention_FovOut) == 0x000378, "Member 'UBP_ENpcComponent_C::EnpcSASCameraAttention_FovOut' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ENPCBrainFieldTime) == 0x000380, "Member 'UBP_ENpcComponent_C::ENPCBrainFieldTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bNotDispHud) == 0x000384, "Member 'UBP_ENpcComponent_C::bNotDispHud' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, StsrtBattleTimer) == 0x000388, "Member 'UBP_ENpcComponent_C::StsrtBattleTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASUseCounter) == 0x00038C, "Member 'UBP_ENpcComponent_C::SASUseCounter' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, SASTimeOutCounter) == 0x000390, "Member 'UBP_ENpcComponent_C::SASTimeOutCounter' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsStartSASTimeOutCount) == 0x000394, "Member 'UBP_ENpcComponent_C::IsStartSASTimeOutCount' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsFriendEnemy) == 0x000395, "Member 'UBP_ENpcComponent_C::IsFriendEnemy' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bUpdateTriggerHit) == 0x000396, "Member 'UBP_ENpcComponent_C::bUpdateTriggerHit' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, EndUpdateTriggerHitTimer) == 0x000398, "Member 'UBP_ENpcComponent_C::EndUpdateTriggerHitTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsDriveAttack) == 0x0003A4, "Member 'UBP_ENpcComponent_C::IsDriveAttack' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bReadyBrainField) == 0x0003A5, "Member 'UBP_ENpcComponent_C::bReadyBrainField' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bAddBossList) == 0x0003A6, "Member 'UBP_ENpcComponent_C::bAddBossList' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsCancelDrive) == 0x0003A7, "Member 'UBP_ENpcComponent_C::IsCancelDrive' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bIsForceWait) == 0x0003A8, "Member 'UBP_ENpcComponent_C::bIsForceWait' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, OwnerDamageDataNum) == 0x0003AC, "Member 'UBP_ENpcComponent_C::OwnerDamageDataNum' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, OwnerDirectDamageDataNum) == 0x0003B0, "Member 'UBP_ENpcComponent_C::OwnerDirectDamageDataNum' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsApplyPsychicObjectThrowParameter) == 0x0003B4, "Member 'UBP_ENpcComponent_C::IsApplyPsychicObjectThrowParameter' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DirectshotThrowSpeed) == 0x0003B8, "Member 'UBP_ENpcComponent_C::DirectshotThrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DirectshotHomingSpeed) == 0x0003BC, "Member 'UBP_ENpcComponent_C::DirectshotHomingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ComboThrowSpeed) == 0x0003C0, "Member 'UBP_ENpcComponent_C::ComboThrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, ComboHomingSpeed) == 0x0003C4, "Member 'UBP_ENpcComponent_C::ComboHomingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, BrainfieldThrowSpeed) == 0x0003C8, "Member 'UBP_ENpcComponent_C::BrainfieldThrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, BrainfieldHomingSpeed) == 0x0003CC, "Member 'UBP_ENpcComponent_C::BrainfieldHomingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InterceptThrowSpeed) == 0x0003D0, "Member 'UBP_ENpcComponent_C::InterceptThrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, InterceptHomingSpeed) == 0x0003D4, "Member 'UBP_ENpcComponent_C::InterceptHomingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bIsDownResetBattleThink) == 0x0003D8, "Member 'UBP_ENpcComponent_C::bIsDownResetBattleThink' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DeadBeforeHitResult) == 0x0003E0, "Member 'UBP_ENpcComponent_C::DeadBeforeHitResult' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsHitUniqueObject) == 0x0005A0, "Member 'UBP_ENpcComponent_C::IsHitUniqueObject' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, HitUniqueObject) == 0x0005A8, "Member 'UBP_ENpcComponent_C::HitUniqueObject' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bUpdateDeadStaging) == 0x0005B0, "Member 'UBP_ENpcComponent_C::bUpdateDeadStaging' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DeadStagingTimer) == 0x0005B4, "Member 'UBP_ENpcComponent_C::DeadStagingTimer' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DelayDeadStagingTime) == 0x0005C0, "Member 'UBP_ENpcComponent_C::DelayDeadStagingTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, UpdateDeadStagingTime) == 0x0005C4, "Member 'UBP_ENpcComponent_C::UpdateDeadStagingTime' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DeadStagingState) == 0x0005C8, "Member 'UBP_ENpcComponent_C::DeadStagingState' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, DeadStagingClaimantName) == 0x0005CC, "Member 'UBP_ENpcComponent_C::DeadStagingClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bUpdateOwnerDestroy) == 0x0005D4, "Member 'UBP_ENpcComponent_C::bUpdateOwnerDestroy' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bDisableBattleStartBT) == 0x0005D5, "Member 'UBP_ENpcComponent_C::bDisableBattleStartBT' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bCheckedBattleStartBT) == 0x0005D6, "Member 'UBP_ENpcComponent_C::bCheckedBattleStartBT' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bLoadEm8220) == 0x0005D7, "Member 'UBP_ENpcComponent_C::bLoadEm8220' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, IsSimulatorWait) == 0x0005D8, "Member 'UBP_ENpcComponent_C::IsSimulatorWait' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bAcceptBrainField) == 0x0005D9, "Member 'UBP_ENpcComponent_C::bAcceptBrainField' has a wrong offset!");
static_assert(offsetof(UBP_ENpcComponent_C, bEnableBattleStartVoice) == 0x0005DA, "Member 'UBP_ENpcComponent_C::bEnableBattleStartVoice' has a wrong offset!");

}

