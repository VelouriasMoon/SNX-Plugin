#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ch_Psychic

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.ExecuteUbergraph_BTT_ch_Psychic
// 0x0040 (0x0040 - 0x0000)
struct BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6638[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6639[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic");
static_assert(sizeof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic) == 0x000040, "Wrong size on BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, EntryPoint) == 0x000000, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_OwnerController) == 0x000018, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_ControlledPawn) == 0x000020, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_OwnerController_2) == 0x000030, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic, K2Node_Event_ControlledPawn_2) == 0x000038, "Member 'BTT_ch_Psychic_C_ExecuteUbergraph_BTT_ch_Psychic::K2Node_Event_ControlledPawn_2' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTT_ch_Psychic_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_Psychic_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_ReceiveTickAI");
static_assert(sizeof(BTT_ch_Psychic_C_ReceiveTickAI) == 0x000018, "Wrong size on BTT_ch_Psychic_C_ReceiveTickAI");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTT_ch_Psychic_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_Psychic_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTT_ch_Psychic_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_ch_Psychic_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_Psychic_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_ReceiveAbortAI");
static_assert(sizeof(BTT_ch_Psychic_C_ReceiveAbortAI) == 0x000010, "Wrong size on BTT_ch_Psychic_C_ReceiveAbortAI");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'BTT_ch_Psychic_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_Psychic_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_ch_Psychic_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_Psychic_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_ch_Psychic_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_ch_Psychic_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_ch_Psychic_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_Psychic_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.Exit
// 0x0038 (0x0038 - 0x0000)
struct BTT_ch_Psychic_C_Exit final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_663A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_1;     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NextBattleThink_Dummy;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_ch_Psychic_C_Exit) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_Exit");
static_assert(sizeof(BTT_ch_Psychic_C_Exit) == 0x000038, "Wrong size on BTT_ch_Psychic_C_Exit");
static_assert(offsetof(BTT_ch_Psychic_C_Exit, ControlledPawn) == 0x000000, "Member 'BTT_ch_Psychic_C_Exit::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_Exit, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000008, "Member 'BTT_ch_Psychic_C_Exit::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_Exit, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTT_ch_Psychic_C_Exit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_Exit, K2Node_DynamicCast_AsBPI_Player_AIInterface_1) == 0x000020, "Member 'BTT_ch_Psychic_C_Exit::K2Node_DynamicCast_AsBPI_Player_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_Exit, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BTT_ch_Psychic_C_Exit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_Exit, CallFunc_NextBattleThink_Dummy) == 0x000031, "Member 'BTT_ch_Psychic_C_Exit::CallFunc_NextBattleThink_Dummy' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.Failed
// 0x0008 (0x0008 - 0x0000)
struct BTT_ch_Psychic_C_Failed final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_Psychic_C_Failed) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_Failed");
static_assert(sizeof(BTT_ch_Psychic_C_Failed) == 0x000008, "Wrong size on BTT_ch_Psychic_C_Failed");
static_assert(offsetof(BTT_ch_Psychic_C_Failed, ControlledPawn) == 0x000000, "Member 'BTT_ch_Psychic_C_Failed::ControlledPawn' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.TickPsychic
// 0x0060 (0x0060 - 0x0000)
struct BTT_ch_Psychic_C_TickPsychic final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        LHero;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetCapturePsychicObjectState_State;       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_1;            // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_2;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_663B[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_663C[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_1;     // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAIPsychicObject_bOK;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_ch_Psychic_C_TickPsychic) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_TickPsychic");
static_assert(sizeof(BTT_ch_Psychic_C_TickPsychic) == 0x000060, "Wrong size on BTT_ch_Psychic_C_TickPsychic");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, ControlledPawn) == 0x000000, "Member 'BTT_ch_Psychic_C_TickPsychic::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, LHero) == 0x000008, "Member 'BTT_ch_Psychic_C_TickPsychic::LHero' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000010, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_GetCapturePsychicObjectState_State) == 0x000019, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_GetCapturePsychicObjectState_State' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_IsEnableActionAttack_bEnable) == 0x00001B, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_IsUpperActionStatus_bResult) == 0x00001C, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_IsActionStatus_Result) == 0x00001D, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_IsUpperActionStatus_bResult_1) == 0x00001E, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_IsUpperActionStatus_bResult_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001F, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds) == 0x000020, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_IsActionStatus_Result_1) == 0x000028, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_IsUpperActionStatus_bResult_2) == 0x000029, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_IsUpperActionStatus_bResult_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000030, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_DynamicCast_AsBPI_Player_AIInterface_1) == 0x000048, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_DynamicCast_AsBPI_Player_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, CallFunc_CheckAIPsychicObject_bOK) == 0x000059, "Member 'BTT_ch_Psychic_C_TickPsychic::CallFunc_CheckAIPsychicObject_bOK' has a wrong offset!");
static_assert(offsetof(BTT_ch_Psychic_C_TickPsychic, K2Node_SwitchInteger_CmpSuccess) == 0x00005A, "Member 'BTT_ch_Psychic_C_TickPsychic::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BTT_ch_Psychic.BTT_ch_Psychic_C.Success
// 0x0008 (0x0008 - 0x0000)
struct BTT_ch_Psychic_C_Success final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_Psychic_C_Success) == 0x000008, "Wrong alignment on BTT_ch_Psychic_C_Success");
static_assert(sizeof(BTT_ch_Psychic_C_Success) == 0x000008, "Wrong size on BTT_ch_Psychic_C_Success");
static_assert(offsetof(BTT_ch_Psychic_C_Success, ControlledPawn) == 0x000000, "Member 'BTT_ch_Psychic_C_Success::ControlledPawn' has a wrong offset!");

}

