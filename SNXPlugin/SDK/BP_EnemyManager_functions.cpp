#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyManager

#include "Basic.hpp"

#include "BP_EnemyManager_classes.hpp"
#include "BP_EnemyManager_parameters.hpp"


namespace SDK
{

// Function BP_EnemyManager.BP_EnemyManager_C.OnDeadDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::OnDeadDispatcher__DelegateSignature(int32 GroupID, int32 SubGroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnDeadDispatcher__DelegateSignature");

	Params::BP_EnemyManager_C_OnDeadDispatcher__DelegateSignature Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GroupBattleStartDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::GroupBattleStartDispatcher__DelegateSignature(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GroupBattleStartDispatcher__DelegateSignature");

	Params::BP_EnemyManager_C_GroupBattleStartDispatcher__DelegateSignature Parms{};

	Parms.GroupID = GroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugUniqueEventDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventNo                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DebugUniqueEventDispatcher__DelegateSignature(int32 EventNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugUniqueEventDispatcher__DelegateSignature");

	Params::BP_EnemyManager_C_DebugUniqueEventDispatcher__DelegateSignature Parms{};

	Parms.EventNo = EventNo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EndDuelPoleDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::EndDuelPoleDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EndDuelPoleDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.ExecuteUbergraph_BP_EnemyManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::ExecuteUbergraph_BP_EnemyManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "ExecuteUbergraph_BP_EnemyManager");

	Params::BP_EnemyManager_C_ExecuteUbergraph_BP_EnemyManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EventReturnFromPhotoMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCameraCutPhotoMode                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::EventReturnFromPhotoMode(bool IsCameraCutPhotoMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EventReturnFromPhotoMode");

	Params::BP_EnemyManager_C_EventReturnFromPhotoMode Parms{};

	Parms.IsCameraCutPhotoMode = IsCameraCutPhotoMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnChangeAreaLoadStatus
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EChangeAreaStatus                       Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::OnChangeAreaLoadStatus(EChangeAreaStatus Status, bool IsChangeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnChangeAreaLoadStatus");

	Params::BP_EnemyManager_C_OnChangeAreaLoadStatus Parms{};

	Parms.Status = Status;
	Parms.IsChangeLocation = IsChangeLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EventReturnFromPartyMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::EventReturnFromPartyMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EventReturnFromPartyMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.StopEnemyAll_FromNative
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::StopEnemyAll_FromNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "StopEnemyAll_FromNative");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "ReceiveEndPlay");

	Params::BP_EnemyManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EventManagerRigitBodyEmptyUpdateSeconds
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RigitBodyEmptyUpdateSeconds                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EventManagerRigitBodyEmptyUpdateSeconds(float RigitBodyEmptyUpdateSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EventManagerRigitBodyEmptyUpdateSeconds");

	Params::BP_EnemyManager_C_EventManagerRigitBodyEmptyUpdateSeconds Parms{};

	Parms.RigitBodyEmptyUpdateSeconds = RigitBodyEmptyUpdateSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnBrainCrashTargetFloating
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::OnBrainCrashTargetFloating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnBrainCrashTargetFloating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "ReceiveTick");

	Params::BP_EnemyManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_EnemyManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnBrainCrashEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeginActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     PlayerEndMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::OnBrainCrashEnd(bool bBeginActor, class UAnimMontage* PlayerEndMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnBrainCrashEnd");

	Params::BP_EnemyManager_C_OnBrainCrashEnd Parms{};

	Parms.bBeginActor = bBeginActor;
	Parms.PlayerEndMontage = PlayerEndMontage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnBrainCrashDead
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::OnBrainCrashDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnBrainCrashDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnBrainCrashDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::OnBrainCrashDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnBrainCrashDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnBrainCrashStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeginActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::OnBrainCrashStart(bool bBeginActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnBrainCrashStart");

	Params::BP_EnemyManager_C_OnBrainCrashStart Parms{};

	Parms.bBeginActor = bBeginActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnBrainCrashStartUserMotion
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::OnBrainCrashStartUserMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnBrainCrashStartUserMotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateTick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::UpdateTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateTick");

	Params::BP_EnemyManager_C_UpdateTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetTickEnable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetTickEnable(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetTickEnable");

	Params::BP_EnemyManager_C_SetTickEnable Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetEnemySound
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::SetEnemySound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetEnemySound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetEnemySoundCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetEnemySoundCheck(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetEnemySoundCheck");

	Params::BP_EnemyManager_C_SetEnemySoundCheck Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetEnemySound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// Enum_EnemySound                         Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetEnemySound(Enum_EnemySound* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetEnemySound");

	Params::BP_EnemyManager_C_GetEnemySound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_EnemyManager.BP_EnemyManager_C.EnemyRigitBodyEmptyUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RigitBodyEmptyUpdateSeconds                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EnemyRigitBodyEmptyUpdate(float RigitBodyEmptyUpdateSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EnemyRigitBodyEmptyUpdate");

	Params::BP_EnemyManager_C_EnemyRigitBodyEmptyUpdate Parms{};

	Parms.RigitBodyEmptyUpdateSeconds = RigitBodyEmptyUpdateSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.AddBattleEnemyList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::AddBattleEnemyList(class AActor* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "AddBattleEnemyList");

	Params::BP_EnemyManager_C_AddBattleEnemyList Parms{};

	Parms.Enemy = Enemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SubBattleEnemyList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SubBattleEnemyList(class AActor* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SubBattleEnemyList");

	Params::BP_EnemyManager_C_SubBattleEnemyList Parms{};

	Parms.Enemy = Enemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetStealthSeeEnable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShadowChange                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetStealthSeeEnable(bool On, bool ShadowChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetStealthSeeEnable");

	Params::BP_EnemyManager_C_SetStealthSeeEnable Parms{};

	Parms.On = On;
	Parms.ShadowChange = ShadowChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsStealthSeeEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsStealthSeeEnable(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsStealthSeeEnable");

	Params::BP_EnemyManager_C_IsStealthSeeEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetBrainCrashParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BrainCrashTimer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BrainCrashMissScale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetBrainCrashParam(float BrainCrashTimer, float BrainCrashMissScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetBrainCrashParam");

	Params::BP_EnemyManager_C_SetBrainCrashParam Parms{};

	Parms.BrainCrashTimer = BrainCrashTimer;
	Parms.BrainCrashMissScale = BrainCrashMissScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetEnemyHitObjectType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<EObjectTypeQuery>                ObjectType                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetEnemyHitObjectType(TArray<EObjectTypeQuery>* ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetEnemyHitObjectType");

	Params::BP_EnemyManager_C_GetEnemyHitObjectType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectType != nullptr)
		*ObjectType = std::move(Parms.ObjectType);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetGroupEnemyCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CheckGroupdID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupCount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetGroupEnemyCount(int32 CheckGroupdID, int32* GroupCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetGroupEnemyCount");

	Params::BP_EnemyManager_C_GetGroupEnemyCount Parms{};

	Parms.CheckGroupdID = CheckGroupdID;

	UObject::ProcessEvent(Func, &Parms);

	if (GroupCount != nullptr)
		*GroupCount = Parms.GroupCount;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GroupBattleStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FenceBattleRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnceOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::GroupBattleStart(int32 GroupID, float FenceBattleRate, class FName UniqueId, bool IsOnceOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GroupBattleStart");

	Params::BP_EnemyManager_C_GroupBattleStart Parms{};

	Parms.GroupID = GroupID;
	Parms.FenceBattleRate = FenceBattleRate;
	Parms.UniqueId = UniqueId;
	Parms.IsOnceOnly = IsOnceOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.AddPsychicFlyObj
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PsychicObjectBasic_C*         PsychicFlyObj                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::AddPsychicFlyObj(class ABP_PsychicObjectBasic_C* PsychicFlyObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "AddPsychicFlyObj");

	Params::BP_EnemyManager_C_AddPsychicFlyObj Parms{};

	Parms.PsychicFlyObj = PsychicFlyObj;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CanUpdateEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanUpdate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::CanUpdateEnemy(bool* CanUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CanUpdateEnemy");

	Params::BP_EnemyManager_C_CanUpdateEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanUpdate != nullptr)
		*CanUpdate = Parms.CanUpdate;
}


// Function BP_EnemyManager.BP_EnemyManager_C.IncrementUpdateEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::IncrementUpdateEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IncrementUpdateEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugTargetEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DebugTargetEnemy(int32 Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugTargetEnemy");

	Params::BP_EnemyManager_C_DebugTargetEnemy Parms{};

	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugEnemySelectCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleEnemy_C*                 TargetEnemy                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DebugEnemySelectCommand(class ARSBattleEnemy_C* TargetEnemy, int32 Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugEnemySelectCommand");

	Params::BP_EnemyManager_C_DebugEnemySelectCommand Parms{};

	Parms.TargetEnemy = TargetEnemy;
	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugENPCSelectCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                TargetENPC                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DebugENPCSelectCommand(class ARSBattlePlayer_C* TargetENPC, int32 Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugENPCSelectCommand");

	Params::BP_EnemyManager_C_DebugENPCSelectCommand Parms{};

	Parms.TargetENPC = TargetENPC;
	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EnemyActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EnemyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DebugUpdate(class AActor* EnemyActor, int32 EnemyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugUpdate");

	Params::BP_EnemyManager_C_DebugUpdate Parms{};

	Parms.EnemyActor = EnemyActor;
	Parms.EnemyIndex = EnemyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetSubGroupEnemyCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CheckGroupdID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CheckSubGroupID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckSpawnConditionNow                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   GroupCount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetSubGroupEnemyCount(int32 CheckGroupdID, int32 CheckSubGroupID, bool CheckSpawnConditionNow, int32* GroupCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetSubGroupEnemyCount");

	Params::BP_EnemyManager_C_GetSubGroupEnemyCount Parms{};

	Parms.CheckGroupdID = CheckGroupdID;
	Parms.CheckSubGroupID = CheckSubGroupID;
	Parms.CheckSpawnConditionNow = CheckSpawnConditionNow;

	UObject::ProcessEvent(Func, &Parms);

	if (GroupCount != nullptr)
		*GroupCount = Parms.GroupCount;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SpawnAllEnemiesInSubGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SpawnAllEnemiesInSubGroup(int32 GroupID, int32 SubGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SpawnAllEnemiesInSubGroup");

	Params::BP_EnemyManager_C_SpawnAllEnemiesInSubGroup Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SpawnEnemyByName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EnemyName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SpawnEnemyByName(class FName EnemyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SpawnEnemyByName");

	Params::BP_EnemyManager_C_SpawnEnemyByName Parms{};

	Parms.EnemyName = EnemyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SpawnOneEnemyInSubGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnOK                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SpawnOneEnemyInSubGroup(int32 GroupID, int32 SubGroupID, bool* SpawnOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SpawnOneEnemyInSubGroup");

	Params::BP_EnemyManager_C_SpawnOneEnemyInSubGroup Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnOK != nullptr)
		*SpawnOK = Parms.SpawnOK;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SpawnAllEnemiesInGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SpawnAllEnemiesInGroup(int32 GroupID, int32 SubGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SpawnAllEnemiesInGroup");

	Params::BP_EnemyManager_C_SpawnAllEnemiesInGroup Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.KillEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::KillEnemy(class ARSCharacterBase* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "KillEnemy");

	Params::BP_EnemyManager_C_KillEnemy Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.KillAllEnemiesInGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::KillAllEnemiesInGroup(int32 GroupID, int32 SubGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "KillAllEnemiesInGroup");

	Params::BP_EnemyManager_C_KillAllEnemiesInGroup Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.KillAllEnemiesInSubGroup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::KillAllEnemiesInSubGroup(int32 GroupID, int32 SubGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "KillAllEnemiesInSubGroup");

	Params::BP_EnemyManager_C_KillAllEnemiesInSubGroup Parms{};

	Parms.GroupID = GroupID;
	Parms.SubGroupID = SubGroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CheckSeeEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSeeEnemy                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::CheckSeeEnemy(class AActor* Actor, const struct FVector& TargetLocation, bool* IsSeeEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CheckSeeEnemy");

	Params::BP_EnemyManager_C_CheckSeeEnemy Parms{};

	Parms.Actor = Actor;
	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (IsSeeEnemy != nullptr)
		*IsSeeEnemy = Parms.IsSeeEnemy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.EntryBrainCrashAccess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::EntryBrainCrashAccess(class ARSBattleCharacter_C* Character, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EntryBrainCrashAccess");

	Params::BP_EnemyManager_C_EntryBrainCrashAccess Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.LeaveBrainCrashAccess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::LeaveBrainCrashAccess(class ARSBattleCharacter_C* Character, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "LeaveBrainCrashAccess");

	Params::BP_EnemyManager_C_LeaveBrainCrashAccess Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SelectBrainCrashCharacter
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             TargetCharacter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SelectBrainCrashCharacter(class ARSBattleCharacter_C** TargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SelectBrainCrashCharacter");

	Params::BP_EnemyManager_C_SelectBrainCrashCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetCharacter != nullptr)
		*TargetCharacter = Parms.TargetCharacter;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetBrainCrashHUDTarget
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             BattleChara                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnablePlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetBrainCrashHUDTarget(class ARSBattleCharacter_C* BattleChara, bool bEnablePlayer, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetBrainCrashHUDTarget");

	Params::BP_EnemyManager_C_SetBrainCrashHUDTarget Parms{};

	Parms.BattleChara = BattleChara;
	Parms.bEnablePlayer = bEnablePlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.Usable Brain Crash Lock Target
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             TargetCharacter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::Usable_Brain_Crash_Lock_Target(class ARSBattleCharacter_C** TargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "Usable Brain Crash Lock Target");

	Params::BP_EnemyManager_C_Usable_Brain_Crash_Lock_Target Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetCharacter != nullptr)
		*TargetCharacter = Parms.TargetCharacter;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugSetAddDamageBlendWeight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DebugSetAddDamageBlendWeight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugSetAddDamageBlendWeight");

	Params::BP_EnemyManager_C_DebugSetAddDamageBlendWeight Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugResetAddDamageBlendWeight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugResetAddDamageBlendWeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugResetAddDamageBlendWeight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetENPCStartTransformbyID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECutsceneRootTransformID                ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetENPCStartTransformbyID(ECutsceneRootTransformID ID, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetENPCStartTransformbyID");

	Params::BP_EnemyManager_C_SetENPCStartTransformbyID Parms{};

	Parms.ID = ID;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetENPCStartTransformbyID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECutsceneRootTransformID                ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::GetENPCStartTransformbyID(ECutsceneRootTransformID ID, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetENPCStartTransformbyID");

	Params::BP_EnemyManager_C_GetENPCStartTransformbyID Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_EnemyManager.BP_EnemyManager_C.InitBadStateMaterialParam
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::InitBadStateMaterialParam(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "InitBadStateMaterialParam");

	Params::BP_EnemyManager_C_InitBadStateMaterialParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetBadStateMaterialParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCSkillAttribute                       Attribute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEnemyStateDataCell              Param                                                  (Parm, OutParm)
// bool                                    Find                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::GetBadStateMaterialParam(EHCSkillAttribute Attribute, struct FEnemyStateDataCell* Param, bool* Find)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetBadStateMaterialParam");

	Params::BP_EnemyManager_C_GetBadStateMaterialParam Parms{};

	Parms.Attribute = Attribute;

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = std::move(Parms.Param);

	if (Find != nullptr)
		*Find = Parms.Find;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDrawTargetingList
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDrawTargetingList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDrawTargetingList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDrawAttackingList
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDrawAttackingList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDrawAttackingList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateEnemyVisionFog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::UpdateEnemyVisionFog(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateEnemyVisionFog");

	Params::BP_EnemyManager_C_UpdateEnemyVisionFog Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugSetHpImmediate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::DebugSetHpImmediate(float Value, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugSetHpImmediate");

	Params::BP_EnemyManager_C_DebugSetHpImmediate Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugSetHpRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::DebugSetHpRate(float Value, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugSetHpRate");

	Params::BP_EnemyManager_C_DebugSetHpRate Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.StopEnemyAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::StopEnemyAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "StopEnemyAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetEm8300Manager
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Manager                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetEm8300Manager(class AActor* Manager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetEm8300Manager");

	Params::BP_EnemyManager_C_SetEm8300Manager Parms{};

	Parms.Manager = Manager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsBattleCourtMort
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsCourtMort                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsBattleCourtMort(bool* Param_IsCourtMort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsBattleCourtMort");

	Params::BP_EnemyManager_C_IsBattleCourtMort Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsCourtMort != nullptr)
		*Param_IsCourtMort = Parms.Param_IsCourtMort;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetBattleCourtMort
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsCourtMort                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetBattleCourtMort(bool Param_IsCourtMort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetBattleCourtMort");

	Params::BP_EnemyManager_C_SetBattleCourtMort Parms{};

	Parms.Param_IsCourtMort = Param_IsCourtMort;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetCourtMortActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetCourtMortActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetCourtMortActor");

	Params::BP_EnemyManager_C_SetCourtMortActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetCourtMortActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetCourtMortActor(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetCourtMortActor");

	Params::BP_EnemyManager_C_GetCourtMortActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugCallUniqueEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventNo                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::DebugCallUniqueEvent(int32 EventNo, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugCallUniqueEvent");

	Params::BP_EnemyManager_C_DebugCallUniqueEvent Parms{};

	Parms.EventNo = EventNo;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.RegisterVisionFogArea
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::RegisterVisionFogArea(const struct FVector& Location, float Radius, const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RegisterVisionFogArea");

	Params::BP_EnemyManager_C_RegisterVisionFogArea Parms{};

	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UnregisterVisionFogArea
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::UnregisterVisionFogArea(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UnregisterVisionFogArea");

	Params::BP_EnemyManager_C_UnregisterVisionFogArea Parms{};

	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetVisionFogAreaList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVisionFogAreaInfo>       Param_VisionFogAreaList                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetVisionFogAreaList(TArray<struct FVisionFogAreaInfo>* Param_VisionFogAreaList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetVisionFogAreaList");

	Params::BP_EnemyManager_C_GetVisionFogAreaList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_VisionFogAreaList != nullptr)
		*Param_VisionFogAreaList = std::move(Parms.Param_VisionFogAreaList);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetVisionFogAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAction                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetVisionFogAction(bool bAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetVisionFogAction");

	Params::BP_EnemyManager_C_SetVisionFogAction Parms{};

	Parms.bAction = bAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsVisionFogAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bAction                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsVisionFogAction(bool* bAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsVisionFogAction");

	Params::BP_EnemyManager_C_IsVisionFogAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAction != nullptr)
		*bAction = Parms.bAction;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetNotAcceptVisionFogAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::SetNotAcceptVisionFogAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetNotAcceptVisionFogAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CheckUniqueBrainCrash
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBoss                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsGeneral                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RequestJudgmentUniqueCoolTime                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RequestJudgmentSearchSafePoint                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::CheckUniqueBrainCrash(bool* IsBoss, bool* IsGeneral, bool* RequestJudgmentUniqueCoolTime, bool* RequestJudgmentSearchSafePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CheckUniqueBrainCrash");

	Params::BP_EnemyManager_C_CheckUniqueBrainCrash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBoss != nullptr)
		*IsBoss = Parms.IsBoss;

	if (IsGeneral != nullptr)
		*IsGeneral = Parms.IsGeneral;

	if (RequestJudgmentUniqueCoolTime != nullptr)
		*RequestJudgmentUniqueCoolTime = Parms.RequestJudgmentUniqueCoolTime;

	if (RequestJudgmentSearchSafePoint != nullptr)
		*RequestJudgmentSearchSafePoint = Parms.RequestJudgmentSearchSafePoint;
}


// Function BP_EnemyManager.BP_EnemyManager_C.InitializeUniqueBrainCrashPlayedList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::InitializeUniqueBrainCrashPlayedList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "InitializeUniqueBrainCrashPlayedList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CreateUniqueBrainCrashPlayedListKeyName
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 TargetEnemy                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             KeyName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::CreateUniqueBrainCrashPlayedListKeyName(class ARSCharacterBase* TargetEnemy, class FName* KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CreateUniqueBrainCrashPlayedListKeyName");

	Params::BP_EnemyManager_C_CreateUniqueBrainCrashPlayedListKeyName Parms{};

	Parms.TargetEnemy = TargetEnemy;

	UObject::ProcessEvent(Func, &Parms);

	if (KeyName != nullptr)
		*KeyName = Parms.KeyName;
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateUniqueBrainCrashPlayedList
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::UpdateUniqueBrainCrashPlayedList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateUniqueBrainCrashPlayedList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateUniqueBrainCrashFlag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUnique                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::UpdateUniqueBrainCrashFlag(bool IsUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateUniqueBrainCrashFlag");

	Params::BP_EnemyManager_C_UpdateUniqueBrainCrashFlag Parms{};

	Parms.IsUnique = IsUnique;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SelectBrainCrashMultiCharacters
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             LockTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ARSBattleCharacter_C*>     TargetCharactersList                                   (Parm, OutParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::SelectBrainCrashMultiCharacters(class ARSBattleCharacter_C* LockTarget, TArray<class ARSBattleCharacter_C*>* TargetCharactersList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SelectBrainCrashMultiCharacters");

	Params::BP_EnemyManager_C_SelectBrainCrashMultiCharacters Parms{};

	Parms.LockTarget = LockTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetCharactersList != nullptr)
		*TargetCharactersList = std::move(Parms.TargetCharactersList);
}


// Function BP_EnemyManager.BP_EnemyManager_C.StartCourtMortBattle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::StartCourtMortBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "StartCourtMortBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetAddedEnemy
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ARSBattleCharacter_C*>     LocalSelectCharacters                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class ARSBattleCharacter_C*>     DifferenceCharacters                                   (Parm, OutParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetAddedEnemy(TArray<class ARSBattleCharacter_C*>& LocalSelectCharacters, TArray<class ARSBattleCharacter_C*>* DifferenceCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetAddedEnemy");

	Params::BP_EnemyManager_C_GetAddedEnemy Parms{};

	Parms.LocalSelectCharacters = std::move(LocalSelectCharacters);

	UObject::ProcessEvent(Func, &Parms);

	LocalSelectCharacters = std::move(Parms.LocalSelectCharacters);

	if (DifferenceCharacters != nullptr)
		*DifferenceCharacters = std::move(Parms.DifferenceCharacters);
}


// Function BP_EnemyManager.BP_EnemyManager_C.NotifyEndDuelPole
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::NotifyEndDuelPole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "NotifyEndDuelPole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetNaomiActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetNaomiActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetNaomiActor");

	Params::BP_EnemyManager_C_SetNaomiActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.NaomiChangePhaseParamSetting
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::NaomiChangePhaseParamSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "NaomiChangePhaseParamSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RepopEntry
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Probability                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ClassBpPath                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          InitPos                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveArea                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Group                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroup                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UniqueId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSCharacterBase*                 NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::RepopEntry(float Time, float Range, int32 Probability, const class FString& ClassBpPath, const struct FVector& InitPos, float MoveArea, class FName LevelName, int32 Group, int32 SubGroup, class FName UniqueId, class FName Level, int32 DropId, class ARSCharacterBase* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RepopEntry");

	Params::BP_EnemyManager_C_RepopEntry Parms{};

	Parms.Time = Time;
	Parms.Range = Range;
	Parms.Probability = Probability;
	Parms.ClassBpPath = std::move(ClassBpPath);
	Parms.InitPos = std::move(InitPos);
	Parms.MoveArea = MoveArea;
	Parms.LevelName = LevelName;
	Parms.Group = Group;
	Parms.SubGroup = SubGroup;
	Parms.UniqueId = UniqueId;
	Parms.Level = Level;
	Parms.DropId = DropId;
	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RepopUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::RepopUpdate(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RepopUpdate");

	Params::BP_EnemyManager_C_RepopUpdate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CheckEventBrainCrash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEvent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::CheckEventBrainCrash(bool* IsEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CheckEventBrainCrash");

	Params::BP_EnemyManager_C_CheckEventBrainCrash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEvent != nullptr)
		*IsEvent = Parms.IsEvent;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetBrainCrashEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Event                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetBrainCrashEvent(class UClass** Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetBrainCrashEvent");

	Params::BP_EnemyManager_C_GetBrainCrashEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = Parms.Event;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetBrainCrashTargetChara
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 TargetChara                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetBrainCrashTargetChara(class ARSCharacterBase** TargetChara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetBrainCrashTargetChara");

	Params::BP_EnemyManager_C_GetBrainCrashTargetChara Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetChara != nullptr)
		*TargetChara = Parms.TargetChara;
}


// Function BP_EnemyManager.BP_EnemyManager_C.RepopClear
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::RepopClear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RepopClear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RepopCheckInsideCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MyPos                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInside                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::RepopCheckInsideCamera(const struct FVector& MyPos, bool* IsInside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RepopCheckInsideCamera");

	Params::BP_EnemyManager_C_RepopCheckInsideCamera Parms{};

	Parms.MyPos = std::move(MyPos);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInside != nullptr)
		*IsInside = Parms.IsInside;
}


// Function BP_EnemyManager.BP_EnemyManager_C.EntryAreaCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleEnemy_C*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EntryAreaCheck(class ARSBattleEnemy_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EntryAreaCheck");

	Params::BP_EnemyManager_C_EntryAreaCheck Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateAreaCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::UpdateAreaCheck(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateAreaCheck");

	Params::BP_EnemyManager_C_UpdateAreaCheck Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EndAreaCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleEnemy_C*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EndAreaCheck(class ARSBattleEnemy_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EndAreaCheck");

	Params::BP_EnemyManager_C_EndAreaCheck Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetBrainCrashEventFlag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::SetBrainCrashEventFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetBrainCrashEventFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetEnableOutOfBattleField
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetEnableOutOfBattleField(bool SetEnable, int32 GroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetEnableOutOfBattleField");

	Params::BP_EnemyManager_C_SetEnableOutOfBattleField Parms{};

	Parms.SetEnable = SetEnable;
	Parms.GroupID = GroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.InitDropItem
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::InitDropItem(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "InitDropItem");

	Params::BP_EnemyManager_C_InitDropItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnReturnFromPartyMenu
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::OnReturnFromPartyMenu(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnReturnFromPartyMenu");

	Params::BP_EnemyManager_C_OnReturnFromPartyMenu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.BackupCharacterParameterToTagName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::BackupCharacterParameterToTagName(class FName TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "BackupCharacterParameterToTagName");

	Params::BP_EnemyManager_C_BackupCharacterParameterToTagName Parms{};

	Parms.TagName = TagName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RestoreCharacterParameterToTagName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::RestoreCharacterParameterToTagName(class FName TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RestoreCharacterParameterToTagName");

	Params::BP_EnemyManager_C_RestoreCharacterParameterToTagName Parms{};

	Parms.TagName = TagName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetBrainCrashHUDTarget_Window
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 TargetChara                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnablePlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::SetBrainCrashHUDTarget_Window(class ARSCharacterBase* TargetChara, bool EnablePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetBrainCrashHUDTarget_Window");

	Params::BP_EnemyManager_C_SetBrainCrashHUDTarget_Window Parms{};

	Parms.TargetChara = TargetChara;
	Parms.EnablePlayer = EnablePlayer;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DestroyEnemyWithTagName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::DestroyEnemyWithTagName(class FName TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DestroyEnemyWithTagName");

	Params::BP_EnemyManager_C_DestroyEnemyWithTagName Parms{};

	Parms.TagName = TagName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CheckRepopCharaInList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CharaUniqueId                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inlist                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::CheckRepopCharaInList(class FName CharaUniqueId, bool* Inlist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CheckRepopCharaInList");

	Params::BP_EnemyManager_C_CheckRepopCharaInList Parms{};

	Parms.CharaUniqueId = CharaUniqueId;

	UObject::ProcessEvent(Func, &Parms);

	if (Inlist != nullptr)
		*Inlist = Parms.Inlist;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetRepopOwner
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleEnemy_C*                 Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::SetRepopOwner(class ARSBattleEnemy_C* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetRepopOwner");

	Params::BP_EnemyManager_C_SetRepopOwner Parms{};

	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RepopSpawn_FromNative
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEnemyRepopInfo                  EnemyRepopInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Group                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGroup                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::RepopSpawn_FromNative(const struct FEnemyRepopInfo& EnemyRepopInfo, int32 Group, int32 SubGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RepopSpawn_FromNative");

	Params::BP_EnemyManager_C_RepopSpawn_FromNative Parms{};

	Parms.EnemyRepopInfo = std::move(EnemyRepopInfo);
	Parms.Group = Group;
	Parms.SubGroup = SubGroup;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.OnChangeArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChangeAreaStatus                       ChangeState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChange                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::OnChangeArea(EChangeAreaStatus ChangeState, bool IsChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "OnChangeArea");

	Params::BP_EnemyManager_C_OnChangeArea Parms{};

	Parms.ChangeState = ChangeState;
	Parms.IsChange = IsChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetBattleBossEnemyUniqueName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bExist                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             UniqueName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetBattleBossEnemyUniqueName(bool* bExist, class FName* UniqueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetBattleBossEnemyUniqueName");

	Params::BP_EnemyManager_C_GetBattleBossEnemyUniqueName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExist != nullptr)
		*bExist = Parms.bExist;

	if (UniqueName != nullptr)
		*UniqueName = Parms.UniqueName;
}


// Function BP_EnemyManager.BP_EnemyManager_C.EntryGroundCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleEnemy_C*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EntryGroundCheck(class ARSBattleEnemy_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EntryGroundCheck");

	Params::BP_EnemyManager_C_EntryGroundCheck Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateGroundCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::UpdateGroundCheck(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateGroundCheck");

	Params::BP_EnemyManager_C_UpdateGroundCheck Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EndGroundCheck
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleEnemy_C*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EndGroundCheck(class ARSBattleEnemy_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EndGroundCheck");

	Params::BP_EnemyManager_C_EndGroundCheck Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RegisterEndVisionFogComp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EnemyVisionFogComponent_C*    InVisionFogComp                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::RegisterEndVisionFogComp(class UBP_EnemyVisionFogComponent_C* InVisionFogComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RegisterEndVisionFogComp");

	Params::BP_EnemyManager_C_RegisterEndVisionFogComp Parms{};

	Parms.InVisionFogComp = InVisionFogComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateEndVisionFogComp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::UpdateEndVisionFogComp(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateEndVisionFogComp");

	Params::BP_EnemyManager_C_UpdateEndVisionFogComp Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.PreCheckSetEnableOutOfBattlefield
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::PreCheckSetEnableOutOfBattlefield(int32 GroupID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "PreCheckSetEnableOutOfBattlefield");

	Params::BP_EnemyManager_C_PreCheckSetEnableOutOfBattlefield Parms{};

	Parms.GroupID = GroupID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetStartBattleEm8300
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStart                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetStartBattleEm8300(bool bStart, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetStartBattleEm8300");

	Params::BP_EnemyManager_C_SetStartBattleEm8300 Parms{};

	Parms.bStart = bStart;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.ClearCourtMortBattle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::ClearCourtMortBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "ClearCourtMortBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDispDamageLog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDispDamageLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDispDamageLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.Check Create Avatar
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewParam1                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::Check_Create_Avatar(class AActor* NewParam1, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "Check Create Avatar");

	Params::BP_EnemyManager_C_Check_Create_Avatar Parms{};

	Parms.NewParam1 = NewParam1;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_EnemyManager.BP_EnemyManager_C.EntryCreateAvatar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EntryCreateAvatar(class AActor* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EntryCreateAvatar");

	Params::BP_EnemyManager_C_EntryCreateAvatar Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.RemoveCreateAvatar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::RemoveCreateAvatar(class AActor* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "RemoveCreateAvatar");

	Params::BP_EnemyManager_C_RemoveCreateAvatar Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.ChangeEnpcUniqueThinkTable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::ChangeEnpcUniqueThinkTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "ChangeEnpcUniqueThinkTable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsBossBattlefield
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InBoss                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsBossBattlefield(int32 GroupID, bool* InBoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsBossBattlefield");

	Params::BP_EnemyManager_C_IsBossBattlefield Parms{};

	Parms.GroupID = GroupID;

	UObject::ProcessEvent(Func, &Parms);

	if (InBoss != nullptr)
		*InBoss = Parms.InBoss;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetCanPlayCutSceneFromNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::GetCanPlayCutSceneFromNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetCanPlayCutSceneFromNative");

	Params::BP_EnemyManager_C_GetCanPlayCutSceneFromNative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsNeedFrameWait");

	Params::BP_EnemyManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDispTIckControl
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDispTIckControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDispTIckControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDispSettingInfo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDispSettingInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDispSettingInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetRepopExtendInList_FromNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEnemyRepopExtendInfo            EnemyRepopExtendInfo                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class ARSCharacterBase*                 RepopTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::SetRepopExtendInList_FromNative(struct FEnemyRepopExtendInfo& EnemyRepopExtendInfo, class ARSCharacterBase* RepopTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetRepopExtendInList_FromNative");

	Params::BP_EnemyManager_C_SetRepopExtendInList_FromNative Parms{};

	Parms.EnemyRepopExtendInfo = std::move(EnemyRepopExtendInfo);
	Parms.RepopTarget = RepopTarget;

	UObject::ProcessEvent(Func, &Parms);

	EnemyRepopExtendInfo = std::move(Parms.EnemyRepopExtendInfo);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDispGroupInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDispGroupInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDispGroupInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdateTriggerEffect
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::UpdateTriggerEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdateTriggerEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EnableUniqueBrainCrashPlayedListFromActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 CrashEnemy                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::EnableUniqueBrainCrashPlayedListFromActor(class ARSCharacterBase* CrashEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EnableUniqueBrainCrashPlayedListFromActor");

	Params::BP_EnemyManager_C_EnableUniqueBrainCrashPlayedListFromActor Parms{};

	Parms.CrashEnemy = CrashEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.UpdatePauseBrainCrash
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::UpdatePauseBrainCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "UpdatePauseBrainCrash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CheckPauseBrainCrash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PauseActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::CheckPauseBrainCrash(class AActor* PauseActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CheckPauseBrainCrash");

	Params::BP_EnemyManager_C_CheckPauseBrainCrash Parms{};

	Parms.PauseActor = PauseActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsAbleCountSpawnCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             EnemyActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsConditionCheckNow                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCountOK                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsAbleCountSpawnCondition(class ARSBattleCharacter_C* EnemyActor, bool IsConditionCheckNow, bool* IsCountOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsAbleCountSpawnCondition");

	Params::BP_EnemyManager_C_IsAbleCountSpawnCondition Parms{};

	Parms.EnemyActor = EnemyActor;
	Parms.IsConditionCheckNow = IsConditionCheckNow;

	UObject::ProcessEvent(Func, &Parms);

	if (IsCountOK != nullptr)
		*IsCountOK = Parms.IsCountOK;
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDispRareSpawnCondisionInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugDispRareSpawnCondisionInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDispRareSpawnCondisionInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.Start Crash Vision Hit Effect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::Start_Crash_Vision_Hit_Effect(TArray<class AActor*>& ActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "Start Crash Vision Hit Effect");

	Params::BP_EnemyManager_C_Start_Crash_Vision_Hit_Effect Parms{};

	Parms.ActorList = std::move(ActorList);

	UObject::ProcessEvent(Func, &Parms);

	ActorList = std::move(Parms.ActorList);
}


// Function BP_EnemyManager.BP_EnemyManager_C.Start Crash Vision Hit UniqueEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::Start_Crash_Vision_Hit_UniqueEffect(TArray<class AActor*>& ActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "Start Crash Vision Hit UniqueEffect");

	Params::BP_EnemyManager_C_Start_Crash_Vision_Hit_UniqueEffect Parms{};

	Parms.ActorList = std::move(ActorList);

	UObject::ProcessEvent(Func, &Parms);

	ActorList = std::move(Parms.ActorList);
}


// Function BP_EnemyManager.BP_EnemyManager_C.StartCrashVisionDead
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::StartCrashVisionDead(TArray<class AActor*>& ActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "StartCrashVisionDead");

	Params::BP_EnemyManager_C_StartCrashVisionDead Parms{};

	Parms.ActorList = std::move(ActorList);

	UObject::ProcessEvent(Func, &Parms);

	ActorList = std::move(Parms.ActorList);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugCallEnemyRarePopLocationSpawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::DebugCallEnemyRarePopLocationSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugCallEnemyRarePopLocationSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SimulatorStartOpen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::SimulatorStartOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SimulatorStartOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SimulatorStartClose
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EnemyManager_C::SimulatorStartClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SimulatorStartClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EnemyManager.BP_EnemyManager_C.CallHiddenBossCutScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::CallHiddenBossCutScene(bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "CallHiddenBossCutScene");

	Params::BP_EnemyManager_C_CallHiddenBossCutScene Parms{};

	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.SimulatorCancelMission
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::SimulatorCancelMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SimulatorCancelMission");

	Params::BP_EnemyManager_C_SimulatorCancelMission Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsBattleCourtMortNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::IsBattleCourtMortNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsBattleCourtMortNative");

	Params::BP_EnemyManager_C_IsBattleCourtMortNative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.SetPlayingEnpcSequence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Playing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::SetPlayingEnpcSequence(bool Playing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "SetPlayingEnpcSequence");

	Params::BP_EnemyManager_C_SetPlayingEnpcSequence Parms{};

	Parms.Playing = Playing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsPlayingEnpcSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPlaying                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsPlayingEnpcSequence(bool* bPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsPlayingEnpcSequence");

	Params::BP_EnemyManager_C_IsPlayingEnpcSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPlaying != nullptr)
		*bPlaying = Parms.bPlaying;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetBrainCrashDamageLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetBrainCrashDamageLocation(struct FVector* WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetBrainCrashDamageLocation");

	Params::BP_EnemyManager_C_GetBrainCrashDamageLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);
}


// Function BP_EnemyManager.BP_EnemyManager_C.EventManagerStart
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableTick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::EventManagerStart(bool EnableTick, bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EventManagerStart");

	Params::BP_EnemyManager_C_EventManagerStart Parms{};

	Parms.EnableTick = EnableTick;
	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.EventManagerEnd
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestoreEnableTick                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RestoreVisibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EnemyManager_C::EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "EventManagerEnd");

	Params::BP_EnemyManager_C_EventManagerEnd Parms{};

	Parms.RestoreEnableTick = RestoreEnableTick;
	Parms.RestoreVisibility = RestoreVisibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsBrainCrashAccessEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsBrainCrashAccessEnable(bool* Return) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsBrainCrashAccessEnable");

	Params::BP_EnemyManager_C_IsBrainCrashAccessEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetBrainCrashTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class ARSCharacterBase*>         TargetsList                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetBrainCrashTarget(TArray<class ARSCharacterBase*>* TargetsList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetBrainCrashTarget");

	Params::BP_EnemyManager_C_GetBrainCrashTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetsList != nullptr)
		*TargetsList = std::move(Parms.TargetsList);
}


// Function BP_EnemyManager.BP_EnemyManager_C.DebugDrawInfomation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::DebugDrawInfomation(bool* Dummy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "DebugDrawInfomation");

	Params::BP_EnemyManager_C_DebugDrawInfomation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_EnemyManager.BP_EnemyManager_C.GetEm8300Manager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Manager                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EnemyManager_C::GetEm8300Manager(class AActor** Manager) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "GetEm8300Manager");

	Params::BP_EnemyManager_C_GetEm8300Manager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Manager != nullptr)
		*Manager = Parms.Manager;
}


// Function BP_EnemyManager.BP_EnemyManager_C.IsStartBattleEm8300
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bStart                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EnemyManager_C::IsStartBattleEm8300(bool* bStart) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EnemyManager_C", "IsStartBattleEm8300");

	Params::BP_EnemyManager_C_IsStartBattleEm8300 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bStart != nullptr)
		*bStart = Parms.bStart;
}

}

