#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CaptureBG

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SStaticBGEffectParameter_structs.hpp"
#include "ERenderTargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CaptureBG.BP_CaptureBG_C
// 0x01C8 (0x03F8 - 0x0230)
class ABP_CaptureBG_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SM_static_pl_bg_16_9;                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_co0300;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSSceneCaptureComponent2D*             RSSceneCaptureComponent2D;                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaTimeline_Track_73321D8346DCED1672DCDEB05B1B477A; // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AlphaTimeline__Direction_73321D8346DCED1672DCDEB05B1B477A; // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4620[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AlphaTimeline;                                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CycleEffectTimeline_Track_4D9120E94EF8CCF4B59AC7B350FD61B2; // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CycleEffectTimeline__Direction_4D9120E94EF8CCF4B59AC7B350FD61B2; // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4621[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CycleEffectTimeline;                               // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       MIDList;                                           // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         VecAnimNamePath;                                   // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  VecIsAnimationLoop;                                // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CycleEffectNo;                                     // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CycleEffectParameterName;                          // 0x02BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4622[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BlockNoiseValueCurve;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockNoiseValueTime;                               // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4623[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BlockNoiseValueCurve2;                             // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockNoiseValueTime2;                              // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockNoiseValueMaxTime;                            // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockNoiseValueMaxTime2;                           // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlockNoiseUVScale;                                 // 0x02EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSStaticBGEffectParameter              EffectParameter;                                   // 0x02F8(0x001C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EffectEventMode;                                   // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4624[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CurrentFrameParticle;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           BGMeshAsset;                                       // 0x0320(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         BGParticleAsset;                                   // 0x0348(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UParticleSystem*                        BGParticleObject;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      LinearToSRGBMaterialAsset;                         // 0x0378(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      BGMaterialAsset;                                   // 0x03A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       ParticleMIDArray;                                  // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_EventCaptureCamera_C*               EventCaptureCamera;                                // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  LevelSequenceActor;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LinearToSRGBMaterial;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureScene;                                     // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWaitSequenceCaptureScene;                         // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CaptureBG(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StopWaitSequencerNoCapture();
	void CaptureSceneBGForLevelSequencer(class ULevelSequence* InSequence, float NewPlaybackPosition);
	void StopWaitSequencer();
	void PrivateCapturePost();
	void StartBGAlphaCurve(class UCurveFloat* Curve);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Private_EventEffectStart();
	void Private_EventEffectEnd();
	void Private_TickBlockNoise(float Delta_Seconds);
	void Private_EndBlockNoise();
	void Private_StartBlockNoise();
	void Private_StopEffectCycle();
	void Private_StartEffectCycle();
	void AlphaTimeline__UpdateFunc();
	void AlphaTimeline__FinishedFunc();
	void CycleEffectTimeline__UpdateFunc();
	void CycleEffectTimeline__FinishedFunc();
	void CaptureBG();
	void PlayBoardBGAnimation(const class FString& boardAnimationName, bool IsLoop, bool IsAddMotion);
	class UAnimationAsset* GetAnimSequenceForAnimNamePath(const class FString& Path);
	void AddBordBGAnimation(const class FString& boardAnimationName, bool IsLoop);
	void IsEndMotion(bool* Param_IsEndMotion);
	void StartEvent();
	void EndEvent();
	void UpdateBlockNoise(float DeltaSeconds);
	void InitBlockNoise();
	void UpdateBlockNoiseOne(float DeltaSeconds, float& Time, float& MaxTime);
	void SetupEventEffect(class UCurveFloat* Curve, bool IsLoop);
	void EffectFringe(class UCurveFloat* Curve, bool IsLoop);
	void EffectGlitch(class UCurveFloat* Curve, bool IsLoop);
	void EffectNoise(class UCurveFloat* Curve, bool IsLoop);
	void EffectScanline(class UCurveFloat* Curve, bool IsLoop);
	void DebugEffectFringe();
	void DebugEffectGlitch();
	void DebugEffectNoise();
	void DebugEffectScanline();
	void EventEnd();
	void LoadAsset();
	void SetTicks(bool Enabled);
	void SequenceCaptureBG(class ULevelSequence* InSequence, float NewPlaybackPosition);
	void SetupPPM(class URSSceneCaptureComponent2D* SceneCapture, class UCineCameraComponent* AddPostProcess);
	void OnResetRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget);
	void ClearEventCaptureCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CaptureBG_C">();
	}
	static class ABP_CaptureBG_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CaptureBG_C>();
	}
};
static_assert(alignof(ABP_CaptureBG_C) == 0x000008, "Wrong alignment on ABP_CaptureBG_C");
static_assert(sizeof(ABP_CaptureBG_C) == 0x0003F8, "Wrong size on ABP_CaptureBG_C");
static_assert(offsetof(ABP_CaptureBG_C, UberGraphFrame) == 0x000230, "Member 'ABP_CaptureBG_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, SM_static_pl_bg_16_9) == 0x000238, "Member 'ABP_CaptureBG_C::SM_static_pl_bg_16_9' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, SM_co0300) == 0x000240, "Member 'ABP_CaptureBG_C::SM_co0300' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, RSSceneCaptureComponent2D) == 0x000248, "Member 'ABP_CaptureBG_C::RSSceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, Camera) == 0x000250, "Member 'ABP_CaptureBG_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, DefaultSceneRoot) == 0x000258, "Member 'ABP_CaptureBG_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, AlphaTimeline_Track_73321D8346DCED1672DCDEB05B1B477A) == 0x000260, "Member 'ABP_CaptureBG_C::AlphaTimeline_Track_73321D8346DCED1672DCDEB05B1B477A' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, AlphaTimeline__Direction_73321D8346DCED1672DCDEB05B1B477A) == 0x000264, "Member 'ABP_CaptureBG_C::AlphaTimeline__Direction_73321D8346DCED1672DCDEB05B1B477A' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, AlphaTimeline) == 0x000268, "Member 'ABP_CaptureBG_C::AlphaTimeline' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, CycleEffectTimeline_Track_4D9120E94EF8CCF4B59AC7B350FD61B2) == 0x000270, "Member 'ABP_CaptureBG_C::CycleEffectTimeline_Track_4D9120E94EF8CCF4B59AC7B350FD61B2' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, CycleEffectTimeline__Direction_4D9120E94EF8CCF4B59AC7B350FD61B2) == 0x000274, "Member 'ABP_CaptureBG_C::CycleEffectTimeline__Direction_4D9120E94EF8CCF4B59AC7B350FD61B2' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, CycleEffectTimeline) == 0x000278, "Member 'ABP_CaptureBG_C::CycleEffectTimeline' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, MIDList) == 0x000280, "Member 'ABP_CaptureBG_C::MIDList' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, RenderTarget) == 0x000290, "Member 'ABP_CaptureBG_C::RenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, VecAnimNamePath) == 0x000298, "Member 'ABP_CaptureBG_C::VecAnimNamePath' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, VecIsAnimationLoop) == 0x0002A8, "Member 'ABP_CaptureBG_C::VecIsAnimationLoop' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, CycleEffectNo) == 0x0002B8, "Member 'ABP_CaptureBG_C::CycleEffectNo' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, CycleEffectParameterName) == 0x0002BC, "Member 'ABP_CaptureBG_C::CycleEffectParameterName' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseValueCurve) == 0x0002C8, "Member 'ABP_CaptureBG_C::BlockNoiseValueCurve' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseValueTime) == 0x0002D0, "Member 'ABP_CaptureBG_C::BlockNoiseValueTime' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseValueCurve2) == 0x0002D8, "Member 'ABP_CaptureBG_C::BlockNoiseValueCurve2' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseValueTime2) == 0x0002E0, "Member 'ABP_CaptureBG_C::BlockNoiseValueTime2' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseValueMaxTime) == 0x0002E4, "Member 'ABP_CaptureBG_C::BlockNoiseValueMaxTime' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseValueMaxTime2) == 0x0002E8, "Member 'ABP_CaptureBG_C::BlockNoiseValueMaxTime2' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BlockNoiseUVScale) == 0x0002EC, "Member 'ABP_CaptureBG_C::BlockNoiseUVScale' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, EffectParameter) == 0x0002F8, "Member 'ABP_CaptureBG_C::EffectParameter' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, EffectEventMode) == 0x000314, "Member 'ABP_CaptureBG_C::EffectEventMode' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, CurrentFrameParticle) == 0x000318, "Member 'ABP_CaptureBG_C::CurrentFrameParticle' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BGMeshAsset) == 0x000320, "Member 'ABP_CaptureBG_C::BGMeshAsset' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BGParticleAsset) == 0x000348, "Member 'ABP_CaptureBG_C::BGParticleAsset' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BGParticleObject) == 0x000370, "Member 'ABP_CaptureBG_C::BGParticleObject' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, LinearToSRGBMaterialAsset) == 0x000378, "Member 'ABP_CaptureBG_C::LinearToSRGBMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, BGMaterialAsset) == 0x0003A0, "Member 'ABP_CaptureBG_C::BGMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, ParticleMIDArray) == 0x0003C8, "Member 'ABP_CaptureBG_C::ParticleMIDArray' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, EventCaptureCamera) == 0x0003D8, "Member 'ABP_CaptureBG_C::EventCaptureCamera' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, LevelSequenceActor) == 0x0003E0, "Member 'ABP_CaptureBG_C::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, LinearToSRGBMaterial) == 0x0003E8, "Member 'ABP_CaptureBG_C::LinearToSRGBMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, bCaptureScene) == 0x0003F0, "Member 'ABP_CaptureBG_C::bCaptureScene' has a wrong offset!");
static_assert(offsetof(ABP_CaptureBG_C, bWaitSequenceCaptureScene) == 0x0003F1, "Member 'ABP_CaptureBG_C::bWaitSequenceCaptureScene' has a wrong offset!");

}

